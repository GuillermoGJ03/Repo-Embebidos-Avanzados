
Ejercicio_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a520  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800a7c0  0800a7c0  0001a7c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad64  0800ad64  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad64  0800ad64  0001ad64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad6c  0800ad6c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad6c  0800ad6c  0001ad6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad70  0800ad70  0001ad70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800ad74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d08  240001e0  0800af54  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ee8  0800af54  00020ee8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aea5  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d47  00000000  00000000  0003b0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0003de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  0003f2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b342  00000000  00000000  00040678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3fe  00000000  00000000  0007b9ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00186a84  00000000  00000000  00095db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021c83c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006854  00000000  00000000  0021c88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a7a8 	.word	0x0800a7a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800a7a8 	.word	0x0800a7a8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c4;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af02      	add	r7, sp, #8
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f023 030f 	bic.w	r3, r3, #15
 80007d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	f043 030c 	orr.w	r3, r3, #12
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80007ec:	7bbb      	ldrb	r3, [r7, #14]
 80007ee:	f043 030c 	orr.w	r3, r3, #12
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80007f6:	7bbb      	ldrb	r3, [r7, #14]
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000800:	f107 0208 	add.w	r2, r7, #8
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2304      	movs	r3, #4
 800080a:	214e      	movs	r1, #78	; 0x4e
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <lcd_send_cmd+0x5c>)
 800080e:	f001 ffe1 	bl	80027d4 <HAL_I2C_Master_Transmit>
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	240001fc 	.word	0x240001fc

08000820 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af02      	add	r7, sp, #8
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f023 030f 	bic.w	r3, r3, #15
 8000830:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	011b      	lsls	r3, r3, #4
 8000836:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	f043 030d 	orr.w	r3, r3, #13
 800083e:	b2db      	uxtb	r3, r3
 8000840:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	f043 0309 	orr.w	r3, r3, #9
 8000848:	b2db      	uxtb	r3, r3
 800084a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	f043 030d 	orr.w	r3, r3, #13
 8000852:	b2db      	uxtb	r3, r3
 8000854:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000856:	7bbb      	ldrb	r3, [r7, #14]
 8000858:	f043 0309 	orr.w	r3, r3, #9
 800085c:	b2db      	uxtb	r3, r3
 800085e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000860:	f107 0208 	add.w	r2, r7, #8
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2304      	movs	r3, #4
 800086a:	214e      	movs	r1, #78	; 0x4e
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <lcd_send_data+0x5c>)
 800086e:	f001 ffb1 	bl	80027d4 <HAL_I2C_Master_Transmit>
}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	240001fc 	.word	0x240001fc

08000880 <lcd_clear>:

void lcd_clear (void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000886:	2080      	movs	r0, #128	; 0x80
 8000888:	f7ff ff9a 	bl	80007c0 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	e005      	b.n	800089e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000892:	2020      	movs	r0, #32
 8000894:	f7ff ffc4 	bl	8000820 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3301      	adds	r3, #1
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b45      	cmp	r3, #69	; 0x45
 80008a2:	ddf6      	ble.n	8000892 <lcd_clear+0x12>
	}
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	6039      	str	r1, [r7, #0]
    switch (row)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d003      	beq.n	80008c6 <lcd_put_cur+0x18>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d005      	beq.n	80008d0 <lcd_put_cur+0x22>
 80008c4:	e009      	b.n	80008da <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	603b      	str	r3, [r7, #0]
            break;
 80008ce:	e004      	b.n	80008da <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80008d6:	603b      	str	r3, [r7, #0]
            break;
 80008d8:	bf00      	nop
    }

    lcd_send_cmd (col);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff6e 	bl	80007c0 <lcd_send_cmd>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <lcd_init>:


void lcd_init (void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80008f0:	2032      	movs	r0, #50	; 0x32
 80008f2:	f001 fb8d 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x30);
 80008f6:	2030      	movs	r0, #48	; 0x30
 80008f8:	f7ff ff62 	bl	80007c0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80008fc:	2005      	movs	r0, #5
 80008fe:	f001 fb87 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000902:	2030      	movs	r0, #48	; 0x30
 8000904:	f7ff ff5c 	bl	80007c0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000908:	2001      	movs	r0, #1
 800090a:	f001 fb81 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x30);
 800090e:	2030      	movs	r0, #48	; 0x30
 8000910:	f7ff ff56 	bl	80007c0 <lcd_send_cmd>
	HAL_Delay(10);
 8000914:	200a      	movs	r0, #10
 8000916:	f001 fb7b 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800091a:	2020      	movs	r0, #32
 800091c:	f7ff ff50 	bl	80007c0 <lcd_send_cmd>
	HAL_Delay(10);
 8000920:	200a      	movs	r0, #10
 8000922:	f001 fb75 	bl	8002010 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000926:	2028      	movs	r0, #40	; 0x28
 8000928:	f7ff ff4a 	bl	80007c0 <lcd_send_cmd>
	HAL_Delay(1);
 800092c:	2001      	movs	r0, #1
 800092e:	f001 fb6f 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000932:	2008      	movs	r0, #8
 8000934:	f7ff ff44 	bl	80007c0 <lcd_send_cmd>
	HAL_Delay(1);
 8000938:	2001      	movs	r0, #1
 800093a:	f001 fb69 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800093e:	2001      	movs	r0, #1
 8000940:	f7ff ff3e 	bl	80007c0 <lcd_send_cmd>
	HAL_Delay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f001 fb63 	bl	8002010 <HAL_Delay>
	HAL_Delay(1);
 800094a:	2001      	movs	r0, #1
 800094c:	f001 fb60 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000950:	2006      	movs	r0, #6
 8000952:	f7ff ff35 	bl	80007c0 <lcd_send_cmd>
	HAL_Delay(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f001 fb5a 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800095c:	200c      	movs	r0, #12
 800095e:	f7ff ff2f 	bl	80007c0 <lcd_send_cmd>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}

08000966 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800096e:	e006      	b.n	800097e <lcd_send_string+0x18>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff51 	bl	8000820 <lcd_send_data>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f4      	bne.n	8000970 <lcd_send_string+0xa>
}
 8000986:	bf00      	nop
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000996:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800099a:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800099c:	bf00      	nop
 800099e:	4b93      	ldr	r3, [pc, #588]	; (8000bec <main+0x25c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d004      	beq.n	80009b4 <main+0x24>
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	1e5a      	subs	r2, r3, #1
 80009ae:	60fa      	str	r2, [r7, #12]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	dcf4      	bgt.n	800099e <main+0xe>
  if ( timeout < 0 )
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	da01      	bge.n	80009be <main+0x2e>
  {
  Error_Handler();
 80009ba:	f001 f849 	bl	8001a50 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009be:	f001 fa95 	bl	8001eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c2:	f000 f93d 	bl	8000c40 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80009c6:	4b89      	ldr	r3, [pc, #548]	; (8000bec <main+0x25c>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	4a87      	ldr	r2, [pc, #540]	; (8000bec <main+0x25c>)
 80009ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d6:	4b85      	ldr	r3, [pc, #532]	; (8000bec <main+0x25c>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f001 fe37 	bl	8002658 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80009ea:	2100      	movs	r1, #0
 80009ec:	2000      	movs	r0, #0
 80009ee:	f001 fe4d 	bl	800268c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009f6:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009f8:	bf00      	nop
 80009fa:	4b7c      	ldr	r3, [pc, #496]	; (8000bec <main+0x25c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d104      	bne.n	8000a10 <main+0x80>
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	1e5a      	subs	r2, r3, #1
 8000a0a:	60fa      	str	r2, [r7, #12]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	dcf4      	bgt.n	80009fa <main+0x6a>
if ( timeout < 0 )
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	da01      	bge.n	8000a1a <main+0x8a>
{
Error_Handler();
 8000a16:	f001 f81b 	bl	8001a50 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1a:	f000 fab3 	bl	8000f84 <MX_GPIO_Init>
  MX_I2C4_Init();
 8000a1e:	f000 f989 	bl	8000d34 <MX_I2C4_Init>
  MX_TIM2_Init();
 8000a22:	f000 f9c7 	bl	8000db4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000a26:	f000 fa61 	bl	8000eec <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000a2a:	f000 fa11 	bl	8000e50 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  // Revisión de conexión del MPU6050
  HAL_StatusTypeDef status;
  status = HAL_I2C_IsDeviceReady(&hi2c4, MPU6050_ADDR, 1, 3000);
 8000a2e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a32:	2201      	movs	r2, #1
 8000a34:	21d0      	movs	r1, #208	; 0xd0
 8000a36:	486e      	ldr	r0, [pc, #440]	; (8000bf0 <main+0x260>)
 8000a38:	f002 f9ee 	bl	8002e18 <HAL_I2C_IsDeviceReady>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	72fb      	strb	r3, [r7, #11]
  if (status == HAL_OK) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000a40:	7afb      	ldrb	r3, [r7, #11]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d105      	bne.n	8000a52 <main+0xc2>
 8000a46:	2201      	movs	r2, #1
 8000a48:	2101      	movs	r1, #1
 8000a4a:	486a      	ldr	r0, [pc, #424]	; (8000bf4 <main+0x264>)
 8000a4c:	f001 fdd0 	bl	80025f0 <HAL_GPIO_WritePin>
 8000a50:	e005      	b.n	8000a5e <main+0xce>
  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000a52:	2201      	movs	r2, #1
 8000a54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a58:	4866      	ldr	r0, [pc, #408]	; (8000bf4 <main+0x264>)
 8000a5a:	f001 fdc9 	bl	80025f0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000a5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a62:	f001 fad5 	bl	8002010 <HAL_Delay>

  // Prueba de comunicación UART
  uart_buf_len = sprintf(uart_buf, "MPU6050 Temp test\r\n");
 8000a66:	4964      	ldr	r1, [pc, #400]	; (8000bf8 <main+0x268>)
 8000a68:	4864      	ldr	r0, [pc, #400]	; (8000bfc <main+0x26c>)
 8000a6a:	f007 fca3 	bl	80083b4 <siprintf>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	4b63      	ldr	r3, [pc, #396]	; (8000c00 <main+0x270>)
 8000a74:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8000a76:	4b62      	ldr	r3, [pc, #392]	; (8000c00 <main+0x270>)
 8000a78:	881a      	ldrh	r2, [r3, #0]
 8000a7a:	2364      	movs	r3, #100	; 0x64
 8000a7c:	495f      	ldr	r1, [pc, #380]	; (8000bfc <main+0x26c>)
 8000a7e:	4861      	ldr	r0, [pc, #388]	; (8000c04 <main+0x274>)
 8000a80:	f005 ff6e 	bl	8006960 <HAL_UART_Transmit>

  // Inicialización del MPU6050
  MPU6050_init();
 8000a84:	f000 fb24 	bl	80010d0 <MPU6050_init>

  //Inicialización de interrupciones por timer
  HAL_TIM_Base_Start(&htim5);
 8000a88:	485f      	ldr	r0, [pc, #380]	; (8000c08 <main+0x278>)
 8000a8a:	f005 f9df 	bl	8005e4c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a8e:	485f      	ldr	r0, [pc, #380]	; (8000c0c <main+0x27c>)
 8000a90:	f005 fa4c 	bl	8005f2c <HAL_TIM_Base_Start_IT>

  // Inicialización del LCD
  lcd_init();
 8000a94:	f7ff ff2a 	bl	80008ec <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (ind == 1){
 8000a98:	4b5d      	ldr	r3, [pc, #372]	; (8000c10 <main+0x280>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d125      	bne.n	8000aec <main+0x15c>
	  			lcd_clear();
 8000aa0:	f7ff feee 	bl	8000880 <lcd_clear>
	  			lcd_put_cur(0, 0);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff ff01 	bl	80008ae <lcd_put_cur>
	  			lcd_send_string("Selection Sort:");
 8000aac:	4859      	ldr	r0, [pc, #356]	; (8000c14 <main+0x284>)
 8000aae:	f7ff ff5a 	bl	8000966 <lcd_send_string>
	  			lcd_put_cur(1, 0);
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff fefa 	bl	80008ae <lcd_put_cur>
	  			lcd_buf_len = sprintf(lcd_buf, "%.2f useg", promSelSort);
 8000aba:	4b57      	ldr	r3, [pc, #348]	; (8000c18 <main+0x288>)
 8000abc:	edd3 7a00 	vldr	s15, [r3]
 8000ac0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac4:	ec53 2b17 	vmov	r2, r3, d7
 8000ac8:	4954      	ldr	r1, [pc, #336]	; (8000c1c <main+0x28c>)
 8000aca:	4855      	ldr	r0, [pc, #340]	; (8000c20 <main+0x290>)
 8000acc:	f007 fc72 	bl	80083b4 <siprintf>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	b21a      	sxth	r2, r3
 8000ad4:	4b53      	ldr	r3, [pc, #332]	; (8000c24 <main+0x294>)
 8000ad6:	801a      	strh	r2, [r3, #0]
	  			lcd_send_string(lcd_buf);
 8000ad8:	4851      	ldr	r0, [pc, #324]	; (8000c20 <main+0x290>)
 8000ada:	f7ff ff44 	bl	8000966 <lcd_send_string>
	  			ind++;
 8000ade:	4b4c      	ldr	r3, [pc, #304]	; (8000c10 <main+0x280>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4b4a      	ldr	r3, [pc, #296]	; (8000c10 <main+0x280>)
 8000ae8:	701a      	strb	r2, [r3, #0]
 8000aea:	e079      	b.n	8000be0 <main+0x250>
	  		} else if (ind == 2){
 8000aec:	4b48      	ldr	r3, [pc, #288]	; (8000c10 <main+0x280>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d125      	bne.n	8000b40 <main+0x1b0>
	  			lcd_clear();
 8000af4:	f7ff fec4 	bl	8000880 <lcd_clear>
	  			lcd_put_cur(0, 0);
 8000af8:	2100      	movs	r1, #0
 8000afa:	2000      	movs	r0, #0
 8000afc:	f7ff fed7 	bl	80008ae <lcd_put_cur>
	  			lcd_send_string("Bubble Sort:");
 8000b00:	4849      	ldr	r0, [pc, #292]	; (8000c28 <main+0x298>)
 8000b02:	f7ff ff30 	bl	8000966 <lcd_send_string>
	  			lcd_put_cur(1, 0);
 8000b06:	2100      	movs	r1, #0
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff fed0 	bl	80008ae <lcd_put_cur>
	  			lcd_buf_len = sprintf(lcd_buf, "%.2f useg", promBubSort);
 8000b0e:	4b47      	ldr	r3, [pc, #284]	; (8000c2c <main+0x29c>)
 8000b10:	edd3 7a00 	vldr	s15, [r3]
 8000b14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b18:	ec53 2b17 	vmov	r2, r3, d7
 8000b1c:	493f      	ldr	r1, [pc, #252]	; (8000c1c <main+0x28c>)
 8000b1e:	4840      	ldr	r0, [pc, #256]	; (8000c20 <main+0x290>)
 8000b20:	f007 fc48 	bl	80083b4 <siprintf>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	4b3e      	ldr	r3, [pc, #248]	; (8000c24 <main+0x294>)
 8000b2a:	801a      	strh	r2, [r3, #0]
	  			lcd_send_string(lcd_buf);
 8000b2c:	483c      	ldr	r0, [pc, #240]	; (8000c20 <main+0x290>)
 8000b2e:	f7ff ff1a 	bl	8000966 <lcd_send_string>
	  			ind++;
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <main+0x280>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <main+0x280>)
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e04f      	b.n	8000be0 <main+0x250>
	  		} else if(ind == 3){
 8000b40:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <main+0x280>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d125      	bne.n	8000b94 <main+0x204>
	  			lcd_clear();
 8000b48:	f7ff fe9a 	bl	8000880 <lcd_clear>
	  			lcd_put_cur(0, 0);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff fead 	bl	80008ae <lcd_put_cur>
	  			lcd_send_string("Seq. Search:");
 8000b54:	4836      	ldr	r0, [pc, #216]	; (8000c30 <main+0x2a0>)
 8000b56:	f7ff ff06 	bl	8000966 <lcd_send_string>
	  			lcd_put_cur(1, 0);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f7ff fea6 	bl	80008ae <lcd_put_cur>
	  			lcd_buf_len = sprintf(lcd_buf, "%.2f useg", promSeqSearch);
 8000b62:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <main+0x2a4>)
 8000b64:	edd3 7a00 	vldr	s15, [r3]
 8000b68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b6c:	ec53 2b17 	vmov	r2, r3, d7
 8000b70:	492a      	ldr	r1, [pc, #168]	; (8000c1c <main+0x28c>)
 8000b72:	482b      	ldr	r0, [pc, #172]	; (8000c20 <main+0x290>)
 8000b74:	f007 fc1e 	bl	80083b4 <siprintf>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <main+0x294>)
 8000b7e:	801a      	strh	r2, [r3, #0]
	  			lcd_send_string(lcd_buf);
 8000b80:	4827      	ldr	r0, [pc, #156]	; (8000c20 <main+0x290>)
 8000b82:	f7ff fef0 	bl	8000966 <lcd_send_string>
	  			ind++;
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <main+0x280>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <main+0x280>)
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	e025      	b.n	8000be0 <main+0x250>
	  		} else if (ind == 4){
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <main+0x280>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	d121      	bne.n	8000be0 <main+0x250>
	  			lcd_clear();
 8000b9c:	f7ff fe70 	bl	8000880 <lcd_clear>
	  			lcd_put_cur(0, 0);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff fe83 	bl	80008ae <lcd_put_cur>
	  			lcd_send_string("Binary Search:");
 8000ba8:	4823      	ldr	r0, [pc, #140]	; (8000c38 <main+0x2a8>)
 8000baa:	f7ff fedc 	bl	8000966 <lcd_send_string>
	  			lcd_put_cur(1, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f7ff fe7c 	bl	80008ae <lcd_put_cur>
	  			lcd_buf_len = sprintf(lcd_buf, "%.2f useg", promBinSearch);
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <main+0x2ac>)
 8000bb8:	edd3 7a00 	vldr	s15, [r3]
 8000bbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc0:	ec53 2b17 	vmov	r2, r3, d7
 8000bc4:	4915      	ldr	r1, [pc, #84]	; (8000c1c <main+0x28c>)
 8000bc6:	4816      	ldr	r0, [pc, #88]	; (8000c20 <main+0x290>)
 8000bc8:	f007 fbf4 	bl	80083b4 <siprintf>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <main+0x294>)
 8000bd2:	801a      	strh	r2, [r3, #0]
	  			lcd_send_string(lcd_buf);
 8000bd4:	4812      	ldr	r0, [pc, #72]	; (8000c20 <main+0x290>)
 8000bd6:	f7ff fec6 	bl	8000966 <lcd_send_string>
	  			ind = 1;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <main+0x280>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
	  		}

	  	HAL_Delay(1000);
 8000be0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be4:	f001 fa14 	bl	8002010 <HAL_Delay>
	  if (ind == 1){
 8000be8:	e756      	b.n	8000a98 <main+0x108>
 8000bea:	bf00      	nop
 8000bec:	58024400 	.word	0x58024400
 8000bf0:	240001fc 	.word	0x240001fc
 8000bf4:	58020400 	.word	0x58020400
 8000bf8:	0800a7c0 	.word	0x0800a7c0
 8000bfc:	2400038c 	.word	0x2400038c
 8000c00:	240003be 	.word	0x240003be
 8000c04:	240002e0 	.word	0x240002e0
 8000c08:	24000294 	.word	0x24000294
 8000c0c:	24000248 	.word	0x24000248
 8000c10:	24000ecc 	.word	0x24000ecc
 8000c14:	0800a7d4 	.word	0x0800a7d4
 8000c18:	24000ebc 	.word	0x24000ebc
 8000c1c:	0800a7e4 	.word	0x0800a7e4
 8000c20:	24000378 	.word	0x24000378
 8000c24:	24000388 	.word	0x24000388
 8000c28:	0800a7f0 	.word	0x0800a7f0
 8000c2c:	24000ec0 	.word	0x24000ec0
 8000c30:	0800a800 	.word	0x0800a800
 8000c34:	24000ec4 	.word	0x24000ec4
 8000c38:	0800a810 	.word	0x0800a810
 8000c3c:	24000ec8 	.word	0x24000ec8

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b09c      	sub	sp, #112	; 0x70
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	224c      	movs	r2, #76	; 0x4c
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f006 ff66 	bl	8007b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2220      	movs	r2, #32
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f006 ff60 	bl	8007b20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c60:	2004      	movs	r0, #4
 8000c62:	f002 fd1f 	bl	80036a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c66:	2300      	movs	r3, #0
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <SystemClock_Config+0xec>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a2f      	ldr	r2, [pc, #188]	; (8000d2c <SystemClock_Config+0xec>)
 8000c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c74:	6193      	str	r3, [r2, #24]
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <SystemClock_Config+0xec>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <SystemClock_Config+0xf0>)
 8000c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c84:	4a2a      	ldr	r2, [pc, #168]	; (8000d30 <SystemClock_Config+0xf0>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <SystemClock_Config+0xf0>)
 8000c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c98:	bf00      	nop
 8000c9a:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <SystemClock_Config+0xec>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ca6:	d1f8      	bne.n	8000c9a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000cbe:	2378      	movs	r3, #120	; 0x78
 8000cc0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 fd3a 	bl	8003758 <HAL_RCC_OscConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cea:	f000 feb1 	bl	8001a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cee:	233f      	movs	r3, #63	; 0x3f
 8000cf0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cfe:	2340      	movs	r3, #64	; 0x40
 8000d00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d02:	2340      	movs	r3, #64	; 0x40
 8000d04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d0c:	2340      	movs	r3, #64	; 0x40
 8000d0e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2104      	movs	r1, #4
 8000d14:	4618      	mov	r0, r3
 8000d16:	f003 f94d 	bl	8003fb4 <HAL_RCC_ClockConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000d20:	f000 fe96 	bl	8001a50 <Error_Handler>
  }
}
 8000d24:	bf00      	nop
 8000d26:	3770      	adds	r7, #112	; 0x70
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	58024800 	.word	0x58024800
 8000d30:	58000400 	.word	0x58000400

08000d34 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_I2C4_Init+0x74>)
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	; (8000dac <MX_I2C4_Init+0x78>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_I2C4_Init+0x74>)
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <MX_I2C4_Init+0x7c>)
 8000d42:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_I2C4_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_I2C4_Init+0x74>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_I2C4_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_I2C4_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_I2C4_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_I2C4_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_I2C4_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <MX_I2C4_Init+0x74>)
 8000d70:	f001 fca0 	bl	80026b4 <HAL_I2C_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d7a:	f000 fe69 	bl	8001a50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4809      	ldr	r0, [pc, #36]	; (8000da8 <MX_I2C4_Init+0x74>)
 8000d82:	f002 fbf7 	bl	8003574 <HAL_I2CEx_ConfigAnalogFilter>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d8c:	f000 fe60 	bl	8001a50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d90:	2100      	movs	r1, #0
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_I2C4_Init+0x74>)
 8000d94:	f002 fc39 	bl	800360a <HAL_I2CEx_ConfigDigitalFilter>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d9e:	f000 fe57 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	240001fc 	.word	0x240001fc
 8000dac:	58001c00 	.word	0x58001c00
 8000db0:	307075b1 	.word	0x307075b1

08000db4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <MX_TIM2_Init+0x98>)
 8000dd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <MX_TIM2_Init+0x98>)
 8000ddc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000de0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_TIM2_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_TIM2_Init+0x98>)
 8000dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_TIM2_Init+0x98>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <MX_TIM2_Init+0x98>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dfc:	4813      	ldr	r0, [pc, #76]	; (8000e4c <MX_TIM2_Init+0x98>)
 8000dfe:	f004 ffcd 	bl	8005d9c <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000e08:	f000 fe22 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_TIM2_Init+0x98>)
 8000e1a:	f005 fa4d 	bl	80062b8 <HAL_TIM_ConfigClockSource>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000e24:	f000 fe14 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_TIM2_Init+0x98>)
 8000e36:	f005 fc97 	bl	8006768 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000e40:	f000 fe06 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	24000248 	.word	0x24000248

08000e50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000e70:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <MX_TIM5_Init+0x98>)
 8000e72:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000e76:	22f0      	movs	r2, #240	; 0xf0
 8000e78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000e82:	f04f 32ff 	mov.w	r2, #4294967295
 8000e86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e94:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000e96:	f004 ff81 	bl	8005d9c <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000ea0:	f000 fdd6 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000eb2:	f005 fa01 	bl	80062b8 <HAL_TIM_ConfigClockSource>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000ebc:	f000 fdc8 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000ece:	f005 fc4b 	bl	8006768 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000ed8:	f000 fdba 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	24000294 	.word	0x24000294
 8000ee8:	40000c00 	.word	0x40000c00

08000eec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ef0:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000ef2:	4a23      	ldr	r2, [pc, #140]	; (8000f80 <MX_USART3_UART_Init+0x94>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000efc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f34:	4811      	ldr	r0, [pc, #68]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000f36:	f005 fcc3 	bl	80068c0 <HAL_UART_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f40:	f000 fd86 	bl	8001a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f44:	2100      	movs	r1, #0
 8000f46:	480d      	ldr	r0, [pc, #52]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000f48:	f006 fcf6 	bl	8007938 <HAL_UARTEx_SetTxFifoThreshold>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f52:	f000 fd7d 	bl	8001a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f56:	2100      	movs	r1, #0
 8000f58:	4808      	ldr	r0, [pc, #32]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000f5a:	f006 fd2b 	bl	80079b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f64:	f000 fd74 	bl	8001a50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <MX_USART3_UART_Init+0x90>)
 8000f6a:	f006 fcac 	bl	80078c6 <HAL_UARTEx_DisableFifoMode>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f74:	f000 fd6c 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	240002e0 	.word	0x240002e0
 8000f80:	40004800 	.word	0x40004800

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b4a      	ldr	r3, [pc, #296]	; (80010c4 <MX_GPIO_Init+0x140>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	4a48      	ldr	r2, [pc, #288]	; (80010c4 <MX_GPIO_Init+0x140>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000faa:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <MX_GPIO_Init+0x140>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb8:	4b42      	ldr	r3, [pc, #264]	; (80010c4 <MX_GPIO_Init+0x140>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	4a41      	ldr	r2, [pc, #260]	; (80010c4 <MX_GPIO_Init+0x140>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc8:	4b3e      	ldr	r3, [pc, #248]	; (80010c4 <MX_GPIO_Init+0x140>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <MX_GPIO_Init+0x140>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a39      	ldr	r2, [pc, #228]	; (80010c4 <MX_GPIO_Init+0x140>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b37      	ldr	r3, [pc, #220]	; (80010c4 <MX_GPIO_Init+0x140>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff4:	4b33      	ldr	r3, [pc, #204]	; (80010c4 <MX_GPIO_Init+0x140>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffa:	4a32      	ldr	r2, [pc, #200]	; (80010c4 <MX_GPIO_Init+0x140>)
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <MX_GPIO_Init+0x140>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	f003 0320 	and.w	r3, r3, #32
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <MX_GPIO_Init+0x140>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001018:	4a2a      	ldr	r2, [pc, #168]	; (80010c4 <MX_GPIO_Init+0x140>)
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <MX_GPIO_Init+0x140>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <MX_GPIO_Init+0x140>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001036:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <MX_GPIO_Init+0x140>)
 8001038:	f043 0310 	orr.w	r3, r3, #16
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001040:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <MX_GPIO_Init+0x140>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f244 0101 	movw	r1, #16385	; 0x4001
 8001054:	481c      	ldr	r0, [pc, #112]	; (80010c8 <MX_GPIO_Init+0x144>)
 8001056:	f001 facb 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2102      	movs	r1, #2
 800105e:	481b      	ldr	r0, [pc, #108]	; (80010cc <MX_GPIO_Init+0x148>)
 8001060:	f001 fac6 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001064:	2301      	movs	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106c:	2301      	movs	r3, #1
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001070:	2302      	movs	r3, #2
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	4813      	ldr	r0, [pc, #76]	; (80010c8 <MX_GPIO_Init+0x144>)
 800107c:	f001 f908 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001080:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800108a:	2302      	movs	r3, #2
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108e:	2302      	movs	r3, #2
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	480b      	ldr	r0, [pc, #44]	; (80010c8 <MX_GPIO_Init+0x144>)
 800109a:	f001 f8f9 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800109e:	2302      	movs	r3, #2
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010a6:	2302      	movs	r3, #2
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010aa:	2302      	movs	r3, #2
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_GPIO_Init+0x148>)
 80010b6:	f001 f8eb 	bl	8002290 <HAL_GPIO_Init>

}
 80010ba:	bf00      	nop
 80010bc:	3730      	adds	r7, #48	; 0x30
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	58024400 	.word	0x58024400
 80010c8:	58020400 	.word	0x58020400
 80010cc:	58021000 	.word	0x58021000

080010d0 <MPU6050_init>:

/* USER CODE BEGIN 4 */

void MPU6050_init(void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af04      	add	r7, sp, #16
	uint8_t check, data;
	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 3000);
 80010d6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2301      	movs	r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	1dfb      	adds	r3, r7, #7
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	2275      	movs	r2, #117	; 0x75
 80010e8:	21d0      	movs	r1, #208	; 0xd0
 80010ea:	4812      	ldr	r0, [pc, #72]	; (8001134 <MPU6050_init+0x64>)
 80010ec:	f001 fd7a 	bl	8002be4 <HAL_I2C_Mem_Read>

	data = 0x00;
 80010f0:	2300      	movs	r3, #0
 80010f2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 3000);
 80010f4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	2301      	movs	r3, #1
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	1dbb      	adds	r3, r7, #6
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	226b      	movs	r2, #107	; 0x6b
 8001106:	21d0      	movs	r1, #208	; 0xd0
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <MPU6050_init+0x64>)
 800110a:	f001 fc57 	bl	80029bc <HAL_I2C_Mem_Write>
	data = 0b10000111;
 800110e:	2387      	movs	r3, #135	; 0x87
 8001110:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, SMPLRT_DIV, 1, &data, 1, 3000);
 8001112:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2301      	movs	r3, #1
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	1dbb      	adds	r3, r7, #6
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	2219      	movs	r2, #25
 8001124:	21d0      	movs	r1, #208	; 0xd0
 8001126:	4803      	ldr	r0, [pc, #12]	; (8001134 <MPU6050_init+0x64>)
 8001128:	f001 fc48 	bl	80029bc <HAL_I2C_Mem_Write>

}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	240001fc 	.word	0x240001fc

08001138 <MPU6050_read_temp>:

void MPU6050_read_temp(void){
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af04      	add	r7, sp, #16
	uint8_t read_temp[2];

	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, TEMP_OUT_H, 1, read_temp, 2, 3000);
 800113e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	2302      	movs	r3, #2
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2301      	movs	r3, #1
 800114e:	2241      	movs	r2, #65	; 0x41
 8001150:	21d0      	movs	r1, #208	; 0xd0
 8001152:	4817      	ldr	r0, [pc, #92]	; (80011b0 <MPU6050_read_temp+0x78>)
 8001154:	f001 fd46 	bl	8002be4 <HAL_I2C_Mem_Read>

	temp_read = (int16_t)(read_temp[0] << 8 | read_temp[1]);
 8001158:	793b      	ldrb	r3, [r7, #4]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	797b      	ldrb	r3, [r7, #5]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <MPU6050_read_temp+0x7c>)
 8001168:	801a      	strh	r2, [r3, #0]

	temp = (temp_read/340.0) + 36.53;
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MPU6050_read_temp+0x7c>)
 800116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001178:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80011a0 <MPU6050_read_temp+0x68>
 800117c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001180:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80011a8 <MPU6050_read_temp+0x70>
 8001184:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001188:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MPU6050_read_temp+0x80>)
 800118e:	edc3 7a00 	vstr	s15, [r3]
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	f3af 8000 	nop.w
 80011a0:	00000000 	.word	0x00000000
 80011a4:	40754000 	.word	0x40754000
 80011a8:	0a3d70a4 	.word	0x0a3d70a4
 80011ac:	404243d7 	.word	0x404243d7
 80011b0:	240001fc 	.word	0x240001fc
 80011b4:	24000370 	.word	0x24000370
 80011b8:	24000374 	.word	0x24000374

080011bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a37      	ldr	r2, [pc, #220]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d166      	bne.n	800129a <HAL_TIM_PeriodElapsedCallback+0xde>
	{
		// Comprobación de interrupción
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80011cc:	2101      	movs	r1, #1
 80011ce:	4836      	ldr	r0, [pc, #216]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80011d0:	f001 fa27 	bl	8002622 <HAL_GPIO_TogglePin>

		// Lectura de datos
		MPU6050_read_temp();
 80011d4:	f7ff ffb0 	bl	8001138 <MPU6050_read_temp>
		selSort_array[count] = temp;
 80011d8:	4b34      	ldr	r3, [pc, #208]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a34      	ldr	r2, [pc, #208]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	4934      	ldr	r1, [pc, #208]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	601a      	str	r2, [r3, #0]
		bubSort_array[count] = temp;
 80011e8:	4b30      	ldr	r3, [pc, #192]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a30      	ldr	r2, [pc, #192]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	4931      	ldr	r1, [pc, #196]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	601a      	str	r2, [r3, #0]
		temp_array[count] = temp;
 80011f8:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a2c      	ldr	r2, [pc, #176]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	492e      	ldr	r1, [pc, #184]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	601a      	str	r2, [r3, #0]

		// Visualización de los datos en puerto serial y LCD
		//lcd_clear();
		lcd_put_cur(0, 0);
 8001208:	2100      	movs	r1, #0
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff fb4f 	bl	80008ae <lcd_put_cur>
		lcd_buf_len = sprintf(lcd_buf, "[%u] %.2f C", count, temp);
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a26      	ldr	r2, [pc, #152]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001216:	edd2 7a00 	vldr	s15, [r2]
 800121a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800121e:	ed8d 7b00 	vstr	d7, [sp]
 8001222:	461a      	mov	r2, r3
 8001224:	4926      	ldr	r1, [pc, #152]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001226:	4827      	ldr	r0, [pc, #156]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001228:	f007 f8c4 	bl	80083b4 <siprintf>
 800122c:	4603      	mov	r3, r0
 800122e:	b21a      	sxth	r2, r3
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001232:	801a      	strh	r2, [r3, #0]
		lcd_send_string(lcd_buf);
 8001234:	4823      	ldr	r0, [pc, #140]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001236:	f7ff fb96 	bl	8000966 <lcd_send_string>

		uart_buf_len = sprintf(uart_buf, "[%u] %.2f °C \r\n", count, temp);
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001240:	edd2 7a00 	vldr	s15, [r2]
 8001244:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001248:	ed8d 7b00 	vstr	d7, [sp]
 800124c:	461a      	mov	r2, r3
 800124e:	491f      	ldr	r1, [pc, #124]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001250:	481f      	ldr	r0, [pc, #124]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001252:	f007 f8af 	bl	80083b4 <siprintf>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800125c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001260:	881a      	ldrh	r2, [r3, #0]
 8001262:	2364      	movs	r3, #100	; 0x64
 8001264:	491a      	ldr	r1, [pc, #104]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001266:	481c      	ldr	r0, [pc, #112]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001268:	f005 fb7a 	bl	8006960 <HAL_UART_Transmit>

		count++;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001274:	6013      	str	r3, [r2, #0]
		if (count == size){
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2264      	movs	r2, #100	; 0x64
 800127c:	4293      	cmp	r3, r2
 800127e:	d10c      	bne.n	800129a <HAL_TIM_PeriodElapsedCallback+0xde>
			count = 0;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001288:	f004 fec8 	bl	800601c <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 800128c:	2201      	movs	r2, #1
 800128e:	2101      	movs	r1, #1
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001292:	f001 f9ad 	bl	80025f0 <HAL_GPIO_WritePin>
			algorithms();
 8001296:	f000 f93f 	bl	8001518 <algorithms>
		}
	}
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	24000248 	.word	0x24000248
 80012a8:	58020400 	.word	0x58020400
 80012ac:	24000870 	.word	0x24000870
 80012b0:	24000374 	.word	0x24000374
 80012b4:	240003c0 	.word	0x240003c0
 80012b8:	24000550 	.word	0x24000550
 80012bc:	240006e0 	.word	0x240006e0
 80012c0:	0800a820 	.word	0x0800a820
 80012c4:	24000378 	.word	0x24000378
 80012c8:	24000388 	.word	0x24000388
 80012cc:	0800a82c 	.word	0x0800a82c
 80012d0:	2400038c 	.word	0x2400038c
 80012d4:	240003be 	.word	0x240003be
 80012d8:	240002e0 	.word	0x240002e0

080012dc <swapped>:

void swapped(float *v1, float *v2){
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
    int swap = *v1;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f0:	ee17 3a90 	vmov	r3, s15
 80012f4:	60fb      	str	r3, [r7, #12]
    *v1 = *v2;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	601a      	str	r2, [r3, #0]
    *v2 = swap;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	edc3 7a00 	vstr	s15, [r3]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <selectionSort>:

void selectionSort(float *arr, int size){
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < size-1; i++){
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	e031      	b.n	800138e <selectionSort+0x74>
        int min_idx = i;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	613b      	str	r3, [r7, #16]
        for(int j = i + 1; j < size; j++){
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	e015      	b.n	8001362 <selectionSort+0x48>
            if(arr[j] < arr[min_idx]){
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	d501      	bpl.n	800135c <selectionSort+0x42>
                min_idx = j;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	613b      	str	r3, [r7, #16]
        for(int j = i + 1; j < size; j++){
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3301      	adds	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	dbe5      	blt.n	8001336 <selectionSort+0x1c>
            }
        }
        if(i != min_idx){
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	429a      	cmp	r2, r3
 8001370:	d00a      	beq.n	8001388 <selectionSort+0x6e>
            swapped(&arr[i], &arr[min_idx]);
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	18d0      	adds	r0, r2, r3
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff ffaa 	bl	80012dc <swapped>
    for(int i = 0; i < size-1; i++){
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	3b01      	subs	r3, #1
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbc8      	blt.n	800132a <selectionSort+0x10>
        }
    }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <bubbleSort>:

void bubbleSort(float *arr, int size){
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < size-1; i++){
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e02d      	b.n	800140e <bubbleSort+0x6c>
        for(int j = 0; j < size-1-i; j++){
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	e020      	b.n	80013fa <bubbleSort+0x58>
            if(arr[j] > arr[j+1]){
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	ed93 7a00 	vldr	s14, [r3]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	3301      	adds	r3, #1
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	dd0b      	ble.n	80013f4 <bubbleSort+0x52>
                swapped(&arr[j], &arr[j+1]);
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	18d0      	adds	r0, r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	3301      	adds	r3, #1
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff ff74 	bl	80012dc <swapped>
        for(int j = 0; j < size-1-i; j++){
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	3301      	adds	r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	1e5a      	subs	r2, r3, #1
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	429a      	cmp	r2, r3
 8001406:	dbd7      	blt.n	80013b8 <bubbleSort+0x16>
    for(int i = 0; i < size-1; i++){
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3301      	adds	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	3b01      	subs	r3, #1
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbcc      	blt.n	80013b2 <bubbleSort+0x10>
            }
        }
    }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <sequentialSearch>:

int sequentialSearch(float *arr, int size, float value){
 8001422:	b480      	push	{r7}
 8001424:	b087      	sub	sp, #28
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	ed87 0a01 	vstr	s0, [r7, #4]
    if(size < 0) return -1;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	da02      	bge.n	800143c <sequentialSearch+0x1a>
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	e01a      	b.n	8001472 <sequentialSearch+0x50>
    for(int i = 0; i < size; i++){
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	e011      	b.n	8001466 <sequentialSearch+0x44>
        if(arr[i] == value){
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4413      	add	r3, r2
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001452:	eeb4 7a67 	vcmp.f32	s14, s15
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	d101      	bne.n	8001460 <sequentialSearch+0x3e>
            return i;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	e008      	b.n	8001472 <sequentialSearch+0x50>
    for(int i = 0; i < size; i++){
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	429a      	cmp	r2, r3
 800146c:	dbe9      	blt.n	8001442 <sequentialSearch+0x20>
        }
    }
    return -1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001472:	4618      	mov	r0, r3
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <binarySearch>:

int binarySearch(float *arr, int size, float value){
 800147e:	b480      	push	{r7}
 8001480:	b089      	sub	sp, #36	; 0x24
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	ed87 0a01 	vstr	s0, [r7, #4]
    int min = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
    int max = size - 1;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	3b01      	subs	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
    int found = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]

    while(found == 0){
 800149a:	e033      	b.n	8001504 <binarySearch+0x86>
        if (min > max){
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dd02      	ble.n	80014aa <binarySearch+0x2c>
            return -1;
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
 80014a8:	e02f      	b.n	800150a <binarySearch+0x8c>
        }

        int mid = (min + max)/2;
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	4413      	add	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	da00      	bge.n	80014b6 <binarySearch+0x38>
 80014b4:	3301      	adds	r3, #1
 80014b6:	105b      	asrs	r3, r3, #1
 80014b8:	613b      	str	r3, [r7, #16]
        if(arr[mid] == value){
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80014ca:	eeb4 7a67 	vcmp.f32	s14, s15
 80014ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d2:	d103      	bne.n	80014dc <binarySearch+0x5e>
            found = 1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
            return mid;
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	e016      	b.n	800150a <binarySearch+0x8c>
        } else if(arr[mid] < value){
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80014ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	dd03      	ble.n	80014fe <binarySearch+0x80>
            min = mid + 1;
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	3301      	adds	r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	e002      	b.n	8001504 <binarySearch+0x86>
        } else{
            max = mid - 1;
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	3b01      	subs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
    while(found == 0){
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0c8      	beq.n	800149c <binarySearch+0x1e>
        }
    }
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <algorithms>:

void algorithms(void){
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af02      	add	r7, sp, #8
	for(int16_t i = 0; i < 100; i++){
 800151e:	2300      	movs	r3, #0
 8001520:	80fb      	strh	r3, [r7, #6]
 8001522:	e1cc      	b.n	80018be <algorithms+0x3a6>
		uart_buf_len = sprintf(uart_buf, "Muestra: %u\r\n", i);
 8001524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001528:	461a      	mov	r2, r3
 800152a:	49a6      	ldr	r1, [pc, #664]	; (80017c4 <algorithms+0x2ac>)
 800152c:	48a6      	ldr	r0, [pc, #664]	; (80017c8 <algorithms+0x2b0>)
 800152e:	f006 ff41 	bl	80083b4 <siprintf>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	4ba5      	ldr	r3, [pc, #660]	; (80017cc <algorithms+0x2b4>)
 8001538:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800153a:	4ba4      	ldr	r3, [pc, #656]	; (80017cc <algorithms+0x2b4>)
 800153c:	881a      	ldrh	r2, [r3, #0]
 800153e:	2364      	movs	r3, #100	; 0x64
 8001540:	49a1      	ldr	r1, [pc, #644]	; (80017c8 <algorithms+0x2b0>)
 8001542:	48a3      	ldr	r0, [pc, #652]	; (80017d0 <algorithms+0x2b8>)
 8001544:	f005 fa0c 	bl	8006960 <HAL_UART_Transmit>

		uart_buf_len = sprintf(uart_buf, "Selection Sort\r\n");
 8001548:	49a2      	ldr	r1, [pc, #648]	; (80017d4 <algorithms+0x2bc>)
 800154a:	489f      	ldr	r0, [pc, #636]	; (80017c8 <algorithms+0x2b0>)
 800154c:	f006 ff32 	bl	80083b4 <siprintf>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	4b9d      	ldr	r3, [pc, #628]	; (80017cc <algorithms+0x2b4>)
 8001556:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001558:	4b9c      	ldr	r3, [pc, #624]	; (80017cc <algorithms+0x2b4>)
 800155a:	881a      	ldrh	r2, [r3, #0]
 800155c:	2364      	movs	r3, #100	; 0x64
 800155e:	499a      	ldr	r1, [pc, #616]	; (80017c8 <algorithms+0x2b0>)
 8001560:	489b      	ldr	r0, [pc, #620]	; (80017d0 <algorithms+0x2b8>)
 8001562:	f005 f9fd 	bl	8006960 <HAL_UART_Transmit>
		timer_val = __HAL_TIM_GET_COUNTER(&htim5);
 8001566:	4b9c      	ldr	r3, [pc, #624]	; (80017d8 <algorithms+0x2c0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	4a9b      	ldr	r2, [pc, #620]	; (80017dc <algorithms+0x2c4>)
 800156e:	6013      	str	r3, [r2, #0]
		selectionSort(selSort_array, size);
 8001570:	2364      	movs	r3, #100	; 0x64
 8001572:	4619      	mov	r1, r3
 8001574:	489a      	ldr	r0, [pc, #616]	; (80017e0 <algorithms+0x2c8>)
 8001576:	f7ff fed0 	bl	800131a <selectionSort>
		timer_val = __HAL_TIM_GET_COUNTER(&htim5) - timer_val;
 800157a:	4b97      	ldr	r3, [pc, #604]	; (80017d8 <algorithms+0x2c0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001580:	4b96      	ldr	r3, [pc, #600]	; (80017dc <algorithms+0x2c4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	4a95      	ldr	r2, [pc, #596]	; (80017dc <algorithms+0x2c4>)
 8001588:	6013      	str	r3, [r2, #0]
		timeSelSort_us[i] = timer_val;
 800158a:	4b94      	ldr	r3, [pc, #592]	; (80017dc <algorithms+0x2c4>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001592:	4611      	mov	r1, r2
 8001594:	4a93      	ldr	r2, [pc, #588]	; (80017e4 <algorithms+0x2cc>)
 8001596:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		promSelSort += timer_val;
 800159a:	4b90      	ldr	r3, [pc, #576]	; (80017dc <algorithms+0x2c4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015a6:	4b90      	ldr	r3, [pc, #576]	; (80017e8 <algorithms+0x2d0>)
 80015a8:	edd3 7a00 	vldr	s15, [r3]
 80015ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b0:	4b8d      	ldr	r3, [pc, #564]	; (80017e8 <algorithms+0x2d0>)
 80015b2:	edc3 7a00 	vstr	s15, [r3]
		uart_buf_len = sprintf(uart_buf, "Tiempo transcurrido: %u us\r\n", timer_val);
 80015b6:	4b89      	ldr	r3, [pc, #548]	; (80017dc <algorithms+0x2c4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	498b      	ldr	r1, [pc, #556]	; (80017ec <algorithms+0x2d4>)
 80015be:	4882      	ldr	r0, [pc, #520]	; (80017c8 <algorithms+0x2b0>)
 80015c0:	f006 fef8 	bl	80083b4 <siprintf>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4b80      	ldr	r3, [pc, #512]	; (80017cc <algorithms+0x2b4>)
 80015ca:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80015cc:	4b7f      	ldr	r3, [pc, #508]	; (80017cc <algorithms+0x2b4>)
 80015ce:	881a      	ldrh	r2, [r3, #0]
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	497d      	ldr	r1, [pc, #500]	; (80017c8 <algorithms+0x2b0>)
 80015d4:	487e      	ldr	r0, [pc, #504]	; (80017d0 <algorithms+0x2b8>)
 80015d6:	f005 f9c3 	bl	8006960 <HAL_UART_Transmit>

		uart_buf_len = sprintf(uart_buf, "Bubble Sort\r\n");
 80015da:	4985      	ldr	r1, [pc, #532]	; (80017f0 <algorithms+0x2d8>)
 80015dc:	487a      	ldr	r0, [pc, #488]	; (80017c8 <algorithms+0x2b0>)
 80015de:	f006 fee9 	bl	80083b4 <siprintf>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b79      	ldr	r3, [pc, #484]	; (80017cc <algorithms+0x2b4>)
 80015e8:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80015ea:	4b78      	ldr	r3, [pc, #480]	; (80017cc <algorithms+0x2b4>)
 80015ec:	881a      	ldrh	r2, [r3, #0]
 80015ee:	2364      	movs	r3, #100	; 0x64
 80015f0:	4975      	ldr	r1, [pc, #468]	; (80017c8 <algorithms+0x2b0>)
 80015f2:	4877      	ldr	r0, [pc, #476]	; (80017d0 <algorithms+0x2b8>)
 80015f4:	f005 f9b4 	bl	8006960 <HAL_UART_Transmit>
		timer_val = __HAL_TIM_GET_COUNTER(&htim5);
 80015f8:	4b77      	ldr	r3, [pc, #476]	; (80017d8 <algorithms+0x2c0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	4a77      	ldr	r2, [pc, #476]	; (80017dc <algorithms+0x2c4>)
 8001600:	6013      	str	r3, [r2, #0]
		bubbleSort(bubSort_array, size);
 8001602:	2364      	movs	r3, #100	; 0x64
 8001604:	4619      	mov	r1, r3
 8001606:	487b      	ldr	r0, [pc, #492]	; (80017f4 <algorithms+0x2dc>)
 8001608:	f7ff fecb 	bl	80013a2 <bubbleSort>
		timer_val = __HAL_TIM_GET_COUNTER(&htim5) - timer_val;
 800160c:	4b72      	ldr	r3, [pc, #456]	; (80017d8 <algorithms+0x2c0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001612:	4b72      	ldr	r3, [pc, #456]	; (80017dc <algorithms+0x2c4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	4a70      	ldr	r2, [pc, #448]	; (80017dc <algorithms+0x2c4>)
 800161a:	6013      	str	r3, [r2, #0]
		timeBubSort_us[i] = timer_val;
 800161c:	4b6f      	ldr	r3, [pc, #444]	; (80017dc <algorithms+0x2c4>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001624:	4611      	mov	r1, r2
 8001626:	4a74      	ldr	r2, [pc, #464]	; (80017f8 <algorithms+0x2e0>)
 8001628:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		promBubSort += timer_val;
 800162c:	4b6b      	ldr	r3, [pc, #428]	; (80017dc <algorithms+0x2c4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001638:	4b70      	ldr	r3, [pc, #448]	; (80017fc <algorithms+0x2e4>)
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001642:	4b6e      	ldr	r3, [pc, #440]	; (80017fc <algorithms+0x2e4>)
 8001644:	edc3 7a00 	vstr	s15, [r3]
		uart_buf_len = sprintf(uart_buf, "Tiempo transcurrido: %u us\r\n", timer_val);
 8001648:	4b64      	ldr	r3, [pc, #400]	; (80017dc <algorithms+0x2c4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4967      	ldr	r1, [pc, #412]	; (80017ec <algorithms+0x2d4>)
 8001650:	485d      	ldr	r0, [pc, #372]	; (80017c8 <algorithms+0x2b0>)
 8001652:	f006 feaf 	bl	80083b4 <siprintf>
 8001656:	4603      	mov	r3, r0
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b5c      	ldr	r3, [pc, #368]	; (80017cc <algorithms+0x2b4>)
 800165c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800165e:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <algorithms+0x2b4>)
 8001660:	881a      	ldrh	r2, [r3, #0]
 8001662:	2364      	movs	r3, #100	; 0x64
 8001664:	4958      	ldr	r1, [pc, #352]	; (80017c8 <algorithms+0x2b0>)
 8001666:	485a      	ldr	r0, [pc, #360]	; (80017d0 <algorithms+0x2b8>)
 8001668:	f005 f97a 	bl	8006960 <HAL_UART_Transmit>

		uart_buf_len = sprintf(uart_buf, "Sequential Search\r\n");
 800166c:	4964      	ldr	r1, [pc, #400]	; (8001800 <algorithms+0x2e8>)
 800166e:	4856      	ldr	r0, [pc, #344]	; (80017c8 <algorithms+0x2b0>)
 8001670:	f006 fea0 	bl	80083b4 <siprintf>
 8001674:	4603      	mov	r3, r0
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b54      	ldr	r3, [pc, #336]	; (80017cc <algorithms+0x2b4>)
 800167a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <algorithms+0x2b4>)
 800167e:	881a      	ldrh	r2, [r3, #0]
 8001680:	2364      	movs	r3, #100	; 0x64
 8001682:	4951      	ldr	r1, [pc, #324]	; (80017c8 <algorithms+0x2b0>)
 8001684:	4852      	ldr	r0, [pc, #328]	; (80017d0 <algorithms+0x2b8>)
 8001686:	f005 f96b 	bl	8006960 <HAL_UART_Transmit>
		timer_val = __HAL_TIM_GET_COUNTER(&htim5);
 800168a:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <algorithms+0x2c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	4a52      	ldr	r2, [pc, #328]	; (80017dc <algorithms+0x2c4>)
 8001692:	6013      	str	r3, [r2, #0]
		index = sequentialSearch(selSort_array, size, temp_array[50]);
 8001694:	2264      	movs	r2, #100	; 0x64
 8001696:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <algorithms+0x2ec>)
 8001698:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 800169c:	eeb0 0a67 	vmov.f32	s0, s15
 80016a0:	4611      	mov	r1, r2
 80016a2:	484f      	ldr	r0, [pc, #316]	; (80017e0 <algorithms+0x2c8>)
 80016a4:	f7ff febd 	bl	8001422 <sequentialSearch>
 80016a8:	4603      	mov	r3, r0
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	4b56      	ldr	r3, [pc, #344]	; (8001808 <algorithms+0x2f0>)
 80016ae:	801a      	strh	r2, [r3, #0]
		timer_val = __HAL_TIM_GET_COUNTER(&htim5) - timer_val;
 80016b0:	4b49      	ldr	r3, [pc, #292]	; (80017d8 <algorithms+0x2c0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b6:	4b49      	ldr	r3, [pc, #292]	; (80017dc <algorithms+0x2c4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	4a47      	ldr	r2, [pc, #284]	; (80017dc <algorithms+0x2c4>)
 80016be:	6013      	str	r3, [r2, #0]
		timeSeqSearch_us[i] = timer_val;
 80016c0:	4b46      	ldr	r3, [pc, #280]	; (80017dc <algorithms+0x2c4>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c8:	4611      	mov	r1, r2
 80016ca:	4a50      	ldr	r2, [pc, #320]	; (800180c <algorithms+0x2f4>)
 80016cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		promSeqSearch += timer_val;
 80016d0:	4b42      	ldr	r3, [pc, #264]	; (80017dc <algorithms+0x2c4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016dc:	4b4c      	ldr	r3, [pc, #304]	; (8001810 <algorithms+0x2f8>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e6:	4b4a      	ldr	r3, [pc, #296]	; (8001810 <algorithms+0x2f8>)
 80016e8:	edc3 7a00 	vstr	s15, [r3]
		uart_buf_len = sprintf(uart_buf, "Tiempo transcurrido: %u us\r\n", timer_val);
 80016ec:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <algorithms+0x2c4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	493e      	ldr	r1, [pc, #248]	; (80017ec <algorithms+0x2d4>)
 80016f4:	4834      	ldr	r0, [pc, #208]	; (80017c8 <algorithms+0x2b0>)
 80016f6:	f006 fe5d 	bl	80083b4 <siprintf>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	4b33      	ldr	r3, [pc, #204]	; (80017cc <algorithms+0x2b4>)
 8001700:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <algorithms+0x2b4>)
 8001704:	881a      	ldrh	r2, [r3, #0]
 8001706:	2364      	movs	r3, #100	; 0x64
 8001708:	492f      	ldr	r1, [pc, #188]	; (80017c8 <algorithms+0x2b0>)
 800170a:	4831      	ldr	r0, [pc, #196]	; (80017d0 <algorithms+0x2b8>)
 800170c:	f005 f928 	bl	8006960 <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "Indice del valor %.2f: %u \r\n", temp_array[50], index);
 8001710:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <algorithms+0x2ec>)
 8001712:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8001716:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800171a:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <algorithms+0x2f0>)
 800171c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	ec53 2b17 	vmov	r2, r3, d7
 8001726:	493b      	ldr	r1, [pc, #236]	; (8001814 <algorithms+0x2fc>)
 8001728:	4827      	ldr	r0, [pc, #156]	; (80017c8 <algorithms+0x2b0>)
 800172a:	f006 fe43 	bl	80083b4 <siprintf>
 800172e:	4603      	mov	r3, r0
 8001730:	b29a      	uxth	r2, r3
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <algorithms+0x2b4>)
 8001734:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <algorithms+0x2b4>)
 8001738:	881a      	ldrh	r2, [r3, #0]
 800173a:	2364      	movs	r3, #100	; 0x64
 800173c:	4922      	ldr	r1, [pc, #136]	; (80017c8 <algorithms+0x2b0>)
 800173e:	4824      	ldr	r0, [pc, #144]	; (80017d0 <algorithms+0x2b8>)
 8001740:	f005 f90e 	bl	8006960 <HAL_UART_Transmit>

		uart_buf_len = sprintf(uart_buf, "Binary Search\r\n");
 8001744:	4934      	ldr	r1, [pc, #208]	; (8001818 <algorithms+0x300>)
 8001746:	4820      	ldr	r0, [pc, #128]	; (80017c8 <algorithms+0x2b0>)
 8001748:	f006 fe34 	bl	80083b4 <siprintf>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <algorithms+0x2b4>)
 8001752:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <algorithms+0x2b4>)
 8001756:	881a      	ldrh	r2, [r3, #0]
 8001758:	2364      	movs	r3, #100	; 0x64
 800175a:	491b      	ldr	r1, [pc, #108]	; (80017c8 <algorithms+0x2b0>)
 800175c:	481c      	ldr	r0, [pc, #112]	; (80017d0 <algorithms+0x2b8>)
 800175e:	f005 f8ff 	bl	8006960 <HAL_UART_Transmit>
		timer_val = __HAL_TIM_GET_COUNTER(&htim5);
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <algorithms+0x2c0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <algorithms+0x2c4>)
 800176a:	6013      	str	r3, [r2, #0]
		binarySearch(selSort_array, size, temp_array[50]);
 800176c:	2264      	movs	r2, #100	; 0x64
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <algorithms+0x2ec>)
 8001770:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	4611      	mov	r1, r2
 800177a:	4819      	ldr	r0, [pc, #100]	; (80017e0 <algorithms+0x2c8>)
 800177c:	f7ff fe7f 	bl	800147e <binarySearch>
		timer_val = __HAL_TIM_GET_COUNTER(&htim5) - timer_val;
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <algorithms+0x2c0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <algorithms+0x2c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	4a13      	ldr	r2, [pc, #76]	; (80017dc <algorithms+0x2c4>)
 800178e:	6013      	str	r3, [r2, #0]
		timeBinSearch_us[i] = timer_val;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <algorithms+0x2c4>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001798:	4611      	mov	r1, r2
 800179a:	4a20      	ldr	r2, [pc, #128]	; (800181c <algorithms+0x304>)
 800179c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		promBinSearch += timer_val;
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <algorithms+0x2c4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <algorithms+0x308>)
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <algorithms+0x308>)
 80017b8:	edc3 7a00 	vstr	s15, [r3]
		uart_buf_len = sprintf(uart_buf, "Tiempo transcurrido: %u us\r\n", timer_val);
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <algorithms+0x2c4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	e030      	b.n	8001824 <algorithms+0x30c>
 80017c2:	bf00      	nop
 80017c4:	0800a840 	.word	0x0800a840
 80017c8:	2400038c 	.word	0x2400038c
 80017cc:	240003be 	.word	0x240003be
 80017d0:	240002e0 	.word	0x240002e0
 80017d4:	0800a850 	.word	0x0800a850
 80017d8:	24000294 	.word	0x24000294
 80017dc:	24000874 	.word	0x24000874
 80017e0:	240003c0 	.word	0x240003c0
 80017e4:	2400087c 	.word	0x2400087c
 80017e8:	24000ebc 	.word	0x24000ebc
 80017ec:	0800a864 	.word	0x0800a864
 80017f0:	0800a884 	.word	0x0800a884
 80017f4:	24000550 	.word	0x24000550
 80017f8:	24000a0c 	.word	0x24000a0c
 80017fc:	24000ec0 	.word	0x24000ec0
 8001800:	0800a894 	.word	0x0800a894
 8001804:	240006e0 	.word	0x240006e0
 8001808:	24000878 	.word	0x24000878
 800180c:	24000b9c 	.word	0x24000b9c
 8001810:	24000ec4 	.word	0x24000ec4
 8001814:	0800a8a8 	.word	0x0800a8a8
 8001818:	0800a8c8 	.word	0x0800a8c8
 800181c:	24000d2c 	.word	0x24000d2c
 8001820:	24000ec8 	.word	0x24000ec8
 8001824:	461a      	mov	r2, r3
 8001826:	493f      	ldr	r1, [pc, #252]	; (8001924 <algorithms+0x40c>)
 8001828:	483f      	ldr	r0, [pc, #252]	; (8001928 <algorithms+0x410>)
 800182a:	f006 fdc3 	bl	80083b4 <siprintf>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b3e      	ldr	r3, [pc, #248]	; (800192c <algorithms+0x414>)
 8001834:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <algorithms+0x414>)
 8001838:	881a      	ldrh	r2, [r3, #0]
 800183a:	2364      	movs	r3, #100	; 0x64
 800183c:	493a      	ldr	r1, [pc, #232]	; (8001928 <algorithms+0x410>)
 800183e:	483c      	ldr	r0, [pc, #240]	; (8001930 <algorithms+0x418>)
 8001840:	f005 f88e 	bl	8006960 <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "Indice del valor %.2f: %u \r\n", temp_array[50], index);
 8001844:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <algorithms+0x41c>)
 8001846:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 800184a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800184e:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <algorithms+0x420>)
 8001850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	ec53 2b17 	vmov	r2, r3, d7
 800185a:	4938      	ldr	r1, [pc, #224]	; (800193c <algorithms+0x424>)
 800185c:	4832      	ldr	r0, [pc, #200]	; (8001928 <algorithms+0x410>)
 800185e:	f006 fda9 	bl	80083b4 <siprintf>
 8001862:	4603      	mov	r3, r0
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <algorithms+0x414>)
 8001868:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800186a:	4b30      	ldr	r3, [pc, #192]	; (800192c <algorithms+0x414>)
 800186c:	881a      	ldrh	r2, [r3, #0]
 800186e:	2364      	movs	r3, #100	; 0x64
 8001870:	492d      	ldr	r1, [pc, #180]	; (8001928 <algorithms+0x410>)
 8001872:	482f      	ldr	r0, [pc, #188]	; (8001930 <algorithms+0x418>)
 8001874:	f005 f874 	bl	8006960 <HAL_UART_Transmit>

		for (int j = 0; j < 100; j++){
 8001878:	2300      	movs	r3, #0
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	e016      	b.n	80018ac <algorithms+0x394>
			bubSort_array[j] = temp_array[j];
 800187e:	4a2d      	ldr	r2, [pc, #180]	; (8001934 <algorithms+0x41c>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	492d      	ldr	r1, [pc, #180]	; (8001940 <algorithms+0x428>)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	601a      	str	r2, [r3, #0]
			selSort_array[j] = temp_array[j];
 8001892:	4a28      	ldr	r2, [pc, #160]	; (8001934 <algorithms+0x41c>)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4929      	ldr	r1, [pc, #164]	; (8001944 <algorithms+0x42c>)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 100; j++){
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b63      	cmp	r3, #99	; 0x63
 80018b0:	dde5      	ble.n	800187e <algorithms+0x366>
	for(int16_t i = 0; i < 100; i++){
 80018b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	80fb      	strh	r3, [r7, #6]
 80018be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c2:	2b63      	cmp	r3, #99	; 0x63
 80018c4:	f77f ae2e 	ble.w	8001524 <algorithms+0xc>
		}
	}

	promSelSort = promSelSort/100;
 80018c8:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <algorithms+0x430>)
 80018ca:	ed93 7a00 	vldr	s14, [r3]
 80018ce:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800194c <algorithms+0x434>
 80018d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <algorithms+0x430>)
 80018d8:	edc3 7a00 	vstr	s15, [r3]
	promBubSort = promBubSort/100;
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <algorithms+0x438>)
 80018de:	ed93 7a00 	vldr	s14, [r3]
 80018e2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800194c <algorithms+0x434>
 80018e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <algorithms+0x438>)
 80018ec:	edc3 7a00 	vstr	s15, [r3]
	promSeqSearch = promSeqSearch/100;
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <algorithms+0x43c>)
 80018f2:	ed93 7a00 	vldr	s14, [r3]
 80018f6:	eddf 6a15 	vldr	s13, [pc, #84]	; 800194c <algorithms+0x434>
 80018fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <algorithms+0x43c>)
 8001900:	edc3 7a00 	vstr	s15, [r3]
	promBinSearch = promBinSearch/100;
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <algorithms+0x440>)
 8001906:	ed93 7a00 	vldr	s14, [r3]
 800190a:	eddf 6a10 	vldr	s13, [pc, #64]	; 800194c <algorithms+0x434>
 800190e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <algorithms+0x440>)
 8001914:	edc3 7a00 	vstr	s15, [r3]
	displayLoop();
 8001918:	f000 f820 	bl	800195c <displayLoop>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	0800a864 	.word	0x0800a864
 8001928:	2400038c 	.word	0x2400038c
 800192c:	240003be 	.word	0x240003be
 8001930:	240002e0 	.word	0x240002e0
 8001934:	240006e0 	.word	0x240006e0
 8001938:	24000878 	.word	0x24000878
 800193c:	0800a8a8 	.word	0x0800a8a8
 8001940:	24000550 	.word	0x24000550
 8001944:	240003c0 	.word	0x240003c0
 8001948:	24000ebc 	.word	0x24000ebc
 800194c:	42c80000 	.word	0x42c80000
 8001950:	24000ec0 	.word	0x24000ec0
 8001954:	24000ec4 	.word	0x24000ec4
 8001958:	24000ec8 	.word	0x24000ec8

0800195c <displayLoop>:

void displayLoop(void){
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	ind = 1;
 8001960:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <displayLoop+0xc4>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
	lcd_clear();
 8001966:	f7fe ff8b 	bl	8000880 <lcd_clear>
	uart_buf_len = sprintf(uart_buf, "Selection Sort: %.2f useg \r\n", promSelSort);
 800196a:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <displayLoop+0xc8>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001974:	ec53 2b17 	vmov	r2, r3, d7
 8001978:	492b      	ldr	r1, [pc, #172]	; (8001a28 <displayLoop+0xcc>)
 800197a:	482c      	ldr	r0, [pc, #176]	; (8001a2c <displayLoop+0xd0>)
 800197c:	f006 fd1a 	bl	80083b4 <siprintf>
 8001980:	4603      	mov	r3, r0
 8001982:	b29a      	uxth	r2, r3
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <displayLoop+0xd4>)
 8001986:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001988:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <displayLoop+0xd4>)
 800198a:	881a      	ldrh	r2, [r3, #0]
 800198c:	2364      	movs	r3, #100	; 0x64
 800198e:	4927      	ldr	r1, [pc, #156]	; (8001a2c <displayLoop+0xd0>)
 8001990:	4828      	ldr	r0, [pc, #160]	; (8001a34 <displayLoop+0xd8>)
 8001992:	f004 ffe5 	bl	8006960 <HAL_UART_Transmit>
	uart_buf_len = sprintf(uart_buf, "Bubble Sort: %.2f useg \r\n", promBubSort);
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <displayLoop+0xdc>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019a0:	ec53 2b17 	vmov	r2, r3, d7
 80019a4:	4925      	ldr	r1, [pc, #148]	; (8001a3c <displayLoop+0xe0>)
 80019a6:	4821      	ldr	r0, [pc, #132]	; (8001a2c <displayLoop+0xd0>)
 80019a8:	f006 fd04 	bl	80083b4 <siprintf>
 80019ac:	4603      	mov	r3, r0
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <displayLoop+0xd4>)
 80019b2:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <displayLoop+0xd4>)
 80019b6:	881a      	ldrh	r2, [r3, #0]
 80019b8:	2364      	movs	r3, #100	; 0x64
 80019ba:	491c      	ldr	r1, [pc, #112]	; (8001a2c <displayLoop+0xd0>)
 80019bc:	481d      	ldr	r0, [pc, #116]	; (8001a34 <displayLoop+0xd8>)
 80019be:	f004 ffcf 	bl	8006960 <HAL_UART_Transmit>
	uart_buf_len = sprintf(uart_buf, "Sequential Search: %.2f useg \r\n", promSeqSearch);
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <displayLoop+0xe4>)
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019cc:	ec53 2b17 	vmov	r2, r3, d7
 80019d0:	491c      	ldr	r1, [pc, #112]	; (8001a44 <displayLoop+0xe8>)
 80019d2:	4816      	ldr	r0, [pc, #88]	; (8001a2c <displayLoop+0xd0>)
 80019d4:	f006 fcee 	bl	80083b4 <siprintf>
 80019d8:	4603      	mov	r3, r0
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <displayLoop+0xd4>)
 80019de:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <displayLoop+0xd4>)
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	2364      	movs	r3, #100	; 0x64
 80019e6:	4911      	ldr	r1, [pc, #68]	; (8001a2c <displayLoop+0xd0>)
 80019e8:	4812      	ldr	r0, [pc, #72]	; (8001a34 <displayLoop+0xd8>)
 80019ea:	f004 ffb9 	bl	8006960 <HAL_UART_Transmit>
	uart_buf_len = sprintf(uart_buf, "BinarySearch: %.2f useg \r\n", promBinSearch);
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <displayLoop+0xec>)
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019f8:	ec53 2b17 	vmov	r2, r3, d7
 80019fc:	4913      	ldr	r1, [pc, #76]	; (8001a4c <displayLoop+0xf0>)
 80019fe:	480b      	ldr	r0, [pc, #44]	; (8001a2c <displayLoop+0xd0>)
 8001a00:	f006 fcd8 	bl	80083b4 <siprintf>
 8001a04:	4603      	mov	r3, r0
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <displayLoop+0xd4>)
 8001a0a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <displayLoop+0xd4>)
 8001a0e:	881a      	ldrh	r2, [r3, #0]
 8001a10:	2364      	movs	r3, #100	; 0x64
 8001a12:	4906      	ldr	r1, [pc, #24]	; (8001a2c <displayLoop+0xd0>)
 8001a14:	4807      	ldr	r0, [pc, #28]	; (8001a34 <displayLoop+0xd8>)
 8001a16:	f004 ffa3 	bl	8006960 <HAL_UART_Transmit>

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	24000ecc 	.word	0x24000ecc
 8001a24:	24000ebc 	.word	0x24000ebc
 8001a28:	0800a8d8 	.word	0x0800a8d8
 8001a2c:	2400038c 	.word	0x2400038c
 8001a30:	240003be 	.word	0x240003be
 8001a34:	240002e0 	.word	0x240002e0
 8001a38:	24000ec0 	.word	0x24000ec0
 8001a3c:	0800a8f8 	.word	0x0800a8f8
 8001a40:	24000ec4 	.word	0x24000ec4
 8001a44:	0800a914 	.word	0x0800a914
 8001a48:	24000ec8 	.word	0x24000ec8
 8001a4c:	0800a934 	.word	0x0800a934

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <Error_Handler+0x8>
	...

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_MspInit+0x30>)
 8001a64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a68:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_MspInit+0x30>)
 8001a6a:	f043 0302 	orr.w	r3, r3, #2
 8001a6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_MspInit+0x30>)
 8001a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	58024400 	.word	0x58024400

08001a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0b8      	sub	sp, #224	; 0xe0
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	22bc      	movs	r2, #188	; 0xbc
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f006 f835 	bl	8007b20 <memset>
  if(hi2c->Instance==I2C4)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <HAL_I2C_MspInit+0xc0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d142      	bne.n	8001b46 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001ac0:	2310      	movs	r3, #16
 8001ac2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 fdfc 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ada:	f7ff ffb9 	bl	8001a50 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001ae6:	f043 0320 	orr.w	r3, r3, #32
 8001aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001afc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b04:	2312      	movs	r3, #18
 8001b06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001b16:	2304      	movs	r3, #4
 8001b18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b20:	4619      	mov	r1, r3
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <HAL_I2C_MspInit+0xc8>)
 8001b24:	f000 fbb4 	bl	8002290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b2e:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001b3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	37e0      	adds	r7, #224	; 0xe0
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	58001c00 	.word	0x58001c00
 8001b54:	58024400 	.word	0x58024400
 8001b58:	58021400 	.word	0x58021400

08001b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6c:	d117      	bne.n	8001b9e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_TIM_Base_MspInit+0x74>)
 8001b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b74:	4a16      	ldr	r2, [pc, #88]	; (8001bd0 <HAL_TIM_Base_MspInit+0x74>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_TIM_Base_MspInit+0x74>)
 8001b80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2100      	movs	r1, #0
 8001b90:	201c      	movs	r0, #28
 8001b92:	f000 fb48 	bl	8002226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b96:	201c      	movs	r0, #28
 8001b98:	f000 fb5f 	bl	800225a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b9c:	e013      	b.n	8001bc6 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM5)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <HAL_TIM_Base_MspInit+0x78>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d10e      	bne.n	8001bc6 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_TIM_Base_MspInit+0x74>)
 8001baa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bae:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <HAL_TIM_Base_MspInit+0x74>)
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_TIM_Base_MspInit+0x74>)
 8001bba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	58024400 	.word	0x58024400
 8001bd4:	40000c00 	.word	0x40000c00

08001bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b0b8      	sub	sp, #224	; 0xe0
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	22bc      	movs	r2, #188	; 0xbc
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f005 ff91 	bl	8007b20 <memset>
  if(huart->Instance==USART3)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a25      	ldr	r2, [pc, #148]	; (8001c98 <HAL_UART_MspInit+0xc0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d142      	bne.n	8001c8e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c12:	f107 0310 	add.w	r3, r7, #16
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 fd58 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c22:	f7ff ff15 	bl	8001a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HAL_UART_MspInit+0xc4>)
 8001c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c2c:	4a1b      	ldr	r2, [pc, #108]	; (8001c9c <HAL_UART_MspInit+0xc4>)
 8001c2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_UART_MspInit+0xc4>)
 8001c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c44:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_UART_MspInit+0xc4>)
 8001c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4a:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <HAL_UART_MspInit+0xc4>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_UART_MspInit+0xc4>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c82:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_UART_MspInit+0xc8>)
 8001c8a:	f000 fb01 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c8e:	bf00      	nop
 8001c90:	37e0      	adds	r7, #224	; 0xe0
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40004800 	.word	0x40004800
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	58020c00 	.word	0x58020c00

08001ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <NMI_Handler+0x4>

08001caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <HardFault_Handler+0x4>

08001cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <MemManage_Handler+0x4>

08001cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf0:	f000 f96e 	bl	8001fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <TIM2_IRQHandler+0x10>)
 8001cfe:	f004 f9bc 	bl	800607a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	24000248 	.word	0x24000248

08001d0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
	return 1;
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_kill>:

int _kill(int pid, int sig)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d26:	f005 fed1 	bl	8007acc <__errno>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2216      	movs	r2, #22
 8001d2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_exit>:

void _exit (int status)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ffe7 	bl	8001d1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d4e:	e7fe      	b.n	8001d4e <_exit+0x12>

08001d50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	e00a      	b.n	8001d78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d62:	f3af 8000 	nop.w
 8001d66:	4601      	mov	r1, r0
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	60ba      	str	r2, [r7, #8]
 8001d6e:	b2ca      	uxtb	r2, r1
 8001d70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	3301      	adds	r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	dbf0      	blt.n	8001d62 <_read+0x12>
	}

return len;
 8001d80:	687b      	ldr	r3, [r7, #4]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	e009      	b.n	8001db0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	60ba      	str	r2, [r7, #8]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dbf1      	blt.n	8001d9c <_write+0x12>
	}
	return len;
 8001db8:	687b      	ldr	r3, [r7, #4]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_close>:

int _close(int file)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
	return -1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dea:	605a      	str	r2, [r3, #4]
	return 0;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <_isatty>:

int _isatty(int file)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
	return 1;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e34:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <_sbrk+0x5c>)
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <_sbrk+0x60>)
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <_sbrk+0x64>)
 8001e4a:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <_sbrk+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d207      	bcs.n	8001e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e5c:	f005 fe36 	bl	8007acc <__errno>
 8001e60:	4603      	mov	r3, r0
 8001e62:	220c      	movs	r2, #12
 8001e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	e009      	b.n	8001e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <_sbrk+0x64>)
 8001e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	24080000 	.word	0x24080000
 8001e8c:	00000400 	.word	0x00000400
 8001e90:	24000ed0 	.word	0x24000ed0
 8001e94:	24000ee8 	.word	0x24000ee8

08001e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e9c:	f7fe fbfa 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea0:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ea2:	490d      	ldr	r1, [pc, #52]	; (8001ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea8:	e002      	b.n	8001eb0 <LoopCopyDataInit>

08001eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eae:	3304      	adds	r3, #4

08001eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb4:	d3f9      	bcc.n	8001eaa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eb8:	4c0a      	ldr	r4, [pc, #40]	; (8001ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ebc:	e001      	b.n	8001ec2 <LoopFillZerobss>

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec0:	3204      	adds	r2, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ec6:	f005 fe07 	bl	8007ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eca:	f7fe fd61 	bl	8000990 <main>
  bx  lr
 8001ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ed4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ed8:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001edc:	0800ad74 	.word	0x0800ad74
  ldr r2, =_sbss
 8001ee0:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001ee4:	24000ee8 	.word	0x24000ee8

08001ee8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee8:	e7fe      	b.n	8001ee8 <ADC3_IRQHandler>
	...

08001eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	f000 f98c 	bl	8002210 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ef8:	f002 fa12 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_Init+0x68>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	4913      	ldr	r1, [pc, #76]	; (8001f58 <HAL_Init+0x6c>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
 8001f14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_Init+0x68>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	4a0e      	ldr	r2, [pc, #56]	; (8001f58 <HAL_Init+0x6c>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <HAL_Init+0x70>)
 8001f2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f30:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <HAL_Init+0x74>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f36:	2000      	movs	r0, #0
 8001f38:	f000 f814 	bl	8001f64 <HAL_InitTick>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e002      	b.n	8001f4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f46:	f7ff fd89 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	58024400 	.word	0x58024400
 8001f58:	0800a950 	.word	0x0800a950
 8001f5c:	24000004 	.word	0x24000004
 8001f60:	24000000 	.word	0x24000000

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_InitTick+0x60>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e021      	b.n	8001fbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_InitTick+0x64>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_InitTick+0x60>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f971 	bl	8002276 <HAL_SYSTICK_Config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00e      	b.n	8001fbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b0f      	cmp	r3, #15
 8001fa2:	d80a      	bhi.n	8001fba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f000 f93b 	bl	8002226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb0:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <HAL_InitTick+0x68>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e000      	b.n	8001fbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	2400000c 	.word	0x2400000c
 8001fc8:	24000000 	.word	0x24000000
 8001fcc:	24000008 	.word	0x24000008

08001fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_IncTick+0x20>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_IncTick+0x24>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <HAL_IncTick+0x24>)
 8001fe2:	6013      	str	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	2400000c 	.word	0x2400000c
 8001ff4:	24000ed4 	.word	0x24000ed4

08001ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <HAL_GetTick+0x14>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	24000ed4 	.word	0x24000ed4

08002010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7ff ffee 	bl	8001ff8 <HAL_GetTick>
 800201c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d005      	beq.n	8002036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_Delay+0x44>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002036:	bf00      	nop
 8002038:	f7ff ffde 	bl	8001ff8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	429a      	cmp	r2, r3
 8002046:	d8f7      	bhi.n	8002038 <HAL_Delay+0x28>
  {
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2400000c 	.word	0x2400000c

08002058 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800205c:	4b03      	ldr	r3, [pc, #12]	; (800206c <HAL_GetREVID+0x14>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0c1b      	lsrs	r3, r3, #16
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	5c001000 	.word	0x5c001000

08002070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <__NVIC_SetPriorityGrouping+0x40>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800208c:	4013      	ands	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 800209a:	4313      	orrs	r3, r2
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <__NVIC_SetPriorityGrouping+0x40>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00
 80020b4:	05fa0000 	.word	0x05fa0000

080020b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <__NVIC_GetPriorityGrouping+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0307 	and.w	r3, r3, #7
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	db0b      	blt.n	80020fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	4907      	ldr	r1, [pc, #28]	; (800210c <__NVIC_EnableIRQ+0x38>)
 80020ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2001      	movs	r0, #1
 80020f6:	fa00 f202 	lsl.w	r2, r0, r2
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000e100 	.word	0xe000e100

08002110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	6039      	str	r1, [r7, #0]
 800211a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800211c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002120:	2b00      	cmp	r3, #0
 8002122:	db0a      	blt.n	800213a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	490c      	ldr	r1, [pc, #48]	; (800215c <__NVIC_SetPriority+0x4c>)
 800212a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212e:	0112      	lsls	r2, r2, #4
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	440b      	add	r3, r1
 8002134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002138:	e00a      	b.n	8002150 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4908      	ldr	r1, [pc, #32]	; (8002160 <__NVIC_SetPriority+0x50>)
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	3b04      	subs	r3, #4
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	440b      	add	r3, r1
 800214e:	761a      	strb	r2, [r3, #24]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f1c3 0307 	rsb	r3, r3, #7
 800217e:	2b04      	cmp	r3, #4
 8002180:	bf28      	it	cs
 8002182:	2304      	movcs	r3, #4
 8002184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3304      	adds	r3, #4
 800218a:	2b06      	cmp	r3, #6
 800218c:	d902      	bls.n	8002194 <NVIC_EncodePriority+0x30>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3b03      	subs	r3, #3
 8002192:	e000      	b.n	8002196 <NVIC_EncodePriority+0x32>
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	401a      	ands	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	4313      	orrs	r3, r2
         );
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3724      	adds	r7, #36	; 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021dc:	d301      	bcc.n	80021e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021de:	2301      	movs	r3, #1
 80021e0:	e00f      	b.n	8002202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <SysTick_Config+0x40>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ea:	210f      	movs	r1, #15
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f7ff ff8e 	bl	8002110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <SysTick_Config+0x40>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <SysTick_Config+0x40>)
 80021fc:	2207      	movs	r2, #7
 80021fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	e000e010 	.word	0xe000e010

08002210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff29 	bl	8002070 <__NVIC_SetPriorityGrouping>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff40 	bl	80020b8 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff90 	bl	8002164 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5f 	bl	8002110 <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff33 	bl	80020d4 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa4 	bl	80021cc <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800229e:	4b89      	ldr	r3, [pc, #548]	; (80024c4 <HAL_GPIO_Init+0x234>)
 80022a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022a2:	e194      	b.n	80025ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2101      	movs	r1, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8186 	beq.w	80025c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d005      	beq.n	80022d4 <HAL_GPIO_Init+0x44>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d130      	bne.n	8002336 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800230a:	2201      	movs	r2, #1
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 0201 	and.w	r2, r3, #1
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b03      	cmp	r3, #3
 8002340:	d017      	beq.n	8002372 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d123      	bne.n	80023c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	08da      	lsrs	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3208      	adds	r2, #8
 8002386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	08da      	lsrs	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3208      	adds	r2, #8
 80023c0:	69b9      	ldr	r1, [r7, #24]
 80023c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0203 	and.w	r2, r3, #3
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80e0 	beq.w	80025c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002408:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <HAL_GPIO_Init+0x238>)
 800240a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800240e:	4a2e      	ldr	r2, [pc, #184]	; (80024c8 <HAL_GPIO_Init+0x238>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_GPIO_Init+0x238>)
 800241a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002426:	4a29      	ldr	r2, [pc, #164]	; (80024cc <HAL_GPIO_Init+0x23c>)
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	220f      	movs	r2, #15
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a20      	ldr	r2, [pc, #128]	; (80024d0 <HAL_GPIO_Init+0x240>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d052      	beq.n	80024f8 <HAL_GPIO_Init+0x268>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <HAL_GPIO_Init+0x244>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d031      	beq.n	80024be <HAL_GPIO_Init+0x22e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <HAL_GPIO_Init+0x248>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d02b      	beq.n	80024ba <HAL_GPIO_Init+0x22a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <HAL_GPIO_Init+0x24c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d025      	beq.n	80024b6 <HAL_GPIO_Init+0x226>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_GPIO_Init+0x250>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01f      	beq.n	80024b2 <HAL_GPIO_Init+0x222>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_GPIO_Init+0x254>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d019      	beq.n	80024ae <HAL_GPIO_Init+0x21e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a1a      	ldr	r2, [pc, #104]	; (80024e8 <HAL_GPIO_Init+0x258>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0x21a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a19      	ldr	r2, [pc, #100]	; (80024ec <HAL_GPIO_Init+0x25c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00d      	beq.n	80024a6 <HAL_GPIO_Init+0x216>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a18      	ldr	r2, [pc, #96]	; (80024f0 <HAL_GPIO_Init+0x260>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x212>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <HAL_GPIO_Init+0x264>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_GPIO_Init+0x20e>
 800249a:	2309      	movs	r3, #9
 800249c:	e02d      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 800249e:	230a      	movs	r3, #10
 80024a0:	e02b      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024a2:	2308      	movs	r3, #8
 80024a4:	e029      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024a6:	2307      	movs	r3, #7
 80024a8:	e027      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024aa:	2306      	movs	r3, #6
 80024ac:	e025      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024ae:	2305      	movs	r3, #5
 80024b0:	e023      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024b2:	2304      	movs	r3, #4
 80024b4:	e021      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024b6:	2303      	movs	r3, #3
 80024b8:	e01f      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e01d      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024be:	2301      	movs	r3, #1
 80024c0:	e01b      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024c2:	bf00      	nop
 80024c4:	58000080 	.word	0x58000080
 80024c8:	58024400 	.word	0x58024400
 80024cc:	58000400 	.word	0x58000400
 80024d0:	58020000 	.word	0x58020000
 80024d4:	58020400 	.word	0x58020400
 80024d8:	58020800 	.word	0x58020800
 80024dc:	58020c00 	.word	0x58020c00
 80024e0:	58021000 	.word	0x58021000
 80024e4:	58021400 	.word	0x58021400
 80024e8:	58021800 	.word	0x58021800
 80024ec:	58021c00 	.word	0x58021c00
 80024f0:	58022000 	.word	0x58022000
 80024f4:	58022400 	.word	0x58022400
 80024f8:	2300      	movs	r3, #0
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	f002 0203 	and.w	r2, r2, #3
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	4093      	lsls	r3, r2
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800250a:	4938      	ldr	r1, [pc, #224]	; (80025ec <HAL_GPIO_Init+0x35c>)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3302      	adds	r3, #2
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800253e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800256c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	3301      	adds	r3, #1
 80025cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f47f ae63 	bne.w	80022a4 <HAL_GPIO_Init+0x14>
  }
}
 80025de:	bf00      	nop
 80025e0:	bf00      	nop
 80025e2:	3724      	adds	r7, #36	; 0x24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	58000400 	.word	0x58000400

080025f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800260c:	e003      	b.n	8002616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	041a      	lsls	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	619a      	str	r2, [r3, #24]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002622:	b480      	push	{r7}
 8002624:	b085      	sub	sp, #20
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002634:	887a      	ldrh	r2, [r7, #2]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4013      	ands	r3, r2
 800263a:	041a      	lsls	r2, r3, #16
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	43d9      	mvns	r1, r3
 8002640:	887b      	ldrh	r3, [r7, #2]
 8002642:	400b      	ands	r3, r1
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	619a      	str	r2, [r3, #24]
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002660:	4a08      	ldr	r2, [pc, #32]	; (8002684 <HAL_HSEM_FastTake+0x2c>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3320      	adds	r3, #32
 8002666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266a:	4a07      	ldr	r2, [pc, #28]	; (8002688 <HAL_HSEM_FastTake+0x30>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d101      	bne.n	8002674 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	58026400 	.word	0x58026400
 8002688:	80000300 	.word	0x80000300

0800268c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002696:	4906      	ldr	r1, [pc, #24]	; (80026b0 <HAL_HSEM_Release+0x24>)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	58026400 	.word	0x58026400

080026b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e07f      	b.n	80027c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff f9d8 	bl	8001a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	; 0x24
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002704:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002714:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	e006      	b.n	800273c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800273a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d104      	bne.n	800274e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800274c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_I2C_Init+0x11c>)
 800275a:	430b      	orrs	r3, r1
 800275c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800276c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69d9      	ldr	r1, [r3, #28]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1a      	ldr	r2, [r3, #32]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	02008000 	.word	0x02008000

080027d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	461a      	mov	r2, r3
 80027e0:	460b      	mov	r3, r1
 80027e2:	817b      	strh	r3, [r7, #10]
 80027e4:	4613      	mov	r3, r2
 80027e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	f040 80da 	bne.w	80029aa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_I2C_Master_Transmit+0x30>
 8002800:	2302      	movs	r3, #2
 8002802:	e0d3      	b.n	80029ac <HAL_I2C_Master_Transmit+0x1d8>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800280c:	f7ff fbf4 	bl	8001ff8 <HAL_GetTick>
 8002810:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2319      	movs	r3, #25
 8002818:	2201      	movs	r2, #1
 800281a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fcce 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0be      	b.n	80029ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2221      	movs	r2, #33	; 0x21
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2210      	movs	r2, #16
 800283a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	893a      	ldrh	r2, [r7, #8]
 800284e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	2bff      	cmp	r3, #255	; 0xff
 800285e:	d90e      	bls.n	800287e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	22ff      	movs	r2, #255	; 0xff
 8002864:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286a:	b2da      	uxtb	r2, r3
 800286c:	8979      	ldrh	r1, [r7, #10]
 800286e:	4b51      	ldr	r3, [pc, #324]	; (80029b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fe4a 	bl	8003510 <I2C_TransferConfig>
 800287c:	e06c      	b.n	8002958 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	b2da      	uxtb	r2, r3
 800288e:	8979      	ldrh	r1, [r7, #10]
 8002890:	4b48      	ldr	r3, [pc, #288]	; (80029b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fe39 	bl	8003510 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800289e:	e05b      	b.n	8002958 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	6a39      	ldr	r1, [r7, #32]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fccb 	bl	8003240 <I2C_WaitOnTXISFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e07b      	b.n	80029ac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	781a      	ldrb	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d034      	beq.n	8002958 <HAL_I2C_Master_Transmit+0x184>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d130      	bne.n	8002958 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	2200      	movs	r2, #0
 80028fe:	2180      	movs	r1, #128	; 0x80
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fc5d 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e04d      	b.n	80029ac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	2bff      	cmp	r3, #255	; 0xff
 8002918:	d90e      	bls.n	8002938 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	22ff      	movs	r2, #255	; 0xff
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	b2da      	uxtb	r2, r3
 8002926:	8979      	ldrh	r1, [r7, #10]
 8002928:	2300      	movs	r3, #0
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fded 	bl	8003510 <I2C_TransferConfig>
 8002936:	e00f      	b.n	8002958 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	b2da      	uxtb	r2, r3
 8002948:	8979      	ldrh	r1, [r7, #10]
 800294a:	2300      	movs	r3, #0
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fddc 	bl	8003510 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d19e      	bne.n	80028a0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	6a39      	ldr	r1, [r7, #32]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fcaa 	bl	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e01a      	b.n	80029ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2220      	movs	r2, #32
 800297c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_I2C_Master_Transmit+0x1e4>)
 800298a:	400b      	ands	r3, r1
 800298c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e000      	b.n	80029ac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
  }
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	80002000 	.word	0x80002000
 80029b8:	fe00e800 	.word	0xfe00e800

080029bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	4608      	mov	r0, r1
 80029c6:	4611      	mov	r1, r2
 80029c8:	461a      	mov	r2, r3
 80029ca:	4603      	mov	r3, r0
 80029cc:	817b      	strh	r3, [r7, #10]
 80029ce:	460b      	mov	r3, r1
 80029d0:	813b      	strh	r3, [r7, #8]
 80029d2:	4613      	mov	r3, r2
 80029d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b20      	cmp	r3, #32
 80029e0:	f040 80f9 	bne.w	8002bd6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_I2C_Mem_Write+0x34>
 80029ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0ed      	b.n	8002bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_I2C_Mem_Write+0x4e>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e0e6      	b.n	8002bd8 <HAL_I2C_Mem_Write+0x21c>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a12:	f7ff faf1 	bl	8001ff8 <HAL_GetTick>
 8002a16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2319      	movs	r3, #25
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fbcb 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0d1      	b.n	8002bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2221      	movs	r2, #33	; 0x21
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2240      	movs	r2, #64	; 0x40
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a3a      	ldr	r2, [r7, #32]
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a5c:	88f8      	ldrh	r0, [r7, #6]
 8002a5e:	893a      	ldrh	r2, [r7, #8]
 8002a60:	8979      	ldrh	r1, [r7, #10]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	9301      	str	r3, [sp, #4]
 8002a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fadb 	bl	8003028 <I2C_RequestMemoryWrite>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0a9      	b.n	8002bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2bff      	cmp	r3, #255	; 0xff
 8002a8c:	d90e      	bls.n	8002aac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	22ff      	movs	r2, #255	; 0xff
 8002a92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	8979      	ldrh	r1, [r7, #10]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fd33 	bl	8003510 <I2C_TransferConfig>
 8002aaa:	e00f      	b.n	8002acc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	8979      	ldrh	r1, [r7, #10]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fd22 	bl	8003510 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fbb5 	bl	8003240 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e07b      	b.n	8002bd8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d034      	beq.n	8002b84 <HAL_I2C_Mem_Write+0x1c8>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d130      	bne.n	8002b84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2180      	movs	r1, #128	; 0x80
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fb47 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e04d      	b.n	8002bd8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2bff      	cmp	r3, #255	; 0xff
 8002b44:	d90e      	bls.n	8002b64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	22ff      	movs	r2, #255	; 0xff
 8002b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	8979      	ldrh	r1, [r7, #10]
 8002b54:	2300      	movs	r3, #0
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fcd7 	bl	8003510 <I2C_TransferConfig>
 8002b62:	e00f      	b.n	8002b84 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	8979      	ldrh	r1, [r7, #10]
 8002b76:	2300      	movs	r3, #0
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fcc6 	bl	8003510 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d19e      	bne.n	8002acc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 fb94 	bl	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e01a      	b.n	8002bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_I2C_Mem_Write+0x224>)
 8002bb6:	400b      	ands	r3, r1
 8002bb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e000      	b.n	8002bd8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
  }
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	fe00e800 	.word	0xfe00e800

08002be4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	4608      	mov	r0, r1
 8002bee:	4611      	mov	r1, r2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	817b      	strh	r3, [r7, #10]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	813b      	strh	r3, [r7, #8]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	f040 80fd 	bne.w	8002e06 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_I2C_Mem_Read+0x34>
 8002c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0f1      	b.n	8002e08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_I2C_Mem_Read+0x4e>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e0ea      	b.n	8002e08 <HAL_I2C_Mem_Read+0x224>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c3a:	f7ff f9dd 	bl	8001ff8 <HAL_GetTick>
 8002c3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2319      	movs	r3, #25
 8002c46:	2201      	movs	r2, #1
 8002c48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fab7 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0d5      	b.n	8002e08 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2222      	movs	r2, #34	; 0x22
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2240      	movs	r2, #64	; 0x40
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a3a      	ldr	r2, [r7, #32]
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c84:	88f8      	ldrh	r0, [r7, #6]
 8002c86:	893a      	ldrh	r2, [r7, #8]
 8002c88:	8979      	ldrh	r1, [r7, #10]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	4603      	mov	r3, r0
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fa1b 	bl	80030d0 <I2C_RequestMemoryRead>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0ad      	b.n	8002e08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2bff      	cmp	r3, #255	; 0xff
 8002cb4:	d90e      	bls.n	8002cd4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	22ff      	movs	r2, #255	; 0xff
 8002cba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	8979      	ldrh	r1, [r7, #10]
 8002cc4:	4b52      	ldr	r3, [pc, #328]	; (8002e10 <HAL_I2C_Mem_Read+0x22c>)
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fc1f 	bl	8003510 <I2C_TransferConfig>
 8002cd2:	e00f      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	8979      	ldrh	r1, [r7, #10]
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	; (8002e10 <HAL_I2C_Mem_Read+0x22c>)
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fc0e 	bl	8003510 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2104      	movs	r1, #4
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fa5e 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e07c      	b.n	8002e08 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d034      	beq.n	8002db4 <HAL_I2C_Mem_Read+0x1d0>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d130      	bne.n	8002db4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2180      	movs	r1, #128	; 0x80
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fa2f 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e04d      	b.n	8002e08 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2bff      	cmp	r3, #255	; 0xff
 8002d74:	d90e      	bls.n	8002d94 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	22ff      	movs	r2, #255	; 0xff
 8002d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	8979      	ldrh	r1, [r7, #10]
 8002d84:	2300      	movs	r3, #0
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fbbf 	bl	8003510 <I2C_TransferConfig>
 8002d92:	e00f      	b.n	8002db4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	8979      	ldrh	r1, [r7, #10]
 8002da6:	2300      	movs	r3, #0
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fbae 	bl	8003510 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d19a      	bne.n	8002cf4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fa7c 	bl	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e01a      	b.n	8002e08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_I2C_Mem_Read+0x230>)
 8002de6:	400b      	ands	r3, r1
 8002de8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e000      	b.n	8002e08 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
  }
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	80002400 	.word	0x80002400
 8002e14:	fe00e800 	.word	0xfe00e800

08002e18 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	460b      	mov	r3, r1
 8002e26:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	f040 80ef 	bne.w	8003018 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e48:	d101      	bne.n	8002e4e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e0e5      	b.n	800301a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_I2C_IsDeviceReady+0x44>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e0de      	b.n	800301a <HAL_I2C_IsDeviceReady+0x202>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2224      	movs	r2, #36	; 0x24
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d105      	bne.n	8002e86 <HAL_I2C_IsDeviceReady+0x6e>
 8002e7a:	897b      	ldrh	r3, [r7, #10]
 8002e7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e80:	4b68      	ldr	r3, [pc, #416]	; (8003024 <HAL_I2C_IsDeviceReady+0x20c>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	e004      	b.n	8002e90 <HAL_I2C_IsDeviceReady+0x78>
 8002e86:	897b      	ldrh	r3, [r7, #10]
 8002e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e8c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002e96:	f7ff f8af 	bl	8001ff8 <HAL_GetTick>
 8002e9a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	bf0c      	ite	eq
 8002eaa:	2301      	moveq	r3, #1
 8002eac:	2300      	movne	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002ec8:	e034      	b.n	8002f34 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d01a      	beq.n	8002f08 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ed2:	f7ff f891 	bl	8001ff8 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <HAL_I2C_IsDeviceReady+0xd0>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10f      	bne.n	8002f08 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	f043 0220 	orr.w	r2, r3, #32
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e088      	b.n	800301a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b10      	cmp	r3, #16
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002f34:	7ffb      	ldrb	r3, [r7, #31]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <HAL_I2C_IsDeviceReady+0x128>
 8002f3a:	7fbb      	ldrb	r3, [r7, #30]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0c4      	beq.n	8002eca <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d01a      	beq.n	8002f84 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2200      	movs	r2, #0
 8002f56:	2120      	movs	r1, #32
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f931 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e058      	b.n	800301a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e04a      	b.n	800301a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f916 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e03d      	b.n	800301a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2210      	movs	r2, #16
 8002fa4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2220      	movs	r2, #32
 8002fac:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d118      	bne.n	8002fe8 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fc4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2120      	movs	r1, #32
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f8f5 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e01c      	b.n	800301a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	3301      	adds	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	f63f af3d 	bhi.w	8002e72 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003018:	2302      	movs	r3, #2
  }
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	02002000 	.word	0x02002000

08003028 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	461a      	mov	r2, r3
 8003036:	4603      	mov	r3, r0
 8003038:	817b      	strh	r3, [r7, #10]
 800303a:	460b      	mov	r3, r1
 800303c:	813b      	strh	r3, [r7, #8]
 800303e:	4613      	mov	r3, r2
 8003040:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	8979      	ldrh	r1, [r7, #10]
 8003048:	4b20      	ldr	r3, [pc, #128]	; (80030cc <I2C_RequestMemoryWrite+0xa4>)
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fa5d 	bl	8003510 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	69b9      	ldr	r1, [r7, #24]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f8f0 	bl	8003240 <I2C_WaitOnTXISFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e02c      	b.n	80030c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d105      	bne.n	800307c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003070:	893b      	ldrh	r3, [r7, #8]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
 800307a:	e015      	b.n	80030a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800307c:	893b      	ldrh	r3, [r7, #8]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	b29b      	uxth	r3, r3
 8003082:	b2da      	uxtb	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	69b9      	ldr	r1, [r7, #24]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f8d6 	bl	8003240 <I2C_WaitOnTXISFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e012      	b.n	80030c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800309e:	893b      	ldrh	r3, [r7, #8]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2200      	movs	r2, #0
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f884 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	80002000 	.word	0x80002000

080030d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	4608      	mov	r0, r1
 80030da:	4611      	mov	r1, r2
 80030dc:	461a      	mov	r2, r3
 80030de:	4603      	mov	r3, r0
 80030e0:	817b      	strh	r3, [r7, #10]
 80030e2:	460b      	mov	r3, r1
 80030e4:	813b      	strh	r3, [r7, #8]
 80030e6:	4613      	mov	r3, r2
 80030e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	8979      	ldrh	r1, [r7, #10]
 80030f0:	4b20      	ldr	r3, [pc, #128]	; (8003174 <I2C_RequestMemoryRead+0xa4>)
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2300      	movs	r3, #0
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fa0a 	bl	8003510 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	69b9      	ldr	r1, [r7, #24]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f89d 	bl	8003240 <I2C_WaitOnTXISFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e02c      	b.n	800316a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003116:	893b      	ldrh	r3, [r7, #8]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
 8003120:	e015      	b.n	800314e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003122:	893b      	ldrh	r3, [r7, #8]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	b29b      	uxth	r3, r3
 8003128:	b2da      	uxtb	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	69b9      	ldr	r1, [r7, #24]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f883 	bl	8003240 <I2C_WaitOnTXISFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e012      	b.n	800316a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003144:	893b      	ldrh	r3, [r7, #8]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2200      	movs	r2, #0
 8003156:	2140      	movs	r1, #64	; 0x40
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f831 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	80002000 	.word	0x80002000

08003178 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	d103      	bne.n	8003196 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d007      	beq.n	80031b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	619a      	str	r2, [r3, #24]
  }
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d0:	e022      	b.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d01e      	beq.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031da:	f7fe ff0d 	bl	8001ff8 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d302      	bcc.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d113      	bne.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e00f      	b.n	8003238 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4013      	ands	r3, r2
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	429a      	cmp	r2, r3
 8003234:	d0cd      	beq.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800324c:	e02c      	b.n	80032a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f870 	bl	8003338 <I2C_IsErrorOccurred>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e02a      	b.n	80032b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d01e      	beq.n	80032a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326a:	f7fe fec5 	bl	8001ff8 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d113      	bne.n	80032a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e007      	b.n	80032b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d1cb      	bne.n	800324e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032cc:	e028      	b.n	8003320 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f830 	bl	8003338 <I2C_IsErrorOccurred>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e026      	b.n	8003330 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e2:	f7fe fe89 	bl	8001ff8 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d302      	bcc.n	80032f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d113      	bne.n	8003320 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e007      	b.n	8003330 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b20      	cmp	r3, #32
 800332c:	d1cf      	bne.n	80032ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	d075      	beq.n	8003450 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2210      	movs	r2, #16
 800336a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800336c:	e056      	b.n	800341c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d052      	beq.n	800341c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003376:	f7fe fe3f 	bl	8001ff8 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	429a      	cmp	r2, r3
 8003384:	d302      	bcc.n	800338c <I2C_IsErrorOccurred+0x54>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d147      	bne.n	800341c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003396:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800339e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ae:	d12e      	bne.n	800340e <I2C_IsErrorOccurred+0xd6>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033b6:	d02a      	beq.n	800340e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d027      	beq.n	800340e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033cc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033ce:	f7fe fe13 	bl	8001ff8 <HAL_GetTick>
 80033d2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d4:	e01b      	b.n	800340e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033d6:	f7fe fe0f 	bl	8001ff8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b19      	cmp	r3, #25
 80033e2:	d914      	bls.n	800340e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b20      	cmp	r3, #32
 800341a:	d1dc      	bne.n	80033d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b20      	cmp	r3, #32
 8003428:	d003      	beq.n	8003432 <I2C_IsErrorOccurred+0xfa>
 800342a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800342e:	2b00      	cmp	r3, #0
 8003430:	d09d      	beq.n	800336e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2220      	movs	r2, #32
 8003440:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	f043 0304 	orr.w	r3, r3, #4
 8003448:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003472:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00b      	beq.n	800349c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f043 0308 	orr.w	r3, r3, #8
 800348a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003494:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f043 0302 	orr.w	r3, r3, #2
 80034ac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80034be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01c      	beq.n	8003500 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff fe56 	bl	8003178 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <I2C_IsErrorOccurred+0x1d4>)
 80034d8:	400b      	ands	r3, r1
 80034da:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003504:	4618      	mov	r0, r3
 8003506:	3728      	adds	r7, #40	; 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	fe00e800 	.word	0xfe00e800

08003510 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	817b      	strh	r3, [r7, #10]
 800351e:	4613      	mov	r3, r2
 8003520:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003522:	897b      	ldrh	r3, [r7, #10]
 8003524:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003528:	7a7b      	ldrb	r3, [r7, #9]
 800352a:	041b      	lsls	r3, r3, #16
 800352c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003530:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	4313      	orrs	r3, r2
 800353a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800353e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	0d5b      	lsrs	r3, r3, #21
 800354a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800354e:	4b08      	ldr	r3, [pc, #32]	; (8003570 <I2C_TransferConfig+0x60>)
 8003550:	430b      	orrs	r3, r1
 8003552:	43db      	mvns	r3, r3
 8003554:	ea02 0103 	and.w	r1, r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	03ff63ff 	.word	0x03ff63ff

08003574 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b20      	cmp	r3, #32
 8003588:	d138      	bne.n	80035fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003594:	2302      	movs	r3, #2
 8003596:	e032      	b.n	80035fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2224      	movs	r2, #36	; 0x24
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6819      	ldr	r1, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e000      	b.n	80035fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b20      	cmp	r3, #32
 800361e:	d139      	bne.n	8003694 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800362a:	2302      	movs	r3, #2
 800362c:	e033      	b.n	8003696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2224      	movs	r2, #36	; 0x24
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800365c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80036ac:	4b29      	ldr	r3, [pc, #164]	; (8003754 <HAL_PWREx_ConfigSupply+0xb0>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	2b06      	cmp	r3, #6
 80036b6:	d00a      	beq.n	80036ce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036b8:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_PWREx_ConfigSupply+0xb0>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d001      	beq.n	80036ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e040      	b.n	800374c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e03e      	b.n	800374c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <HAL_PWREx_ConfigSupply+0xb0>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80036d6:	491f      	ldr	r1, [pc, #124]	; (8003754 <HAL_PWREx_ConfigSupply+0xb0>)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80036de:	f7fe fc8b 	bl	8001ff8 <HAL_GetTick>
 80036e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036e4:	e009      	b.n	80036fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80036e6:	f7fe fc87 	bl	8001ff8 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036f4:	d901      	bls.n	80036fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e028      	b.n	800374c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036fa:	4b16      	ldr	r3, [pc, #88]	; (8003754 <HAL_PWREx_ConfigSupply+0xb0>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003706:	d1ee      	bne.n	80036e6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b1e      	cmp	r3, #30
 800370c:	d008      	beq.n	8003720 <HAL_PWREx_ConfigSupply+0x7c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b2e      	cmp	r3, #46	; 0x2e
 8003712:	d005      	beq.n	8003720 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b1d      	cmp	r3, #29
 8003718:	d002      	beq.n	8003720 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b2d      	cmp	r3, #45	; 0x2d
 800371e:	d114      	bne.n	800374a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003720:	f7fe fc6a 	bl	8001ff8 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003726:	e009      	b.n	800373c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003728:	f7fe fc66 	bl	8001ff8 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003736:	d901      	bls.n	800373c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e007      	b.n	800374c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_PWREx_ConfigSupply+0xb0>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d1ee      	bne.n	8003728 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	58024800 	.word	0x58024800

08003758 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08c      	sub	sp, #48	; 0x30
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f000 bc1d 	b.w	8003fa6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8087 	beq.w	8003888 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377a:	4b99      	ldr	r3, [pc, #612]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003784:	4b96      	ldr	r3, [pc, #600]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378c:	2b10      	cmp	r3, #16
 800378e:	d007      	beq.n	80037a0 <HAL_RCC_OscConfig+0x48>
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	2b18      	cmp	r3, #24
 8003794:	d110      	bne.n	80037b8 <HAL_RCC_OscConfig+0x60>
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d10b      	bne.n	80037b8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	4b8f      	ldr	r3, [pc, #572]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d06c      	beq.n	8003886 <HAL_RCC_OscConfig+0x12e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d168      	bne.n	8003886 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e3f6      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c0:	d106      	bne.n	80037d0 <HAL_RCC_OscConfig+0x78>
 80037c2:	4b87      	ldr	r3, [pc, #540]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a86      	ldr	r2, [pc, #536]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e02e      	b.n	800382e <HAL_RCC_OscConfig+0xd6>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10c      	bne.n	80037f2 <HAL_RCC_OscConfig+0x9a>
 80037d8:	4b81      	ldr	r3, [pc, #516]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a80      	ldr	r2, [pc, #512]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80037de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	4b7e      	ldr	r3, [pc, #504]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a7d      	ldr	r2, [pc, #500]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80037ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	e01d      	b.n	800382e <HAL_RCC_OscConfig+0xd6>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fa:	d10c      	bne.n	8003816 <HAL_RCC_OscConfig+0xbe>
 80037fc:	4b78      	ldr	r3, [pc, #480]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a77      	ldr	r2, [pc, #476]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 8003802:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b75      	ldr	r3, [pc, #468]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a74      	ldr	r2, [pc, #464]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 800380e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	e00b      	b.n	800382e <HAL_RCC_OscConfig+0xd6>
 8003816:	4b72      	ldr	r3, [pc, #456]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a71      	ldr	r2, [pc, #452]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 800381c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	4b6f      	ldr	r3, [pc, #444]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a6e      	ldr	r2, [pc, #440]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 8003828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d013      	beq.n	800385e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003836:	f7fe fbdf 	bl	8001ff8 <HAL_GetTick>
 800383a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800383e:	f7fe fbdb 	bl	8001ff8 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b64      	cmp	r3, #100	; 0x64
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e3aa      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003850:	4b63      	ldr	r3, [pc, #396]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0xe6>
 800385c:	e014      	b.n	8003888 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385e:	f7fe fbcb 	bl	8001ff8 <HAL_GetTick>
 8003862:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003866:	f7fe fbc7 	bl	8001ff8 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b64      	cmp	r3, #100	; 0x64
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e396      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003878:	4b59      	ldr	r3, [pc, #356]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f0      	bne.n	8003866 <HAL_RCC_OscConfig+0x10e>
 8003884:	e000      	b.n	8003888 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003886:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80cb 	beq.w	8003a2c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003896:	4b52      	ldr	r3, [pc, #328]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800389e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038a0:	4b4f      	ldr	r3, [pc, #316]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d007      	beq.n	80038bc <HAL_RCC_OscConfig+0x164>
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	2b18      	cmp	r3, #24
 80038b0:	d156      	bne.n	8003960 <HAL_RCC_OscConfig+0x208>
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d151      	bne.n	8003960 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038bc:	4b48      	ldr	r3, [pc, #288]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_OscConfig+0x17c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e368      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038d4:	4b42      	ldr	r3, [pc, #264]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 0219 	bic.w	r2, r3, #25
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	493f      	ldr	r1, [pc, #252]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038e6:	f7fe fb87 	bl	8001ff8 <HAL_GetTick>
 80038ea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ee:	f7fe fb83 	bl	8001ff8 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e352      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003900:	4b37      	ldr	r3, [pc, #220]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390c:	f7fe fba4 	bl	8002058 <HAL_GetREVID>
 8003910:	4603      	mov	r3, r0
 8003912:	f241 0203 	movw	r2, #4099	; 0x1003
 8003916:	4293      	cmp	r3, r2
 8003918:	d817      	bhi.n	800394a <HAL_RCC_OscConfig+0x1f2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	2b40      	cmp	r3, #64	; 0x40
 8003920:	d108      	bne.n	8003934 <HAL_RCC_OscConfig+0x1dc>
 8003922:	4b2f      	ldr	r3, [pc, #188]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800392a:	4a2d      	ldr	r2, [pc, #180]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 800392c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003930:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003932:	e07b      	b.n	8003a2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003934:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	031b      	lsls	r3, r3, #12
 8003942:	4927      	ldr	r1, [pc, #156]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003948:	e070      	b.n	8003a2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394a:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	061b      	lsls	r3, r3, #24
 8003958:	4921      	ldr	r1, [pc, #132]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 800395a:	4313      	orrs	r3, r2
 800395c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800395e:	e065      	b.n	8003a2c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d048      	beq.n	80039fa <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003968:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f023 0219 	bic.w	r2, r3, #25
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	491a      	ldr	r1, [pc, #104]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397a:	f7fe fb3d 	bl	8001ff8 <HAL_GetTick>
 800397e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003982:	f7fe fb39 	bl	8001ff8 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e308      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a0:	f7fe fb5a 	bl	8002058 <HAL_GetREVID>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d81a      	bhi.n	80039e4 <HAL_RCC_OscConfig+0x28c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d108      	bne.n	80039c8 <HAL_RCC_OscConfig+0x270>
 80039b6:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80039be:	4a08      	ldr	r2, [pc, #32]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c4:	6053      	str	r3, [r2, #4]
 80039c6:	e031      	b.n	8003a2c <HAL_RCC_OscConfig+0x2d4>
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	031b      	lsls	r3, r3, #12
 80039d6:	4902      	ldr	r1, [pc, #8]	; (80039e0 <HAL_RCC_OscConfig+0x288>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
 80039dc:	e026      	b.n	8003a2c <HAL_RCC_OscConfig+0x2d4>
 80039de:	bf00      	nop
 80039e0:	58024400 	.word	0x58024400
 80039e4:	4b9a      	ldr	r3, [pc, #616]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	4997      	ldr	r1, [pc, #604]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
 80039f8:	e018      	b.n	8003a2c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fa:	4b95      	ldr	r3, [pc, #596]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a94      	ldr	r2, [pc, #592]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a06:	f7fe faf7 	bl	8001ff8 <HAL_GetTick>
 8003a0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a0e:	f7fe faf3 	bl	8001ff8 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e2c2      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a20:	4b8b      	ldr	r3, [pc, #556]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80a9 	beq.w	8003b8c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a3a:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a42:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a44:	4b82      	ldr	r3, [pc, #520]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d007      	beq.n	8003a60 <HAL_RCC_OscConfig+0x308>
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b18      	cmp	r3, #24
 8003a54:	d13a      	bne.n	8003acc <HAL_RCC_OscConfig+0x374>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d135      	bne.n	8003acc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a60:	4b7b      	ldr	r3, [pc, #492]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_OscConfig+0x320>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	2b80      	cmp	r3, #128	; 0x80
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e296      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a78:	f7fe faee 	bl	8002058 <HAL_GetREVID>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d817      	bhi.n	8003ab6 <HAL_RCC_OscConfig+0x35e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d108      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x348>
 8003a8e:	4b70      	ldr	r3, [pc, #448]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a96:	4a6e      	ldr	r2, [pc, #440]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003a98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a9c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a9e:	e075      	b.n	8003b8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003aa0:	4b6b      	ldr	r3, [pc, #428]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	069b      	lsls	r3, r3, #26
 8003aae:	4968      	ldr	r1, [pc, #416]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ab4:	e06a      	b.n	8003b8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ab6:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	061b      	lsls	r3, r3, #24
 8003ac4:	4962      	ldr	r1, [pc, #392]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003aca:	e05f      	b.n	8003b8c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d042      	beq.n	8003b5a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ad4:	4b5e      	ldr	r3, [pc, #376]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a5d      	ldr	r2, [pc, #372]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fe fa8a 	bl	8001ff8 <HAL_GetTick>
 8003ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003ae8:	f7fe fa86 	bl	8001ff8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e255      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003afa:	4b55      	ldr	r3, [pc, #340]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b06:	f7fe faa7 	bl	8002058 <HAL_GetREVID>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d817      	bhi.n	8003b44 <HAL_RCC_OscConfig+0x3ec>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d108      	bne.n	8003b2e <HAL_RCC_OscConfig+0x3d6>
 8003b1c:	4b4c      	ldr	r3, [pc, #304]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b24:	4a4a      	ldr	r2, [pc, #296]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003b26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b2a:	6053      	str	r3, [r2, #4]
 8003b2c:	e02e      	b.n	8003b8c <HAL_RCC_OscConfig+0x434>
 8003b2e:	4b48      	ldr	r3, [pc, #288]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	069b      	lsls	r3, r3, #26
 8003b3c:	4944      	ldr	r1, [pc, #272]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
 8003b42:	e023      	b.n	8003b8c <HAL_RCC_OscConfig+0x434>
 8003b44:	4b42      	ldr	r3, [pc, #264]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	061b      	lsls	r3, r3, #24
 8003b52:	493f      	ldr	r1, [pc, #252]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60cb      	str	r3, [r1, #12]
 8003b58:	e018      	b.n	8003b8c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b5a:	4b3d      	ldr	r3, [pc, #244]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a3c      	ldr	r2, [pc, #240]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b66:	f7fe fa47 	bl	8001ff8 <HAL_GetTick>
 8003b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b6e:	f7fe fa43 	bl	8001ff8 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e212      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b80:	4b33      	ldr	r3, [pc, #204]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d036      	beq.n	8003c06 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d019      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba0:	4b2b      	ldr	r3, [pc, #172]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba4:	4a2a      	ldr	r2, [pc, #168]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fe fa24 	bl	8001ff8 <HAL_GetTick>
 8003bb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb4:	f7fe fa20 	bl	8001ff8 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e1ef      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bc6:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x45c>
 8003bd2:	e018      	b.n	8003c06 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd4:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd8:	4a1d      	ldr	r2, [pc, #116]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7fe fa0a 	bl	8001ff8 <HAL_GetTick>
 8003be4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be8:	f7fe fa06 	bl	8001ff8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e1d5      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d039      	beq.n	8003c86 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d01c      	beq.n	8003c54 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a0c      	ldr	r2, [pc, #48]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c26:	f7fe f9e7 	bl	8001ff8 <HAL_GetTick>
 8003c2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c2e:	f7fe f9e3 	bl	8001ff8 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e1b2      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <HAL_RCC_OscConfig+0x4f8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x4d6>
 8003c4c:	e01b      	b.n	8003c86 <HAL_RCC_OscConfig+0x52e>
 8003c4e:	bf00      	nop
 8003c50:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c54:	4b9b      	ldr	r3, [pc, #620]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a9a      	ldr	r2, [pc, #616]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c60:	f7fe f9ca 	bl	8001ff8 <HAL_GetTick>
 8003c64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c68:	f7fe f9c6 	bl	8001ff8 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e195      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c7a:	4b92      	ldr	r3, [pc, #584]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8081 	beq.w	8003d96 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c94:	4b8c      	ldr	r3, [pc, #560]	; (8003ec8 <HAL_RCC_OscConfig+0x770>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a8b      	ldr	r2, [pc, #556]	; (8003ec8 <HAL_RCC_OscConfig+0x770>)
 8003c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ca0:	f7fe f9aa 	bl	8001ff8 <HAL_GetTick>
 8003ca4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ca8:	f7fe f9a6 	bl	8001ff8 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	; 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e175      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cba:	4b83      	ldr	r3, [pc, #524]	; (8003ec8 <HAL_RCC_OscConfig+0x770>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d106      	bne.n	8003cdc <HAL_RCC_OscConfig+0x584>
 8003cce:	4b7d      	ldr	r3, [pc, #500]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	4a7c      	ldr	r2, [pc, #496]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cda:	e02d      	b.n	8003d38 <HAL_RCC_OscConfig+0x5e0>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10c      	bne.n	8003cfe <HAL_RCC_OscConfig+0x5a6>
 8003ce4:	4b77      	ldr	r3, [pc, #476]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a76      	ldr	r2, [pc, #472]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf0:	4b74      	ldr	r3, [pc, #464]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a73      	ldr	r2, [pc, #460]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003cf6:	f023 0304 	bic.w	r3, r3, #4
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfc:	e01c      	b.n	8003d38 <HAL_RCC_OscConfig+0x5e0>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b05      	cmp	r3, #5
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5c8>
 8003d06:	4b6f      	ldr	r3, [pc, #444]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	4a6e      	ldr	r2, [pc, #440]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003d0c:	f043 0304 	orr.w	r3, r3, #4
 8003d10:	6713      	str	r3, [r2, #112]	; 0x70
 8003d12:	4b6c      	ldr	r3, [pc, #432]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	4a6b      	ldr	r2, [pc, #428]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1e:	e00b      	b.n	8003d38 <HAL_RCC_OscConfig+0x5e0>
 8003d20:	4b68      	ldr	r3, [pc, #416]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a67      	ldr	r2, [pc, #412]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2c:	4b65      	ldr	r3, [pc, #404]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a64      	ldr	r2, [pc, #400]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003d32:	f023 0304 	bic.w	r3, r3, #4
 8003d36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d015      	beq.n	8003d6c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d40:	f7fe f95a 	bl	8001ff8 <HAL_GetTick>
 8003d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d46:	e00a      	b.n	8003d5e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d48:	f7fe f956 	bl	8001ff8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e123      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d5e:	4b59      	ldr	r3, [pc, #356]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0ee      	beq.n	8003d48 <HAL_RCC_OscConfig+0x5f0>
 8003d6a:	e014      	b.n	8003d96 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fe f944 	bl	8001ff8 <HAL_GetTick>
 8003d70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d72:	e00a      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d74:	f7fe f940 	bl	8001ff8 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e10d      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d8a:	4b4e      	ldr	r3, [pc, #312]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1ee      	bne.n	8003d74 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8102 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003da0:	4b48      	ldr	r3, [pc, #288]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003da8:	2b18      	cmp	r3, #24
 8003daa:	f000 80bd 	beq.w	8003f28 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	f040 809e 	bne.w	8003ef4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db8:	4b42      	ldr	r3, [pc, #264]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a41      	ldr	r2, [pc, #260]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fe f918 	bl	8001ff8 <HAL_GetTick>
 8003dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fe f914 	bl	8001ff8 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e0e3      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dde:	4b39      	ldr	r3, [pc, #228]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dea:	4b36      	ldr	r3, [pc, #216]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dee:	4b37      	ldr	r3, [pc, #220]	; (8003ecc <HAL_RCC_OscConfig+0x774>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003dfa:	0112      	lsls	r2, r2, #4
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	4931      	ldr	r1, [pc, #196]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	628b      	str	r3, [r1, #40]	; 0x28
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	3b01      	subs	r3, #1
 8003e14:	025b      	lsls	r3, r3, #9
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	061b      	lsls	r3, r3, #24
 8003e30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e34:	4923      	ldr	r1, [pc, #140]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003e3a:	4b22      	ldr	r3, [pc, #136]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	4a21      	ldr	r2, [pc, #132]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e46:	4b1f      	ldr	r3, [pc, #124]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e4a:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e52:	00d2      	lsls	r2, r2, #3
 8003e54:	491b      	ldr	r1, [pc, #108]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	f023 020c 	bic.w	r2, r3, #12
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4917      	ldr	r1, [pc, #92]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e6c:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	f023 0202 	bic.w	r2, r3, #2
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	4912      	ldr	r1, [pc, #72]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e7e:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	4a10      	ldr	r2, [pc, #64]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e96:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eba:	f7fe f89d 	bl	8001ff8 <HAL_GetTick>
 8003ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ec0:	e011      	b.n	8003ee6 <HAL_RCC_OscConfig+0x78e>
 8003ec2:	bf00      	nop
 8003ec4:	58024400 	.word	0x58024400
 8003ec8:	58024800 	.word	0x58024800
 8003ecc:	fffffc0c 	.word	0xfffffc0c
 8003ed0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fe f890 	bl	8001ff8 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e05f      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ee6:	4b32      	ldr	r3, [pc, #200]	; (8003fb0 <HAL_RCC_OscConfig+0x858>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x77c>
 8003ef2:	e057      	b.n	8003fa4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <HAL_RCC_OscConfig+0x858>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2d      	ldr	r2, [pc, #180]	; (8003fb0 <HAL_RCC_OscConfig+0x858>)
 8003efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe f87a 	bl	8001ff8 <HAL_GetTick>
 8003f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fe f876 	bl	8001ff8 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e045      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f1a:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <HAL_RCC_OscConfig+0x858>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x7b0>
 8003f26:	e03d      	b.n	8003fa4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f28:	4b21      	ldr	r3, [pc, #132]	; (8003fb0 <HAL_RCC_OscConfig+0x858>)
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f2e:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <HAL_RCC_OscConfig+0x858>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d031      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f003 0203 	and.w	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d12a      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d122      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d11a      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	0a5b      	lsrs	r3, r3, #9
 8003f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d111      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	0c1b      	lsrs	r3, r3, #16
 8003f80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d108      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	0e1b      	lsrs	r3, r3, #24
 8003f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3730      	adds	r7, #48	; 0x30
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	58024400 	.word	0x58024400

08003fb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e19c      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b8a      	ldr	r3, [pc, #552]	; (80041f4 <HAL_RCC_ClockConfig+0x240>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d910      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b87      	ldr	r3, [pc, #540]	; (80041f4 <HAL_RCC_ClockConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 020f 	bic.w	r2, r3, #15
 8003fde:	4985      	ldr	r1, [pc, #532]	; (80041f4 <HAL_RCC_ClockConfig+0x240>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b83      	ldr	r3, [pc, #524]	; (80041f4 <HAL_RCC_ClockConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e184      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d010      	beq.n	8004026 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	4b7b      	ldr	r3, [pc, #492]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004010:	429a      	cmp	r2, r3
 8004012:	d908      	bls.n	8004026 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004014:	4b78      	ldr	r3, [pc, #480]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	4975      	ldr	r1, [pc, #468]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004022:	4313      	orrs	r3, r2
 8004024:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d010      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	4b70      	ldr	r3, [pc, #448]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800403e:	429a      	cmp	r2, r3
 8004040:	d908      	bls.n	8004054 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004042:	4b6d      	ldr	r3, [pc, #436]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	496a      	ldr	r1, [pc, #424]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004050:	4313      	orrs	r3, r2
 8004052:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d010      	beq.n	8004082 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699a      	ldr	r2, [r3, #24]
 8004064:	4b64      	ldr	r3, [pc, #400]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800406c:	429a      	cmp	r2, r3
 800406e:	d908      	bls.n	8004082 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004070:	4b61      	ldr	r3, [pc, #388]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	495e      	ldr	r1, [pc, #376]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 800407e:	4313      	orrs	r3, r2
 8004080:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d010      	beq.n	80040b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69da      	ldr	r2, [r3, #28]
 8004092:	4b59      	ldr	r3, [pc, #356]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800409a:	429a      	cmp	r2, r3
 800409c:	d908      	bls.n	80040b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800409e:	4b56      	ldr	r3, [pc, #344]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	4953      	ldr	r1, [pc, #332]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d010      	beq.n	80040de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	4b4d      	ldr	r3, [pc, #308]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d908      	bls.n	80040de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040cc:	4b4a      	ldr	r3, [pc, #296]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f023 020f 	bic.w	r2, r3, #15
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4947      	ldr	r1, [pc, #284]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d055      	beq.n	8004196 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80040ea:	4b43      	ldr	r3, [pc, #268]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	4940      	ldr	r1, [pc, #256]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d107      	bne.n	8004114 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004104:	4b3c      	ldr	r3, [pc, #240]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d121      	bne.n	8004154 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0f6      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d107      	bne.n	800412c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800411c:	4b36      	ldr	r3, [pc, #216]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d115      	bne.n	8004154 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0ea      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d107      	bne.n	8004144 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004134:	4b30      	ldr	r3, [pc, #192]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d109      	bne.n	8004154 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0de      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004144:	4b2c      	ldr	r3, [pc, #176]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0d6      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004154:	4b28      	ldr	r3, [pc, #160]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f023 0207 	bic.w	r2, r3, #7
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	4925      	ldr	r1, [pc, #148]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004162:	4313      	orrs	r3, r2
 8004164:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004166:	f7fd ff47 	bl	8001ff8 <HAL_GetTick>
 800416a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416c:	e00a      	b.n	8004184 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416e:	f7fd ff43 	bl	8001ff8 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f241 3288 	movw	r2, #5000	; 0x1388
 800417c:	4293      	cmp	r3, r2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e0be      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004184:	4b1c      	ldr	r3, [pc, #112]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	429a      	cmp	r2, r3
 8004194:	d1eb      	bne.n	800416e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d010      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d208      	bcs.n	80041c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b2:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f023 020f 	bic.w	r2, r3, #15
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	490e      	ldr	r1, [pc, #56]	; (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_RCC_ClockConfig+0x240>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d214      	bcs.n	80041fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <HAL_RCC_ClockConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 020f 	bic.w	r2, r3, #15
 80041da:	4906      	ldr	r1, [pc, #24]	; (80041f4 <HAL_RCC_ClockConfig+0x240>)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <HAL_RCC_ClockConfig+0x240>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e086      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>
 80041f4:	52002000 	.word	0x52002000
 80041f8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d010      	beq.n	800422a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	4b3f      	ldr	r3, [pc, #252]	; (800430c <HAL_RCC_ClockConfig+0x358>)
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004214:	429a      	cmp	r2, r3
 8004216:	d208      	bcs.n	800422a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004218:	4b3c      	ldr	r3, [pc, #240]	; (800430c <HAL_RCC_ClockConfig+0x358>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	4939      	ldr	r1, [pc, #228]	; (800430c <HAL_RCC_ClockConfig+0x358>)
 8004226:	4313      	orrs	r3, r2
 8004228:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d010      	beq.n	8004258 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	4b34      	ldr	r3, [pc, #208]	; (800430c <HAL_RCC_ClockConfig+0x358>)
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004242:	429a      	cmp	r2, r3
 8004244:	d208      	bcs.n	8004258 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004246:	4b31      	ldr	r3, [pc, #196]	; (800430c <HAL_RCC_ClockConfig+0x358>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	492e      	ldr	r1, [pc, #184]	; (800430c <HAL_RCC_ClockConfig+0x358>)
 8004254:	4313      	orrs	r3, r2
 8004256:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d010      	beq.n	8004286 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	4b28      	ldr	r3, [pc, #160]	; (800430c <HAL_RCC_ClockConfig+0x358>)
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004270:	429a      	cmp	r2, r3
 8004272:	d208      	bcs.n	8004286 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004274:	4b25      	ldr	r3, [pc, #148]	; (800430c <HAL_RCC_ClockConfig+0x358>)
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	4922      	ldr	r1, [pc, #136]	; (800430c <HAL_RCC_ClockConfig+0x358>)
 8004282:	4313      	orrs	r3, r2
 8004284:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d010      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69da      	ldr	r2, [r3, #28]
 8004296:	4b1d      	ldr	r3, [pc, #116]	; (800430c <HAL_RCC_ClockConfig+0x358>)
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800429e:	429a      	cmp	r2, r3
 80042a0:	d208      	bcs.n	80042b4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80042a2:	4b1a      	ldr	r3, [pc, #104]	; (800430c <HAL_RCC_ClockConfig+0x358>)
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	4917      	ldr	r1, [pc, #92]	; (800430c <HAL_RCC_ClockConfig+0x358>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042b4:	f000 f834 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b14      	ldr	r3, [pc, #80]	; (800430c <HAL_RCC_ClockConfig+0x358>)
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	4912      	ldr	r1, [pc, #72]	; (8004310 <HAL_RCC_ClockConfig+0x35c>)
 80042c6:	5ccb      	ldrb	r3, [r1, r3]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
 80042d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <HAL_RCC_ClockConfig+0x358>)
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	4a0d      	ldr	r2, [pc, #52]	; (8004310 <HAL_RCC_ClockConfig+0x35c>)
 80042dc:	5cd3      	ldrb	r3, [r2, r3]
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
 80042e8:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <HAL_RCC_ClockConfig+0x360>)
 80042ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042ec:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <HAL_RCC_ClockConfig+0x364>)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <HAL_RCC_ClockConfig+0x368>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd fe34 	bl	8001f64 <HAL_InitTick>
 80042fc:	4603      	mov	r3, r0
 80042fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	58024400 	.word	0x58024400
 8004310:	0800a950 	.word	0x0800a950
 8004314:	24000004 	.word	0x24000004
 8004318:	24000000 	.word	0x24000000
 800431c:	24000008 	.word	0x24000008

08004320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004326:	4bb3      	ldr	r3, [pc, #716]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800432e:	2b18      	cmp	r3, #24
 8004330:	f200 8155 	bhi.w	80045de <HAL_RCC_GetSysClockFreq+0x2be>
 8004334:	a201      	add	r2, pc, #4	; (adr r2, 800433c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	080043a1 	.word	0x080043a1
 8004340:	080045df 	.word	0x080045df
 8004344:	080045df 	.word	0x080045df
 8004348:	080045df 	.word	0x080045df
 800434c:	080045df 	.word	0x080045df
 8004350:	080045df 	.word	0x080045df
 8004354:	080045df 	.word	0x080045df
 8004358:	080045df 	.word	0x080045df
 800435c:	080043c7 	.word	0x080043c7
 8004360:	080045df 	.word	0x080045df
 8004364:	080045df 	.word	0x080045df
 8004368:	080045df 	.word	0x080045df
 800436c:	080045df 	.word	0x080045df
 8004370:	080045df 	.word	0x080045df
 8004374:	080045df 	.word	0x080045df
 8004378:	080045df 	.word	0x080045df
 800437c:	080043cd 	.word	0x080043cd
 8004380:	080045df 	.word	0x080045df
 8004384:	080045df 	.word	0x080045df
 8004388:	080045df 	.word	0x080045df
 800438c:	080045df 	.word	0x080045df
 8004390:	080045df 	.word	0x080045df
 8004394:	080045df 	.word	0x080045df
 8004398:	080045df 	.word	0x080045df
 800439c:	080043d3 	.word	0x080043d3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043a0:	4b94      	ldr	r3, [pc, #592]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d009      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043ac:	4b91      	ldr	r3, [pc, #580]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	08db      	lsrs	r3, r3, #3
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	4a90      	ldr	r2, [pc, #576]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
 80043bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80043be:	e111      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80043c0:	4b8d      	ldr	r3, [pc, #564]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043c2:	61bb      	str	r3, [r7, #24]
    break;
 80043c4:	e10e      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80043c6:	4b8d      	ldr	r3, [pc, #564]	; (80045fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043c8:	61bb      	str	r3, [r7, #24]
    break;
 80043ca:	e10b      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80043cc:	4b8c      	ldr	r3, [pc, #560]	; (8004600 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80043ce:	61bb      	str	r3, [r7, #24]
    break;
 80043d0:	e108      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043d2:	4b88      	ldr	r3, [pc, #544]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80043dc:	4b85      	ldr	r3, [pc, #532]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043e8:	4b82      	ldr	r3, [pc, #520]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80043f2:	4b80      	ldr	r3, [pc, #512]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f6:	08db      	lsrs	r3, r3, #3
 80043f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80e1 	beq.w	80045d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b02      	cmp	r3, #2
 800441a:	f000 8083 	beq.w	8004524 <HAL_RCC_GetSysClockFreq+0x204>
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b02      	cmp	r3, #2
 8004422:	f200 80a1 	bhi.w	8004568 <HAL_RCC_GetSysClockFreq+0x248>
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x114>
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d056      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004432:	e099      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004434:	4b6f      	ldr	r3, [pc, #444]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d02d      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004440:	4b6c      	ldr	r3, [pc, #432]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	08db      	lsrs	r3, r3, #3
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	4a6b      	ldr	r2, [pc, #428]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
 8004450:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	ee07 3a90 	vmov	s15, r3
 8004458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446a:	4b62      	ldr	r3, [pc, #392]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447a:	ed97 6a02 	vldr	s12, [r7, #8]
 800447e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004604 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800448e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004496:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800449a:	e087      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004608 <HAL_RCC_GetSysClockFreq+0x2e8>
 80044aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ae:	4b51      	ldr	r3, [pc, #324]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044be:	ed97 6a02 	vldr	s12, [r7, #8]
 80044c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004604 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044de:	e065      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800460c <HAL_RCC_GetSysClockFreq+0x2ec>
 80044ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044f2:	4b40      	ldr	r3, [pc, #256]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004502:	ed97 6a02 	vldr	s12, [r7, #8]
 8004506:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800450a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800450e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800451a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004522:	e043      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004610 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004536:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004546:	ed97 6a02 	vldr	s12, [r7, #8]
 800454a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800454e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800455a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800455e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004566:	e021      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004572:	eddf 6a26 	vldr	s13, [pc, #152]	; 800460c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457a:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458a:	ed97 6a02 	vldr	s12, [r7, #8]
 800458e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004604 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800459e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045aa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80045ac:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	0a5b      	lsrs	r3, r3, #9
 80045b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b6:	3301      	adds	r3, #1
 80045b8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	ee07 3a90 	vmov	s15, r3
 80045c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d0:	ee17 3a90 	vmov	r3, s15
 80045d4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80045d6:	e005      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]
    break;
 80045dc:	e002      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80045de:	4b07      	ldr	r3, [pc, #28]	; (80045fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045e0:	61bb      	str	r3, [r7, #24]
    break;
 80045e2:	bf00      	nop
  }

  return sysclockfreq;
 80045e4:	69bb      	ldr	r3, [r7, #24]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3724      	adds	r7, #36	; 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	58024400 	.word	0x58024400
 80045f8:	03d09000 	.word	0x03d09000
 80045fc:	003d0900 	.word	0x003d0900
 8004600:	007a1200 	.word	0x007a1200
 8004604:	46000000 	.word	0x46000000
 8004608:	4c742400 	.word	0x4c742400
 800460c:	4a742400 	.word	0x4a742400
 8004610:	4af42400 	.word	0x4af42400

08004614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800461a:	f7ff fe81 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 800461e:	4602      	mov	r2, r0
 8004620:	4b10      	ldr	r3, [pc, #64]	; (8004664 <HAL_RCC_GetHCLKFreq+0x50>)
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	0a1b      	lsrs	r3, r3, #8
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	490f      	ldr	r1, [pc, #60]	; (8004668 <HAL_RCC_GetHCLKFreq+0x54>)
 800462c:	5ccb      	ldrb	r3, [r1, r3]
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	fa22 f303 	lsr.w	r3, r2, r3
 8004636:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <HAL_RCC_GetHCLKFreq+0x50>)
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	4a09      	ldr	r2, [pc, #36]	; (8004668 <HAL_RCC_GetHCLKFreq+0x54>)
 8004642:	5cd3      	ldrb	r3, [r2, r3]
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	fa22 f303 	lsr.w	r3, r2, r3
 800464e:	4a07      	ldr	r2, [pc, #28]	; (800466c <HAL_RCC_GetHCLKFreq+0x58>)
 8004650:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004652:	4a07      	ldr	r2, [pc, #28]	; (8004670 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004658:	4b04      	ldr	r3, [pc, #16]	; (800466c <HAL_RCC_GetHCLKFreq+0x58>)
 800465a:	681b      	ldr	r3, [r3, #0]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	58024400 	.word	0x58024400
 8004668:	0800a950 	.word	0x0800a950
 800466c:	24000004 	.word	0x24000004
 8004670:	24000000 	.word	0x24000000

08004674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004678:	f7ff ffcc 	bl	8004614 <HAL_RCC_GetHCLKFreq>
 800467c:	4602      	mov	r2, r0
 800467e:	4b06      	ldr	r3, [pc, #24]	; (8004698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	091b      	lsrs	r3, r3, #4
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	4904      	ldr	r1, [pc, #16]	; (800469c <HAL_RCC_GetPCLK1Freq+0x28>)
 800468a:	5ccb      	ldrb	r3, [r1, r3]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	58024400 	.word	0x58024400
 800469c:	0800a950 	.word	0x0800a950

080046a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80046a4:	f7ff ffb6 	bl	8004614 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4904      	ldr	r1, [pc, #16]	; (80046c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	58024400 	.word	0x58024400
 80046c8:	0800a950 	.word	0x0800a950

080046cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046d4:	2300      	movs	r3, #0
 80046d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046d8:	2300      	movs	r3, #0
 80046da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d03f      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046f0:	d02a      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046f6:	d824      	bhi.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046fc:	d018      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004702:	d81e      	bhi.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470c:	d007      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800470e:	e018      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004710:	4ba3      	ldr	r3, [pc, #652]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	4aa2      	ldr	r2, [pc, #648]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800471c:	e015      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3304      	adds	r3, #4
 8004722:	2102      	movs	r1, #2
 8004724:	4618      	mov	r0, r3
 8004726:	f001 f9d5 	bl	8005ad4 <RCCEx_PLL2_Config>
 800472a:	4603      	mov	r3, r0
 800472c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800472e:	e00c      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3324      	adds	r3, #36	; 0x24
 8004734:	2102      	movs	r1, #2
 8004736:	4618      	mov	r0, r3
 8004738:	f001 fa7e 	bl	8005c38 <RCCEx_PLL3_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004740:	e003      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
      break;
 8004746:	e000      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800474a:	7dfb      	ldrb	r3, [r7, #23]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004750:	4b93      	ldr	r3, [pc, #588]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800475c:	4990      	ldr	r1, [pc, #576]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800475e:	4313      	orrs	r3, r2
 8004760:	650b      	str	r3, [r1, #80]	; 0x50
 8004762:	e001      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d03d      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004778:	2b04      	cmp	r3, #4
 800477a:	d826      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800477c:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	08004799 	.word	0x08004799
 8004788:	080047a7 	.word	0x080047a7
 800478c:	080047b9 	.word	0x080047b9
 8004790:	080047d1 	.word	0x080047d1
 8004794:	080047d1 	.word	0x080047d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004798:	4b81      	ldr	r3, [pc, #516]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	4a80      	ldr	r2, [pc, #512]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800479e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047a4:	e015      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3304      	adds	r3, #4
 80047aa:	2100      	movs	r1, #0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 f991 	bl	8005ad4 <RCCEx_PLL2_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047b6:	e00c      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3324      	adds	r3, #36	; 0x24
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 fa3a 	bl	8005c38 <RCCEx_PLL3_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047c8:	e003      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	75fb      	strb	r3, [r7, #23]
      break;
 80047ce:	e000      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80047d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047d8:	4b71      	ldr	r3, [pc, #452]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047dc:	f023 0207 	bic.w	r2, r3, #7
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	496e      	ldr	r1, [pc, #440]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	650b      	str	r3, [r1, #80]	; 0x50
 80047ea:	e001      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ec:	7dfb      	ldrb	r3, [r7, #23]
 80047ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d042      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004804:	d02b      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480a:	d825      	bhi.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800480c:	2bc0      	cmp	r3, #192	; 0xc0
 800480e:	d028      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004810:	2bc0      	cmp	r3, #192	; 0xc0
 8004812:	d821      	bhi.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004814:	2b80      	cmp	r3, #128	; 0x80
 8004816:	d016      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004818:	2b80      	cmp	r3, #128	; 0x80
 800481a:	d81d      	bhi.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004820:	2b40      	cmp	r3, #64	; 0x40
 8004822:	d007      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004824:	e018      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004826:	4b5e      	ldr	r3, [pc, #376]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	4a5d      	ldr	r2, [pc, #372]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800482c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004830:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004832:	e017      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3304      	adds	r3, #4
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f001 f94a 	bl	8005ad4 <RCCEx_PLL2_Config>
 8004840:	4603      	mov	r3, r0
 8004842:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004844:	e00e      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3324      	adds	r3, #36	; 0x24
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f001 f9f3 	bl	8005c38 <RCCEx_PLL3_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004856:	e005      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	75fb      	strb	r3, [r7, #23]
      break;
 800485c:	e002      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800485e:	bf00      	nop
 8004860:	e000      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800486a:	4b4d      	ldr	r3, [pc, #308]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800486c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800486e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004876:	494a      	ldr	r1, [pc, #296]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004878:	4313      	orrs	r3, r2
 800487a:	650b      	str	r3, [r1, #80]	; 0x50
 800487c:	e001      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487e:	7dfb      	ldrb	r3, [r7, #23]
 8004880:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488a:	2b00      	cmp	r3, #0
 800488c:	d049      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004894:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004898:	d030      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800489a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800489e:	d82a      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80048a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048a4:	d02c      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80048a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048aa:	d824      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80048ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b0:	d018      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80048b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b6:	d81e      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80048bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048c0:	d007      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80048c2:	e018      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c4:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	4a35      	ldr	r2, [pc, #212]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048d0:	e017      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	2100      	movs	r1, #0
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 f8fb 	bl	8005ad4 <RCCEx_PLL2_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80048e2:	e00e      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3324      	adds	r3, #36	; 0x24
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f001 f9a4 	bl	8005c38 <RCCEx_PLL3_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048f4:	e005      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	75fb      	strb	r3, [r7, #23]
      break;
 80048fa:	e002      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80048fc:	bf00      	nop
 80048fe:	e000      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004908:	4b25      	ldr	r3, [pc, #148]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004916:	4922      	ldr	r1, [pc, #136]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004918:	4313      	orrs	r3, r2
 800491a:	658b      	str	r3, [r1, #88]	; 0x58
 800491c:	e001      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491e:	7dfb      	ldrb	r3, [r7, #23]
 8004920:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492a:	2b00      	cmp	r3, #0
 800492c:	d04b      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004938:	d030      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800493a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800493e:	d82a      	bhi.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004940:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004944:	d02e      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004946:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800494a:	d824      	bhi.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800494c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004950:	d018      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004956:	d81e      	bhi.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800495c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004960:	d007      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004962:	e018      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004964:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	4a0d      	ldr	r2, [pc, #52]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800496a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800496e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004970:	e019      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f001 f8ab 	bl	8005ad4 <RCCEx_PLL2_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004982:	e010      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3324      	adds	r3, #36	; 0x24
 8004988:	2100      	movs	r1, #0
 800498a:	4618      	mov	r0, r3
 800498c:	f001 f954 	bl	8005c38 <RCCEx_PLL3_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004994:	e007      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	75fb      	strb	r3, [r7, #23]
      break;
 800499a:	e004      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800499c:	bf00      	nop
 800499e:	e002      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80049a0:	58024400 	.word	0x58024400
      break;
 80049a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80049ac:	4b99      	ldr	r3, [pc, #612]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049ba:	4996      	ldr	r1, [pc, #600]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	658b      	str	r3, [r1, #88]	; 0x58
 80049c0:	e001      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
 80049c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d032      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d6:	2b30      	cmp	r3, #48	; 0x30
 80049d8:	d01c      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80049da:	2b30      	cmp	r3, #48	; 0x30
 80049dc:	d817      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d00c      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d813      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d016      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d10f      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ee:	4b89      	ldr	r3, [pc, #548]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	4a88      	ldr	r2, [pc, #544]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80049fa:	e00e      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3304      	adds	r3, #4
 8004a00:	2102      	movs	r1, #2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f001 f866 	bl	8005ad4 <RCCEx_PLL2_Config>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004a0c:	e005      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
      break;
 8004a12:	e002      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004a14:	bf00      	nop
 8004a16:	e000      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d109      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a20:	4b7c      	ldr	r3, [pc, #496]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2c:	4979      	ldr	r1, [pc, #484]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a32:	e001      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
 8004a36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d047      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a4c:	d030      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a52:	d82a      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004a54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a58:	d02c      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004a5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a5e:	d824      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a64:	d018      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6a:	d81e      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a74:	d007      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004a76:	e018      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a78:	4b66      	ldr	r3, [pc, #408]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	4a65      	ldr	r2, [pc, #404]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a84:	e017      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 f821 	bl	8005ad4 <RCCEx_PLL2_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a96:	e00e      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3324      	adds	r3, #36	; 0x24
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f001 f8ca 	bl	8005c38 <RCCEx_PLL3_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004aa8:	e005      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	75fb      	strb	r3, [r7, #23]
      break;
 8004aae:	e002      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004ab0:	bf00      	nop
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d109      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004abc:	4b55      	ldr	r3, [pc, #340]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac8:	4952      	ldr	r1, [pc, #328]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	650b      	str	r3, [r1, #80]	; 0x50
 8004ace:	e001      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d049      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ae8:	d02e      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004aea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aee:	d828      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004af0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004af4:	d02a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004af6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004afa:	d822      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004afc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b00:	d026      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004b02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b06:	d81c      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b0c:	d010      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b12:	d816      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01d      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1c:	d111      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	2101      	movs	r1, #1
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 ffd5 	bl	8005ad4 <RCCEx_PLL2_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004b2e:	e012      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3324      	adds	r3, #36	; 0x24
 8004b34:	2101      	movs	r1, #1
 8004b36:	4618      	mov	r0, r3
 8004b38:	f001 f87e 	bl	8005c38 <RCCEx_PLL3_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004b40:	e009      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	75fb      	strb	r3, [r7, #23]
      break;
 8004b46:	e006      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004b48:	bf00      	nop
 8004b4a:	e004      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004b4c:	bf00      	nop
 8004b4e:	e002      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004b50:	bf00      	nop
 8004b52:	e000      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004b5c:	4b2d      	ldr	r3, [pc, #180]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b60:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b68:	492a      	ldr	r1, [pc, #168]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	650b      	str	r3, [r1, #80]	; 0x50
 8004b6e:	e001      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
 8004b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d04d      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b8a:	d02e      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b90:	d828      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b96:	d02a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9c:	d822      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ba2:	d026      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004ba4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ba8:	d81c      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bae:	d010      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bb4:	d816      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01d      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bbe:	d111      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 ff84 	bl	8005ad4 <RCCEx_PLL2_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004bd0:	e012      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3324      	adds	r3, #36	; 0x24
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f001 f82d 	bl	8005c38 <RCCEx_PLL3_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004be2:	e009      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
      break;
 8004be8:	e006      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004bea:	bf00      	nop
 8004bec:	e004      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004bee:	bf00      	nop
 8004bf0:	e002      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004bf2:	bf00      	nop
 8004bf4:	e000      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004bfe:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c0c:	4901      	ldr	r1, [pc, #4]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	658b      	str	r3, [r1, #88]	; 0x58
 8004c12:	e003      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004c14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
 8004c1a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d02f      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c30:	d00e      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c36:	d814      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d015      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004c3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c40:	d10f      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c42:	4baf      	ldr	r3, [pc, #700]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	4aae      	ldr	r2, [pc, #696]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004c4e:	e00c      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3304      	adds	r3, #4
 8004c54:	2101      	movs	r1, #1
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 ff3c 	bl	8005ad4 <RCCEx_PLL2_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004c60:	e003      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
      break;
 8004c66:	e000      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c6a:	7dfb      	ldrb	r3, [r7, #23]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c70:	4ba3      	ldr	r3, [pc, #652]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c7c:	49a0      	ldr	r1, [pc, #640]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	650b      	str	r3, [r1, #80]	; 0x50
 8004c82:	e001      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d032      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d81b      	bhi.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004c9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004cdb 	.word	0x08004cdb
 8004ca8:	08004cb5 	.word	0x08004cb5
 8004cac:	08004cc3 	.word	0x08004cc3
 8004cb0:	08004cdb 	.word	0x08004cdb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb4:	4b92      	ldr	r3, [pc, #584]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	4a91      	ldr	r2, [pc, #580]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004cc0:	e00c      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	2102      	movs	r1, #2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 ff03 	bl	8005ad4 <RCCEx_PLL2_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004cd2:	e003      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd8:	e000      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004cda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004ce2:	4b87      	ldr	r3, [pc, #540]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	f023 0203 	bic.w	r2, r3, #3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	4984      	ldr	r1, [pc, #528]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004cf4:	e001      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
 8004cf8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8086 	beq.w	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d08:	4b7e      	ldr	r3, [pc, #504]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a7d      	ldr	r2, [pc, #500]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d14:	f7fd f970 	bl	8001ff8 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d1a:	e009      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d1c:	f7fd f96c 	bl	8001ff8 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	; 0x64
 8004d28:	d902      	bls.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	75fb      	strb	r3, [r7, #23]
        break;
 8004d2e:	e005      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d30:	4b74      	ldr	r3, [pc, #464]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0ef      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d166      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d42:	4b6f      	ldr	r3, [pc, #444]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d4c:	4053      	eors	r3, r2
 8004d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d013      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d56:	4b6a      	ldr	r3, [pc, #424]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d60:	4b67      	ldr	r3, [pc, #412]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	4a66      	ldr	r2, [pc, #408]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d6c:	4b64      	ldr	r3, [pc, #400]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	4a63      	ldr	r2, [pc, #396]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d76:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d78:	4a61      	ldr	r2, [pc, #388]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d88:	d115      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8a:	f7fd f935 	bl	8001ff8 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d90:	e00b      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d92:	f7fd f931 	bl	8001ff8 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d902      	bls.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	75fb      	strb	r3, [r7, #23]
            break;
 8004da8:	e005      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004daa:	4b55      	ldr	r3, [pc, #340]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0ed      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d126      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dca:	d10d      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004dcc:	4b4c      	ldr	r3, [pc, #304]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dda:	0919      	lsrs	r1, r3, #4
 8004ddc:	4b4a      	ldr	r3, [pc, #296]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004dde:	400b      	ands	r3, r1
 8004de0:	4947      	ldr	r1, [pc, #284]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	610b      	str	r3, [r1, #16]
 8004de6:	e005      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004de8:	4b45      	ldr	r3, [pc, #276]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	4a44      	ldr	r2, [pc, #272]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004df2:	6113      	str	r3, [r2, #16]
 8004df4:	4b42      	ldr	r3, [pc, #264]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004df6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e02:	493f      	ldr	r1, [pc, #252]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	670b      	str	r3, [r1, #112]	; 0x70
 8004e08:	e004      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	75bb      	strb	r3, [r7, #22]
 8004e0e:	e001      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8085 	beq.w	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e26:	2b28      	cmp	r3, #40	; 0x28
 8004e28:	d866      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004e2a:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004f0d 	.word	0x08004f0d
 8004e34:	08004ef9 	.word	0x08004ef9
 8004e38:	08004ef9 	.word	0x08004ef9
 8004e3c:	08004ef9 	.word	0x08004ef9
 8004e40:	08004ef9 	.word	0x08004ef9
 8004e44:	08004ef9 	.word	0x08004ef9
 8004e48:	08004ef9 	.word	0x08004ef9
 8004e4c:	08004ef9 	.word	0x08004ef9
 8004e50:	08004ed5 	.word	0x08004ed5
 8004e54:	08004ef9 	.word	0x08004ef9
 8004e58:	08004ef9 	.word	0x08004ef9
 8004e5c:	08004ef9 	.word	0x08004ef9
 8004e60:	08004ef9 	.word	0x08004ef9
 8004e64:	08004ef9 	.word	0x08004ef9
 8004e68:	08004ef9 	.word	0x08004ef9
 8004e6c:	08004ef9 	.word	0x08004ef9
 8004e70:	08004ee7 	.word	0x08004ee7
 8004e74:	08004ef9 	.word	0x08004ef9
 8004e78:	08004ef9 	.word	0x08004ef9
 8004e7c:	08004ef9 	.word	0x08004ef9
 8004e80:	08004ef9 	.word	0x08004ef9
 8004e84:	08004ef9 	.word	0x08004ef9
 8004e88:	08004ef9 	.word	0x08004ef9
 8004e8c:	08004ef9 	.word	0x08004ef9
 8004e90:	08004f0d 	.word	0x08004f0d
 8004e94:	08004ef9 	.word	0x08004ef9
 8004e98:	08004ef9 	.word	0x08004ef9
 8004e9c:	08004ef9 	.word	0x08004ef9
 8004ea0:	08004ef9 	.word	0x08004ef9
 8004ea4:	08004ef9 	.word	0x08004ef9
 8004ea8:	08004ef9 	.word	0x08004ef9
 8004eac:	08004ef9 	.word	0x08004ef9
 8004eb0:	08004f0d 	.word	0x08004f0d
 8004eb4:	08004ef9 	.word	0x08004ef9
 8004eb8:	08004ef9 	.word	0x08004ef9
 8004ebc:	08004ef9 	.word	0x08004ef9
 8004ec0:	08004ef9 	.word	0x08004ef9
 8004ec4:	08004ef9 	.word	0x08004ef9
 8004ec8:	08004ef9 	.word	0x08004ef9
 8004ecc:	08004ef9 	.word	0x08004ef9
 8004ed0:	08004f0d 	.word	0x08004f0d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	2101      	movs	r1, #1
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fdfa 	bl	8005ad4 <RCCEx_PLL2_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004ee4:	e013      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3324      	adds	r3, #36	; 0x24
 8004eea:	2101      	movs	r1, #1
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fea3 	bl	8005c38 <RCCEx_PLL3_Config>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	75fb      	strb	r3, [r7, #23]
      break;
 8004efc:	e007      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004efe:	bf00      	nop
 8004f00:	58024400 	.word	0x58024400
 8004f04:	58024800 	.word	0x58024800
 8004f08:	00ffffcf 	.word	0x00ffffcf
      break;
 8004f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d109      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f14:	4b96      	ldr	r3, [pc, #600]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f20:	4993      	ldr	r1, [pc, #588]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	654b      	str	r3, [r1, #84]	; 0x54
 8004f26:	e001      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d038      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3c:	2b05      	cmp	r3, #5
 8004f3e:	d821      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004f40:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f46:	bf00      	nop
 8004f48:	08004f8b 	.word	0x08004f8b
 8004f4c:	08004f61 	.word	0x08004f61
 8004f50:	08004f73 	.word	0x08004f73
 8004f54:	08004f8b 	.word	0x08004f8b
 8004f58:	08004f8b 	.word	0x08004f8b
 8004f5c:	08004f8b 	.word	0x08004f8b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	2101      	movs	r1, #1
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fdb4 	bl	8005ad4 <RCCEx_PLL2_Config>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004f70:	e00c      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3324      	adds	r3, #36	; 0x24
 8004f76:	2101      	movs	r1, #1
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fe5d 	bl	8005c38 <RCCEx_PLL3_Config>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004f82:	e003      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	75fb      	strb	r3, [r7, #23]
      break;
 8004f88:	e000      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f92:	4b77      	ldr	r3, [pc, #476]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f96:	f023 0207 	bic.w	r2, r3, #7
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f9e:	4974      	ldr	r1, [pc, #464]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	654b      	str	r3, [r1, #84]	; 0x54
 8004fa4:	e001      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
 8004fa8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d03a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbc:	2b05      	cmp	r3, #5
 8004fbe:	d821      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004fc0:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	0800500b 	.word	0x0800500b
 8004fcc:	08004fe1 	.word	0x08004fe1
 8004fd0:	08004ff3 	.word	0x08004ff3
 8004fd4:	0800500b 	.word	0x0800500b
 8004fd8:	0800500b 	.word	0x0800500b
 8004fdc:	0800500b 	.word	0x0800500b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fd74 	bl	8005ad4 <RCCEx_PLL2_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ff0:	e00c      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3324      	adds	r3, #36	; 0x24
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fe1d 	bl	8005c38 <RCCEx_PLL3_Config>
 8004ffe:	4603      	mov	r3, r0
 8005000:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005002:	e003      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	75fb      	strb	r3, [r7, #23]
      break;
 8005008:	e000      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800500a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800500c:	7dfb      	ldrb	r3, [r7, #23]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005012:	4b57      	ldr	r3, [pc, #348]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005016:	f023 0207 	bic.w	r2, r3, #7
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005020:	4953      	ldr	r1, [pc, #332]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005022:	4313      	orrs	r3, r2
 8005024:	658b      	str	r3, [r1, #88]	; 0x58
 8005026:	e001      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	7dfb      	ldrb	r3, [r7, #23]
 800502a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d04b      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800503e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005042:	d02e      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005048:	d828      	bhi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504e:	d02a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005054:	d822      	bhi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005056:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800505a:	d026      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800505c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005060:	d81c      	bhi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005066:	d010      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800506c:	d816      	bhi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01d      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005076:	d111      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	2100      	movs	r1, #0
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fd28 	bl	8005ad4 <RCCEx_PLL2_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005088:	e012      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3324      	adds	r3, #36	; 0x24
 800508e:	2102      	movs	r1, #2
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fdd1 	bl	8005c38 <RCCEx_PLL3_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800509a:	e009      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	75fb      	strb	r3, [r7, #23]
      break;
 80050a0:	e006      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80050a2:	bf00      	nop
 80050a4:	e004      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80050a6:	bf00      	nop
 80050a8:	e002      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80050aa:	bf00      	nop
 80050ac:	e000      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80050ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b0:	7dfb      	ldrb	r3, [r7, #23]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10a      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050b6:	4b2e      	ldr	r3, [pc, #184]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c4:	492a      	ldr	r1, [pc, #168]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	654b      	str	r3, [r1, #84]	; 0x54
 80050ca:	e001      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d04d      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80050e6:	d02e      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80050e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80050ec:	d828      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f2:	d02a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80050f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f8:	d822      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80050fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050fe:	d026      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005100:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005104:	d81c      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510a:	d010      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800510c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005110:	d816      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01d      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511a:	d111      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3304      	adds	r3, #4
 8005120:	2100      	movs	r1, #0
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fcd6 	bl	8005ad4 <RCCEx_PLL2_Config>
 8005128:	4603      	mov	r3, r0
 800512a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800512c:	e012      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3324      	adds	r3, #36	; 0x24
 8005132:	2102      	movs	r1, #2
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fd7f 	bl	8005c38 <RCCEx_PLL3_Config>
 800513a:	4603      	mov	r3, r0
 800513c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800513e:	e009      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	75fb      	strb	r3, [r7, #23]
      break;
 8005144:	e006      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005146:	bf00      	nop
 8005148:	e004      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800514a:	bf00      	nop
 800514c:	e002      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800514e:	bf00      	nop
 8005150:	e000      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10c      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005168:	4901      	ldr	r1, [pc, #4]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800516a:	4313      	orrs	r3, r2
 800516c:	658b      	str	r3, [r1, #88]	; 0x58
 800516e:	e003      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005170:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005180:	2b00      	cmp	r3, #0
 8005182:	d04b      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800518a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800518e:	d02e      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005190:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005194:	d828      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800519a:	d02a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800519c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a0:	d822      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80051a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80051a6:	d026      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80051a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80051ac:	d81c      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80051ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051b2:	d010      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80051b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051b8:	d816      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01d      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80051be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c2:	d111      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fc82 	bl	8005ad4 <RCCEx_PLL2_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80051d4:	e012      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3324      	adds	r3, #36	; 0x24
 80051da:	2102      	movs	r1, #2
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fd2b 	bl	8005c38 <RCCEx_PLL3_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80051e6:	e009      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	75fb      	strb	r3, [r7, #23]
      break;
 80051ec:	e006      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80051ee:	bf00      	nop
 80051f0:	e004      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80051f2:	bf00      	nop
 80051f4:	e002      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80051f6:	bf00      	nop
 80051f8:	e000      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80051fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005202:	4b9d      	ldr	r3, [pc, #628]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005210:	4999      	ldr	r1, [pc, #612]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005212:	4313      	orrs	r3, r2
 8005214:	658b      	str	r3, [r1, #88]	; 0x58
 8005216:	e001      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005232:	d10a      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3324      	adds	r3, #36	; 0x24
 8005238:	2102      	movs	r1, #2
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fcfc 	bl	8005c38 <RCCEx_PLL3_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800524a:	4b8b      	ldr	r3, [pc, #556]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005258:	4987      	ldr	r1, [pc, #540]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800525a:	4313      	orrs	r3, r2
 800525c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01a      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005274:	d10a      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3324      	adds	r3, #36	; 0x24
 800527a:	2102      	movs	r1, #2
 800527c:	4618      	mov	r0, r3
 800527e:	f000 fcdb 	bl	8005c38 <RCCEx_PLL3_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800528c:	4b7a      	ldr	r3, [pc, #488]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800528e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800529a:	4977      	ldr	r1, [pc, #476]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800529c:	4313      	orrs	r3, r2
 800529e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d034      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052b6:	d01d      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80052b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052bc:	d817      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80052c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c6:	d009      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80052c8:	e011      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3304      	adds	r3, #4
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fbff 	bl	8005ad4 <RCCEx_PLL2_Config>
 80052d6:	4603      	mov	r3, r0
 80052d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80052da:	e00c      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3324      	adds	r3, #36	; 0x24
 80052e0:	2102      	movs	r1, #2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fca8 	bl	8005c38 <RCCEx_PLL3_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80052ec:	e003      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	75fb      	strb	r3, [r7, #23]
      break;
 80052f2:	e000      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80052f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052f6:	7dfb      	ldrb	r3, [r7, #23]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052fc:	4b5e      	ldr	r3, [pc, #376]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800530a:	495b      	ldr	r1, [pc, #364]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800530c:	4313      	orrs	r3, r2
 800530e:	658b      	str	r3, [r1, #88]	; 0x58
 8005310:	e001      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	7dfb      	ldrb	r3, [r7, #23]
 8005314:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d033      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005328:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800532c:	d01c      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800532e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005332:	d816      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005338:	d003      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800533a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800533e:	d007      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005340:	e00f      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005342:	4b4d      	ldr	r3, [pc, #308]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	4a4c      	ldr	r2, [pc, #304]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800534e:	e00c      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3324      	adds	r3, #36	; 0x24
 8005354:	2101      	movs	r1, #1
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fc6e 	bl	8005c38 <RCCEx_PLL3_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005360:	e003      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	75fb      	strb	r3, [r7, #23]
      break;
 8005366:	e000      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800536a:	7dfb      	ldrb	r3, [r7, #23]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005370:	4b41      	ldr	r3, [pc, #260]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800537e:	493e      	ldr	r1, [pc, #248]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005380:	4313      	orrs	r3, r2
 8005382:	654b      	str	r3, [r1, #84]	; 0x54
 8005384:	e001      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
 8005388:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d029      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800539e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a2:	d007      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80053a4:	e00f      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053a6:	4b34      	ldr	r3, [pc, #208]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	4a33      	ldr	r2, [pc, #204]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80053b2:	e00b      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	2102      	movs	r1, #2
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fb8a 	bl	8005ad4 <RCCEx_PLL2_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80053c4:	e002      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	75fb      	strb	r3, [r7, #23]
      break;
 80053ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80053d2:	4b29      	ldr	r3, [pc, #164]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053de:	4926      	ldr	r1, [pc, #152]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80053e4:	e001      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
 80053e8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3324      	adds	r3, #36	; 0x24
 80053fa:	2102      	movs	r1, #2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fc1b 	bl	8005c38 <RCCEx_PLL3_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d033      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005420:	d017      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005426:	d811      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800542c:	d013      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800542e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005432:	d80b      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d010      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543c:	d106      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800543e:	4b0e      	ldr	r3, [pc, #56]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	4a0d      	ldr	r2, [pc, #52]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005448:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800544a:	e007      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	75fb      	strb	r3, [r7, #23]
      break;
 8005450:	e004      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005452:	bf00      	nop
 8005454:	e002      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005456:	bf00      	nop
 8005458:	e000      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800545a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10c      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005462:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800546e:	4902      	ldr	r1, [pc, #8]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005470:	4313      	orrs	r3, r2
 8005472:	654b      	str	r3, [r1, #84]	; 0x54
 8005474:	e004      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005476:	bf00      	nop
 8005478:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547c:	7dfb      	ldrb	r3, [r7, #23]
 800547e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800548c:	4b31      	ldr	r3, [pc, #196]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005498:	492e      	ldr	r1, [pc, #184]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800549a:	4313      	orrs	r3, r2
 800549c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80054aa:	4b2a      	ldr	r3, [pc, #168]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80054b8:	4926      	ldr	r1, [pc, #152]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054ca:	4b22      	ldr	r3, [pc, #136]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054d6:	491f      	ldr	r1, [pc, #124]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00d      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054e8:	4b1a      	ldr	r3, [pc, #104]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	4a19      	ldr	r2, [pc, #100]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054f2:	6113      	str	r3, [r2, #16]
 80054f4:	4b17      	ldr	r3, [pc, #92]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80054fe:	4915      	ldr	r1, [pc, #84]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005500:	4313      	orrs	r3, r2
 8005502:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	da08      	bge.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800550c:	4b11      	ldr	r3, [pc, #68]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800550e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005510:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005518:	490e      	ldr	r1, [pc, #56]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800551a:	4313      	orrs	r3, r2
 800551c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800552a:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005538:	4906      	ldr	r1, [pc, #24]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800553a:	4313      	orrs	r3, r2
 800553c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800553e:	7dbb      	ldrb	r3, [r7, #22]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	e000      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	58024400 	.word	0x58024400

08005558 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800555c:	f7ff f85a 	bl	8004614 <HAL_RCC_GetHCLKFreq>
 8005560:	4602      	mov	r2, r0
 8005562:	4b06      	ldr	r3, [pc, #24]	; (800557c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	091b      	lsrs	r3, r3, #4
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	4904      	ldr	r1, [pc, #16]	; (8005580 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800556e:	5ccb      	ldrb	r3, [r1, r3]
 8005570:	f003 031f 	and.w	r3, r3, #31
 8005574:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005578:	4618      	mov	r0, r3
 800557a:	bd80      	pop	{r7, pc}
 800557c:	58024400 	.word	0x58024400
 8005580:	0800a950 	.word	0x0800a950

08005584 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005584:	b480      	push	{r7}
 8005586:	b089      	sub	sp, #36	; 0x24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800558c:	4ba1      	ldr	r3, [pc, #644]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005596:	4b9f      	ldr	r3, [pc, #636]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559a:	0b1b      	lsrs	r3, r3, #12
 800559c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80055a2:	4b9c      	ldr	r3, [pc, #624]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	091b      	lsrs	r3, r3, #4
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80055ae:	4b99      	ldr	r3, [pc, #612]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b2:	08db      	lsrs	r3, r3, #3
 80055b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	fb02 f303 	mul.w	r3, r2, r3
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 8111 	beq.w	80057f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	f000 8083 	beq.w	80056e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	f200 80a1 	bhi.w	8005724 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d056      	beq.n	800569c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80055ee:	e099      	b.n	8005724 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055f0:	4b88      	ldr	r3, [pc, #544]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d02d      	beq.n	8005658 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055fc:	4b85      	ldr	r3, [pc, #532]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	08db      	lsrs	r3, r3, #3
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	4a84      	ldr	r2, [pc, #528]	; (8005818 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005608:	fa22 f303 	lsr.w	r3, r2, r3
 800560c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005626:	4b7b      	ldr	r3, [pc, #492]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005636:	ed97 6a03 	vldr	s12, [r7, #12]
 800563a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800581c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800563e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005652:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005656:	e087      	b.n	8005768 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005662:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005820 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566a:	4b6a      	ldr	r3, [pc, #424]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567a:	ed97 6a03 	vldr	s12, [r7, #12]
 800567e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800581c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800568e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005696:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800569a:	e065      	b.n	8005768 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80056aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ae:	4b59      	ldr	r3, [pc, #356]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056be:	ed97 6a03 	vldr	s12, [r7, #12]
 80056c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800581c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056de:	e043      	b.n	8005768 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80056ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f2:	4b48      	ldr	r3, [pc, #288]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005702:	ed97 6a03 	vldr	s12, [r7, #12]
 8005706:	eddf 5a45 	vldr	s11, [pc, #276]	; 800581c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800570a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005722:	e021      	b.n	8005768 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005736:	4b37      	ldr	r3, [pc, #220]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005746:	ed97 6a03 	vldr	s12, [r7, #12]
 800574a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800581c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800574e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800575a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005762:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005766:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005768:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	0a5b      	lsrs	r3, r3, #9
 800576e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800577e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005782:	edd7 6a07 	vldr	s13, [r7, #28]
 8005786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800578a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800578e:	ee17 2a90 	vmov	r2, s15
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005796:	4b1f      	ldr	r3, [pc, #124]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	0c1b      	lsrs	r3, r3, #16
 800579c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057a0:	ee07 3a90 	vmov	s15, r3
 80057a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80057b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057bc:	ee17 2a90 	vmov	r2, s15
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80057c4:	4b13      	ldr	r3, [pc, #76]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	0e1b      	lsrs	r3, r3, #24
 80057ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057de:	edd7 6a07 	vldr	s13, [r7, #28]
 80057e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ea:	ee17 2a90 	vmov	r2, s15
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80057f2:	e008      	b.n	8005806 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	609a      	str	r2, [r3, #8]
}
 8005806:	bf00      	nop
 8005808:	3724      	adds	r7, #36	; 0x24
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	58024400 	.word	0x58024400
 8005818:	03d09000 	.word	0x03d09000
 800581c:	46000000 	.word	0x46000000
 8005820:	4c742400 	.word	0x4c742400
 8005824:	4a742400 	.word	0x4a742400
 8005828:	4af42400 	.word	0x4af42400

0800582c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800582c:	b480      	push	{r7}
 800582e:	b089      	sub	sp, #36	; 0x24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005834:	4ba1      	ldr	r3, [pc, #644]	; (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	f003 0303 	and.w	r3, r3, #3
 800583c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800583e:	4b9f      	ldr	r3, [pc, #636]	; (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005842:	0d1b      	lsrs	r3, r3, #20
 8005844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005848:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800584a:	4b9c      	ldr	r3, [pc, #624]	; (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	0a1b      	lsrs	r3, r3, #8
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005856:	4b99      	ldr	r3, [pc, #612]	; (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585a:	08db      	lsrs	r3, r3, #3
 800585c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	fb02 f303 	mul.w	r3, r2, r3
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8111 	beq.w	8005a9c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	2b02      	cmp	r3, #2
 800587e:	f000 8083 	beq.w	8005988 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	2b02      	cmp	r3, #2
 8005886:	f200 80a1 	bhi.w	80059cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d056      	beq.n	8005944 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005896:	e099      	b.n	80059cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005898:	4b88      	ldr	r3, [pc, #544]	; (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d02d      	beq.n	8005900 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058a4:	4b85      	ldr	r3, [pc, #532]	; (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	08db      	lsrs	r3, r3, #3
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	4a84      	ldr	r2, [pc, #528]	; (8005ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80058b0:	fa22 f303 	lsr.w	r3, r2, r3
 80058b4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	ee07 3a90 	vmov	s15, r3
 80058bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ce:	4b7b      	ldr	r3, [pc, #492]	; (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058de:	ed97 6a03 	vldr	s12, [r7, #12]
 80058e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80058fe:	e087      	b.n	8005a10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800590e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005912:	4b6a      	ldr	r3, [pc, #424]	; (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005922:	ed97 6a03 	vldr	s12, [r7, #12]
 8005926:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800592a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005942:	e065      	b.n	8005a10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005956:	4b59      	ldr	r3, [pc, #356]	; (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005966:	ed97 6a03 	vldr	s12, [r7, #12]
 800596a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800596e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800597a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005982:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005986:	e043      	b.n	8005a10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005992:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599a:	4b48      	ldr	r3, [pc, #288]	; (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059ca:	e021      	b.n	8005a10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059de:	4b37      	ldr	r3, [pc, #220]	; (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80059f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a0e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005a10:	4b2a      	ldr	r3, [pc, #168]	; (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	0a5b      	lsrs	r3, r3, #9
 8005a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a36:	ee17 2a90 	vmov	r2, s15
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005a3e:	4b1f      	ldr	r3, [pc, #124]	; (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	0c1b      	lsrs	r3, r3, #16
 8005a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a48:	ee07 3a90 	vmov	s15, r3
 8005a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a58:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a64:	ee17 2a90 	vmov	r2, s15
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005a6c:	4b13      	ldr	r3, [pc, #76]	; (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	0e1b      	lsrs	r3, r3, #24
 8005a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a86:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a92:	ee17 2a90 	vmov	r2, s15
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005a9a:	e008      	b.n	8005aae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	609a      	str	r2, [r3, #8]
}
 8005aae:	bf00      	nop
 8005ab0:	3724      	adds	r7, #36	; 0x24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	58024400 	.word	0x58024400
 8005ac0:	03d09000 	.word	0x03d09000
 8005ac4:	46000000 	.word	0x46000000
 8005ac8:	4c742400 	.word	0x4c742400
 8005acc:	4a742400 	.word	0x4a742400
 8005ad0:	4af42400 	.word	0x4af42400

08005ad4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ae2:	4b53      	ldr	r3, [pc, #332]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d101      	bne.n	8005af2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e099      	b.n	8005c26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005af2:	4b4f      	ldr	r3, [pc, #316]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a4e      	ldr	r2, [pc, #312]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005af8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afe:	f7fc fa7b 	bl	8001ff8 <HAL_GetTick>
 8005b02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b04:	e008      	b.n	8005b18 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b06:	f7fc fa77 	bl	8001ff8 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e086      	b.n	8005c26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b18:	4b45      	ldr	r3, [pc, #276]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1f0      	bne.n	8005b06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005b24:	4b42      	ldr	r3, [pc, #264]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	031b      	lsls	r3, r3, #12
 8005b32:	493f      	ldr	r1, [pc, #252]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	628b      	str	r3, [r1, #40]	; 0x28
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	025b      	lsls	r3, r3, #9
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	041b      	lsls	r3, r3, #16
 8005b56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	061b      	lsls	r3, r3, #24
 8005b64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b68:	4931      	ldr	r1, [pc, #196]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b6e:	4b30      	ldr	r3, [pc, #192]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	492d      	ldr	r1, [pc, #180]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b80:	4b2b      	ldr	r3, [pc, #172]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	f023 0220 	bic.w	r2, r3, #32
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	4928      	ldr	r1, [pc, #160]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b92:	4b27      	ldr	r3, [pc, #156]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	4a26      	ldr	r2, [pc, #152]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005b98:	f023 0310 	bic.w	r3, r3, #16
 8005b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b9e:	4b24      	ldr	r3, [pc, #144]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005ba0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ba2:	4b24      	ldr	r3, [pc, #144]	; (8005c34 <RCCEx_PLL2_Config+0x160>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	69d2      	ldr	r2, [r2, #28]
 8005baa:	00d2      	lsls	r2, r2, #3
 8005bac:	4920      	ldr	r1, [pc, #128]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005bb2:	4b1f      	ldr	r3, [pc, #124]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	4a1e      	ldr	r2, [pc, #120]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005bb8:	f043 0310 	orr.w	r3, r3, #16
 8005bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d106      	bne.n	8005bd2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005bc4:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	4a19      	ldr	r2, [pc, #100]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005bca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bd0:	e00f      	b.n	8005bf2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d106      	bne.n	8005be6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005bd8:	4b15      	ldr	r3, [pc, #84]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	4a14      	ldr	r2, [pc, #80]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005be2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005be4:	e005      	b.n	8005bf2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005be6:	4b12      	ldr	r3, [pc, #72]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	4a11      	ldr	r2, [pc, #68]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bf0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005bf2:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a0e      	ldr	r2, [pc, #56]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005bf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bfe:	f7fc f9fb 	bl	8001ff8 <HAL_GetTick>
 8005c02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c04:	e008      	b.n	8005c18 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c06:	f7fc f9f7 	bl	8001ff8 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d901      	bls.n	8005c18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e006      	b.n	8005c26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c18:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <RCCEx_PLL2_Config+0x15c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0f0      	beq.n	8005c06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	58024400 	.word	0x58024400
 8005c34:	ffff0007 	.word	0xffff0007

08005c38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c46:	4b53      	ldr	r3, [pc, #332]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d101      	bne.n	8005c56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e099      	b.n	8005d8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c56:	4b4f      	ldr	r3, [pc, #316]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a4e      	ldr	r2, [pc, #312]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c62:	f7fc f9c9 	bl	8001ff8 <HAL_GetTick>
 8005c66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c68:	e008      	b.n	8005c7c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c6a:	f7fc f9c5 	bl	8001ff8 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d901      	bls.n	8005c7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e086      	b.n	8005d8a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c7c:	4b45      	ldr	r3, [pc, #276]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f0      	bne.n	8005c6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c88:	4b42      	ldr	r3, [pc, #264]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	051b      	lsls	r3, r3, #20
 8005c96:	493f      	ldr	r1, [pc, #252]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	628b      	str	r3, [r1, #40]	; 0x28
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	025b      	lsls	r3, r3, #9
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	041b      	lsls	r3, r3, #16
 8005cba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	061b      	lsls	r3, r3, #24
 8005cc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ccc:	4931      	ldr	r1, [pc, #196]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005cd2:	4b30      	ldr	r3, [pc, #192]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	492d      	ldr	r1, [pc, #180]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005ce4:	4b2b      	ldr	r3, [pc, #172]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	4928      	ldr	r1, [pc, #160]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005cf6:	4b27      	ldr	r3, [pc, #156]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfa:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d02:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d06:	4b24      	ldr	r3, [pc, #144]	; (8005d98 <RCCEx_PLL3_Config+0x160>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	69d2      	ldr	r2, [r2, #28]
 8005d0e:	00d2      	lsls	r2, r2, #3
 8005d10:	4920      	ldr	r1, [pc, #128]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005d16:	4b1f      	ldr	r3, [pc, #124]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1a:	4a1e      	ldr	r2, [pc, #120]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d106      	bne.n	8005d36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005d28:	4b1a      	ldr	r3, [pc, #104]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	4a19      	ldr	r2, [pc, #100]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005d2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d34:	e00f      	b.n	8005d56 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d106      	bne.n	8005d4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d3c:	4b15      	ldr	r3, [pc, #84]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	4a14      	ldr	r2, [pc, #80]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005d42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d48:	e005      	b.n	8005d56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d4a:	4b12      	ldr	r3, [pc, #72]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4e:	4a11      	ldr	r2, [pc, #68]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d56:	4b0f      	ldr	r3, [pc, #60]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a0e      	ldr	r2, [pc, #56]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d62:	f7fc f949 	bl	8001ff8 <HAL_GetTick>
 8005d66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d68:	e008      	b.n	8005d7c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d6a:	f7fc f945 	bl	8001ff8 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d901      	bls.n	8005d7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e006      	b.n	8005d8a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d7c:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <RCCEx_PLL3_Config+0x15c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0f0      	beq.n	8005d6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	58024400 	.word	0x58024400
 8005d98:	ffff0007 	.word	0xffff0007

08005d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e049      	b.n	8005e42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fb feca 	bl	8001b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	f000 fb8c 	bl	80064f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d001      	beq.n	8005e64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e04c      	b.n	8005efe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a26      	ldr	r2, [pc, #152]	; (8005f0c <HAL_TIM_Base_Start+0xc0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d022      	beq.n	8005ebc <HAL_TIM_Base_Start+0x70>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7e:	d01d      	beq.n	8005ebc <HAL_TIM_Base_Start+0x70>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a22      	ldr	r2, [pc, #136]	; (8005f10 <HAL_TIM_Base_Start+0xc4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d018      	beq.n	8005ebc <HAL_TIM_Base_Start+0x70>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a21      	ldr	r2, [pc, #132]	; (8005f14 <HAL_TIM_Base_Start+0xc8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d013      	beq.n	8005ebc <HAL_TIM_Base_Start+0x70>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1f      	ldr	r2, [pc, #124]	; (8005f18 <HAL_TIM_Base_Start+0xcc>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00e      	beq.n	8005ebc <HAL_TIM_Base_Start+0x70>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1e      	ldr	r2, [pc, #120]	; (8005f1c <HAL_TIM_Base_Start+0xd0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d009      	beq.n	8005ebc <HAL_TIM_Base_Start+0x70>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <HAL_TIM_Base_Start+0xd4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d004      	beq.n	8005ebc <HAL_TIM_Base_Start+0x70>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <HAL_TIM_Base_Start+0xd8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d115      	bne.n	8005ee8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	4b19      	ldr	r3, [pc, #100]	; (8005f28 <HAL_TIM_Base_Start+0xdc>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b06      	cmp	r3, #6
 8005ecc:	d015      	beq.n	8005efa <HAL_TIM_Base_Start+0xae>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed4:	d011      	beq.n	8005efa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee6:	e008      	b.n	8005efa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	e000      	b.n	8005efc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40010000 	.word	0x40010000
 8005f10:	40000400 	.word	0x40000400
 8005f14:	40000800 	.word	0x40000800
 8005f18:	40000c00 	.word	0x40000c00
 8005f1c:	40010400 	.word	0x40010400
 8005f20:	40001800 	.word	0x40001800
 8005f24:	40014000 	.word	0x40014000
 8005f28:	00010007 	.word	0x00010007

08005f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d001      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e054      	b.n	8005fee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a26      	ldr	r2, [pc, #152]	; (8005ffc <HAL_TIM_Base_Start_IT+0xd0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d022      	beq.n	8005fac <HAL_TIM_Base_Start_IT+0x80>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f6e:	d01d      	beq.n	8005fac <HAL_TIM_Base_Start_IT+0x80>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a22      	ldr	r2, [pc, #136]	; (8006000 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d018      	beq.n	8005fac <HAL_TIM_Base_Start_IT+0x80>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a21      	ldr	r2, [pc, #132]	; (8006004 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d013      	beq.n	8005fac <HAL_TIM_Base_Start_IT+0x80>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1f      	ldr	r2, [pc, #124]	; (8006008 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00e      	beq.n	8005fac <HAL_TIM_Base_Start_IT+0x80>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1e      	ldr	r2, [pc, #120]	; (800600c <HAL_TIM_Base_Start_IT+0xe0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d009      	beq.n	8005fac <HAL_TIM_Base_Start_IT+0x80>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1c      	ldr	r2, [pc, #112]	; (8006010 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <HAL_TIM_Base_Start_IT+0x80>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1b      	ldr	r2, [pc, #108]	; (8006014 <HAL_TIM_Base_Start_IT+0xe8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d115      	bne.n	8005fd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	4b19      	ldr	r3, [pc, #100]	; (8006018 <HAL_TIM_Base_Start_IT+0xec>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b06      	cmp	r3, #6
 8005fbc:	d015      	beq.n	8005fea <HAL_TIM_Base_Start_IT+0xbe>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc4:	d011      	beq.n	8005fea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f042 0201 	orr.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd6:	e008      	b.n	8005fea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	e000      	b.n	8005fec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40000400 	.word	0x40000400
 8006004:	40000800 	.word	0x40000800
 8006008:	40000c00 	.word	0x40000c00
 800600c:	40010400 	.word	0x40010400
 8006010:	40001800 	.word	0x40001800
 8006014:	40014000 	.word	0x40014000
 8006018:	00010007 	.word	0x00010007

0800601c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0201 	bic.w	r2, r2, #1
 8006032:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6a1a      	ldr	r2, [r3, #32]
 800603a:	f241 1311 	movw	r3, #4369	; 0x1111
 800603e:	4013      	ands	r3, r2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10f      	bne.n	8006064 <HAL_TIM_Base_Stop_IT+0x48>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6a1a      	ldr	r2, [r3, #32]
 800604a:	f240 4344 	movw	r3, #1092	; 0x444
 800604e:	4013      	ands	r3, r2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d107      	bne.n	8006064 <HAL_TIM_Base_Stop_IT+0x48>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b02      	cmp	r3, #2
 800608e:	d122      	bne.n	80060d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b02      	cmp	r3, #2
 800609c:	d11b      	bne.n	80060d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f06f 0202 	mvn.w	r2, #2
 80060a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f9fd 	bl	80064bc <HAL_TIM_IC_CaptureCallback>
 80060c2:	e005      	b.n	80060d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f9ef 	bl	80064a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fa00 	bl	80064d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d122      	bne.n	800612a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d11b      	bne.n	800612a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f06f 0204 	mvn.w	r2, #4
 80060fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f9d3 	bl	80064bc <HAL_TIM_IC_CaptureCallback>
 8006116:	e005      	b.n	8006124 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f9c5 	bl	80064a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f9d6 	bl	80064d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b08      	cmp	r3, #8
 8006136:	d122      	bne.n	800617e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b08      	cmp	r3, #8
 8006144:	d11b      	bne.n	800617e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f06f 0208 	mvn.w	r2, #8
 800614e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2204      	movs	r2, #4
 8006154:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	f003 0303 	and.w	r3, r3, #3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f9a9 	bl	80064bc <HAL_TIM_IC_CaptureCallback>
 800616a:	e005      	b.n	8006178 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f99b 	bl	80064a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f9ac 	bl	80064d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b10      	cmp	r3, #16
 800618a:	d122      	bne.n	80061d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	2b10      	cmp	r3, #16
 8006198:	d11b      	bne.n	80061d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f06f 0210 	mvn.w	r2, #16
 80061a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2208      	movs	r2, #8
 80061a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f97f 	bl	80064bc <HAL_TIM_IC_CaptureCallback>
 80061be:	e005      	b.n	80061cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f971 	bl	80064a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f982 	bl	80064d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d10e      	bne.n	80061fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d107      	bne.n	80061fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f06f 0201 	mvn.w	r2, #1
 80061f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7fa ffdf 	bl	80011bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006208:	2b80      	cmp	r3, #128	; 0x80
 800620a:	d10e      	bne.n	800622a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006216:	2b80      	cmp	r3, #128	; 0x80
 8006218:	d107      	bne.n	800622a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fb37 	bl	8006898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006238:	d10e      	bne.n	8006258 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006244:	2b80      	cmp	r3, #128	; 0x80
 8006246:	d107      	bne.n	8006258 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fb2a 	bl	80068ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006262:	2b40      	cmp	r3, #64	; 0x40
 8006264:	d10e      	bne.n	8006284 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006270:	2b40      	cmp	r3, #64	; 0x40
 8006272:	d107      	bne.n	8006284 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800627c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f930 	bl	80064e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b20      	cmp	r3, #32
 8006290:	d10e      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b20      	cmp	r3, #32
 800629e:	d107      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f06f 0220 	mvn.w	r2, #32
 80062a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 faea 	bl	8006884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062b0:	bf00      	nop
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_TIM_ConfigClockSource+0x1c>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e0dc      	b.n	800648e <HAL_TIM_ConfigClockSource+0x1d6>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	4b6a      	ldr	r3, [pc, #424]	; (8006498 <HAL_TIM_ConfigClockSource+0x1e0>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a64      	ldr	r2, [pc, #400]	; (800649c <HAL_TIM_ConfigClockSource+0x1e4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	f000 80a9 	beq.w	8006462 <HAL_TIM_ConfigClockSource+0x1aa>
 8006310:	4a62      	ldr	r2, [pc, #392]	; (800649c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	f200 80ae 	bhi.w	8006474 <HAL_TIM_ConfigClockSource+0x1bc>
 8006318:	4a61      	ldr	r2, [pc, #388]	; (80064a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	f000 80a1 	beq.w	8006462 <HAL_TIM_ConfigClockSource+0x1aa>
 8006320:	4a5f      	ldr	r2, [pc, #380]	; (80064a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	f200 80a6 	bhi.w	8006474 <HAL_TIM_ConfigClockSource+0x1bc>
 8006328:	4a5e      	ldr	r2, [pc, #376]	; (80064a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800632a:	4293      	cmp	r3, r2
 800632c:	f000 8099 	beq.w	8006462 <HAL_TIM_ConfigClockSource+0x1aa>
 8006330:	4a5c      	ldr	r2, [pc, #368]	; (80064a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006332:	4293      	cmp	r3, r2
 8006334:	f200 809e 	bhi.w	8006474 <HAL_TIM_ConfigClockSource+0x1bc>
 8006338:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800633c:	f000 8091 	beq.w	8006462 <HAL_TIM_ConfigClockSource+0x1aa>
 8006340:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006344:	f200 8096 	bhi.w	8006474 <HAL_TIM_ConfigClockSource+0x1bc>
 8006348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800634c:	f000 8089 	beq.w	8006462 <HAL_TIM_ConfigClockSource+0x1aa>
 8006350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006354:	f200 808e 	bhi.w	8006474 <HAL_TIM_ConfigClockSource+0x1bc>
 8006358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635c:	d03e      	beq.n	80063dc <HAL_TIM_ConfigClockSource+0x124>
 800635e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006362:	f200 8087 	bhi.w	8006474 <HAL_TIM_ConfigClockSource+0x1bc>
 8006366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636a:	f000 8086 	beq.w	800647a <HAL_TIM_ConfigClockSource+0x1c2>
 800636e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006372:	d87f      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x1bc>
 8006374:	2b70      	cmp	r3, #112	; 0x70
 8006376:	d01a      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0xf6>
 8006378:	2b70      	cmp	r3, #112	; 0x70
 800637a:	d87b      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x1bc>
 800637c:	2b60      	cmp	r3, #96	; 0x60
 800637e:	d050      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x16a>
 8006380:	2b60      	cmp	r3, #96	; 0x60
 8006382:	d877      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x1bc>
 8006384:	2b50      	cmp	r3, #80	; 0x50
 8006386:	d03c      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0x14a>
 8006388:	2b50      	cmp	r3, #80	; 0x50
 800638a:	d873      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x1bc>
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d058      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x18a>
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	d86f      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x1bc>
 8006394:	2b30      	cmp	r3, #48	; 0x30
 8006396:	d064      	beq.n	8006462 <HAL_TIM_ConfigClockSource+0x1aa>
 8006398:	2b30      	cmp	r3, #48	; 0x30
 800639a:	d86b      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x1bc>
 800639c:	2b20      	cmp	r3, #32
 800639e:	d060      	beq.n	8006462 <HAL_TIM_ConfigClockSource+0x1aa>
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	d867      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x1bc>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d05c      	beq.n	8006462 <HAL_TIM_ConfigClockSource+0x1aa>
 80063a8:	2b10      	cmp	r3, #16
 80063aa:	d05a      	beq.n	8006462 <HAL_TIM_ConfigClockSource+0x1aa>
 80063ac:	e062      	b.n	8006474 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	6899      	ldr	r1, [r3, #8]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f000 f9b3 	bl	8006728 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	609a      	str	r2, [r3, #8]
      break;
 80063da:	e04f      	b.n	800647c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	6899      	ldr	r1, [r3, #8]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f000 f99c 	bl	8006728 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063fe:	609a      	str	r2, [r3, #8]
      break;
 8006400:	e03c      	b.n	800647c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6859      	ldr	r1, [r3, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	461a      	mov	r2, r3
 8006410:	f000 f90c 	bl	800662c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2150      	movs	r1, #80	; 0x50
 800641a:	4618      	mov	r0, r3
 800641c:	f000 f966 	bl	80066ec <TIM_ITRx_SetConfig>
      break;
 8006420:	e02c      	b.n	800647c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6818      	ldr	r0, [r3, #0]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6859      	ldr	r1, [r3, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	461a      	mov	r2, r3
 8006430:	f000 f92b 	bl	800668a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2160      	movs	r1, #96	; 0x60
 800643a:	4618      	mov	r0, r3
 800643c:	f000 f956 	bl	80066ec <TIM_ITRx_SetConfig>
      break;
 8006440:	e01c      	b.n	800647c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6818      	ldr	r0, [r3, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	6859      	ldr	r1, [r3, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	461a      	mov	r2, r3
 8006450:	f000 f8ec 	bl	800662c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2140      	movs	r1, #64	; 0x40
 800645a:	4618      	mov	r0, r3
 800645c:	f000 f946 	bl	80066ec <TIM_ITRx_SetConfig>
      break;
 8006460:	e00c      	b.n	800647c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4619      	mov	r1, r3
 800646c:	4610      	mov	r0, r2
 800646e:	f000 f93d 	bl	80066ec <TIM_ITRx_SetConfig>
      break;
 8006472:	e003      	b.n	800647c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
      break;
 8006478:	e000      	b.n	800647c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800647a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	ffceff88 	.word	0xffceff88
 800649c:	00100040 	.word	0x00100040
 80064a0:	00100030 	.word	0x00100030
 80064a4:	00100020 	.word	0x00100020

080064a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a40      	ldr	r2, [pc, #256]	; (800660c <TIM_Base_SetConfig+0x114>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d013      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006516:	d00f      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a3d      	ldr	r2, [pc, #244]	; (8006610 <TIM_Base_SetConfig+0x118>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00b      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a3c      	ldr	r2, [pc, #240]	; (8006614 <TIM_Base_SetConfig+0x11c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d007      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a3b      	ldr	r2, [pc, #236]	; (8006618 <TIM_Base_SetConfig+0x120>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a3a      	ldr	r2, [pc, #232]	; (800661c <TIM_Base_SetConfig+0x124>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d108      	bne.n	800654a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a2f      	ldr	r2, [pc, #188]	; (800660c <TIM_Base_SetConfig+0x114>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d01f      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006558:	d01b      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a2c      	ldr	r2, [pc, #176]	; (8006610 <TIM_Base_SetConfig+0x118>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d017      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a2b      	ldr	r2, [pc, #172]	; (8006614 <TIM_Base_SetConfig+0x11c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d013      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a2a      	ldr	r2, [pc, #168]	; (8006618 <TIM_Base_SetConfig+0x120>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00f      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a29      	ldr	r2, [pc, #164]	; (800661c <TIM_Base_SetConfig+0x124>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00b      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a28      	ldr	r2, [pc, #160]	; (8006620 <TIM_Base_SetConfig+0x128>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d007      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a27      	ldr	r2, [pc, #156]	; (8006624 <TIM_Base_SetConfig+0x12c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d003      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a26      	ldr	r2, [pc, #152]	; (8006628 <TIM_Base_SetConfig+0x130>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d108      	bne.n	80065a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a10      	ldr	r2, [pc, #64]	; (800660c <TIM_Base_SetConfig+0x114>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00f      	beq.n	80065f0 <TIM_Base_SetConfig+0xf8>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a12      	ldr	r2, [pc, #72]	; (800661c <TIM_Base_SetConfig+0x124>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00b      	beq.n	80065f0 <TIM_Base_SetConfig+0xf8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a11      	ldr	r2, [pc, #68]	; (8006620 <TIM_Base_SetConfig+0x128>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d007      	beq.n	80065f0 <TIM_Base_SetConfig+0xf8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a10      	ldr	r2, [pc, #64]	; (8006624 <TIM_Base_SetConfig+0x12c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d003      	beq.n	80065f0 <TIM_Base_SetConfig+0xf8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a0f      	ldr	r2, [pc, #60]	; (8006628 <TIM_Base_SetConfig+0x130>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d103      	bne.n	80065f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	615a      	str	r2, [r3, #20]
}
 80065fe:	bf00      	nop
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	40010000 	.word	0x40010000
 8006610:	40000400 	.word	0x40000400
 8006614:	40000800 	.word	0x40000800
 8006618:	40000c00 	.word	0x40000c00
 800661c:	40010400 	.word	0x40010400
 8006620:	40014000 	.word	0x40014000
 8006624:	40014400 	.word	0x40014400
 8006628:	40014800 	.word	0x40014800

0800662c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	f023 0201 	bic.w	r2, r3, #1
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f023 030a 	bic.w	r3, r3, #10
 8006668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	621a      	str	r2, [r3, #32]
}
 800667e:	bf00      	nop
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800668a:	b480      	push	{r7}
 800668c:	b087      	sub	sp, #28
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f023 0210 	bic.w	r2, r3, #16
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	031b      	lsls	r3, r3, #12
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	621a      	str	r2, [r3, #32]
}
 80066de:	bf00      	nop
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
	...

080066ec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4b09      	ldr	r3, [pc, #36]	; (8006724 <TIM_ITRx_SetConfig+0x38>)
 8006700:	4013      	ands	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4313      	orrs	r3, r2
 800670a:	f043 0307 	orr.w	r3, r3, #7
 800670e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	609a      	str	r2, [r3, #8]
}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	ffcfff8f 	.word	0xffcfff8f

08006728 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006742:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	021a      	lsls	r2, r3, #8
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	431a      	orrs	r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	4313      	orrs	r3, r2
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	609a      	str	r2, [r3, #8]
}
 800675c:	bf00      	nop
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800677c:	2302      	movs	r3, #2
 800677e:	e06d      	b.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a30      	ldr	r2, [pc, #192]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d004      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a2f      	ldr	r2, [pc, #188]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d108      	bne.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a20      	ldr	r2, [pc, #128]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d022      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f2:	d01d      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1d      	ldr	r2, [pc, #116]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d018      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1c      	ldr	r2, [pc, #112]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d013      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a1a      	ldr	r2, [pc, #104]	; (8006878 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00e      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a15      	ldr	r2, [pc, #84]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d009      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a16      	ldr	r2, [pc, #88]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d004      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a15      	ldr	r2, [pc, #84]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d10c      	bne.n	800684a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006836:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	4313      	orrs	r3, r2
 8006840:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	40010000 	.word	0x40010000
 800686c:	40010400 	.word	0x40010400
 8006870:	40000400 	.word	0x40000400
 8006874:	40000800 	.word	0x40000800
 8006878:	40000c00 	.word	0x40000c00
 800687c:	40001800 	.word	0x40001800
 8006880:	40014000 	.word	0x40014000

08006884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e042      	b.n	8006958 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d106      	bne.n	80068ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7fb f977 	bl	8001bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2224      	movs	r2, #36	; 0x24
 80068ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0201 	bic.w	r2, r2, #1
 8006900:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f8c2 	bl	8006a8c <UART_SetConfig>
 8006908:	4603      	mov	r3, r0
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e022      	b.n	8006958 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fe1e 	bl	800755c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800692e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800693e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0201 	orr.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fea5 	bl	80076a0 <UART_CheckIdleState>
 8006956:	4603      	mov	r3, r0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08a      	sub	sp, #40	; 0x28
 8006964:	af02      	add	r7, sp, #8
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	4613      	mov	r3, r2
 800696e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006976:	2b20      	cmp	r3, #32
 8006978:	f040 8083 	bne.w	8006a82 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <HAL_UART_Transmit+0x28>
 8006982:	88fb      	ldrh	r3, [r7, #6]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e07b      	b.n	8006a84 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <HAL_UART_Transmit+0x3a>
 8006996:	2302      	movs	r3, #2
 8006998:	e074      	b.n	8006a84 <HAL_UART_Transmit+0x124>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2221      	movs	r2, #33	; 0x21
 80069ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069b2:	f7fb fb21 	bl	8001ff8 <HAL_GetTick>
 80069b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	88fa      	ldrh	r2, [r7, #6]
 80069bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	88fa      	ldrh	r2, [r7, #6]
 80069c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d0:	d108      	bne.n	80069e4 <HAL_UART_Transmit+0x84>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d104      	bne.n	80069e4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	e003      	b.n	80069ec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80069f4:	e02c      	b.n	8006a50 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2200      	movs	r2, #0
 80069fe:	2180      	movs	r1, #128	; 0x80
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fe98 	bl	8007736 <UART_WaitOnFlagUntilTimeout>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e039      	b.n	8006a84 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10b      	bne.n	8006a2e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	3302      	adds	r3, #2
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	e007      	b.n	8006a3e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	781a      	ldrb	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1cc      	bne.n	80069f6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2200      	movs	r2, #0
 8006a64:	2140      	movs	r1, #64	; 0x40
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 fe65 	bl	8007736 <UART_WaitOnFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e006      	b.n	8006a84 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e000      	b.n	8006a84 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006a82:	2302      	movs	r3, #2
  }
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3720      	adds	r7, #32
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a90:	b092      	sub	sp, #72	; 0x48
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4bbe      	ldr	r3, [pc, #760]	; (8006db4 <UART_SetConfig+0x328>)
 8006abc:	4013      	ands	r3, r2
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	6812      	ldr	r2, [r2, #0]
 8006ac2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ac4:	430b      	orrs	r3, r1
 8006ac6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4ab3      	ldr	r2, [pc, #716]	; (8006db8 <UART_SetConfig+0x32c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d004      	beq.n	8006af8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006af4:	4313      	orrs	r3, r2
 8006af6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	4baf      	ldr	r3, [pc, #700]	; (8006dbc <UART_SetConfig+0x330>)
 8006b00:	4013      	ands	r3, r2
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	6812      	ldr	r2, [r2, #0]
 8006b06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b12:	f023 010f 	bic.w	r1, r3, #15
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4aa6      	ldr	r2, [pc, #664]	; (8006dc0 <UART_SetConfig+0x334>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d177      	bne.n	8006c1c <UART_SetConfig+0x190>
 8006b2c:	4ba5      	ldr	r3, [pc, #660]	; (8006dc4 <UART_SetConfig+0x338>)
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b34:	2b28      	cmp	r3, #40	; 0x28
 8006b36:	d86d      	bhi.n	8006c14 <UART_SetConfig+0x188>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0xb4>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006be5 	.word	0x08006be5
 8006b44:	08006c15 	.word	0x08006c15
 8006b48:	08006c15 	.word	0x08006c15
 8006b4c:	08006c15 	.word	0x08006c15
 8006b50:	08006c15 	.word	0x08006c15
 8006b54:	08006c15 	.word	0x08006c15
 8006b58:	08006c15 	.word	0x08006c15
 8006b5c:	08006c15 	.word	0x08006c15
 8006b60:	08006bed 	.word	0x08006bed
 8006b64:	08006c15 	.word	0x08006c15
 8006b68:	08006c15 	.word	0x08006c15
 8006b6c:	08006c15 	.word	0x08006c15
 8006b70:	08006c15 	.word	0x08006c15
 8006b74:	08006c15 	.word	0x08006c15
 8006b78:	08006c15 	.word	0x08006c15
 8006b7c:	08006c15 	.word	0x08006c15
 8006b80:	08006bf5 	.word	0x08006bf5
 8006b84:	08006c15 	.word	0x08006c15
 8006b88:	08006c15 	.word	0x08006c15
 8006b8c:	08006c15 	.word	0x08006c15
 8006b90:	08006c15 	.word	0x08006c15
 8006b94:	08006c15 	.word	0x08006c15
 8006b98:	08006c15 	.word	0x08006c15
 8006b9c:	08006c15 	.word	0x08006c15
 8006ba0:	08006bfd 	.word	0x08006bfd
 8006ba4:	08006c15 	.word	0x08006c15
 8006ba8:	08006c15 	.word	0x08006c15
 8006bac:	08006c15 	.word	0x08006c15
 8006bb0:	08006c15 	.word	0x08006c15
 8006bb4:	08006c15 	.word	0x08006c15
 8006bb8:	08006c15 	.word	0x08006c15
 8006bbc:	08006c15 	.word	0x08006c15
 8006bc0:	08006c05 	.word	0x08006c05
 8006bc4:	08006c15 	.word	0x08006c15
 8006bc8:	08006c15 	.word	0x08006c15
 8006bcc:	08006c15 	.word	0x08006c15
 8006bd0:	08006c15 	.word	0x08006c15
 8006bd4:	08006c15 	.word	0x08006c15
 8006bd8:	08006c15 	.word	0x08006c15
 8006bdc:	08006c15 	.word	0x08006c15
 8006be0:	08006c0d 	.word	0x08006c0d
 8006be4:	2301      	movs	r3, #1
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bea:	e222      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006bec:	2304      	movs	r3, #4
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf2:	e21e      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006bf4:	2308      	movs	r3, #8
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfa:	e21a      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006bfc:	2310      	movs	r3, #16
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c02:	e216      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006c04:	2320      	movs	r3, #32
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0a:	e212      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006c0c:	2340      	movs	r3, #64	; 0x40
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c12:	e20e      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006c14:	2380      	movs	r3, #128	; 0x80
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1a:	e20a      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a69      	ldr	r2, [pc, #420]	; (8006dc8 <UART_SetConfig+0x33c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d130      	bne.n	8006c88 <UART_SetConfig+0x1fc>
 8006c26:	4b67      	ldr	r3, [pc, #412]	; (8006dc4 <UART_SetConfig+0x338>)
 8006c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	2b05      	cmp	r3, #5
 8006c30:	d826      	bhi.n	8006c80 <UART_SetConfig+0x1f4>
 8006c32:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <UART_SetConfig+0x1ac>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c51 	.word	0x08006c51
 8006c3c:	08006c59 	.word	0x08006c59
 8006c40:	08006c61 	.word	0x08006c61
 8006c44:	08006c69 	.word	0x08006c69
 8006c48:	08006c71 	.word	0x08006c71
 8006c4c:	08006c79 	.word	0x08006c79
 8006c50:	2300      	movs	r3, #0
 8006c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c56:	e1ec      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006c58:	2304      	movs	r3, #4
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5e:	e1e8      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006c60:	2308      	movs	r3, #8
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c66:	e1e4      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006c68:	2310      	movs	r3, #16
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6e:	e1e0      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006c70:	2320      	movs	r3, #32
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c76:	e1dc      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006c78:	2340      	movs	r3, #64	; 0x40
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7e:	e1d8      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006c80:	2380      	movs	r3, #128	; 0x80
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c86:	e1d4      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a4f      	ldr	r2, [pc, #316]	; (8006dcc <UART_SetConfig+0x340>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d130      	bne.n	8006cf4 <UART_SetConfig+0x268>
 8006c92:	4b4c      	ldr	r3, [pc, #304]	; (8006dc4 <UART_SetConfig+0x338>)
 8006c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b05      	cmp	r3, #5
 8006c9c:	d826      	bhi.n	8006cec <UART_SetConfig+0x260>
 8006c9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ca4 <UART_SetConfig+0x218>)
 8006ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca4:	08006cbd 	.word	0x08006cbd
 8006ca8:	08006cc5 	.word	0x08006cc5
 8006cac:	08006ccd 	.word	0x08006ccd
 8006cb0:	08006cd5 	.word	0x08006cd5
 8006cb4:	08006cdd 	.word	0x08006cdd
 8006cb8:	08006ce5 	.word	0x08006ce5
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cc2:	e1b6      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cca:	e1b2      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006ccc:	2308      	movs	r3, #8
 8006cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cd2:	e1ae      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cda:	e1aa      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006cdc:	2320      	movs	r3, #32
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce2:	e1a6      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006ce4:	2340      	movs	r3, #64	; 0x40
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cea:	e1a2      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006cec:	2380      	movs	r3, #128	; 0x80
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf2:	e19e      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a35      	ldr	r2, [pc, #212]	; (8006dd0 <UART_SetConfig+0x344>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d130      	bne.n	8006d60 <UART_SetConfig+0x2d4>
 8006cfe:	4b31      	ldr	r3, [pc, #196]	; (8006dc4 <UART_SetConfig+0x338>)
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	2b05      	cmp	r3, #5
 8006d08:	d826      	bhi.n	8006d58 <UART_SetConfig+0x2cc>
 8006d0a:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <UART_SetConfig+0x284>)
 8006d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d10:	08006d29 	.word	0x08006d29
 8006d14:	08006d31 	.word	0x08006d31
 8006d18:	08006d39 	.word	0x08006d39
 8006d1c:	08006d41 	.word	0x08006d41
 8006d20:	08006d49 	.word	0x08006d49
 8006d24:	08006d51 	.word	0x08006d51
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d2e:	e180      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006d30:	2304      	movs	r3, #4
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d36:	e17c      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006d38:	2308      	movs	r3, #8
 8006d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d3e:	e178      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006d40:	2310      	movs	r3, #16
 8006d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d46:	e174      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006d48:	2320      	movs	r3, #32
 8006d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d4e:	e170      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006d50:	2340      	movs	r3, #64	; 0x40
 8006d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d56:	e16c      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006d58:	2380      	movs	r3, #128	; 0x80
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5e:	e168      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1b      	ldr	r2, [pc, #108]	; (8006dd4 <UART_SetConfig+0x348>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d142      	bne.n	8006df0 <UART_SetConfig+0x364>
 8006d6a:	4b16      	ldr	r3, [pc, #88]	; (8006dc4 <UART_SetConfig+0x338>)
 8006d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	2b05      	cmp	r3, #5
 8006d74:	d838      	bhi.n	8006de8 <UART_SetConfig+0x35c>
 8006d76:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <UART_SetConfig+0x2f0>)
 8006d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7c:	08006d95 	.word	0x08006d95
 8006d80:	08006d9d 	.word	0x08006d9d
 8006d84:	08006da5 	.word	0x08006da5
 8006d88:	08006dad 	.word	0x08006dad
 8006d8c:	08006dd9 	.word	0x08006dd9
 8006d90:	08006de1 	.word	0x08006de1
 8006d94:	2300      	movs	r3, #0
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d9a:	e14a      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006da2:	e146      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006da4:	2308      	movs	r3, #8
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006daa:	e142      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006dac:	2310      	movs	r3, #16
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db2:	e13e      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006db4:	cfff69f3 	.word	0xcfff69f3
 8006db8:	58000c00 	.word	0x58000c00
 8006dbc:	11fff4ff 	.word	0x11fff4ff
 8006dc0:	40011000 	.word	0x40011000
 8006dc4:	58024400 	.word	0x58024400
 8006dc8:	40004400 	.word	0x40004400
 8006dcc:	40004800 	.word	0x40004800
 8006dd0:	40004c00 	.word	0x40004c00
 8006dd4:	40005000 	.word	0x40005000
 8006dd8:	2320      	movs	r3, #32
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dde:	e128      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006de0:	2340      	movs	r3, #64	; 0x40
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de6:	e124      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006de8:	2380      	movs	r3, #128	; 0x80
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dee:	e120      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4acb      	ldr	r2, [pc, #812]	; (8007124 <UART_SetConfig+0x698>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d176      	bne.n	8006ee8 <UART_SetConfig+0x45c>
 8006dfa:	4bcb      	ldr	r3, [pc, #812]	; (8007128 <UART_SetConfig+0x69c>)
 8006dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e02:	2b28      	cmp	r3, #40	; 0x28
 8006e04:	d86c      	bhi.n	8006ee0 <UART_SetConfig+0x454>
 8006e06:	a201      	add	r2, pc, #4	; (adr r2, 8006e0c <UART_SetConfig+0x380>)
 8006e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0c:	08006eb1 	.word	0x08006eb1
 8006e10:	08006ee1 	.word	0x08006ee1
 8006e14:	08006ee1 	.word	0x08006ee1
 8006e18:	08006ee1 	.word	0x08006ee1
 8006e1c:	08006ee1 	.word	0x08006ee1
 8006e20:	08006ee1 	.word	0x08006ee1
 8006e24:	08006ee1 	.word	0x08006ee1
 8006e28:	08006ee1 	.word	0x08006ee1
 8006e2c:	08006eb9 	.word	0x08006eb9
 8006e30:	08006ee1 	.word	0x08006ee1
 8006e34:	08006ee1 	.word	0x08006ee1
 8006e38:	08006ee1 	.word	0x08006ee1
 8006e3c:	08006ee1 	.word	0x08006ee1
 8006e40:	08006ee1 	.word	0x08006ee1
 8006e44:	08006ee1 	.word	0x08006ee1
 8006e48:	08006ee1 	.word	0x08006ee1
 8006e4c:	08006ec1 	.word	0x08006ec1
 8006e50:	08006ee1 	.word	0x08006ee1
 8006e54:	08006ee1 	.word	0x08006ee1
 8006e58:	08006ee1 	.word	0x08006ee1
 8006e5c:	08006ee1 	.word	0x08006ee1
 8006e60:	08006ee1 	.word	0x08006ee1
 8006e64:	08006ee1 	.word	0x08006ee1
 8006e68:	08006ee1 	.word	0x08006ee1
 8006e6c:	08006ec9 	.word	0x08006ec9
 8006e70:	08006ee1 	.word	0x08006ee1
 8006e74:	08006ee1 	.word	0x08006ee1
 8006e78:	08006ee1 	.word	0x08006ee1
 8006e7c:	08006ee1 	.word	0x08006ee1
 8006e80:	08006ee1 	.word	0x08006ee1
 8006e84:	08006ee1 	.word	0x08006ee1
 8006e88:	08006ee1 	.word	0x08006ee1
 8006e8c:	08006ed1 	.word	0x08006ed1
 8006e90:	08006ee1 	.word	0x08006ee1
 8006e94:	08006ee1 	.word	0x08006ee1
 8006e98:	08006ee1 	.word	0x08006ee1
 8006e9c:	08006ee1 	.word	0x08006ee1
 8006ea0:	08006ee1 	.word	0x08006ee1
 8006ea4:	08006ee1 	.word	0x08006ee1
 8006ea8:	08006ee1 	.word	0x08006ee1
 8006eac:	08006ed9 	.word	0x08006ed9
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb6:	e0bc      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006eb8:	2304      	movs	r3, #4
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ebe:	e0b8      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006ec0:	2308      	movs	r3, #8
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec6:	e0b4      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006ec8:	2310      	movs	r3, #16
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ece:	e0b0      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006ed0:	2320      	movs	r3, #32
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed6:	e0ac      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006ed8:	2340      	movs	r3, #64	; 0x40
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ede:	e0a8      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006ee0:	2380      	movs	r3, #128	; 0x80
 8006ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ee6:	e0a4      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a8f      	ldr	r2, [pc, #572]	; (800712c <UART_SetConfig+0x6a0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d130      	bne.n	8006f54 <UART_SetConfig+0x4c8>
 8006ef2:	4b8d      	ldr	r3, [pc, #564]	; (8007128 <UART_SetConfig+0x69c>)
 8006ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	2b05      	cmp	r3, #5
 8006efc:	d826      	bhi.n	8006f4c <UART_SetConfig+0x4c0>
 8006efe:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <UART_SetConfig+0x478>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f1d 	.word	0x08006f1d
 8006f08:	08006f25 	.word	0x08006f25
 8006f0c:	08006f2d 	.word	0x08006f2d
 8006f10:	08006f35 	.word	0x08006f35
 8006f14:	08006f3d 	.word	0x08006f3d
 8006f18:	08006f45 	.word	0x08006f45
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f22:	e086      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006f24:	2304      	movs	r3, #4
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f2a:	e082      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006f2c:	2308      	movs	r3, #8
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e07e      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006f34:	2310      	movs	r3, #16
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e07a      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006f3c:	2320      	movs	r3, #32
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e076      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006f44:	2340      	movs	r3, #64	; 0x40
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e072      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006f4c:	2380      	movs	r3, #128	; 0x80
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f52:	e06e      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a75      	ldr	r2, [pc, #468]	; (8007130 <UART_SetConfig+0x6a4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d130      	bne.n	8006fc0 <UART_SetConfig+0x534>
 8006f5e:	4b72      	ldr	r3, [pc, #456]	; (8007128 <UART_SetConfig+0x69c>)
 8006f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	2b05      	cmp	r3, #5
 8006f68:	d826      	bhi.n	8006fb8 <UART_SetConfig+0x52c>
 8006f6a:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <UART_SetConfig+0x4e4>)
 8006f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f70:	08006f89 	.word	0x08006f89
 8006f74:	08006f91 	.word	0x08006f91
 8006f78:	08006f99 	.word	0x08006f99
 8006f7c:	08006fa1 	.word	0x08006fa1
 8006f80:	08006fa9 	.word	0x08006fa9
 8006f84:	08006fb1 	.word	0x08006fb1
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8e:	e050      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006f90:	2304      	movs	r3, #4
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f96:	e04c      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006f98:	2308      	movs	r3, #8
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9e:	e048      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006fa0:	2310      	movs	r3, #16
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa6:	e044      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006fa8:	2320      	movs	r3, #32
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fae:	e040      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006fb0:	2340      	movs	r3, #64	; 0x40
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb6:	e03c      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006fb8:	2380      	movs	r3, #128	; 0x80
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fbe:	e038      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a5b      	ldr	r2, [pc, #364]	; (8007134 <UART_SetConfig+0x6a8>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d130      	bne.n	800702c <UART_SetConfig+0x5a0>
 8006fca:	4b57      	ldr	r3, [pc, #348]	; (8007128 <UART_SetConfig+0x69c>)
 8006fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	2b05      	cmp	r3, #5
 8006fd4:	d826      	bhi.n	8007024 <UART_SetConfig+0x598>
 8006fd6:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <UART_SetConfig+0x550>)
 8006fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fdc:	08006ff5 	.word	0x08006ff5
 8006fe0:	08006ffd 	.word	0x08006ffd
 8006fe4:	08007005 	.word	0x08007005
 8006fe8:	0800700d 	.word	0x0800700d
 8006fec:	08007015 	.word	0x08007015
 8006ff0:	0800701d 	.word	0x0800701d
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffa:	e01a      	b.n	8007032 <UART_SetConfig+0x5a6>
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007002:	e016      	b.n	8007032 <UART_SetConfig+0x5a6>
 8007004:	2308      	movs	r3, #8
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700a:	e012      	b.n	8007032 <UART_SetConfig+0x5a6>
 800700c:	2310      	movs	r3, #16
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007012:	e00e      	b.n	8007032 <UART_SetConfig+0x5a6>
 8007014:	2320      	movs	r3, #32
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701a:	e00a      	b.n	8007032 <UART_SetConfig+0x5a6>
 800701c:	2340      	movs	r3, #64	; 0x40
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007022:	e006      	b.n	8007032 <UART_SetConfig+0x5a6>
 8007024:	2380      	movs	r3, #128	; 0x80
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702a:	e002      	b.n	8007032 <UART_SetConfig+0x5a6>
 800702c:	2380      	movs	r3, #128	; 0x80
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a3f      	ldr	r2, [pc, #252]	; (8007134 <UART_SetConfig+0x6a8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	f040 80f8 	bne.w	800722e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800703e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007042:	2b20      	cmp	r3, #32
 8007044:	dc46      	bgt.n	80070d4 <UART_SetConfig+0x648>
 8007046:	2b02      	cmp	r3, #2
 8007048:	f2c0 8082 	blt.w	8007150 <UART_SetConfig+0x6c4>
 800704c:	3b02      	subs	r3, #2
 800704e:	2b1e      	cmp	r3, #30
 8007050:	d87e      	bhi.n	8007150 <UART_SetConfig+0x6c4>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0x5cc>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	080070db 	.word	0x080070db
 800705c:	08007151 	.word	0x08007151
 8007060:	080070e3 	.word	0x080070e3
 8007064:	08007151 	.word	0x08007151
 8007068:	08007151 	.word	0x08007151
 800706c:	08007151 	.word	0x08007151
 8007070:	080070f3 	.word	0x080070f3
 8007074:	08007151 	.word	0x08007151
 8007078:	08007151 	.word	0x08007151
 800707c:	08007151 	.word	0x08007151
 8007080:	08007151 	.word	0x08007151
 8007084:	08007151 	.word	0x08007151
 8007088:	08007151 	.word	0x08007151
 800708c:	08007151 	.word	0x08007151
 8007090:	08007103 	.word	0x08007103
 8007094:	08007151 	.word	0x08007151
 8007098:	08007151 	.word	0x08007151
 800709c:	08007151 	.word	0x08007151
 80070a0:	08007151 	.word	0x08007151
 80070a4:	08007151 	.word	0x08007151
 80070a8:	08007151 	.word	0x08007151
 80070ac:	08007151 	.word	0x08007151
 80070b0:	08007151 	.word	0x08007151
 80070b4:	08007151 	.word	0x08007151
 80070b8:	08007151 	.word	0x08007151
 80070bc:	08007151 	.word	0x08007151
 80070c0:	08007151 	.word	0x08007151
 80070c4:	08007151 	.word	0x08007151
 80070c8:	08007151 	.word	0x08007151
 80070cc:	08007151 	.word	0x08007151
 80070d0:	08007143 	.word	0x08007143
 80070d4:	2b40      	cmp	r3, #64	; 0x40
 80070d6:	d037      	beq.n	8007148 <UART_SetConfig+0x6bc>
 80070d8:	e03a      	b.n	8007150 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80070da:	f7fe fa3d 	bl	8005558 <HAL_RCCEx_GetD3PCLK1Freq>
 80070de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070e0:	e03c      	b.n	800715c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fa4c 	bl	8005584 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070f0:	e034      	b.n	800715c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070f2:	f107 0318 	add.w	r3, r7, #24
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe fb98 	bl	800582c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007100:	e02c      	b.n	800715c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <UART_SetConfig+0x69c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b00      	cmp	r3, #0
 800710c:	d016      	beq.n	800713c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800710e:	4b06      	ldr	r3, [pc, #24]	; (8007128 <UART_SetConfig+0x69c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	08db      	lsrs	r3, r3, #3
 8007114:	f003 0303 	and.w	r3, r3, #3
 8007118:	4a07      	ldr	r2, [pc, #28]	; (8007138 <UART_SetConfig+0x6ac>)
 800711a:	fa22 f303 	lsr.w	r3, r2, r3
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007120:	e01c      	b.n	800715c <UART_SetConfig+0x6d0>
 8007122:	bf00      	nop
 8007124:	40011400 	.word	0x40011400
 8007128:	58024400 	.word	0x58024400
 800712c:	40007800 	.word	0x40007800
 8007130:	40007c00 	.word	0x40007c00
 8007134:	58000c00 	.word	0x58000c00
 8007138:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800713c:	4b9d      	ldr	r3, [pc, #628]	; (80073b4 <UART_SetConfig+0x928>)
 800713e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007140:	e00c      	b.n	800715c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007142:	4b9d      	ldr	r3, [pc, #628]	; (80073b8 <UART_SetConfig+0x92c>)
 8007144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007146:	e009      	b.n	800715c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007148:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800714e:	e005      	b.n	800715c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800715a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800715c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 81de 	beq.w	8007520 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	4a94      	ldr	r2, [pc, #592]	; (80073bc <UART_SetConfig+0x930>)
 800716a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800716e:	461a      	mov	r2, r3
 8007170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007172:	fbb3 f3f2 	udiv	r3, r3, r2
 8007176:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	4613      	mov	r3, r2
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	4413      	add	r3, r2
 8007182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007184:	429a      	cmp	r2, r3
 8007186:	d305      	bcc.n	8007194 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800718e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007190:	429a      	cmp	r2, r3
 8007192:	d903      	bls.n	800719c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800719a:	e1c1      	b.n	8007520 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800719c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800719e:	2200      	movs	r2, #0
 80071a0:	60bb      	str	r3, [r7, #8]
 80071a2:	60fa      	str	r2, [r7, #12]
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	4a84      	ldr	r2, [pc, #528]	; (80073bc <UART_SetConfig+0x930>)
 80071aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2200      	movs	r2, #0
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	607a      	str	r2, [r7, #4]
 80071b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071be:	f7f9 f8e7 	bl	8000390 <__aeabi_uldivmod>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4610      	mov	r0, r2
 80071c8:	4619      	mov	r1, r3
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	f04f 0300 	mov.w	r3, #0
 80071d2:	020b      	lsls	r3, r1, #8
 80071d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80071d8:	0202      	lsls	r2, r0, #8
 80071da:	6979      	ldr	r1, [r7, #20]
 80071dc:	6849      	ldr	r1, [r1, #4]
 80071de:	0849      	lsrs	r1, r1, #1
 80071e0:	2000      	movs	r0, #0
 80071e2:	460c      	mov	r4, r1
 80071e4:	4605      	mov	r5, r0
 80071e6:	eb12 0804 	adds.w	r8, r2, r4
 80071ea:	eb43 0905 	adc.w	r9, r3, r5
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	469a      	mov	sl, r3
 80071f6:	4693      	mov	fp, r2
 80071f8:	4652      	mov	r2, sl
 80071fa:	465b      	mov	r3, fp
 80071fc:	4640      	mov	r0, r8
 80071fe:	4649      	mov	r1, r9
 8007200:	f7f9 f8c6 	bl	8000390 <__aeabi_uldivmod>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4613      	mov	r3, r2
 800720a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007212:	d308      	bcc.n	8007226 <UART_SetConfig+0x79a>
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800721a:	d204      	bcs.n	8007226 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007222:	60da      	str	r2, [r3, #12]
 8007224:	e17c      	b.n	8007520 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800722c:	e178      	b.n	8007520 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007236:	f040 80c5 	bne.w	80073c4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800723a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800723e:	2b20      	cmp	r3, #32
 8007240:	dc48      	bgt.n	80072d4 <UART_SetConfig+0x848>
 8007242:	2b00      	cmp	r3, #0
 8007244:	db7b      	blt.n	800733e <UART_SetConfig+0x8b2>
 8007246:	2b20      	cmp	r3, #32
 8007248:	d879      	bhi.n	800733e <UART_SetConfig+0x8b2>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <UART_SetConfig+0x7c4>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	080072db 	.word	0x080072db
 8007254:	080072e3 	.word	0x080072e3
 8007258:	0800733f 	.word	0x0800733f
 800725c:	0800733f 	.word	0x0800733f
 8007260:	080072eb 	.word	0x080072eb
 8007264:	0800733f 	.word	0x0800733f
 8007268:	0800733f 	.word	0x0800733f
 800726c:	0800733f 	.word	0x0800733f
 8007270:	080072fb 	.word	0x080072fb
 8007274:	0800733f 	.word	0x0800733f
 8007278:	0800733f 	.word	0x0800733f
 800727c:	0800733f 	.word	0x0800733f
 8007280:	0800733f 	.word	0x0800733f
 8007284:	0800733f 	.word	0x0800733f
 8007288:	0800733f 	.word	0x0800733f
 800728c:	0800733f 	.word	0x0800733f
 8007290:	0800730b 	.word	0x0800730b
 8007294:	0800733f 	.word	0x0800733f
 8007298:	0800733f 	.word	0x0800733f
 800729c:	0800733f 	.word	0x0800733f
 80072a0:	0800733f 	.word	0x0800733f
 80072a4:	0800733f 	.word	0x0800733f
 80072a8:	0800733f 	.word	0x0800733f
 80072ac:	0800733f 	.word	0x0800733f
 80072b0:	0800733f 	.word	0x0800733f
 80072b4:	0800733f 	.word	0x0800733f
 80072b8:	0800733f 	.word	0x0800733f
 80072bc:	0800733f 	.word	0x0800733f
 80072c0:	0800733f 	.word	0x0800733f
 80072c4:	0800733f 	.word	0x0800733f
 80072c8:	0800733f 	.word	0x0800733f
 80072cc:	0800733f 	.word	0x0800733f
 80072d0:	08007331 	.word	0x08007331
 80072d4:	2b40      	cmp	r3, #64	; 0x40
 80072d6:	d02e      	beq.n	8007336 <UART_SetConfig+0x8aa>
 80072d8:	e031      	b.n	800733e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072da:	f7fd f9cb 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 80072de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80072e0:	e033      	b.n	800734a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072e2:	f7fd f9dd 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 80072e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80072e8:	e02f      	b.n	800734a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fe f948 	bl	8005584 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072f8:	e027      	b.n	800734a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072fa:	f107 0318 	add.w	r3, r7, #24
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fa94 	bl	800582c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007308:	e01f      	b.n	800734a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800730a:	4b2d      	ldr	r3, [pc, #180]	; (80073c0 <UART_SetConfig+0x934>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0320 	and.w	r3, r3, #32
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007316:	4b2a      	ldr	r3, [pc, #168]	; (80073c0 <UART_SetConfig+0x934>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	08db      	lsrs	r3, r3, #3
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	4a24      	ldr	r2, [pc, #144]	; (80073b4 <UART_SetConfig+0x928>)
 8007322:	fa22 f303 	lsr.w	r3, r2, r3
 8007326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007328:	e00f      	b.n	800734a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800732a:	4b22      	ldr	r3, [pc, #136]	; (80073b4 <UART_SetConfig+0x928>)
 800732c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800732e:	e00c      	b.n	800734a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007330:	4b21      	ldr	r3, [pc, #132]	; (80073b8 <UART_SetConfig+0x92c>)
 8007332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007334:	e009      	b.n	800734a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800733a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800733c:	e005      	b.n	800734a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007348:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800734a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 80e7 	beq.w	8007520 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	4a19      	ldr	r2, [pc, #100]	; (80073bc <UART_SetConfig+0x930>)
 8007358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800735c:	461a      	mov	r2, r3
 800735e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007360:	fbb3 f3f2 	udiv	r3, r3, r2
 8007364:	005a      	lsls	r2, r3, #1
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	085b      	lsrs	r3, r3, #1
 800736c:	441a      	add	r2, r3
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	fbb2 f3f3 	udiv	r3, r2, r3
 8007376:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737a:	2b0f      	cmp	r3, #15
 800737c:	d916      	bls.n	80073ac <UART_SetConfig+0x920>
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007384:	d212      	bcs.n	80073ac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	b29b      	uxth	r3, r3
 800738a:	f023 030f 	bic.w	r3, r3, #15
 800738e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	085b      	lsrs	r3, r3, #1
 8007394:	b29b      	uxth	r3, r3
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	b29a      	uxth	r2, r3
 800739c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800739e:	4313      	orrs	r3, r2
 80073a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80073a8:	60da      	str	r2, [r3, #12]
 80073aa:	e0b9      	b.n	8007520 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80073b2:	e0b5      	b.n	8007520 <UART_SetConfig+0xa94>
 80073b4:	03d09000 	.word	0x03d09000
 80073b8:	003d0900 	.word	0x003d0900
 80073bc:	0800a960 	.word	0x0800a960
 80073c0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80073c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	dc49      	bgt.n	8007460 <UART_SetConfig+0x9d4>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	db7c      	blt.n	80074ca <UART_SetConfig+0xa3e>
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	d87a      	bhi.n	80074ca <UART_SetConfig+0xa3e>
 80073d4:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <UART_SetConfig+0x950>)
 80073d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073da:	bf00      	nop
 80073dc:	08007467 	.word	0x08007467
 80073e0:	0800746f 	.word	0x0800746f
 80073e4:	080074cb 	.word	0x080074cb
 80073e8:	080074cb 	.word	0x080074cb
 80073ec:	08007477 	.word	0x08007477
 80073f0:	080074cb 	.word	0x080074cb
 80073f4:	080074cb 	.word	0x080074cb
 80073f8:	080074cb 	.word	0x080074cb
 80073fc:	08007487 	.word	0x08007487
 8007400:	080074cb 	.word	0x080074cb
 8007404:	080074cb 	.word	0x080074cb
 8007408:	080074cb 	.word	0x080074cb
 800740c:	080074cb 	.word	0x080074cb
 8007410:	080074cb 	.word	0x080074cb
 8007414:	080074cb 	.word	0x080074cb
 8007418:	080074cb 	.word	0x080074cb
 800741c:	08007497 	.word	0x08007497
 8007420:	080074cb 	.word	0x080074cb
 8007424:	080074cb 	.word	0x080074cb
 8007428:	080074cb 	.word	0x080074cb
 800742c:	080074cb 	.word	0x080074cb
 8007430:	080074cb 	.word	0x080074cb
 8007434:	080074cb 	.word	0x080074cb
 8007438:	080074cb 	.word	0x080074cb
 800743c:	080074cb 	.word	0x080074cb
 8007440:	080074cb 	.word	0x080074cb
 8007444:	080074cb 	.word	0x080074cb
 8007448:	080074cb 	.word	0x080074cb
 800744c:	080074cb 	.word	0x080074cb
 8007450:	080074cb 	.word	0x080074cb
 8007454:	080074cb 	.word	0x080074cb
 8007458:	080074cb 	.word	0x080074cb
 800745c:	080074bd 	.word	0x080074bd
 8007460:	2b40      	cmp	r3, #64	; 0x40
 8007462:	d02e      	beq.n	80074c2 <UART_SetConfig+0xa36>
 8007464:	e031      	b.n	80074ca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007466:	f7fd f905 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 800746a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800746c:	e033      	b.n	80074d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800746e:	f7fd f917 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 8007472:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007474:	e02f      	b.n	80074d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe f882 	bl	8005584 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007484:	e027      	b.n	80074d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007486:	f107 0318 	add.w	r3, r7, #24
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe f9ce 	bl	800582c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007494:	e01f      	b.n	80074d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007496:	4b2d      	ldr	r3, [pc, #180]	; (800754c <UART_SetConfig+0xac0>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d009      	beq.n	80074b6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074a2:	4b2a      	ldr	r3, [pc, #168]	; (800754c <UART_SetConfig+0xac0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	08db      	lsrs	r3, r3, #3
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	4a28      	ldr	r2, [pc, #160]	; (8007550 <UART_SetConfig+0xac4>)
 80074ae:	fa22 f303 	lsr.w	r3, r2, r3
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074b4:	e00f      	b.n	80074d6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80074b6:	4b26      	ldr	r3, [pc, #152]	; (8007550 <UART_SetConfig+0xac4>)
 80074b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074ba:	e00c      	b.n	80074d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074bc:	4b25      	ldr	r3, [pc, #148]	; (8007554 <UART_SetConfig+0xac8>)
 80074be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074c0:	e009      	b.n	80074d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074c8:	e005      	b.n	80074d6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80074d4:	bf00      	nop
    }

    if (pclk != 0U)
 80074d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d021      	beq.n	8007520 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	4a1d      	ldr	r2, [pc, #116]	; (8007558 <UART_SetConfig+0xacc>)
 80074e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074e6:	461a      	mov	r2, r3
 80074e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	085b      	lsrs	r3, r3, #1
 80074f4:	441a      	add	r2, r3
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007502:	2b0f      	cmp	r3, #15
 8007504:	d909      	bls.n	800751a <UART_SetConfig+0xa8e>
 8007506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800750c:	d205      	bcs.n	800751a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007510:	b29a      	uxth	r2, r3
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60da      	str	r2, [r3, #12]
 8007518:	e002      	b.n	8007520 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2201      	movs	r2, #1
 8007524:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2201      	movs	r2, #1
 800752c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2200      	movs	r2, #0
 8007534:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2200      	movs	r2, #0
 800753a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800753c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007540:	4618      	mov	r0, r3
 8007542:	3748      	adds	r7, #72	; 0x48
 8007544:	46bd      	mov	sp, r7
 8007546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800754a:	bf00      	nop
 800754c:	58024400 	.word	0x58024400
 8007550:	03d09000 	.word	0x03d09000
 8007554:	003d0900 	.word	0x003d0900
 8007558:	0800a960 	.word	0x0800a960

0800755c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00a      	beq.n	80075ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	f003 0308 	and.w	r3, r3, #8
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	f003 0310 	and.w	r3, r3, #16
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01a      	beq.n	8007672 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800765a:	d10a      	bne.n	8007672 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	605a      	str	r2, [r3, #4]
  }
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af02      	add	r7, sp, #8
 80076a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076b0:	f7fa fca2 	bl	8001ff8 <HAL_GetTick>
 80076b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0308 	and.w	r3, r3, #8
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d10e      	bne.n	80076e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f82f 	bl	8007736 <UART_WaitOnFlagUntilTimeout>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e025      	b.n	800772e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d10e      	bne.n	800770e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f819 	bl	8007736 <UART_WaitOnFlagUntilTimeout>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e00f      	b.n	800772e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b09c      	sub	sp, #112	; 0x70
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	603b      	str	r3, [r7, #0]
 8007742:	4613      	mov	r3, r2
 8007744:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007746:	e0a9      	b.n	800789c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774e:	f000 80a5 	beq.w	800789c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007752:	f7fa fc51 	bl	8001ff8 <HAL_GetTick>
 8007756:	4602      	mov	r2, r0
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800775e:	429a      	cmp	r2, r3
 8007760:	d302      	bcc.n	8007768 <UART_WaitOnFlagUntilTimeout+0x32>
 8007762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007764:	2b00      	cmp	r3, #0
 8007766:	d140      	bne.n	80077ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007778:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800777c:	667b      	str	r3, [r7, #100]	; 0x64
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007786:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007788:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800778c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e6      	bne.n	8007768 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	f023 0301 	bic.w	r3, r3, #1
 80077b0:	663b      	str	r3, [r7, #96]	; 0x60
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3308      	adds	r3, #8
 80077b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80077bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e5      	bne.n	800779a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2220      	movs	r2, #32
 80077da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e069      	b.n	80078be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0304 	and.w	r3, r3, #4
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d051      	beq.n	800789c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007806:	d149      	bne.n	800789c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007810:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	e853 3f00 	ldrex	r3, [r3]
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007826:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007830:	637b      	str	r3, [r7, #52]	; 0x34
 8007832:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007838:	e841 2300 	strex	r3, r2, [r1]
 800783c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800783e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1e6      	bne.n	8007812 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3308      	adds	r3, #8
 800784a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	613b      	str	r3, [r7, #16]
   return(result);
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	f023 0301 	bic.w	r3, r3, #1
 800785a:	66bb      	str	r3, [r7, #104]	; 0x68
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3308      	adds	r3, #8
 8007862:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007864:	623a      	str	r2, [r7, #32]
 8007866:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	69f9      	ldr	r1, [r7, #28]
 800786a:	6a3a      	ldr	r2, [r7, #32]
 800786c:	e841 2300 	strex	r3, r2, [r1]
 8007870:	61bb      	str	r3, [r7, #24]
   return(result);
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e5      	bne.n	8007844 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2220      	movs	r2, #32
 8007884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2220      	movs	r2, #32
 800788c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e010      	b.n	80078be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	69da      	ldr	r2, [r3, #28]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	4013      	ands	r3, r2
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	bf0c      	ite	eq
 80078ac:	2301      	moveq	r3, #1
 80078ae:	2300      	movne	r3, #0
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	461a      	mov	r2, r3
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	f43f af46 	beq.w	8007748 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3770      	adds	r7, #112	; 0x70
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b085      	sub	sp, #20
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d101      	bne.n	80078dc <HAL_UARTEx_DisableFifoMode+0x16>
 80078d8:	2302      	movs	r3, #2
 80078da:	e027      	b.n	800792c <HAL_UARTEx_DisableFifoMode+0x66>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2224      	movs	r2, #36	; 0x24
 80078e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0201 	bic.w	r2, r2, #1
 8007902:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800790a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2220      	movs	r2, #32
 800791e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007948:	2b01      	cmp	r3, #1
 800794a:	d101      	bne.n	8007950 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800794c:	2302      	movs	r3, #2
 800794e:	e02d      	b.n	80079ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2224      	movs	r2, #36	; 0x24
 800795c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0201 	bic.w	r2, r2, #1
 8007976:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f84f 	bl	8007a30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e02d      	b.n	8007a28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2224      	movs	r2, #36	; 0x24
 80079d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0201 	bic.w	r2, r2, #1
 80079f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f811 	bl	8007a30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d108      	bne.n	8007a52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a50:	e031      	b.n	8007ab6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a52:	2310      	movs	r3, #16
 8007a54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a56:	2310      	movs	r3, #16
 8007a58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	0e5b      	lsrs	r3, r3, #25
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	f003 0307 	and.w	r3, r3, #7
 8007a68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	0f5b      	lsrs	r3, r3, #29
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f003 0307 	and.w	r3, r3, #7
 8007a78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	7b3a      	ldrb	r2, [r7, #12]
 8007a7e:	4911      	ldr	r1, [pc, #68]	; (8007ac4 <UARTEx_SetNbDataToProcess+0x94>)
 8007a80:	5c8a      	ldrb	r2, [r1, r2]
 8007a82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a86:	7b3a      	ldrb	r2, [r7, #12]
 8007a88:	490f      	ldr	r1, [pc, #60]	; (8007ac8 <UARTEx_SetNbDataToProcess+0x98>)
 8007a8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	7b7a      	ldrb	r2, [r7, #13]
 8007a9c:	4909      	ldr	r1, [pc, #36]	; (8007ac4 <UARTEx_SetNbDataToProcess+0x94>)
 8007a9e:	5c8a      	ldrb	r2, [r1, r2]
 8007aa0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007aa4:	7b7a      	ldrb	r2, [r7, #13]
 8007aa6:	4908      	ldr	r1, [pc, #32]	; (8007ac8 <UARTEx_SetNbDataToProcess+0x98>)
 8007aa8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	0800a978 	.word	0x0800a978
 8007ac8:	0800a980 	.word	0x0800a980

08007acc <__errno>:
 8007acc:	4b01      	ldr	r3, [pc, #4]	; (8007ad4 <__errno+0x8>)
 8007ace:	6818      	ldr	r0, [r3, #0]
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	24000010 	.word	0x24000010

08007ad8 <__libc_init_array>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	4d0d      	ldr	r5, [pc, #52]	; (8007b10 <__libc_init_array+0x38>)
 8007adc:	4c0d      	ldr	r4, [pc, #52]	; (8007b14 <__libc_init_array+0x3c>)
 8007ade:	1b64      	subs	r4, r4, r5
 8007ae0:	10a4      	asrs	r4, r4, #2
 8007ae2:	2600      	movs	r6, #0
 8007ae4:	42a6      	cmp	r6, r4
 8007ae6:	d109      	bne.n	8007afc <__libc_init_array+0x24>
 8007ae8:	4d0b      	ldr	r5, [pc, #44]	; (8007b18 <__libc_init_array+0x40>)
 8007aea:	4c0c      	ldr	r4, [pc, #48]	; (8007b1c <__libc_init_array+0x44>)
 8007aec:	f002 fe5c 	bl	800a7a8 <_init>
 8007af0:	1b64      	subs	r4, r4, r5
 8007af2:	10a4      	asrs	r4, r4, #2
 8007af4:	2600      	movs	r6, #0
 8007af6:	42a6      	cmp	r6, r4
 8007af8:	d105      	bne.n	8007b06 <__libc_init_array+0x2e>
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
 8007afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b00:	4798      	blx	r3
 8007b02:	3601      	adds	r6, #1
 8007b04:	e7ee      	b.n	8007ae4 <__libc_init_array+0xc>
 8007b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0a:	4798      	blx	r3
 8007b0c:	3601      	adds	r6, #1
 8007b0e:	e7f2      	b.n	8007af6 <__libc_init_array+0x1e>
 8007b10:	0800ad6c 	.word	0x0800ad6c
 8007b14:	0800ad6c 	.word	0x0800ad6c
 8007b18:	0800ad6c 	.word	0x0800ad6c
 8007b1c:	0800ad70 	.word	0x0800ad70

08007b20 <memset>:
 8007b20:	4402      	add	r2, r0
 8007b22:	4603      	mov	r3, r0
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d100      	bne.n	8007b2a <memset+0xa>
 8007b28:	4770      	bx	lr
 8007b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b2e:	e7f9      	b.n	8007b24 <memset+0x4>

08007b30 <__cvt>:
 8007b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b32:	ed2d 8b02 	vpush	{d8}
 8007b36:	eeb0 8b40 	vmov.f64	d8, d0
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	4617      	mov	r7, r2
 8007b3e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007b40:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b42:	ee18 2a90 	vmov	r2, s17
 8007b46:	f025 0520 	bic.w	r5, r5, #32
 8007b4a:	2a00      	cmp	r2, #0
 8007b4c:	bfb6      	itet	lt
 8007b4e:	222d      	movlt	r2, #45	; 0x2d
 8007b50:	2200      	movge	r2, #0
 8007b52:	eeb1 8b40 	vneglt.f64	d8, d0
 8007b56:	2d46      	cmp	r5, #70	; 0x46
 8007b58:	460c      	mov	r4, r1
 8007b5a:	701a      	strb	r2, [r3, #0]
 8007b5c:	d004      	beq.n	8007b68 <__cvt+0x38>
 8007b5e:	2d45      	cmp	r5, #69	; 0x45
 8007b60:	d100      	bne.n	8007b64 <__cvt+0x34>
 8007b62:	3401      	adds	r4, #1
 8007b64:	2102      	movs	r1, #2
 8007b66:	e000      	b.n	8007b6a <__cvt+0x3a>
 8007b68:	2103      	movs	r1, #3
 8007b6a:	ab03      	add	r3, sp, #12
 8007b6c:	9301      	str	r3, [sp, #4]
 8007b6e:	ab02      	add	r3, sp, #8
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	4622      	mov	r2, r4
 8007b74:	4633      	mov	r3, r6
 8007b76:	eeb0 0b48 	vmov.f64	d0, d8
 8007b7a:	f000 fcc9 	bl	8008510 <_dtoa_r>
 8007b7e:	2d47      	cmp	r5, #71	; 0x47
 8007b80:	d101      	bne.n	8007b86 <__cvt+0x56>
 8007b82:	07fb      	lsls	r3, r7, #31
 8007b84:	d51a      	bpl.n	8007bbc <__cvt+0x8c>
 8007b86:	2d46      	cmp	r5, #70	; 0x46
 8007b88:	eb00 0204 	add.w	r2, r0, r4
 8007b8c:	d10c      	bne.n	8007ba8 <__cvt+0x78>
 8007b8e:	7803      	ldrb	r3, [r0, #0]
 8007b90:	2b30      	cmp	r3, #48	; 0x30
 8007b92:	d107      	bne.n	8007ba4 <__cvt+0x74>
 8007b94:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b9c:	bf1c      	itt	ne
 8007b9e:	f1c4 0401 	rsbne	r4, r4, #1
 8007ba2:	6034      	strne	r4, [r6, #0]
 8007ba4:	6833      	ldr	r3, [r6, #0]
 8007ba6:	441a      	add	r2, r3
 8007ba8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb0:	bf08      	it	eq
 8007bb2:	9203      	streq	r2, [sp, #12]
 8007bb4:	2130      	movs	r1, #48	; 0x30
 8007bb6:	9b03      	ldr	r3, [sp, #12]
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d307      	bcc.n	8007bcc <__cvt+0x9c>
 8007bbc:	9b03      	ldr	r3, [sp, #12]
 8007bbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bc0:	1a1b      	subs	r3, r3, r0
 8007bc2:	6013      	str	r3, [r2, #0]
 8007bc4:	b005      	add	sp, #20
 8007bc6:	ecbd 8b02 	vpop	{d8}
 8007bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bcc:	1c5c      	adds	r4, r3, #1
 8007bce:	9403      	str	r4, [sp, #12]
 8007bd0:	7019      	strb	r1, [r3, #0]
 8007bd2:	e7f0      	b.n	8007bb6 <__cvt+0x86>

08007bd4 <__exponent>:
 8007bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	bfb8      	it	lt
 8007bdc:	4249      	neglt	r1, r1
 8007bde:	f803 2b02 	strb.w	r2, [r3], #2
 8007be2:	bfb4      	ite	lt
 8007be4:	222d      	movlt	r2, #45	; 0x2d
 8007be6:	222b      	movge	r2, #43	; 0x2b
 8007be8:	2909      	cmp	r1, #9
 8007bea:	7042      	strb	r2, [r0, #1]
 8007bec:	dd2a      	ble.n	8007c44 <__exponent+0x70>
 8007bee:	f10d 0407 	add.w	r4, sp, #7
 8007bf2:	46a4      	mov	ip, r4
 8007bf4:	270a      	movs	r7, #10
 8007bf6:	46a6      	mov	lr, r4
 8007bf8:	460a      	mov	r2, r1
 8007bfa:	fb91 f6f7 	sdiv	r6, r1, r7
 8007bfe:	fb07 1516 	mls	r5, r7, r6, r1
 8007c02:	3530      	adds	r5, #48	; 0x30
 8007c04:	2a63      	cmp	r2, #99	; 0x63
 8007c06:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c0e:	4631      	mov	r1, r6
 8007c10:	dcf1      	bgt.n	8007bf6 <__exponent+0x22>
 8007c12:	3130      	adds	r1, #48	; 0x30
 8007c14:	f1ae 0502 	sub.w	r5, lr, #2
 8007c18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c1c:	1c44      	adds	r4, r0, #1
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4561      	cmp	r1, ip
 8007c22:	d30a      	bcc.n	8007c3a <__exponent+0x66>
 8007c24:	f10d 0209 	add.w	r2, sp, #9
 8007c28:	eba2 020e 	sub.w	r2, r2, lr
 8007c2c:	4565      	cmp	r5, ip
 8007c2e:	bf88      	it	hi
 8007c30:	2200      	movhi	r2, #0
 8007c32:	4413      	add	r3, r2
 8007c34:	1a18      	subs	r0, r3, r0
 8007c36:	b003      	add	sp, #12
 8007c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c42:	e7ed      	b.n	8007c20 <__exponent+0x4c>
 8007c44:	2330      	movs	r3, #48	; 0x30
 8007c46:	3130      	adds	r1, #48	; 0x30
 8007c48:	7083      	strb	r3, [r0, #2]
 8007c4a:	70c1      	strb	r1, [r0, #3]
 8007c4c:	1d03      	adds	r3, r0, #4
 8007c4e:	e7f1      	b.n	8007c34 <__exponent+0x60>

08007c50 <_printf_float>:
 8007c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c54:	b08b      	sub	sp, #44	; 0x2c
 8007c56:	460c      	mov	r4, r1
 8007c58:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007c5c:	4616      	mov	r6, r2
 8007c5e:	461f      	mov	r7, r3
 8007c60:	4605      	mov	r5, r0
 8007c62:	f001 f9c3 	bl	8008fec <_localeconv_r>
 8007c66:	f8d0 b000 	ldr.w	fp, [r0]
 8007c6a:	4658      	mov	r0, fp
 8007c6c:	f7f8 fb38 	bl	80002e0 <strlen>
 8007c70:	2300      	movs	r3, #0
 8007c72:	9308      	str	r3, [sp, #32]
 8007c74:	f8d8 3000 	ldr.w	r3, [r8]
 8007c78:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007c7c:	6822      	ldr	r2, [r4, #0]
 8007c7e:	3307      	adds	r3, #7
 8007c80:	f023 0307 	bic.w	r3, r3, #7
 8007c84:	f103 0108 	add.w	r1, r3, #8
 8007c88:	f8c8 1000 	str.w	r1, [r8]
 8007c8c:	4682      	mov	sl, r0
 8007c8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c92:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007c96:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007ef8 <_printf_float+0x2a8>
 8007c9a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007c9e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007ca2:	eeb4 6b47 	vcmp.f64	d6, d7
 8007ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007caa:	dd24      	ble.n	8007cf6 <_printf_float+0xa6>
 8007cac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cb4:	d502      	bpl.n	8007cbc <_printf_float+0x6c>
 8007cb6:	232d      	movs	r3, #45	; 0x2d
 8007cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cbc:	4b90      	ldr	r3, [pc, #576]	; (8007f00 <_printf_float+0x2b0>)
 8007cbe:	4891      	ldr	r0, [pc, #580]	; (8007f04 <_printf_float+0x2b4>)
 8007cc0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007cc4:	bf94      	ite	ls
 8007cc6:	4698      	movls	r8, r3
 8007cc8:	4680      	movhi	r8, r0
 8007cca:	2303      	movs	r3, #3
 8007ccc:	6123      	str	r3, [r4, #16]
 8007cce:	f022 0204 	bic.w	r2, r2, #4
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	6022      	str	r2, [r4, #0]
 8007cd6:	9304      	str	r3, [sp, #16]
 8007cd8:	9700      	str	r7, [sp, #0]
 8007cda:	4633      	mov	r3, r6
 8007cdc:	aa09      	add	r2, sp, #36	; 0x24
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f000 f9d3 	bl	800808c <_printf_common>
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	f040 808a 	bne.w	8007e00 <_printf_float+0x1b0>
 8007cec:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf0:	b00b      	add	sp, #44	; 0x2c
 8007cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf6:	eeb4 0b40 	vcmp.f64	d0, d0
 8007cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cfe:	d709      	bvc.n	8007d14 <_printf_float+0xc4>
 8007d00:	ee10 3a90 	vmov	r3, s1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bfbc      	itt	lt
 8007d08:	232d      	movlt	r3, #45	; 0x2d
 8007d0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d0e:	487e      	ldr	r0, [pc, #504]	; (8007f08 <_printf_float+0x2b8>)
 8007d10:	4b7e      	ldr	r3, [pc, #504]	; (8007f0c <_printf_float+0x2bc>)
 8007d12:	e7d5      	b.n	8007cc0 <_printf_float+0x70>
 8007d14:	6863      	ldr	r3, [r4, #4]
 8007d16:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007d1a:	9104      	str	r1, [sp, #16]
 8007d1c:	1c59      	adds	r1, r3, #1
 8007d1e:	d13c      	bne.n	8007d9a <_printf_float+0x14a>
 8007d20:	2306      	movs	r3, #6
 8007d22:	6063      	str	r3, [r4, #4]
 8007d24:	2300      	movs	r3, #0
 8007d26:	9303      	str	r3, [sp, #12]
 8007d28:	ab08      	add	r3, sp, #32
 8007d2a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007d2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d32:	ab07      	add	r3, sp, #28
 8007d34:	6861      	ldr	r1, [r4, #4]
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	6022      	str	r2, [r4, #0]
 8007d3a:	f10d 031b 	add.w	r3, sp, #27
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f7ff fef6 	bl	8007b30 <__cvt>
 8007d44:	9b04      	ldr	r3, [sp, #16]
 8007d46:	9907      	ldr	r1, [sp, #28]
 8007d48:	2b47      	cmp	r3, #71	; 0x47
 8007d4a:	4680      	mov	r8, r0
 8007d4c:	d108      	bne.n	8007d60 <_printf_float+0x110>
 8007d4e:	1cc8      	adds	r0, r1, #3
 8007d50:	db02      	blt.n	8007d58 <_printf_float+0x108>
 8007d52:	6863      	ldr	r3, [r4, #4]
 8007d54:	4299      	cmp	r1, r3
 8007d56:	dd41      	ble.n	8007ddc <_printf_float+0x18c>
 8007d58:	f1a9 0902 	sub.w	r9, r9, #2
 8007d5c:	fa5f f989 	uxtb.w	r9, r9
 8007d60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007d64:	d820      	bhi.n	8007da8 <_printf_float+0x158>
 8007d66:	3901      	subs	r1, #1
 8007d68:	464a      	mov	r2, r9
 8007d6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d6e:	9107      	str	r1, [sp, #28]
 8007d70:	f7ff ff30 	bl	8007bd4 <__exponent>
 8007d74:	9a08      	ldr	r2, [sp, #32]
 8007d76:	9004      	str	r0, [sp, #16]
 8007d78:	1813      	adds	r3, r2, r0
 8007d7a:	2a01      	cmp	r2, #1
 8007d7c:	6123      	str	r3, [r4, #16]
 8007d7e:	dc02      	bgt.n	8007d86 <_printf_float+0x136>
 8007d80:	6822      	ldr	r2, [r4, #0]
 8007d82:	07d2      	lsls	r2, r2, #31
 8007d84:	d501      	bpl.n	8007d8a <_printf_float+0x13a>
 8007d86:	3301      	adds	r3, #1
 8007d88:	6123      	str	r3, [r4, #16]
 8007d8a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0a2      	beq.n	8007cd8 <_printf_float+0x88>
 8007d92:	232d      	movs	r3, #45	; 0x2d
 8007d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d98:	e79e      	b.n	8007cd8 <_printf_float+0x88>
 8007d9a:	9904      	ldr	r1, [sp, #16]
 8007d9c:	2947      	cmp	r1, #71	; 0x47
 8007d9e:	d1c1      	bne.n	8007d24 <_printf_float+0xd4>
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1bf      	bne.n	8007d24 <_printf_float+0xd4>
 8007da4:	2301      	movs	r3, #1
 8007da6:	e7bc      	b.n	8007d22 <_printf_float+0xd2>
 8007da8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007dac:	d118      	bne.n	8007de0 <_printf_float+0x190>
 8007dae:	2900      	cmp	r1, #0
 8007db0:	6863      	ldr	r3, [r4, #4]
 8007db2:	dd0b      	ble.n	8007dcc <_printf_float+0x17c>
 8007db4:	6121      	str	r1, [r4, #16]
 8007db6:	b913      	cbnz	r3, 8007dbe <_printf_float+0x16e>
 8007db8:	6822      	ldr	r2, [r4, #0]
 8007dba:	07d0      	lsls	r0, r2, #31
 8007dbc:	d502      	bpl.n	8007dc4 <_printf_float+0x174>
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	440b      	add	r3, r1
 8007dc2:	6123      	str	r3, [r4, #16]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007dc8:	9304      	str	r3, [sp, #16]
 8007dca:	e7de      	b.n	8007d8a <_printf_float+0x13a>
 8007dcc:	b913      	cbnz	r3, 8007dd4 <_printf_float+0x184>
 8007dce:	6822      	ldr	r2, [r4, #0]
 8007dd0:	07d2      	lsls	r2, r2, #31
 8007dd2:	d501      	bpl.n	8007dd8 <_printf_float+0x188>
 8007dd4:	3302      	adds	r3, #2
 8007dd6:	e7f4      	b.n	8007dc2 <_printf_float+0x172>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e7f2      	b.n	8007dc2 <_printf_float+0x172>
 8007ddc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007de0:	9b08      	ldr	r3, [sp, #32]
 8007de2:	4299      	cmp	r1, r3
 8007de4:	db05      	blt.n	8007df2 <_printf_float+0x1a2>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	6121      	str	r1, [r4, #16]
 8007dea:	07d8      	lsls	r0, r3, #31
 8007dec:	d5ea      	bpl.n	8007dc4 <_printf_float+0x174>
 8007dee:	1c4b      	adds	r3, r1, #1
 8007df0:	e7e7      	b.n	8007dc2 <_printf_float+0x172>
 8007df2:	2900      	cmp	r1, #0
 8007df4:	bfd4      	ite	le
 8007df6:	f1c1 0202 	rsble	r2, r1, #2
 8007dfa:	2201      	movgt	r2, #1
 8007dfc:	4413      	add	r3, r2
 8007dfe:	e7e0      	b.n	8007dc2 <_printf_float+0x172>
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	055a      	lsls	r2, r3, #21
 8007e04:	d407      	bmi.n	8007e16 <_printf_float+0x1c6>
 8007e06:	6923      	ldr	r3, [r4, #16]
 8007e08:	4642      	mov	r2, r8
 8007e0a:	4631      	mov	r1, r6
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b8      	blx	r7
 8007e10:	3001      	adds	r0, #1
 8007e12:	d12a      	bne.n	8007e6a <_printf_float+0x21a>
 8007e14:	e76a      	b.n	8007cec <_printf_float+0x9c>
 8007e16:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007e1a:	f240 80e2 	bls.w	8007fe2 <_printf_float+0x392>
 8007e1e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007e22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e2a:	d133      	bne.n	8007e94 <_printf_float+0x244>
 8007e2c:	4a38      	ldr	r2, [pc, #224]	; (8007f10 <_printf_float+0x2c0>)
 8007e2e:	2301      	movs	r3, #1
 8007e30:	4631      	mov	r1, r6
 8007e32:	4628      	mov	r0, r5
 8007e34:	47b8      	blx	r7
 8007e36:	3001      	adds	r0, #1
 8007e38:	f43f af58 	beq.w	8007cec <_printf_float+0x9c>
 8007e3c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	db02      	blt.n	8007e4a <_printf_float+0x1fa>
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	07d8      	lsls	r0, r3, #31
 8007e48:	d50f      	bpl.n	8007e6a <_printf_float+0x21a>
 8007e4a:	4653      	mov	r3, sl
 8007e4c:	465a      	mov	r2, fp
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f af49 	beq.w	8007cec <_printf_float+0x9c>
 8007e5a:	f04f 0800 	mov.w	r8, #0
 8007e5e:	f104 091a 	add.w	r9, r4, #26
 8007e62:	9b08      	ldr	r3, [sp, #32]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	4543      	cmp	r3, r8
 8007e68:	dc09      	bgt.n	8007e7e <_printf_float+0x22e>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	079b      	lsls	r3, r3, #30
 8007e6e:	f100 8108 	bmi.w	8008082 <_printf_float+0x432>
 8007e72:	68e0      	ldr	r0, [r4, #12]
 8007e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e76:	4298      	cmp	r0, r3
 8007e78:	bfb8      	it	lt
 8007e7a:	4618      	movlt	r0, r3
 8007e7c:	e738      	b.n	8007cf0 <_printf_float+0xa0>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	464a      	mov	r2, r9
 8007e82:	4631      	mov	r1, r6
 8007e84:	4628      	mov	r0, r5
 8007e86:	47b8      	blx	r7
 8007e88:	3001      	adds	r0, #1
 8007e8a:	f43f af2f 	beq.w	8007cec <_printf_float+0x9c>
 8007e8e:	f108 0801 	add.w	r8, r8, #1
 8007e92:	e7e6      	b.n	8007e62 <_printf_float+0x212>
 8007e94:	9b07      	ldr	r3, [sp, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	dc3c      	bgt.n	8007f14 <_printf_float+0x2c4>
 8007e9a:	4a1d      	ldr	r2, [pc, #116]	; (8007f10 <_printf_float+0x2c0>)
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	47b8      	blx	r7
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	f43f af21 	beq.w	8007cec <_printf_float+0x9c>
 8007eaa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	d102      	bne.n	8007eb8 <_printf_float+0x268>
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	07d9      	lsls	r1, r3, #31
 8007eb6:	d5d8      	bpl.n	8007e6a <_printf_float+0x21a>
 8007eb8:	4653      	mov	r3, sl
 8007eba:	465a      	mov	r2, fp
 8007ebc:	4631      	mov	r1, r6
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	47b8      	blx	r7
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	f43f af12 	beq.w	8007cec <_printf_float+0x9c>
 8007ec8:	f04f 0900 	mov.w	r9, #0
 8007ecc:	f104 0a1a 	add.w	sl, r4, #26
 8007ed0:	9b07      	ldr	r3, [sp, #28]
 8007ed2:	425b      	negs	r3, r3
 8007ed4:	454b      	cmp	r3, r9
 8007ed6:	dc01      	bgt.n	8007edc <_printf_float+0x28c>
 8007ed8:	9b08      	ldr	r3, [sp, #32]
 8007eda:	e795      	b.n	8007e08 <_printf_float+0x1b8>
 8007edc:	2301      	movs	r3, #1
 8007ede:	4652      	mov	r2, sl
 8007ee0:	4631      	mov	r1, r6
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	47b8      	blx	r7
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	f43f af00 	beq.w	8007cec <_printf_float+0x9c>
 8007eec:	f109 0901 	add.w	r9, r9, #1
 8007ef0:	e7ee      	b.n	8007ed0 <_printf_float+0x280>
 8007ef2:	bf00      	nop
 8007ef4:	f3af 8000 	nop.w
 8007ef8:	ffffffff 	.word	0xffffffff
 8007efc:	7fefffff 	.word	0x7fefffff
 8007f00:	0800a98c 	.word	0x0800a98c
 8007f04:	0800a990 	.word	0x0800a990
 8007f08:	0800a998 	.word	0x0800a998
 8007f0c:	0800a994 	.word	0x0800a994
 8007f10:	0800a99c 	.word	0x0800a99c
 8007f14:	9a08      	ldr	r2, [sp, #32]
 8007f16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	bfa8      	it	ge
 8007f1c:	461a      	movge	r2, r3
 8007f1e:	2a00      	cmp	r2, #0
 8007f20:	4691      	mov	r9, r2
 8007f22:	dc38      	bgt.n	8007f96 <_printf_float+0x346>
 8007f24:	2300      	movs	r3, #0
 8007f26:	9305      	str	r3, [sp, #20]
 8007f28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f2c:	f104 021a 	add.w	r2, r4, #26
 8007f30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f32:	9905      	ldr	r1, [sp, #20]
 8007f34:	9304      	str	r3, [sp, #16]
 8007f36:	eba3 0309 	sub.w	r3, r3, r9
 8007f3a:	428b      	cmp	r3, r1
 8007f3c:	dc33      	bgt.n	8007fa6 <_printf_float+0x356>
 8007f3e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	db3c      	blt.n	8007fc0 <_printf_float+0x370>
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	07da      	lsls	r2, r3, #31
 8007f4a:	d439      	bmi.n	8007fc0 <_printf_float+0x370>
 8007f4c:	9b08      	ldr	r3, [sp, #32]
 8007f4e:	9a04      	ldr	r2, [sp, #16]
 8007f50:	9907      	ldr	r1, [sp, #28]
 8007f52:	1a9a      	subs	r2, r3, r2
 8007f54:	eba3 0901 	sub.w	r9, r3, r1
 8007f58:	4591      	cmp	r9, r2
 8007f5a:	bfa8      	it	ge
 8007f5c:	4691      	movge	r9, r2
 8007f5e:	f1b9 0f00 	cmp.w	r9, #0
 8007f62:	dc35      	bgt.n	8007fd0 <_printf_float+0x380>
 8007f64:	f04f 0800 	mov.w	r8, #0
 8007f68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f6c:	f104 0a1a 	add.w	sl, r4, #26
 8007f70:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	eba3 0309 	sub.w	r3, r3, r9
 8007f7a:	4543      	cmp	r3, r8
 8007f7c:	f77f af75 	ble.w	8007e6a <_printf_float+0x21a>
 8007f80:	2301      	movs	r3, #1
 8007f82:	4652      	mov	r2, sl
 8007f84:	4631      	mov	r1, r6
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b8      	blx	r7
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	f43f aeae 	beq.w	8007cec <_printf_float+0x9c>
 8007f90:	f108 0801 	add.w	r8, r8, #1
 8007f94:	e7ec      	b.n	8007f70 <_printf_float+0x320>
 8007f96:	4613      	mov	r3, r2
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4642      	mov	r2, r8
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	47b8      	blx	r7
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d1bf      	bne.n	8007f24 <_printf_float+0x2d4>
 8007fa4:	e6a2      	b.n	8007cec <_printf_float+0x9c>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4628      	mov	r0, r5
 8007fac:	9204      	str	r2, [sp, #16]
 8007fae:	47b8      	blx	r7
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	f43f ae9b 	beq.w	8007cec <_printf_float+0x9c>
 8007fb6:	9b05      	ldr	r3, [sp, #20]
 8007fb8:	9a04      	ldr	r2, [sp, #16]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	9305      	str	r3, [sp, #20]
 8007fbe:	e7b7      	b.n	8007f30 <_printf_float+0x2e0>
 8007fc0:	4653      	mov	r3, sl
 8007fc2:	465a      	mov	r2, fp
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	47b8      	blx	r7
 8007fca:	3001      	adds	r0, #1
 8007fcc:	d1be      	bne.n	8007f4c <_printf_float+0x2fc>
 8007fce:	e68d      	b.n	8007cec <_printf_float+0x9c>
 8007fd0:	9a04      	ldr	r2, [sp, #16]
 8007fd2:	464b      	mov	r3, r9
 8007fd4:	4442      	add	r2, r8
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4628      	mov	r0, r5
 8007fda:	47b8      	blx	r7
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d1c1      	bne.n	8007f64 <_printf_float+0x314>
 8007fe0:	e684      	b.n	8007cec <_printf_float+0x9c>
 8007fe2:	9a08      	ldr	r2, [sp, #32]
 8007fe4:	2a01      	cmp	r2, #1
 8007fe6:	dc01      	bgt.n	8007fec <_printf_float+0x39c>
 8007fe8:	07db      	lsls	r3, r3, #31
 8007fea:	d537      	bpl.n	800805c <_printf_float+0x40c>
 8007fec:	2301      	movs	r3, #1
 8007fee:	4642      	mov	r2, r8
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	47b8      	blx	r7
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	f43f ae78 	beq.w	8007cec <_printf_float+0x9c>
 8007ffc:	4653      	mov	r3, sl
 8007ffe:	465a      	mov	r2, fp
 8008000:	4631      	mov	r1, r6
 8008002:	4628      	mov	r0, r5
 8008004:	47b8      	blx	r7
 8008006:	3001      	adds	r0, #1
 8008008:	f43f ae70 	beq.w	8007cec <_printf_float+0x9c>
 800800c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008010:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008018:	d01b      	beq.n	8008052 <_printf_float+0x402>
 800801a:	9b08      	ldr	r3, [sp, #32]
 800801c:	f108 0201 	add.w	r2, r8, #1
 8008020:	3b01      	subs	r3, #1
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	d10e      	bne.n	800804a <_printf_float+0x3fa>
 800802c:	e65e      	b.n	8007cec <_printf_float+0x9c>
 800802e:	2301      	movs	r3, #1
 8008030:	464a      	mov	r2, r9
 8008032:	4631      	mov	r1, r6
 8008034:	4628      	mov	r0, r5
 8008036:	47b8      	blx	r7
 8008038:	3001      	adds	r0, #1
 800803a:	f43f ae57 	beq.w	8007cec <_printf_float+0x9c>
 800803e:	f108 0801 	add.w	r8, r8, #1
 8008042:	9b08      	ldr	r3, [sp, #32]
 8008044:	3b01      	subs	r3, #1
 8008046:	4543      	cmp	r3, r8
 8008048:	dcf1      	bgt.n	800802e <_printf_float+0x3de>
 800804a:	9b04      	ldr	r3, [sp, #16]
 800804c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008050:	e6db      	b.n	8007e0a <_printf_float+0x1ba>
 8008052:	f04f 0800 	mov.w	r8, #0
 8008056:	f104 091a 	add.w	r9, r4, #26
 800805a:	e7f2      	b.n	8008042 <_printf_float+0x3f2>
 800805c:	2301      	movs	r3, #1
 800805e:	4642      	mov	r2, r8
 8008060:	e7df      	b.n	8008022 <_printf_float+0x3d2>
 8008062:	2301      	movs	r3, #1
 8008064:	464a      	mov	r2, r9
 8008066:	4631      	mov	r1, r6
 8008068:	4628      	mov	r0, r5
 800806a:	47b8      	blx	r7
 800806c:	3001      	adds	r0, #1
 800806e:	f43f ae3d 	beq.w	8007cec <_printf_float+0x9c>
 8008072:	f108 0801 	add.w	r8, r8, #1
 8008076:	68e3      	ldr	r3, [r4, #12]
 8008078:	9909      	ldr	r1, [sp, #36]	; 0x24
 800807a:	1a5b      	subs	r3, r3, r1
 800807c:	4543      	cmp	r3, r8
 800807e:	dcf0      	bgt.n	8008062 <_printf_float+0x412>
 8008080:	e6f7      	b.n	8007e72 <_printf_float+0x222>
 8008082:	f04f 0800 	mov.w	r8, #0
 8008086:	f104 0919 	add.w	r9, r4, #25
 800808a:	e7f4      	b.n	8008076 <_printf_float+0x426>

0800808c <_printf_common>:
 800808c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008090:	4616      	mov	r6, r2
 8008092:	4699      	mov	r9, r3
 8008094:	688a      	ldr	r2, [r1, #8]
 8008096:	690b      	ldr	r3, [r1, #16]
 8008098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800809c:	4293      	cmp	r3, r2
 800809e:	bfb8      	it	lt
 80080a0:	4613      	movlt	r3, r2
 80080a2:	6033      	str	r3, [r6, #0]
 80080a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080a8:	4607      	mov	r7, r0
 80080aa:	460c      	mov	r4, r1
 80080ac:	b10a      	cbz	r2, 80080b2 <_printf_common+0x26>
 80080ae:	3301      	adds	r3, #1
 80080b0:	6033      	str	r3, [r6, #0]
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	0699      	lsls	r1, r3, #26
 80080b6:	bf42      	ittt	mi
 80080b8:	6833      	ldrmi	r3, [r6, #0]
 80080ba:	3302      	addmi	r3, #2
 80080bc:	6033      	strmi	r3, [r6, #0]
 80080be:	6825      	ldr	r5, [r4, #0]
 80080c0:	f015 0506 	ands.w	r5, r5, #6
 80080c4:	d106      	bne.n	80080d4 <_printf_common+0x48>
 80080c6:	f104 0a19 	add.w	sl, r4, #25
 80080ca:	68e3      	ldr	r3, [r4, #12]
 80080cc:	6832      	ldr	r2, [r6, #0]
 80080ce:	1a9b      	subs	r3, r3, r2
 80080d0:	42ab      	cmp	r3, r5
 80080d2:	dc26      	bgt.n	8008122 <_printf_common+0x96>
 80080d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080d8:	1e13      	subs	r3, r2, #0
 80080da:	6822      	ldr	r2, [r4, #0]
 80080dc:	bf18      	it	ne
 80080de:	2301      	movne	r3, #1
 80080e0:	0692      	lsls	r2, r2, #26
 80080e2:	d42b      	bmi.n	800813c <_printf_common+0xb0>
 80080e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080e8:	4649      	mov	r1, r9
 80080ea:	4638      	mov	r0, r7
 80080ec:	47c0      	blx	r8
 80080ee:	3001      	adds	r0, #1
 80080f0:	d01e      	beq.n	8008130 <_printf_common+0xa4>
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	68e5      	ldr	r5, [r4, #12]
 80080f6:	6832      	ldr	r2, [r6, #0]
 80080f8:	f003 0306 	and.w	r3, r3, #6
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	bf08      	it	eq
 8008100:	1aad      	subeq	r5, r5, r2
 8008102:	68a3      	ldr	r3, [r4, #8]
 8008104:	6922      	ldr	r2, [r4, #16]
 8008106:	bf0c      	ite	eq
 8008108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800810c:	2500      	movne	r5, #0
 800810e:	4293      	cmp	r3, r2
 8008110:	bfc4      	itt	gt
 8008112:	1a9b      	subgt	r3, r3, r2
 8008114:	18ed      	addgt	r5, r5, r3
 8008116:	2600      	movs	r6, #0
 8008118:	341a      	adds	r4, #26
 800811a:	42b5      	cmp	r5, r6
 800811c:	d11a      	bne.n	8008154 <_printf_common+0xc8>
 800811e:	2000      	movs	r0, #0
 8008120:	e008      	b.n	8008134 <_printf_common+0xa8>
 8008122:	2301      	movs	r3, #1
 8008124:	4652      	mov	r2, sl
 8008126:	4649      	mov	r1, r9
 8008128:	4638      	mov	r0, r7
 800812a:	47c0      	blx	r8
 800812c:	3001      	adds	r0, #1
 800812e:	d103      	bne.n	8008138 <_printf_common+0xac>
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008138:	3501      	adds	r5, #1
 800813a:	e7c6      	b.n	80080ca <_printf_common+0x3e>
 800813c:	18e1      	adds	r1, r4, r3
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	2030      	movs	r0, #48	; 0x30
 8008142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008146:	4422      	add	r2, r4
 8008148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800814c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008150:	3302      	adds	r3, #2
 8008152:	e7c7      	b.n	80080e4 <_printf_common+0x58>
 8008154:	2301      	movs	r3, #1
 8008156:	4622      	mov	r2, r4
 8008158:	4649      	mov	r1, r9
 800815a:	4638      	mov	r0, r7
 800815c:	47c0      	blx	r8
 800815e:	3001      	adds	r0, #1
 8008160:	d0e6      	beq.n	8008130 <_printf_common+0xa4>
 8008162:	3601      	adds	r6, #1
 8008164:	e7d9      	b.n	800811a <_printf_common+0x8e>
	...

08008168 <_printf_i>:
 8008168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800816c:	7e0f      	ldrb	r7, [r1, #24]
 800816e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008170:	2f78      	cmp	r7, #120	; 0x78
 8008172:	4691      	mov	r9, r2
 8008174:	4680      	mov	r8, r0
 8008176:	460c      	mov	r4, r1
 8008178:	469a      	mov	sl, r3
 800817a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800817e:	d807      	bhi.n	8008190 <_printf_i+0x28>
 8008180:	2f62      	cmp	r7, #98	; 0x62
 8008182:	d80a      	bhi.n	800819a <_printf_i+0x32>
 8008184:	2f00      	cmp	r7, #0
 8008186:	f000 80d8 	beq.w	800833a <_printf_i+0x1d2>
 800818a:	2f58      	cmp	r7, #88	; 0x58
 800818c:	f000 80a3 	beq.w	80082d6 <_printf_i+0x16e>
 8008190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008198:	e03a      	b.n	8008210 <_printf_i+0xa8>
 800819a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800819e:	2b15      	cmp	r3, #21
 80081a0:	d8f6      	bhi.n	8008190 <_printf_i+0x28>
 80081a2:	a101      	add	r1, pc, #4	; (adr r1, 80081a8 <_printf_i+0x40>)
 80081a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081a8:	08008201 	.word	0x08008201
 80081ac:	08008215 	.word	0x08008215
 80081b0:	08008191 	.word	0x08008191
 80081b4:	08008191 	.word	0x08008191
 80081b8:	08008191 	.word	0x08008191
 80081bc:	08008191 	.word	0x08008191
 80081c0:	08008215 	.word	0x08008215
 80081c4:	08008191 	.word	0x08008191
 80081c8:	08008191 	.word	0x08008191
 80081cc:	08008191 	.word	0x08008191
 80081d0:	08008191 	.word	0x08008191
 80081d4:	08008321 	.word	0x08008321
 80081d8:	08008245 	.word	0x08008245
 80081dc:	08008303 	.word	0x08008303
 80081e0:	08008191 	.word	0x08008191
 80081e4:	08008191 	.word	0x08008191
 80081e8:	08008343 	.word	0x08008343
 80081ec:	08008191 	.word	0x08008191
 80081f0:	08008245 	.word	0x08008245
 80081f4:	08008191 	.word	0x08008191
 80081f8:	08008191 	.word	0x08008191
 80081fc:	0800830b 	.word	0x0800830b
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	1d1a      	adds	r2, r3, #4
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	602a      	str	r2, [r5, #0]
 8008208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800820c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008210:	2301      	movs	r3, #1
 8008212:	e0a3      	b.n	800835c <_printf_i+0x1f4>
 8008214:	6820      	ldr	r0, [r4, #0]
 8008216:	6829      	ldr	r1, [r5, #0]
 8008218:	0606      	lsls	r6, r0, #24
 800821a:	f101 0304 	add.w	r3, r1, #4
 800821e:	d50a      	bpl.n	8008236 <_printf_i+0xce>
 8008220:	680e      	ldr	r6, [r1, #0]
 8008222:	602b      	str	r3, [r5, #0]
 8008224:	2e00      	cmp	r6, #0
 8008226:	da03      	bge.n	8008230 <_printf_i+0xc8>
 8008228:	232d      	movs	r3, #45	; 0x2d
 800822a:	4276      	negs	r6, r6
 800822c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008230:	485e      	ldr	r0, [pc, #376]	; (80083ac <_printf_i+0x244>)
 8008232:	230a      	movs	r3, #10
 8008234:	e019      	b.n	800826a <_printf_i+0x102>
 8008236:	680e      	ldr	r6, [r1, #0]
 8008238:	602b      	str	r3, [r5, #0]
 800823a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800823e:	bf18      	it	ne
 8008240:	b236      	sxthne	r6, r6
 8008242:	e7ef      	b.n	8008224 <_printf_i+0xbc>
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	6820      	ldr	r0, [r4, #0]
 8008248:	1d19      	adds	r1, r3, #4
 800824a:	6029      	str	r1, [r5, #0]
 800824c:	0601      	lsls	r1, r0, #24
 800824e:	d501      	bpl.n	8008254 <_printf_i+0xec>
 8008250:	681e      	ldr	r6, [r3, #0]
 8008252:	e002      	b.n	800825a <_printf_i+0xf2>
 8008254:	0646      	lsls	r6, r0, #25
 8008256:	d5fb      	bpl.n	8008250 <_printf_i+0xe8>
 8008258:	881e      	ldrh	r6, [r3, #0]
 800825a:	4854      	ldr	r0, [pc, #336]	; (80083ac <_printf_i+0x244>)
 800825c:	2f6f      	cmp	r7, #111	; 0x6f
 800825e:	bf0c      	ite	eq
 8008260:	2308      	moveq	r3, #8
 8008262:	230a      	movne	r3, #10
 8008264:	2100      	movs	r1, #0
 8008266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800826a:	6865      	ldr	r5, [r4, #4]
 800826c:	60a5      	str	r5, [r4, #8]
 800826e:	2d00      	cmp	r5, #0
 8008270:	bfa2      	ittt	ge
 8008272:	6821      	ldrge	r1, [r4, #0]
 8008274:	f021 0104 	bicge.w	r1, r1, #4
 8008278:	6021      	strge	r1, [r4, #0]
 800827a:	b90e      	cbnz	r6, 8008280 <_printf_i+0x118>
 800827c:	2d00      	cmp	r5, #0
 800827e:	d04d      	beq.n	800831c <_printf_i+0x1b4>
 8008280:	4615      	mov	r5, r2
 8008282:	fbb6 f1f3 	udiv	r1, r6, r3
 8008286:	fb03 6711 	mls	r7, r3, r1, r6
 800828a:	5dc7      	ldrb	r7, [r0, r7]
 800828c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008290:	4637      	mov	r7, r6
 8008292:	42bb      	cmp	r3, r7
 8008294:	460e      	mov	r6, r1
 8008296:	d9f4      	bls.n	8008282 <_printf_i+0x11a>
 8008298:	2b08      	cmp	r3, #8
 800829a:	d10b      	bne.n	80082b4 <_printf_i+0x14c>
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	07de      	lsls	r6, r3, #31
 80082a0:	d508      	bpl.n	80082b4 <_printf_i+0x14c>
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	6861      	ldr	r1, [r4, #4]
 80082a6:	4299      	cmp	r1, r3
 80082a8:	bfde      	ittt	le
 80082aa:	2330      	movle	r3, #48	; 0x30
 80082ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082b4:	1b52      	subs	r2, r2, r5
 80082b6:	6122      	str	r2, [r4, #16]
 80082b8:	f8cd a000 	str.w	sl, [sp]
 80082bc:	464b      	mov	r3, r9
 80082be:	aa03      	add	r2, sp, #12
 80082c0:	4621      	mov	r1, r4
 80082c2:	4640      	mov	r0, r8
 80082c4:	f7ff fee2 	bl	800808c <_printf_common>
 80082c8:	3001      	adds	r0, #1
 80082ca:	d14c      	bne.n	8008366 <_printf_i+0x1fe>
 80082cc:	f04f 30ff 	mov.w	r0, #4294967295
 80082d0:	b004      	add	sp, #16
 80082d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d6:	4835      	ldr	r0, [pc, #212]	; (80083ac <_printf_i+0x244>)
 80082d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082dc:	6829      	ldr	r1, [r5, #0]
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80082e4:	6029      	str	r1, [r5, #0]
 80082e6:	061d      	lsls	r5, r3, #24
 80082e8:	d514      	bpl.n	8008314 <_printf_i+0x1ac>
 80082ea:	07df      	lsls	r7, r3, #31
 80082ec:	bf44      	itt	mi
 80082ee:	f043 0320 	orrmi.w	r3, r3, #32
 80082f2:	6023      	strmi	r3, [r4, #0]
 80082f4:	b91e      	cbnz	r6, 80082fe <_printf_i+0x196>
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	f023 0320 	bic.w	r3, r3, #32
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	2310      	movs	r3, #16
 8008300:	e7b0      	b.n	8008264 <_printf_i+0xfc>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	f043 0320 	orr.w	r3, r3, #32
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	2378      	movs	r3, #120	; 0x78
 800830c:	4828      	ldr	r0, [pc, #160]	; (80083b0 <_printf_i+0x248>)
 800830e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008312:	e7e3      	b.n	80082dc <_printf_i+0x174>
 8008314:	0659      	lsls	r1, r3, #25
 8008316:	bf48      	it	mi
 8008318:	b2b6      	uxthmi	r6, r6
 800831a:	e7e6      	b.n	80082ea <_printf_i+0x182>
 800831c:	4615      	mov	r5, r2
 800831e:	e7bb      	b.n	8008298 <_printf_i+0x130>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	6826      	ldr	r6, [r4, #0]
 8008324:	6961      	ldr	r1, [r4, #20]
 8008326:	1d18      	adds	r0, r3, #4
 8008328:	6028      	str	r0, [r5, #0]
 800832a:	0635      	lsls	r5, r6, #24
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	d501      	bpl.n	8008334 <_printf_i+0x1cc>
 8008330:	6019      	str	r1, [r3, #0]
 8008332:	e002      	b.n	800833a <_printf_i+0x1d2>
 8008334:	0670      	lsls	r0, r6, #25
 8008336:	d5fb      	bpl.n	8008330 <_printf_i+0x1c8>
 8008338:	8019      	strh	r1, [r3, #0]
 800833a:	2300      	movs	r3, #0
 800833c:	6123      	str	r3, [r4, #16]
 800833e:	4615      	mov	r5, r2
 8008340:	e7ba      	b.n	80082b8 <_printf_i+0x150>
 8008342:	682b      	ldr	r3, [r5, #0]
 8008344:	1d1a      	adds	r2, r3, #4
 8008346:	602a      	str	r2, [r5, #0]
 8008348:	681d      	ldr	r5, [r3, #0]
 800834a:	6862      	ldr	r2, [r4, #4]
 800834c:	2100      	movs	r1, #0
 800834e:	4628      	mov	r0, r5
 8008350:	f7f7 ffce 	bl	80002f0 <memchr>
 8008354:	b108      	cbz	r0, 800835a <_printf_i+0x1f2>
 8008356:	1b40      	subs	r0, r0, r5
 8008358:	6060      	str	r0, [r4, #4]
 800835a:	6863      	ldr	r3, [r4, #4]
 800835c:	6123      	str	r3, [r4, #16]
 800835e:	2300      	movs	r3, #0
 8008360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008364:	e7a8      	b.n	80082b8 <_printf_i+0x150>
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	462a      	mov	r2, r5
 800836a:	4649      	mov	r1, r9
 800836c:	4640      	mov	r0, r8
 800836e:	47d0      	blx	sl
 8008370:	3001      	adds	r0, #1
 8008372:	d0ab      	beq.n	80082cc <_printf_i+0x164>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	079b      	lsls	r3, r3, #30
 8008378:	d413      	bmi.n	80083a2 <_printf_i+0x23a>
 800837a:	68e0      	ldr	r0, [r4, #12]
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	4298      	cmp	r0, r3
 8008380:	bfb8      	it	lt
 8008382:	4618      	movlt	r0, r3
 8008384:	e7a4      	b.n	80082d0 <_printf_i+0x168>
 8008386:	2301      	movs	r3, #1
 8008388:	4632      	mov	r2, r6
 800838a:	4649      	mov	r1, r9
 800838c:	4640      	mov	r0, r8
 800838e:	47d0      	blx	sl
 8008390:	3001      	adds	r0, #1
 8008392:	d09b      	beq.n	80082cc <_printf_i+0x164>
 8008394:	3501      	adds	r5, #1
 8008396:	68e3      	ldr	r3, [r4, #12]
 8008398:	9903      	ldr	r1, [sp, #12]
 800839a:	1a5b      	subs	r3, r3, r1
 800839c:	42ab      	cmp	r3, r5
 800839e:	dcf2      	bgt.n	8008386 <_printf_i+0x21e>
 80083a0:	e7eb      	b.n	800837a <_printf_i+0x212>
 80083a2:	2500      	movs	r5, #0
 80083a4:	f104 0619 	add.w	r6, r4, #25
 80083a8:	e7f5      	b.n	8008396 <_printf_i+0x22e>
 80083aa:	bf00      	nop
 80083ac:	0800a99e 	.word	0x0800a99e
 80083b0:	0800a9af 	.word	0x0800a9af

080083b4 <siprintf>:
 80083b4:	b40e      	push	{r1, r2, r3}
 80083b6:	b500      	push	{lr}
 80083b8:	b09c      	sub	sp, #112	; 0x70
 80083ba:	ab1d      	add	r3, sp, #116	; 0x74
 80083bc:	9002      	str	r0, [sp, #8]
 80083be:	9006      	str	r0, [sp, #24]
 80083c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083c4:	4809      	ldr	r0, [pc, #36]	; (80083ec <siprintf+0x38>)
 80083c6:	9107      	str	r1, [sp, #28]
 80083c8:	9104      	str	r1, [sp, #16]
 80083ca:	4909      	ldr	r1, [pc, #36]	; (80083f0 <siprintf+0x3c>)
 80083cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d0:	9105      	str	r1, [sp, #20]
 80083d2:	6800      	ldr	r0, [r0, #0]
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	a902      	add	r1, sp, #8
 80083d8:	f001 faf8 	bl	80099cc <_svfiprintf_r>
 80083dc:	9b02      	ldr	r3, [sp, #8]
 80083de:	2200      	movs	r2, #0
 80083e0:	701a      	strb	r2, [r3, #0]
 80083e2:	b01c      	add	sp, #112	; 0x70
 80083e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e8:	b003      	add	sp, #12
 80083ea:	4770      	bx	lr
 80083ec:	24000010 	.word	0x24000010
 80083f0:	ffff0208 	.word	0xffff0208

080083f4 <quorem>:
 80083f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	6903      	ldr	r3, [r0, #16]
 80083fa:	690c      	ldr	r4, [r1, #16]
 80083fc:	42a3      	cmp	r3, r4
 80083fe:	4607      	mov	r7, r0
 8008400:	f2c0 8081 	blt.w	8008506 <quorem+0x112>
 8008404:	3c01      	subs	r4, #1
 8008406:	f101 0814 	add.w	r8, r1, #20
 800840a:	f100 0514 	add.w	r5, r0, #20
 800840e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008418:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800841c:	3301      	adds	r3, #1
 800841e:	429a      	cmp	r2, r3
 8008420:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008424:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008428:	fbb2 f6f3 	udiv	r6, r2, r3
 800842c:	d331      	bcc.n	8008492 <quorem+0x9e>
 800842e:	f04f 0e00 	mov.w	lr, #0
 8008432:	4640      	mov	r0, r8
 8008434:	46ac      	mov	ip, r5
 8008436:	46f2      	mov	sl, lr
 8008438:	f850 2b04 	ldr.w	r2, [r0], #4
 800843c:	b293      	uxth	r3, r2
 800843e:	fb06 e303 	mla	r3, r6, r3, lr
 8008442:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008446:	b29b      	uxth	r3, r3
 8008448:	ebaa 0303 	sub.w	r3, sl, r3
 800844c:	f8dc a000 	ldr.w	sl, [ip]
 8008450:	0c12      	lsrs	r2, r2, #16
 8008452:	fa13 f38a 	uxtah	r3, r3, sl
 8008456:	fb06 e202 	mla	r2, r6, r2, lr
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	9b00      	ldr	r3, [sp, #0]
 800845e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008462:	b292      	uxth	r2, r2
 8008464:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008468:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800846c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008470:	4581      	cmp	r9, r0
 8008472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008476:	f84c 3b04 	str.w	r3, [ip], #4
 800847a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800847e:	d2db      	bcs.n	8008438 <quorem+0x44>
 8008480:	f855 300b 	ldr.w	r3, [r5, fp]
 8008484:	b92b      	cbnz	r3, 8008492 <quorem+0x9e>
 8008486:	9b01      	ldr	r3, [sp, #4]
 8008488:	3b04      	subs	r3, #4
 800848a:	429d      	cmp	r5, r3
 800848c:	461a      	mov	r2, r3
 800848e:	d32e      	bcc.n	80084ee <quorem+0xfa>
 8008490:	613c      	str	r4, [r7, #16]
 8008492:	4638      	mov	r0, r7
 8008494:	f001 f846 	bl	8009524 <__mcmp>
 8008498:	2800      	cmp	r0, #0
 800849a:	db24      	blt.n	80084e6 <quorem+0xf2>
 800849c:	3601      	adds	r6, #1
 800849e:	4628      	mov	r0, r5
 80084a0:	f04f 0c00 	mov.w	ip, #0
 80084a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80084a8:	f8d0 e000 	ldr.w	lr, [r0]
 80084ac:	b293      	uxth	r3, r2
 80084ae:	ebac 0303 	sub.w	r3, ip, r3
 80084b2:	0c12      	lsrs	r2, r2, #16
 80084b4:	fa13 f38e 	uxtah	r3, r3, lr
 80084b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80084bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084c6:	45c1      	cmp	r9, r8
 80084c8:	f840 3b04 	str.w	r3, [r0], #4
 80084cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80084d0:	d2e8      	bcs.n	80084a4 <quorem+0xb0>
 80084d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084da:	b922      	cbnz	r2, 80084e6 <quorem+0xf2>
 80084dc:	3b04      	subs	r3, #4
 80084de:	429d      	cmp	r5, r3
 80084e0:	461a      	mov	r2, r3
 80084e2:	d30a      	bcc.n	80084fa <quorem+0x106>
 80084e4:	613c      	str	r4, [r7, #16]
 80084e6:	4630      	mov	r0, r6
 80084e8:	b003      	add	sp, #12
 80084ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ee:	6812      	ldr	r2, [r2, #0]
 80084f0:	3b04      	subs	r3, #4
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	d1cc      	bne.n	8008490 <quorem+0x9c>
 80084f6:	3c01      	subs	r4, #1
 80084f8:	e7c7      	b.n	800848a <quorem+0x96>
 80084fa:	6812      	ldr	r2, [r2, #0]
 80084fc:	3b04      	subs	r3, #4
 80084fe:	2a00      	cmp	r2, #0
 8008500:	d1f0      	bne.n	80084e4 <quorem+0xf0>
 8008502:	3c01      	subs	r4, #1
 8008504:	e7eb      	b.n	80084de <quorem+0xea>
 8008506:	2000      	movs	r0, #0
 8008508:	e7ee      	b.n	80084e8 <quorem+0xf4>
 800850a:	0000      	movs	r0, r0
 800850c:	0000      	movs	r0, r0
	...

08008510 <_dtoa_r>:
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	ed2d 8b02 	vpush	{d8}
 8008518:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800851a:	b091      	sub	sp, #68	; 0x44
 800851c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008520:	ec59 8b10 	vmov	r8, r9, d0
 8008524:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008526:	9106      	str	r1, [sp, #24]
 8008528:	4606      	mov	r6, r0
 800852a:	9208      	str	r2, [sp, #32]
 800852c:	930c      	str	r3, [sp, #48]	; 0x30
 800852e:	b975      	cbnz	r5, 800854e <_dtoa_r+0x3e>
 8008530:	2010      	movs	r0, #16
 8008532:	f000 fd5f 	bl	8008ff4 <malloc>
 8008536:	4602      	mov	r2, r0
 8008538:	6270      	str	r0, [r6, #36]	; 0x24
 800853a:	b920      	cbnz	r0, 8008546 <_dtoa_r+0x36>
 800853c:	4baa      	ldr	r3, [pc, #680]	; (80087e8 <_dtoa_r+0x2d8>)
 800853e:	21ea      	movs	r1, #234	; 0xea
 8008540:	48aa      	ldr	r0, [pc, #680]	; (80087ec <_dtoa_r+0x2dc>)
 8008542:	f001 fb53 	bl	8009bec <__assert_func>
 8008546:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800854a:	6005      	str	r5, [r0, #0]
 800854c:	60c5      	str	r5, [r0, #12]
 800854e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008550:	6819      	ldr	r1, [r3, #0]
 8008552:	b151      	cbz	r1, 800856a <_dtoa_r+0x5a>
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	604a      	str	r2, [r1, #4]
 8008558:	2301      	movs	r3, #1
 800855a:	4093      	lsls	r3, r2
 800855c:	608b      	str	r3, [r1, #8]
 800855e:	4630      	mov	r0, r6
 8008560:	f000 fd9e 	bl	80090a0 <_Bfree>
 8008564:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	f1b9 0300 	subs.w	r3, r9, #0
 800856e:	bfbb      	ittet	lt
 8008570:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008574:	9303      	strlt	r3, [sp, #12]
 8008576:	2300      	movge	r3, #0
 8008578:	2201      	movlt	r2, #1
 800857a:	bfac      	ite	ge
 800857c:	6023      	strge	r3, [r4, #0]
 800857e:	6022      	strlt	r2, [r4, #0]
 8008580:	4b9b      	ldr	r3, [pc, #620]	; (80087f0 <_dtoa_r+0x2e0>)
 8008582:	9c03      	ldr	r4, [sp, #12]
 8008584:	43a3      	bics	r3, r4
 8008586:	d11c      	bne.n	80085c2 <_dtoa_r+0xb2>
 8008588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800858a:	f242 730f 	movw	r3, #9999	; 0x270f
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008594:	ea53 0308 	orrs.w	r3, r3, r8
 8008598:	f000 84fd 	beq.w	8008f96 <_dtoa_r+0xa86>
 800859c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800859e:	b963      	cbnz	r3, 80085ba <_dtoa_r+0xaa>
 80085a0:	4b94      	ldr	r3, [pc, #592]	; (80087f4 <_dtoa_r+0x2e4>)
 80085a2:	e01f      	b.n	80085e4 <_dtoa_r+0xd4>
 80085a4:	4b94      	ldr	r3, [pc, #592]	; (80087f8 <_dtoa_r+0x2e8>)
 80085a6:	9301      	str	r3, [sp, #4]
 80085a8:	3308      	adds	r3, #8
 80085aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80085ac:	6013      	str	r3, [r2, #0]
 80085ae:	9801      	ldr	r0, [sp, #4]
 80085b0:	b011      	add	sp, #68	; 0x44
 80085b2:	ecbd 8b02 	vpop	{d8}
 80085b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ba:	4b8e      	ldr	r3, [pc, #568]	; (80087f4 <_dtoa_r+0x2e4>)
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	3303      	adds	r3, #3
 80085c0:	e7f3      	b.n	80085aa <_dtoa_r+0x9a>
 80085c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80085c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80085ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ce:	d10b      	bne.n	80085e8 <_dtoa_r+0xd8>
 80085d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085d2:	2301      	movs	r3, #1
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 84d9 	beq.w	8008f90 <_dtoa_r+0xa80>
 80085de:	4887      	ldr	r0, [pc, #540]	; (80087fc <_dtoa_r+0x2ec>)
 80085e0:	6018      	str	r0, [r3, #0]
 80085e2:	1e43      	subs	r3, r0, #1
 80085e4:	9301      	str	r3, [sp, #4]
 80085e6:	e7e2      	b.n	80085ae <_dtoa_r+0x9e>
 80085e8:	a90f      	add	r1, sp, #60	; 0x3c
 80085ea:	aa0e      	add	r2, sp, #56	; 0x38
 80085ec:	4630      	mov	r0, r6
 80085ee:	eeb0 0b48 	vmov.f64	d0, d8
 80085f2:	f001 f83d 	bl	8009670 <__d2b>
 80085f6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80085fa:	4605      	mov	r5, r0
 80085fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80085fe:	2900      	cmp	r1, #0
 8008600:	d046      	beq.n	8008690 <_dtoa_r+0x180>
 8008602:	ee18 4a90 	vmov	r4, s17
 8008606:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800860a:	ec53 2b18 	vmov	r2, r3, d8
 800860e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008612:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008616:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800861a:	2400      	movs	r4, #0
 800861c:	ec43 2b16 	vmov	d6, r2, r3
 8008620:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008624:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80087d0 <_dtoa_r+0x2c0>
 8008628:	ee36 7b47 	vsub.f64	d7, d6, d7
 800862c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80087d8 <_dtoa_r+0x2c8>
 8008630:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008634:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80087e0 <_dtoa_r+0x2d0>
 8008638:	ee07 1a90 	vmov	s15, r1
 800863c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008640:	eeb0 7b46 	vmov.f64	d7, d6
 8008644:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008648:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800864c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008654:	ee16 ba90 	vmov	fp, s13
 8008658:	940a      	str	r4, [sp, #40]	; 0x28
 800865a:	d508      	bpl.n	800866e <_dtoa_r+0x15e>
 800865c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008660:	eeb4 6b47 	vcmp.f64	d6, d7
 8008664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008668:	bf18      	it	ne
 800866a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800866e:	f1bb 0f16 	cmp.w	fp, #22
 8008672:	d82f      	bhi.n	80086d4 <_dtoa_r+0x1c4>
 8008674:	4b62      	ldr	r3, [pc, #392]	; (8008800 <_dtoa_r+0x2f0>)
 8008676:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800867a:	ed93 7b00 	vldr	d7, [r3]
 800867e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008686:	d501      	bpl.n	800868c <_dtoa_r+0x17c>
 8008688:	f10b 3bff 	add.w	fp, fp, #4294967295
 800868c:	2300      	movs	r3, #0
 800868e:	e022      	b.n	80086d6 <_dtoa_r+0x1c6>
 8008690:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008692:	4401      	add	r1, r0
 8008694:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008698:	2b20      	cmp	r3, #32
 800869a:	bfc1      	itttt	gt
 800869c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80086a0:	fa04 f303 	lslgt.w	r3, r4, r3
 80086a4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80086a8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80086ac:	bfd6      	itet	le
 80086ae:	f1c3 0320 	rsble	r3, r3, #32
 80086b2:	ea43 0808 	orrgt.w	r8, r3, r8
 80086b6:	fa08 f803 	lslle.w	r8, r8, r3
 80086ba:	ee07 8a90 	vmov	s15, r8
 80086be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80086c2:	3901      	subs	r1, #1
 80086c4:	ee17 4a90 	vmov	r4, s15
 80086c8:	ec53 2b17 	vmov	r2, r3, d7
 80086cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80086d0:	2401      	movs	r4, #1
 80086d2:	e7a3      	b.n	800861c <_dtoa_r+0x10c>
 80086d4:	2301      	movs	r3, #1
 80086d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80086d8:	1a43      	subs	r3, r0, r1
 80086da:	1e5a      	subs	r2, r3, #1
 80086dc:	bf45      	ittet	mi
 80086de:	f1c3 0301 	rsbmi	r3, r3, #1
 80086e2:	9304      	strmi	r3, [sp, #16]
 80086e4:	2300      	movpl	r3, #0
 80086e6:	2300      	movmi	r3, #0
 80086e8:	9205      	str	r2, [sp, #20]
 80086ea:	bf54      	ite	pl
 80086ec:	9304      	strpl	r3, [sp, #16]
 80086ee:	9305      	strmi	r3, [sp, #20]
 80086f0:	f1bb 0f00 	cmp.w	fp, #0
 80086f4:	db18      	blt.n	8008728 <_dtoa_r+0x218>
 80086f6:	9b05      	ldr	r3, [sp, #20]
 80086f8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80086fc:	445b      	add	r3, fp
 80086fe:	9305      	str	r3, [sp, #20]
 8008700:	2300      	movs	r3, #0
 8008702:	9a06      	ldr	r2, [sp, #24]
 8008704:	2a09      	cmp	r2, #9
 8008706:	d849      	bhi.n	800879c <_dtoa_r+0x28c>
 8008708:	2a05      	cmp	r2, #5
 800870a:	bfc4      	itt	gt
 800870c:	3a04      	subgt	r2, #4
 800870e:	9206      	strgt	r2, [sp, #24]
 8008710:	9a06      	ldr	r2, [sp, #24]
 8008712:	f1a2 0202 	sub.w	r2, r2, #2
 8008716:	bfcc      	ite	gt
 8008718:	2400      	movgt	r4, #0
 800871a:	2401      	movle	r4, #1
 800871c:	2a03      	cmp	r2, #3
 800871e:	d848      	bhi.n	80087b2 <_dtoa_r+0x2a2>
 8008720:	e8df f002 	tbb	[pc, r2]
 8008724:	3a2c2e0b 	.word	0x3a2c2e0b
 8008728:	9b04      	ldr	r3, [sp, #16]
 800872a:	2200      	movs	r2, #0
 800872c:	eba3 030b 	sub.w	r3, r3, fp
 8008730:	9304      	str	r3, [sp, #16]
 8008732:	9209      	str	r2, [sp, #36]	; 0x24
 8008734:	f1cb 0300 	rsb	r3, fp, #0
 8008738:	e7e3      	b.n	8008702 <_dtoa_r+0x1f2>
 800873a:	2200      	movs	r2, #0
 800873c:	9207      	str	r2, [sp, #28]
 800873e:	9a08      	ldr	r2, [sp, #32]
 8008740:	2a00      	cmp	r2, #0
 8008742:	dc39      	bgt.n	80087b8 <_dtoa_r+0x2a8>
 8008744:	f04f 0a01 	mov.w	sl, #1
 8008748:	46d1      	mov	r9, sl
 800874a:	4652      	mov	r2, sl
 800874c:	f8cd a020 	str.w	sl, [sp, #32]
 8008750:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008752:	2100      	movs	r1, #0
 8008754:	6079      	str	r1, [r7, #4]
 8008756:	2004      	movs	r0, #4
 8008758:	f100 0c14 	add.w	ip, r0, #20
 800875c:	4594      	cmp	ip, r2
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	d92f      	bls.n	80087c2 <_dtoa_r+0x2b2>
 8008762:	4630      	mov	r0, r6
 8008764:	930d      	str	r3, [sp, #52]	; 0x34
 8008766:	f000 fc5b 	bl	8009020 <_Balloc>
 800876a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800876c:	9001      	str	r0, [sp, #4]
 800876e:	4602      	mov	r2, r0
 8008770:	2800      	cmp	r0, #0
 8008772:	d149      	bne.n	8008808 <_dtoa_r+0x2f8>
 8008774:	4b23      	ldr	r3, [pc, #140]	; (8008804 <_dtoa_r+0x2f4>)
 8008776:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800877a:	e6e1      	b.n	8008540 <_dtoa_r+0x30>
 800877c:	2201      	movs	r2, #1
 800877e:	e7dd      	b.n	800873c <_dtoa_r+0x22c>
 8008780:	2200      	movs	r2, #0
 8008782:	9207      	str	r2, [sp, #28]
 8008784:	9a08      	ldr	r2, [sp, #32]
 8008786:	eb0b 0a02 	add.w	sl, fp, r2
 800878a:	f10a 0901 	add.w	r9, sl, #1
 800878e:	464a      	mov	r2, r9
 8008790:	2a01      	cmp	r2, #1
 8008792:	bfb8      	it	lt
 8008794:	2201      	movlt	r2, #1
 8008796:	e7db      	b.n	8008750 <_dtoa_r+0x240>
 8008798:	2201      	movs	r2, #1
 800879a:	e7f2      	b.n	8008782 <_dtoa_r+0x272>
 800879c:	2401      	movs	r4, #1
 800879e:	2200      	movs	r2, #0
 80087a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80087a4:	f04f 3aff 	mov.w	sl, #4294967295
 80087a8:	2100      	movs	r1, #0
 80087aa:	46d1      	mov	r9, sl
 80087ac:	2212      	movs	r2, #18
 80087ae:	9108      	str	r1, [sp, #32]
 80087b0:	e7ce      	b.n	8008750 <_dtoa_r+0x240>
 80087b2:	2201      	movs	r2, #1
 80087b4:	9207      	str	r2, [sp, #28]
 80087b6:	e7f5      	b.n	80087a4 <_dtoa_r+0x294>
 80087b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80087bc:	46d1      	mov	r9, sl
 80087be:	4652      	mov	r2, sl
 80087c0:	e7c6      	b.n	8008750 <_dtoa_r+0x240>
 80087c2:	3101      	adds	r1, #1
 80087c4:	6079      	str	r1, [r7, #4]
 80087c6:	0040      	lsls	r0, r0, #1
 80087c8:	e7c6      	b.n	8008758 <_dtoa_r+0x248>
 80087ca:	bf00      	nop
 80087cc:	f3af 8000 	nop.w
 80087d0:	636f4361 	.word	0x636f4361
 80087d4:	3fd287a7 	.word	0x3fd287a7
 80087d8:	8b60c8b3 	.word	0x8b60c8b3
 80087dc:	3fc68a28 	.word	0x3fc68a28
 80087e0:	509f79fb 	.word	0x509f79fb
 80087e4:	3fd34413 	.word	0x3fd34413
 80087e8:	0800a9cd 	.word	0x0800a9cd
 80087ec:	0800a9e4 	.word	0x0800a9e4
 80087f0:	7ff00000 	.word	0x7ff00000
 80087f4:	0800a9c9 	.word	0x0800a9c9
 80087f8:	0800a9c0 	.word	0x0800a9c0
 80087fc:	0800a99d 	.word	0x0800a99d
 8008800:	0800aad8 	.word	0x0800aad8
 8008804:	0800aa3f 	.word	0x0800aa3f
 8008808:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800880a:	9901      	ldr	r1, [sp, #4]
 800880c:	6011      	str	r1, [r2, #0]
 800880e:	f1b9 0f0e 	cmp.w	r9, #14
 8008812:	d86c      	bhi.n	80088ee <_dtoa_r+0x3de>
 8008814:	2c00      	cmp	r4, #0
 8008816:	d06a      	beq.n	80088ee <_dtoa_r+0x3de>
 8008818:	f1bb 0f00 	cmp.w	fp, #0
 800881c:	f340 80a0 	ble.w	8008960 <_dtoa_r+0x450>
 8008820:	49c1      	ldr	r1, [pc, #772]	; (8008b28 <_dtoa_r+0x618>)
 8008822:	f00b 020f 	and.w	r2, fp, #15
 8008826:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800882a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800882e:	ed92 7b00 	vldr	d7, [r2]
 8008832:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008836:	f000 8087 	beq.w	8008948 <_dtoa_r+0x438>
 800883a:	4abc      	ldr	r2, [pc, #752]	; (8008b2c <_dtoa_r+0x61c>)
 800883c:	ed92 6b08 	vldr	d6, [r2, #32]
 8008840:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008844:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008848:	f001 010f 	and.w	r1, r1, #15
 800884c:	2203      	movs	r2, #3
 800884e:	48b7      	ldr	r0, [pc, #732]	; (8008b2c <_dtoa_r+0x61c>)
 8008850:	2900      	cmp	r1, #0
 8008852:	d17b      	bne.n	800894c <_dtoa_r+0x43c>
 8008854:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008858:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800885c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008860:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008862:	2900      	cmp	r1, #0
 8008864:	f000 80a2 	beq.w	80089ac <_dtoa_r+0x49c>
 8008868:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800886c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008870:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008878:	f140 8098 	bpl.w	80089ac <_dtoa_r+0x49c>
 800887c:	f1b9 0f00 	cmp.w	r9, #0
 8008880:	f000 8094 	beq.w	80089ac <_dtoa_r+0x49c>
 8008884:	f1ba 0f00 	cmp.w	sl, #0
 8008888:	dd2f      	ble.n	80088ea <_dtoa_r+0x3da>
 800888a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800888e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008892:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008896:	f10b 37ff 	add.w	r7, fp, #4294967295
 800889a:	3201      	adds	r2, #1
 800889c:	4650      	mov	r0, sl
 800889e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80088a2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80088a6:	ee07 2a90 	vmov	s15, r2
 80088aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80088ae:	eea7 5b06 	vfma.f64	d5, d7, d6
 80088b2:	ee15 4a90 	vmov	r4, s11
 80088b6:	ec52 1b15 	vmov	r1, r2, d5
 80088ba:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80088be:	2800      	cmp	r0, #0
 80088c0:	d177      	bne.n	80089b2 <_dtoa_r+0x4a2>
 80088c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80088c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80088ca:	ec42 1b17 	vmov	d7, r1, r2
 80088ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80088d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d6:	f300 8263 	bgt.w	8008da0 <_dtoa_r+0x890>
 80088da:	eeb1 7b47 	vneg.f64	d7, d7
 80088de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80088e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e6:	f100 8258 	bmi.w	8008d9a <_dtoa_r+0x88a>
 80088ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80088ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088f0:	2a00      	cmp	r2, #0
 80088f2:	f2c0 811d 	blt.w	8008b30 <_dtoa_r+0x620>
 80088f6:	f1bb 0f0e 	cmp.w	fp, #14
 80088fa:	f300 8119 	bgt.w	8008b30 <_dtoa_r+0x620>
 80088fe:	4b8a      	ldr	r3, [pc, #552]	; (8008b28 <_dtoa_r+0x618>)
 8008900:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008904:	ed93 6b00 	vldr	d6, [r3]
 8008908:	9b08      	ldr	r3, [sp, #32]
 800890a:	2b00      	cmp	r3, #0
 800890c:	f280 80b7 	bge.w	8008a7e <_dtoa_r+0x56e>
 8008910:	f1b9 0f00 	cmp.w	r9, #0
 8008914:	f300 80b3 	bgt.w	8008a7e <_dtoa_r+0x56e>
 8008918:	f040 823f 	bne.w	8008d9a <_dtoa_r+0x88a>
 800891c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008920:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008924:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008928:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800892c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008930:	464c      	mov	r4, r9
 8008932:	464f      	mov	r7, r9
 8008934:	f280 8215 	bge.w	8008d62 <_dtoa_r+0x852>
 8008938:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800893c:	2331      	movs	r3, #49	; 0x31
 800893e:	f808 3b01 	strb.w	r3, [r8], #1
 8008942:	f10b 0b01 	add.w	fp, fp, #1
 8008946:	e211      	b.n	8008d6c <_dtoa_r+0x85c>
 8008948:	2202      	movs	r2, #2
 800894a:	e780      	b.n	800884e <_dtoa_r+0x33e>
 800894c:	07cc      	lsls	r4, r1, #31
 800894e:	d504      	bpl.n	800895a <_dtoa_r+0x44a>
 8008950:	ed90 6b00 	vldr	d6, [r0]
 8008954:	3201      	adds	r2, #1
 8008956:	ee27 7b06 	vmul.f64	d7, d7, d6
 800895a:	1049      	asrs	r1, r1, #1
 800895c:	3008      	adds	r0, #8
 800895e:	e777      	b.n	8008850 <_dtoa_r+0x340>
 8008960:	d022      	beq.n	80089a8 <_dtoa_r+0x498>
 8008962:	f1cb 0100 	rsb	r1, fp, #0
 8008966:	4a70      	ldr	r2, [pc, #448]	; (8008b28 <_dtoa_r+0x618>)
 8008968:	f001 000f 	and.w	r0, r1, #15
 800896c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008970:	ed92 7b00 	vldr	d7, [r2]
 8008974:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008978:	ed8d 7b02 	vstr	d7, [sp, #8]
 800897c:	486b      	ldr	r0, [pc, #428]	; (8008b2c <_dtoa_r+0x61c>)
 800897e:	1109      	asrs	r1, r1, #4
 8008980:	2400      	movs	r4, #0
 8008982:	2202      	movs	r2, #2
 8008984:	b929      	cbnz	r1, 8008992 <_dtoa_r+0x482>
 8008986:	2c00      	cmp	r4, #0
 8008988:	f43f af6a 	beq.w	8008860 <_dtoa_r+0x350>
 800898c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008990:	e766      	b.n	8008860 <_dtoa_r+0x350>
 8008992:	07cf      	lsls	r7, r1, #31
 8008994:	d505      	bpl.n	80089a2 <_dtoa_r+0x492>
 8008996:	ed90 6b00 	vldr	d6, [r0]
 800899a:	3201      	adds	r2, #1
 800899c:	2401      	movs	r4, #1
 800899e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089a2:	1049      	asrs	r1, r1, #1
 80089a4:	3008      	adds	r0, #8
 80089a6:	e7ed      	b.n	8008984 <_dtoa_r+0x474>
 80089a8:	2202      	movs	r2, #2
 80089aa:	e759      	b.n	8008860 <_dtoa_r+0x350>
 80089ac:	465f      	mov	r7, fp
 80089ae:	4648      	mov	r0, r9
 80089b0:	e775      	b.n	800889e <_dtoa_r+0x38e>
 80089b2:	ec42 1b17 	vmov	d7, r1, r2
 80089b6:	4a5c      	ldr	r2, [pc, #368]	; (8008b28 <_dtoa_r+0x618>)
 80089b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80089bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80089c0:	9a01      	ldr	r2, [sp, #4]
 80089c2:	1814      	adds	r4, r2, r0
 80089c4:	9a07      	ldr	r2, [sp, #28]
 80089c6:	b352      	cbz	r2, 8008a1e <_dtoa_r+0x50e>
 80089c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80089cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80089d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80089d4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80089d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80089dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80089e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80089e4:	ee14 2a90 	vmov	r2, s9
 80089e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80089ec:	3230      	adds	r2, #48	; 0x30
 80089ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 80089f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80089f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089fa:	f808 2b01 	strb.w	r2, [r8], #1
 80089fe:	d439      	bmi.n	8008a74 <_dtoa_r+0x564>
 8008a00:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008a04:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a0c:	d472      	bmi.n	8008af4 <_dtoa_r+0x5e4>
 8008a0e:	45a0      	cmp	r8, r4
 8008a10:	f43f af6b 	beq.w	80088ea <_dtoa_r+0x3da>
 8008a14:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008a18:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008a1c:	e7e0      	b.n	80089e0 <_dtoa_r+0x4d0>
 8008a1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008a22:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008a26:	4621      	mov	r1, r4
 8008a28:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008a2c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008a30:	ee14 2a90 	vmov	r2, s9
 8008a34:	3230      	adds	r2, #48	; 0x30
 8008a36:	f808 2b01 	strb.w	r2, [r8], #1
 8008a3a:	45a0      	cmp	r8, r4
 8008a3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008a40:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008a44:	d118      	bne.n	8008a78 <_dtoa_r+0x568>
 8008a46:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008a4a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008a4e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a56:	dc4d      	bgt.n	8008af4 <_dtoa_r+0x5e4>
 8008a58:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008a5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a64:	f57f af41 	bpl.w	80088ea <_dtoa_r+0x3da>
 8008a68:	4688      	mov	r8, r1
 8008a6a:	3901      	subs	r1, #1
 8008a6c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008a70:	2b30      	cmp	r3, #48	; 0x30
 8008a72:	d0f9      	beq.n	8008a68 <_dtoa_r+0x558>
 8008a74:	46bb      	mov	fp, r7
 8008a76:	e02a      	b.n	8008ace <_dtoa_r+0x5be>
 8008a78:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008a7c:	e7d6      	b.n	8008a2c <_dtoa_r+0x51c>
 8008a7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a82:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008a86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008a8a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008a8e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008a92:	ee15 3a10 	vmov	r3, s10
 8008a96:	3330      	adds	r3, #48	; 0x30
 8008a98:	f808 3b01 	strb.w	r3, [r8], #1
 8008a9c:	9b01      	ldr	r3, [sp, #4]
 8008a9e:	eba8 0303 	sub.w	r3, r8, r3
 8008aa2:	4599      	cmp	r9, r3
 8008aa4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008aa8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008aac:	d133      	bne.n	8008b16 <_dtoa_r+0x606>
 8008aae:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008ab2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aba:	dc1a      	bgt.n	8008af2 <_dtoa_r+0x5e2>
 8008abc:	eeb4 7b46 	vcmp.f64	d7, d6
 8008ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac4:	d103      	bne.n	8008ace <_dtoa_r+0x5be>
 8008ac6:	ee15 3a10 	vmov	r3, s10
 8008aca:	07d9      	lsls	r1, r3, #31
 8008acc:	d411      	bmi.n	8008af2 <_dtoa_r+0x5e2>
 8008ace:	4629      	mov	r1, r5
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f000 fae5 	bl	80090a0 <_Bfree>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ada:	f888 3000 	strb.w	r3, [r8]
 8008ade:	f10b 0301 	add.w	r3, fp, #1
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f43f ad61 	beq.w	80085ae <_dtoa_r+0x9e>
 8008aec:	f8c3 8000 	str.w	r8, [r3]
 8008af0:	e55d      	b.n	80085ae <_dtoa_r+0x9e>
 8008af2:	465f      	mov	r7, fp
 8008af4:	4643      	mov	r3, r8
 8008af6:	4698      	mov	r8, r3
 8008af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008afc:	2a39      	cmp	r2, #57	; 0x39
 8008afe:	d106      	bne.n	8008b0e <_dtoa_r+0x5fe>
 8008b00:	9a01      	ldr	r2, [sp, #4]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d1f7      	bne.n	8008af6 <_dtoa_r+0x5e6>
 8008b06:	9901      	ldr	r1, [sp, #4]
 8008b08:	2230      	movs	r2, #48	; 0x30
 8008b0a:	3701      	adds	r7, #1
 8008b0c:	700a      	strb	r2, [r1, #0]
 8008b0e:	781a      	ldrb	r2, [r3, #0]
 8008b10:	3201      	adds	r2, #1
 8008b12:	701a      	strb	r2, [r3, #0]
 8008b14:	e7ae      	b.n	8008a74 <_dtoa_r+0x564>
 8008b16:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008b1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b22:	d1b2      	bne.n	8008a8a <_dtoa_r+0x57a>
 8008b24:	e7d3      	b.n	8008ace <_dtoa_r+0x5be>
 8008b26:	bf00      	nop
 8008b28:	0800aad8 	.word	0x0800aad8
 8008b2c:	0800aab0 	.word	0x0800aab0
 8008b30:	9907      	ldr	r1, [sp, #28]
 8008b32:	2900      	cmp	r1, #0
 8008b34:	f000 80d0 	beq.w	8008cd8 <_dtoa_r+0x7c8>
 8008b38:	9906      	ldr	r1, [sp, #24]
 8008b3a:	2901      	cmp	r1, #1
 8008b3c:	f300 80b4 	bgt.w	8008ca8 <_dtoa_r+0x798>
 8008b40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b42:	2900      	cmp	r1, #0
 8008b44:	f000 80ac 	beq.w	8008ca0 <_dtoa_r+0x790>
 8008b48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b4c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008b50:	461c      	mov	r4, r3
 8008b52:	930a      	str	r3, [sp, #40]	; 0x28
 8008b54:	9b04      	ldr	r3, [sp, #16]
 8008b56:	4413      	add	r3, r2
 8008b58:	9304      	str	r3, [sp, #16]
 8008b5a:	9b05      	ldr	r3, [sp, #20]
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	4413      	add	r3, r2
 8008b60:	4630      	mov	r0, r6
 8008b62:	9305      	str	r3, [sp, #20]
 8008b64:	f000 fb54 	bl	8009210 <__i2b>
 8008b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6a:	4607      	mov	r7, r0
 8008b6c:	f1b8 0f00 	cmp.w	r8, #0
 8008b70:	dd0d      	ble.n	8008b8e <_dtoa_r+0x67e>
 8008b72:	9a05      	ldr	r2, [sp, #20]
 8008b74:	2a00      	cmp	r2, #0
 8008b76:	dd0a      	ble.n	8008b8e <_dtoa_r+0x67e>
 8008b78:	4542      	cmp	r2, r8
 8008b7a:	9904      	ldr	r1, [sp, #16]
 8008b7c:	bfa8      	it	ge
 8008b7e:	4642      	movge	r2, r8
 8008b80:	1a89      	subs	r1, r1, r2
 8008b82:	9104      	str	r1, [sp, #16]
 8008b84:	9905      	ldr	r1, [sp, #20]
 8008b86:	eba8 0802 	sub.w	r8, r8, r2
 8008b8a:	1a8a      	subs	r2, r1, r2
 8008b8c:	9205      	str	r2, [sp, #20]
 8008b8e:	b303      	cbz	r3, 8008bd2 <_dtoa_r+0x6c2>
 8008b90:	9a07      	ldr	r2, [sp, #28]
 8008b92:	2a00      	cmp	r2, #0
 8008b94:	f000 80a5 	beq.w	8008ce2 <_dtoa_r+0x7d2>
 8008b98:	2c00      	cmp	r4, #0
 8008b9a:	dd13      	ble.n	8008bc4 <_dtoa_r+0x6b4>
 8008b9c:	4639      	mov	r1, r7
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ba4:	f000 fbf4 	bl	8009390 <__pow5mult>
 8008ba8:	462a      	mov	r2, r5
 8008baa:	4601      	mov	r1, r0
 8008bac:	4607      	mov	r7, r0
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f000 fb44 	bl	800923c <__multiply>
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	900a      	str	r0, [sp, #40]	; 0x28
 8008bb8:	4630      	mov	r0, r6
 8008bba:	f000 fa71 	bl	80090a0 <_Bfree>
 8008bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bc2:	4615      	mov	r5, r2
 8008bc4:	1b1a      	subs	r2, r3, r4
 8008bc6:	d004      	beq.n	8008bd2 <_dtoa_r+0x6c2>
 8008bc8:	4629      	mov	r1, r5
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f000 fbe0 	bl	8009390 <__pow5mult>
 8008bd0:	4605      	mov	r5, r0
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f000 fb1b 	bl	8009210 <__i2b>
 8008bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	4604      	mov	r4, r0
 8008be0:	f340 8081 	ble.w	8008ce6 <_dtoa_r+0x7d6>
 8008be4:	461a      	mov	r2, r3
 8008be6:	4601      	mov	r1, r0
 8008be8:	4630      	mov	r0, r6
 8008bea:	f000 fbd1 	bl	8009390 <__pow5mult>
 8008bee:	9b06      	ldr	r3, [sp, #24]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	dd7a      	ble.n	8008cec <_dtoa_r+0x7dc>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8008bfa:	6922      	ldr	r2, [r4, #16]
 8008bfc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008c00:	6910      	ldr	r0, [r2, #16]
 8008c02:	f000 fab5 	bl	8009170 <__hi0bits>
 8008c06:	f1c0 0020 	rsb	r0, r0, #32
 8008c0a:	9b05      	ldr	r3, [sp, #20]
 8008c0c:	4418      	add	r0, r3
 8008c0e:	f010 001f 	ands.w	r0, r0, #31
 8008c12:	f000 808c 	beq.w	8008d2e <_dtoa_r+0x81e>
 8008c16:	f1c0 0220 	rsb	r2, r0, #32
 8008c1a:	2a04      	cmp	r2, #4
 8008c1c:	f340 8085 	ble.w	8008d2a <_dtoa_r+0x81a>
 8008c20:	f1c0 001c 	rsb	r0, r0, #28
 8008c24:	9b04      	ldr	r3, [sp, #16]
 8008c26:	4403      	add	r3, r0
 8008c28:	9304      	str	r3, [sp, #16]
 8008c2a:	9b05      	ldr	r3, [sp, #20]
 8008c2c:	4403      	add	r3, r0
 8008c2e:	4480      	add	r8, r0
 8008c30:	9305      	str	r3, [sp, #20]
 8008c32:	9b04      	ldr	r3, [sp, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	dd05      	ble.n	8008c44 <_dtoa_r+0x734>
 8008c38:	4629      	mov	r1, r5
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f000 fc01 	bl	8009444 <__lshift>
 8008c42:	4605      	mov	r5, r0
 8008c44:	9b05      	ldr	r3, [sp, #20]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	dd05      	ble.n	8008c56 <_dtoa_r+0x746>
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f000 fbf8 	bl	8009444 <__lshift>
 8008c54:	4604      	mov	r4, r0
 8008c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d06a      	beq.n	8008d32 <_dtoa_r+0x822>
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	4628      	mov	r0, r5
 8008c60:	f000 fc60 	bl	8009524 <__mcmp>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	da64      	bge.n	8008d32 <_dtoa_r+0x822>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	220a      	movs	r2, #10
 8008c6e:	4630      	mov	r0, r6
 8008c70:	f000 fa38 	bl	80090e4 <__multadd>
 8008c74:	9b07      	ldr	r3, [sp, #28]
 8008c76:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 8191 	beq.w	8008fa4 <_dtoa_r+0xa94>
 8008c82:	4639      	mov	r1, r7
 8008c84:	2300      	movs	r3, #0
 8008c86:	220a      	movs	r2, #10
 8008c88:	4630      	mov	r0, r6
 8008c8a:	f000 fa2b 	bl	80090e4 <__multadd>
 8008c8e:	f1ba 0f00 	cmp.w	sl, #0
 8008c92:	4607      	mov	r7, r0
 8008c94:	f300 808d 	bgt.w	8008db2 <_dtoa_r+0x8a2>
 8008c98:	9b06      	ldr	r3, [sp, #24]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	dc50      	bgt.n	8008d40 <_dtoa_r+0x830>
 8008c9e:	e088      	b.n	8008db2 <_dtoa_r+0x8a2>
 8008ca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ca2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008ca6:	e751      	b.n	8008b4c <_dtoa_r+0x63c>
 8008ca8:	f109 34ff 	add.w	r4, r9, #4294967295
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	bfbf      	itttt	lt
 8008cb0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8008cb2:	1ae3      	sublt	r3, r4, r3
 8008cb4:	18d2      	addlt	r2, r2, r3
 8008cb6:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008cb8:	bfb6      	itet	lt
 8008cba:	4623      	movlt	r3, r4
 8008cbc:	1b1c      	subge	r4, r3, r4
 8008cbe:	2400      	movlt	r4, #0
 8008cc0:	f1b9 0f00 	cmp.w	r9, #0
 8008cc4:	bfb5      	itete	lt
 8008cc6:	9a04      	ldrlt	r2, [sp, #16]
 8008cc8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008ccc:	eba2 0809 	sublt.w	r8, r2, r9
 8008cd0:	464a      	movge	r2, r9
 8008cd2:	bfb8      	it	lt
 8008cd4:	2200      	movlt	r2, #0
 8008cd6:	e73c      	b.n	8008b52 <_dtoa_r+0x642>
 8008cd8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008cdc:	9f07      	ldr	r7, [sp, #28]
 8008cde:	461c      	mov	r4, r3
 8008ce0:	e744      	b.n	8008b6c <_dtoa_r+0x65c>
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	e770      	b.n	8008bc8 <_dtoa_r+0x6b8>
 8008ce6:	9b06      	ldr	r3, [sp, #24]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	dc18      	bgt.n	8008d1e <_dtoa_r+0x80e>
 8008cec:	9b02      	ldr	r3, [sp, #8]
 8008cee:	b9b3      	cbnz	r3, 8008d1e <_dtoa_r+0x80e>
 8008cf0:	9b03      	ldr	r3, [sp, #12]
 8008cf2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008cf6:	b9a2      	cbnz	r2, 8008d22 <_dtoa_r+0x812>
 8008cf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008cfc:	0d12      	lsrs	r2, r2, #20
 8008cfe:	0512      	lsls	r2, r2, #20
 8008d00:	b18a      	cbz	r2, 8008d26 <_dtoa_r+0x816>
 8008d02:	9b04      	ldr	r3, [sp, #16]
 8008d04:	3301      	adds	r3, #1
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	9b05      	ldr	r3, [sp, #20]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	2301      	movs	r3, #1
 8008d10:	930a      	str	r3, [sp, #40]	; 0x28
 8008d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f47f af70 	bne.w	8008bfa <_dtoa_r+0x6ea>
 8008d1a:	2001      	movs	r0, #1
 8008d1c:	e775      	b.n	8008c0a <_dtoa_r+0x6fa>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e7f6      	b.n	8008d10 <_dtoa_r+0x800>
 8008d22:	9b02      	ldr	r3, [sp, #8]
 8008d24:	e7f4      	b.n	8008d10 <_dtoa_r+0x800>
 8008d26:	920a      	str	r2, [sp, #40]	; 0x28
 8008d28:	e7f3      	b.n	8008d12 <_dtoa_r+0x802>
 8008d2a:	d082      	beq.n	8008c32 <_dtoa_r+0x722>
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	301c      	adds	r0, #28
 8008d30:	e778      	b.n	8008c24 <_dtoa_r+0x714>
 8008d32:	f1b9 0f00 	cmp.w	r9, #0
 8008d36:	dc37      	bgt.n	8008da8 <_dtoa_r+0x898>
 8008d38:	9b06      	ldr	r3, [sp, #24]
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	dd34      	ble.n	8008da8 <_dtoa_r+0x898>
 8008d3e:	46ca      	mov	sl, r9
 8008d40:	f1ba 0f00 	cmp.w	sl, #0
 8008d44:	d10d      	bne.n	8008d62 <_dtoa_r+0x852>
 8008d46:	4621      	mov	r1, r4
 8008d48:	4653      	mov	r3, sl
 8008d4a:	2205      	movs	r2, #5
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	f000 f9c9 	bl	80090e4 <__multadd>
 8008d52:	4601      	mov	r1, r0
 8008d54:	4604      	mov	r4, r0
 8008d56:	4628      	mov	r0, r5
 8008d58:	f000 fbe4 	bl	8009524 <__mcmp>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	f73f adeb 	bgt.w	8008938 <_dtoa_r+0x428>
 8008d62:	9b08      	ldr	r3, [sp, #32]
 8008d64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008d68:	ea6f 0b03 	mvn.w	fp, r3
 8008d6c:	f04f 0900 	mov.w	r9, #0
 8008d70:	4621      	mov	r1, r4
 8008d72:	4630      	mov	r0, r6
 8008d74:	f000 f994 	bl	80090a0 <_Bfree>
 8008d78:	2f00      	cmp	r7, #0
 8008d7a:	f43f aea8 	beq.w	8008ace <_dtoa_r+0x5be>
 8008d7e:	f1b9 0f00 	cmp.w	r9, #0
 8008d82:	d005      	beq.n	8008d90 <_dtoa_r+0x880>
 8008d84:	45b9      	cmp	r9, r7
 8008d86:	d003      	beq.n	8008d90 <_dtoa_r+0x880>
 8008d88:	4649      	mov	r1, r9
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f000 f988 	bl	80090a0 <_Bfree>
 8008d90:	4639      	mov	r1, r7
 8008d92:	4630      	mov	r0, r6
 8008d94:	f000 f984 	bl	80090a0 <_Bfree>
 8008d98:	e699      	b.n	8008ace <_dtoa_r+0x5be>
 8008d9a:	2400      	movs	r4, #0
 8008d9c:	4627      	mov	r7, r4
 8008d9e:	e7e0      	b.n	8008d62 <_dtoa_r+0x852>
 8008da0:	46bb      	mov	fp, r7
 8008da2:	4604      	mov	r4, r0
 8008da4:	4607      	mov	r7, r0
 8008da6:	e5c7      	b.n	8008938 <_dtoa_r+0x428>
 8008da8:	9b07      	ldr	r3, [sp, #28]
 8008daa:	46ca      	mov	sl, r9
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 8100 	beq.w	8008fb2 <_dtoa_r+0xaa2>
 8008db2:	f1b8 0f00 	cmp.w	r8, #0
 8008db6:	dd05      	ble.n	8008dc4 <_dtoa_r+0x8b4>
 8008db8:	4639      	mov	r1, r7
 8008dba:	4642      	mov	r2, r8
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	f000 fb41 	bl	8009444 <__lshift>
 8008dc2:	4607      	mov	r7, r0
 8008dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d05d      	beq.n	8008e86 <_dtoa_r+0x976>
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f000 f927 	bl	8009020 <_Balloc>
 8008dd2:	4680      	mov	r8, r0
 8008dd4:	b928      	cbnz	r0, 8008de2 <_dtoa_r+0x8d2>
 8008dd6:	4b82      	ldr	r3, [pc, #520]	; (8008fe0 <_dtoa_r+0xad0>)
 8008dd8:	4602      	mov	r2, r0
 8008dda:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008dde:	f7ff bbaf 	b.w	8008540 <_dtoa_r+0x30>
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	3202      	adds	r2, #2
 8008de6:	0092      	lsls	r2, r2, #2
 8008de8:	f107 010c 	add.w	r1, r7, #12
 8008dec:	300c      	adds	r0, #12
 8008dee:	f000 f909 	bl	8009004 <memcpy>
 8008df2:	2201      	movs	r2, #1
 8008df4:	4641      	mov	r1, r8
 8008df6:	4630      	mov	r0, r6
 8008df8:	f000 fb24 	bl	8009444 <__lshift>
 8008dfc:	9b01      	ldr	r3, [sp, #4]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	9b01      	ldr	r3, [sp, #4]
 8008e04:	4453      	add	r3, sl
 8008e06:	9308      	str	r3, [sp, #32]
 8008e08:	9b02      	ldr	r3, [sp, #8]
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	46b9      	mov	r9, r7
 8008e10:	9307      	str	r3, [sp, #28]
 8008e12:	4607      	mov	r7, r0
 8008e14:	9b04      	ldr	r3, [sp, #16]
 8008e16:	4621      	mov	r1, r4
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	9302      	str	r3, [sp, #8]
 8008e1e:	f7ff fae9 	bl	80083f4 <quorem>
 8008e22:	4603      	mov	r3, r0
 8008e24:	3330      	adds	r3, #48	; 0x30
 8008e26:	9005      	str	r0, [sp, #20]
 8008e28:	4649      	mov	r1, r9
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e2e:	f000 fb79 	bl	8009524 <__mcmp>
 8008e32:	463a      	mov	r2, r7
 8008e34:	4682      	mov	sl, r0
 8008e36:	4621      	mov	r1, r4
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f000 fb8f 	bl	800955c <__mdiff>
 8008e3e:	68c2      	ldr	r2, [r0, #12]
 8008e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e42:	4680      	mov	r8, r0
 8008e44:	bb0a      	cbnz	r2, 8008e8a <_dtoa_r+0x97a>
 8008e46:	4601      	mov	r1, r0
 8008e48:	4628      	mov	r0, r5
 8008e4a:	f000 fb6b 	bl	8009524 <__mcmp>
 8008e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e50:	4602      	mov	r2, r0
 8008e52:	4641      	mov	r1, r8
 8008e54:	4630      	mov	r0, r6
 8008e56:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008e5a:	f000 f921 	bl	80090a0 <_Bfree>
 8008e5e:	9b06      	ldr	r3, [sp, #24]
 8008e60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e62:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008e66:	ea43 0102 	orr.w	r1, r3, r2
 8008e6a:	9b07      	ldr	r3, [sp, #28]
 8008e6c:	430b      	orrs	r3, r1
 8008e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e70:	d10d      	bne.n	8008e8e <_dtoa_r+0x97e>
 8008e72:	2b39      	cmp	r3, #57	; 0x39
 8008e74:	d029      	beq.n	8008eca <_dtoa_r+0x9ba>
 8008e76:	f1ba 0f00 	cmp.w	sl, #0
 8008e7a:	dd01      	ble.n	8008e80 <_dtoa_r+0x970>
 8008e7c:	9b05      	ldr	r3, [sp, #20]
 8008e7e:	3331      	adds	r3, #49	; 0x31
 8008e80:	9a02      	ldr	r2, [sp, #8]
 8008e82:	7013      	strb	r3, [r2, #0]
 8008e84:	e774      	b.n	8008d70 <_dtoa_r+0x860>
 8008e86:	4638      	mov	r0, r7
 8008e88:	e7b8      	b.n	8008dfc <_dtoa_r+0x8ec>
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	e7e1      	b.n	8008e52 <_dtoa_r+0x942>
 8008e8e:	f1ba 0f00 	cmp.w	sl, #0
 8008e92:	db06      	blt.n	8008ea2 <_dtoa_r+0x992>
 8008e94:	9906      	ldr	r1, [sp, #24]
 8008e96:	ea41 0a0a 	orr.w	sl, r1, sl
 8008e9a:	9907      	ldr	r1, [sp, #28]
 8008e9c:	ea5a 0101 	orrs.w	r1, sl, r1
 8008ea0:	d120      	bne.n	8008ee4 <_dtoa_r+0x9d4>
 8008ea2:	2a00      	cmp	r2, #0
 8008ea4:	ddec      	ble.n	8008e80 <_dtoa_r+0x970>
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	4630      	mov	r0, r6
 8008eac:	9304      	str	r3, [sp, #16]
 8008eae:	f000 fac9 	bl	8009444 <__lshift>
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	f000 fb35 	bl	8009524 <__mcmp>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	9b04      	ldr	r3, [sp, #16]
 8008ebe:	dc02      	bgt.n	8008ec6 <_dtoa_r+0x9b6>
 8008ec0:	d1de      	bne.n	8008e80 <_dtoa_r+0x970>
 8008ec2:	07da      	lsls	r2, r3, #31
 8008ec4:	d5dc      	bpl.n	8008e80 <_dtoa_r+0x970>
 8008ec6:	2b39      	cmp	r3, #57	; 0x39
 8008ec8:	d1d8      	bne.n	8008e7c <_dtoa_r+0x96c>
 8008eca:	9a02      	ldr	r2, [sp, #8]
 8008ecc:	2339      	movs	r3, #57	; 0x39
 8008ece:	7013      	strb	r3, [r2, #0]
 8008ed0:	4643      	mov	r3, r8
 8008ed2:	4698      	mov	r8, r3
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008eda:	2a39      	cmp	r2, #57	; 0x39
 8008edc:	d051      	beq.n	8008f82 <_dtoa_r+0xa72>
 8008ede:	3201      	adds	r2, #1
 8008ee0:	701a      	strb	r2, [r3, #0]
 8008ee2:	e745      	b.n	8008d70 <_dtoa_r+0x860>
 8008ee4:	2a00      	cmp	r2, #0
 8008ee6:	dd03      	ble.n	8008ef0 <_dtoa_r+0x9e0>
 8008ee8:	2b39      	cmp	r3, #57	; 0x39
 8008eea:	d0ee      	beq.n	8008eca <_dtoa_r+0x9ba>
 8008eec:	3301      	adds	r3, #1
 8008eee:	e7c7      	b.n	8008e80 <_dtoa_r+0x970>
 8008ef0:	9a04      	ldr	r2, [sp, #16]
 8008ef2:	9908      	ldr	r1, [sp, #32]
 8008ef4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ef8:	428a      	cmp	r2, r1
 8008efa:	d02b      	beq.n	8008f54 <_dtoa_r+0xa44>
 8008efc:	4629      	mov	r1, r5
 8008efe:	2300      	movs	r3, #0
 8008f00:	220a      	movs	r2, #10
 8008f02:	4630      	mov	r0, r6
 8008f04:	f000 f8ee 	bl	80090e4 <__multadd>
 8008f08:	45b9      	cmp	r9, r7
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	f04f 0300 	mov.w	r3, #0
 8008f10:	f04f 020a 	mov.w	r2, #10
 8008f14:	4649      	mov	r1, r9
 8008f16:	4630      	mov	r0, r6
 8008f18:	d107      	bne.n	8008f2a <_dtoa_r+0xa1a>
 8008f1a:	f000 f8e3 	bl	80090e4 <__multadd>
 8008f1e:	4681      	mov	r9, r0
 8008f20:	4607      	mov	r7, r0
 8008f22:	9b04      	ldr	r3, [sp, #16]
 8008f24:	3301      	adds	r3, #1
 8008f26:	9304      	str	r3, [sp, #16]
 8008f28:	e774      	b.n	8008e14 <_dtoa_r+0x904>
 8008f2a:	f000 f8db 	bl	80090e4 <__multadd>
 8008f2e:	4639      	mov	r1, r7
 8008f30:	4681      	mov	r9, r0
 8008f32:	2300      	movs	r3, #0
 8008f34:	220a      	movs	r2, #10
 8008f36:	4630      	mov	r0, r6
 8008f38:	f000 f8d4 	bl	80090e4 <__multadd>
 8008f3c:	4607      	mov	r7, r0
 8008f3e:	e7f0      	b.n	8008f22 <_dtoa_r+0xa12>
 8008f40:	f1ba 0f00 	cmp.w	sl, #0
 8008f44:	9a01      	ldr	r2, [sp, #4]
 8008f46:	bfcc      	ite	gt
 8008f48:	46d0      	movgt	r8, sl
 8008f4a:	f04f 0801 	movle.w	r8, #1
 8008f4e:	4490      	add	r8, r2
 8008f50:	f04f 0900 	mov.w	r9, #0
 8008f54:	4629      	mov	r1, r5
 8008f56:	2201      	movs	r2, #1
 8008f58:	4630      	mov	r0, r6
 8008f5a:	9302      	str	r3, [sp, #8]
 8008f5c:	f000 fa72 	bl	8009444 <__lshift>
 8008f60:	4621      	mov	r1, r4
 8008f62:	4605      	mov	r5, r0
 8008f64:	f000 fade 	bl	8009524 <__mcmp>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	dcb1      	bgt.n	8008ed0 <_dtoa_r+0x9c0>
 8008f6c:	d102      	bne.n	8008f74 <_dtoa_r+0xa64>
 8008f6e:	9b02      	ldr	r3, [sp, #8]
 8008f70:	07db      	lsls	r3, r3, #31
 8008f72:	d4ad      	bmi.n	8008ed0 <_dtoa_r+0x9c0>
 8008f74:	4643      	mov	r3, r8
 8008f76:	4698      	mov	r8, r3
 8008f78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f7c:	2a30      	cmp	r2, #48	; 0x30
 8008f7e:	d0fa      	beq.n	8008f76 <_dtoa_r+0xa66>
 8008f80:	e6f6      	b.n	8008d70 <_dtoa_r+0x860>
 8008f82:	9a01      	ldr	r2, [sp, #4]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d1a4      	bne.n	8008ed2 <_dtoa_r+0x9c2>
 8008f88:	f10b 0b01 	add.w	fp, fp, #1
 8008f8c:	2331      	movs	r3, #49	; 0x31
 8008f8e:	e778      	b.n	8008e82 <_dtoa_r+0x972>
 8008f90:	4b14      	ldr	r3, [pc, #80]	; (8008fe4 <_dtoa_r+0xad4>)
 8008f92:	f7ff bb27 	b.w	80085e4 <_dtoa_r+0xd4>
 8008f96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f47f ab03 	bne.w	80085a4 <_dtoa_r+0x94>
 8008f9e:	4b12      	ldr	r3, [pc, #72]	; (8008fe8 <_dtoa_r+0xad8>)
 8008fa0:	f7ff bb20 	b.w	80085e4 <_dtoa_r+0xd4>
 8008fa4:	f1ba 0f00 	cmp.w	sl, #0
 8008fa8:	dc03      	bgt.n	8008fb2 <_dtoa_r+0xaa2>
 8008faa:	9b06      	ldr	r3, [sp, #24]
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	f73f aec7 	bgt.w	8008d40 <_dtoa_r+0x830>
 8008fb2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f7ff fa1b 	bl	80083f4 <quorem>
 8008fbe:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008fc2:	f808 3b01 	strb.w	r3, [r8], #1
 8008fc6:	9a01      	ldr	r2, [sp, #4]
 8008fc8:	eba8 0202 	sub.w	r2, r8, r2
 8008fcc:	4592      	cmp	sl, r2
 8008fce:	ddb7      	ble.n	8008f40 <_dtoa_r+0xa30>
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	220a      	movs	r2, #10
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f000 f884 	bl	80090e4 <__multadd>
 8008fdc:	4605      	mov	r5, r0
 8008fde:	e7ea      	b.n	8008fb6 <_dtoa_r+0xaa6>
 8008fe0:	0800aa3f 	.word	0x0800aa3f
 8008fe4:	0800a99c 	.word	0x0800a99c
 8008fe8:	0800a9c0 	.word	0x0800a9c0

08008fec <_localeconv_r>:
 8008fec:	4800      	ldr	r0, [pc, #0]	; (8008ff0 <_localeconv_r+0x4>)
 8008fee:	4770      	bx	lr
 8008ff0:	24000164 	.word	0x24000164

08008ff4 <malloc>:
 8008ff4:	4b02      	ldr	r3, [pc, #8]	; (8009000 <malloc+0xc>)
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	f000 bc17 	b.w	800982c <_malloc_r>
 8008ffe:	bf00      	nop
 8009000:	24000010 	.word	0x24000010

08009004 <memcpy>:
 8009004:	440a      	add	r2, r1
 8009006:	4291      	cmp	r1, r2
 8009008:	f100 33ff 	add.w	r3, r0, #4294967295
 800900c:	d100      	bne.n	8009010 <memcpy+0xc>
 800900e:	4770      	bx	lr
 8009010:	b510      	push	{r4, lr}
 8009012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800901a:	4291      	cmp	r1, r2
 800901c:	d1f9      	bne.n	8009012 <memcpy+0xe>
 800901e:	bd10      	pop	{r4, pc}

08009020 <_Balloc>:
 8009020:	b570      	push	{r4, r5, r6, lr}
 8009022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009024:	4604      	mov	r4, r0
 8009026:	460d      	mov	r5, r1
 8009028:	b976      	cbnz	r6, 8009048 <_Balloc+0x28>
 800902a:	2010      	movs	r0, #16
 800902c:	f7ff ffe2 	bl	8008ff4 <malloc>
 8009030:	4602      	mov	r2, r0
 8009032:	6260      	str	r0, [r4, #36]	; 0x24
 8009034:	b920      	cbnz	r0, 8009040 <_Balloc+0x20>
 8009036:	4b18      	ldr	r3, [pc, #96]	; (8009098 <_Balloc+0x78>)
 8009038:	4818      	ldr	r0, [pc, #96]	; (800909c <_Balloc+0x7c>)
 800903a:	2166      	movs	r1, #102	; 0x66
 800903c:	f000 fdd6 	bl	8009bec <__assert_func>
 8009040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009044:	6006      	str	r6, [r0, #0]
 8009046:	60c6      	str	r6, [r0, #12]
 8009048:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800904a:	68f3      	ldr	r3, [r6, #12]
 800904c:	b183      	cbz	r3, 8009070 <_Balloc+0x50>
 800904e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009056:	b9b8      	cbnz	r0, 8009088 <_Balloc+0x68>
 8009058:	2101      	movs	r1, #1
 800905a:	fa01 f605 	lsl.w	r6, r1, r5
 800905e:	1d72      	adds	r2, r6, #5
 8009060:	0092      	lsls	r2, r2, #2
 8009062:	4620      	mov	r0, r4
 8009064:	f000 fb60 	bl	8009728 <_calloc_r>
 8009068:	b160      	cbz	r0, 8009084 <_Balloc+0x64>
 800906a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800906e:	e00e      	b.n	800908e <_Balloc+0x6e>
 8009070:	2221      	movs	r2, #33	; 0x21
 8009072:	2104      	movs	r1, #4
 8009074:	4620      	mov	r0, r4
 8009076:	f000 fb57 	bl	8009728 <_calloc_r>
 800907a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800907c:	60f0      	str	r0, [r6, #12]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1e4      	bne.n	800904e <_Balloc+0x2e>
 8009084:	2000      	movs	r0, #0
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	6802      	ldr	r2, [r0, #0]
 800908a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800908e:	2300      	movs	r3, #0
 8009090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009094:	e7f7      	b.n	8009086 <_Balloc+0x66>
 8009096:	bf00      	nop
 8009098:	0800a9cd 	.word	0x0800a9cd
 800909c:	0800aa50 	.word	0x0800aa50

080090a0 <_Bfree>:
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090a4:	4605      	mov	r5, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	b976      	cbnz	r6, 80090c8 <_Bfree+0x28>
 80090aa:	2010      	movs	r0, #16
 80090ac:	f7ff ffa2 	bl	8008ff4 <malloc>
 80090b0:	4602      	mov	r2, r0
 80090b2:	6268      	str	r0, [r5, #36]	; 0x24
 80090b4:	b920      	cbnz	r0, 80090c0 <_Bfree+0x20>
 80090b6:	4b09      	ldr	r3, [pc, #36]	; (80090dc <_Bfree+0x3c>)
 80090b8:	4809      	ldr	r0, [pc, #36]	; (80090e0 <_Bfree+0x40>)
 80090ba:	218a      	movs	r1, #138	; 0x8a
 80090bc:	f000 fd96 	bl	8009bec <__assert_func>
 80090c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090c4:	6006      	str	r6, [r0, #0]
 80090c6:	60c6      	str	r6, [r0, #12]
 80090c8:	b13c      	cbz	r4, 80090da <_Bfree+0x3a>
 80090ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090cc:	6862      	ldr	r2, [r4, #4]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090d4:	6021      	str	r1, [r4, #0]
 80090d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090da:	bd70      	pop	{r4, r5, r6, pc}
 80090dc:	0800a9cd 	.word	0x0800a9cd
 80090e0:	0800aa50 	.word	0x0800aa50

080090e4 <__multadd>:
 80090e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e8:	690d      	ldr	r5, [r1, #16]
 80090ea:	4607      	mov	r7, r0
 80090ec:	460c      	mov	r4, r1
 80090ee:	461e      	mov	r6, r3
 80090f0:	f101 0c14 	add.w	ip, r1, #20
 80090f4:	2000      	movs	r0, #0
 80090f6:	f8dc 3000 	ldr.w	r3, [ip]
 80090fa:	b299      	uxth	r1, r3
 80090fc:	fb02 6101 	mla	r1, r2, r1, r6
 8009100:	0c1e      	lsrs	r6, r3, #16
 8009102:	0c0b      	lsrs	r3, r1, #16
 8009104:	fb02 3306 	mla	r3, r2, r6, r3
 8009108:	b289      	uxth	r1, r1
 800910a:	3001      	adds	r0, #1
 800910c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009110:	4285      	cmp	r5, r0
 8009112:	f84c 1b04 	str.w	r1, [ip], #4
 8009116:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800911a:	dcec      	bgt.n	80090f6 <__multadd+0x12>
 800911c:	b30e      	cbz	r6, 8009162 <__multadd+0x7e>
 800911e:	68a3      	ldr	r3, [r4, #8]
 8009120:	42ab      	cmp	r3, r5
 8009122:	dc19      	bgt.n	8009158 <__multadd+0x74>
 8009124:	6861      	ldr	r1, [r4, #4]
 8009126:	4638      	mov	r0, r7
 8009128:	3101      	adds	r1, #1
 800912a:	f7ff ff79 	bl	8009020 <_Balloc>
 800912e:	4680      	mov	r8, r0
 8009130:	b928      	cbnz	r0, 800913e <__multadd+0x5a>
 8009132:	4602      	mov	r2, r0
 8009134:	4b0c      	ldr	r3, [pc, #48]	; (8009168 <__multadd+0x84>)
 8009136:	480d      	ldr	r0, [pc, #52]	; (800916c <__multadd+0x88>)
 8009138:	21b5      	movs	r1, #181	; 0xb5
 800913a:	f000 fd57 	bl	8009bec <__assert_func>
 800913e:	6922      	ldr	r2, [r4, #16]
 8009140:	3202      	adds	r2, #2
 8009142:	f104 010c 	add.w	r1, r4, #12
 8009146:	0092      	lsls	r2, r2, #2
 8009148:	300c      	adds	r0, #12
 800914a:	f7ff ff5b 	bl	8009004 <memcpy>
 800914e:	4621      	mov	r1, r4
 8009150:	4638      	mov	r0, r7
 8009152:	f7ff ffa5 	bl	80090a0 <_Bfree>
 8009156:	4644      	mov	r4, r8
 8009158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800915c:	3501      	adds	r5, #1
 800915e:	615e      	str	r6, [r3, #20]
 8009160:	6125      	str	r5, [r4, #16]
 8009162:	4620      	mov	r0, r4
 8009164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009168:	0800aa3f 	.word	0x0800aa3f
 800916c:	0800aa50 	.word	0x0800aa50

08009170 <__hi0bits>:
 8009170:	0c03      	lsrs	r3, r0, #16
 8009172:	041b      	lsls	r3, r3, #16
 8009174:	b9d3      	cbnz	r3, 80091ac <__hi0bits+0x3c>
 8009176:	0400      	lsls	r0, r0, #16
 8009178:	2310      	movs	r3, #16
 800917a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800917e:	bf04      	itt	eq
 8009180:	0200      	lsleq	r0, r0, #8
 8009182:	3308      	addeq	r3, #8
 8009184:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009188:	bf04      	itt	eq
 800918a:	0100      	lsleq	r0, r0, #4
 800918c:	3304      	addeq	r3, #4
 800918e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009192:	bf04      	itt	eq
 8009194:	0080      	lsleq	r0, r0, #2
 8009196:	3302      	addeq	r3, #2
 8009198:	2800      	cmp	r0, #0
 800919a:	db05      	blt.n	80091a8 <__hi0bits+0x38>
 800919c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091a0:	f103 0301 	add.w	r3, r3, #1
 80091a4:	bf08      	it	eq
 80091a6:	2320      	moveq	r3, #32
 80091a8:	4618      	mov	r0, r3
 80091aa:	4770      	bx	lr
 80091ac:	2300      	movs	r3, #0
 80091ae:	e7e4      	b.n	800917a <__hi0bits+0xa>

080091b0 <__lo0bits>:
 80091b0:	6803      	ldr	r3, [r0, #0]
 80091b2:	f013 0207 	ands.w	r2, r3, #7
 80091b6:	4601      	mov	r1, r0
 80091b8:	d00b      	beq.n	80091d2 <__lo0bits+0x22>
 80091ba:	07da      	lsls	r2, r3, #31
 80091bc:	d423      	bmi.n	8009206 <__lo0bits+0x56>
 80091be:	0798      	lsls	r0, r3, #30
 80091c0:	bf49      	itett	mi
 80091c2:	085b      	lsrmi	r3, r3, #1
 80091c4:	089b      	lsrpl	r3, r3, #2
 80091c6:	2001      	movmi	r0, #1
 80091c8:	600b      	strmi	r3, [r1, #0]
 80091ca:	bf5c      	itt	pl
 80091cc:	600b      	strpl	r3, [r1, #0]
 80091ce:	2002      	movpl	r0, #2
 80091d0:	4770      	bx	lr
 80091d2:	b298      	uxth	r0, r3
 80091d4:	b9a8      	cbnz	r0, 8009202 <__lo0bits+0x52>
 80091d6:	0c1b      	lsrs	r3, r3, #16
 80091d8:	2010      	movs	r0, #16
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	b90a      	cbnz	r2, 80091e2 <__lo0bits+0x32>
 80091de:	3008      	adds	r0, #8
 80091e0:	0a1b      	lsrs	r3, r3, #8
 80091e2:	071a      	lsls	r2, r3, #28
 80091e4:	bf04      	itt	eq
 80091e6:	091b      	lsreq	r3, r3, #4
 80091e8:	3004      	addeq	r0, #4
 80091ea:	079a      	lsls	r2, r3, #30
 80091ec:	bf04      	itt	eq
 80091ee:	089b      	lsreq	r3, r3, #2
 80091f0:	3002      	addeq	r0, #2
 80091f2:	07da      	lsls	r2, r3, #31
 80091f4:	d403      	bmi.n	80091fe <__lo0bits+0x4e>
 80091f6:	085b      	lsrs	r3, r3, #1
 80091f8:	f100 0001 	add.w	r0, r0, #1
 80091fc:	d005      	beq.n	800920a <__lo0bits+0x5a>
 80091fe:	600b      	str	r3, [r1, #0]
 8009200:	4770      	bx	lr
 8009202:	4610      	mov	r0, r2
 8009204:	e7e9      	b.n	80091da <__lo0bits+0x2a>
 8009206:	2000      	movs	r0, #0
 8009208:	4770      	bx	lr
 800920a:	2020      	movs	r0, #32
 800920c:	4770      	bx	lr
	...

08009210 <__i2b>:
 8009210:	b510      	push	{r4, lr}
 8009212:	460c      	mov	r4, r1
 8009214:	2101      	movs	r1, #1
 8009216:	f7ff ff03 	bl	8009020 <_Balloc>
 800921a:	4602      	mov	r2, r0
 800921c:	b928      	cbnz	r0, 800922a <__i2b+0x1a>
 800921e:	4b05      	ldr	r3, [pc, #20]	; (8009234 <__i2b+0x24>)
 8009220:	4805      	ldr	r0, [pc, #20]	; (8009238 <__i2b+0x28>)
 8009222:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009226:	f000 fce1 	bl	8009bec <__assert_func>
 800922a:	2301      	movs	r3, #1
 800922c:	6144      	str	r4, [r0, #20]
 800922e:	6103      	str	r3, [r0, #16]
 8009230:	bd10      	pop	{r4, pc}
 8009232:	bf00      	nop
 8009234:	0800aa3f 	.word	0x0800aa3f
 8009238:	0800aa50 	.word	0x0800aa50

0800923c <__multiply>:
 800923c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009240:	4691      	mov	r9, r2
 8009242:	690a      	ldr	r2, [r1, #16]
 8009244:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009248:	429a      	cmp	r2, r3
 800924a:	bfb8      	it	lt
 800924c:	460b      	movlt	r3, r1
 800924e:	460c      	mov	r4, r1
 8009250:	bfbc      	itt	lt
 8009252:	464c      	movlt	r4, r9
 8009254:	4699      	movlt	r9, r3
 8009256:	6927      	ldr	r7, [r4, #16]
 8009258:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800925c:	68a3      	ldr	r3, [r4, #8]
 800925e:	6861      	ldr	r1, [r4, #4]
 8009260:	eb07 060a 	add.w	r6, r7, sl
 8009264:	42b3      	cmp	r3, r6
 8009266:	b085      	sub	sp, #20
 8009268:	bfb8      	it	lt
 800926a:	3101      	addlt	r1, #1
 800926c:	f7ff fed8 	bl	8009020 <_Balloc>
 8009270:	b930      	cbnz	r0, 8009280 <__multiply+0x44>
 8009272:	4602      	mov	r2, r0
 8009274:	4b44      	ldr	r3, [pc, #272]	; (8009388 <__multiply+0x14c>)
 8009276:	4845      	ldr	r0, [pc, #276]	; (800938c <__multiply+0x150>)
 8009278:	f240 115d 	movw	r1, #349	; 0x15d
 800927c:	f000 fcb6 	bl	8009bec <__assert_func>
 8009280:	f100 0514 	add.w	r5, r0, #20
 8009284:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009288:	462b      	mov	r3, r5
 800928a:	2200      	movs	r2, #0
 800928c:	4543      	cmp	r3, r8
 800928e:	d321      	bcc.n	80092d4 <__multiply+0x98>
 8009290:	f104 0314 	add.w	r3, r4, #20
 8009294:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009298:	f109 0314 	add.w	r3, r9, #20
 800929c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092a0:	9202      	str	r2, [sp, #8]
 80092a2:	1b3a      	subs	r2, r7, r4
 80092a4:	3a15      	subs	r2, #21
 80092a6:	f022 0203 	bic.w	r2, r2, #3
 80092aa:	3204      	adds	r2, #4
 80092ac:	f104 0115 	add.w	r1, r4, #21
 80092b0:	428f      	cmp	r7, r1
 80092b2:	bf38      	it	cc
 80092b4:	2204      	movcc	r2, #4
 80092b6:	9201      	str	r2, [sp, #4]
 80092b8:	9a02      	ldr	r2, [sp, #8]
 80092ba:	9303      	str	r3, [sp, #12]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d80c      	bhi.n	80092da <__multiply+0x9e>
 80092c0:	2e00      	cmp	r6, #0
 80092c2:	dd03      	ble.n	80092cc <__multiply+0x90>
 80092c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d05a      	beq.n	8009382 <__multiply+0x146>
 80092cc:	6106      	str	r6, [r0, #16]
 80092ce:	b005      	add	sp, #20
 80092d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d4:	f843 2b04 	str.w	r2, [r3], #4
 80092d8:	e7d8      	b.n	800928c <__multiply+0x50>
 80092da:	f8b3 a000 	ldrh.w	sl, [r3]
 80092de:	f1ba 0f00 	cmp.w	sl, #0
 80092e2:	d024      	beq.n	800932e <__multiply+0xf2>
 80092e4:	f104 0e14 	add.w	lr, r4, #20
 80092e8:	46a9      	mov	r9, r5
 80092ea:	f04f 0c00 	mov.w	ip, #0
 80092ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80092f2:	f8d9 1000 	ldr.w	r1, [r9]
 80092f6:	fa1f fb82 	uxth.w	fp, r2
 80092fa:	b289      	uxth	r1, r1
 80092fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009300:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009304:	f8d9 2000 	ldr.w	r2, [r9]
 8009308:	4461      	add	r1, ip
 800930a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800930e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009312:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009316:	b289      	uxth	r1, r1
 8009318:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800931c:	4577      	cmp	r7, lr
 800931e:	f849 1b04 	str.w	r1, [r9], #4
 8009322:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009326:	d8e2      	bhi.n	80092ee <__multiply+0xb2>
 8009328:	9a01      	ldr	r2, [sp, #4]
 800932a:	f845 c002 	str.w	ip, [r5, r2]
 800932e:	9a03      	ldr	r2, [sp, #12]
 8009330:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009334:	3304      	adds	r3, #4
 8009336:	f1b9 0f00 	cmp.w	r9, #0
 800933a:	d020      	beq.n	800937e <__multiply+0x142>
 800933c:	6829      	ldr	r1, [r5, #0]
 800933e:	f104 0c14 	add.w	ip, r4, #20
 8009342:	46ae      	mov	lr, r5
 8009344:	f04f 0a00 	mov.w	sl, #0
 8009348:	f8bc b000 	ldrh.w	fp, [ip]
 800934c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009350:	fb09 220b 	mla	r2, r9, fp, r2
 8009354:	4492      	add	sl, r2
 8009356:	b289      	uxth	r1, r1
 8009358:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800935c:	f84e 1b04 	str.w	r1, [lr], #4
 8009360:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009364:	f8be 1000 	ldrh.w	r1, [lr]
 8009368:	0c12      	lsrs	r2, r2, #16
 800936a:	fb09 1102 	mla	r1, r9, r2, r1
 800936e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009372:	4567      	cmp	r7, ip
 8009374:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009378:	d8e6      	bhi.n	8009348 <__multiply+0x10c>
 800937a:	9a01      	ldr	r2, [sp, #4]
 800937c:	50a9      	str	r1, [r5, r2]
 800937e:	3504      	adds	r5, #4
 8009380:	e79a      	b.n	80092b8 <__multiply+0x7c>
 8009382:	3e01      	subs	r6, #1
 8009384:	e79c      	b.n	80092c0 <__multiply+0x84>
 8009386:	bf00      	nop
 8009388:	0800aa3f 	.word	0x0800aa3f
 800938c:	0800aa50 	.word	0x0800aa50

08009390 <__pow5mult>:
 8009390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009394:	4615      	mov	r5, r2
 8009396:	f012 0203 	ands.w	r2, r2, #3
 800939a:	4606      	mov	r6, r0
 800939c:	460f      	mov	r7, r1
 800939e:	d007      	beq.n	80093b0 <__pow5mult+0x20>
 80093a0:	4c25      	ldr	r4, [pc, #148]	; (8009438 <__pow5mult+0xa8>)
 80093a2:	3a01      	subs	r2, #1
 80093a4:	2300      	movs	r3, #0
 80093a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093aa:	f7ff fe9b 	bl	80090e4 <__multadd>
 80093ae:	4607      	mov	r7, r0
 80093b0:	10ad      	asrs	r5, r5, #2
 80093b2:	d03d      	beq.n	8009430 <__pow5mult+0xa0>
 80093b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80093b6:	b97c      	cbnz	r4, 80093d8 <__pow5mult+0x48>
 80093b8:	2010      	movs	r0, #16
 80093ba:	f7ff fe1b 	bl	8008ff4 <malloc>
 80093be:	4602      	mov	r2, r0
 80093c0:	6270      	str	r0, [r6, #36]	; 0x24
 80093c2:	b928      	cbnz	r0, 80093d0 <__pow5mult+0x40>
 80093c4:	4b1d      	ldr	r3, [pc, #116]	; (800943c <__pow5mult+0xac>)
 80093c6:	481e      	ldr	r0, [pc, #120]	; (8009440 <__pow5mult+0xb0>)
 80093c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80093cc:	f000 fc0e 	bl	8009bec <__assert_func>
 80093d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093d4:	6004      	str	r4, [r0, #0]
 80093d6:	60c4      	str	r4, [r0, #12]
 80093d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093e0:	b94c      	cbnz	r4, 80093f6 <__pow5mult+0x66>
 80093e2:	f240 2171 	movw	r1, #625	; 0x271
 80093e6:	4630      	mov	r0, r6
 80093e8:	f7ff ff12 	bl	8009210 <__i2b>
 80093ec:	2300      	movs	r3, #0
 80093ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80093f2:	4604      	mov	r4, r0
 80093f4:	6003      	str	r3, [r0, #0]
 80093f6:	f04f 0900 	mov.w	r9, #0
 80093fa:	07eb      	lsls	r3, r5, #31
 80093fc:	d50a      	bpl.n	8009414 <__pow5mult+0x84>
 80093fe:	4639      	mov	r1, r7
 8009400:	4622      	mov	r2, r4
 8009402:	4630      	mov	r0, r6
 8009404:	f7ff ff1a 	bl	800923c <__multiply>
 8009408:	4639      	mov	r1, r7
 800940a:	4680      	mov	r8, r0
 800940c:	4630      	mov	r0, r6
 800940e:	f7ff fe47 	bl	80090a0 <_Bfree>
 8009412:	4647      	mov	r7, r8
 8009414:	106d      	asrs	r5, r5, #1
 8009416:	d00b      	beq.n	8009430 <__pow5mult+0xa0>
 8009418:	6820      	ldr	r0, [r4, #0]
 800941a:	b938      	cbnz	r0, 800942c <__pow5mult+0x9c>
 800941c:	4622      	mov	r2, r4
 800941e:	4621      	mov	r1, r4
 8009420:	4630      	mov	r0, r6
 8009422:	f7ff ff0b 	bl	800923c <__multiply>
 8009426:	6020      	str	r0, [r4, #0]
 8009428:	f8c0 9000 	str.w	r9, [r0]
 800942c:	4604      	mov	r4, r0
 800942e:	e7e4      	b.n	80093fa <__pow5mult+0x6a>
 8009430:	4638      	mov	r0, r7
 8009432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009436:	bf00      	nop
 8009438:	0800aba0 	.word	0x0800aba0
 800943c:	0800a9cd 	.word	0x0800a9cd
 8009440:	0800aa50 	.word	0x0800aa50

08009444 <__lshift>:
 8009444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009448:	460c      	mov	r4, r1
 800944a:	6849      	ldr	r1, [r1, #4]
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009452:	68a3      	ldr	r3, [r4, #8]
 8009454:	4607      	mov	r7, r0
 8009456:	4691      	mov	r9, r2
 8009458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800945c:	f108 0601 	add.w	r6, r8, #1
 8009460:	42b3      	cmp	r3, r6
 8009462:	db0b      	blt.n	800947c <__lshift+0x38>
 8009464:	4638      	mov	r0, r7
 8009466:	f7ff fddb 	bl	8009020 <_Balloc>
 800946a:	4605      	mov	r5, r0
 800946c:	b948      	cbnz	r0, 8009482 <__lshift+0x3e>
 800946e:	4602      	mov	r2, r0
 8009470:	4b2a      	ldr	r3, [pc, #168]	; (800951c <__lshift+0xd8>)
 8009472:	482b      	ldr	r0, [pc, #172]	; (8009520 <__lshift+0xdc>)
 8009474:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009478:	f000 fbb8 	bl	8009bec <__assert_func>
 800947c:	3101      	adds	r1, #1
 800947e:	005b      	lsls	r3, r3, #1
 8009480:	e7ee      	b.n	8009460 <__lshift+0x1c>
 8009482:	2300      	movs	r3, #0
 8009484:	f100 0114 	add.w	r1, r0, #20
 8009488:	f100 0210 	add.w	r2, r0, #16
 800948c:	4618      	mov	r0, r3
 800948e:	4553      	cmp	r3, sl
 8009490:	db37      	blt.n	8009502 <__lshift+0xbe>
 8009492:	6920      	ldr	r0, [r4, #16]
 8009494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009498:	f104 0314 	add.w	r3, r4, #20
 800949c:	f019 091f 	ands.w	r9, r9, #31
 80094a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80094a8:	d02f      	beq.n	800950a <__lshift+0xc6>
 80094aa:	f1c9 0e20 	rsb	lr, r9, #32
 80094ae:	468a      	mov	sl, r1
 80094b0:	f04f 0c00 	mov.w	ip, #0
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	fa02 f209 	lsl.w	r2, r2, r9
 80094ba:	ea42 020c 	orr.w	r2, r2, ip
 80094be:	f84a 2b04 	str.w	r2, [sl], #4
 80094c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094c6:	4298      	cmp	r0, r3
 80094c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80094cc:	d8f2      	bhi.n	80094b4 <__lshift+0x70>
 80094ce:	1b03      	subs	r3, r0, r4
 80094d0:	3b15      	subs	r3, #21
 80094d2:	f023 0303 	bic.w	r3, r3, #3
 80094d6:	3304      	adds	r3, #4
 80094d8:	f104 0215 	add.w	r2, r4, #21
 80094dc:	4290      	cmp	r0, r2
 80094de:	bf38      	it	cc
 80094e0:	2304      	movcc	r3, #4
 80094e2:	f841 c003 	str.w	ip, [r1, r3]
 80094e6:	f1bc 0f00 	cmp.w	ip, #0
 80094ea:	d001      	beq.n	80094f0 <__lshift+0xac>
 80094ec:	f108 0602 	add.w	r6, r8, #2
 80094f0:	3e01      	subs	r6, #1
 80094f2:	4638      	mov	r0, r7
 80094f4:	612e      	str	r6, [r5, #16]
 80094f6:	4621      	mov	r1, r4
 80094f8:	f7ff fdd2 	bl	80090a0 <_Bfree>
 80094fc:	4628      	mov	r0, r5
 80094fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009502:	f842 0f04 	str.w	r0, [r2, #4]!
 8009506:	3301      	adds	r3, #1
 8009508:	e7c1      	b.n	800948e <__lshift+0x4a>
 800950a:	3904      	subs	r1, #4
 800950c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009510:	f841 2f04 	str.w	r2, [r1, #4]!
 8009514:	4298      	cmp	r0, r3
 8009516:	d8f9      	bhi.n	800950c <__lshift+0xc8>
 8009518:	e7ea      	b.n	80094f0 <__lshift+0xac>
 800951a:	bf00      	nop
 800951c:	0800aa3f 	.word	0x0800aa3f
 8009520:	0800aa50 	.word	0x0800aa50

08009524 <__mcmp>:
 8009524:	b530      	push	{r4, r5, lr}
 8009526:	6902      	ldr	r2, [r0, #16]
 8009528:	690c      	ldr	r4, [r1, #16]
 800952a:	1b12      	subs	r2, r2, r4
 800952c:	d10e      	bne.n	800954c <__mcmp+0x28>
 800952e:	f100 0314 	add.w	r3, r0, #20
 8009532:	3114      	adds	r1, #20
 8009534:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009538:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800953c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009540:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009544:	42a5      	cmp	r5, r4
 8009546:	d003      	beq.n	8009550 <__mcmp+0x2c>
 8009548:	d305      	bcc.n	8009556 <__mcmp+0x32>
 800954a:	2201      	movs	r2, #1
 800954c:	4610      	mov	r0, r2
 800954e:	bd30      	pop	{r4, r5, pc}
 8009550:	4283      	cmp	r3, r0
 8009552:	d3f3      	bcc.n	800953c <__mcmp+0x18>
 8009554:	e7fa      	b.n	800954c <__mcmp+0x28>
 8009556:	f04f 32ff 	mov.w	r2, #4294967295
 800955a:	e7f7      	b.n	800954c <__mcmp+0x28>

0800955c <__mdiff>:
 800955c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009560:	460c      	mov	r4, r1
 8009562:	4606      	mov	r6, r0
 8009564:	4611      	mov	r1, r2
 8009566:	4620      	mov	r0, r4
 8009568:	4690      	mov	r8, r2
 800956a:	f7ff ffdb 	bl	8009524 <__mcmp>
 800956e:	1e05      	subs	r5, r0, #0
 8009570:	d110      	bne.n	8009594 <__mdiff+0x38>
 8009572:	4629      	mov	r1, r5
 8009574:	4630      	mov	r0, r6
 8009576:	f7ff fd53 	bl	8009020 <_Balloc>
 800957a:	b930      	cbnz	r0, 800958a <__mdiff+0x2e>
 800957c:	4b3a      	ldr	r3, [pc, #232]	; (8009668 <__mdiff+0x10c>)
 800957e:	4602      	mov	r2, r0
 8009580:	f240 2132 	movw	r1, #562	; 0x232
 8009584:	4839      	ldr	r0, [pc, #228]	; (800966c <__mdiff+0x110>)
 8009586:	f000 fb31 	bl	8009bec <__assert_func>
 800958a:	2301      	movs	r3, #1
 800958c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009594:	bfa4      	itt	ge
 8009596:	4643      	movge	r3, r8
 8009598:	46a0      	movge	r8, r4
 800959a:	4630      	mov	r0, r6
 800959c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095a0:	bfa6      	itte	ge
 80095a2:	461c      	movge	r4, r3
 80095a4:	2500      	movge	r5, #0
 80095a6:	2501      	movlt	r5, #1
 80095a8:	f7ff fd3a 	bl	8009020 <_Balloc>
 80095ac:	b920      	cbnz	r0, 80095b8 <__mdiff+0x5c>
 80095ae:	4b2e      	ldr	r3, [pc, #184]	; (8009668 <__mdiff+0x10c>)
 80095b0:	4602      	mov	r2, r0
 80095b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80095b6:	e7e5      	b.n	8009584 <__mdiff+0x28>
 80095b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095bc:	6926      	ldr	r6, [r4, #16]
 80095be:	60c5      	str	r5, [r0, #12]
 80095c0:	f104 0914 	add.w	r9, r4, #20
 80095c4:	f108 0514 	add.w	r5, r8, #20
 80095c8:	f100 0e14 	add.w	lr, r0, #20
 80095cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80095d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80095d4:	f108 0210 	add.w	r2, r8, #16
 80095d8:	46f2      	mov	sl, lr
 80095da:	2100      	movs	r1, #0
 80095dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80095e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80095e4:	fa1f f883 	uxth.w	r8, r3
 80095e8:	fa11 f18b 	uxtah	r1, r1, fp
 80095ec:	0c1b      	lsrs	r3, r3, #16
 80095ee:	eba1 0808 	sub.w	r8, r1, r8
 80095f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80095f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80095fa:	fa1f f888 	uxth.w	r8, r8
 80095fe:	1419      	asrs	r1, r3, #16
 8009600:	454e      	cmp	r6, r9
 8009602:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009606:	f84a 3b04 	str.w	r3, [sl], #4
 800960a:	d8e7      	bhi.n	80095dc <__mdiff+0x80>
 800960c:	1b33      	subs	r3, r6, r4
 800960e:	3b15      	subs	r3, #21
 8009610:	f023 0303 	bic.w	r3, r3, #3
 8009614:	3304      	adds	r3, #4
 8009616:	3415      	adds	r4, #21
 8009618:	42a6      	cmp	r6, r4
 800961a:	bf38      	it	cc
 800961c:	2304      	movcc	r3, #4
 800961e:	441d      	add	r5, r3
 8009620:	4473      	add	r3, lr
 8009622:	469e      	mov	lr, r3
 8009624:	462e      	mov	r6, r5
 8009626:	4566      	cmp	r6, ip
 8009628:	d30e      	bcc.n	8009648 <__mdiff+0xec>
 800962a:	f10c 0203 	add.w	r2, ip, #3
 800962e:	1b52      	subs	r2, r2, r5
 8009630:	f022 0203 	bic.w	r2, r2, #3
 8009634:	3d03      	subs	r5, #3
 8009636:	45ac      	cmp	ip, r5
 8009638:	bf38      	it	cc
 800963a:	2200      	movcc	r2, #0
 800963c:	441a      	add	r2, r3
 800963e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009642:	b17b      	cbz	r3, 8009664 <__mdiff+0x108>
 8009644:	6107      	str	r7, [r0, #16]
 8009646:	e7a3      	b.n	8009590 <__mdiff+0x34>
 8009648:	f856 8b04 	ldr.w	r8, [r6], #4
 800964c:	fa11 f288 	uxtah	r2, r1, r8
 8009650:	1414      	asrs	r4, r2, #16
 8009652:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009656:	b292      	uxth	r2, r2
 8009658:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800965c:	f84e 2b04 	str.w	r2, [lr], #4
 8009660:	1421      	asrs	r1, r4, #16
 8009662:	e7e0      	b.n	8009626 <__mdiff+0xca>
 8009664:	3f01      	subs	r7, #1
 8009666:	e7ea      	b.n	800963e <__mdiff+0xe2>
 8009668:	0800aa3f 	.word	0x0800aa3f
 800966c:	0800aa50 	.word	0x0800aa50

08009670 <__d2b>:
 8009670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009674:	4689      	mov	r9, r1
 8009676:	2101      	movs	r1, #1
 8009678:	ec57 6b10 	vmov	r6, r7, d0
 800967c:	4690      	mov	r8, r2
 800967e:	f7ff fccf 	bl	8009020 <_Balloc>
 8009682:	4604      	mov	r4, r0
 8009684:	b930      	cbnz	r0, 8009694 <__d2b+0x24>
 8009686:	4602      	mov	r2, r0
 8009688:	4b25      	ldr	r3, [pc, #148]	; (8009720 <__d2b+0xb0>)
 800968a:	4826      	ldr	r0, [pc, #152]	; (8009724 <__d2b+0xb4>)
 800968c:	f240 310a 	movw	r1, #778	; 0x30a
 8009690:	f000 faac 	bl	8009bec <__assert_func>
 8009694:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800969c:	bb35      	cbnz	r5, 80096ec <__d2b+0x7c>
 800969e:	2e00      	cmp	r6, #0
 80096a0:	9301      	str	r3, [sp, #4]
 80096a2:	d028      	beq.n	80096f6 <__d2b+0x86>
 80096a4:	4668      	mov	r0, sp
 80096a6:	9600      	str	r6, [sp, #0]
 80096a8:	f7ff fd82 	bl	80091b0 <__lo0bits>
 80096ac:	9900      	ldr	r1, [sp, #0]
 80096ae:	b300      	cbz	r0, 80096f2 <__d2b+0x82>
 80096b0:	9a01      	ldr	r2, [sp, #4]
 80096b2:	f1c0 0320 	rsb	r3, r0, #32
 80096b6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ba:	430b      	orrs	r3, r1
 80096bc:	40c2      	lsrs	r2, r0
 80096be:	6163      	str	r3, [r4, #20]
 80096c0:	9201      	str	r2, [sp, #4]
 80096c2:	9b01      	ldr	r3, [sp, #4]
 80096c4:	61a3      	str	r3, [r4, #24]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	bf14      	ite	ne
 80096ca:	2202      	movne	r2, #2
 80096cc:	2201      	moveq	r2, #1
 80096ce:	6122      	str	r2, [r4, #16]
 80096d0:	b1d5      	cbz	r5, 8009708 <__d2b+0x98>
 80096d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80096d6:	4405      	add	r5, r0
 80096d8:	f8c9 5000 	str.w	r5, [r9]
 80096dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096e0:	f8c8 0000 	str.w	r0, [r8]
 80096e4:	4620      	mov	r0, r4
 80096e6:	b003      	add	sp, #12
 80096e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096f0:	e7d5      	b.n	800969e <__d2b+0x2e>
 80096f2:	6161      	str	r1, [r4, #20]
 80096f4:	e7e5      	b.n	80096c2 <__d2b+0x52>
 80096f6:	a801      	add	r0, sp, #4
 80096f8:	f7ff fd5a 	bl	80091b0 <__lo0bits>
 80096fc:	9b01      	ldr	r3, [sp, #4]
 80096fe:	6163      	str	r3, [r4, #20]
 8009700:	2201      	movs	r2, #1
 8009702:	6122      	str	r2, [r4, #16]
 8009704:	3020      	adds	r0, #32
 8009706:	e7e3      	b.n	80096d0 <__d2b+0x60>
 8009708:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800970c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009710:	f8c9 0000 	str.w	r0, [r9]
 8009714:	6918      	ldr	r0, [r3, #16]
 8009716:	f7ff fd2b 	bl	8009170 <__hi0bits>
 800971a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800971e:	e7df      	b.n	80096e0 <__d2b+0x70>
 8009720:	0800aa3f 	.word	0x0800aa3f
 8009724:	0800aa50 	.word	0x0800aa50

08009728 <_calloc_r>:
 8009728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800972a:	fba1 2402 	umull	r2, r4, r1, r2
 800972e:	b94c      	cbnz	r4, 8009744 <_calloc_r+0x1c>
 8009730:	4611      	mov	r1, r2
 8009732:	9201      	str	r2, [sp, #4]
 8009734:	f000 f87a 	bl	800982c <_malloc_r>
 8009738:	9a01      	ldr	r2, [sp, #4]
 800973a:	4605      	mov	r5, r0
 800973c:	b930      	cbnz	r0, 800974c <_calloc_r+0x24>
 800973e:	4628      	mov	r0, r5
 8009740:	b003      	add	sp, #12
 8009742:	bd30      	pop	{r4, r5, pc}
 8009744:	220c      	movs	r2, #12
 8009746:	6002      	str	r2, [r0, #0]
 8009748:	2500      	movs	r5, #0
 800974a:	e7f8      	b.n	800973e <_calloc_r+0x16>
 800974c:	4621      	mov	r1, r4
 800974e:	f7fe f9e7 	bl	8007b20 <memset>
 8009752:	e7f4      	b.n	800973e <_calloc_r+0x16>

08009754 <_free_r>:
 8009754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009756:	2900      	cmp	r1, #0
 8009758:	d044      	beq.n	80097e4 <_free_r+0x90>
 800975a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800975e:	9001      	str	r0, [sp, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	f1a1 0404 	sub.w	r4, r1, #4
 8009766:	bfb8      	it	lt
 8009768:	18e4      	addlt	r4, r4, r3
 800976a:	f000 fa9b 	bl	8009ca4 <__malloc_lock>
 800976e:	4a1e      	ldr	r2, [pc, #120]	; (80097e8 <_free_r+0x94>)
 8009770:	9801      	ldr	r0, [sp, #4]
 8009772:	6813      	ldr	r3, [r2, #0]
 8009774:	b933      	cbnz	r3, 8009784 <_free_r+0x30>
 8009776:	6063      	str	r3, [r4, #4]
 8009778:	6014      	str	r4, [r2, #0]
 800977a:	b003      	add	sp, #12
 800977c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009780:	f000 ba96 	b.w	8009cb0 <__malloc_unlock>
 8009784:	42a3      	cmp	r3, r4
 8009786:	d908      	bls.n	800979a <_free_r+0x46>
 8009788:	6825      	ldr	r5, [r4, #0]
 800978a:	1961      	adds	r1, r4, r5
 800978c:	428b      	cmp	r3, r1
 800978e:	bf01      	itttt	eq
 8009790:	6819      	ldreq	r1, [r3, #0]
 8009792:	685b      	ldreq	r3, [r3, #4]
 8009794:	1949      	addeq	r1, r1, r5
 8009796:	6021      	streq	r1, [r4, #0]
 8009798:	e7ed      	b.n	8009776 <_free_r+0x22>
 800979a:	461a      	mov	r2, r3
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	b10b      	cbz	r3, 80097a4 <_free_r+0x50>
 80097a0:	42a3      	cmp	r3, r4
 80097a2:	d9fa      	bls.n	800979a <_free_r+0x46>
 80097a4:	6811      	ldr	r1, [r2, #0]
 80097a6:	1855      	adds	r5, r2, r1
 80097a8:	42a5      	cmp	r5, r4
 80097aa:	d10b      	bne.n	80097c4 <_free_r+0x70>
 80097ac:	6824      	ldr	r4, [r4, #0]
 80097ae:	4421      	add	r1, r4
 80097b0:	1854      	adds	r4, r2, r1
 80097b2:	42a3      	cmp	r3, r4
 80097b4:	6011      	str	r1, [r2, #0]
 80097b6:	d1e0      	bne.n	800977a <_free_r+0x26>
 80097b8:	681c      	ldr	r4, [r3, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	6053      	str	r3, [r2, #4]
 80097be:	4421      	add	r1, r4
 80097c0:	6011      	str	r1, [r2, #0]
 80097c2:	e7da      	b.n	800977a <_free_r+0x26>
 80097c4:	d902      	bls.n	80097cc <_free_r+0x78>
 80097c6:	230c      	movs	r3, #12
 80097c8:	6003      	str	r3, [r0, #0]
 80097ca:	e7d6      	b.n	800977a <_free_r+0x26>
 80097cc:	6825      	ldr	r5, [r4, #0]
 80097ce:	1961      	adds	r1, r4, r5
 80097d0:	428b      	cmp	r3, r1
 80097d2:	bf04      	itt	eq
 80097d4:	6819      	ldreq	r1, [r3, #0]
 80097d6:	685b      	ldreq	r3, [r3, #4]
 80097d8:	6063      	str	r3, [r4, #4]
 80097da:	bf04      	itt	eq
 80097dc:	1949      	addeq	r1, r1, r5
 80097de:	6021      	streq	r1, [r4, #0]
 80097e0:	6054      	str	r4, [r2, #4]
 80097e2:	e7ca      	b.n	800977a <_free_r+0x26>
 80097e4:	b003      	add	sp, #12
 80097e6:	bd30      	pop	{r4, r5, pc}
 80097e8:	24000ed8 	.word	0x24000ed8

080097ec <sbrk_aligned>:
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	4e0e      	ldr	r6, [pc, #56]	; (8009828 <sbrk_aligned+0x3c>)
 80097f0:	460c      	mov	r4, r1
 80097f2:	6831      	ldr	r1, [r6, #0]
 80097f4:	4605      	mov	r5, r0
 80097f6:	b911      	cbnz	r1, 80097fe <sbrk_aligned+0x12>
 80097f8:	f000 f9e8 	bl	8009bcc <_sbrk_r>
 80097fc:	6030      	str	r0, [r6, #0]
 80097fe:	4621      	mov	r1, r4
 8009800:	4628      	mov	r0, r5
 8009802:	f000 f9e3 	bl	8009bcc <_sbrk_r>
 8009806:	1c43      	adds	r3, r0, #1
 8009808:	d00a      	beq.n	8009820 <sbrk_aligned+0x34>
 800980a:	1cc4      	adds	r4, r0, #3
 800980c:	f024 0403 	bic.w	r4, r4, #3
 8009810:	42a0      	cmp	r0, r4
 8009812:	d007      	beq.n	8009824 <sbrk_aligned+0x38>
 8009814:	1a21      	subs	r1, r4, r0
 8009816:	4628      	mov	r0, r5
 8009818:	f000 f9d8 	bl	8009bcc <_sbrk_r>
 800981c:	3001      	adds	r0, #1
 800981e:	d101      	bne.n	8009824 <sbrk_aligned+0x38>
 8009820:	f04f 34ff 	mov.w	r4, #4294967295
 8009824:	4620      	mov	r0, r4
 8009826:	bd70      	pop	{r4, r5, r6, pc}
 8009828:	24000edc 	.word	0x24000edc

0800982c <_malloc_r>:
 800982c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009830:	1ccd      	adds	r5, r1, #3
 8009832:	f025 0503 	bic.w	r5, r5, #3
 8009836:	3508      	adds	r5, #8
 8009838:	2d0c      	cmp	r5, #12
 800983a:	bf38      	it	cc
 800983c:	250c      	movcc	r5, #12
 800983e:	2d00      	cmp	r5, #0
 8009840:	4607      	mov	r7, r0
 8009842:	db01      	blt.n	8009848 <_malloc_r+0x1c>
 8009844:	42a9      	cmp	r1, r5
 8009846:	d905      	bls.n	8009854 <_malloc_r+0x28>
 8009848:	230c      	movs	r3, #12
 800984a:	603b      	str	r3, [r7, #0]
 800984c:	2600      	movs	r6, #0
 800984e:	4630      	mov	r0, r6
 8009850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009854:	4e2e      	ldr	r6, [pc, #184]	; (8009910 <_malloc_r+0xe4>)
 8009856:	f000 fa25 	bl	8009ca4 <__malloc_lock>
 800985a:	6833      	ldr	r3, [r6, #0]
 800985c:	461c      	mov	r4, r3
 800985e:	bb34      	cbnz	r4, 80098ae <_malloc_r+0x82>
 8009860:	4629      	mov	r1, r5
 8009862:	4638      	mov	r0, r7
 8009864:	f7ff ffc2 	bl	80097ec <sbrk_aligned>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	4604      	mov	r4, r0
 800986c:	d14d      	bne.n	800990a <_malloc_r+0xde>
 800986e:	6834      	ldr	r4, [r6, #0]
 8009870:	4626      	mov	r6, r4
 8009872:	2e00      	cmp	r6, #0
 8009874:	d140      	bne.n	80098f8 <_malloc_r+0xcc>
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	4631      	mov	r1, r6
 800987a:	4638      	mov	r0, r7
 800987c:	eb04 0803 	add.w	r8, r4, r3
 8009880:	f000 f9a4 	bl	8009bcc <_sbrk_r>
 8009884:	4580      	cmp	r8, r0
 8009886:	d13a      	bne.n	80098fe <_malloc_r+0xd2>
 8009888:	6821      	ldr	r1, [r4, #0]
 800988a:	3503      	adds	r5, #3
 800988c:	1a6d      	subs	r5, r5, r1
 800988e:	f025 0503 	bic.w	r5, r5, #3
 8009892:	3508      	adds	r5, #8
 8009894:	2d0c      	cmp	r5, #12
 8009896:	bf38      	it	cc
 8009898:	250c      	movcc	r5, #12
 800989a:	4629      	mov	r1, r5
 800989c:	4638      	mov	r0, r7
 800989e:	f7ff ffa5 	bl	80097ec <sbrk_aligned>
 80098a2:	3001      	adds	r0, #1
 80098a4:	d02b      	beq.n	80098fe <_malloc_r+0xd2>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	442b      	add	r3, r5
 80098aa:	6023      	str	r3, [r4, #0]
 80098ac:	e00e      	b.n	80098cc <_malloc_r+0xa0>
 80098ae:	6822      	ldr	r2, [r4, #0]
 80098b0:	1b52      	subs	r2, r2, r5
 80098b2:	d41e      	bmi.n	80098f2 <_malloc_r+0xc6>
 80098b4:	2a0b      	cmp	r2, #11
 80098b6:	d916      	bls.n	80098e6 <_malloc_r+0xba>
 80098b8:	1961      	adds	r1, r4, r5
 80098ba:	42a3      	cmp	r3, r4
 80098bc:	6025      	str	r5, [r4, #0]
 80098be:	bf18      	it	ne
 80098c0:	6059      	strne	r1, [r3, #4]
 80098c2:	6863      	ldr	r3, [r4, #4]
 80098c4:	bf08      	it	eq
 80098c6:	6031      	streq	r1, [r6, #0]
 80098c8:	5162      	str	r2, [r4, r5]
 80098ca:	604b      	str	r3, [r1, #4]
 80098cc:	4638      	mov	r0, r7
 80098ce:	f104 060b 	add.w	r6, r4, #11
 80098d2:	f000 f9ed 	bl	8009cb0 <__malloc_unlock>
 80098d6:	f026 0607 	bic.w	r6, r6, #7
 80098da:	1d23      	adds	r3, r4, #4
 80098dc:	1af2      	subs	r2, r6, r3
 80098de:	d0b6      	beq.n	800984e <_malloc_r+0x22>
 80098e0:	1b9b      	subs	r3, r3, r6
 80098e2:	50a3      	str	r3, [r4, r2]
 80098e4:	e7b3      	b.n	800984e <_malloc_r+0x22>
 80098e6:	6862      	ldr	r2, [r4, #4]
 80098e8:	42a3      	cmp	r3, r4
 80098ea:	bf0c      	ite	eq
 80098ec:	6032      	streq	r2, [r6, #0]
 80098ee:	605a      	strne	r2, [r3, #4]
 80098f0:	e7ec      	b.n	80098cc <_malloc_r+0xa0>
 80098f2:	4623      	mov	r3, r4
 80098f4:	6864      	ldr	r4, [r4, #4]
 80098f6:	e7b2      	b.n	800985e <_malloc_r+0x32>
 80098f8:	4634      	mov	r4, r6
 80098fa:	6876      	ldr	r6, [r6, #4]
 80098fc:	e7b9      	b.n	8009872 <_malloc_r+0x46>
 80098fe:	230c      	movs	r3, #12
 8009900:	603b      	str	r3, [r7, #0]
 8009902:	4638      	mov	r0, r7
 8009904:	f000 f9d4 	bl	8009cb0 <__malloc_unlock>
 8009908:	e7a1      	b.n	800984e <_malloc_r+0x22>
 800990a:	6025      	str	r5, [r4, #0]
 800990c:	e7de      	b.n	80098cc <_malloc_r+0xa0>
 800990e:	bf00      	nop
 8009910:	24000ed8 	.word	0x24000ed8

08009914 <__ssputs_r>:
 8009914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009918:	688e      	ldr	r6, [r1, #8]
 800991a:	429e      	cmp	r6, r3
 800991c:	4682      	mov	sl, r0
 800991e:	460c      	mov	r4, r1
 8009920:	4690      	mov	r8, r2
 8009922:	461f      	mov	r7, r3
 8009924:	d838      	bhi.n	8009998 <__ssputs_r+0x84>
 8009926:	898a      	ldrh	r2, [r1, #12]
 8009928:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800992c:	d032      	beq.n	8009994 <__ssputs_r+0x80>
 800992e:	6825      	ldr	r5, [r4, #0]
 8009930:	6909      	ldr	r1, [r1, #16]
 8009932:	eba5 0901 	sub.w	r9, r5, r1
 8009936:	6965      	ldr	r5, [r4, #20]
 8009938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800993c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009940:	3301      	adds	r3, #1
 8009942:	444b      	add	r3, r9
 8009944:	106d      	asrs	r5, r5, #1
 8009946:	429d      	cmp	r5, r3
 8009948:	bf38      	it	cc
 800994a:	461d      	movcc	r5, r3
 800994c:	0553      	lsls	r3, r2, #21
 800994e:	d531      	bpl.n	80099b4 <__ssputs_r+0xa0>
 8009950:	4629      	mov	r1, r5
 8009952:	f7ff ff6b 	bl	800982c <_malloc_r>
 8009956:	4606      	mov	r6, r0
 8009958:	b950      	cbnz	r0, 8009970 <__ssputs_r+0x5c>
 800995a:	230c      	movs	r3, #12
 800995c:	f8ca 3000 	str.w	r3, [sl]
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009966:	81a3      	strh	r3, [r4, #12]
 8009968:	f04f 30ff 	mov.w	r0, #4294967295
 800996c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009970:	6921      	ldr	r1, [r4, #16]
 8009972:	464a      	mov	r2, r9
 8009974:	f7ff fb46 	bl	8009004 <memcpy>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800997e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009982:	81a3      	strh	r3, [r4, #12]
 8009984:	6126      	str	r6, [r4, #16]
 8009986:	6165      	str	r5, [r4, #20]
 8009988:	444e      	add	r6, r9
 800998a:	eba5 0509 	sub.w	r5, r5, r9
 800998e:	6026      	str	r6, [r4, #0]
 8009990:	60a5      	str	r5, [r4, #8]
 8009992:	463e      	mov	r6, r7
 8009994:	42be      	cmp	r6, r7
 8009996:	d900      	bls.n	800999a <__ssputs_r+0x86>
 8009998:	463e      	mov	r6, r7
 800999a:	6820      	ldr	r0, [r4, #0]
 800999c:	4632      	mov	r2, r6
 800999e:	4641      	mov	r1, r8
 80099a0:	f000 f966 	bl	8009c70 <memmove>
 80099a4:	68a3      	ldr	r3, [r4, #8]
 80099a6:	1b9b      	subs	r3, r3, r6
 80099a8:	60a3      	str	r3, [r4, #8]
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	4433      	add	r3, r6
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	2000      	movs	r0, #0
 80099b2:	e7db      	b.n	800996c <__ssputs_r+0x58>
 80099b4:	462a      	mov	r2, r5
 80099b6:	f000 f981 	bl	8009cbc <_realloc_r>
 80099ba:	4606      	mov	r6, r0
 80099bc:	2800      	cmp	r0, #0
 80099be:	d1e1      	bne.n	8009984 <__ssputs_r+0x70>
 80099c0:	6921      	ldr	r1, [r4, #16]
 80099c2:	4650      	mov	r0, sl
 80099c4:	f7ff fec6 	bl	8009754 <_free_r>
 80099c8:	e7c7      	b.n	800995a <__ssputs_r+0x46>
	...

080099cc <_svfiprintf_r>:
 80099cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d0:	4698      	mov	r8, r3
 80099d2:	898b      	ldrh	r3, [r1, #12]
 80099d4:	061b      	lsls	r3, r3, #24
 80099d6:	b09d      	sub	sp, #116	; 0x74
 80099d8:	4607      	mov	r7, r0
 80099da:	460d      	mov	r5, r1
 80099dc:	4614      	mov	r4, r2
 80099de:	d50e      	bpl.n	80099fe <_svfiprintf_r+0x32>
 80099e0:	690b      	ldr	r3, [r1, #16]
 80099e2:	b963      	cbnz	r3, 80099fe <_svfiprintf_r+0x32>
 80099e4:	2140      	movs	r1, #64	; 0x40
 80099e6:	f7ff ff21 	bl	800982c <_malloc_r>
 80099ea:	6028      	str	r0, [r5, #0]
 80099ec:	6128      	str	r0, [r5, #16]
 80099ee:	b920      	cbnz	r0, 80099fa <_svfiprintf_r+0x2e>
 80099f0:	230c      	movs	r3, #12
 80099f2:	603b      	str	r3, [r7, #0]
 80099f4:	f04f 30ff 	mov.w	r0, #4294967295
 80099f8:	e0d1      	b.n	8009b9e <_svfiprintf_r+0x1d2>
 80099fa:	2340      	movs	r3, #64	; 0x40
 80099fc:	616b      	str	r3, [r5, #20]
 80099fe:	2300      	movs	r3, #0
 8009a00:	9309      	str	r3, [sp, #36]	; 0x24
 8009a02:	2320      	movs	r3, #32
 8009a04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a08:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a0c:	2330      	movs	r3, #48	; 0x30
 8009a0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009bb8 <_svfiprintf_r+0x1ec>
 8009a12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a16:	f04f 0901 	mov.w	r9, #1
 8009a1a:	4623      	mov	r3, r4
 8009a1c:	469a      	mov	sl, r3
 8009a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a22:	b10a      	cbz	r2, 8009a28 <_svfiprintf_r+0x5c>
 8009a24:	2a25      	cmp	r2, #37	; 0x25
 8009a26:	d1f9      	bne.n	8009a1c <_svfiprintf_r+0x50>
 8009a28:	ebba 0b04 	subs.w	fp, sl, r4
 8009a2c:	d00b      	beq.n	8009a46 <_svfiprintf_r+0x7a>
 8009a2e:	465b      	mov	r3, fp
 8009a30:	4622      	mov	r2, r4
 8009a32:	4629      	mov	r1, r5
 8009a34:	4638      	mov	r0, r7
 8009a36:	f7ff ff6d 	bl	8009914 <__ssputs_r>
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	f000 80aa 	beq.w	8009b94 <_svfiprintf_r+0x1c8>
 8009a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a42:	445a      	add	r2, fp
 8009a44:	9209      	str	r2, [sp, #36]	; 0x24
 8009a46:	f89a 3000 	ldrb.w	r3, [sl]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 80a2 	beq.w	8009b94 <_svfiprintf_r+0x1c8>
 8009a50:	2300      	movs	r3, #0
 8009a52:	f04f 32ff 	mov.w	r2, #4294967295
 8009a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a5a:	f10a 0a01 	add.w	sl, sl, #1
 8009a5e:	9304      	str	r3, [sp, #16]
 8009a60:	9307      	str	r3, [sp, #28]
 8009a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a66:	931a      	str	r3, [sp, #104]	; 0x68
 8009a68:	4654      	mov	r4, sl
 8009a6a:	2205      	movs	r2, #5
 8009a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a70:	4851      	ldr	r0, [pc, #324]	; (8009bb8 <_svfiprintf_r+0x1ec>)
 8009a72:	f7f6 fc3d 	bl	80002f0 <memchr>
 8009a76:	9a04      	ldr	r2, [sp, #16]
 8009a78:	b9d8      	cbnz	r0, 8009ab2 <_svfiprintf_r+0xe6>
 8009a7a:	06d0      	lsls	r0, r2, #27
 8009a7c:	bf44      	itt	mi
 8009a7e:	2320      	movmi	r3, #32
 8009a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a84:	0711      	lsls	r1, r2, #28
 8009a86:	bf44      	itt	mi
 8009a88:	232b      	movmi	r3, #43	; 0x2b
 8009a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a92:	2b2a      	cmp	r3, #42	; 0x2a
 8009a94:	d015      	beq.n	8009ac2 <_svfiprintf_r+0xf6>
 8009a96:	9a07      	ldr	r2, [sp, #28]
 8009a98:	4654      	mov	r4, sl
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	f04f 0c0a 	mov.w	ip, #10
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aa6:	3b30      	subs	r3, #48	; 0x30
 8009aa8:	2b09      	cmp	r3, #9
 8009aaa:	d94e      	bls.n	8009b4a <_svfiprintf_r+0x17e>
 8009aac:	b1b0      	cbz	r0, 8009adc <_svfiprintf_r+0x110>
 8009aae:	9207      	str	r2, [sp, #28]
 8009ab0:	e014      	b.n	8009adc <_svfiprintf_r+0x110>
 8009ab2:	eba0 0308 	sub.w	r3, r0, r8
 8009ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8009aba:	4313      	orrs	r3, r2
 8009abc:	9304      	str	r3, [sp, #16]
 8009abe:	46a2      	mov	sl, r4
 8009ac0:	e7d2      	b.n	8009a68 <_svfiprintf_r+0x9c>
 8009ac2:	9b03      	ldr	r3, [sp, #12]
 8009ac4:	1d19      	adds	r1, r3, #4
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	9103      	str	r1, [sp, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	bfbb      	ittet	lt
 8009ace:	425b      	neglt	r3, r3
 8009ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ad4:	9307      	strge	r3, [sp, #28]
 8009ad6:	9307      	strlt	r3, [sp, #28]
 8009ad8:	bfb8      	it	lt
 8009ada:	9204      	strlt	r2, [sp, #16]
 8009adc:	7823      	ldrb	r3, [r4, #0]
 8009ade:	2b2e      	cmp	r3, #46	; 0x2e
 8009ae0:	d10c      	bne.n	8009afc <_svfiprintf_r+0x130>
 8009ae2:	7863      	ldrb	r3, [r4, #1]
 8009ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ae6:	d135      	bne.n	8009b54 <_svfiprintf_r+0x188>
 8009ae8:	9b03      	ldr	r3, [sp, #12]
 8009aea:	1d1a      	adds	r2, r3, #4
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	9203      	str	r2, [sp, #12]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	bfb8      	it	lt
 8009af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009af8:	3402      	adds	r4, #2
 8009afa:	9305      	str	r3, [sp, #20]
 8009afc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009bc8 <_svfiprintf_r+0x1fc>
 8009b00:	7821      	ldrb	r1, [r4, #0]
 8009b02:	2203      	movs	r2, #3
 8009b04:	4650      	mov	r0, sl
 8009b06:	f7f6 fbf3 	bl	80002f0 <memchr>
 8009b0a:	b140      	cbz	r0, 8009b1e <_svfiprintf_r+0x152>
 8009b0c:	2340      	movs	r3, #64	; 0x40
 8009b0e:	eba0 000a 	sub.w	r0, r0, sl
 8009b12:	fa03 f000 	lsl.w	r0, r3, r0
 8009b16:	9b04      	ldr	r3, [sp, #16]
 8009b18:	4303      	orrs	r3, r0
 8009b1a:	3401      	adds	r4, #1
 8009b1c:	9304      	str	r3, [sp, #16]
 8009b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b22:	4826      	ldr	r0, [pc, #152]	; (8009bbc <_svfiprintf_r+0x1f0>)
 8009b24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b28:	2206      	movs	r2, #6
 8009b2a:	f7f6 fbe1 	bl	80002f0 <memchr>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d038      	beq.n	8009ba4 <_svfiprintf_r+0x1d8>
 8009b32:	4b23      	ldr	r3, [pc, #140]	; (8009bc0 <_svfiprintf_r+0x1f4>)
 8009b34:	bb1b      	cbnz	r3, 8009b7e <_svfiprintf_r+0x1b2>
 8009b36:	9b03      	ldr	r3, [sp, #12]
 8009b38:	3307      	adds	r3, #7
 8009b3a:	f023 0307 	bic.w	r3, r3, #7
 8009b3e:	3308      	adds	r3, #8
 8009b40:	9303      	str	r3, [sp, #12]
 8009b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b44:	4433      	add	r3, r6
 8009b46:	9309      	str	r3, [sp, #36]	; 0x24
 8009b48:	e767      	b.n	8009a1a <_svfiprintf_r+0x4e>
 8009b4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b4e:	460c      	mov	r4, r1
 8009b50:	2001      	movs	r0, #1
 8009b52:	e7a5      	b.n	8009aa0 <_svfiprintf_r+0xd4>
 8009b54:	2300      	movs	r3, #0
 8009b56:	3401      	adds	r4, #1
 8009b58:	9305      	str	r3, [sp, #20]
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	f04f 0c0a 	mov.w	ip, #10
 8009b60:	4620      	mov	r0, r4
 8009b62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b66:	3a30      	subs	r2, #48	; 0x30
 8009b68:	2a09      	cmp	r2, #9
 8009b6a:	d903      	bls.n	8009b74 <_svfiprintf_r+0x1a8>
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d0c5      	beq.n	8009afc <_svfiprintf_r+0x130>
 8009b70:	9105      	str	r1, [sp, #20]
 8009b72:	e7c3      	b.n	8009afc <_svfiprintf_r+0x130>
 8009b74:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b78:	4604      	mov	r4, r0
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e7f0      	b.n	8009b60 <_svfiprintf_r+0x194>
 8009b7e:	ab03      	add	r3, sp, #12
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	462a      	mov	r2, r5
 8009b84:	4b0f      	ldr	r3, [pc, #60]	; (8009bc4 <_svfiprintf_r+0x1f8>)
 8009b86:	a904      	add	r1, sp, #16
 8009b88:	4638      	mov	r0, r7
 8009b8a:	f7fe f861 	bl	8007c50 <_printf_float>
 8009b8e:	1c42      	adds	r2, r0, #1
 8009b90:	4606      	mov	r6, r0
 8009b92:	d1d6      	bne.n	8009b42 <_svfiprintf_r+0x176>
 8009b94:	89ab      	ldrh	r3, [r5, #12]
 8009b96:	065b      	lsls	r3, r3, #25
 8009b98:	f53f af2c 	bmi.w	80099f4 <_svfiprintf_r+0x28>
 8009b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b9e:	b01d      	add	sp, #116	; 0x74
 8009ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba4:	ab03      	add	r3, sp, #12
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	462a      	mov	r2, r5
 8009baa:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <_svfiprintf_r+0x1f8>)
 8009bac:	a904      	add	r1, sp, #16
 8009bae:	4638      	mov	r0, r7
 8009bb0:	f7fe fada 	bl	8008168 <_printf_i>
 8009bb4:	e7eb      	b.n	8009b8e <_svfiprintf_r+0x1c2>
 8009bb6:	bf00      	nop
 8009bb8:	0800abac 	.word	0x0800abac
 8009bbc:	0800abb6 	.word	0x0800abb6
 8009bc0:	08007c51 	.word	0x08007c51
 8009bc4:	08009915 	.word	0x08009915
 8009bc8:	0800abb2 	.word	0x0800abb2

08009bcc <_sbrk_r>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	4d06      	ldr	r5, [pc, #24]	; (8009be8 <_sbrk_r+0x1c>)
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	4608      	mov	r0, r1
 8009bd6:	602b      	str	r3, [r5, #0]
 8009bd8:	f7f8 f928 	bl	8001e2c <_sbrk>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	d102      	bne.n	8009be6 <_sbrk_r+0x1a>
 8009be0:	682b      	ldr	r3, [r5, #0]
 8009be2:	b103      	cbz	r3, 8009be6 <_sbrk_r+0x1a>
 8009be4:	6023      	str	r3, [r4, #0]
 8009be6:	bd38      	pop	{r3, r4, r5, pc}
 8009be8:	24000ee0 	.word	0x24000ee0

08009bec <__assert_func>:
 8009bec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bee:	4614      	mov	r4, r2
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	4b09      	ldr	r3, [pc, #36]	; (8009c18 <__assert_func+0x2c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	68d8      	ldr	r0, [r3, #12]
 8009bfa:	b14c      	cbz	r4, 8009c10 <__assert_func+0x24>
 8009bfc:	4b07      	ldr	r3, [pc, #28]	; (8009c1c <__assert_func+0x30>)
 8009bfe:	9100      	str	r1, [sp, #0]
 8009c00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c04:	4906      	ldr	r1, [pc, #24]	; (8009c20 <__assert_func+0x34>)
 8009c06:	462b      	mov	r3, r5
 8009c08:	f000 f80e 	bl	8009c28 <fiprintf>
 8009c0c:	f000 faac 	bl	800a168 <abort>
 8009c10:	4b04      	ldr	r3, [pc, #16]	; (8009c24 <__assert_func+0x38>)
 8009c12:	461c      	mov	r4, r3
 8009c14:	e7f3      	b.n	8009bfe <__assert_func+0x12>
 8009c16:	bf00      	nop
 8009c18:	24000010 	.word	0x24000010
 8009c1c:	0800abbd 	.word	0x0800abbd
 8009c20:	0800abca 	.word	0x0800abca
 8009c24:	0800abf8 	.word	0x0800abf8

08009c28 <fiprintf>:
 8009c28:	b40e      	push	{r1, r2, r3}
 8009c2a:	b503      	push	{r0, r1, lr}
 8009c2c:	4601      	mov	r1, r0
 8009c2e:	ab03      	add	r3, sp, #12
 8009c30:	4805      	ldr	r0, [pc, #20]	; (8009c48 <fiprintf+0x20>)
 8009c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c36:	6800      	ldr	r0, [r0, #0]
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	f000 f897 	bl	8009d6c <_vfiprintf_r>
 8009c3e:	b002      	add	sp, #8
 8009c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c44:	b003      	add	sp, #12
 8009c46:	4770      	bx	lr
 8009c48:	24000010 	.word	0x24000010

08009c4c <__ascii_mbtowc>:
 8009c4c:	b082      	sub	sp, #8
 8009c4e:	b901      	cbnz	r1, 8009c52 <__ascii_mbtowc+0x6>
 8009c50:	a901      	add	r1, sp, #4
 8009c52:	b142      	cbz	r2, 8009c66 <__ascii_mbtowc+0x1a>
 8009c54:	b14b      	cbz	r3, 8009c6a <__ascii_mbtowc+0x1e>
 8009c56:	7813      	ldrb	r3, [r2, #0]
 8009c58:	600b      	str	r3, [r1, #0]
 8009c5a:	7812      	ldrb	r2, [r2, #0]
 8009c5c:	1e10      	subs	r0, r2, #0
 8009c5e:	bf18      	it	ne
 8009c60:	2001      	movne	r0, #1
 8009c62:	b002      	add	sp, #8
 8009c64:	4770      	bx	lr
 8009c66:	4610      	mov	r0, r2
 8009c68:	e7fb      	b.n	8009c62 <__ascii_mbtowc+0x16>
 8009c6a:	f06f 0001 	mvn.w	r0, #1
 8009c6e:	e7f8      	b.n	8009c62 <__ascii_mbtowc+0x16>

08009c70 <memmove>:
 8009c70:	4288      	cmp	r0, r1
 8009c72:	b510      	push	{r4, lr}
 8009c74:	eb01 0402 	add.w	r4, r1, r2
 8009c78:	d902      	bls.n	8009c80 <memmove+0x10>
 8009c7a:	4284      	cmp	r4, r0
 8009c7c:	4623      	mov	r3, r4
 8009c7e:	d807      	bhi.n	8009c90 <memmove+0x20>
 8009c80:	1e43      	subs	r3, r0, #1
 8009c82:	42a1      	cmp	r1, r4
 8009c84:	d008      	beq.n	8009c98 <memmove+0x28>
 8009c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c8e:	e7f8      	b.n	8009c82 <memmove+0x12>
 8009c90:	4402      	add	r2, r0
 8009c92:	4601      	mov	r1, r0
 8009c94:	428a      	cmp	r2, r1
 8009c96:	d100      	bne.n	8009c9a <memmove+0x2a>
 8009c98:	bd10      	pop	{r4, pc}
 8009c9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ca2:	e7f7      	b.n	8009c94 <memmove+0x24>

08009ca4 <__malloc_lock>:
 8009ca4:	4801      	ldr	r0, [pc, #4]	; (8009cac <__malloc_lock+0x8>)
 8009ca6:	f000 bc1f 	b.w	800a4e8 <__retarget_lock_acquire_recursive>
 8009caa:	bf00      	nop
 8009cac:	24000ee4 	.word	0x24000ee4

08009cb0 <__malloc_unlock>:
 8009cb0:	4801      	ldr	r0, [pc, #4]	; (8009cb8 <__malloc_unlock+0x8>)
 8009cb2:	f000 bc1a 	b.w	800a4ea <__retarget_lock_release_recursive>
 8009cb6:	bf00      	nop
 8009cb8:	24000ee4 	.word	0x24000ee4

08009cbc <_realloc_r>:
 8009cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc0:	4680      	mov	r8, r0
 8009cc2:	4614      	mov	r4, r2
 8009cc4:	460e      	mov	r6, r1
 8009cc6:	b921      	cbnz	r1, 8009cd2 <_realloc_r+0x16>
 8009cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ccc:	4611      	mov	r1, r2
 8009cce:	f7ff bdad 	b.w	800982c <_malloc_r>
 8009cd2:	b92a      	cbnz	r2, 8009ce0 <_realloc_r+0x24>
 8009cd4:	f7ff fd3e 	bl	8009754 <_free_r>
 8009cd8:	4625      	mov	r5, r4
 8009cda:	4628      	mov	r0, r5
 8009cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce0:	f000 fc6a 	bl	800a5b8 <_malloc_usable_size_r>
 8009ce4:	4284      	cmp	r4, r0
 8009ce6:	4607      	mov	r7, r0
 8009ce8:	d802      	bhi.n	8009cf0 <_realloc_r+0x34>
 8009cea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cee:	d812      	bhi.n	8009d16 <_realloc_r+0x5a>
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	4640      	mov	r0, r8
 8009cf4:	f7ff fd9a 	bl	800982c <_malloc_r>
 8009cf8:	4605      	mov	r5, r0
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d0ed      	beq.n	8009cda <_realloc_r+0x1e>
 8009cfe:	42bc      	cmp	r4, r7
 8009d00:	4622      	mov	r2, r4
 8009d02:	4631      	mov	r1, r6
 8009d04:	bf28      	it	cs
 8009d06:	463a      	movcs	r2, r7
 8009d08:	f7ff f97c 	bl	8009004 <memcpy>
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	4640      	mov	r0, r8
 8009d10:	f7ff fd20 	bl	8009754 <_free_r>
 8009d14:	e7e1      	b.n	8009cda <_realloc_r+0x1e>
 8009d16:	4635      	mov	r5, r6
 8009d18:	e7df      	b.n	8009cda <_realloc_r+0x1e>

08009d1a <__sfputc_r>:
 8009d1a:	6893      	ldr	r3, [r2, #8]
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	b410      	push	{r4}
 8009d22:	6093      	str	r3, [r2, #8]
 8009d24:	da08      	bge.n	8009d38 <__sfputc_r+0x1e>
 8009d26:	6994      	ldr	r4, [r2, #24]
 8009d28:	42a3      	cmp	r3, r4
 8009d2a:	db01      	blt.n	8009d30 <__sfputc_r+0x16>
 8009d2c:	290a      	cmp	r1, #10
 8009d2e:	d103      	bne.n	8009d38 <__sfputc_r+0x1e>
 8009d30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d34:	f000 b94a 	b.w	8009fcc <__swbuf_r>
 8009d38:	6813      	ldr	r3, [r2, #0]
 8009d3a:	1c58      	adds	r0, r3, #1
 8009d3c:	6010      	str	r0, [r2, #0]
 8009d3e:	7019      	strb	r1, [r3, #0]
 8009d40:	4608      	mov	r0, r1
 8009d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <__sfputs_r>:
 8009d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	460f      	mov	r7, r1
 8009d4e:	4614      	mov	r4, r2
 8009d50:	18d5      	adds	r5, r2, r3
 8009d52:	42ac      	cmp	r4, r5
 8009d54:	d101      	bne.n	8009d5a <__sfputs_r+0x12>
 8009d56:	2000      	movs	r0, #0
 8009d58:	e007      	b.n	8009d6a <__sfputs_r+0x22>
 8009d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d5e:	463a      	mov	r2, r7
 8009d60:	4630      	mov	r0, r6
 8009d62:	f7ff ffda 	bl	8009d1a <__sfputc_r>
 8009d66:	1c43      	adds	r3, r0, #1
 8009d68:	d1f3      	bne.n	8009d52 <__sfputs_r+0xa>
 8009d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d6c <_vfiprintf_r>:
 8009d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d70:	460d      	mov	r5, r1
 8009d72:	b09d      	sub	sp, #116	; 0x74
 8009d74:	4614      	mov	r4, r2
 8009d76:	4698      	mov	r8, r3
 8009d78:	4606      	mov	r6, r0
 8009d7a:	b118      	cbz	r0, 8009d84 <_vfiprintf_r+0x18>
 8009d7c:	6983      	ldr	r3, [r0, #24]
 8009d7e:	b90b      	cbnz	r3, 8009d84 <_vfiprintf_r+0x18>
 8009d80:	f000 fb14 	bl	800a3ac <__sinit>
 8009d84:	4b89      	ldr	r3, [pc, #548]	; (8009fac <_vfiprintf_r+0x240>)
 8009d86:	429d      	cmp	r5, r3
 8009d88:	d11b      	bne.n	8009dc2 <_vfiprintf_r+0x56>
 8009d8a:	6875      	ldr	r5, [r6, #4]
 8009d8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d8e:	07d9      	lsls	r1, r3, #31
 8009d90:	d405      	bmi.n	8009d9e <_vfiprintf_r+0x32>
 8009d92:	89ab      	ldrh	r3, [r5, #12]
 8009d94:	059a      	lsls	r2, r3, #22
 8009d96:	d402      	bmi.n	8009d9e <_vfiprintf_r+0x32>
 8009d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d9a:	f000 fba5 	bl	800a4e8 <__retarget_lock_acquire_recursive>
 8009d9e:	89ab      	ldrh	r3, [r5, #12]
 8009da0:	071b      	lsls	r3, r3, #28
 8009da2:	d501      	bpl.n	8009da8 <_vfiprintf_r+0x3c>
 8009da4:	692b      	ldr	r3, [r5, #16]
 8009da6:	b9eb      	cbnz	r3, 8009de4 <_vfiprintf_r+0x78>
 8009da8:	4629      	mov	r1, r5
 8009daa:	4630      	mov	r0, r6
 8009dac:	f000 f96e 	bl	800a08c <__swsetup_r>
 8009db0:	b1c0      	cbz	r0, 8009de4 <_vfiprintf_r+0x78>
 8009db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009db4:	07dc      	lsls	r4, r3, #31
 8009db6:	d50e      	bpl.n	8009dd6 <_vfiprintf_r+0x6a>
 8009db8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dbc:	b01d      	add	sp, #116	; 0x74
 8009dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc2:	4b7b      	ldr	r3, [pc, #492]	; (8009fb0 <_vfiprintf_r+0x244>)
 8009dc4:	429d      	cmp	r5, r3
 8009dc6:	d101      	bne.n	8009dcc <_vfiprintf_r+0x60>
 8009dc8:	68b5      	ldr	r5, [r6, #8]
 8009dca:	e7df      	b.n	8009d8c <_vfiprintf_r+0x20>
 8009dcc:	4b79      	ldr	r3, [pc, #484]	; (8009fb4 <_vfiprintf_r+0x248>)
 8009dce:	429d      	cmp	r5, r3
 8009dd0:	bf08      	it	eq
 8009dd2:	68f5      	ldreq	r5, [r6, #12]
 8009dd4:	e7da      	b.n	8009d8c <_vfiprintf_r+0x20>
 8009dd6:	89ab      	ldrh	r3, [r5, #12]
 8009dd8:	0598      	lsls	r0, r3, #22
 8009dda:	d4ed      	bmi.n	8009db8 <_vfiprintf_r+0x4c>
 8009ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dde:	f000 fb84 	bl	800a4ea <__retarget_lock_release_recursive>
 8009de2:	e7e9      	b.n	8009db8 <_vfiprintf_r+0x4c>
 8009de4:	2300      	movs	r3, #0
 8009de6:	9309      	str	r3, [sp, #36]	; 0x24
 8009de8:	2320      	movs	r3, #32
 8009dea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8009df2:	2330      	movs	r3, #48	; 0x30
 8009df4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009fb8 <_vfiprintf_r+0x24c>
 8009df8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dfc:	f04f 0901 	mov.w	r9, #1
 8009e00:	4623      	mov	r3, r4
 8009e02:	469a      	mov	sl, r3
 8009e04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e08:	b10a      	cbz	r2, 8009e0e <_vfiprintf_r+0xa2>
 8009e0a:	2a25      	cmp	r2, #37	; 0x25
 8009e0c:	d1f9      	bne.n	8009e02 <_vfiprintf_r+0x96>
 8009e0e:	ebba 0b04 	subs.w	fp, sl, r4
 8009e12:	d00b      	beq.n	8009e2c <_vfiprintf_r+0xc0>
 8009e14:	465b      	mov	r3, fp
 8009e16:	4622      	mov	r2, r4
 8009e18:	4629      	mov	r1, r5
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f7ff ff94 	bl	8009d48 <__sfputs_r>
 8009e20:	3001      	adds	r0, #1
 8009e22:	f000 80aa 	beq.w	8009f7a <_vfiprintf_r+0x20e>
 8009e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e28:	445a      	add	r2, fp
 8009e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f000 80a2 	beq.w	8009f7a <_vfiprintf_r+0x20e>
 8009e36:	2300      	movs	r3, #0
 8009e38:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e40:	f10a 0a01 	add.w	sl, sl, #1
 8009e44:	9304      	str	r3, [sp, #16]
 8009e46:	9307      	str	r3, [sp, #28]
 8009e48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e4c:	931a      	str	r3, [sp, #104]	; 0x68
 8009e4e:	4654      	mov	r4, sl
 8009e50:	2205      	movs	r2, #5
 8009e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e56:	4858      	ldr	r0, [pc, #352]	; (8009fb8 <_vfiprintf_r+0x24c>)
 8009e58:	f7f6 fa4a 	bl	80002f0 <memchr>
 8009e5c:	9a04      	ldr	r2, [sp, #16]
 8009e5e:	b9d8      	cbnz	r0, 8009e98 <_vfiprintf_r+0x12c>
 8009e60:	06d1      	lsls	r1, r2, #27
 8009e62:	bf44      	itt	mi
 8009e64:	2320      	movmi	r3, #32
 8009e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e6a:	0713      	lsls	r3, r2, #28
 8009e6c:	bf44      	itt	mi
 8009e6e:	232b      	movmi	r3, #43	; 0x2b
 8009e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e74:	f89a 3000 	ldrb.w	r3, [sl]
 8009e78:	2b2a      	cmp	r3, #42	; 0x2a
 8009e7a:	d015      	beq.n	8009ea8 <_vfiprintf_r+0x13c>
 8009e7c:	9a07      	ldr	r2, [sp, #28]
 8009e7e:	4654      	mov	r4, sl
 8009e80:	2000      	movs	r0, #0
 8009e82:	f04f 0c0a 	mov.w	ip, #10
 8009e86:	4621      	mov	r1, r4
 8009e88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e8c:	3b30      	subs	r3, #48	; 0x30
 8009e8e:	2b09      	cmp	r3, #9
 8009e90:	d94e      	bls.n	8009f30 <_vfiprintf_r+0x1c4>
 8009e92:	b1b0      	cbz	r0, 8009ec2 <_vfiprintf_r+0x156>
 8009e94:	9207      	str	r2, [sp, #28]
 8009e96:	e014      	b.n	8009ec2 <_vfiprintf_r+0x156>
 8009e98:	eba0 0308 	sub.w	r3, r0, r8
 8009e9c:	fa09 f303 	lsl.w	r3, r9, r3
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	9304      	str	r3, [sp, #16]
 8009ea4:	46a2      	mov	sl, r4
 8009ea6:	e7d2      	b.n	8009e4e <_vfiprintf_r+0xe2>
 8009ea8:	9b03      	ldr	r3, [sp, #12]
 8009eaa:	1d19      	adds	r1, r3, #4
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	9103      	str	r1, [sp, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	bfbb      	ittet	lt
 8009eb4:	425b      	neglt	r3, r3
 8009eb6:	f042 0202 	orrlt.w	r2, r2, #2
 8009eba:	9307      	strge	r3, [sp, #28]
 8009ebc:	9307      	strlt	r3, [sp, #28]
 8009ebe:	bfb8      	it	lt
 8009ec0:	9204      	strlt	r2, [sp, #16]
 8009ec2:	7823      	ldrb	r3, [r4, #0]
 8009ec4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ec6:	d10c      	bne.n	8009ee2 <_vfiprintf_r+0x176>
 8009ec8:	7863      	ldrb	r3, [r4, #1]
 8009eca:	2b2a      	cmp	r3, #42	; 0x2a
 8009ecc:	d135      	bne.n	8009f3a <_vfiprintf_r+0x1ce>
 8009ece:	9b03      	ldr	r3, [sp, #12]
 8009ed0:	1d1a      	adds	r2, r3, #4
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	9203      	str	r2, [sp, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	bfb8      	it	lt
 8009eda:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ede:	3402      	adds	r4, #2
 8009ee0:	9305      	str	r3, [sp, #20]
 8009ee2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009fc8 <_vfiprintf_r+0x25c>
 8009ee6:	7821      	ldrb	r1, [r4, #0]
 8009ee8:	2203      	movs	r2, #3
 8009eea:	4650      	mov	r0, sl
 8009eec:	f7f6 fa00 	bl	80002f0 <memchr>
 8009ef0:	b140      	cbz	r0, 8009f04 <_vfiprintf_r+0x198>
 8009ef2:	2340      	movs	r3, #64	; 0x40
 8009ef4:	eba0 000a 	sub.w	r0, r0, sl
 8009ef8:	fa03 f000 	lsl.w	r0, r3, r0
 8009efc:	9b04      	ldr	r3, [sp, #16]
 8009efe:	4303      	orrs	r3, r0
 8009f00:	3401      	adds	r4, #1
 8009f02:	9304      	str	r3, [sp, #16]
 8009f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f08:	482c      	ldr	r0, [pc, #176]	; (8009fbc <_vfiprintf_r+0x250>)
 8009f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f0e:	2206      	movs	r2, #6
 8009f10:	f7f6 f9ee 	bl	80002f0 <memchr>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d03f      	beq.n	8009f98 <_vfiprintf_r+0x22c>
 8009f18:	4b29      	ldr	r3, [pc, #164]	; (8009fc0 <_vfiprintf_r+0x254>)
 8009f1a:	bb1b      	cbnz	r3, 8009f64 <_vfiprintf_r+0x1f8>
 8009f1c:	9b03      	ldr	r3, [sp, #12]
 8009f1e:	3307      	adds	r3, #7
 8009f20:	f023 0307 	bic.w	r3, r3, #7
 8009f24:	3308      	adds	r3, #8
 8009f26:	9303      	str	r3, [sp, #12]
 8009f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f2a:	443b      	add	r3, r7
 8009f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f2e:	e767      	b.n	8009e00 <_vfiprintf_r+0x94>
 8009f30:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f34:	460c      	mov	r4, r1
 8009f36:	2001      	movs	r0, #1
 8009f38:	e7a5      	b.n	8009e86 <_vfiprintf_r+0x11a>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	3401      	adds	r4, #1
 8009f3e:	9305      	str	r3, [sp, #20]
 8009f40:	4619      	mov	r1, r3
 8009f42:	f04f 0c0a 	mov.w	ip, #10
 8009f46:	4620      	mov	r0, r4
 8009f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f4c:	3a30      	subs	r2, #48	; 0x30
 8009f4e:	2a09      	cmp	r2, #9
 8009f50:	d903      	bls.n	8009f5a <_vfiprintf_r+0x1ee>
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d0c5      	beq.n	8009ee2 <_vfiprintf_r+0x176>
 8009f56:	9105      	str	r1, [sp, #20]
 8009f58:	e7c3      	b.n	8009ee2 <_vfiprintf_r+0x176>
 8009f5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f5e:	4604      	mov	r4, r0
 8009f60:	2301      	movs	r3, #1
 8009f62:	e7f0      	b.n	8009f46 <_vfiprintf_r+0x1da>
 8009f64:	ab03      	add	r3, sp, #12
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	462a      	mov	r2, r5
 8009f6a:	4b16      	ldr	r3, [pc, #88]	; (8009fc4 <_vfiprintf_r+0x258>)
 8009f6c:	a904      	add	r1, sp, #16
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f7fd fe6e 	bl	8007c50 <_printf_float>
 8009f74:	4607      	mov	r7, r0
 8009f76:	1c78      	adds	r0, r7, #1
 8009f78:	d1d6      	bne.n	8009f28 <_vfiprintf_r+0x1bc>
 8009f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f7c:	07d9      	lsls	r1, r3, #31
 8009f7e:	d405      	bmi.n	8009f8c <_vfiprintf_r+0x220>
 8009f80:	89ab      	ldrh	r3, [r5, #12]
 8009f82:	059a      	lsls	r2, r3, #22
 8009f84:	d402      	bmi.n	8009f8c <_vfiprintf_r+0x220>
 8009f86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f88:	f000 faaf 	bl	800a4ea <__retarget_lock_release_recursive>
 8009f8c:	89ab      	ldrh	r3, [r5, #12]
 8009f8e:	065b      	lsls	r3, r3, #25
 8009f90:	f53f af12 	bmi.w	8009db8 <_vfiprintf_r+0x4c>
 8009f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f96:	e711      	b.n	8009dbc <_vfiprintf_r+0x50>
 8009f98:	ab03      	add	r3, sp, #12
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	462a      	mov	r2, r5
 8009f9e:	4b09      	ldr	r3, [pc, #36]	; (8009fc4 <_vfiprintf_r+0x258>)
 8009fa0:	a904      	add	r1, sp, #16
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f7fe f8e0 	bl	8008168 <_printf_i>
 8009fa8:	e7e4      	b.n	8009f74 <_vfiprintf_r+0x208>
 8009faa:	bf00      	nop
 8009fac:	0800ad24 	.word	0x0800ad24
 8009fb0:	0800ad44 	.word	0x0800ad44
 8009fb4:	0800ad04 	.word	0x0800ad04
 8009fb8:	0800abac 	.word	0x0800abac
 8009fbc:	0800abb6 	.word	0x0800abb6
 8009fc0:	08007c51 	.word	0x08007c51
 8009fc4:	08009d49 	.word	0x08009d49
 8009fc8:	0800abb2 	.word	0x0800abb2

08009fcc <__swbuf_r>:
 8009fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fce:	460e      	mov	r6, r1
 8009fd0:	4614      	mov	r4, r2
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	b118      	cbz	r0, 8009fde <__swbuf_r+0x12>
 8009fd6:	6983      	ldr	r3, [r0, #24]
 8009fd8:	b90b      	cbnz	r3, 8009fde <__swbuf_r+0x12>
 8009fda:	f000 f9e7 	bl	800a3ac <__sinit>
 8009fde:	4b21      	ldr	r3, [pc, #132]	; (800a064 <__swbuf_r+0x98>)
 8009fe0:	429c      	cmp	r4, r3
 8009fe2:	d12b      	bne.n	800a03c <__swbuf_r+0x70>
 8009fe4:	686c      	ldr	r4, [r5, #4]
 8009fe6:	69a3      	ldr	r3, [r4, #24]
 8009fe8:	60a3      	str	r3, [r4, #8]
 8009fea:	89a3      	ldrh	r3, [r4, #12]
 8009fec:	071a      	lsls	r2, r3, #28
 8009fee:	d52f      	bpl.n	800a050 <__swbuf_r+0x84>
 8009ff0:	6923      	ldr	r3, [r4, #16]
 8009ff2:	b36b      	cbz	r3, 800a050 <__swbuf_r+0x84>
 8009ff4:	6923      	ldr	r3, [r4, #16]
 8009ff6:	6820      	ldr	r0, [r4, #0]
 8009ff8:	1ac0      	subs	r0, r0, r3
 8009ffa:	6963      	ldr	r3, [r4, #20]
 8009ffc:	b2f6      	uxtb	r6, r6
 8009ffe:	4283      	cmp	r3, r0
 800a000:	4637      	mov	r7, r6
 800a002:	dc04      	bgt.n	800a00e <__swbuf_r+0x42>
 800a004:	4621      	mov	r1, r4
 800a006:	4628      	mov	r0, r5
 800a008:	f000 f93c 	bl	800a284 <_fflush_r>
 800a00c:	bb30      	cbnz	r0, 800a05c <__swbuf_r+0x90>
 800a00e:	68a3      	ldr	r3, [r4, #8]
 800a010:	3b01      	subs	r3, #1
 800a012:	60a3      	str	r3, [r4, #8]
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	6022      	str	r2, [r4, #0]
 800a01a:	701e      	strb	r6, [r3, #0]
 800a01c:	6963      	ldr	r3, [r4, #20]
 800a01e:	3001      	adds	r0, #1
 800a020:	4283      	cmp	r3, r0
 800a022:	d004      	beq.n	800a02e <__swbuf_r+0x62>
 800a024:	89a3      	ldrh	r3, [r4, #12]
 800a026:	07db      	lsls	r3, r3, #31
 800a028:	d506      	bpl.n	800a038 <__swbuf_r+0x6c>
 800a02a:	2e0a      	cmp	r6, #10
 800a02c:	d104      	bne.n	800a038 <__swbuf_r+0x6c>
 800a02e:	4621      	mov	r1, r4
 800a030:	4628      	mov	r0, r5
 800a032:	f000 f927 	bl	800a284 <_fflush_r>
 800a036:	b988      	cbnz	r0, 800a05c <__swbuf_r+0x90>
 800a038:	4638      	mov	r0, r7
 800a03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a03c:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <__swbuf_r+0x9c>)
 800a03e:	429c      	cmp	r4, r3
 800a040:	d101      	bne.n	800a046 <__swbuf_r+0x7a>
 800a042:	68ac      	ldr	r4, [r5, #8]
 800a044:	e7cf      	b.n	8009fe6 <__swbuf_r+0x1a>
 800a046:	4b09      	ldr	r3, [pc, #36]	; (800a06c <__swbuf_r+0xa0>)
 800a048:	429c      	cmp	r4, r3
 800a04a:	bf08      	it	eq
 800a04c:	68ec      	ldreq	r4, [r5, #12]
 800a04e:	e7ca      	b.n	8009fe6 <__swbuf_r+0x1a>
 800a050:	4621      	mov	r1, r4
 800a052:	4628      	mov	r0, r5
 800a054:	f000 f81a 	bl	800a08c <__swsetup_r>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d0cb      	beq.n	8009ff4 <__swbuf_r+0x28>
 800a05c:	f04f 37ff 	mov.w	r7, #4294967295
 800a060:	e7ea      	b.n	800a038 <__swbuf_r+0x6c>
 800a062:	bf00      	nop
 800a064:	0800ad24 	.word	0x0800ad24
 800a068:	0800ad44 	.word	0x0800ad44
 800a06c:	0800ad04 	.word	0x0800ad04

0800a070 <__ascii_wctomb>:
 800a070:	b149      	cbz	r1, 800a086 <__ascii_wctomb+0x16>
 800a072:	2aff      	cmp	r2, #255	; 0xff
 800a074:	bf85      	ittet	hi
 800a076:	238a      	movhi	r3, #138	; 0x8a
 800a078:	6003      	strhi	r3, [r0, #0]
 800a07a:	700a      	strbls	r2, [r1, #0]
 800a07c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a080:	bf98      	it	ls
 800a082:	2001      	movls	r0, #1
 800a084:	4770      	bx	lr
 800a086:	4608      	mov	r0, r1
 800a088:	4770      	bx	lr
	...

0800a08c <__swsetup_r>:
 800a08c:	4b32      	ldr	r3, [pc, #200]	; (800a158 <__swsetup_r+0xcc>)
 800a08e:	b570      	push	{r4, r5, r6, lr}
 800a090:	681d      	ldr	r5, [r3, #0]
 800a092:	4606      	mov	r6, r0
 800a094:	460c      	mov	r4, r1
 800a096:	b125      	cbz	r5, 800a0a2 <__swsetup_r+0x16>
 800a098:	69ab      	ldr	r3, [r5, #24]
 800a09a:	b913      	cbnz	r3, 800a0a2 <__swsetup_r+0x16>
 800a09c:	4628      	mov	r0, r5
 800a09e:	f000 f985 	bl	800a3ac <__sinit>
 800a0a2:	4b2e      	ldr	r3, [pc, #184]	; (800a15c <__swsetup_r+0xd0>)
 800a0a4:	429c      	cmp	r4, r3
 800a0a6:	d10f      	bne.n	800a0c8 <__swsetup_r+0x3c>
 800a0a8:	686c      	ldr	r4, [r5, #4]
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0b0:	0719      	lsls	r1, r3, #28
 800a0b2:	d42c      	bmi.n	800a10e <__swsetup_r+0x82>
 800a0b4:	06dd      	lsls	r5, r3, #27
 800a0b6:	d411      	bmi.n	800a0dc <__swsetup_r+0x50>
 800a0b8:	2309      	movs	r3, #9
 800a0ba:	6033      	str	r3, [r6, #0]
 800a0bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0c0:	81a3      	strh	r3, [r4, #12]
 800a0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c6:	e03e      	b.n	800a146 <__swsetup_r+0xba>
 800a0c8:	4b25      	ldr	r3, [pc, #148]	; (800a160 <__swsetup_r+0xd4>)
 800a0ca:	429c      	cmp	r4, r3
 800a0cc:	d101      	bne.n	800a0d2 <__swsetup_r+0x46>
 800a0ce:	68ac      	ldr	r4, [r5, #8]
 800a0d0:	e7eb      	b.n	800a0aa <__swsetup_r+0x1e>
 800a0d2:	4b24      	ldr	r3, [pc, #144]	; (800a164 <__swsetup_r+0xd8>)
 800a0d4:	429c      	cmp	r4, r3
 800a0d6:	bf08      	it	eq
 800a0d8:	68ec      	ldreq	r4, [r5, #12]
 800a0da:	e7e6      	b.n	800a0aa <__swsetup_r+0x1e>
 800a0dc:	0758      	lsls	r0, r3, #29
 800a0de:	d512      	bpl.n	800a106 <__swsetup_r+0x7a>
 800a0e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0e2:	b141      	cbz	r1, 800a0f6 <__swsetup_r+0x6a>
 800a0e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0e8:	4299      	cmp	r1, r3
 800a0ea:	d002      	beq.n	800a0f2 <__swsetup_r+0x66>
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f7ff fb31 	bl	8009754 <_free_r>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	6363      	str	r3, [r4, #52]	; 0x34
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0fc:	81a3      	strh	r3, [r4, #12]
 800a0fe:	2300      	movs	r3, #0
 800a100:	6063      	str	r3, [r4, #4]
 800a102:	6923      	ldr	r3, [r4, #16]
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	f043 0308 	orr.w	r3, r3, #8
 800a10c:	81a3      	strh	r3, [r4, #12]
 800a10e:	6923      	ldr	r3, [r4, #16]
 800a110:	b94b      	cbnz	r3, 800a126 <__swsetup_r+0x9a>
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a11c:	d003      	beq.n	800a126 <__swsetup_r+0x9a>
 800a11e:	4621      	mov	r1, r4
 800a120:	4630      	mov	r0, r6
 800a122:	f000 fa09 	bl	800a538 <__smakebuf_r>
 800a126:	89a0      	ldrh	r0, [r4, #12]
 800a128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a12c:	f010 0301 	ands.w	r3, r0, #1
 800a130:	d00a      	beq.n	800a148 <__swsetup_r+0xbc>
 800a132:	2300      	movs	r3, #0
 800a134:	60a3      	str	r3, [r4, #8]
 800a136:	6963      	ldr	r3, [r4, #20]
 800a138:	425b      	negs	r3, r3
 800a13a:	61a3      	str	r3, [r4, #24]
 800a13c:	6923      	ldr	r3, [r4, #16]
 800a13e:	b943      	cbnz	r3, 800a152 <__swsetup_r+0xc6>
 800a140:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a144:	d1ba      	bne.n	800a0bc <__swsetup_r+0x30>
 800a146:	bd70      	pop	{r4, r5, r6, pc}
 800a148:	0781      	lsls	r1, r0, #30
 800a14a:	bf58      	it	pl
 800a14c:	6963      	ldrpl	r3, [r4, #20]
 800a14e:	60a3      	str	r3, [r4, #8]
 800a150:	e7f4      	b.n	800a13c <__swsetup_r+0xb0>
 800a152:	2000      	movs	r0, #0
 800a154:	e7f7      	b.n	800a146 <__swsetup_r+0xba>
 800a156:	bf00      	nop
 800a158:	24000010 	.word	0x24000010
 800a15c:	0800ad24 	.word	0x0800ad24
 800a160:	0800ad44 	.word	0x0800ad44
 800a164:	0800ad04 	.word	0x0800ad04

0800a168 <abort>:
 800a168:	b508      	push	{r3, lr}
 800a16a:	2006      	movs	r0, #6
 800a16c:	f000 fa54 	bl	800a618 <raise>
 800a170:	2001      	movs	r0, #1
 800a172:	f7f7 fde3 	bl	8001d3c <_exit>
	...

0800a178 <__sflush_r>:
 800a178:	898a      	ldrh	r2, [r1, #12]
 800a17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17e:	4605      	mov	r5, r0
 800a180:	0710      	lsls	r0, r2, #28
 800a182:	460c      	mov	r4, r1
 800a184:	d458      	bmi.n	800a238 <__sflush_r+0xc0>
 800a186:	684b      	ldr	r3, [r1, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	dc05      	bgt.n	800a198 <__sflush_r+0x20>
 800a18c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a18e:	2b00      	cmp	r3, #0
 800a190:	dc02      	bgt.n	800a198 <__sflush_r+0x20>
 800a192:	2000      	movs	r0, #0
 800a194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a19a:	2e00      	cmp	r6, #0
 800a19c:	d0f9      	beq.n	800a192 <__sflush_r+0x1a>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1a4:	682f      	ldr	r7, [r5, #0]
 800a1a6:	602b      	str	r3, [r5, #0]
 800a1a8:	d032      	beq.n	800a210 <__sflush_r+0x98>
 800a1aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1ac:	89a3      	ldrh	r3, [r4, #12]
 800a1ae:	075a      	lsls	r2, r3, #29
 800a1b0:	d505      	bpl.n	800a1be <__sflush_r+0x46>
 800a1b2:	6863      	ldr	r3, [r4, #4]
 800a1b4:	1ac0      	subs	r0, r0, r3
 800a1b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1b8:	b10b      	cbz	r3, 800a1be <__sflush_r+0x46>
 800a1ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1bc:	1ac0      	subs	r0, r0, r3
 800a1be:	2300      	movs	r3, #0
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1c4:	6a21      	ldr	r1, [r4, #32]
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	47b0      	blx	r6
 800a1ca:	1c43      	adds	r3, r0, #1
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	d106      	bne.n	800a1de <__sflush_r+0x66>
 800a1d0:	6829      	ldr	r1, [r5, #0]
 800a1d2:	291d      	cmp	r1, #29
 800a1d4:	d82c      	bhi.n	800a230 <__sflush_r+0xb8>
 800a1d6:	4a2a      	ldr	r2, [pc, #168]	; (800a280 <__sflush_r+0x108>)
 800a1d8:	40ca      	lsrs	r2, r1
 800a1da:	07d6      	lsls	r6, r2, #31
 800a1dc:	d528      	bpl.n	800a230 <__sflush_r+0xb8>
 800a1de:	2200      	movs	r2, #0
 800a1e0:	6062      	str	r2, [r4, #4]
 800a1e2:	04d9      	lsls	r1, r3, #19
 800a1e4:	6922      	ldr	r2, [r4, #16]
 800a1e6:	6022      	str	r2, [r4, #0]
 800a1e8:	d504      	bpl.n	800a1f4 <__sflush_r+0x7c>
 800a1ea:	1c42      	adds	r2, r0, #1
 800a1ec:	d101      	bne.n	800a1f2 <__sflush_r+0x7a>
 800a1ee:	682b      	ldr	r3, [r5, #0]
 800a1f0:	b903      	cbnz	r3, 800a1f4 <__sflush_r+0x7c>
 800a1f2:	6560      	str	r0, [r4, #84]	; 0x54
 800a1f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1f6:	602f      	str	r7, [r5, #0]
 800a1f8:	2900      	cmp	r1, #0
 800a1fa:	d0ca      	beq.n	800a192 <__sflush_r+0x1a>
 800a1fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a200:	4299      	cmp	r1, r3
 800a202:	d002      	beq.n	800a20a <__sflush_r+0x92>
 800a204:	4628      	mov	r0, r5
 800a206:	f7ff faa5 	bl	8009754 <_free_r>
 800a20a:	2000      	movs	r0, #0
 800a20c:	6360      	str	r0, [r4, #52]	; 0x34
 800a20e:	e7c1      	b.n	800a194 <__sflush_r+0x1c>
 800a210:	6a21      	ldr	r1, [r4, #32]
 800a212:	2301      	movs	r3, #1
 800a214:	4628      	mov	r0, r5
 800a216:	47b0      	blx	r6
 800a218:	1c41      	adds	r1, r0, #1
 800a21a:	d1c7      	bne.n	800a1ac <__sflush_r+0x34>
 800a21c:	682b      	ldr	r3, [r5, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d0c4      	beq.n	800a1ac <__sflush_r+0x34>
 800a222:	2b1d      	cmp	r3, #29
 800a224:	d001      	beq.n	800a22a <__sflush_r+0xb2>
 800a226:	2b16      	cmp	r3, #22
 800a228:	d101      	bne.n	800a22e <__sflush_r+0xb6>
 800a22a:	602f      	str	r7, [r5, #0]
 800a22c:	e7b1      	b.n	800a192 <__sflush_r+0x1a>
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a234:	81a3      	strh	r3, [r4, #12]
 800a236:	e7ad      	b.n	800a194 <__sflush_r+0x1c>
 800a238:	690f      	ldr	r7, [r1, #16]
 800a23a:	2f00      	cmp	r7, #0
 800a23c:	d0a9      	beq.n	800a192 <__sflush_r+0x1a>
 800a23e:	0793      	lsls	r3, r2, #30
 800a240:	680e      	ldr	r6, [r1, #0]
 800a242:	bf08      	it	eq
 800a244:	694b      	ldreq	r3, [r1, #20]
 800a246:	600f      	str	r7, [r1, #0]
 800a248:	bf18      	it	ne
 800a24a:	2300      	movne	r3, #0
 800a24c:	eba6 0807 	sub.w	r8, r6, r7
 800a250:	608b      	str	r3, [r1, #8]
 800a252:	f1b8 0f00 	cmp.w	r8, #0
 800a256:	dd9c      	ble.n	800a192 <__sflush_r+0x1a>
 800a258:	6a21      	ldr	r1, [r4, #32]
 800a25a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a25c:	4643      	mov	r3, r8
 800a25e:	463a      	mov	r2, r7
 800a260:	4628      	mov	r0, r5
 800a262:	47b0      	blx	r6
 800a264:	2800      	cmp	r0, #0
 800a266:	dc06      	bgt.n	800a276 <__sflush_r+0xfe>
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a26e:	81a3      	strh	r3, [r4, #12]
 800a270:	f04f 30ff 	mov.w	r0, #4294967295
 800a274:	e78e      	b.n	800a194 <__sflush_r+0x1c>
 800a276:	4407      	add	r7, r0
 800a278:	eba8 0800 	sub.w	r8, r8, r0
 800a27c:	e7e9      	b.n	800a252 <__sflush_r+0xda>
 800a27e:	bf00      	nop
 800a280:	20400001 	.word	0x20400001

0800a284 <_fflush_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	690b      	ldr	r3, [r1, #16]
 800a288:	4605      	mov	r5, r0
 800a28a:	460c      	mov	r4, r1
 800a28c:	b913      	cbnz	r3, 800a294 <_fflush_r+0x10>
 800a28e:	2500      	movs	r5, #0
 800a290:	4628      	mov	r0, r5
 800a292:	bd38      	pop	{r3, r4, r5, pc}
 800a294:	b118      	cbz	r0, 800a29e <_fflush_r+0x1a>
 800a296:	6983      	ldr	r3, [r0, #24]
 800a298:	b90b      	cbnz	r3, 800a29e <_fflush_r+0x1a>
 800a29a:	f000 f887 	bl	800a3ac <__sinit>
 800a29e:	4b14      	ldr	r3, [pc, #80]	; (800a2f0 <_fflush_r+0x6c>)
 800a2a0:	429c      	cmp	r4, r3
 800a2a2:	d11b      	bne.n	800a2dc <_fflush_r+0x58>
 800a2a4:	686c      	ldr	r4, [r5, #4]
 800a2a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d0ef      	beq.n	800a28e <_fflush_r+0xa>
 800a2ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2b0:	07d0      	lsls	r0, r2, #31
 800a2b2:	d404      	bmi.n	800a2be <_fflush_r+0x3a>
 800a2b4:	0599      	lsls	r1, r3, #22
 800a2b6:	d402      	bmi.n	800a2be <_fflush_r+0x3a>
 800a2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2ba:	f000 f915 	bl	800a4e8 <__retarget_lock_acquire_recursive>
 800a2be:	4628      	mov	r0, r5
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	f7ff ff59 	bl	800a178 <__sflush_r>
 800a2c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2c8:	07da      	lsls	r2, r3, #31
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	d4e0      	bmi.n	800a290 <_fflush_r+0xc>
 800a2ce:	89a3      	ldrh	r3, [r4, #12]
 800a2d0:	059b      	lsls	r3, r3, #22
 800a2d2:	d4dd      	bmi.n	800a290 <_fflush_r+0xc>
 800a2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2d6:	f000 f908 	bl	800a4ea <__retarget_lock_release_recursive>
 800a2da:	e7d9      	b.n	800a290 <_fflush_r+0xc>
 800a2dc:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <_fflush_r+0x70>)
 800a2de:	429c      	cmp	r4, r3
 800a2e0:	d101      	bne.n	800a2e6 <_fflush_r+0x62>
 800a2e2:	68ac      	ldr	r4, [r5, #8]
 800a2e4:	e7df      	b.n	800a2a6 <_fflush_r+0x22>
 800a2e6:	4b04      	ldr	r3, [pc, #16]	; (800a2f8 <_fflush_r+0x74>)
 800a2e8:	429c      	cmp	r4, r3
 800a2ea:	bf08      	it	eq
 800a2ec:	68ec      	ldreq	r4, [r5, #12]
 800a2ee:	e7da      	b.n	800a2a6 <_fflush_r+0x22>
 800a2f0:	0800ad24 	.word	0x0800ad24
 800a2f4:	0800ad44 	.word	0x0800ad44
 800a2f8:	0800ad04 	.word	0x0800ad04

0800a2fc <std>:
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	b510      	push	{r4, lr}
 800a300:	4604      	mov	r4, r0
 800a302:	e9c0 3300 	strd	r3, r3, [r0]
 800a306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a30a:	6083      	str	r3, [r0, #8]
 800a30c:	8181      	strh	r1, [r0, #12]
 800a30e:	6643      	str	r3, [r0, #100]	; 0x64
 800a310:	81c2      	strh	r2, [r0, #14]
 800a312:	6183      	str	r3, [r0, #24]
 800a314:	4619      	mov	r1, r3
 800a316:	2208      	movs	r2, #8
 800a318:	305c      	adds	r0, #92	; 0x5c
 800a31a:	f7fd fc01 	bl	8007b20 <memset>
 800a31e:	4b05      	ldr	r3, [pc, #20]	; (800a334 <std+0x38>)
 800a320:	6263      	str	r3, [r4, #36]	; 0x24
 800a322:	4b05      	ldr	r3, [pc, #20]	; (800a338 <std+0x3c>)
 800a324:	62a3      	str	r3, [r4, #40]	; 0x28
 800a326:	4b05      	ldr	r3, [pc, #20]	; (800a33c <std+0x40>)
 800a328:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a32a:	4b05      	ldr	r3, [pc, #20]	; (800a340 <std+0x44>)
 800a32c:	6224      	str	r4, [r4, #32]
 800a32e:	6323      	str	r3, [r4, #48]	; 0x30
 800a330:	bd10      	pop	{r4, pc}
 800a332:	bf00      	nop
 800a334:	0800a651 	.word	0x0800a651
 800a338:	0800a673 	.word	0x0800a673
 800a33c:	0800a6ab 	.word	0x0800a6ab
 800a340:	0800a6cf 	.word	0x0800a6cf

0800a344 <_cleanup_r>:
 800a344:	4901      	ldr	r1, [pc, #4]	; (800a34c <_cleanup_r+0x8>)
 800a346:	f000 b8af 	b.w	800a4a8 <_fwalk_reent>
 800a34a:	bf00      	nop
 800a34c:	0800a285 	.word	0x0800a285

0800a350 <__sfmoreglue>:
 800a350:	b570      	push	{r4, r5, r6, lr}
 800a352:	2268      	movs	r2, #104	; 0x68
 800a354:	1e4d      	subs	r5, r1, #1
 800a356:	4355      	muls	r5, r2
 800a358:	460e      	mov	r6, r1
 800a35a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a35e:	f7ff fa65 	bl	800982c <_malloc_r>
 800a362:	4604      	mov	r4, r0
 800a364:	b140      	cbz	r0, 800a378 <__sfmoreglue+0x28>
 800a366:	2100      	movs	r1, #0
 800a368:	e9c0 1600 	strd	r1, r6, [r0]
 800a36c:	300c      	adds	r0, #12
 800a36e:	60a0      	str	r0, [r4, #8]
 800a370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a374:	f7fd fbd4 	bl	8007b20 <memset>
 800a378:	4620      	mov	r0, r4
 800a37a:	bd70      	pop	{r4, r5, r6, pc}

0800a37c <__sfp_lock_acquire>:
 800a37c:	4801      	ldr	r0, [pc, #4]	; (800a384 <__sfp_lock_acquire+0x8>)
 800a37e:	f000 b8b3 	b.w	800a4e8 <__retarget_lock_acquire_recursive>
 800a382:	bf00      	nop
 800a384:	24000ee5 	.word	0x24000ee5

0800a388 <__sfp_lock_release>:
 800a388:	4801      	ldr	r0, [pc, #4]	; (800a390 <__sfp_lock_release+0x8>)
 800a38a:	f000 b8ae 	b.w	800a4ea <__retarget_lock_release_recursive>
 800a38e:	bf00      	nop
 800a390:	24000ee5 	.word	0x24000ee5

0800a394 <__sinit_lock_acquire>:
 800a394:	4801      	ldr	r0, [pc, #4]	; (800a39c <__sinit_lock_acquire+0x8>)
 800a396:	f000 b8a7 	b.w	800a4e8 <__retarget_lock_acquire_recursive>
 800a39a:	bf00      	nop
 800a39c:	24000ee6 	.word	0x24000ee6

0800a3a0 <__sinit_lock_release>:
 800a3a0:	4801      	ldr	r0, [pc, #4]	; (800a3a8 <__sinit_lock_release+0x8>)
 800a3a2:	f000 b8a2 	b.w	800a4ea <__retarget_lock_release_recursive>
 800a3a6:	bf00      	nop
 800a3a8:	24000ee6 	.word	0x24000ee6

0800a3ac <__sinit>:
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	f7ff fff0 	bl	800a394 <__sinit_lock_acquire>
 800a3b4:	69a3      	ldr	r3, [r4, #24]
 800a3b6:	b11b      	cbz	r3, 800a3c0 <__sinit+0x14>
 800a3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3bc:	f7ff bff0 	b.w	800a3a0 <__sinit_lock_release>
 800a3c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a3c4:	6523      	str	r3, [r4, #80]	; 0x50
 800a3c6:	4b13      	ldr	r3, [pc, #76]	; (800a414 <__sinit+0x68>)
 800a3c8:	4a13      	ldr	r2, [pc, #76]	; (800a418 <__sinit+0x6c>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a3ce:	42a3      	cmp	r3, r4
 800a3d0:	bf04      	itt	eq
 800a3d2:	2301      	moveq	r3, #1
 800a3d4:	61a3      	streq	r3, [r4, #24]
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f000 f820 	bl	800a41c <__sfp>
 800a3dc:	6060      	str	r0, [r4, #4]
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f000 f81c 	bl	800a41c <__sfp>
 800a3e4:	60a0      	str	r0, [r4, #8]
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f000 f818 	bl	800a41c <__sfp>
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	60e0      	str	r0, [r4, #12]
 800a3f0:	2104      	movs	r1, #4
 800a3f2:	6860      	ldr	r0, [r4, #4]
 800a3f4:	f7ff ff82 	bl	800a2fc <std>
 800a3f8:	68a0      	ldr	r0, [r4, #8]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	2109      	movs	r1, #9
 800a3fe:	f7ff ff7d 	bl	800a2fc <std>
 800a402:	68e0      	ldr	r0, [r4, #12]
 800a404:	2202      	movs	r2, #2
 800a406:	2112      	movs	r1, #18
 800a408:	f7ff ff78 	bl	800a2fc <std>
 800a40c:	2301      	movs	r3, #1
 800a40e:	61a3      	str	r3, [r4, #24]
 800a410:	e7d2      	b.n	800a3b8 <__sinit+0xc>
 800a412:	bf00      	nop
 800a414:	0800a988 	.word	0x0800a988
 800a418:	0800a345 	.word	0x0800a345

0800a41c <__sfp>:
 800a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41e:	4607      	mov	r7, r0
 800a420:	f7ff ffac 	bl	800a37c <__sfp_lock_acquire>
 800a424:	4b1e      	ldr	r3, [pc, #120]	; (800a4a0 <__sfp+0x84>)
 800a426:	681e      	ldr	r6, [r3, #0]
 800a428:	69b3      	ldr	r3, [r6, #24]
 800a42a:	b913      	cbnz	r3, 800a432 <__sfp+0x16>
 800a42c:	4630      	mov	r0, r6
 800a42e:	f7ff ffbd 	bl	800a3ac <__sinit>
 800a432:	3648      	adds	r6, #72	; 0x48
 800a434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a438:	3b01      	subs	r3, #1
 800a43a:	d503      	bpl.n	800a444 <__sfp+0x28>
 800a43c:	6833      	ldr	r3, [r6, #0]
 800a43e:	b30b      	cbz	r3, 800a484 <__sfp+0x68>
 800a440:	6836      	ldr	r6, [r6, #0]
 800a442:	e7f7      	b.n	800a434 <__sfp+0x18>
 800a444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a448:	b9d5      	cbnz	r5, 800a480 <__sfp+0x64>
 800a44a:	4b16      	ldr	r3, [pc, #88]	; (800a4a4 <__sfp+0x88>)
 800a44c:	60e3      	str	r3, [r4, #12]
 800a44e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a452:	6665      	str	r5, [r4, #100]	; 0x64
 800a454:	f000 f847 	bl	800a4e6 <__retarget_lock_init_recursive>
 800a458:	f7ff ff96 	bl	800a388 <__sfp_lock_release>
 800a45c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a460:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a464:	6025      	str	r5, [r4, #0]
 800a466:	61a5      	str	r5, [r4, #24]
 800a468:	2208      	movs	r2, #8
 800a46a:	4629      	mov	r1, r5
 800a46c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a470:	f7fd fb56 	bl	8007b20 <memset>
 800a474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a47c:	4620      	mov	r0, r4
 800a47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a480:	3468      	adds	r4, #104	; 0x68
 800a482:	e7d9      	b.n	800a438 <__sfp+0x1c>
 800a484:	2104      	movs	r1, #4
 800a486:	4638      	mov	r0, r7
 800a488:	f7ff ff62 	bl	800a350 <__sfmoreglue>
 800a48c:	4604      	mov	r4, r0
 800a48e:	6030      	str	r0, [r6, #0]
 800a490:	2800      	cmp	r0, #0
 800a492:	d1d5      	bne.n	800a440 <__sfp+0x24>
 800a494:	f7ff ff78 	bl	800a388 <__sfp_lock_release>
 800a498:	230c      	movs	r3, #12
 800a49a:	603b      	str	r3, [r7, #0]
 800a49c:	e7ee      	b.n	800a47c <__sfp+0x60>
 800a49e:	bf00      	nop
 800a4a0:	0800a988 	.word	0x0800a988
 800a4a4:	ffff0001 	.word	0xffff0001

0800a4a8 <_fwalk_reent>:
 800a4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4ac:	4606      	mov	r6, r0
 800a4ae:	4688      	mov	r8, r1
 800a4b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a4b4:	2700      	movs	r7, #0
 800a4b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4ba:	f1b9 0901 	subs.w	r9, r9, #1
 800a4be:	d505      	bpl.n	800a4cc <_fwalk_reent+0x24>
 800a4c0:	6824      	ldr	r4, [r4, #0]
 800a4c2:	2c00      	cmp	r4, #0
 800a4c4:	d1f7      	bne.n	800a4b6 <_fwalk_reent+0xe>
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4cc:	89ab      	ldrh	r3, [r5, #12]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d907      	bls.n	800a4e2 <_fwalk_reent+0x3a>
 800a4d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	d003      	beq.n	800a4e2 <_fwalk_reent+0x3a>
 800a4da:	4629      	mov	r1, r5
 800a4dc:	4630      	mov	r0, r6
 800a4de:	47c0      	blx	r8
 800a4e0:	4307      	orrs	r7, r0
 800a4e2:	3568      	adds	r5, #104	; 0x68
 800a4e4:	e7e9      	b.n	800a4ba <_fwalk_reent+0x12>

0800a4e6 <__retarget_lock_init_recursive>:
 800a4e6:	4770      	bx	lr

0800a4e8 <__retarget_lock_acquire_recursive>:
 800a4e8:	4770      	bx	lr

0800a4ea <__retarget_lock_release_recursive>:
 800a4ea:	4770      	bx	lr

0800a4ec <__swhatbuf_r>:
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	460e      	mov	r6, r1
 800a4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f4:	2900      	cmp	r1, #0
 800a4f6:	b096      	sub	sp, #88	; 0x58
 800a4f8:	4614      	mov	r4, r2
 800a4fa:	461d      	mov	r5, r3
 800a4fc:	da08      	bge.n	800a510 <__swhatbuf_r+0x24>
 800a4fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	602a      	str	r2, [r5, #0]
 800a506:	061a      	lsls	r2, r3, #24
 800a508:	d410      	bmi.n	800a52c <__swhatbuf_r+0x40>
 800a50a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a50e:	e00e      	b.n	800a52e <__swhatbuf_r+0x42>
 800a510:	466a      	mov	r2, sp
 800a512:	f000 f903 	bl	800a71c <_fstat_r>
 800a516:	2800      	cmp	r0, #0
 800a518:	dbf1      	blt.n	800a4fe <__swhatbuf_r+0x12>
 800a51a:	9a01      	ldr	r2, [sp, #4]
 800a51c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a520:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a524:	425a      	negs	r2, r3
 800a526:	415a      	adcs	r2, r3
 800a528:	602a      	str	r2, [r5, #0]
 800a52a:	e7ee      	b.n	800a50a <__swhatbuf_r+0x1e>
 800a52c:	2340      	movs	r3, #64	; 0x40
 800a52e:	2000      	movs	r0, #0
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	b016      	add	sp, #88	; 0x58
 800a534:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a538 <__smakebuf_r>:
 800a538:	898b      	ldrh	r3, [r1, #12]
 800a53a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a53c:	079d      	lsls	r5, r3, #30
 800a53e:	4606      	mov	r6, r0
 800a540:	460c      	mov	r4, r1
 800a542:	d507      	bpl.n	800a554 <__smakebuf_r+0x1c>
 800a544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	6123      	str	r3, [r4, #16]
 800a54c:	2301      	movs	r3, #1
 800a54e:	6163      	str	r3, [r4, #20]
 800a550:	b002      	add	sp, #8
 800a552:	bd70      	pop	{r4, r5, r6, pc}
 800a554:	ab01      	add	r3, sp, #4
 800a556:	466a      	mov	r2, sp
 800a558:	f7ff ffc8 	bl	800a4ec <__swhatbuf_r>
 800a55c:	9900      	ldr	r1, [sp, #0]
 800a55e:	4605      	mov	r5, r0
 800a560:	4630      	mov	r0, r6
 800a562:	f7ff f963 	bl	800982c <_malloc_r>
 800a566:	b948      	cbnz	r0, 800a57c <__smakebuf_r+0x44>
 800a568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a56c:	059a      	lsls	r2, r3, #22
 800a56e:	d4ef      	bmi.n	800a550 <__smakebuf_r+0x18>
 800a570:	f023 0303 	bic.w	r3, r3, #3
 800a574:	f043 0302 	orr.w	r3, r3, #2
 800a578:	81a3      	strh	r3, [r4, #12]
 800a57a:	e7e3      	b.n	800a544 <__smakebuf_r+0xc>
 800a57c:	4b0d      	ldr	r3, [pc, #52]	; (800a5b4 <__smakebuf_r+0x7c>)
 800a57e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	6020      	str	r0, [r4, #0]
 800a584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a588:	81a3      	strh	r3, [r4, #12]
 800a58a:	9b00      	ldr	r3, [sp, #0]
 800a58c:	6163      	str	r3, [r4, #20]
 800a58e:	9b01      	ldr	r3, [sp, #4]
 800a590:	6120      	str	r0, [r4, #16]
 800a592:	b15b      	cbz	r3, 800a5ac <__smakebuf_r+0x74>
 800a594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a598:	4630      	mov	r0, r6
 800a59a:	f000 f8d1 	bl	800a740 <_isatty_r>
 800a59e:	b128      	cbz	r0, 800a5ac <__smakebuf_r+0x74>
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	f023 0303 	bic.w	r3, r3, #3
 800a5a6:	f043 0301 	orr.w	r3, r3, #1
 800a5aa:	81a3      	strh	r3, [r4, #12]
 800a5ac:	89a0      	ldrh	r0, [r4, #12]
 800a5ae:	4305      	orrs	r5, r0
 800a5b0:	81a5      	strh	r5, [r4, #12]
 800a5b2:	e7cd      	b.n	800a550 <__smakebuf_r+0x18>
 800a5b4:	0800a345 	.word	0x0800a345

0800a5b8 <_malloc_usable_size_r>:
 800a5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5bc:	1f18      	subs	r0, r3, #4
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	bfbc      	itt	lt
 800a5c2:	580b      	ldrlt	r3, [r1, r0]
 800a5c4:	18c0      	addlt	r0, r0, r3
 800a5c6:	4770      	bx	lr

0800a5c8 <_raise_r>:
 800a5c8:	291f      	cmp	r1, #31
 800a5ca:	b538      	push	{r3, r4, r5, lr}
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	d904      	bls.n	800a5dc <_raise_r+0x14>
 800a5d2:	2316      	movs	r3, #22
 800a5d4:	6003      	str	r3, [r0, #0]
 800a5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5da:	bd38      	pop	{r3, r4, r5, pc}
 800a5dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a5de:	b112      	cbz	r2, 800a5e6 <_raise_r+0x1e>
 800a5e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5e4:	b94b      	cbnz	r3, 800a5fa <_raise_r+0x32>
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f000 f830 	bl	800a64c <_getpid_r>
 800a5ec:	462a      	mov	r2, r5
 800a5ee:	4601      	mov	r1, r0
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5f6:	f000 b817 	b.w	800a628 <_kill_r>
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d00a      	beq.n	800a614 <_raise_r+0x4c>
 800a5fe:	1c59      	adds	r1, r3, #1
 800a600:	d103      	bne.n	800a60a <_raise_r+0x42>
 800a602:	2316      	movs	r3, #22
 800a604:	6003      	str	r3, [r0, #0]
 800a606:	2001      	movs	r0, #1
 800a608:	e7e7      	b.n	800a5da <_raise_r+0x12>
 800a60a:	2400      	movs	r4, #0
 800a60c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a610:	4628      	mov	r0, r5
 800a612:	4798      	blx	r3
 800a614:	2000      	movs	r0, #0
 800a616:	e7e0      	b.n	800a5da <_raise_r+0x12>

0800a618 <raise>:
 800a618:	4b02      	ldr	r3, [pc, #8]	; (800a624 <raise+0xc>)
 800a61a:	4601      	mov	r1, r0
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	f7ff bfd3 	b.w	800a5c8 <_raise_r>
 800a622:	bf00      	nop
 800a624:	24000010 	.word	0x24000010

0800a628 <_kill_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	4d07      	ldr	r5, [pc, #28]	; (800a648 <_kill_r+0x20>)
 800a62c:	2300      	movs	r3, #0
 800a62e:	4604      	mov	r4, r0
 800a630:	4608      	mov	r0, r1
 800a632:	4611      	mov	r1, r2
 800a634:	602b      	str	r3, [r5, #0]
 800a636:	f7f7 fb71 	bl	8001d1c <_kill>
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	d102      	bne.n	800a644 <_kill_r+0x1c>
 800a63e:	682b      	ldr	r3, [r5, #0]
 800a640:	b103      	cbz	r3, 800a644 <_kill_r+0x1c>
 800a642:	6023      	str	r3, [r4, #0]
 800a644:	bd38      	pop	{r3, r4, r5, pc}
 800a646:	bf00      	nop
 800a648:	24000ee0 	.word	0x24000ee0

0800a64c <_getpid_r>:
 800a64c:	f7f7 bb5e 	b.w	8001d0c <_getpid>

0800a650 <__sread>:
 800a650:	b510      	push	{r4, lr}
 800a652:	460c      	mov	r4, r1
 800a654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a658:	f000 f894 	bl	800a784 <_read_r>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	bfab      	itete	ge
 800a660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a662:	89a3      	ldrhlt	r3, [r4, #12]
 800a664:	181b      	addge	r3, r3, r0
 800a666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a66a:	bfac      	ite	ge
 800a66c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a66e:	81a3      	strhlt	r3, [r4, #12]
 800a670:	bd10      	pop	{r4, pc}

0800a672 <__swrite>:
 800a672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a676:	461f      	mov	r7, r3
 800a678:	898b      	ldrh	r3, [r1, #12]
 800a67a:	05db      	lsls	r3, r3, #23
 800a67c:	4605      	mov	r5, r0
 800a67e:	460c      	mov	r4, r1
 800a680:	4616      	mov	r6, r2
 800a682:	d505      	bpl.n	800a690 <__swrite+0x1e>
 800a684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a688:	2302      	movs	r3, #2
 800a68a:	2200      	movs	r2, #0
 800a68c:	f000 f868 	bl	800a760 <_lseek_r>
 800a690:	89a3      	ldrh	r3, [r4, #12]
 800a692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a69a:	81a3      	strh	r3, [r4, #12]
 800a69c:	4632      	mov	r2, r6
 800a69e:	463b      	mov	r3, r7
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a6:	f000 b817 	b.w	800a6d8 <_write_r>

0800a6aa <__sseek>:
 800a6aa:	b510      	push	{r4, lr}
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b2:	f000 f855 	bl	800a760 <_lseek_r>
 800a6b6:	1c43      	adds	r3, r0, #1
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	bf15      	itete	ne
 800a6bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6c6:	81a3      	strheq	r3, [r4, #12]
 800a6c8:	bf18      	it	ne
 800a6ca:	81a3      	strhne	r3, [r4, #12]
 800a6cc:	bd10      	pop	{r4, pc}

0800a6ce <__sclose>:
 800a6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d2:	f000 b813 	b.w	800a6fc <_close_r>
	...

0800a6d8 <_write_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4d07      	ldr	r5, [pc, #28]	; (800a6f8 <_write_r+0x20>)
 800a6dc:	4604      	mov	r4, r0
 800a6de:	4608      	mov	r0, r1
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	602a      	str	r2, [r5, #0]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	f7f7 fb4f 	bl	8001d8a <_write>
 800a6ec:	1c43      	adds	r3, r0, #1
 800a6ee:	d102      	bne.n	800a6f6 <_write_r+0x1e>
 800a6f0:	682b      	ldr	r3, [r5, #0]
 800a6f2:	b103      	cbz	r3, 800a6f6 <_write_r+0x1e>
 800a6f4:	6023      	str	r3, [r4, #0]
 800a6f6:	bd38      	pop	{r3, r4, r5, pc}
 800a6f8:	24000ee0 	.word	0x24000ee0

0800a6fc <_close_r>:
 800a6fc:	b538      	push	{r3, r4, r5, lr}
 800a6fe:	4d06      	ldr	r5, [pc, #24]	; (800a718 <_close_r+0x1c>)
 800a700:	2300      	movs	r3, #0
 800a702:	4604      	mov	r4, r0
 800a704:	4608      	mov	r0, r1
 800a706:	602b      	str	r3, [r5, #0]
 800a708:	f7f7 fb5b 	bl	8001dc2 <_close>
 800a70c:	1c43      	adds	r3, r0, #1
 800a70e:	d102      	bne.n	800a716 <_close_r+0x1a>
 800a710:	682b      	ldr	r3, [r5, #0]
 800a712:	b103      	cbz	r3, 800a716 <_close_r+0x1a>
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	bd38      	pop	{r3, r4, r5, pc}
 800a718:	24000ee0 	.word	0x24000ee0

0800a71c <_fstat_r>:
 800a71c:	b538      	push	{r3, r4, r5, lr}
 800a71e:	4d07      	ldr	r5, [pc, #28]	; (800a73c <_fstat_r+0x20>)
 800a720:	2300      	movs	r3, #0
 800a722:	4604      	mov	r4, r0
 800a724:	4608      	mov	r0, r1
 800a726:	4611      	mov	r1, r2
 800a728:	602b      	str	r3, [r5, #0]
 800a72a:	f7f7 fb56 	bl	8001dda <_fstat>
 800a72e:	1c43      	adds	r3, r0, #1
 800a730:	d102      	bne.n	800a738 <_fstat_r+0x1c>
 800a732:	682b      	ldr	r3, [r5, #0]
 800a734:	b103      	cbz	r3, 800a738 <_fstat_r+0x1c>
 800a736:	6023      	str	r3, [r4, #0]
 800a738:	bd38      	pop	{r3, r4, r5, pc}
 800a73a:	bf00      	nop
 800a73c:	24000ee0 	.word	0x24000ee0

0800a740 <_isatty_r>:
 800a740:	b538      	push	{r3, r4, r5, lr}
 800a742:	4d06      	ldr	r5, [pc, #24]	; (800a75c <_isatty_r+0x1c>)
 800a744:	2300      	movs	r3, #0
 800a746:	4604      	mov	r4, r0
 800a748:	4608      	mov	r0, r1
 800a74a:	602b      	str	r3, [r5, #0]
 800a74c:	f7f7 fb55 	bl	8001dfa <_isatty>
 800a750:	1c43      	adds	r3, r0, #1
 800a752:	d102      	bne.n	800a75a <_isatty_r+0x1a>
 800a754:	682b      	ldr	r3, [r5, #0]
 800a756:	b103      	cbz	r3, 800a75a <_isatty_r+0x1a>
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	bd38      	pop	{r3, r4, r5, pc}
 800a75c:	24000ee0 	.word	0x24000ee0

0800a760 <_lseek_r>:
 800a760:	b538      	push	{r3, r4, r5, lr}
 800a762:	4d07      	ldr	r5, [pc, #28]	; (800a780 <_lseek_r+0x20>)
 800a764:	4604      	mov	r4, r0
 800a766:	4608      	mov	r0, r1
 800a768:	4611      	mov	r1, r2
 800a76a:	2200      	movs	r2, #0
 800a76c:	602a      	str	r2, [r5, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	f7f7 fb4e 	bl	8001e10 <_lseek>
 800a774:	1c43      	adds	r3, r0, #1
 800a776:	d102      	bne.n	800a77e <_lseek_r+0x1e>
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	b103      	cbz	r3, 800a77e <_lseek_r+0x1e>
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	bd38      	pop	{r3, r4, r5, pc}
 800a780:	24000ee0 	.word	0x24000ee0

0800a784 <_read_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	4d07      	ldr	r5, [pc, #28]	; (800a7a4 <_read_r+0x20>)
 800a788:	4604      	mov	r4, r0
 800a78a:	4608      	mov	r0, r1
 800a78c:	4611      	mov	r1, r2
 800a78e:	2200      	movs	r2, #0
 800a790:	602a      	str	r2, [r5, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	f7f7 fadc 	bl	8001d50 <_read>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d102      	bne.n	800a7a2 <_read_r+0x1e>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	b103      	cbz	r3, 800a7a2 <_read_r+0x1e>
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	24000ee0 	.word	0x24000ee0

0800a7a8 <_init>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	bf00      	nop
 800a7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ae:	bc08      	pop	{r3}
 800a7b0:	469e      	mov	lr, r3
 800a7b2:	4770      	bx	lr

0800a7b4 <_fini>:
 800a7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b6:	bf00      	nop
 800a7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ba:	bc08      	pop	{r3}
 800a7bc:	469e      	mov	lr, r3
 800a7be:	4770      	bx	lr
