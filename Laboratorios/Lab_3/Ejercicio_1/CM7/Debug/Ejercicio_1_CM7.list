
Ejercicio_1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004010  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080042a8  080042a8  000142a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042dc  080042dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080042dc  080042dc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042dc  080042dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080042e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  24000010  080042f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000c8  080042f4  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d45  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002317  00000000  00000000  00032d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  000350a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00036140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000398b6  00000000  00000000  000370d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141c3  00000000  00000000  0007098e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017e1b8  00000000  00000000  00084b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00202d09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000461c  00000000  00000000  00202d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004290 	.word	0x08004290

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004290 	.word	0x08004290

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c4;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af02      	add	r7, sp, #8
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	f023 030f 	bic.w	r3, r3, #15
 8000414:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	011b      	lsls	r3, r3, #4
 800041a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800041c:	7bfb      	ldrb	r3, [r7, #15]
 800041e:	f043 030c 	orr.w	r3, r3, #12
 8000422:	b2db      	uxtb	r3, r3
 8000424:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000426:	7bfb      	ldrb	r3, [r7, #15]
 8000428:	f043 0308 	orr.w	r3, r3, #8
 800042c:	b2db      	uxtb	r3, r3
 800042e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000430:	7bbb      	ldrb	r3, [r7, #14]
 8000432:	f043 030c 	orr.w	r3, r3, #12
 8000436:	b2db      	uxtb	r3, r3
 8000438:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800043a:	7bbb      	ldrb	r3, [r7, #14]
 800043c:	f043 0308 	orr.w	r3, r3, #8
 8000440:	b2db      	uxtb	r3, r3
 8000442:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000444:	f107 0208 	add.w	r2, r7, #8
 8000448:	2364      	movs	r3, #100	; 0x64
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	2304      	movs	r3, #4
 800044e:	214e      	movs	r1, #78	; 0x4e
 8000450:	4803      	ldr	r0, [pc, #12]	; (8000460 <lcd_send_cmd+0x5c>)
 8000452:	f000 ffef 	bl	8001434 <HAL_I2C_Master_Transmit>
}
 8000456:	bf00      	nop
 8000458:	3710      	adds	r7, #16
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	2400002c 	.word	0x2400002c

08000464 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af02      	add	r7, sp, #8
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f023 030f 	bic.w	r3, r3, #15
 8000474:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	011b      	lsls	r3, r3, #4
 800047a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	f043 030d 	orr.w	r3, r3, #13
 8000482:	b2db      	uxtb	r3, r3
 8000484:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000486:	7bfb      	ldrb	r3, [r7, #15]
 8000488:	f043 0309 	orr.w	r3, r3, #9
 800048c:	b2db      	uxtb	r3, r3
 800048e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000490:	7bbb      	ldrb	r3, [r7, #14]
 8000492:	f043 030d 	orr.w	r3, r3, #13
 8000496:	b2db      	uxtb	r3, r3
 8000498:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800049a:	7bbb      	ldrb	r3, [r7, #14]
 800049c:	f043 0309 	orr.w	r3, r3, #9
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004a4:	f107 0208 	add.w	r2, r7, #8
 80004a8:	2364      	movs	r3, #100	; 0x64
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	2304      	movs	r3, #4
 80004ae:	214e      	movs	r1, #78	; 0x4e
 80004b0:	4803      	ldr	r0, [pc, #12]	; (80004c0 <lcd_send_data+0x5c>)
 80004b2:	f000 ffbf 	bl	8001434 <HAL_I2C_Master_Transmit>
}
 80004b6:	bf00      	nop
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	2400002c 	.word	0x2400002c

080004c4 <lcd_clear>:

void lcd_clear (void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80004ca:	2080      	movs	r0, #128	; 0x80
 80004cc:	f7ff ff9a 	bl	8000404 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80004d0:	2300      	movs	r3, #0
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	e005      	b.n	80004e2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80004d6:	2020      	movs	r0, #32
 80004d8:	f7ff ffc4 	bl	8000464 <lcd_send_data>
	for (int i=0; i<70; i++)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3301      	adds	r3, #1
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2b45      	cmp	r3, #69	; 0x45
 80004e6:	ddf6      	ble.n	80004d6 <lcd_clear+0x12>
	}
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b082      	sub	sp, #8
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
 80004fa:	6039      	str	r1, [r7, #0]
    switch (row)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d003      	beq.n	800050a <lcd_put_cur+0x18>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d005      	beq.n	8000514 <lcd_put_cur+0x22>
 8000508:	e009      	b.n	800051e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	603b      	str	r3, [r7, #0]
            break;
 8000512:	e004      	b.n	800051e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800051a:	603b      	str	r3, [r7, #0]
            break;
 800051c:	bf00      	nop
    }

    lcd_send_cmd (col);
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff ff6e 	bl	8000404 <lcd_send_cmd>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <lcd_init>:


void lcd_init (void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000534:	2032      	movs	r0, #50	; 0x32
 8000536:	f000 fbfb 	bl	8000d30 <HAL_Delay>
	lcd_send_cmd (0x30);
 800053a:	2030      	movs	r0, #48	; 0x30
 800053c:	f7ff ff62 	bl	8000404 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000540:	2005      	movs	r0, #5
 8000542:	f000 fbf5 	bl	8000d30 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000546:	2030      	movs	r0, #48	; 0x30
 8000548:	f7ff ff5c 	bl	8000404 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800054c:	2001      	movs	r0, #1
 800054e:	f000 fbef 	bl	8000d30 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000552:	2030      	movs	r0, #48	; 0x30
 8000554:	f7ff ff56 	bl	8000404 <lcd_send_cmd>
	HAL_Delay(10);
 8000558:	200a      	movs	r0, #10
 800055a:	f000 fbe9 	bl	8000d30 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800055e:	2020      	movs	r0, #32
 8000560:	f7ff ff50 	bl	8000404 <lcd_send_cmd>
	HAL_Delay(10);
 8000564:	200a      	movs	r0, #10
 8000566:	f000 fbe3 	bl	8000d30 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800056a:	2028      	movs	r0, #40	; 0x28
 800056c:	f7ff ff4a 	bl	8000404 <lcd_send_cmd>
	HAL_Delay(1);
 8000570:	2001      	movs	r0, #1
 8000572:	f000 fbdd 	bl	8000d30 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000576:	2008      	movs	r0, #8
 8000578:	f7ff ff44 	bl	8000404 <lcd_send_cmd>
	HAL_Delay(1);
 800057c:	2001      	movs	r0, #1
 800057e:	f000 fbd7 	bl	8000d30 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000582:	2001      	movs	r0, #1
 8000584:	f7ff ff3e 	bl	8000404 <lcd_send_cmd>
	HAL_Delay(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f000 fbd1 	bl	8000d30 <HAL_Delay>
	HAL_Delay(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f000 fbce 	bl	8000d30 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000594:	2006      	movs	r0, #6
 8000596:	f7ff ff35 	bl	8000404 <lcd_send_cmd>
	HAL_Delay(1);
 800059a:	2001      	movs	r0, #1
 800059c:	f000 fbc8 	bl	8000d30 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80005a0:	200c      	movs	r0, #12
 80005a2:	f7ff ff2f 	bl	8000404 <lcd_send_cmd>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}

080005aa <lcd_send_string>:

void lcd_send_string (char *str)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80005b2:	e006      	b.n	80005c2 <lcd_send_string+0x18>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	607a      	str	r2, [r7, #4]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff51 	bl	8000464 <lcd_send_data>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1f4      	bne.n	80005b4 <lcd_send_string+0xa>
}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	; 0x30
 80005d8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80005da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80005e0:	bf00      	nop
 80005e2:	4b68      	ldr	r3, [pc, #416]	; (8000784 <main+0x1b0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d004      	beq.n	80005f8 <main+0x24>
 80005ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f0:	1e5a      	subs	r2, r3, #1
 80005f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	dcf4      	bgt.n	80005e2 <main+0xe>
  if ( timeout < 0 )
 80005f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	da01      	bge.n	8000602 <main+0x2e>
  {
  Error_Handler();
 80005fe:	f000 fa0b 	bl	8000a18 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fb03 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f8c7 	bl	8000798 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800060a:	4b5e      	ldr	r3, [pc, #376]	; (8000784 <main+0x1b0>)
 800060c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000610:	4a5c      	ldr	r2, [pc, #368]	; (8000784 <main+0x1b0>)
 8000612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800061a:	4b5a      	ldr	r3, [pc, #360]	; (8000784 <main+0x1b0>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fe45 	bl	80012b8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800062e:	2100      	movs	r1, #0
 8000630:	2000      	movs	r0, #0
 8000632:	f000 fe5b 	bl	80012ec <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800063c:	bf00      	nop
 800063e:	4b51      	ldr	r3, [pc, #324]	; (8000784 <main+0x1b0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000646:	2b00      	cmp	r3, #0
 8000648:	d104      	bne.n	8000654 <main+0x80>
 800064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064c:	1e5a      	subs	r2, r3, #1
 800064e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000650:	2b00      	cmp	r3, #0
 8000652:	dcf4      	bgt.n	800063e <main+0x6a>
if ( timeout < 0 )
 8000654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000656:	2b00      	cmp	r3, #0
 8000658:	da01      	bge.n	800065e <main+0x8a>
{
Error_Handler();
 800065a:	f000 f9dd 	bl	8000a18 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 f9a3 	bl	80009a8 <MX_GPIO_Init>
  MX_I2C4_Init();
 8000662:	f000 f913 	bl	800088c <MX_I2C4_Init>
  MX_TIM2_Init();
 8000666:	f000 f951 	bl	800090c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  const char genis[] = "Genis";
 800066a:	4a47      	ldr	r2, [pc, #284]	; (8000788 <main+0x1b4>)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000674:	6018      	str	r0, [r3, #0]
 8000676:	3304      	adds	r3, #4
 8000678:	8019      	strh	r1, [r3, #0]
  const char memo[] = "Memo";
 800067a:	4a44      	ldr	r2, [pc, #272]	; (800078c <main+0x1b8>)
 800067c:	f107 0318 	add.w	r3, r7, #24
 8000680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000684:	6018      	str	r0, [r3, #0]
 8000686:	3304      	adds	r3, #4
 8000688:	7019      	strb	r1, [r3, #0]
  const char poncho[] = "Poncho";
 800068a:	4a41      	ldr	r2, [pc, #260]	; (8000790 <main+0x1bc>)
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000694:	6018      	str	r0, [r3, #0]
 8000696:	3304      	adds	r3, #4
 8000698:	8019      	strh	r1, [r3, #0]
 800069a:	3302      	adds	r3, #2
 800069c:	0c0a      	lsrs	r2, r1, #16
 800069e:	701a      	strb	r2, [r3, #0]
  const char clear[] = "          ";
 80006a0:	4a3c      	ldr	r2, [pc, #240]	; (8000794 <main+0x1c0>)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80006a6:	c303      	stmia	r3!, {r0, r1}
 80006a8:	801a      	strh	r2, [r3, #0]
 80006aa:	3302      	adds	r3, #2
 80006ac:	0c12      	lsrs	r2, r2, #16
 80006ae:	701a      	strb	r2, [r3, #0]

  int count = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t ind = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  lcd_init();
 80006ba:	f7ff ff39 	bl	8000530 <lcd_init>
  lcd_clear();
 80006be:	f7ff ff01 	bl	80004c4 <lcd_clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (ind == 1){
 80006c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d113      	bne.n	80006f2 <main+0x11e>
		  lcd_send_string(clear);
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff6c 	bl	80005aa <lcd_send_string>
		  lcd_put_cur(count%2, 0);
 80006d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	bfb8      	it	lt
 80006dc:	425b      	neglt	r3, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff06 	bl	80004f2 <lcd_put_cur>
		  lcd_send_string(memo);
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff5d 	bl	80005aa <lcd_send_string>
 80006f0:	e031      	b.n	8000756 <main+0x182>
	  } else if (ind == 2){
 80006f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d113      	bne.n	8000722 <main+0x14e>
		  lcd_send_string(clear);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff54 	bl	80005aa <lcd_send_string>
		  lcd_put_cur(count%2, 0);
 8000702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000704:	2b00      	cmp	r3, #0
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	bfb8      	it	lt
 800070c:	425b      	neglt	r3, r3
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff feee 	bl	80004f2 <lcd_put_cur>
		  lcd_send_string(genis);
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff45 	bl	80005aa <lcd_send_string>
 8000720:	e019      	b.n	8000756 <main+0x182>
	  } else if (ind == 3){
 8000722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000726:	2b03      	cmp	r3, #3
 8000728:	d115      	bne.n	8000756 <main+0x182>
		  lcd_send_string(clear);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff3c 	bl	80005aa <lcd_send_string>
		  lcd_put_cur(count%2, 0);
 8000732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000734:	2b00      	cmp	r3, #0
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	bfb8      	it	lt
 800073c:	425b      	neglt	r3, r3
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fed6 	bl	80004f2 <lcd_put_cur>
		  lcd_send_string(poncho);
 8000746:	f107 0310 	add.w	r3, r7, #16
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff2d 	bl	80005aa <lcd_send_string>
		  ind = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  }


	  ind++;
 8000756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800075a:	3301      	adds	r3, #1
 800075c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  count++;
 8000760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000762:	3301      	adds	r3, #1
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
	  lcd_put_cur(count%2, 0);
 8000766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000768:	2b00      	cmp	r3, #0
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	bfb8      	it	lt
 8000770:	425b      	neglt	r3, r3
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff febc 	bl	80004f2 <lcd_put_cur>

	  HAL_Delay(500);
 800077a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800077e:	f000 fad7 	bl	8000d30 <HAL_Delay>
	  if (ind == 1){
 8000782:	e79e      	b.n	80006c2 <main+0xee>
 8000784:	58024400 	.word	0x58024400
 8000788:	080042a8 	.word	0x080042a8
 800078c:	080042b0 	.word	0x080042b0
 8000790:	080042b8 	.word	0x080042b8
 8000794:	080042c0 	.word	0x080042c0

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b09c      	sub	sp, #112	; 0x70
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	224c      	movs	r2, #76	; 0x4c
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 fd6a 	bl	8004280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2220      	movs	r2, #32
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 fd64 	bl	8004280 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007b8:	2004      	movs	r0, #4
 80007ba:	f001 f9c5 	bl	8001b48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b30      	ldr	r3, [pc, #192]	; (8000884 <SystemClock_Config+0xec>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a2f      	ldr	r2, [pc, #188]	; (8000884 <SystemClock_Config+0xec>)
 80007c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <SystemClock_Config+0xec>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <SystemClock_Config+0xf0>)
 80007da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007dc:	4a2a      	ldr	r2, [pc, #168]	; (8000888 <SystemClock_Config+0xf0>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007e4:	4b28      	ldr	r3, [pc, #160]	; (8000888 <SystemClock_Config+0xf0>)
 80007e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f0:	bf00      	nop
 80007f2:	4b24      	ldr	r3, [pc, #144]	; (8000884 <SystemClock_Config+0xec>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007fe:	d1f8      	bne.n	80007f2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000800:	2301      	movs	r3, #1
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000804:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080e:	2302      	movs	r3, #2
 8000810:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000812:	2301      	movs	r3, #1
 8000814:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000816:	2378      	movs	r3, #120	; 0x78
 8000818:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800081a:	2302      	movs	r3, #2
 800081c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800081e:	2302      	movs	r3, #2
 8000820:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000826:	230c      	movs	r3, #12
 8000828:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800082a:	2300      	movs	r3, #0
 800082c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000836:	4618      	mov	r0, r3
 8000838:	f001 f9e0 	bl	8001bfc <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000842:	f000 f8e9 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	233f      	movs	r3, #63	; 0x3f
 8000848:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2303      	movs	r3, #3
 800084c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000852:	2308      	movs	r3, #8
 8000854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800085a:	2340      	movs	r3, #64	; 0x40
 800085c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800085e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000862:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000864:	2340      	movs	r3, #64	; 0x40
 8000866:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2104      	movs	r1, #4
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fdf3 	bl	8002458 <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000878:	f000 f8ce 	bl	8000a18 <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3770      	adds	r7, #112	; 0x70
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58024800 	.word	0x58024800
 8000888:	58000400 	.word	0x58000400

0800088c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_I2C4_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <MX_I2C4_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_I2C4_Init+0x74>)
 8000898:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <MX_I2C4_Init+0x7c>)
 800089a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_I2C4_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_I2C4_Init+0x74>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_I2C4_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_I2C4_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_I2C4_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_I2C4_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_I2C4_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80008c6:	480e      	ldr	r0, [pc, #56]	; (8000900 <MX_I2C4_Init+0x74>)
 80008c8:	f000 fd24 	bl	8001314 <HAL_I2C_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80008d2:	f000 f8a1 	bl	8000a18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <MX_I2C4_Init+0x74>)
 80008da:	f001 f89d 	bl	8001a18 <HAL_I2CEx_ConfigAnalogFilter>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80008e4:	f000 f898 	bl	8000a18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_I2C4_Init+0x74>)
 80008ec:	f001 f8df 	bl	8001aae <HAL_I2CEx_ConfigDigitalFilter>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f000 f88f 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2400002c 	.word	0x2400002c
 8000904:	58001c00 	.word	0x58001c00
 8000908:	307075b1 	.word	0x307075b1

0800090c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800092a:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_TIM2_Init+0x98>)
 800092c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000930:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000934:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000938:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_TIM2_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000942:	f241 3288 	movw	r2, #5000	; 0x1388
 8000946:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_TIM2_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000954:	4813      	ldr	r0, [pc, #76]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000956:	f003 f959 	bl	8003c0c <HAL_TIM_Base_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000960:	f000 f85a 	bl	8000a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000968:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	4619      	mov	r1, r3
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000972:	f003 f9a3 	bl	8003cbc <HAL_TIM_ConfigClockSource>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800097c:	f000 f84c 	bl	8000a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_TIM2_Init+0x98>)
 800098e:	f003 fbc5 	bl	800411c <HAL_TIMEx_MasterConfigSynchronization>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000998:	f000 f83e 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	24000078 	.word	0x24000078

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_GPIO_Init+0x6c>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <MX_GPIO_Init+0x6c>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_GPIO_Init+0x6c>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_GPIO_Init+0x6c>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <MX_GPIO_Init+0x6c>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_GPIO_Init+0x6c>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_GPIO_Init+0x6c>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <MX_GPIO_Init+0x6c>)
 80009f2:	f043 0320 	orr.w	r3, r3, #32
 80009f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_GPIO_Init+0x6c>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	f003 0320 	and.w	r3, r3, #32
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]

}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	58024400 	.word	0x58024400

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_MspInit+0x30>)
 8000a2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a30:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_MspInit+0x30>)
 8000a32:	f043 0302 	orr.w	r3, r3, #2
 8000a36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_MspInit+0x30>)
 8000a3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	58024400 	.word	0x58024400

08000a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0b8      	sub	sp, #224	; 0xe0
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	22bc      	movs	r2, #188	; 0xbc
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 fc01 	bl	8004280 <memset>
  if(hi2c->Instance==I2C4)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <HAL_I2C_MspInit+0xc0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d142      	bne.n	8000b0e <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000a88:	2310      	movs	r3, #16
 8000a8a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a92:	f107 0310 	add.w	r3, r7, #16
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 f80e 	bl	8002ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000aa2:	f7ff ffb9 	bl	8000a18 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <HAL_I2C_MspInit+0xc4>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <HAL_I2C_MspInit+0xc4>)
 8000aae:	f043 0320 	orr.w	r3, r3, #32
 8000ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_I2C_MspInit+0xc4>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	f003 0320 	and.w	r3, r3, #32
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ac4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000acc:	2312      	movs	r3, #18
 8000ace:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ae4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <HAL_I2C_MspInit+0xc8>)
 8000aec:	f000 fa34 	bl	8000f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_I2C_MspInit+0xc4>)
 8000af2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000af6:	4a09      	ldr	r2, [pc, #36]	; (8000b1c <HAL_I2C_MspInit+0xc4>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_I2C_MspInit+0xc4>)
 8000b02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	37e0      	adds	r7, #224	; 0xe0
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	58001c00 	.word	0x58001c00
 8000b1c:	58024400 	.word	0x58024400
 8000b20:	58021400 	.word	0x58021400

08000b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b34:	d10e      	bne.n	8000b54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_TIM_Base_MspInit+0x3c>)
 8000b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b3c:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <HAL_TIM_Base_MspInit+0x3c>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_TIM_Base_MspInit+0x3c>)
 8000b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	58024400 	.word	0x58024400

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f89e 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bbc:	f7ff fb8c 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bc2:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	; (8000c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be6:	f003 fb27 	bl	8004238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fcf3 	bl	80005d4 <main>
  bx  lr
 8000bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bf4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bf8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000bfc:	080042e4 	.word	0x080042e4
  ldr r2, =_sbss
 8000c00:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c04:	240000c8 	.word	0x240000c8

08000c08 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC3_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c12:	2003      	movs	r0, #3
 8000c14:	f000 f96e 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c18:	f001 fdd4 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_Init+0x68>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	0a1b      	lsrs	r3, r3, #8
 8000c24:	f003 030f 	and.w	r3, r3, #15
 8000c28:	4913      	ldr	r1, [pc, #76]	; (8000c78 <HAL_Init+0x6c>)
 8000c2a:	5ccb      	ldrb	r3, [r1, r3]
 8000c2c:	f003 031f 	and.w	r3, r3, #31
 8000c30:	fa22 f303 	lsr.w	r3, r2, r3
 8000c34:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_Init+0x68>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <HAL_Init+0x6c>)
 8000c40:	5cd3      	ldrb	r3, [r2, r3]
 8000c42:	f003 031f 	and.w	r3, r3, #31
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <HAL_Init+0x70>)
 8000c4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c50:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <HAL_Init+0x74>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c56:	2000      	movs	r0, #0
 8000c58:	f000 f814 	bl	8000c84 <HAL_InitTick>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e002      	b.n	8000c6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c66:	f7ff fedd 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	58024400 	.word	0x58024400
 8000c78:	080042cc 	.word	0x080042cc
 8000c7c:	24000004 	.word	0x24000004
 8000c80:	24000000 	.word	0x24000000

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_InitTick+0x60>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e021      	b.n	8000cdc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_InitTick+0x64>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_InitTick+0x60>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f945 	bl	8000f3e <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00e      	b.n	8000cdc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d80a      	bhi.n	8000cda <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f000 f91d 	bl	8000f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_InitTick+0x68>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2400000c 	.word	0x2400000c
 8000ce8:	24000000 	.word	0x24000000
 8000cec:	24000008 	.word	0x24000008

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	2400000c 	.word	0x2400000c
 8000d14:	240000c4 	.word	0x240000c4

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	240000c4 	.word	0x240000c4

08000d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff ffee 	bl	8000d18 <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d48:	d005      	beq.n	8000d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_Delay+0x44>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d56:	bf00      	nop
 8000d58:	f7ff ffde 	bl	8000d18 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f7      	bhi.n	8000d58 <HAL_Delay+0x28>
  {
  }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2400000c 	.word	0x2400000c

08000d78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <HAL_GetREVID+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	0c1b      	lsrs	r3, r3, #16
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	5c001000 	.word	0x5c001000

08000d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dac:	4013      	ands	r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00
 8000dd4:	05fa0000 	.word	0x05fa0000

08000dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	f003 0307 	and.w	r3, r3, #7
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec0:	d301      	bcc.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00f      	b.n	8000ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <SysTick_Config+0x40>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f7ff ff8e 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SysTick_Config+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <SysTick_Config+0x40>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff47 	bl	8000d90 <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff5e 	bl	8000dd8 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff90 	bl	8000e48 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5f 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffb2 	bl	8000eb0 <SysTick_Config>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f66:	4b89      	ldr	r3, [pc, #548]	; (800118c <HAL_GPIO_Init+0x234>)
 8000f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f6a:	e194      	b.n	8001296 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	2101      	movs	r1, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 8186 	beq.w	8001290 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d005      	beq.n	8000f9c <HAL_GPIO_Init+0x44>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d130      	bne.n	8000ffe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	091b      	lsrs	r3, r3, #4
 8000fe8:	f003 0201 	and.w	r2, r3, #1
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b03      	cmp	r3, #3
 8001008:	d017      	beq.n	800103a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d123      	bne.n	800108e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	220f      	movs	r2, #15
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	691a      	ldr	r2, [r3, #16]
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	08da      	lsrs	r2, r3, #3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3208      	adds	r2, #8
 8001088:	69b9      	ldr	r1, [r7, #24]
 800108a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0203 	and.w	r2, r3, #3
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 80e0 	beq.w	8001290 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_GPIO_Init+0x238>)
 80010d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010d6:	4a2e      	ldr	r2, [pc, #184]	; (8001190 <HAL_GPIO_Init+0x238>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <HAL_GPIO_Init+0x238>)
 80010e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ee:	4a29      	ldr	r2, [pc, #164]	; (8001194 <HAL_GPIO_Init+0x23c>)
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a20      	ldr	r2, [pc, #128]	; (8001198 <HAL_GPIO_Init+0x240>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d052      	beq.n	80011c0 <HAL_GPIO_Init+0x268>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a1f      	ldr	r2, [pc, #124]	; (800119c <HAL_GPIO_Init+0x244>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d031      	beq.n	8001186 <HAL_GPIO_Init+0x22e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <HAL_GPIO_Init+0x248>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d02b      	beq.n	8001182 <HAL_GPIO_Init+0x22a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <HAL_GPIO_Init+0x24c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d025      	beq.n	800117e <HAL_GPIO_Init+0x226>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <HAL_GPIO_Init+0x250>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01f      	beq.n	800117a <HAL_GPIO_Init+0x222>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <HAL_GPIO_Init+0x254>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d019      	beq.n	8001176 <HAL_GPIO_Init+0x21e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <HAL_GPIO_Init+0x258>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0x21a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <HAL_GPIO_Init+0x25c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <HAL_GPIO_Init+0x216>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <HAL_GPIO_Init+0x260>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x212>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_GPIO_Init+0x264>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_GPIO_Init+0x20e>
 8001162:	2309      	movs	r3, #9
 8001164:	e02d      	b.n	80011c2 <HAL_GPIO_Init+0x26a>
 8001166:	230a      	movs	r3, #10
 8001168:	e02b      	b.n	80011c2 <HAL_GPIO_Init+0x26a>
 800116a:	2308      	movs	r3, #8
 800116c:	e029      	b.n	80011c2 <HAL_GPIO_Init+0x26a>
 800116e:	2307      	movs	r3, #7
 8001170:	e027      	b.n	80011c2 <HAL_GPIO_Init+0x26a>
 8001172:	2306      	movs	r3, #6
 8001174:	e025      	b.n	80011c2 <HAL_GPIO_Init+0x26a>
 8001176:	2305      	movs	r3, #5
 8001178:	e023      	b.n	80011c2 <HAL_GPIO_Init+0x26a>
 800117a:	2304      	movs	r3, #4
 800117c:	e021      	b.n	80011c2 <HAL_GPIO_Init+0x26a>
 800117e:	2303      	movs	r3, #3
 8001180:	e01f      	b.n	80011c2 <HAL_GPIO_Init+0x26a>
 8001182:	2302      	movs	r3, #2
 8001184:	e01d      	b.n	80011c2 <HAL_GPIO_Init+0x26a>
 8001186:	2301      	movs	r3, #1
 8001188:	e01b      	b.n	80011c2 <HAL_GPIO_Init+0x26a>
 800118a:	bf00      	nop
 800118c:	58000080 	.word	0x58000080
 8001190:	58024400 	.word	0x58024400
 8001194:	58000400 	.word	0x58000400
 8001198:	58020000 	.word	0x58020000
 800119c:	58020400 	.word	0x58020400
 80011a0:	58020800 	.word	0x58020800
 80011a4:	58020c00 	.word	0x58020c00
 80011a8:	58021000 	.word	0x58021000
 80011ac:	58021400 	.word	0x58021400
 80011b0:	58021800 	.word	0x58021800
 80011b4:	58021c00 	.word	0x58021c00
 80011b8:	58022000 	.word	0x58022000
 80011bc:	58022400 	.word	0x58022400
 80011c0:	2300      	movs	r3, #0
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	f002 0203 	and.w	r2, r2, #3
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	4093      	lsls	r3, r2
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d2:	4938      	ldr	r1, [pc, #224]	; (80012b4 <HAL_GPIO_Init+0x35c>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800120e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	3301      	adds	r3, #1
 8001294:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f47f ae63 	bne.w	8000f6c <HAL_GPIO_Init+0x14>
  }
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	3724      	adds	r7, #36	; 0x24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	58000400 	.word	0x58000400

080012b8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80012c0:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_HSEM_FastTake+0x2c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3320      	adds	r3, #32
 80012c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ca:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_HSEM_FastTake+0x30>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d101      	bne.n	80012d4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	e000      	b.n	80012d6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	58026400 	.word	0x58026400
 80012e8:	80000300 	.word	0x80000300

080012ec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80012f6:	4906      	ldr	r1, [pc, #24]	; (8001310 <HAL_HSEM_Release+0x24>)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	58026400 	.word	0x58026400

08001314 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e07f      	b.n	8001426 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d106      	bne.n	8001340 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fb8c 	bl	8000a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2224      	movs	r2, #36	; 0x24
 8001344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001364:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001374:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d107      	bne.n	800138e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	e006      	b.n	800139c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800139a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d104      	bne.n	80013ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6859      	ldr	r1, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <HAL_I2C_Init+0x11c>)
 80013ba:	430b      	orrs	r3, r1
 80013bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69d9      	ldr	r1, [r3, #28]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a1a      	ldr	r2, [r3, #32]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0201 	orr.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2220      	movs	r2, #32
 8001412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	02008000 	.word	0x02008000

08001434 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af02      	add	r7, sp, #8
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	461a      	mov	r2, r3
 8001440:	460b      	mov	r3, r1
 8001442:	817b      	strh	r3, [r7, #10]
 8001444:	4613      	mov	r3, r2
 8001446:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b20      	cmp	r3, #32
 8001452:	f040 80da 	bne.w	800160a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_I2C_Master_Transmit+0x30>
 8001460:	2302      	movs	r3, #2
 8001462:	e0d3      	b.n	800160c <HAL_I2C_Master_Transmit+0x1d8>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800146c:	f7ff fc54 	bl	8000d18 <HAL_GetTick>
 8001470:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2319      	movs	r3, #25
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f8f0 	bl	8001664 <I2C_WaitOnFlagUntilTimeout>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0be      	b.n	800160c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2221      	movs	r2, #33	; 0x21
 8001492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2210      	movs	r2, #16
 800149a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	893a      	ldrh	r2, [r7, #8]
 80014ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	2bff      	cmp	r3, #255	; 0xff
 80014be:	d90e      	bls.n	80014de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	22ff      	movs	r2, #255	; 0xff
 80014c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	8979      	ldrh	r1, [r7, #10]
 80014ce:	4b51      	ldr	r3, [pc, #324]	; (8001614 <HAL_I2C_Master_Transmit+0x1e0>)
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 fa6c 	bl	80019b4 <I2C_TransferConfig>
 80014dc:	e06c      	b.n	80015b8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	8979      	ldrh	r1, [r7, #10]
 80014f0:	4b48      	ldr	r3, [pc, #288]	; (8001614 <HAL_I2C_Master_Transmit+0x1e0>)
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f000 fa5b 	bl	80019b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80014fe:	e05b      	b.n	80015b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	6a39      	ldr	r1, [r7, #32]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 f8ed 	bl	80016e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e07b      	b.n	800160c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152e:	b29b      	uxth	r3, r3
 8001530:	3b01      	subs	r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153c:	3b01      	subs	r3, #1
 800153e:	b29a      	uxth	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001548:	b29b      	uxth	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d034      	beq.n	80015b8 <HAL_I2C_Master_Transmit+0x184>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001552:	2b00      	cmp	r3, #0
 8001554:	d130      	bne.n	80015b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	2200      	movs	r2, #0
 800155e:	2180      	movs	r1, #128	; 0x80
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f000 f87f 	bl	8001664 <I2C_WaitOnFlagUntilTimeout>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e04d      	b.n	800160c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001574:	b29b      	uxth	r3, r3
 8001576:	2bff      	cmp	r3, #255	; 0xff
 8001578:	d90e      	bls.n	8001598 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	22ff      	movs	r2, #255	; 0xff
 800157e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001584:	b2da      	uxtb	r2, r3
 8001586:	8979      	ldrh	r1, [r7, #10]
 8001588:	2300      	movs	r3, #0
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 fa0f 	bl	80019b4 <I2C_TransferConfig>
 8001596:	e00f      	b.n	80015b8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800159c:	b29a      	uxth	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	8979      	ldrh	r1, [r7, #10]
 80015aa:	2300      	movs	r3, #0
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f000 f9fe 	bl	80019b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d19e      	bne.n	8001500 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	6a39      	ldr	r1, [r7, #32]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f8cc 	bl	8001764 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e01a      	b.n	800160c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2220      	movs	r2, #32
 80015dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6859      	ldr	r1, [r3, #4]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_I2C_Master_Transmit+0x1e4>)
 80015ea:	400b      	ands	r3, r1
 80015ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2220      	movs	r2, #32
 80015f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800160a:	2302      	movs	r3, #2
  }
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	80002000 	.word	0x80002000
 8001618:	fe00e800 	.word	0xfe00e800

0800161c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b02      	cmp	r3, #2
 8001630:	d103      	bne.n	800163a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b01      	cmp	r3, #1
 8001646:	d007      	beq.n	8001658 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	619a      	str	r2, [r3, #24]
  }
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	4613      	mov	r3, r2
 8001672:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001674:	e022      	b.n	80016bc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d01e      	beq.n	80016bc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800167e:	f7ff fb4b 	bl	8000d18 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d302      	bcc.n	8001694 <I2C_WaitOnFlagUntilTimeout+0x30>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d113      	bne.n	80016bc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	f043 0220 	orr.w	r2, r3, #32
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2220      	movs	r2, #32
 80016a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e00f      	b.n	80016dc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699a      	ldr	r2, [r3, #24]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	4013      	ands	r3, r2
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	bf0c      	ite	eq
 80016cc:	2301      	moveq	r3, #1
 80016ce:	2300      	movne	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	461a      	mov	r2, r3
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d0cd      	beq.n	8001676 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016f0:	e02c      	b.n	800174c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 f870 	bl	80017dc <I2C_IsErrorOccurred>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e02a      	b.n	800175c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d01e      	beq.n	800174c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800170e:	f7ff fb03 	bl	8000d18 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	429a      	cmp	r2, r3
 800171c:	d302      	bcc.n	8001724 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d113      	bne.n	800174c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	f043 0220 	orr.w	r2, r3, #32
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2220      	movs	r2, #32
 8001734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e007      	b.n	800175c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b02      	cmp	r3, #2
 8001758:	d1cb      	bne.n	80016f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001770:	e028      	b.n	80017c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f830 	bl	80017dc <I2C_IsErrorOccurred>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e026      	b.n	80017d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001786:	f7ff fac7 	bl	8000d18 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	429a      	cmp	r2, r3
 8001794:	d302      	bcc.n	800179c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d113      	bne.n	80017c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	f043 0220 	orr.w	r2, r3, #32
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2220      	movs	r2, #32
 80017ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e007      	b.n	80017d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	2b20      	cmp	r3, #32
 80017d0:	d1cf      	bne.n	8001772 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	2b00      	cmp	r3, #0
 8001806:	d075      	beq.n	80018f4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2210      	movs	r2, #16
 800180e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001810:	e056      	b.n	80018c0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d052      	beq.n	80018c0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800181a:	f7ff fa7d 	bl	8000d18 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	429a      	cmp	r2, r3
 8001828:	d302      	bcc.n	8001830 <I2C_IsErrorOccurred+0x54>
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d147      	bne.n	80018c0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001842:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800184e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001852:	d12e      	bne.n	80018b2 <I2C_IsErrorOccurred+0xd6>
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800185a:	d02a      	beq.n	80018b2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800185c:	7cfb      	ldrb	r3, [r7, #19]
 800185e:	2b20      	cmp	r3, #32
 8001860:	d027      	beq.n	80018b2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001870:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001872:	f7ff fa51 	bl	8000d18 <HAL_GetTick>
 8001876:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001878:	e01b      	b.n	80018b2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800187a:	f7ff fa4d 	bl	8000d18 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b19      	cmp	r3, #25
 8001886:	d914      	bls.n	80018b2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188c:	f043 0220 	orr.w	r2, r3, #32
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2220      	movs	r2, #32
 8001898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b20      	cmp	r3, #32
 80018be:	d1dc      	bne.n	800187a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	d003      	beq.n	80018d6 <I2C_IsErrorOccurred+0xfa>
 80018ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d09d      	beq.n	8001812 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80018d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d103      	bne.n	80018e6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2220      	movs	r2, #32
 80018e4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001916:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00b      	beq.n	8001940 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001938:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001966:	2b00      	cmp	r3, #0
 8001968:	d01c      	beq.n	80019a4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f7ff fe56 	bl	800161c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6859      	ldr	r1, [r3, #4]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <I2C_IsErrorOccurred+0x1d4>)
 800197c:	400b      	ands	r3, r1
 800197e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	431a      	orrs	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2220      	movs	r2, #32
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80019a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	fe00e800 	.word	0xfe00e800

080019b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	817b      	strh	r3, [r7, #10]
 80019c2:	4613      	mov	r3, r2
 80019c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019c6:	897b      	ldrh	r3, [r7, #10]
 80019c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019cc:	7a7b      	ldrb	r3, [r7, #9]
 80019ce:	041b      	lsls	r3, r3, #16
 80019d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019d4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	4313      	orrs	r3, r2
 80019de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019e2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	0d5b      	lsrs	r3, r3, #21
 80019ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <I2C_TransferConfig+0x60>)
 80019f4:	430b      	orrs	r3, r1
 80019f6:	43db      	mvns	r3, r3
 80019f8:	ea02 0103 	and.w	r1, r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a06:	bf00      	nop
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	03ff63ff 	.word	0x03ff63ff

08001a18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	d138      	bne.n	8001aa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e032      	b.n	8001aa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2224      	movs	r2, #36	; 0x24
 8001a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6819      	ldr	r1, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e000      	b.n	8001aa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001aa0:	2302      	movs	r3, #2
  }
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d139      	bne.n	8001b38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e033      	b.n	8001b3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2224      	movs	r2, #36	; 0x24
 8001ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0201 	bic.w	r2, r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e000      	b.n	8001b3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b38:	2302      	movs	r3, #2
  }
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001b50:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	2b06      	cmp	r3, #6
 8001b5a:	d00a      	beq.n	8001b72 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b5c:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e040      	b.n	8001bf0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e03e      	b.n	8001bf0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b72:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001b7a:	491f      	ldr	r1, [pc, #124]	; (8001bf8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b82:	f7ff f8c9 	bl	8000d18 <HAL_GetTick>
 8001b86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b88:	e009      	b.n	8001b9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b8a:	f7ff f8c5 	bl	8000d18 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b98:	d901      	bls.n	8001b9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e028      	b.n	8001bf0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001baa:	d1ee      	bne.n	8001b8a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b1e      	cmp	r3, #30
 8001bb0:	d008      	beq.n	8001bc4 <HAL_PWREx_ConfigSupply+0x7c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b2e      	cmp	r3, #46	; 0x2e
 8001bb6:	d005      	beq.n	8001bc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b1d      	cmp	r3, #29
 8001bbc:	d002      	beq.n	8001bc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b2d      	cmp	r3, #45	; 0x2d
 8001bc2:	d114      	bne.n	8001bee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001bc4:	f7ff f8a8 	bl	8000d18 <HAL_GetTick>
 8001bc8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001bca:	e009      	b.n	8001be0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bcc:	f7ff f8a4 	bl	8000d18 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bda:	d901      	bls.n	8001be0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e007      	b.n	8001bf0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bec:	d1ee      	bne.n	8001bcc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	58024800 	.word	0x58024800

08001bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	; 0x30
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d102      	bne.n	8001c10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f000 bc1d 	b.w	800244a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 8087 	beq.w	8001d2c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c1e:	4b99      	ldr	r3, [pc, #612]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c28:	4b96      	ldr	r3, [pc, #600]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c30:	2b10      	cmp	r3, #16
 8001c32:	d007      	beq.n	8001c44 <HAL_RCC_OscConfig+0x48>
 8001c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c36:	2b18      	cmp	r3, #24
 8001c38:	d110      	bne.n	8001c5c <HAL_RCC_OscConfig+0x60>
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d10b      	bne.n	8001c5c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	4b8f      	ldr	r3, [pc, #572]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d06c      	beq.n	8001d2a <HAL_RCC_OscConfig+0x12e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d168      	bne.n	8001d2a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e3f6      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d106      	bne.n	8001c74 <HAL_RCC_OscConfig+0x78>
 8001c66:	4b87      	ldr	r3, [pc, #540]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a86      	ldr	r2, [pc, #536]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e02e      	b.n	8001cd2 <HAL_RCC_OscConfig+0xd6>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10c      	bne.n	8001c96 <HAL_RCC_OscConfig+0x9a>
 8001c7c:	4b81      	ldr	r3, [pc, #516]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a80      	ldr	r2, [pc, #512]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b7e      	ldr	r3, [pc, #504]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a7d      	ldr	r2, [pc, #500]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	e01d      	b.n	8001cd2 <HAL_RCC_OscConfig+0xd6>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c9e:	d10c      	bne.n	8001cba <HAL_RCC_OscConfig+0xbe>
 8001ca0:	4b78      	ldr	r3, [pc, #480]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a77      	ldr	r2, [pc, #476]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001ca6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b75      	ldr	r3, [pc, #468]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a74      	ldr	r2, [pc, #464]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	e00b      	b.n	8001cd2 <HAL_RCC_OscConfig+0xd6>
 8001cba:	4b72      	ldr	r3, [pc, #456]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a71      	ldr	r2, [pc, #452]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b6f      	ldr	r3, [pc, #444]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6e      	ldr	r2, [pc, #440]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d013      	beq.n	8001d02 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7ff f81d 	bl	8000d18 <HAL_GetTick>
 8001cde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce2:	f7ff f819 	bl	8000d18 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b64      	cmp	r3, #100	; 0x64
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e3aa      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cf4:	4b63      	ldr	r3, [pc, #396]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0xe6>
 8001d00:	e014      	b.n	8001d2c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7ff f809 	bl	8000d18 <HAL_GetTick>
 8001d06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0a:	f7ff f805 	bl	8000d18 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b64      	cmp	r3, #100	; 0x64
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e396      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d1c:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x10e>
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80cb 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3a:	4b52      	ldr	r3, [pc, #328]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d42:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d44:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_RCC_OscConfig+0x164>
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	2b18      	cmp	r3, #24
 8001d54:	d156      	bne.n	8001e04 <HAL_RCC_OscConfig+0x208>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d151      	bne.n	8001e04 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d60:	4b48      	ldr	r3, [pc, #288]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_OscConfig+0x17c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e368      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d78:	4b42      	ldr	r3, [pc, #264]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 0219 	bic.w	r2, r3, #25
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	493f      	ldr	r1, [pc, #252]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d8a:	f7fe ffc5 	bl	8000d18 <HAL_GetTick>
 8001d8e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d92:	f7fe ffc1 	bl	8000d18 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e352      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001da4:	4b37      	ldr	r3, [pc, #220]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	f7fe ffe2 	bl	8000d78 <HAL_GetREVID>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d817      	bhi.n	8001dee <HAL_RCC_OscConfig+0x1f2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2b40      	cmp	r3, #64	; 0x40
 8001dc4:	d108      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x1dc>
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001dce:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd6:	e07b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	031b      	lsls	r3, r3, #12
 8001de6:	4927      	ldr	r1, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dec:	e070      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	061b      	lsls	r3, r3, #24
 8001dfc:	4921      	ldr	r1, [pc, #132]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e02:	e065      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d048      	beq.n	8001e9e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f023 0219 	bic.w	r2, r3, #25
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	491a      	ldr	r1, [pc, #104]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7fe ff7b 	bl	8000d18 <HAL_GetTick>
 8001e22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e26:	f7fe ff77 	bl	8000d18 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e308      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e44:	f7fe ff98 	bl	8000d78 <HAL_GetREVID>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d81a      	bhi.n	8001e88 <HAL_RCC_OscConfig+0x28c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b40      	cmp	r3, #64	; 0x40
 8001e58:	d108      	bne.n	8001e6c <HAL_RCC_OscConfig+0x270>
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e68:	6053      	str	r3, [r2, #4]
 8001e6a:	e031      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2d4>
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	031b      	lsls	r3, r3, #12
 8001e7a:	4902      	ldr	r1, [pc, #8]	; (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
 8001e80:	e026      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2d4>
 8001e82:	bf00      	nop
 8001e84:	58024400 	.word	0x58024400
 8001e88:	4b9a      	ldr	r3, [pc, #616]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	061b      	lsls	r3, r3, #24
 8001e96:	4997      	ldr	r1, [pc, #604]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
 8001e9c:	e018      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	4b95      	ldr	r3, [pc, #596]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a94      	ldr	r2, [pc, #592]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eaa:	f7fe ff35 	bl	8000d18 <HAL_GetTick>
 8001eae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb2:	f7fe ff31 	bl	8000d18 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e2c2      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ec4:	4b8b      	ldr	r3, [pc, #556]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80a9 	beq.w	8002030 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ede:	4b85      	ldr	r3, [pc, #532]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ee6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ee8:	4b82      	ldr	r3, [pc, #520]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d007      	beq.n	8001f04 <HAL_RCC_OscConfig+0x308>
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b18      	cmp	r3, #24
 8001ef8:	d13a      	bne.n	8001f70 <HAL_RCC_OscConfig+0x374>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d135      	bne.n	8001f70 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f04:	4b7b      	ldr	r3, [pc, #492]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_OscConfig+0x320>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	2b80      	cmp	r3, #128	; 0x80
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e296      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f1c:	f7fe ff2c 	bl	8000d78 <HAL_GetREVID>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d817      	bhi.n	8001f5a <HAL_RCC_OscConfig+0x35e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d108      	bne.n	8001f44 <HAL_RCC_OscConfig+0x348>
 8001f32:	4b70      	ldr	r3, [pc, #448]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f3a:	4a6e      	ldr	r2, [pc, #440]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001f3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f42:	e075      	b.n	8002030 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f44:	4b6b      	ldr	r3, [pc, #428]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	069b      	lsls	r3, r3, #26
 8001f52:	4968      	ldr	r1, [pc, #416]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f58:	e06a      	b.n	8002030 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f5a:	4b66      	ldr	r3, [pc, #408]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	061b      	lsls	r3, r3, #24
 8001f68:	4962      	ldr	r1, [pc, #392]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f6e:	e05f      	b.n	8002030 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d042      	beq.n	8001ffe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f78:	4b5e      	ldr	r3, [pc, #376]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a5d      	ldr	r2, [pc, #372]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7fe fec8 	bl	8000d18 <HAL_GetTick>
 8001f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f8c:	f7fe fec4 	bl	8000d18 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e255      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f9e:	4b55      	ldr	r3, [pc, #340]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001faa:	f7fe fee5 	bl	8000d78 <HAL_GetREVID>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d817      	bhi.n	8001fe8 <HAL_RCC_OscConfig+0x3ec>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d108      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x3d6>
 8001fc0:	4b4c      	ldr	r3, [pc, #304]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001fc8:	4a4a      	ldr	r2, [pc, #296]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fce:	6053      	str	r3, [r2, #4]
 8001fd0:	e02e      	b.n	8002030 <HAL_RCC_OscConfig+0x434>
 8001fd2:	4b48      	ldr	r3, [pc, #288]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	069b      	lsls	r3, r3, #26
 8001fe0:	4944      	ldr	r1, [pc, #272]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
 8001fe6:	e023      	b.n	8002030 <HAL_RCC_OscConfig+0x434>
 8001fe8:	4b42      	ldr	r3, [pc, #264]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	493f      	ldr	r1, [pc, #252]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60cb      	str	r3, [r1, #12]
 8001ffc:	e018      	b.n	8002030 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a3c      	ldr	r2, [pc, #240]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8002004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7fe fe85 	bl	8000d18 <HAL_GetTick>
 800200e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002012:	f7fe fe81 	bl	8000d18 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e212      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d036      	beq.n	80020aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d019      	beq.n	8002078 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002044:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8002046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002048:	4a2a      	ldr	r2, [pc, #168]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002050:	f7fe fe62 	bl	8000d18 <HAL_GetTick>
 8002054:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002058:	f7fe fe5e 	bl	8000d18 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e1ef      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 800206c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x45c>
 8002076:	e018      	b.n	80020aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002078:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 800207a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207c:	4a1d      	ldr	r2, [pc, #116]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7fe fe48 	bl	8000d18 <HAL_GetTick>
 8002088:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208c:	f7fe fe44 	bl	8000d18 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1d5      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d039      	beq.n	800212a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d01c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 80020c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020ca:	f7fe fe25 	bl	8000d18 <HAL_GetTick>
 80020ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80020d2:	f7fe fe21 	bl	8000d18 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e1b2      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x4d6>
 80020f0:	e01b      	b.n	800212a <HAL_RCC_OscConfig+0x52e>
 80020f2:	bf00      	nop
 80020f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020f8:	4b9b      	ldr	r3, [pc, #620]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a9a      	ldr	r2, [pc, #616]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80020fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002102:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002104:	f7fe fe08 	bl	8000d18 <HAL_GetTick>
 8002108:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800210c:	f7fe fe04 	bl	8000d18 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e195      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800211e:	4b92      	ldr	r3, [pc, #584]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8081 	beq.w	800223a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002138:	4b8c      	ldr	r3, [pc, #560]	; (800236c <HAL_RCC_OscConfig+0x770>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a8b      	ldr	r2, [pc, #556]	; (800236c <HAL_RCC_OscConfig+0x770>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002142:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002144:	f7fe fde8 	bl	8000d18 <HAL_GetTick>
 8002148:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800214c:	f7fe fde4 	bl	8000d18 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e175      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800215e:	4b83      	ldr	r3, [pc, #524]	; (800236c <HAL_RCC_OscConfig+0x770>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d106      	bne.n	8002180 <HAL_RCC_OscConfig+0x584>
 8002172:	4b7d      	ldr	r3, [pc, #500]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	4a7c      	ldr	r2, [pc, #496]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6713      	str	r3, [r2, #112]	; 0x70
 800217e:	e02d      	b.n	80021dc <HAL_RCC_OscConfig+0x5e0>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x5a6>
 8002188:	4b77      	ldr	r3, [pc, #476]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	4a76      	ldr	r2, [pc, #472]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	6713      	str	r3, [r2, #112]	; 0x70
 8002194:	4b74      	ldr	r3, [pc, #464]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	4a73      	ldr	r2, [pc, #460]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 800219a:	f023 0304 	bic.w	r3, r3, #4
 800219e:	6713      	str	r3, [r2, #112]	; 0x70
 80021a0:	e01c      	b.n	80021dc <HAL_RCC_OscConfig+0x5e0>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x5c8>
 80021aa:	4b6f      	ldr	r3, [pc, #444]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	4a6e      	ldr	r2, [pc, #440]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	6713      	str	r3, [r2, #112]	; 0x70
 80021b6:	4b6c      	ldr	r3, [pc, #432]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	4a6b      	ldr	r2, [pc, #428]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6713      	str	r3, [r2, #112]	; 0x70
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0x5e0>
 80021c4:	4b68      	ldr	r3, [pc, #416]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	4a67      	ldr	r2, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80021ca:	f023 0301 	bic.w	r3, r3, #1
 80021ce:	6713      	str	r3, [r2, #112]	; 0x70
 80021d0:	4b65      	ldr	r3, [pc, #404]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	4a64      	ldr	r2, [pc, #400]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80021d6:	f023 0304 	bic.w	r3, r3, #4
 80021da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d015      	beq.n	8002210 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7fe fd98 	bl	8000d18 <HAL_GetTick>
 80021e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ec:	f7fe fd94 	bl	8000d18 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e123      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002202:	4b59      	ldr	r3, [pc, #356]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0ee      	beq.n	80021ec <HAL_RCC_OscConfig+0x5f0>
 800220e:	e014      	b.n	800223a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7fe fd82 	bl	8000d18 <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7fe fd7e 	bl	8000d18 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e10d      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800222e:	4b4e      	ldr	r3, [pc, #312]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ee      	bne.n	8002218 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8102 	beq.w	8002448 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002244:	4b48      	ldr	r3, [pc, #288]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800224c:	2b18      	cmp	r3, #24
 800224e:	f000 80bd 	beq.w	80023cc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	2b02      	cmp	r3, #2
 8002258:	f040 809e 	bne.w	8002398 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225c:	4b42      	ldr	r3, [pc, #264]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a41      	ldr	r2, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe fd56 	bl	8000d18 <HAL_GetTick>
 800226c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe fd52 	bl	8000d18 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e0e3      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002282:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228e:	4b36      	ldr	r3, [pc, #216]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002292:	4b37      	ldr	r3, [pc, #220]	; (8002370 <HAL_RCC_OscConfig+0x774>)
 8002294:	4013      	ands	r3, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	430a      	orrs	r2, r1
 80022a2:	4931      	ldr	r1, [pc, #196]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	628b      	str	r3, [r1, #40]	; 0x28
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	3b01      	subs	r3, #1
 80022ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b6:	3b01      	subs	r3, #1
 80022b8:	025b      	lsls	r3, r3, #9
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	3b01      	subs	r3, #1
 80022c4:	041b      	lsls	r3, r3, #16
 80022c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	3b01      	subs	r3, #1
 80022d2:	061b      	lsls	r3, r3, #24
 80022d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80022d8:	4923      	ldr	r1, [pc, #140]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	4a21      	ldr	r2, [pc, #132]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022ea:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80022ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <HAL_RCC_OscConfig+0x778>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022f6:	00d2      	lsls	r2, r2, #3
 80022f8:	491b      	ldr	r1, [pc, #108]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	f023 020c 	bic.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	4917      	ldr	r1, [pc, #92]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 800230c:	4313      	orrs	r3, r2
 800230e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002310:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	f023 0202 	bic.w	r2, r3, #2
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231c:	4912      	ldr	r1, [pc, #72]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 800231e:	4313      	orrs	r3, r2
 8002320:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	4a0d      	ldr	r2, [pc, #52]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002338:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002344:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	4a07      	ldr	r2, [pc, #28]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_RCC_OscConfig+0x76c>)
 8002358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7fe fcdb 	bl	8000d18 <HAL_GetTick>
 8002362:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002364:	e011      	b.n	800238a <HAL_RCC_OscConfig+0x78e>
 8002366:	bf00      	nop
 8002368:	58024400 	.word	0x58024400
 800236c:	58024800 	.word	0x58024800
 8002370:	fffffc0c 	.word	0xfffffc0c
 8002374:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe fcce 	bl	8000d18 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e05f      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800238a:	4b32      	ldr	r3, [pc, #200]	; (8002454 <HAL_RCC_OscConfig+0x858>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x77c>
 8002396:	e057      	b.n	8002448 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002398:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <HAL_RCC_OscConfig+0x858>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a2d      	ldr	r2, [pc, #180]	; (8002454 <HAL_RCC_OscConfig+0x858>)
 800239e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7fe fcb8 	bl	8000d18 <HAL_GetTick>
 80023a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe fcb4 	bl	8000d18 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e045      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023be:	4b25      	ldr	r3, [pc, #148]	; (8002454 <HAL_RCC_OscConfig+0x858>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x7b0>
 80023ca:	e03d      	b.n	8002448 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <HAL_RCC_OscConfig+0x858>)
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_RCC_OscConfig+0x858>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d031      	beq.n	8002444 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f003 0203 	and.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d12a      	bne.n	8002444 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d122      	bne.n	8002444 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d11a      	bne.n	8002444 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	0a5b      	lsrs	r3, r3, #9
 8002412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d111      	bne.n	8002444 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	0c1b      	lsrs	r3, r3, #16
 8002424:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800242e:	429a      	cmp	r2, r3
 8002430:	d108      	bne.n	8002444 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	0e1b      	lsrs	r3, r3, #24
 8002436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3730      	adds	r7, #48	; 0x30
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	58024400 	.word	0x58024400

08002458 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e19c      	b.n	80027a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800246c:	4b8a      	ldr	r3, [pc, #552]	; (8002698 <HAL_RCC_ClockConfig+0x240>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d910      	bls.n	800249c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b87      	ldr	r3, [pc, #540]	; (8002698 <HAL_RCC_ClockConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 020f 	bic.w	r2, r3, #15
 8002482:	4985      	ldr	r1, [pc, #532]	; (8002698 <HAL_RCC_ClockConfig+0x240>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b83      	ldr	r3, [pc, #524]	; (8002698 <HAL_RCC_ClockConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e184      	b.n	80027a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d010      	beq.n	80024ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	4b7b      	ldr	r3, [pc, #492]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d908      	bls.n	80024ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024b8:	4b78      	ldr	r3, [pc, #480]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	4975      	ldr	r1, [pc, #468]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d010      	beq.n	80024f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	4b70      	ldr	r3, [pc, #448]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d908      	bls.n	80024f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024e6:	4b6d      	ldr	r3, [pc, #436]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	496a      	ldr	r1, [pc, #424]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b00      	cmp	r3, #0
 8002502:	d010      	beq.n	8002526 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	4b64      	ldr	r3, [pc, #400]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002510:	429a      	cmp	r2, r3
 8002512:	d908      	bls.n	8002526 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002514:	4b61      	ldr	r3, [pc, #388]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	495e      	ldr	r1, [pc, #376]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 8002522:	4313      	orrs	r3, r2
 8002524:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d010      	beq.n	8002554 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69da      	ldr	r2, [r3, #28]
 8002536:	4b59      	ldr	r3, [pc, #356]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800253e:	429a      	cmp	r2, r3
 8002540:	d908      	bls.n	8002554 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002542:	4b56      	ldr	r3, [pc, #344]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	4953      	ldr	r1, [pc, #332]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 8002550:	4313      	orrs	r3, r2
 8002552:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d010      	beq.n	8002582 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	4b4d      	ldr	r3, [pc, #308]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	429a      	cmp	r2, r3
 800256e:	d908      	bls.n	8002582 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002570:	4b4a      	ldr	r3, [pc, #296]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f023 020f 	bic.w	r2, r3, #15
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4947      	ldr	r1, [pc, #284]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 800257e:	4313      	orrs	r3, r2
 8002580:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d055      	beq.n	800263a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800258e:	4b43      	ldr	r3, [pc, #268]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	4940      	ldr	r1, [pc, #256]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 800259c:	4313      	orrs	r3, r2
 800259e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d121      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0f6      	b.n	80027a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d107      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025c0:	4b36      	ldr	r3, [pc, #216]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d115      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0ea      	b.n	80027a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d107      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025d8:	4b30      	ldr	r3, [pc, #192]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0de      	b.n	80027a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e8:	4b2c      	ldr	r3, [pc, #176]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0d6      	b.n	80027a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025f8:	4b28      	ldr	r3, [pc, #160]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f023 0207 	bic.w	r2, r3, #7
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4925      	ldr	r1, [pc, #148]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 8002606:	4313      	orrs	r3, r2
 8002608:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7fe fb85 	bl	8000d18 <HAL_GetTick>
 800260e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002610:	e00a      	b.n	8002628 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002612:	f7fe fb81 	bl	8000d18 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e0be      	b.n	80027a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002628:	4b1c      	ldr	r3, [pc, #112]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	429a      	cmp	r2, r3
 8002638:	d1eb      	bne.n	8002612 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d010      	beq.n	8002668 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	429a      	cmp	r2, r3
 8002654:	d208      	bcs.n	8002668 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f023 020f 	bic.w	r2, r3, #15
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	490e      	ldr	r1, [pc, #56]	; (800269c <HAL_RCC_ClockConfig+0x244>)
 8002664:	4313      	orrs	r3, r2
 8002666:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_ClockConfig+0x240>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d214      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_RCC_ClockConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 020f 	bic.w	r2, r3, #15
 800267e:	4906      	ldr	r1, [pc, #24]	; (8002698 <HAL_RCC_ClockConfig+0x240>)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <HAL_RCC_ClockConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e086      	b.n	80027a6 <HAL_RCC_ClockConfig+0x34e>
 8002698:	52002000 	.word	0x52002000
 800269c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d010      	beq.n	80026ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	4b3f      	ldr	r3, [pc, #252]	; (80027b0 <HAL_RCC_ClockConfig+0x358>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d208      	bcs.n	80026ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026bc:	4b3c      	ldr	r3, [pc, #240]	; (80027b0 <HAL_RCC_ClockConfig+0x358>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	4939      	ldr	r1, [pc, #228]	; (80027b0 <HAL_RCC_ClockConfig+0x358>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d010      	beq.n	80026fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	4b34      	ldr	r3, [pc, #208]	; (80027b0 <HAL_RCC_ClockConfig+0x358>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d208      	bcs.n	80026fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026ea:	4b31      	ldr	r3, [pc, #196]	; (80027b0 <HAL_RCC_ClockConfig+0x358>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	492e      	ldr	r1, [pc, #184]	; (80027b0 <HAL_RCC_ClockConfig+0x358>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	d010      	beq.n	800272a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699a      	ldr	r2, [r3, #24]
 800270c:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <HAL_RCC_ClockConfig+0x358>)
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002714:	429a      	cmp	r2, r3
 8002716:	d208      	bcs.n	800272a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_RCC_ClockConfig+0x358>)
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	4922      	ldr	r1, [pc, #136]	; (80027b0 <HAL_RCC_ClockConfig+0x358>)
 8002726:	4313      	orrs	r3, r2
 8002728:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b00      	cmp	r3, #0
 8002734:	d010      	beq.n	8002758 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69da      	ldr	r2, [r3, #28]
 800273a:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_RCC_ClockConfig+0x358>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002742:	429a      	cmp	r2, r3
 8002744:	d208      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002746:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_RCC_ClockConfig+0x358>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4917      	ldr	r1, [pc, #92]	; (80027b0 <HAL_RCC_ClockConfig+0x358>)
 8002754:	4313      	orrs	r3, r2
 8002756:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002758:	f000 f834 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_RCC_ClockConfig+0x358>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	4912      	ldr	r1, [pc, #72]	; (80027b4 <HAL_RCC_ClockConfig+0x35c>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
 8002774:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_RCC_ClockConfig+0x358>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <HAL_RCC_ClockConfig+0x35c>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <HAL_RCC_ClockConfig+0x360>)
 800278e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_RCC_ClockConfig+0x364>)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_RCC_ClockConfig+0x368>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fa72 	bl	8000c84 <HAL_InitTick>
 80027a0:	4603      	mov	r3, r0
 80027a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	58024400 	.word	0x58024400
 80027b4:	080042cc 	.word	0x080042cc
 80027b8:	24000004 	.word	0x24000004
 80027bc:	24000000 	.word	0x24000000
 80027c0:	24000008 	.word	0x24000008

080027c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ca:	4bb3      	ldr	r3, [pc, #716]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027d2:	2b18      	cmp	r3, #24
 80027d4:	f200 8155 	bhi.w	8002a82 <HAL_RCC_GetSysClockFreq+0x2be>
 80027d8:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	08002845 	.word	0x08002845
 80027e4:	08002a83 	.word	0x08002a83
 80027e8:	08002a83 	.word	0x08002a83
 80027ec:	08002a83 	.word	0x08002a83
 80027f0:	08002a83 	.word	0x08002a83
 80027f4:	08002a83 	.word	0x08002a83
 80027f8:	08002a83 	.word	0x08002a83
 80027fc:	08002a83 	.word	0x08002a83
 8002800:	0800286b 	.word	0x0800286b
 8002804:	08002a83 	.word	0x08002a83
 8002808:	08002a83 	.word	0x08002a83
 800280c:	08002a83 	.word	0x08002a83
 8002810:	08002a83 	.word	0x08002a83
 8002814:	08002a83 	.word	0x08002a83
 8002818:	08002a83 	.word	0x08002a83
 800281c:	08002a83 	.word	0x08002a83
 8002820:	08002871 	.word	0x08002871
 8002824:	08002a83 	.word	0x08002a83
 8002828:	08002a83 	.word	0x08002a83
 800282c:	08002a83 	.word	0x08002a83
 8002830:	08002a83 	.word	0x08002a83
 8002834:	08002a83 	.word	0x08002a83
 8002838:	08002a83 	.word	0x08002a83
 800283c:	08002a83 	.word	0x08002a83
 8002840:	08002877 	.word	0x08002877
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002844:	4b94      	ldr	r3, [pc, #592]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d009      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002850:	4b91      	ldr	r3, [pc, #580]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	08db      	lsrs	r3, r3, #3
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	4a90      	ldr	r2, [pc, #576]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
 8002860:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002862:	e111      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002864:	4b8d      	ldr	r3, [pc, #564]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002866:	61bb      	str	r3, [r7, #24]
    break;
 8002868:	e10e      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800286a:	4b8d      	ldr	r3, [pc, #564]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800286c:	61bb      	str	r3, [r7, #24]
    break;
 800286e:	e10b      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002870:	4b8c      	ldr	r3, [pc, #560]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002872:	61bb      	str	r3, [r7, #24]
    break;
 8002874:	e108      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002876:	4b88      	ldr	r3, [pc, #544]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002880:	4b85      	ldr	r3, [pc, #532]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800288a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800288c:	4b82      	ldr	r3, [pc, #520]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002896:	4b80      	ldr	r3, [pc, #512]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	08db      	lsrs	r3, r3, #3
 800289c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80e1 	beq.w	8002a7c <HAL_RCC_GetSysClockFreq+0x2b8>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	f000 8083 	beq.w	80029c8 <HAL_RCC_GetSysClockFreq+0x204>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	f200 80a1 	bhi.w	8002a0c <HAL_RCC_GetSysClockFreq+0x248>
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x114>
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d056      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x1c0>
 80028d6:	e099      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028d8:	4b6f      	ldr	r3, [pc, #444]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d02d      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028e4:	4b6c      	ldr	r3, [pc, #432]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	08db      	lsrs	r3, r3, #3
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	4a6b      	ldr	r2, [pc, #428]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
 80028f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	ee07 3a90 	vmov	s15, r3
 80028fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800290a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800290e:	4b62      	ldr	r3, [pc, #392]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800291e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002922:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800292a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800292e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800293e:	e087      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	ee07 3a90 	vmov	s15, r3
 8002946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002aac <HAL_RCC_GetSysClockFreq+0x2e8>
 800294e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002952:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002962:	ed97 6a02 	vldr	s12, [r7, #8]
 8002966:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800296a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800296e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800297a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002982:	e065      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002ab0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002996:	4b40      	ldr	r3, [pc, #256]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80029aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029c6:	e043      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ab4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80029d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029da:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80029ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a0a:	e021      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a16:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ab0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	0a5b      	lsrs	r3, r3, #9
 8002a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	ee07 3a90 	vmov	s15, r3
 8002a64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a74:	ee17 3a90 	vmov	r3, s15
 8002a78:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002a7a:	e005      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61bb      	str	r3, [r7, #24]
    break;
 8002a80:	e002      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a84:	61bb      	str	r3, [r7, #24]
    break;
 8002a86:	bf00      	nop
  }

  return sysclockfreq;
 8002a88:	69bb      	ldr	r3, [r7, #24]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3724      	adds	r7, #36	; 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	58024400 	.word	0x58024400
 8002a9c:	03d09000 	.word	0x03d09000
 8002aa0:	003d0900 	.word	0x003d0900
 8002aa4:	007a1200 	.word	0x007a1200
 8002aa8:	46000000 	.word	0x46000000
 8002aac:	4c742400 	.word	0x4c742400
 8002ab0:	4a742400 	.word	0x4a742400
 8002ab4:	4af42400 	.word	0x4af42400

08002ab8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d03f      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002adc:	d02a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ade:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ae2:	d824      	bhi.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ae4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ae8:	d018      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002aea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002aee:	d81e      	bhi.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af8:	d007      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002afa:	e018      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002afc:	4ba3      	ldr	r3, [pc, #652]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	4aa2      	ldr	r2, [pc, #648]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b08:	e015      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	2102      	movs	r1, #2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 ff17 	bl	8003944 <RCCEx_PLL2_Config>
 8002b16:	4603      	mov	r3, r0
 8002b18:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b1a:	e00c      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3324      	adds	r3, #36	; 0x24
 8002b20:	2102      	movs	r1, #2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 ffc0 	bl	8003aa8 <RCCEx_PLL3_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b2c:	e003      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	75fb      	strb	r3, [r7, #23]
      break;
 8002b32:	e000      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d109      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b3c:	4b93      	ldr	r3, [pc, #588]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b48:	4990      	ldr	r1, [pc, #576]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	650b      	str	r3, [r1, #80]	; 0x50
 8002b4e:	e001      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d03d      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d826      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002b68:	a201      	add	r2, pc, #4	; (adr r2, 8002b70 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6e:	bf00      	nop
 8002b70:	08002b85 	.word	0x08002b85
 8002b74:	08002b93 	.word	0x08002b93
 8002b78:	08002ba5 	.word	0x08002ba5
 8002b7c:	08002bbd 	.word	0x08002bbd
 8002b80:	08002bbd 	.word	0x08002bbd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b84:	4b81      	ldr	r3, [pc, #516]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	4a80      	ldr	r2, [pc, #512]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b90:	e015      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2100      	movs	r1, #0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fed3 	bl	8003944 <RCCEx_PLL2_Config>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ba2:	e00c      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3324      	adds	r3, #36	; 0x24
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 ff7c 	bl	8003aa8 <RCCEx_PLL3_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bb4:	e003      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bba:	e000      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bc4:	4b71      	ldr	r3, [pc, #452]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc8:	f023 0207 	bic.w	r2, r3, #7
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd0:	496e      	ldr	r1, [pc, #440]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	650b      	str	r3, [r1, #80]	; 0x50
 8002bd6:	e001      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d042      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf0:	d02b      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf6:	d825      	bhi.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002bf8:	2bc0      	cmp	r3, #192	; 0xc0
 8002bfa:	d028      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002bfc:	2bc0      	cmp	r3, #192	; 0xc0
 8002bfe:	d821      	bhi.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	d016      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002c04:	2b80      	cmp	r3, #128	; 0x80
 8002c06:	d81d      	bhi.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d007      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002c10:	e018      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c12:	4b5e      	ldr	r3, [pc, #376]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	4a5d      	ldr	r2, [pc, #372]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c1e:	e017      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	2100      	movs	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fe8c 	bl	8003944 <RCCEx_PLL2_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c30:	e00e      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3324      	adds	r3, #36	; 0x24
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 ff35 	bl	8003aa8 <RCCEx_PLL3_Config>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c42:	e005      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	75fb      	strb	r3, [r7, #23]
      break;
 8002c48:	e002      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002c56:	4b4d      	ldr	r3, [pc, #308]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	494a      	ldr	r1, [pc, #296]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	650b      	str	r3, [r1, #80]	; 0x50
 8002c68:	e001      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
 8002c6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d049      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c84:	d030      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002c86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c8a:	d82a      	bhi.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002c8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c90:	d02c      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002c92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c96:	d824      	bhi.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9c:	d018      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca2:	d81e      	bhi.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002ca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cac:	d007      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002cae:	e018      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb0:	4b36      	ldr	r3, [pc, #216]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	4a35      	ldr	r2, [pc, #212]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002cbc:	e017      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fe3d 	bl	8003944 <RCCEx_PLL2_Config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002cce:	e00e      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3324      	adds	r3, #36	; 0x24
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fee6 	bl	8003aa8 <RCCEx_PLL3_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ce0:	e005      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002ce8:	bf00      	nop
 8002cea:	e000      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002cf4:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d02:	4922      	ldr	r1, [pc, #136]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	658b      	str	r3, [r1, #88]	; 0x58
 8002d08:	e001      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
 8002d0c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d04b      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d24:	d030      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002d26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d2a:	d82a      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d30:	d02e      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002d32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d36:	d824      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d3c:	d018      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002d3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d42:	d81e      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d4c:	d007      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002d4e:	e018      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d5c:	e019      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fded 	bl	8003944 <RCCEx_PLL2_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002d6e:	e010      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3324      	adds	r3, #36	; 0x24
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fe96 	bl	8003aa8 <RCCEx_PLL3_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d80:	e007      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	75fb      	strb	r3, [r7, #23]
      break;
 8002d86:	e004      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002d88:	bf00      	nop
 8002d8a:	e002      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002d8c:	58024400 	.word	0x58024400
      break;
 8002d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002d98:	4b99      	ldr	r3, [pc, #612]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002da6:	4996      	ldr	r1, [pc, #600]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	658b      	str	r3, [r1, #88]	; 0x58
 8002dac:	e001      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dae:	7dfb      	ldrb	r3, [r7, #23]
 8002db0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d032      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc2:	2b30      	cmp	r3, #48	; 0x30
 8002dc4:	d01c      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002dc6:	2b30      	cmp	r3, #48	; 0x30
 8002dc8:	d817      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d00c      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d813      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d016      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002dd6:	2b10      	cmp	r3, #16
 8002dd8:	d10f      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dda:	4b89      	ldr	r3, [pc, #548]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	4a88      	ldr	r2, [pc, #544]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002de6:	e00e      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3304      	adds	r3, #4
 8002dec:	2102      	movs	r1, #2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fda8 	bl	8003944 <RCCEx_PLL2_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002df8:	e005      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8002dfe:	e002      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002e00:	bf00      	nop
 8002e02:	e000      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d109      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e0c:	4b7c      	ldr	r3, [pc, #496]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e18:	4979      	ldr	r1, [pc, #484]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e1e:	e001      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d047      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e38:	d030      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e3e:	d82a      	bhi.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e44:	d02c      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002e46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e4a:	d824      	bhi.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e50:	d018      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e56:	d81e      	bhi.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e60:	d007      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002e62:	e018      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e64:	4b66      	ldr	r3, [pc, #408]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	4a65      	ldr	r2, [pc, #404]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e70:	e017      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fd63 	bl	8003944 <RCCEx_PLL2_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e82:	e00e      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3324      	adds	r3, #36	; 0x24
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fe0c 	bl	8003aa8 <RCCEx_PLL3_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e94:	e005      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
      break;
 8002e9a:	e002      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002e9c:	bf00      	nop
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ea8:	4b55      	ldr	r3, [pc, #340]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb4:	4952      	ldr	r1, [pc, #328]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	650b      	str	r3, [r1, #80]	; 0x50
 8002eba:	e001      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d049      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed4:	d02e      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002ed6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eda:	d828      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002edc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ee0:	d02a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002ee2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ee6:	d822      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002ee8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002eec:	d026      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002eee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ef2:	d81c      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ef8:	d010      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002efe:	d816      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01d      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f08:	d111      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2101      	movs	r1, #1
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fd17 	bl	8003944 <RCCEx_PLL2_Config>
 8002f16:	4603      	mov	r3, r0
 8002f18:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f1a:	e012      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3324      	adds	r3, #36	; 0x24
 8002f20:	2101      	movs	r1, #1
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fdc0 	bl	8003aa8 <RCCEx_PLL3_Config>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f2c:	e009      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
      break;
 8002f32:	e006      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f34:	bf00      	nop
 8002f36:	e004      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f38:	bf00      	nop
 8002f3a:	e002      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f3c:	bf00      	nop
 8002f3e:	e000      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f48:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f54:	492a      	ldr	r1, [pc, #168]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	650b      	str	r3, [r1, #80]	; 0x50
 8002f5a:	e001      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d04d      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f76:	d02e      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f7c:	d828      	bhi.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f82:	d02a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f88:	d822      	bhi.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002f8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f8e:	d026      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002f90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f94:	d81c      	bhi.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f9a:	d010      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa0:	d816      	bhi.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d01d      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002faa:	d111      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fcc6 	bl	8003944 <RCCEx_PLL2_Config>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002fbc:	e012      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3324      	adds	r3, #36	; 0x24
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fd6f 	bl	8003aa8 <RCCEx_PLL3_Config>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002fce:	e009      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd4:	e006      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e004      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e002      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e000      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ff8:	4901      	ldr	r1, [pc, #4]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	658b      	str	r3, [r1, #88]	; 0x58
 8002ffe:	e003      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003000:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d02f      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800301c:	d00e      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800301e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003022:	d814      	bhi.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800302c:	d10f      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800302e:	4baf      	ldr	r3, [pc, #700]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	4aae      	ldr	r2, [pc, #696]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003038:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800303a:	e00c      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	2101      	movs	r1, #1
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fc7e 	bl	8003944 <RCCEx_PLL2_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800304c:	e003      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	75fb      	strb	r3, [r7, #23]
      break;
 8003052:	e000      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003056:	7dfb      	ldrb	r3, [r7, #23]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800305c:	4ba3      	ldr	r3, [pc, #652]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800305e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003060:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003068:	49a0      	ldr	r1, [pc, #640]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800306a:	4313      	orrs	r3, r2
 800306c:	650b      	str	r3, [r1, #80]	; 0x50
 800306e:	e001      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d032      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003084:	2b03      	cmp	r3, #3
 8003086:	d81b      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003088:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030c7 	.word	0x080030c7
 8003094:	080030a1 	.word	0x080030a1
 8003098:	080030af 	.word	0x080030af
 800309c:	080030c7 	.word	0x080030c7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030a0:	4b92      	ldr	r3, [pc, #584]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	4a91      	ldr	r2, [pc, #580]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80030ac:	e00c      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3304      	adds	r3, #4
 80030b2:	2102      	movs	r1, #2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fc45 	bl	8003944 <RCCEx_PLL2_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80030be:	e003      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	75fb      	strb	r3, [r7, #23]
      break;
 80030c4:	e000      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80030c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80030ce:	4b87      	ldr	r3, [pc, #540]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	f023 0203 	bic.w	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4984      	ldr	r1, [pc, #528]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80030e0:	e001      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8086 	beq.w	8003200 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f4:	4b7e      	ldr	r3, [pc, #504]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a7d      	ldr	r2, [pc, #500]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80030fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003100:	f7fd fe0a 	bl	8000d18 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003106:	e009      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003108:	f7fd fe06 	bl	8000d18 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	; 0x64
 8003114:	d902      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	75fb      	strb	r3, [r7, #23]
        break;
 800311a:	e005      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800311c:	4b74      	ldr	r3, [pc, #464]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ef      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d166      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800312e:	4b6f      	ldr	r3, [pc, #444]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003130:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003138:	4053      	eors	r3, r2
 800313a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313e:	2b00      	cmp	r3, #0
 8003140:	d013      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003142:	4b6a      	ldr	r3, [pc, #424]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800314c:	4b67      	ldr	r3, [pc, #412]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	4a66      	ldr	r2, [pc, #408]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003156:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003158:	4b64      	ldr	r3, [pc, #400]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a63      	ldr	r2, [pc, #396]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800315e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003164:	4a61      	ldr	r2, [pc, #388]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003174:	d115      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7fd fdcf 	bl	8000d18 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800317c:	e00b      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fd fdcb 	bl	8000d18 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d902      	bls.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	75fb      	strb	r3, [r7, #23]
            break;
 8003194:	e005      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003196:	4b55      	ldr	r3, [pc, #340]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0ed      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d126      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031b6:	d10d      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80031b8:	4b4c      	ldr	r3, [pc, #304]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031c6:	0919      	lsrs	r1, r3, #4
 80031c8:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80031ca:	400b      	ands	r3, r1
 80031cc:	4947      	ldr	r1, [pc, #284]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	610b      	str	r3, [r1, #16]
 80031d2:	e005      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80031d4:	4b45      	ldr	r3, [pc, #276]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	4a44      	ldr	r2, [pc, #272]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80031de:	6113      	str	r3, [r2, #16]
 80031e0:	4b42      	ldr	r3, [pc, #264]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ee:	493f      	ldr	r1, [pc, #252]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	670b      	str	r3, [r1, #112]	; 0x70
 80031f4:	e004      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
 80031f8:	75bb      	strb	r3, [r7, #22]
 80031fa:	e001      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8085 	beq.w	8003318 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003212:	2b28      	cmp	r3, #40	; 0x28
 8003214:	d866      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003216:	a201      	add	r2, pc, #4	; (adr r2, 800321c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	080032f9 	.word	0x080032f9
 8003220:	080032e5 	.word	0x080032e5
 8003224:	080032e5 	.word	0x080032e5
 8003228:	080032e5 	.word	0x080032e5
 800322c:	080032e5 	.word	0x080032e5
 8003230:	080032e5 	.word	0x080032e5
 8003234:	080032e5 	.word	0x080032e5
 8003238:	080032e5 	.word	0x080032e5
 800323c:	080032c1 	.word	0x080032c1
 8003240:	080032e5 	.word	0x080032e5
 8003244:	080032e5 	.word	0x080032e5
 8003248:	080032e5 	.word	0x080032e5
 800324c:	080032e5 	.word	0x080032e5
 8003250:	080032e5 	.word	0x080032e5
 8003254:	080032e5 	.word	0x080032e5
 8003258:	080032e5 	.word	0x080032e5
 800325c:	080032d3 	.word	0x080032d3
 8003260:	080032e5 	.word	0x080032e5
 8003264:	080032e5 	.word	0x080032e5
 8003268:	080032e5 	.word	0x080032e5
 800326c:	080032e5 	.word	0x080032e5
 8003270:	080032e5 	.word	0x080032e5
 8003274:	080032e5 	.word	0x080032e5
 8003278:	080032e5 	.word	0x080032e5
 800327c:	080032f9 	.word	0x080032f9
 8003280:	080032e5 	.word	0x080032e5
 8003284:	080032e5 	.word	0x080032e5
 8003288:	080032e5 	.word	0x080032e5
 800328c:	080032e5 	.word	0x080032e5
 8003290:	080032e5 	.word	0x080032e5
 8003294:	080032e5 	.word	0x080032e5
 8003298:	080032e5 	.word	0x080032e5
 800329c:	080032f9 	.word	0x080032f9
 80032a0:	080032e5 	.word	0x080032e5
 80032a4:	080032e5 	.word	0x080032e5
 80032a8:	080032e5 	.word	0x080032e5
 80032ac:	080032e5 	.word	0x080032e5
 80032b0:	080032e5 	.word	0x080032e5
 80032b4:	080032e5 	.word	0x080032e5
 80032b8:	080032e5 	.word	0x080032e5
 80032bc:	080032f9 	.word	0x080032f9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	2101      	movs	r1, #1
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fb3c 	bl	8003944 <RCCEx_PLL2_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80032d0:	e013      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3324      	adds	r3, #36	; 0x24
 80032d6:	2101      	movs	r1, #1
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fbe5 	bl	8003aa8 <RCCEx_PLL3_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80032e2:	e00a      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	75fb      	strb	r3, [r7, #23]
      break;
 80032e8:	e007      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 80032ea:	bf00      	nop
 80032ec:	58024400 	.word	0x58024400
 80032f0:	58024800 	.word	0x58024800
 80032f4:	00ffffcf 	.word	0x00ffffcf
      break;
 80032f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d109      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003300:	4b96      	ldr	r3, [pc, #600]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800330c:	4993      	ldr	r1, [pc, #588]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800330e:	4313      	orrs	r3, r2
 8003310:	654b      	str	r3, [r1, #84]	; 0x54
 8003312:	e001      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	7dfb      	ldrb	r3, [r7, #23]
 8003316:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d038      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003328:	2b05      	cmp	r3, #5
 800332a:	d821      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800332c:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800332e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003332:	bf00      	nop
 8003334:	08003377 	.word	0x08003377
 8003338:	0800334d 	.word	0x0800334d
 800333c:	0800335f 	.word	0x0800335f
 8003340:	08003377 	.word	0x08003377
 8003344:	08003377 	.word	0x08003377
 8003348:	08003377 	.word	0x08003377
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3304      	adds	r3, #4
 8003350:	2101      	movs	r1, #1
 8003352:	4618      	mov	r0, r3
 8003354:	f000 faf6 	bl	8003944 <RCCEx_PLL2_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800335c:	e00c      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3324      	adds	r3, #36	; 0x24
 8003362:	2101      	movs	r1, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fb9f 	bl	8003aa8 <RCCEx_PLL3_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800336e:	e003      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	75fb      	strb	r3, [r7, #23]
      break;
 8003374:	e000      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003378:	7dfb      	ldrb	r3, [r7, #23]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800337e:	4b77      	ldr	r3, [pc, #476]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	f023 0207 	bic.w	r2, r3, #7
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	4974      	ldr	r1, [pc, #464]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800338c:	4313      	orrs	r3, r2
 800338e:	654b      	str	r3, [r1, #84]	; 0x54
 8003390:	e001      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003392:	7dfb      	ldrb	r3, [r7, #23]
 8003394:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d03a      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d821      	bhi.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033f7 	.word	0x080033f7
 80033b8:	080033cd 	.word	0x080033cd
 80033bc:	080033df 	.word	0x080033df
 80033c0:	080033f7 	.word	0x080033f7
 80033c4:	080033f7 	.word	0x080033f7
 80033c8:	080033f7 	.word	0x080033f7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	2101      	movs	r1, #1
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fab6 	bl	8003944 <RCCEx_PLL2_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80033dc:	e00c      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3324      	adds	r3, #36	; 0x24
 80033e2:	2101      	movs	r1, #1
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fb5f 	bl	8003aa8 <RCCEx_PLL3_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80033ee:	e003      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	75fb      	strb	r3, [r7, #23]
      break;
 80033f4:	e000      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80033f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033fe:	4b57      	ldr	r3, [pc, #348]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	f023 0207 	bic.w	r2, r3, #7
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	4953      	ldr	r1, [pc, #332]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800340e:	4313      	orrs	r3, r2
 8003410:	658b      	str	r3, [r1, #88]	; 0x58
 8003412:	e001      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003414:	7dfb      	ldrb	r3, [r7, #23]
 8003416:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b00      	cmp	r3, #0
 8003422:	d04b      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800342a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800342e:	d02e      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003434:	d828      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343a:	d02a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003440:	d822      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003442:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003446:	d026      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800344c:	d81c      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800344e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003452:	d010      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003458:	d816      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01d      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800345e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003462:	d111      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fa6a 	bl	8003944 <RCCEx_PLL2_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003474:	e012      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3324      	adds	r3, #36	; 0x24
 800347a:	2102      	movs	r1, #2
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fb13 	bl	8003aa8 <RCCEx_PLL3_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003486:	e009      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	75fb      	strb	r3, [r7, #23]
      break;
 800348c:	e006      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800348e:	bf00      	nop
 8003490:	e004      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003492:	bf00      	nop
 8003494:	e002      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003496:	bf00      	nop
 8003498:	e000      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800349a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800349c:	7dfb      	ldrb	r3, [r7, #23]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034a2:	4b2e      	ldr	r3, [pc, #184]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b0:	492a      	ldr	r1, [pc, #168]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	654b      	str	r3, [r1, #84]	; 0x54
 80034b6:	e001      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d04d      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80034d2:	d02e      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80034d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80034d8:	d828      	bhi.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80034da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034de:	d02a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80034e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e4:	d822      	bhi.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80034e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034ea:	d026      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80034ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034f0:	d81c      	bhi.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80034f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f6:	d010      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80034f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034fc:	d816      	bhi.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d01d      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d111      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fa18 	bl	8003944 <RCCEx_PLL2_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003518:	e012      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3324      	adds	r3, #36	; 0x24
 800351e:	2102      	movs	r1, #2
 8003520:	4618      	mov	r0, r3
 8003522:	f000 fac1 	bl	8003aa8 <RCCEx_PLL3_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800352a:	e009      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	75fb      	strb	r3, [r7, #23]
      break;
 8003530:	e006      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003532:	bf00      	nop
 8003534:	e004      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003536:	bf00      	nop
 8003538:	e002      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800353a:	bf00      	nop
 800353c:	e000      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800353e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003540:	7dfb      	ldrb	r3, [r7, #23]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10c      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003554:	4901      	ldr	r1, [pc, #4]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003556:	4313      	orrs	r3, r2
 8003558:	658b      	str	r3, [r1, #88]	; 0x58
 800355a:	e003      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800355c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	2b00      	cmp	r3, #0
 800356e:	d04b      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003576:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800357a:	d02e      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800357c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003580:	d828      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003586:	d02a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358c:	d822      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800358e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003592:	d026      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003594:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003598:	d81c      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800359a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800359e:	d010      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80035a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035a4:	d816      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01d      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80035aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ae:	d111      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f9c4 	bl	8003944 <RCCEx_PLL2_Config>
 80035bc:	4603      	mov	r3, r0
 80035be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80035c0:	e012      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3324      	adds	r3, #36	; 0x24
 80035c6:	2102      	movs	r1, #2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fa6d 	bl	8003aa8 <RCCEx_PLL3_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80035d2:	e009      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	75fb      	strb	r3, [r7, #23]
      break;
 80035d8:	e006      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80035da:	bf00      	nop
 80035dc:	e004      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80035de:	bf00      	nop
 80035e0:	e002      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80035e2:	bf00      	nop
 80035e4:	e000      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80035e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80035ee:	4b9d      	ldr	r3, [pc, #628]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035fc:	4999      	ldr	r1, [pc, #612]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	658b      	str	r3, [r1, #88]	; 0x58
 8003602:	e001      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800361a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361e:	d10a      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3324      	adds	r3, #36	; 0x24
 8003624:	2102      	movs	r1, #2
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fa3e 	bl	8003aa8 <RCCEx_PLL3_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003636:	4b8b      	ldr	r3, [pc, #556]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003644:	4987      	ldr	r1, [pc, #540]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003646:	4313      	orrs	r3, r2
 8003648:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b00      	cmp	r3, #0
 8003654:	d01a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003660:	d10a      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3324      	adds	r3, #36	; 0x24
 8003666:	2102      	movs	r1, #2
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fa1d 	bl	8003aa8 <RCCEx_PLL3_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003678:	4b7a      	ldr	r3, [pc, #488]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003686:	4977      	ldr	r1, [pc, #476]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003688:	4313      	orrs	r3, r2
 800368a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d034      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800369e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036a2:	d01d      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80036a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036a8:	d817      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b2:	d009      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80036b4:	e011      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f941 	bl	8003944 <RCCEx_PLL2_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80036c6:	e00c      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3324      	adds	r3, #36	; 0x24
 80036cc:	2102      	movs	r1, #2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f9ea 	bl	8003aa8 <RCCEx_PLL3_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80036d8:	e003      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]
      break;
 80036de:	e000      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80036e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e2:	7dfb      	ldrb	r3, [r7, #23]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036e8:	4b5e      	ldr	r3, [pc, #376]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036f6:	495b      	ldr	r1, [pc, #364]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	658b      	str	r3, [r1, #88]	; 0x58
 80036fc:	e001      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d033      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003714:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003718:	d01c      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800371a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800371e:	d816      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003724:	d003      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800372a:	d007      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800372c:	e00f      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372e:	4b4d      	ldr	r3, [pc, #308]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	4a4c      	ldr	r2, [pc, #304]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003738:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800373a:	e00c      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3324      	adds	r3, #36	; 0x24
 8003740:	2101      	movs	r1, #1
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f9b0 	bl	8003aa8 <RCCEx_PLL3_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800374c:	e003      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	75fb      	strb	r3, [r7, #23]
      break;
 8003752:	e000      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800375c:	4b41      	ldr	r3, [pc, #260]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376a:	493e      	ldr	r1, [pc, #248]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800376c:	4313      	orrs	r3, r2
 800376e:	654b      	str	r3, [r1, #84]	; 0x54
 8003770:	e001      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d029      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800378a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378e:	d007      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003790:	e00f      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003792:	4b34      	ldr	r3, [pc, #208]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	4a33      	ldr	r2, [pc, #204]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800379e:	e00b      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3304      	adds	r3, #4
 80037a4:	2102      	movs	r1, #2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f8cc 	bl	8003944 <RCCEx_PLL2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80037b0:	e002      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	75fb      	strb	r3, [r7, #23]
      break;
 80037b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80037be:	4b29      	ldr	r3, [pc, #164]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	4926      	ldr	r1, [pc, #152]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037d0:	e001      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3324      	adds	r3, #36	; 0x24
 80037e6:	2102      	movs	r1, #2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f95d 	bl	8003aa8 <RCCEx_PLL3_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d033      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800380c:	d017      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800380e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003812:	d811      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003818:	d013      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800381a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800381e:	d80b      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d010      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003828:	d106      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003836:	e007      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
      break;
 800383c:	e004      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800383e:	bf00      	nop
 8003840:	e002      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003842:	bf00      	nop
 8003844:	e000      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003848:	7dfb      	ldrb	r3, [r7, #23]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10c      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800385a:	4902      	ldr	r1, [pc, #8]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800385c:	4313      	orrs	r3, r2
 800385e:	654b      	str	r3, [r1, #84]	; 0x54
 8003860:	e004      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003862:	bf00      	nop
 8003864:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003878:	4b31      	ldr	r3, [pc, #196]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800387a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	492e      	ldr	r1, [pc, #184]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003886:	4313      	orrs	r3, r2
 8003888:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003896:	4b2a      	ldr	r3, [pc, #168]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038a4:	4926      	ldr	r1, [pc, #152]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038b6:	4b22      	ldr	r3, [pc, #136]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038c2:	491f      	ldr	r1, [pc, #124]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00d      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038d4:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	4a19      	ldr	r2, [pc, #100]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038de:	6113      	str	r3, [r2, #16]
 80038e0:	4b17      	ldr	r3, [pc, #92]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80038ea:	4915      	ldr	r1, [pc, #84]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	da08      	bge.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003904:	490e      	ldr	r1, [pc, #56]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003906:	4313      	orrs	r3, r2
 8003908:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	4906      	ldr	r1, [pc, #24]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003926:	4313      	orrs	r3, r2
 8003928:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800392a:	7dbb      	ldrb	r3, [r7, #22]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	e000      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	58024400 	.word	0x58024400

08003944 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003952:	4b53      	ldr	r3, [pc, #332]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b03      	cmp	r3, #3
 800395c:	d101      	bne.n	8003962 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e099      	b.n	8003a96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003962:	4b4f      	ldr	r3, [pc, #316]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a4e      	ldr	r2, [pc, #312]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003968:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800396c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396e:	f7fd f9d3 	bl	8000d18 <HAL_GetTick>
 8003972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003974:	e008      	b.n	8003988 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003976:	f7fd f9cf 	bl	8000d18 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e086      	b.n	8003a96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003988:	4b45      	ldr	r3, [pc, #276]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f0      	bne.n	8003976 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003994:	4b42      	ldr	r3, [pc, #264]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	031b      	lsls	r3, r3, #12
 80039a2:	493f      	ldr	r1, [pc, #252]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	628b      	str	r3, [r1, #40]	; 0x28
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	025b      	lsls	r3, r3, #9
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	041b      	lsls	r3, r3, #16
 80039c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	061b      	lsls	r3, r3, #24
 80039d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039d8:	4931      	ldr	r1, [pc, #196]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80039de:	4b30      	ldr	r3, [pc, #192]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	492d      	ldr	r1, [pc, #180]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80039f0:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	f023 0220 	bic.w	r2, r3, #32
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	4928      	ldr	r1, [pc, #160]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003a02:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	4a26      	ldr	r2, [pc, #152]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a08:	f023 0310 	bic.w	r3, r3, #16
 8003a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a12:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <RCCEx_PLL2_Config+0x160>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	69d2      	ldr	r2, [r2, #28]
 8003a1a:	00d2      	lsls	r2, r2, #3
 8003a1c:	4920      	ldr	r1, [pc, #128]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a22:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	4a1e      	ldr	r2, [pc, #120]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a28:	f043 0310 	orr.w	r3, r3, #16
 8003a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d106      	bne.n	8003a42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a34:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	4a19      	ldr	r2, [pc, #100]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a40:	e00f      	b.n	8003a62 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d106      	bne.n	8003a56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a48:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a54:	e005      	b.n	8003a62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a56:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	4a11      	ldr	r2, [pc, #68]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003a62:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a6e:	f7fd f953 	bl	8000d18 <HAL_GetTick>
 8003a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a74:	e008      	b.n	8003a88 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a76:	f7fd f94f 	bl	8000d18 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e006      	b.n	8003a96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <RCCEx_PLL2_Config+0x15c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	58024400 	.word	0x58024400
 8003aa4:	ffff0007 	.word	0xffff0007

08003aa8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ab6:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d101      	bne.n	8003ac6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e099      	b.n	8003bfa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003ac6:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a4e      	ldr	r2, [pc, #312]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad2:	f7fd f921 	bl	8000d18 <HAL_GetTick>
 8003ad6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ad8:	e008      	b.n	8003aec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ada:	f7fd f91d 	bl	8000d18 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e086      	b.n	8003bfa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003aec:	4b45      	ldr	r3, [pc, #276]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f0      	bne.n	8003ada <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003af8:	4b42      	ldr	r3, [pc, #264]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	051b      	lsls	r3, r3, #20
 8003b06:	493f      	ldr	r1, [pc, #252]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	628b      	str	r3, [r1, #40]	; 0x28
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	025b      	lsls	r3, r3, #9
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	041b      	lsls	r3, r3, #16
 8003b2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	061b      	lsls	r3, r3, #24
 8003b38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b3c:	4931      	ldr	r1, [pc, #196]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b42:	4b30      	ldr	r3, [pc, #192]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	492d      	ldr	r1, [pc, #180]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003b54:	4b2b      	ldr	r3, [pc, #172]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	4928      	ldr	r1, [pc, #160]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b66:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	4a26      	ldr	r2, [pc, #152]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003b72:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b76:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <RCCEx_PLL3_Config+0x160>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	69d2      	ldr	r2, [r2, #28]
 8003b7e:	00d2      	lsls	r2, r2, #3
 8003b80:	4920      	ldr	r1, [pc, #128]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b86:	4b1f      	ldr	r3, [pc, #124]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	4a1e      	ldr	r2, [pc, #120]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	4a19      	ldr	r2, [pc, #100]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003b9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ba4:	e00f      	b.n	8003bc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d106      	bne.n	8003bba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003bac:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003bb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bb8:	e005      	b.n	8003bc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003bba:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	4a11      	ldr	r2, [pc, #68]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003bc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003bc6:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a0e      	ldr	r2, [pc, #56]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd2:	f7fd f8a1 	bl	8000d18 <HAL_GetTick>
 8003bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bd8:	e008      	b.n	8003bec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003bda:	f7fd f89d 	bl	8000d18 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e006      	b.n	8003bfa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <RCCEx_PLL3_Config+0x15c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0f0      	beq.n	8003bda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	58024400 	.word	0x58024400
 8003c08:	ffff0007 	.word	0xffff0007

08003c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e049      	b.n	8003cb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fc ff76 	bl	8000b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f000 f92e 	bl	8003eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIM_ConfigClockSource+0x1c>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e0dc      	b.n	8003e92 <HAL_TIM_ConfigClockSource+0x1d6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	4b6a      	ldr	r3, [pc, #424]	; (8003e9c <HAL_TIM_ConfigClockSource+0x1e0>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a64      	ldr	r2, [pc, #400]	; (8003ea0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	f000 80a9 	beq.w	8003e66 <HAL_TIM_ConfigClockSource+0x1aa>
 8003d14:	4a62      	ldr	r2, [pc, #392]	; (8003ea0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	f200 80ae 	bhi.w	8003e78 <HAL_TIM_ConfigClockSource+0x1bc>
 8003d1c:	4a61      	ldr	r2, [pc, #388]	; (8003ea4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	f000 80a1 	beq.w	8003e66 <HAL_TIM_ConfigClockSource+0x1aa>
 8003d24:	4a5f      	ldr	r2, [pc, #380]	; (8003ea4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	f200 80a6 	bhi.w	8003e78 <HAL_TIM_ConfigClockSource+0x1bc>
 8003d2c:	4a5e      	ldr	r2, [pc, #376]	; (8003ea8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	f000 8099 	beq.w	8003e66 <HAL_TIM_ConfigClockSource+0x1aa>
 8003d34:	4a5c      	ldr	r2, [pc, #368]	; (8003ea8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	f200 809e 	bhi.w	8003e78 <HAL_TIM_ConfigClockSource+0x1bc>
 8003d3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003d40:	f000 8091 	beq.w	8003e66 <HAL_TIM_ConfigClockSource+0x1aa>
 8003d44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003d48:	f200 8096 	bhi.w	8003e78 <HAL_TIM_ConfigClockSource+0x1bc>
 8003d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d50:	f000 8089 	beq.w	8003e66 <HAL_TIM_ConfigClockSource+0x1aa>
 8003d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d58:	f200 808e 	bhi.w	8003e78 <HAL_TIM_ConfigClockSource+0x1bc>
 8003d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d60:	d03e      	beq.n	8003de0 <HAL_TIM_ConfigClockSource+0x124>
 8003d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d66:	f200 8087 	bhi.w	8003e78 <HAL_TIM_ConfigClockSource+0x1bc>
 8003d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6e:	f000 8086 	beq.w	8003e7e <HAL_TIM_ConfigClockSource+0x1c2>
 8003d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d76:	d87f      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x1bc>
 8003d78:	2b70      	cmp	r3, #112	; 0x70
 8003d7a:	d01a      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0xf6>
 8003d7c:	2b70      	cmp	r3, #112	; 0x70
 8003d7e:	d87b      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x1bc>
 8003d80:	2b60      	cmp	r3, #96	; 0x60
 8003d82:	d050      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x16a>
 8003d84:	2b60      	cmp	r3, #96	; 0x60
 8003d86:	d877      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x1bc>
 8003d88:	2b50      	cmp	r3, #80	; 0x50
 8003d8a:	d03c      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0x14a>
 8003d8c:	2b50      	cmp	r3, #80	; 0x50
 8003d8e:	d873      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x1bc>
 8003d90:	2b40      	cmp	r3, #64	; 0x40
 8003d92:	d058      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x18a>
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d86f      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x1bc>
 8003d98:	2b30      	cmp	r3, #48	; 0x30
 8003d9a:	d064      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x1aa>
 8003d9c:	2b30      	cmp	r3, #48	; 0x30
 8003d9e:	d86b      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x1bc>
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d060      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x1aa>
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d867      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x1bc>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d05c      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x1aa>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d05a      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x1aa>
 8003db0:	e062      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6899      	ldr	r1, [r3, #8]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f000 f98b 	bl	80040dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	609a      	str	r2, [r3, #8]
      break;
 8003dde:	e04f      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6899      	ldr	r1, [r3, #8]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f000 f974 	bl	80040dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e02:	609a      	str	r2, [r3, #8]
      break;
 8003e04:	e03c      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f000 f8e4 	bl	8003fe0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2150      	movs	r1, #80	; 0x50
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f93e 	bl	80040a0 <TIM_ITRx_SetConfig>
      break;
 8003e24:	e02c      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6859      	ldr	r1, [r3, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f000 f903 	bl	800403e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2160      	movs	r1, #96	; 0x60
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 f92e 	bl	80040a0 <TIM_ITRx_SetConfig>
      break;
 8003e44:	e01c      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 f8c4 	bl	8003fe0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2140      	movs	r1, #64	; 0x40
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f91e 	bl	80040a0 <TIM_ITRx_SetConfig>
      break;
 8003e64:	e00c      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f000 f915 	bl	80040a0 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e003      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e7c:	e000      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8003e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	ffceff88 	.word	0xffceff88
 8003ea0:	00100040 	.word	0x00100040
 8003ea4:	00100030 	.word	0x00100030
 8003ea8:	00100020 	.word	0x00100020

08003eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a40      	ldr	r2, [pc, #256]	; (8003fc0 <TIM_Base_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eca:	d00f      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a3d      	ldr	r2, [pc, #244]	; (8003fc4 <TIM_Base_SetConfig+0x118>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a3c      	ldr	r2, [pc, #240]	; (8003fc8 <TIM_Base_SetConfig+0x11c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d007      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a3b      	ldr	r2, [pc, #236]	; (8003fcc <TIM_Base_SetConfig+0x120>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a3a      	ldr	r2, [pc, #232]	; (8003fd0 <TIM_Base_SetConfig+0x124>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d108      	bne.n	8003efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2f      	ldr	r2, [pc, #188]	; (8003fc0 <TIM_Base_SetConfig+0x114>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01f      	beq.n	8003f46 <TIM_Base_SetConfig+0x9a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0c:	d01b      	beq.n	8003f46 <TIM_Base_SetConfig+0x9a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2c      	ldr	r2, [pc, #176]	; (8003fc4 <TIM_Base_SetConfig+0x118>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d017      	beq.n	8003f46 <TIM_Base_SetConfig+0x9a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a2b      	ldr	r2, [pc, #172]	; (8003fc8 <TIM_Base_SetConfig+0x11c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <TIM_Base_SetConfig+0x9a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a2a      	ldr	r2, [pc, #168]	; (8003fcc <TIM_Base_SetConfig+0x120>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00f      	beq.n	8003f46 <TIM_Base_SetConfig+0x9a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a29      	ldr	r2, [pc, #164]	; (8003fd0 <TIM_Base_SetConfig+0x124>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00b      	beq.n	8003f46 <TIM_Base_SetConfig+0x9a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a28      	ldr	r2, [pc, #160]	; (8003fd4 <TIM_Base_SetConfig+0x128>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <TIM_Base_SetConfig+0x9a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a27      	ldr	r2, [pc, #156]	; (8003fd8 <TIM_Base_SetConfig+0x12c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_Base_SetConfig+0x9a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a26      	ldr	r2, [pc, #152]	; (8003fdc <TIM_Base_SetConfig+0x130>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d108      	bne.n	8003f58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a10      	ldr	r2, [pc, #64]	; (8003fc0 <TIM_Base_SetConfig+0x114>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00f      	beq.n	8003fa4 <TIM_Base_SetConfig+0xf8>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a12      	ldr	r2, [pc, #72]	; (8003fd0 <TIM_Base_SetConfig+0x124>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00b      	beq.n	8003fa4 <TIM_Base_SetConfig+0xf8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a11      	ldr	r2, [pc, #68]	; (8003fd4 <TIM_Base_SetConfig+0x128>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d007      	beq.n	8003fa4 <TIM_Base_SetConfig+0xf8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a10      	ldr	r2, [pc, #64]	; (8003fd8 <TIM_Base_SetConfig+0x12c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_Base_SetConfig+0xf8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a0f      	ldr	r2, [pc, #60]	; (8003fdc <TIM_Base_SetConfig+0x130>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d103      	bne.n	8003fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	615a      	str	r2, [r3, #20]
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	40000400 	.word	0x40000400
 8003fc8:	40000800 	.word	0x40000800
 8003fcc:	40000c00 	.word	0x40000c00
 8003fd0:	40010400 	.word	0x40010400
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	40014400 	.word	0x40014400
 8003fdc:	40014800 	.word	0x40014800

08003fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f023 0201 	bic.w	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f023 030a 	bic.w	r3, r3, #10
 800401c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800403e:	b480      	push	{r7}
 8004040:	b087      	sub	sp, #28
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f023 0210 	bic.w	r2, r3, #16
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004068:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	031b      	lsls	r3, r3, #12
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800407a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <TIM_ITRx_SetConfig+0x38>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	f043 0307 	orr.w	r3, r3, #7
 80040c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	609a      	str	r2, [r3, #8]
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	ffcfff8f 	.word	0xffcfff8f

080040dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	021a      	lsls	r2, r3, #8
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	431a      	orrs	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4313      	orrs	r3, r2
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	609a      	str	r2, [r3, #8]
}
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004130:	2302      	movs	r3, #2
 8004132:	e06d      	b.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a30      	ldr	r2, [pc, #192]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d004      	beq.n	8004168 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a2f      	ldr	r2, [pc, #188]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d108      	bne.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800416e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004180:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a20      	ldr	r2, [pc, #128]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d022      	beq.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a6:	d01d      	beq.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d018      	beq.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1c      	ldr	r2, [pc, #112]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d013      	beq.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1a      	ldr	r2, [pc, #104]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00e      	beq.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a15      	ldr	r2, [pc, #84]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d009      	beq.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a16      	ldr	r2, [pc, #88]	; (8004230 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d004      	beq.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a15      	ldr	r2, [pc, #84]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d10c      	bne.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400
 8004224:	40000400 	.word	0x40000400
 8004228:	40000800 	.word	0x40000800
 800422c:	40000c00 	.word	0x40000c00
 8004230:	40001800 	.word	0x40001800
 8004234:	40014000 	.word	0x40014000

08004238 <__libc_init_array>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4d0d      	ldr	r5, [pc, #52]	; (8004270 <__libc_init_array+0x38>)
 800423c:	4c0d      	ldr	r4, [pc, #52]	; (8004274 <__libc_init_array+0x3c>)
 800423e:	1b64      	subs	r4, r4, r5
 8004240:	10a4      	asrs	r4, r4, #2
 8004242:	2600      	movs	r6, #0
 8004244:	42a6      	cmp	r6, r4
 8004246:	d109      	bne.n	800425c <__libc_init_array+0x24>
 8004248:	4d0b      	ldr	r5, [pc, #44]	; (8004278 <__libc_init_array+0x40>)
 800424a:	4c0c      	ldr	r4, [pc, #48]	; (800427c <__libc_init_array+0x44>)
 800424c:	f000 f820 	bl	8004290 <_init>
 8004250:	1b64      	subs	r4, r4, r5
 8004252:	10a4      	asrs	r4, r4, #2
 8004254:	2600      	movs	r6, #0
 8004256:	42a6      	cmp	r6, r4
 8004258:	d105      	bne.n	8004266 <__libc_init_array+0x2e>
 800425a:	bd70      	pop	{r4, r5, r6, pc}
 800425c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004260:	4798      	blx	r3
 8004262:	3601      	adds	r6, #1
 8004264:	e7ee      	b.n	8004244 <__libc_init_array+0xc>
 8004266:	f855 3b04 	ldr.w	r3, [r5], #4
 800426a:	4798      	blx	r3
 800426c:	3601      	adds	r6, #1
 800426e:	e7f2      	b.n	8004256 <__libc_init_array+0x1e>
 8004270:	080042dc 	.word	0x080042dc
 8004274:	080042dc 	.word	0x080042dc
 8004278:	080042dc 	.word	0x080042dc
 800427c:	080042e0 	.word	0x080042e0

08004280 <memset>:
 8004280:	4402      	add	r2, r0
 8004282:	4603      	mov	r3, r0
 8004284:	4293      	cmp	r3, r2
 8004286:	d100      	bne.n	800428a <memset+0xa>
 8004288:	4770      	bx	lr
 800428a:	f803 1b01 	strb.w	r1, [r3], #1
 800428e:	e7f9      	b.n	8004284 <memset+0x4>

08004290 <_init>:
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	bf00      	nop
 8004294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004296:	bc08      	pop	{r3}
 8004298:	469e      	mov	lr, r3
 800429a:	4770      	bx	lr

0800429c <_fini>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	bf00      	nop
 80042a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a2:	bc08      	pop	{r3}
 80042a4:	469e      	mov	lr, r3
 80042a6:	4770      	bx	lr
