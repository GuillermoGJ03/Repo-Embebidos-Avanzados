
Ejercicio_3_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  0800a860  0800a860  0001a860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ace4  0800ace4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ace4  0800ace4  0001ace4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acec  0800acec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acec  0800acec  0001acec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acf0  0800acf0  0001acf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800acf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  240001e0  0800aed4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240003d4  0800aed4  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a351  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aea  00000000  00000000  0003a55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0003d050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b1b7  00000000  00000000  0003f7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198ef  00000000  00000000  0007a99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001869db  00000000  00000000  0009428e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021ac69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006694  00000000  00000000  0021acbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a848 	.word	0x0800a848

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800a848 	.word	0x0800a848

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007cc:	bf00      	nop
 80007ce:	4b47      	ldr	r3, [pc, #284]	; (80008ec <main+0x12c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <main+0x24>
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	60fa      	str	r2, [r7, #12]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dcf4      	bgt.n	80007ce <main+0xe>
  if ( timeout < 0 )
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da01      	bge.n	80007ee <main+0x2e>
  {
  Error_Handler();
 80007ea:	f000 fcab 	bl	8001144 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 ff33 	bl	8001658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f891 	bl	8000918 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007f6:	4b3d      	ldr	r3, [pc, #244]	; (80008ec <main+0x12c>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a3b      	ldr	r2, [pc, #236]	; (80008ec <main+0x12c>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b39      	ldr	r3, [pc, #228]	; (80008ec <main+0x12c>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000814:	2000      	movs	r0, #0
 8000816:	f001 fad5 	bl	8001dc4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f001 faeb 	bl	8001df8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000828:	bf00      	nop
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <main+0x12c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <main+0x80>
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	60fa      	str	r2, [r7, #12]
 800083c:	2b00      	cmp	r3, #0
 800083e:	dcf4      	bgt.n	800082a <main+0x6a>
if ( timeout < 0 )
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <main+0x8a>
{
Error_Handler();
 8000846:	f000 fc7d 	bl	8001144 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 fa65 	bl	8000d18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800084e:	f000 fa17 	bl	8000c80 <MX_USART3_UART_Init>
  MX_I2C4_Init();
 8000852:	f000 f8db 	bl	8000a0c <MX_I2C4_Init>
  MX_TIM2_Init();
 8000856:	f000 f9c5 	bl	8000be4 <MX_TIM2_Init>
  MX_TIM1_Init();
 800085a:	f000 f917 	bl	8000a8c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Revisión de conexión del MPU6050
  HAL_StatusTypeDef status;
  status = HAL_I2C_IsDeviceReady(&hi2c4, MPU6050_ADDR, 1, 3000);
 800085e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000862:	2201      	movs	r2, #1
 8000864:	21d0      	movs	r1, #208	; 0xd0
 8000866:	4822      	ldr	r0, [pc, #136]	; (80008f0 <main+0x130>)
 8000868:	f001 fd98 	bl	800239c <HAL_I2C_IsDeviceReady>
 800086c:	4603      	mov	r3, r0
 800086e:	72fb      	strb	r3, [r7, #11]
  if (status == HAL_OK) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d105      	bne.n	8000882 <main+0xc2>
 8000876:	2201      	movs	r2, #1
 8000878:	2101      	movs	r1, #1
 800087a:	481e      	ldr	r0, [pc, #120]	; (80008f4 <main+0x134>)
 800087c:	f001 fa6e 	bl	8001d5c <HAL_GPIO_WritePin>
 8000880:	e005      	b.n	800088e <main+0xce>
  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000888:	481a      	ldr	r0, [pc, #104]	; (80008f4 <main+0x134>)
 800088a:	f001 fa67 	bl	8001d5c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800088e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000892:	f000 ff73 	bl	800177c <HAL_Delay>

  // Prueba de comunicación UART
  uart_buf_len = sprintf(uart_buf, "MPU6050 test\r\n");
 8000896:	4918      	ldr	r1, [pc, #96]	; (80008f8 <main+0x138>)
 8000898:	4818      	ldr	r0, [pc, #96]	; (80008fc <main+0x13c>)
 800089a:	f007 fddb 	bl	8008454 <siprintf>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <main+0x140>)
 80008a4:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <main+0x140>)
 80008a8:	881a      	ldrh	r2, [r3, #0]
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	4913      	ldr	r1, [pc, #76]	; (80008fc <main+0x13c>)
 80008ae:	4815      	ldr	r0, [pc, #84]	; (8000904 <main+0x144>)
 80008b0:	f006 f8a6 	bl	8006a00 <HAL_UART_Transmit>

  // Inicialización del MPU6050
  MPU6050_init();
 80008b4:	f000 fac6 	bl	8000e44 <MPU6050_init>

  // Inicialización del PWM
  HAL_TIM_PWM_Init(&htim1);
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <main+0x148>)
 80008ba:	f004 fe30 	bl	800551e <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008be:	2100      	movs	r1, #0
 80008c0:	4811      	ldr	r0, [pc, #68]	; (8000908 <main+0x148>)
 80008c2:	f004 fe8d 	bl	80055e0 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 40;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <main+0x14c>)
 80008c8:	2228      	movs	r2, #40	; 0x28
 80008ca:	635a      	str	r2, [r3, #52]	; 0x34
  int cond = 1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	480e      	ldr	r0, [pc, #56]	; (8000910 <main+0x150>)
 80008d6:	f001 fa41 	bl	8001d5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2102      	movs	r1, #2
 80008de:	480c      	ldr	r0, [pc, #48]	; (8000910 <main+0x150>)
 80008e0:	f001 fa3c 	bl	8001d5c <HAL_GPIO_WritePin>

  // Inicialización de la interrupción por timer
  HAL_TIM_Base_Start_IT(&htim2);
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <main+0x154>)
 80008e6:	f004 fd73 	bl	80053d0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <main+0x12a>
 80008ec:	58024400 	.word	0x58024400
 80008f0:	240001fc 	.word	0x240001fc
 80008f4:	58020400 	.word	0x58020400
 80008f8:	0800a860 	.word	0x0800a860
 80008fc:	24000388 	.word	0x24000388
 8000900:	240003ba 	.word	0x240003ba
 8000904:	240002e0 	.word	0x240002e0
 8000908:	24000248 	.word	0x24000248
 800090c:	40010000 	.word	0x40010000
 8000910:	58020c00 	.word	0x58020c00
 8000914:	24000294 	.word	0x24000294

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09c      	sub	sp, #112	; 0x70
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	224c      	movs	r2, #76	; 0x4c
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f007 f94a 	bl	8007bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2220      	movs	r2, #32
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f007 f944 	bl	8007bc0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000938:	2004      	movs	r0, #4
 800093a:	f002 f975 	bl	8002c28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b30      	ldr	r3, [pc, #192]	; (8000a04 <SystemClock_Config+0xec>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	4a2f      	ldr	r2, [pc, #188]	; (8000a04 <SystemClock_Config+0xec>)
 8000948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800094c:	6193      	str	r3, [r2, #24]
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <SystemClock_Config+0xec>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	4b2b      	ldr	r3, [pc, #172]	; (8000a08 <SystemClock_Config+0xf0>)
 800095a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095c:	4a2a      	ldr	r2, [pc, #168]	; (8000a08 <SystemClock_Config+0xf0>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <SystemClock_Config+0xf0>)
 8000966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000970:	bf00      	nop
 8000972:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <SystemClock_Config+0xec>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800097a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800097e:	d1f8      	bne.n	8000972 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000980:	2301      	movs	r3, #1
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000984:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098a:	2302      	movs	r3, #2
 800098c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098e:	2302      	movs	r3, #2
 8000990:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000992:	2301      	movs	r3, #1
 8000994:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000996:	2378      	movs	r3, #120	; 0x78
 8000998:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800099a:	2302      	movs	r3, #2
 800099c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800099e:	2302      	movs	r3, #2
 80009a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009a6:	230c      	movs	r3, #12
 80009a8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 f990 	bl	8002cdc <HAL_RCC_OscConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009c2:	f000 fbbf 	bl	8001144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c6:	233f      	movs	r3, #63	; 0x3f
 80009c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ca:	2303      	movs	r3, #3
 80009cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009d2:	2308      	movs	r3, #8
 80009d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009d6:	2340      	movs	r3, #64	; 0x40
 80009d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009da:	2340      	movs	r3, #64	; 0x40
 80009dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009e4:	2340      	movs	r3, #64	; 0x40
 80009e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2104      	movs	r1, #4
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 fda3 	bl	8003538 <HAL_RCC_ClockConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009f8:	f000 fba4 	bl	8001144 <Error_Handler>
  }
}
 80009fc:	bf00      	nop
 80009fe:	3770      	adds	r7, #112	; 0x70
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	58024800 	.word	0x58024800
 8000a08:	58000400 	.word	0x58000400

08000a0c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a12:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <MX_I2C4_Init+0x78>)
 8000a14:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a18:	4a1b      	ldr	r2, [pc, #108]	; (8000a88 <MX_I2C4_Init+0x7c>)
 8000a1a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a46:	480e      	ldr	r0, [pc, #56]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a48:	f001 f9ea 	bl	8001e20 <HAL_I2C_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a52:	f000 fb77 	bl	8001144 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a5a:	f002 f84d 	bl	8002af8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a64:	f000 fb6e 	bl	8001144 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a6c:	f002 f88f 	bl	8002b8e <HAL_I2CEx_ConfigDigitalFilter>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a76:	f000 fb65 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	240001fc 	.word	0x240001fc
 8000a84:	58001c00 	.word	0x58001c00
 8000a88:	307075b1 	.word	0x307075b1

08000a8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09a      	sub	sp, #104	; 0x68
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	615a      	str	r2, [r3, #20]
 8000abe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	222c      	movs	r2, #44	; 0x2c
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f007 f87a 	bl	8007bc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000acc:	4b43      	ldr	r3, [pc, #268]	; (8000bdc <MX_TIM1_Init+0x150>)
 8000ace:	4a44      	ldr	r2, [pc, #272]	; (8000be0 <MX_TIM1_Init+0x154>)
 8000ad0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240;
 8000ad2:	4b42      	ldr	r3, [pc, #264]	; (8000bdc <MX_TIM1_Init+0x150>)
 8000ad4:	22f0      	movs	r2, #240	; 0xf0
 8000ad6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b40      	ldr	r3, [pc, #256]	; (8000bdc <MX_TIM1_Init+0x150>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000ade:	4b3f      	ldr	r3, [pc, #252]	; (8000bdc <MX_TIM1_Init+0x150>)
 8000ae0:	2264      	movs	r2, #100	; 0x64
 8000ae2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <MX_TIM1_Init+0x150>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aea:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <MX_TIM1_Init+0x150>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000af0:	4b3a      	ldr	r3, [pc, #232]	; (8000bdc <MX_TIM1_Init+0x150>)
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af6:	4839      	ldr	r0, [pc, #228]	; (8000bdc <MX_TIM1_Init+0x150>)
 8000af8:	f004 fc12 	bl	8005320 <HAL_TIM_Base_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b02:	f000 fb1f 	bl	8001144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b10:	4619      	mov	r1, r3
 8000b12:	4832      	ldr	r0, [pc, #200]	; (8000bdc <MX_TIM1_Init+0x150>)
 8000b14:	f005 f8a6 	bl	8005c64 <HAL_TIM_ConfigClockSource>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b1e:	f000 fb11 	bl	8001144 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b22:	482e      	ldr	r0, [pc, #184]	; (8000bdc <MX_TIM1_Init+0x150>)
 8000b24:	f004 fcfb 	bl	800551e <HAL_TIM_PWM_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b2e:	f000 fb09 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b42:	4619      	mov	r1, r3
 8000b44:	4825      	ldr	r0, [pc, #148]	; (8000bdc <MX_TIM1_Init+0x150>)
 8000b46:	f005 fde1 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000b50:	f000 faf8 	bl	8001144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b54:	2360      	movs	r3, #96	; 0x60
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	4818      	ldr	r0, [pc, #96]	; (8000bdc <MX_TIM1_Init+0x150>)
 8000b7a:	f004 ff5f 	bl	8005a3c <HAL_TIM_PWM_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000b84:	f000 fade 	bl	8001144 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <MX_TIM1_Init+0x150>)
 8000bbe:	f005 fe33 	bl	8006828 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000bc8:	f000 fabc 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bcc:	4803      	ldr	r0, [pc, #12]	; (8000bdc <MX_TIM1_Init+0x150>)
 8000bce:	f000 fb7d 	bl	80012cc <HAL_TIM_MspPostInit>

}
 8000bd2:	bf00      	nop
 8000bd4:	3768      	adds	r7, #104	; 0x68
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000248 	.word	0x24000248
 8000be0:	40010000 	.word	0x40010000

08000be4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <MX_TIM2_Init+0x98>)
 8000c04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 58592;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_TIM2_Init+0x98>)
 8000c0c:	f24e 42e0 	movw	r2, #58592	; 0xe4e0
 8000c10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_TIM2_Init+0x98>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64;
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_TIM2_Init+0x98>)
 8000c1a:	2240      	movs	r2, #64	; 0x40
 8000c1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_TIM2_Init+0x98>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_TIM2_Init+0x98>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c2a:	4814      	ldr	r0, [pc, #80]	; (8000c7c <MX_TIM2_Init+0x98>)
 8000c2c:	f004 fb78 	bl	8005320 <HAL_TIM_Base_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c36:	f000 fa85 	bl	8001144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <MX_TIM2_Init+0x98>)
 8000c48:	f005 f80c 	bl	8005c64 <HAL_TIM_ConfigClockSource>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c52:	f000 fa77 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <MX_TIM2_Init+0x98>)
 8000c64:	f005 fd52 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c6e:	f000 fa69 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	24000294 	.word	0x24000294

08000c80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <MX_USART3_UART_Init+0x94>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cc8:	4811      	ldr	r0, [pc, #68]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000cca:	f005 fe49 	bl	8006960 <HAL_UART_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cd4:	f000 fa36 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480d      	ldr	r0, [pc, #52]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000cdc:	f006 fe7c 	bl	80079d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ce6:	f000 fa2d 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cea:	2100      	movs	r1, #0
 8000cec:	4808      	ldr	r0, [pc, #32]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000cee:	f006 feb1 	bl	8007a54 <HAL_UARTEx_SetRxFifoThreshold>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cf8:	f000 fa24 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_USART3_UART_Init+0x90>)
 8000cfe:	f006 fe32 	bl	8007966 <HAL_UARTEx_DisableFifoMode>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f000 fa1c 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	240002e0 	.word	0x240002e0
 8000d14:	40004800 	.word	0x40004800

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08c      	sub	sp, #48	; 0x30
 8000d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	4b42      	ldr	r3, [pc, #264]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	4a40      	ldr	r2, [pc, #256]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3e:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4c:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	4a39      	ldr	r2, [pc, #228]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5c:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	4a31      	ldr	r2, [pc, #196]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7a:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d88:	4b2b      	ldr	r3, [pc, #172]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8e:	4a2a      	ldr	r2, [pc, #168]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000d90:	f043 0320 	orr.w	r3, r3, #32
 8000d94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9e:	f003 0320 	and.w	r3, r3, #32
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da6:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_GPIO_Init+0x120>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2101      	movs	r1, #1
 8000de6:	4815      	ldr	r0, [pc, #84]	; (8000e3c <MX_GPIO_Init+0x124>)
 8000de8:	f000 ffb8 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2103      	movs	r1, #3
 8000df0:	4813      	ldr	r0, [pc, #76]	; (8000e40 <MX_GPIO_Init+0x128>)
 8000df2:	f000 ffb3 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e02:	2302      	movs	r3, #2
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <MX_GPIO_Init+0x124>)
 8000e0e:	f000 fdf5 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e12:	2303      	movs	r3, #3
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_GPIO_Init+0x128>)
 8000e2a:	f000 fde7 	bl	80019fc <HAL_GPIO_Init>

}
 8000e2e:	bf00      	nop
 8000e30:	3730      	adds	r7, #48	; 0x30
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	58024400 	.word	0x58024400
 8000e3c:	58020400 	.word	0x58020400
 8000e40:	58020c00 	.word	0x58020c00

08000e44 <MPU6050_init>:

/* USER CODE BEGIN 4 */
void MPU6050_init(){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 3000);
 8000e4a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	2301      	movs	r3, #1
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <MPU6050_init+0xd4>)
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	2275      	movs	r2, #117	; 0x75
 8000e5c:	21d0      	movs	r1, #208	; 0xd0
 8000e5e:	482f      	ldr	r0, [pc, #188]	; (8000f1c <MPU6050_init+0xd8>)
 8000e60:	f001 f982 	bl	8002168 <HAL_I2C_Mem_Read>
	uart_buf_len = sprintf(uart_buf, "Dirección: %u \r\n", check);
 8000e64:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <MPU6050_init+0xd4>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	492d      	ldr	r1, [pc, #180]	; (8000f20 <MPU6050_init+0xdc>)
 8000e6c:	482d      	ldr	r0, [pc, #180]	; (8000f24 <MPU6050_init+0xe0>)
 8000e6e:	f007 faf1 	bl	8008454 <siprintf>
 8000e72:	4603      	mov	r3, r0
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <MPU6050_init+0xe4>)
 8000e78:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <MPU6050_init+0xe4>)
 8000e7c:	881a      	ldrh	r2, [r3, #0]
 8000e7e:	2364      	movs	r3, #100	; 0x64
 8000e80:	4928      	ldr	r1, [pc, #160]	; (8000f24 <MPU6050_init+0xe0>)
 8000e82:	482a      	ldr	r0, [pc, #168]	; (8000f2c <MPU6050_init+0xe8>)
 8000e84:	f005 fdbc 	bl	8006a00 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000e88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e8c:	f000 fc76 	bl	800177c <HAL_Delay>

	data = 0x00;
 8000e90:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <MPU6050_init+0xec>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 3000);
 8000e96:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000e9a:	9302      	str	r3, [sp, #8]
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <MPU6050_init+0xec>)
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	226b      	movs	r2, #107	; 0x6b
 8000ea8:	21d0      	movs	r1, #208	; 0xd0
 8000eaa:	481c      	ldr	r0, [pc, #112]	; (8000f1c <MPU6050_init+0xd8>)
 8000eac:	f001 f848 	bl	8001f40 <HAL_I2C_Mem_Write>
	data = 0b10000011;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <MPU6050_init+0xec>)
 8000eb2:	2283      	movs	r2, #131	; 0x83
 8000eb4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, SMPLRT_DIV, 1, &data, 1, 3000);
 8000eb6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MPU6050_init+0xec>)
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2219      	movs	r2, #25
 8000ec8:	21d0      	movs	r1, #208	; 0xd0
 8000eca:	4814      	ldr	r0, [pc, #80]	; (8000f1c <MPU6050_init+0xd8>)
 8000ecc:	f001 f838 	bl	8001f40 <HAL_I2C_Mem_Write>
	data = 0x00;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MPU6050_init+0xec>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, GYRO_CONFIG, 1, &data, 1, 3000);
 8000ed6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	2301      	movs	r3, #1
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <MPU6050_init+0xec>)
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	221b      	movs	r2, #27
 8000ee8:	21d0      	movs	r1, #208	; 0xd0
 8000eea:	480c      	ldr	r0, [pc, #48]	; (8000f1c <MPU6050_init+0xd8>)
 8000eec:	f001 f828 	bl	8001f40 <HAL_I2C_Mem_Write>
	data = 0x00;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MPU6050_init+0xec>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, ACCEL_CONFIG, 1, &data, 1, 3000);
 8000ef6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	2301      	movs	r3, #1
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MPU6050_init+0xec>)
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	221c      	movs	r2, #28
 8000f08:	21d0      	movs	r1, #208	; 0xd0
 8000f0a:	4804      	ldr	r0, [pc, #16]	; (8000f1c <MPU6050_init+0xd8>)
 8000f0c:	f001 f818 	bl	8001f40 <HAL_I2C_Mem_Write>

}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	24000370 	.word	0x24000370
 8000f1c:	240001fc 	.word	0x240001fc
 8000f20:	0800a870 	.word	0x0800a870
 8000f24:	24000388 	.word	0x24000388
 8000f28:	240003ba 	.word	0x240003ba
 8000f2c:	240002e0 	.word	0x240002e0
 8000f30:	24000371 	.word	0x24000371
 8000f34:	00000000 	.word	0x00000000

08000f38 <MPU6050_read_gyro>:

void MPU6050_read_gyro(void){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af04      	add	r7, sp, #16
	uint8_t read_gyro[6];

	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, GYRO_XOUT_H, 1, read_gyro, 6, 3000);
 8000f3e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	2306      	movs	r3, #6
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	463b      	mov	r3, r7
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	2243      	movs	r2, #67	; 0x43
 8000f50:	21d0      	movs	r1, #208	; 0xd0
 8000f52:	482b      	ldr	r0, [pc, #172]	; (8001000 <MPU6050_read_gyro+0xc8>)
 8000f54:	f001 f908 	bl	8002168 <HAL_I2C_Mem_Read>

	gyr_X_read = (int16_t)(read_gyro[0] << 8 | read_gyro[1]);
 8000f58:	783b      	ldrb	r3, [r7, #0]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	787b      	ldrb	r3, [r7, #1]
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MPU6050_read_gyro+0xcc>)
 8000f68:	801a      	strh	r2, [r3, #0]
	gyr_Y_read = (int16_t)(read_gyro[2] << 8 | read_gyro[3]);
 8000f6a:	78bb      	ldrb	r3, [r7, #2]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <MPU6050_read_gyro+0xd0>)
 8000f7a:	801a      	strh	r2, [r3, #0]
	gyr_Z_read = (int16_t)(read_gyro[4] << 8 | read_gyro[5]);
 8000f7c:	793b      	ldrb	r3, [r7, #4]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	797b      	ldrb	r3, [r7, #5]
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <MPU6050_read_gyro+0xd4>)
 8000f8c:	801a      	strh	r2, [r3, #0]

	gyr_X = gyr_X_read/131.0;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MPU6050_read_gyro+0xcc>)
 8000f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f9c:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8000ff8 <MPU6050_read_gyro+0xc0>
 8000fa0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fa4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MPU6050_read_gyro+0xd8>)
 8000faa:	edc3 7a00 	vstr	s15, [r3]
	gyr_Y = gyr_Y_read/131.0;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MPU6050_read_gyro+0xd0>)
 8000fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fbc:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8000ff8 <MPU6050_read_gyro+0xc0>
 8000fc0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fc4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MPU6050_read_gyro+0xdc>)
 8000fca:	edc3 7a00 	vstr	s15, [r3]
	gyr_Z = gyr_Z_read/131.0;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MPU6050_read_gyro+0xd4>)
 8000fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fdc:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8000ff8 <MPU6050_read_gyro+0xc0>
 8000fe0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fe4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MPU6050_read_gyro+0xe0>)
 8000fea:	edc3 7a00 	vstr	s15, [r3]
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40606000 	.word	0x40606000
 8001000:	240001fc 	.word	0x240001fc
 8001004:	24000372 	.word	0x24000372
 8001008:	24000374 	.word	0x24000374
 800100c:	24000376 	.word	0x24000376
 8001010:	24000378 	.word	0x24000378
 8001014:	2400037c 	.word	0x2400037c
 8001018:	24000380 	.word	0x24000380

0800101c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a3a      	ldr	r2, [pc, #232]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d16c      	bne.n	8001106 <HAL_TIM_PeriodElapsedCallback+0xea>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800102c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001030:	4838      	ldr	r0, [pc, #224]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001032:	f000 feac 	bl	8001d8e <HAL_GPIO_TogglePin>
		MPU6050_read_gyro();
 8001036:	f7ff ff7f 	bl	8000f38 <MPU6050_read_gyro>

		uart_buf_len = sprintf(uart_buf, "GyrX = %.5f °/s \r\n", gyr_X);
 800103a:	4b37      	ldr	r3, [pc, #220]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001044:	ec53 2b17 	vmov	r2, r3, d7
 8001048:	4934      	ldr	r1, [pc, #208]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x100>)
 800104a:	4835      	ldr	r0, [pc, #212]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800104c:	f007 fa02 	bl	8008454 <siprintf>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	4b33      	ldr	r3, [pc, #204]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001056:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001058:	4b32      	ldr	r3, [pc, #200]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800105a:	881a      	ldrh	r2, [r3, #0]
 800105c:	2364      	movs	r3, #100	; 0x64
 800105e:	4930      	ldr	r1, [pc, #192]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001060:	4831      	ldr	r0, [pc, #196]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001062:	f005 fccd 	bl	8006a00 <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "GyrY = %.5f °/s \r\n", gyr_Y);
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001070:	ec53 2b17 	vmov	r2, r3, d7
 8001074:	492e      	ldr	r1, [pc, #184]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001076:	482a      	ldr	r0, [pc, #168]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001078:	f007 f9ec 	bl	8008454 <siprintf>
 800107c:	4603      	mov	r3, r0
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001082:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001084:	4b27      	ldr	r3, [pc, #156]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001086:	881a      	ldrh	r2, [r3, #0]
 8001088:	2364      	movs	r3, #100	; 0x64
 800108a:	4925      	ldr	r1, [pc, #148]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800108c:	4826      	ldr	r0, [pc, #152]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800108e:	f005 fcb7 	bl	8006a00 <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "GyrZ = %.5f °/s \r\n\n", gyr_Z);
 8001092:	4b28      	ldr	r3, [pc, #160]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800109c:	ec53 2b17 	vmov	r2, r3, d7
 80010a0:	4925      	ldr	r1, [pc, #148]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80010a2:	481f      	ldr	r0, [pc, #124]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010a4:	f007 f9d6 	bl	8008454 <siprintf>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010ae:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010b2:	881a      	ldrh	r2, [r3, #0]
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	491a      	ldr	r1, [pc, #104]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010b8:	481b      	ldr	r0, [pc, #108]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80010ba:	f005 fca1 	bl	8006a00 <HAL_UART_Transmit>

		n_muestras++;
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80010c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	3301      	adds	r3, #1
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80010ce:	801a      	strh	r2, [r3, #0]
		if(n_muestras == 128){
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80010d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d6:	2b80      	cmp	r3, #128	; 0x80
 80010d8:	d115      	bne.n	8001106 <HAL_TIM_PeriodElapsedCallback+0xea>
			uart_buf_len = sprintf(uart_buf, "Muestras: %u", n_muestras);
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4917      	ldr	r1, [pc, #92]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80010e4:	480e      	ldr	r0, [pc, #56]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010e6:	f007 f9b5 	bl	8008454 <siprintf>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010f0:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010f4:	881a      	ldrh	r2, [r3, #0]
 80010f6:	2364      	movs	r3, #100	; 0x64
 80010f8:	4909      	ldr	r1, [pc, #36]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010fa:	480b      	ldr	r0, [pc, #44]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80010fc:	f005 fc80 	bl	8006a00 <HAL_UART_Transmit>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001102:	f004 f9dd 	bl	80054c0 <HAL_TIM_Base_Stop_IT>
		}

	}
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	24000294 	.word	0x24000294
 8001114:	58020400 	.word	0x58020400
 8001118:	24000378 	.word	0x24000378
 800111c:	0800a884 	.word	0x0800a884
 8001120:	24000388 	.word	0x24000388
 8001124:	240003ba 	.word	0x240003ba
 8001128:	240002e0 	.word	0x240002e0
 800112c:	2400037c 	.word	0x2400037c
 8001130:	0800a898 	.word	0x0800a898
 8001134:	24000380 	.word	0x24000380
 8001138:	0800a8ac 	.word	0x0800a8ac
 800113c:	24000384 	.word	0x24000384
 8001140:	0800a8c4 	.word	0x0800a8c4

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	e7fe      	b.n	800114c <Error_Handler+0x8>
	...

08001150 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_MspInit+0x30>)
 8001158:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800115c:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_MspInit+0x30>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_MspInit+0x30>)
 8001168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	58024400 	.word	0x58024400

08001184 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0b8      	sub	sp, #224	; 0xe0
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	22bc      	movs	r2, #188	; 0xbc
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f006 fd0b 	bl	8007bc0 <memset>
  if(hi2c->Instance==I2C4)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a25      	ldr	r2, [pc, #148]	; (8001244 <HAL_I2C_MspInit+0xc0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d142      	bne.n	800123a <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80011b4:	2310      	movs	r3, #16
 80011b6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fd44 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011ce:	f7ff ffb9 	bl	8001144 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <HAL_I2C_MspInit+0xc4>)
 80011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <HAL_I2C_MspInit+0xc4>)
 80011da:	f043 0320 	orr.w	r3, r3, #32
 80011de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_I2C_MspInit+0xc4>)
 80011e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e8:	f003 0320 	and.w	r3, r3, #32
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011f0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f8:	2312      	movs	r3, #18
 80011fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800120a:	2304      	movs	r3, #4
 800120c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001210:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	; (800124c <HAL_I2C_MspInit+0xc8>)
 8001218:	f000 fbf0 	bl	80019fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_I2C_MspInit+0xc4>)
 800121e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <HAL_I2C_MspInit+0xc4>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001228:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_I2C_MspInit+0xc4>)
 800122e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	37e0      	adds	r7, #224	; 0xe0
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	58001c00 	.word	0x58001c00
 8001248:	58024400 	.word	0x58024400
 800124c:	58021400 	.word	0x58021400

08001250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_TIM_Base_MspInit+0x74>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10f      	bne.n	8001282 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_TIM_Base_MspInit+0x78>)
 8001264:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001268:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <HAL_TIM_Base_MspInit+0x78>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_TIM_Base_MspInit+0x78>)
 8001274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001280:	e01b      	b.n	80012ba <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM2)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800128a:	d116      	bne.n	80012ba <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_TIM_Base_MspInit+0x78>)
 800128e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001292:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <HAL_TIM_Base_MspInit+0x78>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_TIM_Base_MspInit+0x78>)
 800129e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	201c      	movs	r0, #28
 80012b0:	f000 fb6f 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012b4:	201c      	movs	r0, #28
 80012b6:	f000 fb86 	bl	80019c6 <HAL_NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40010000 	.word	0x40010000
 80012c8:	58024400 	.word	0x58024400

080012cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a13      	ldr	r2, [pc, #76]	; (8001338 <HAL_TIM_MspPostInit+0x6c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d11f      	bne.n	800132e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_TIM_MspPostInit+0x70>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f4:	4a11      	ldr	r2, [pc, #68]	; (800133c <HAL_TIM_MspPostInit+0x70>)
 80012f6:	f043 0310 	orr.w	r3, r3, #16
 80012fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_TIM_MspPostInit+0x70>)
 8001300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800130c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001310:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800131e:	2301      	movs	r3, #1
 8001320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_TIM_MspPostInit+0x74>)
 800132a:	f000 fb67 	bl	80019fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40010000 	.word	0x40010000
 800133c:	58024400 	.word	0x58024400
 8001340:	58021000 	.word	0x58021000

08001344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0b8      	sub	sp, #224	; 0xe0
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	22bc      	movs	r2, #188	; 0xbc
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f006 fc2b 	bl	8007bc0 <memset>
  if(huart->Instance==USART3)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a25      	ldr	r2, [pc, #148]	; (8001404 <HAL_UART_MspInit+0xc0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d142      	bne.n	80013fa <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001374:	2302      	movs	r3, #2
 8001376:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4618      	mov	r0, r3
 8001384:	f002 fc64 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800138e:	f7ff fed9 	bl	8001144 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_UART_MspInit+0xc4>)
 8001394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <HAL_UART_MspInit+0xc4>)
 800139a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_UART_MspInit+0xc4>)
 80013a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_UART_MspInit+0xc4>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	4a14      	ldr	r2, [pc, #80]	; (8001408 <HAL_UART_MspInit+0xc4>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_UART_MspInit+0xc4>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e8:	2307      	movs	r3, #7
 80013ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_UART_MspInit+0xc8>)
 80013f6:	f000 fb01 	bl	80019fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	37e0      	adds	r7, #224	; 0xe0
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40004800 	.word	0x40004800
 8001408:	58024400 	.word	0x58024400
 800140c:	58020c00 	.word	0x58020c00

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145c:	f000 f96e 	bl	800173c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <TIM2_IRQHandler+0x10>)
 800146a:	f004 f9c7 	bl	80057fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	24000294 	.word	0x24000294

08001478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	return 1;
 800147c:	2301      	movs	r3, #1
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <_kill>:

int _kill(int pid, int sig)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001492:	f006 fb6b 	bl	8007b6c <__errno>
 8001496:	4603      	mov	r3, r0
 8001498:	2216      	movs	r2, #22
 800149a:	601a      	str	r2, [r3, #0]
	return -1;
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_exit>:

void _exit (int status)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ffe7 	bl	8001488 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ba:	e7fe      	b.n	80014ba <_exit+0x12>

080014bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	e00a      	b.n	80014e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ce:	f3af 8000 	nop.w
 80014d2:	4601      	mov	r1, r0
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	60ba      	str	r2, [r7, #8]
 80014da:	b2ca      	uxtb	r2, r1
 80014dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dbf0      	blt.n	80014ce <_read+0x12>
	}

return len;
 80014ec:	687b      	ldr	r3, [r7, #4]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	e009      	b.n	800151c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	dbf1      	blt.n	8001508 <_write+0x12>
	}
	return len;
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_close>:

int _close(int file)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
	return -1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001556:	605a      	str	r2, [r3, #4]
	return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <_isatty>:

int _isatty(int file)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
	return 1;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
	return 0;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a0:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <_sbrk+0x5c>)
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <_sbrk+0x60>)
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <_sbrk+0x64>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <_sbrk+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d207      	bcs.n	80015d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c8:	f006 fad0 	bl	8007b6c <__errno>
 80015cc:	4603      	mov	r3, r0
 80015ce:	220c      	movs	r2, #12
 80015d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	e009      	b.n	80015ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <_sbrk+0x64>)
 80015e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	24080000 	.word	0x24080000
 80015f8:	00000400 	.word	0x00000400
 80015fc:	240003bc 	.word	0x240003bc
 8001600:	240003d8 	.word	0x240003d8

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001608:	f7ff f844 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160e:	490d      	ldr	r1, [pc, #52]	; (8001644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001624:	4c0a      	ldr	r4, [pc, #40]	; (8001650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001632:	f006 faa1 	bl	8007b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7ff f8c3 	bl	80007c0 <main>
  bx  lr
 800163a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001640:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001644:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001648:	0800acf4 	.word	0x0800acf4
  ldr r2, =_sbss
 800164c:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001650:	240003d4 	.word	0x240003d4

08001654 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC3_IRQHandler>
	...

08001658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165e:	2003      	movs	r0, #3
 8001660:	f000 f98c 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001664:	f002 f91e 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8001668:	4602      	mov	r2, r0
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_Init+0x68>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	0a1b      	lsrs	r3, r3, #8
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	4913      	ldr	r1, [pc, #76]	; (80016c4 <HAL_Init+0x6c>)
 8001676:	5ccb      	ldrb	r3, [r1, r3]
 8001678:	f003 031f 	and.w	r3, r3, #31
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
 8001680:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_Init+0x68>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <HAL_Init+0x6c>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	fa22 f303 	lsr.w	r3, r2, r3
 8001698:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_Init+0x70>)
 800169a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_Init+0x74>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 f814 	bl	80016d0 <HAL_InitTick>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e002      	b.n	80016b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016b2:	f7ff fd4d 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	58024400 	.word	0x58024400
 80016c4:	0800a8d4 	.word	0x0800a8d4
 80016c8:	24000004 	.word	0x24000004
 80016cc:	24000000 	.word	0x24000000

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_InitTick+0x60>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e021      	b.n	8001728 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_InitTick+0x64>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_InitTick+0x60>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f971 	bl	80019e2 <HAL_SYSTICK_Config>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e00e      	b.n	8001728 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d80a      	bhi.n	8001726 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001710:	2200      	movs	r2, #0
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f000 f93b 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <HAL_InitTick+0x68>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	e000      	b.n	8001728 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2400000c 	.word	0x2400000c
 8001734:	24000000 	.word	0x24000000
 8001738:	24000008 	.word	0x24000008

0800173c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_IncTick+0x20>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x24>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_IncTick+0x24>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2400000c 	.word	0x2400000c
 8001760:	240003c0 	.word	0x240003c0

08001764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_GetTick+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	240003c0 	.word	0x240003c0

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff ffee 	bl	8001764 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_Delay+0x44>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a2:	bf00      	nop
 80017a4:	f7ff ffde 	bl	8001764 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2400000c 	.word	0x2400000c

080017c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <HAL_GetREVID+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0c1b      	lsrs	r3, r3, #16
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	5c001000 	.word	0x5c001000

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <__NVIC_SetPriorityGrouping+0x40>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	4313      	orrs	r3, r2
 8001808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <__NVIC_SetPriorityGrouping+0x40>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60d3      	str	r3, [r2, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00
 8001820:	05fa0000 	.word	0x05fa0000

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800184a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db0b      	blt.n	800186a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	4907      	ldr	r1, [pc, #28]	; (8001878 <__NVIC_EnableIRQ+0x38>)
 800185a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f7ff ff8e 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff29 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff40 	bl	8001824 <__NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff90 	bl	80018d0 <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff5f 	bl	800187c <__NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff33 	bl	8001840 <__NVIC_EnableIRQ>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffa4 	bl	8001938 <SysTick_Config>
 80019f0:	4603      	mov	r3, r0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a0a:	4b89      	ldr	r3, [pc, #548]	; (8001c30 <HAL_GPIO_Init+0x234>)
 8001a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a0e:	e194      	b.n	8001d3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2101      	movs	r1, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8186 	beq.w	8001d34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d005      	beq.n	8001a40 <HAL_GPIO_Init+0x44>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d130      	bne.n	8001aa2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a76:	2201      	movs	r2, #1
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	091b      	lsrs	r3, r3, #4
 8001a8c:	f003 0201 	and.w	r2, r3, #1
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d017      	beq.n	8001ade <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d123      	bne.n	8001b32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	08da      	lsrs	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3208      	adds	r2, #8
 8001af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	69b9      	ldr	r1, [r7, #24]
 8001b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0203 	and.w	r2, r3, #3
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80e0 	beq.w	8001d34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b74:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <HAL_GPIO_Init+0x238>)
 8001b76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b7a:	4a2e      	ldr	r2, [pc, #184]	; (8001c34 <HAL_GPIO_Init+0x238>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_GPIO_Init+0x238>)
 8001b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b92:	4a29      	ldr	r2, [pc, #164]	; (8001c38 <HAL_GPIO_Init+0x23c>)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	220f      	movs	r2, #15
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	; (8001c3c <HAL_GPIO_Init+0x240>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d052      	beq.n	8001c64 <HAL_GPIO_Init+0x268>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <HAL_GPIO_Init+0x244>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d031      	beq.n	8001c2a <HAL_GPIO_Init+0x22e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a1e      	ldr	r2, [pc, #120]	; (8001c44 <HAL_GPIO_Init+0x248>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d02b      	beq.n	8001c26 <HAL_GPIO_Init+0x22a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <HAL_GPIO_Init+0x24c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d025      	beq.n	8001c22 <HAL_GPIO_Init+0x226>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <HAL_GPIO_Init+0x250>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01f      	beq.n	8001c1e <HAL_GPIO_Init+0x222>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <HAL_GPIO_Init+0x254>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d019      	beq.n	8001c1a <HAL_GPIO_Init+0x21e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <HAL_GPIO_Init+0x258>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d013      	beq.n	8001c16 <HAL_GPIO_Init+0x21a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_GPIO_Init+0x25c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00d      	beq.n	8001c12 <HAL_GPIO_Init+0x216>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <HAL_GPIO_Init+0x260>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d007      	beq.n	8001c0e <HAL_GPIO_Init+0x212>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_GPIO_Init+0x264>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_GPIO_Init+0x20e>
 8001c06:	2309      	movs	r3, #9
 8001c08:	e02d      	b.n	8001c66 <HAL_GPIO_Init+0x26a>
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	e02b      	b.n	8001c66 <HAL_GPIO_Init+0x26a>
 8001c0e:	2308      	movs	r3, #8
 8001c10:	e029      	b.n	8001c66 <HAL_GPIO_Init+0x26a>
 8001c12:	2307      	movs	r3, #7
 8001c14:	e027      	b.n	8001c66 <HAL_GPIO_Init+0x26a>
 8001c16:	2306      	movs	r3, #6
 8001c18:	e025      	b.n	8001c66 <HAL_GPIO_Init+0x26a>
 8001c1a:	2305      	movs	r3, #5
 8001c1c:	e023      	b.n	8001c66 <HAL_GPIO_Init+0x26a>
 8001c1e:	2304      	movs	r3, #4
 8001c20:	e021      	b.n	8001c66 <HAL_GPIO_Init+0x26a>
 8001c22:	2303      	movs	r3, #3
 8001c24:	e01f      	b.n	8001c66 <HAL_GPIO_Init+0x26a>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e01d      	b.n	8001c66 <HAL_GPIO_Init+0x26a>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e01b      	b.n	8001c66 <HAL_GPIO_Init+0x26a>
 8001c2e:	bf00      	nop
 8001c30:	58000080 	.word	0x58000080
 8001c34:	58024400 	.word	0x58024400
 8001c38:	58000400 	.word	0x58000400
 8001c3c:	58020000 	.word	0x58020000
 8001c40:	58020400 	.word	0x58020400
 8001c44:	58020800 	.word	0x58020800
 8001c48:	58020c00 	.word	0x58020c00
 8001c4c:	58021000 	.word	0x58021000
 8001c50:	58021400 	.word	0x58021400
 8001c54:	58021800 	.word	0x58021800
 8001c58:	58021c00 	.word	0x58021c00
 8001c5c:	58022000 	.word	0x58022000
 8001c60:	58022400 	.word	0x58022400
 8001c64:	2300      	movs	r3, #0
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	f002 0203 	and.w	r2, r2, #3
 8001c6c:	0092      	lsls	r2, r2, #2
 8001c6e:	4093      	lsls	r3, r2
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c76:	4938      	ldr	r1, [pc, #224]	; (8001d58 <HAL_GPIO_Init+0x35c>)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001cd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	3301      	adds	r3, #1
 8001d38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f47f ae63 	bne.w	8001a10 <HAL_GPIO_Init+0x14>
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	bf00      	nop
 8001d4e:	3724      	adds	r7, #36	; 0x24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	58000400 	.word	0x58000400

08001d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d6c:	787b      	ldrb	r3, [r7, #1]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d78:	e003      	b.n	8001d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d7a:	887b      	ldrh	r3, [r7, #2]
 8001d7c:	041a      	lsls	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	619a      	str	r2, [r3, #24]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001da0:	887a      	ldrh	r2, [r7, #2]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4013      	ands	r3, r2
 8001da6:	041a      	lsls	r2, r3, #16
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	887b      	ldrh	r3, [r7, #2]
 8001dae:	400b      	ands	r3, r1
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001dcc:	4a08      	ldr	r2, [pc, #32]	; (8001df0 <HAL_HSEM_FastTake+0x2c>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3320      	adds	r3, #32
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <HAL_HSEM_FastTake+0x30>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e000      	b.n	8001de2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	58026400 	.word	0x58026400
 8001df4:	80000300 	.word	0x80000300

08001df8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001e02:	4906      	ldr	r1, [pc, #24]	; (8001e1c <HAL_HSEM_Release+0x24>)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	58026400 	.word	0x58026400

08001e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e07f      	b.n	8001f32 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff f99c 	bl	8001184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2224      	movs	r2, #36	; 0x24
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d107      	bne.n	8001e9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	e006      	b.n	8001ea8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ea6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d104      	bne.n	8001eba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_I2C_Init+0x11c>)
 8001ec6:	430b      	orrs	r3, r1
 8001ec8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69d9      	ldr	r1, [r3, #28]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	02008000 	.word	0x02008000

08001f40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	817b      	strh	r3, [r7, #10]
 8001f52:	460b      	mov	r3, r1
 8001f54:	813b      	strh	r3, [r7, #8]
 8001f56:	4613      	mov	r3, r2
 8001f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	f040 80f9 	bne.w	800215a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <HAL_I2C_Mem_Write+0x34>
 8001f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0ed      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_I2C_Mem_Write+0x4e>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e0e6      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f96:	f7ff fbe5 	bl	8001764 <HAL_GetTick>
 8001f9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2319      	movs	r3, #25
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 fbcb 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0d1      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2221      	movs	r2, #33	; 0x21
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2240      	movs	r2, #64	; 0x40
 8001fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a3a      	ldr	r2, [r7, #32]
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fe0:	88f8      	ldrh	r0, [r7, #6]
 8001fe2:	893a      	ldrh	r2, [r7, #8]
 8001fe4:	8979      	ldrh	r1, [r7, #10]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	4603      	mov	r3, r0
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 fadb 	bl	80025ac <I2C_RequestMemoryWrite>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0a9      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	2bff      	cmp	r3, #255	; 0xff
 8002010:	d90e      	bls.n	8002030 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	22ff      	movs	r2, #255	; 0xff
 8002016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	b2da      	uxtb	r2, r3
 800201e:	8979      	ldrh	r1, [r7, #10]
 8002020:	2300      	movs	r3, #0
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fd33 	bl	8002a94 <I2C_TransferConfig>
 800202e:	e00f      	b.n	8002050 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203e:	b2da      	uxtb	r2, r3
 8002040:	8979      	ldrh	r1, [r7, #10]
 8002042:	2300      	movs	r3, #0
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fd22 	bl	8002a94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 fbb5 	bl	80027c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e07b      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d034      	beq.n	8002108 <HAL_I2C_Mem_Write+0x1c8>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d130      	bne.n	8002108 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	2200      	movs	r2, #0
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fb47 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e04d      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2bff      	cmp	r3, #255	; 0xff
 80020c8:	d90e      	bls.n	80020e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	22ff      	movs	r2, #255	; 0xff
 80020ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	8979      	ldrh	r1, [r7, #10]
 80020d8:	2300      	movs	r3, #0
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fcd7 	bl	8002a94 <I2C_TransferConfig>
 80020e6:	e00f      	b.n	8002108 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	2300      	movs	r3, #0
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fcc6 	bl	8002a94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d19e      	bne.n	8002050 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fb94 	bl	8002844 <I2C_WaitOnSTOPFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e01a      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2220      	movs	r2, #32
 800212c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_I2C_Mem_Write+0x224>)
 800213a:	400b      	ands	r3, r1
 800213c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800215a:	2302      	movs	r3, #2
  }
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	fe00e800 	.word	0xfe00e800

08002168 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	817b      	strh	r3, [r7, #10]
 800217a:	460b      	mov	r3, r1
 800217c:	813b      	strh	r3, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b20      	cmp	r3, #32
 800218c:	f040 80fd 	bne.w	800238a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_I2C_Mem_Read+0x34>
 8002196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0f1      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_I2C_Mem_Read+0x4e>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e0ea      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021be:	f7ff fad1 	bl	8001764 <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2319      	movs	r3, #25
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 fab7 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0d5      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2222      	movs	r2, #34	; 0x22
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a3a      	ldr	r2, [r7, #32]
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002208:	88f8      	ldrh	r0, [r7, #6]
 800220a:	893a      	ldrh	r2, [r7, #8]
 800220c:	8979      	ldrh	r1, [r7, #10]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	4603      	mov	r3, r0
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fa1b 	bl	8002654 <I2C_RequestMemoryRead>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0ad      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	2bff      	cmp	r3, #255	; 0xff
 8002238:	d90e      	bls.n	8002258 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	22ff      	movs	r2, #255	; 0xff
 800223e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	b2da      	uxtb	r2, r3
 8002246:	8979      	ldrh	r1, [r7, #10]
 8002248:	4b52      	ldr	r3, [pc, #328]	; (8002394 <HAL_I2C_Mem_Read+0x22c>)
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fc1f 	bl	8002a94 <I2C_TransferConfig>
 8002256:	e00f      	b.n	8002278 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002266:	b2da      	uxtb	r2, r3
 8002268:	8979      	ldrh	r1, [r7, #10]
 800226a:	4b4a      	ldr	r3, [pc, #296]	; (8002394 <HAL_I2C_Mem_Read+0x22c>)
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fc0e 	bl	8002a94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	2200      	movs	r2, #0
 8002280:	2104      	movs	r1, #4
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fa5e 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e07c      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d034      	beq.n	8002338 <HAL_I2C_Mem_Read+0x1d0>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d130      	bne.n	8002338 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	2200      	movs	r2, #0
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fa2f 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e04d      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2bff      	cmp	r3, #255	; 0xff
 80022f8:	d90e      	bls.n	8002318 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	22ff      	movs	r2, #255	; 0xff
 80022fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002304:	b2da      	uxtb	r2, r3
 8002306:	8979      	ldrh	r1, [r7, #10]
 8002308:	2300      	movs	r3, #0
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fbbf 	bl	8002a94 <I2C_TransferConfig>
 8002316:	e00f      	b.n	8002338 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002326:	b2da      	uxtb	r2, r3
 8002328:	8979      	ldrh	r1, [r7, #10]
 800232a:	2300      	movs	r3, #0
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fbae 	bl	8002a94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d19a      	bne.n	8002278 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 fa7c 	bl	8002844 <I2C_WaitOnSTOPFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e01a      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2220      	movs	r2, #32
 800235c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_I2C_Mem_Read+0x230>)
 800236a:	400b      	ands	r3, r1
 800236c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800238a:	2302      	movs	r3, #2
  }
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	80002400 	.word	0x80002400
 8002398:	fe00e800 	.word	0xfe00e800

0800239c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	460b      	mov	r3, r1
 80023aa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	f040 80ef 	bne.w	800259c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023cc:	d101      	bne.n	80023d2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80023ce:	2302      	movs	r3, #2
 80023d0:	e0e5      	b.n	800259e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_I2C_IsDeviceReady+0x44>
 80023dc:	2302      	movs	r3, #2
 80023de:	e0de      	b.n	800259e <HAL_I2C_IsDeviceReady+0x202>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2224      	movs	r2, #36	; 0x24
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d105      	bne.n	800240a <HAL_I2C_IsDeviceReady+0x6e>
 80023fe:	897b      	ldrh	r3, [r7, #10]
 8002400:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002404:	4b68      	ldr	r3, [pc, #416]	; (80025a8 <HAL_I2C_IsDeviceReady+0x20c>)
 8002406:	4313      	orrs	r3, r2
 8002408:	e004      	b.n	8002414 <HAL_I2C_IsDeviceReady+0x78>
 800240a:	897b      	ldrh	r3, [r7, #10]
 800240c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002410:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800241a:	f7ff f9a3 	bl	8001764 <HAL_GetTick>
 800241e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	2b20      	cmp	r3, #32
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b10      	cmp	r3, #16
 8002442:	bf0c      	ite	eq
 8002444:	2301      	moveq	r3, #1
 8002446:	2300      	movne	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800244c:	e034      	b.n	80024b8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d01a      	beq.n	800248c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002456:	f7ff f985 	bl	8001764 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d302      	bcc.n	800246c <HAL_I2C_IsDeviceReady+0xd0>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10f      	bne.n	800248c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e088      	b.n	800259e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b20      	cmp	r3, #32
 8002498:	bf0c      	ite	eq
 800249a:	2301      	moveq	r3, #1
 800249c:	2300      	movne	r3, #0
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80024b8:	7ffb      	ldrb	r3, [r7, #31]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <HAL_I2C_IsDeviceReady+0x128>
 80024be:	7fbb      	ldrb	r3, [r7, #30]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0c4      	beq.n	800244e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d01a      	beq.n	8002508 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2200      	movs	r2, #0
 80024da:	2120      	movs	r1, #32
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f931 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e058      	b.n	800259e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2220      	movs	r2, #32
 80024f2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e04a      	b.n	800259e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2200      	movs	r2, #0
 8002510:	2120      	movs	r1, #32
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 f916 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e03d      	b.n	800259e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2210      	movs	r2, #16
 8002528:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2220      	movs	r2, #32
 8002530:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	429a      	cmp	r2, r3
 8002538:	d118      	bne.n	800256c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002548:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2200      	movs	r2, #0
 8002552:	2120      	movs	r1, #32
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f8f5 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e01c      	b.n	800259e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2220      	movs	r2, #32
 800256a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	3301      	adds	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	429a      	cmp	r2, r3
 8002578:	f63f af3d 	bhi.w	80023f6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002588:	f043 0220 	orr.w	r2, r3, #32
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800259c:	2302      	movs	r3, #2
  }
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3720      	adds	r7, #32
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	02002000 	.word	0x02002000

080025ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	4608      	mov	r0, r1
 80025b6:	4611      	mov	r1, r2
 80025b8:	461a      	mov	r2, r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	817b      	strh	r3, [r7, #10]
 80025be:	460b      	mov	r3, r1
 80025c0:	813b      	strh	r3, [r7, #8]
 80025c2:	4613      	mov	r3, r2
 80025c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	8979      	ldrh	r1, [r7, #10]
 80025cc:	4b20      	ldr	r3, [pc, #128]	; (8002650 <I2C_RequestMemoryWrite+0xa4>)
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 fa5d 	bl	8002a94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	69b9      	ldr	r1, [r7, #24]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f8f0 	bl	80027c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e02c      	b.n	8002648 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d105      	bne.n	8002600 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025f4:	893b      	ldrh	r3, [r7, #8]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	629a      	str	r2, [r3, #40]	; 0x28
 80025fe:	e015      	b.n	800262c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002600:	893b      	ldrh	r3, [r7, #8]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	b29b      	uxth	r3, r3
 8002606:	b2da      	uxtb	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	69b9      	ldr	r1, [r7, #24]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f8d6 	bl	80027c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e012      	b.n	8002648 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002622:	893b      	ldrh	r3, [r7, #8]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2200      	movs	r2, #0
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f884 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	80002000 	.word	0x80002000

08002654 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af02      	add	r7, sp, #8
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	4608      	mov	r0, r1
 800265e:	4611      	mov	r1, r2
 8002660:	461a      	mov	r2, r3
 8002662:	4603      	mov	r3, r0
 8002664:	817b      	strh	r3, [r7, #10]
 8002666:	460b      	mov	r3, r1
 8002668:	813b      	strh	r3, [r7, #8]
 800266a:	4613      	mov	r3, r2
 800266c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	8979      	ldrh	r1, [r7, #10]
 8002674:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <I2C_RequestMemoryRead+0xa4>)
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2300      	movs	r3, #0
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fa0a 	bl	8002a94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	69b9      	ldr	r1, [r7, #24]
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f89d 	bl	80027c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e02c      	b.n	80026ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d105      	bne.n	80026a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800269a:	893b      	ldrh	r3, [r7, #8]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28
 80026a4:	e015      	b.n	80026d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026a6:	893b      	ldrh	r3, [r7, #8]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	69b9      	ldr	r1, [r7, #24]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f883 	bl	80027c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e012      	b.n	80026ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026c8:	893b      	ldrh	r3, [r7, #8]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2200      	movs	r2, #0
 80026da:	2140      	movs	r1, #64	; 0x40
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f831 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	80002000 	.word	0x80002000

080026fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b02      	cmp	r3, #2
 8002710:	d103      	bne.n	800271a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2200      	movs	r2, #0
 8002718:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d007      	beq.n	8002738 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	619a      	str	r2, [r3, #24]
  }
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002754:	e022      	b.n	800279c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d01e      	beq.n	800279c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7ff f801 	bl	8001764 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d113      	bne.n	800279c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	f043 0220 	orr.w	r2, r3, #32
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e00f      	b.n	80027bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4013      	ands	r3, r2
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d0cd      	beq.n	8002756 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027d0:	e02c      	b.n	800282c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f870 	bl	80028bc <I2C_IsErrorOccurred>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e02a      	b.n	800283c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d01e      	beq.n	800282c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ee:	f7fe ffb9 	bl	8001764 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d302      	bcc.n	8002804 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d113      	bne.n	800282c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	f043 0220 	orr.w	r2, r3, #32
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e007      	b.n	800283c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d1cb      	bne.n	80027d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002850:	e028      	b.n	80028a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f830 	bl	80028bc <I2C_IsErrorOccurred>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e026      	b.n	80028b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002866:	f7fe ff7d 	bl	8001764 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	429a      	cmp	r2, r3
 8002874:	d302      	bcc.n	800287c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d113      	bne.n	80028a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002880:	f043 0220 	orr.w	r2, r3, #32
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e007      	b.n	80028b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d1cf      	bne.n	8002852 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	; 0x28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d075      	beq.n	80029d4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2210      	movs	r2, #16
 80028ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028f0:	e056      	b.n	80029a0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d052      	beq.n	80029a0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7fe ff33 	bl	8001764 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_IsErrorOccurred+0x54>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d147      	bne.n	80029a0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002922:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800292e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002932:	d12e      	bne.n	8002992 <I2C_IsErrorOccurred+0xd6>
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800293a:	d02a      	beq.n	8002992 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	2b20      	cmp	r3, #32
 8002940:	d027      	beq.n	8002992 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002950:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002952:	f7fe ff07 	bl	8001764 <HAL_GetTick>
 8002956:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002958:	e01b      	b.n	8002992 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800295a:	f7fe ff03 	bl	8001764 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b19      	cmp	r3, #25
 8002966:	d914      	bls.n	8002992 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b20      	cmp	r3, #32
 800299e:	d1dc      	bne.n	800295a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d003      	beq.n	80029b6 <I2C_IsErrorOccurred+0xfa>
 80029ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d09d      	beq.n	80028f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d103      	bne.n	80029c6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2220      	movs	r2, #32
 80029c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	f043 0304 	orr.w	r3, r3, #4
 80029cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00b      	beq.n	80029fe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00b      	beq.n	8002a20 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	f043 0308 	orr.w	r3, r3, #8
 8002a0e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d01c      	beq.n	8002a84 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f7ff fe56 	bl	80026fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <I2C_IsErrorOccurred+0x1d4>)
 8002a5c:	400b      	ands	r3, r1
 8002a5e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3728      	adds	r7, #40	; 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	fe00e800 	.word	0xfe00e800

08002a94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	817b      	strh	r3, [r7, #10]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aa6:	897b      	ldrh	r3, [r7, #10]
 8002aa8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aac:	7a7b      	ldrb	r3, [r7, #9]
 8002aae:	041b      	lsls	r3, r3, #16
 8002ab0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ab4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ac2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	0d5b      	lsrs	r3, r3, #21
 8002ace:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <I2C_TransferConfig+0x60>)
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	ea02 0103 	and.w	r1, r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ae6:	bf00      	nop
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	03ff63ff 	.word	0x03ff63ff

08002af8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d138      	bne.n	8002b80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e032      	b.n	8002b82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2224      	movs	r2, #36	; 0x24
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6819      	ldr	r1, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e000      	b.n	8002b82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b80:	2302      	movs	r3, #2
  }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d139      	bne.n	8002c18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e033      	b.n	8002c1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2224      	movs	r2, #36	; 0x24
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002be0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e000      	b.n	8002c1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
  }
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002c30:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	2b06      	cmp	r3, #6
 8002c3a:	d00a      	beq.n	8002c52 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c3c:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d001      	beq.n	8002c4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e040      	b.n	8002cd0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e03e      	b.n	8002cd0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002c5a:	491f      	ldr	r1, [pc, #124]	; (8002cd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c62:	f7fe fd7f 	bl	8001764 <HAL_GetTick>
 8002c66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c68:	e009      	b.n	8002c7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c6a:	f7fe fd7b 	bl	8001764 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c78:	d901      	bls.n	8002c7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e028      	b.n	8002cd0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8a:	d1ee      	bne.n	8002c6a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b1e      	cmp	r3, #30
 8002c90:	d008      	beq.n	8002ca4 <HAL_PWREx_ConfigSupply+0x7c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b2e      	cmp	r3, #46	; 0x2e
 8002c96:	d005      	beq.n	8002ca4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b1d      	cmp	r3, #29
 8002c9c:	d002      	beq.n	8002ca4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b2d      	cmp	r3, #45	; 0x2d
 8002ca2:	d114      	bne.n	8002cce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002ca4:	f7fe fd5e 	bl	8001764 <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002caa:	e009      	b.n	8002cc0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cac:	f7fe fd5a 	bl	8001764 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cba:	d901      	bls.n	8002cc0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e007      	b.n	8002cd0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d1ee      	bne.n	8002cac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	58024800 	.word	0x58024800

08002cdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08c      	sub	sp, #48	; 0x30
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f000 bc1d 	b.w	800352a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8087 	beq.w	8002e0c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cfe:	4b99      	ldr	r3, [pc, #612]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d08:	4b96      	ldr	r3, [pc, #600]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d007      	beq.n	8002d24 <HAL_RCC_OscConfig+0x48>
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d16:	2b18      	cmp	r3, #24
 8002d18:	d110      	bne.n	8002d3c <HAL_RCC_OscConfig+0x60>
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d10b      	bne.n	8002d3c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	4b8f      	ldr	r3, [pc, #572]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d06c      	beq.n	8002e0a <HAL_RCC_OscConfig+0x12e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d168      	bne.n	8002e0a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e3f6      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d44:	d106      	bne.n	8002d54 <HAL_RCC_OscConfig+0x78>
 8002d46:	4b87      	ldr	r3, [pc, #540]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a86      	ldr	r2, [pc, #536]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e02e      	b.n	8002db2 <HAL_RCC_OscConfig+0xd6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10c      	bne.n	8002d76 <HAL_RCC_OscConfig+0x9a>
 8002d5c:	4b81      	ldr	r3, [pc, #516]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a80      	ldr	r2, [pc, #512]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b7e      	ldr	r3, [pc, #504]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a7d      	ldr	r2, [pc, #500]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	e01d      	b.n	8002db2 <HAL_RCC_OscConfig+0xd6>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d7e:	d10c      	bne.n	8002d9a <HAL_RCC_OscConfig+0xbe>
 8002d80:	4b78      	ldr	r3, [pc, #480]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a77      	ldr	r2, [pc, #476]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b75      	ldr	r3, [pc, #468]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a74      	ldr	r2, [pc, #464]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	e00b      	b.n	8002db2 <HAL_RCC_OscConfig+0xd6>
 8002d9a:	4b72      	ldr	r3, [pc, #456]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a71      	ldr	r2, [pc, #452]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b6f      	ldr	r3, [pc, #444]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a6e      	ldr	r2, [pc, #440]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d013      	beq.n	8002de2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dba:	f7fe fcd3 	bl	8001764 <HAL_GetTick>
 8002dbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc2:	f7fe fccf 	bl	8001764 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b64      	cmp	r3, #100	; 0x64
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e3aa      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dd4:	4b63      	ldr	r3, [pc, #396]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0xe6>
 8002de0:	e014      	b.n	8002e0c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de2:	f7fe fcbf 	bl	8001764 <HAL_GetTick>
 8002de6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dea:	f7fe fcbb 	bl	8001764 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b64      	cmp	r3, #100	; 0x64
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e396      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f0      	bne.n	8002dea <HAL_RCC_OscConfig+0x10e>
 8002e08:	e000      	b.n	8002e0c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80cb 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e1a:	4b52      	ldr	r3, [pc, #328]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e22:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e24:	4b4f      	ldr	r3, [pc, #316]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <HAL_RCC_OscConfig+0x164>
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	2b18      	cmp	r3, #24
 8002e34:	d156      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x208>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d151      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e40:	4b48      	ldr	r3, [pc, #288]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_OscConfig+0x17c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e368      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e58:	4b42      	ldr	r3, [pc, #264]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 0219 	bic.w	r2, r3, #25
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	493f      	ldr	r1, [pc, #252]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e6a:	f7fe fc7b 	bl	8001764 <HAL_GetTick>
 8002e6e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e72:	f7fe fc77 	bl	8001764 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e352      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e84:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e90:	f7fe fc98 	bl	80017c4 <HAL_GetREVID>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d817      	bhi.n	8002ece <HAL_RCC_OscConfig+0x1f2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	d108      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x1dc>
 8002ea6:	4b2f      	ldr	r3, [pc, #188]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002eae:	4a2d      	ldr	r2, [pc, #180]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb6:	e07b      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb8:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	031b      	lsls	r3, r3, #12
 8002ec6:	4927      	ldr	r1, [pc, #156]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ecc:	e070      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ece:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	4921      	ldr	r1, [pc, #132]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee2:	e065      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d048      	beq.n	8002f7e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f023 0219 	bic.w	r2, r3, #25
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	491a      	ldr	r1, [pc, #104]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efe:	f7fe fc31 	bl	8001764 <HAL_GetTick>
 8002f02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f06:	f7fe fc2d 	bl	8001764 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e308      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f24:	f7fe fc4e 	bl	80017c4 <HAL_GetREVID>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d81a      	bhi.n	8002f68 <HAL_RCC_OscConfig+0x28c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b40      	cmp	r3, #64	; 0x40
 8002f38:	d108      	bne.n	8002f4c <HAL_RCC_OscConfig+0x270>
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f42:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f48:	6053      	str	r3, [r2, #4]
 8002f4a:	e031      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2d4>
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	031b      	lsls	r3, r3, #12
 8002f5a:	4902      	ldr	r1, [pc, #8]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
 8002f60:	e026      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2d4>
 8002f62:	bf00      	nop
 8002f64:	58024400 	.word	0x58024400
 8002f68:	4b9a      	ldr	r3, [pc, #616]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	4997      	ldr	r1, [pc, #604]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
 8002f7c:	e018      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7e:	4b95      	ldr	r3, [pc, #596]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a94      	ldr	r2, [pc, #592]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8a:	f7fe fbeb 	bl	8001764 <HAL_GetTick>
 8002f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f92:	f7fe fbe7 	bl	8001764 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e2c2      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fa4:	4b8b      	ldr	r3, [pc, #556]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80a9 	beq.w	8003110 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fbe:	4b85      	ldr	r3, [pc, #532]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fc8:	4b82      	ldr	r3, [pc, #520]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d007      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x308>
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b18      	cmp	r3, #24
 8002fd8:	d13a      	bne.n	8003050 <HAL_RCC_OscConfig+0x374>
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d135      	bne.n	8003050 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fe4:	4b7b      	ldr	r3, [pc, #492]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_OscConfig+0x320>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	2b80      	cmp	r3, #128	; 0x80
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e296      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ffc:	f7fe fbe2 	bl	80017c4 <HAL_GetREVID>
 8003000:	4603      	mov	r3, r0
 8003002:	f241 0203 	movw	r2, #4099	; 0x1003
 8003006:	4293      	cmp	r3, r2
 8003008:	d817      	bhi.n	800303a <HAL_RCC_OscConfig+0x35e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	2b20      	cmp	r3, #32
 8003010:	d108      	bne.n	8003024 <HAL_RCC_OscConfig+0x348>
 8003012:	4b70      	ldr	r3, [pc, #448]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800301a:	4a6e      	ldr	r2, [pc, #440]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800301c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003020:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003022:	e075      	b.n	8003110 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003024:	4b6b      	ldr	r3, [pc, #428]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	069b      	lsls	r3, r3, #26
 8003032:	4968      	ldr	r1, [pc, #416]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003038:	e06a      	b.n	8003110 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800303a:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	061b      	lsls	r3, r3, #24
 8003048:	4962      	ldr	r1, [pc, #392]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800304a:	4313      	orrs	r3, r2
 800304c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800304e:	e05f      	b.n	8003110 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d042      	beq.n	80030de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003058:	4b5e      	ldr	r3, [pc, #376]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a5d      	ldr	r2, [pc, #372]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800305e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe fb7e 	bl	8001764 <HAL_GetTick>
 8003068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800306c:	f7fe fb7a 	bl	8001764 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e255      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800307e:	4b55      	ldr	r3, [pc, #340]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800308a:	f7fe fb9b 	bl	80017c4 <HAL_GetREVID>
 800308e:	4603      	mov	r3, r0
 8003090:	f241 0203 	movw	r2, #4099	; 0x1003
 8003094:	4293      	cmp	r3, r2
 8003096:	d817      	bhi.n	80030c8 <HAL_RCC_OscConfig+0x3ec>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	2b20      	cmp	r3, #32
 800309e:	d108      	bne.n	80030b2 <HAL_RCC_OscConfig+0x3d6>
 80030a0:	4b4c      	ldr	r3, [pc, #304]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80030a8:	4a4a      	ldr	r2, [pc, #296]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030ae:	6053      	str	r3, [r2, #4]
 80030b0:	e02e      	b.n	8003110 <HAL_RCC_OscConfig+0x434>
 80030b2:	4b48      	ldr	r3, [pc, #288]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	069b      	lsls	r3, r3, #26
 80030c0:	4944      	ldr	r1, [pc, #272]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
 80030c6:	e023      	b.n	8003110 <HAL_RCC_OscConfig+0x434>
 80030c8:	4b42      	ldr	r3, [pc, #264]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	493f      	ldr	r1, [pc, #252]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	60cb      	str	r3, [r1, #12]
 80030dc:	e018      	b.n	8003110 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030de:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a3c      	ldr	r2, [pc, #240]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fe fb3b 	bl	8001764 <HAL_GetTick>
 80030ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030f2:	f7fe fb37 	bl	8001764 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e212      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003104:	4b33      	ldr	r3, [pc, #204]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d036      	beq.n	800318a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d019      	beq.n	8003158 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003124:	4b2b      	ldr	r3, [pc, #172]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8003126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003128:	4a2a      	ldr	r2, [pc, #168]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7fe fb18 	bl	8001764 <HAL_GetTick>
 8003134:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003138:	f7fe fb14 	bl	8001764 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1ef      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800314a:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800314c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x45c>
 8003156:	e018      	b.n	800318a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003158:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800315a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315c:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003164:	f7fe fafe 	bl	8001764 <HAL_GetTick>
 8003168:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800316c:	f7fe fafa 	bl	8001764 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e1d5      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8003180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d039      	beq.n	800320a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800319e:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a0c      	ldr	r2, [pc, #48]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80031a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031aa:	f7fe fadb 	bl	8001764 <HAL_GetTick>
 80031ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031b2:	f7fe fad7 	bl	8001764 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e1b2      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x4d6>
 80031d0:	e01b      	b.n	800320a <HAL_RCC_OscConfig+0x52e>
 80031d2:	bf00      	nop
 80031d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031d8:	4b9b      	ldr	r3, [pc, #620]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a9a      	ldr	r2, [pc, #616]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80031de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031e4:	f7fe fabe 	bl	8001764 <HAL_GetTick>
 80031e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031ec:	f7fe faba 	bl	8001764 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e195      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031fe:	4b92      	ldr	r3, [pc, #584]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8081 	beq.w	800331a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003218:	4b8c      	ldr	r3, [pc, #560]	; (800344c <HAL_RCC_OscConfig+0x770>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a8b      	ldr	r2, [pc, #556]	; (800344c <HAL_RCC_OscConfig+0x770>)
 800321e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003222:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003224:	f7fe fa9e 	bl	8001764 <HAL_GetTick>
 8003228:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800322c:	f7fe fa9a 	bl	8001764 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e175      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800323e:	4b83      	ldr	r3, [pc, #524]	; (800344c <HAL_RCC_OscConfig+0x770>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d106      	bne.n	8003260 <HAL_RCC_OscConfig+0x584>
 8003252:	4b7d      	ldr	r3, [pc, #500]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	4a7c      	ldr	r2, [pc, #496]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6713      	str	r3, [r2, #112]	; 0x70
 800325e:	e02d      	b.n	80032bc <HAL_RCC_OscConfig+0x5e0>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10c      	bne.n	8003282 <HAL_RCC_OscConfig+0x5a6>
 8003268:	4b77      	ldr	r3, [pc, #476]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	4a76      	ldr	r2, [pc, #472]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	6713      	str	r3, [r2, #112]	; 0x70
 8003274:	4b74      	ldr	r3, [pc, #464]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	4a73      	ldr	r2, [pc, #460]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 800327a:	f023 0304 	bic.w	r3, r3, #4
 800327e:	6713      	str	r3, [r2, #112]	; 0x70
 8003280:	e01c      	b.n	80032bc <HAL_RCC_OscConfig+0x5e0>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b05      	cmp	r3, #5
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x5c8>
 800328a:	4b6f      	ldr	r3, [pc, #444]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a6e      	ldr	r2, [pc, #440]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003290:	f043 0304 	orr.w	r3, r3, #4
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
 8003296:	4b6c      	ldr	r3, [pc, #432]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4a6b      	ldr	r2, [pc, #428]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70
 80032a2:	e00b      	b.n	80032bc <HAL_RCC_OscConfig+0x5e0>
 80032a4:	4b68      	ldr	r3, [pc, #416]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a67      	ldr	r2, [pc, #412]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
 80032b0:	4b65      	ldr	r3, [pc, #404]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	4a64      	ldr	r2, [pc, #400]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80032b6:	f023 0304 	bic.w	r3, r3, #4
 80032ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d015      	beq.n	80032f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fe fa4e 	bl	8001764 <HAL_GetTick>
 80032c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fe fa4a 	bl	8001764 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e123      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032e2:	4b59      	ldr	r3, [pc, #356]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0ee      	beq.n	80032cc <HAL_RCC_OscConfig+0x5f0>
 80032ee:	e014      	b.n	800331a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f0:	f7fe fa38 	bl	8001764 <HAL_GetTick>
 80032f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032f6:	e00a      	b.n	800330e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f8:	f7fe fa34 	bl	8001764 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e10d      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800330e:	4b4e      	ldr	r3, [pc, #312]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ee      	bne.n	80032f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8102 	beq.w	8003528 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003324:	4b48      	ldr	r3, [pc, #288]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800332c:	2b18      	cmp	r3, #24
 800332e:	f000 80bd 	beq.w	80034ac <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	2b02      	cmp	r3, #2
 8003338:	f040 809e 	bne.w	8003478 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333c:	4b42      	ldr	r3, [pc, #264]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a41      	ldr	r2, [pc, #260]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fa0c 	bl	8001764 <HAL_GetTick>
 800334c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe fa08 	bl	8001764 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0e3      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003362:	4b39      	ldr	r3, [pc, #228]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800336e:	4b36      	ldr	r3, [pc, #216]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003372:	4b37      	ldr	r3, [pc, #220]	; (8003450 <HAL_RCC_OscConfig+0x774>)
 8003374:	4013      	ands	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800337e:	0112      	lsls	r2, r2, #4
 8003380:	430a      	orrs	r2, r1
 8003382:	4931      	ldr	r1, [pc, #196]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003384:	4313      	orrs	r3, r2
 8003386:	628b      	str	r3, [r1, #40]	; 0x28
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	3b01      	subs	r3, #1
 800338e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	3b01      	subs	r3, #1
 8003398:	025b      	lsls	r3, r3, #9
 800339a:	b29b      	uxth	r3, r3
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	3b01      	subs	r3, #1
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	3b01      	subs	r3, #1
 80033b2:	061b      	lsls	r3, r3, #24
 80033b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033b8:	4923      	ldr	r1, [pc, #140]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80033be:	4b22      	ldr	r3, [pc, #136]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	4a21      	ldr	r2, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033c4:	f023 0301 	bic.w	r3, r3, #1
 80033c8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033ca:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ce:	4b21      	ldr	r3, [pc, #132]	; (8003454 <HAL_RCC_OscConfig+0x778>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033d6:	00d2      	lsls	r2, r2, #3
 80033d8:	491b      	ldr	r1, [pc, #108]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033de:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	f023 020c 	bic.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	4917      	ldr	r1, [pc, #92]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	f023 0202 	bic.w	r2, r3, #2
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fc:	4912      	ldr	r1, [pc, #72]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	4a10      	ldr	r2, [pc, #64]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	4a0d      	ldr	r2, [pc, #52]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003418:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003424:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	4a07      	ldr	r2, [pc, #28]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a04      	ldr	r2, [pc, #16]	; (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fe f991 	bl	8001764 <HAL_GetTick>
 8003442:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003444:	e011      	b.n	800346a <HAL_RCC_OscConfig+0x78e>
 8003446:	bf00      	nop
 8003448:	58024400 	.word	0x58024400
 800344c:	58024800 	.word	0x58024800
 8003450:	fffffc0c 	.word	0xfffffc0c
 8003454:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003458:	f7fe f984 	bl	8001764 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e05f      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800346a:	4b32      	ldr	r3, [pc, #200]	; (8003534 <HAL_RCC_OscConfig+0x858>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x77c>
 8003476:	e057      	b.n	8003528 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003478:	4b2e      	ldr	r3, [pc, #184]	; (8003534 <HAL_RCC_OscConfig+0x858>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a2d      	ldr	r2, [pc, #180]	; (8003534 <HAL_RCC_OscConfig+0x858>)
 800347e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fe f96e 	bl	8001764 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe f96a 	bl	8001764 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e045      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800349e:	4b25      	ldr	r3, [pc, #148]	; (8003534 <HAL_RCC_OscConfig+0x858>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x7b0>
 80034aa:	e03d      	b.n	8003528 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034ac:	4b21      	ldr	r3, [pc, #132]	; (8003534 <HAL_RCC_OscConfig+0x858>)
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_RCC_OscConfig+0x858>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d031      	beq.n	8003524 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f003 0203 	and.w	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d12a      	bne.n	8003524 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d122      	bne.n	8003524 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d11a      	bne.n	8003524 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	0a5b      	lsrs	r3, r3, #9
 80034f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d111      	bne.n	8003524 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	0c1b      	lsrs	r3, r3, #16
 8003504:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d108      	bne.n	8003524 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	0e1b      	lsrs	r3, r3, #24
 8003516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3730      	adds	r7, #48	; 0x30
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	58024400 	.word	0x58024400

08003538 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e19c      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b8a      	ldr	r3, [pc, #552]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d910      	bls.n	800357c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b87      	ldr	r3, [pc, #540]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 020f 	bic.w	r2, r3, #15
 8003562:	4985      	ldr	r1, [pc, #532]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b83      	ldr	r3, [pc, #524]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e184      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d010      	beq.n	80035aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	4b7b      	ldr	r3, [pc, #492]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003594:	429a      	cmp	r2, r3
 8003596:	d908      	bls.n	80035aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003598:	4b78      	ldr	r3, [pc, #480]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	4975      	ldr	r1, [pc, #468]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d010      	beq.n	80035d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	4b70      	ldr	r3, [pc, #448]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d908      	bls.n	80035d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035c6:	4b6d      	ldr	r3, [pc, #436]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	496a      	ldr	r1, [pc, #424]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699a      	ldr	r2, [r3, #24]
 80035e8:	4b64      	ldr	r3, [pc, #400]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d908      	bls.n	8003606 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035f4:	4b61      	ldr	r3, [pc, #388]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	495e      	ldr	r1, [pc, #376]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003602:	4313      	orrs	r3, r2
 8003604:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d010      	beq.n	8003634 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	4b59      	ldr	r3, [pc, #356]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800361e:	429a      	cmp	r2, r3
 8003620:	d908      	bls.n	8003634 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003622:	4b56      	ldr	r3, [pc, #344]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	4953      	ldr	r1, [pc, #332]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003630:	4313      	orrs	r3, r2
 8003632:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d010      	beq.n	8003662 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	4b4d      	ldr	r3, [pc, #308]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	429a      	cmp	r2, r3
 800364e:	d908      	bls.n	8003662 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003650:	4b4a      	ldr	r3, [pc, #296]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f023 020f 	bic.w	r2, r3, #15
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4947      	ldr	r1, [pc, #284]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 800365e:	4313      	orrs	r3, r2
 8003660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d055      	beq.n	800371a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800366e:	4b43      	ldr	r3, [pc, #268]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	4940      	ldr	r1, [pc, #256]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 800367c:	4313      	orrs	r3, r2
 800367e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d107      	bne.n	8003698 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003688:	4b3c      	ldr	r3, [pc, #240]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d121      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0f6      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b03      	cmp	r3, #3
 800369e:	d107      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036a0:	4b36      	ldr	r3, [pc, #216]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d115      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0ea      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d107      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036b8:	4b30      	ldr	r3, [pc, #192]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d109      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0de      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036c8:	4b2c      	ldr	r3, [pc, #176]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0d6      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036d8:	4b28      	ldr	r3, [pc, #160]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f023 0207 	bic.w	r2, r3, #7
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4925      	ldr	r1, [pc, #148]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fe f83b 	bl	8001764 <HAL_GetTick>
 80036ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f0:	e00a      	b.n	8003708 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f2:	f7fe f837 	bl	8001764 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e0be      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003708:	4b1c      	ldr	r3, [pc, #112]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	429a      	cmp	r2, r3
 8003718:	d1eb      	bne.n	80036f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d010      	beq.n	8003748 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	429a      	cmp	r2, r3
 8003734:	d208      	bcs.n	8003748 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003736:	4b11      	ldr	r3, [pc, #68]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f023 020f 	bic.w	r2, r3, #15
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	490e      	ldr	r1, [pc, #56]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003744:	4313      	orrs	r3, r2
 8003746:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d214      	bcs.n	8003780 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b08      	ldr	r3, [pc, #32]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 020f 	bic.w	r2, r3, #15
 800375e:	4906      	ldr	r1, [pc, #24]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b04      	ldr	r3, [pc, #16]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d005      	beq.n	8003780 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e086      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>
 8003778:	52002000 	.word	0x52002000
 800377c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d010      	beq.n	80037ae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003798:	429a      	cmp	r2, r3
 800379a:	d208      	bcs.n	80037ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800379c:	4b3c      	ldr	r3, [pc, #240]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	4939      	ldr	r1, [pc, #228]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d010      	beq.n	80037dc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	4b34      	ldr	r3, [pc, #208]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d208      	bcs.n	80037dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037ca:	4b31      	ldr	r3, [pc, #196]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	492e      	ldr	r1, [pc, #184]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d010      	beq.n	800380a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699a      	ldr	r2, [r3, #24]
 80037ec:	4b28      	ldr	r3, [pc, #160]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d208      	bcs.n	800380a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037f8:	4b25      	ldr	r3, [pc, #148]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	4922      	ldr	r1, [pc, #136]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 8003806:	4313      	orrs	r3, r2
 8003808:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b00      	cmp	r3, #0
 8003814:	d010      	beq.n	8003838 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003822:	429a      	cmp	r2, r3
 8003824:	d208      	bcs.n	8003838 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003826:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	4917      	ldr	r1, [pc, #92]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 8003834:	4313      	orrs	r3, r2
 8003836:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003838:	f000 f834 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b14      	ldr	r3, [pc, #80]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	4912      	ldr	r1, [pc, #72]	; (8003894 <HAL_RCC_ClockConfig+0x35c>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
 8003854:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003856:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	4a0d      	ldr	r2, [pc, #52]	; (8003894 <HAL_RCC_ClockConfig+0x35c>)
 8003860:	5cd3      	ldrb	r3, [r2, r3]
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
 800386c:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <HAL_RCC_ClockConfig+0x360>)
 800386e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003870:	4a0a      	ldr	r2, [pc, #40]	; (800389c <HAL_RCC_ClockConfig+0x364>)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <HAL_RCC_ClockConfig+0x368>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd ff28 	bl	80016d0 <HAL_InitTick>
 8003880:	4603      	mov	r3, r0
 8003882:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	58024400 	.word	0x58024400
 8003894:	0800a8d4 	.word	0x0800a8d4
 8003898:	24000004 	.word	0x24000004
 800389c:	24000000 	.word	0x24000000
 80038a0:	24000008 	.word	0x24000008

080038a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b089      	sub	sp, #36	; 0x24
 80038a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038aa:	4bb3      	ldr	r3, [pc, #716]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038b2:	2b18      	cmp	r3, #24
 80038b4:	f200 8155 	bhi.w	8003b62 <HAL_RCC_GetSysClockFreq+0x2be>
 80038b8:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	08003925 	.word	0x08003925
 80038c4:	08003b63 	.word	0x08003b63
 80038c8:	08003b63 	.word	0x08003b63
 80038cc:	08003b63 	.word	0x08003b63
 80038d0:	08003b63 	.word	0x08003b63
 80038d4:	08003b63 	.word	0x08003b63
 80038d8:	08003b63 	.word	0x08003b63
 80038dc:	08003b63 	.word	0x08003b63
 80038e0:	0800394b 	.word	0x0800394b
 80038e4:	08003b63 	.word	0x08003b63
 80038e8:	08003b63 	.word	0x08003b63
 80038ec:	08003b63 	.word	0x08003b63
 80038f0:	08003b63 	.word	0x08003b63
 80038f4:	08003b63 	.word	0x08003b63
 80038f8:	08003b63 	.word	0x08003b63
 80038fc:	08003b63 	.word	0x08003b63
 8003900:	08003951 	.word	0x08003951
 8003904:	08003b63 	.word	0x08003b63
 8003908:	08003b63 	.word	0x08003b63
 800390c:	08003b63 	.word	0x08003b63
 8003910:	08003b63 	.word	0x08003b63
 8003914:	08003b63 	.word	0x08003b63
 8003918:	08003b63 	.word	0x08003b63
 800391c:	08003b63 	.word	0x08003b63
 8003920:	08003957 	.word	0x08003957
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003924:	4b94      	ldr	r3, [pc, #592]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003930:	4b91      	ldr	r3, [pc, #580]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	08db      	lsrs	r3, r3, #3
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	4a90      	ldr	r2, [pc, #576]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
 8003940:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003942:	e111      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003944:	4b8d      	ldr	r3, [pc, #564]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003946:	61bb      	str	r3, [r7, #24]
    break;
 8003948:	e10e      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800394a:	4b8d      	ldr	r3, [pc, #564]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800394c:	61bb      	str	r3, [r7, #24]
    break;
 800394e:	e10b      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003950:	4b8c      	ldr	r3, [pc, #560]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003952:	61bb      	str	r3, [r7, #24]
    break;
 8003954:	e108      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003956:	4b88      	ldr	r3, [pc, #544]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003960:	4b85      	ldr	r3, [pc, #532]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800396a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800396c:	4b82      	ldr	r3, [pc, #520]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003976:	4b80      	ldr	r3, [pc, #512]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397a:	08db      	lsrs	r3, r3, #3
 800397c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	ee07 3a90 	vmov	s15, r3
 800398a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80e1 	beq.w	8003b5c <HAL_RCC_GetSysClockFreq+0x2b8>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b02      	cmp	r3, #2
 800399e:	f000 8083 	beq.w	8003aa8 <HAL_RCC_GetSysClockFreq+0x204>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	f200 80a1 	bhi.w	8003aec <HAL_RCC_GetSysClockFreq+0x248>
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x114>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d056      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x1c0>
 80039b6:	e099      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039b8:	4b6f      	ldr	r3, [pc, #444]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d02d      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039c4:	4b6c      	ldr	r3, [pc, #432]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	08db      	lsrs	r3, r3, #3
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	4a6b      	ldr	r2, [pc, #428]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
 80039d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ee:	4b62      	ldr	r3, [pc, #392]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003a1e:	e087      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a32:	4b51      	ldr	r3, [pc, #324]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a62:	e065      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a76:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aa6:	e043      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aba:	4b2f      	ldr	r3, [pc, #188]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ace:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aea:	e021      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afe:	4b1e      	ldr	r3, [pc, #120]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	0a5b      	lsrs	r3, r3, #9
 8003b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	ee07 3a90 	vmov	s15, r3
 8003b44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b54:	ee17 3a90 	vmov	r3, s15
 8003b58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003b5a:	e005      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
    break;
 8003b60:	e002      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003b62:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b64:	61bb      	str	r3, [r7, #24]
    break;
 8003b66:	bf00      	nop
  }

  return sysclockfreq;
 8003b68:	69bb      	ldr	r3, [r7, #24]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	03d09000 	.word	0x03d09000
 8003b80:	003d0900 	.word	0x003d0900
 8003b84:	007a1200 	.word	0x007a1200
 8003b88:	46000000 	.word	0x46000000
 8003b8c:	4c742400 	.word	0x4c742400
 8003b90:	4a742400 	.word	0x4a742400
 8003b94:	4af42400 	.word	0x4af42400

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b9e:	f7ff fe81 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	490f      	ldr	r1, [pc, #60]	; (8003bec <HAL_RCC_GetHCLKFreq+0x54>)
 8003bb0:	5ccb      	ldrb	r3, [r1, r3]
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HAL_RCC_GetHCLKFreq+0x54>)
 8003bc6:	5cd3      	ldrb	r3, [r2, r3]
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd2:	4a07      	ldr	r2, [pc, #28]	; (8003bf0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bd4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bd6:	4a07      	ldr	r2, [pc, #28]	; (8003bf4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	58024400 	.word	0x58024400
 8003bec:	0800a8d4 	.word	0x0800a8d4
 8003bf0:	24000004 	.word	0x24000004
 8003bf4:	24000000 	.word	0x24000000

08003bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003bfc:	f7ff ffcc 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	091b      	lsrs	r3, r3, #4
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4904      	ldr	r1, [pc, #16]	; (8003c20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	58024400 	.word	0x58024400
 8003c20:	0800a8d4 	.word	0x0800a8d4

08003c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c28:	f7ff ffb6 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	0a1b      	lsrs	r3, r3, #8
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	4904      	ldr	r1, [pc, #16]	; (8003c4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c3a:	5ccb      	ldrb	r3, [r1, r3]
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	58024400 	.word	0x58024400
 8003c4c:	0800a8d4 	.word	0x0800a8d4

08003c50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c58:	2300      	movs	r3, #0
 8003c5a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d03f      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c74:	d02a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c7a:	d824      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c80:	d018      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c86:	d81e      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c90:	d007      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c92:	e018      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c94:	4ba3      	ldr	r3, [pc, #652]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	4aa2      	ldr	r2, [pc, #648]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ca0:	e015      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 f9d5 	bl	8005058 <RCCEx_PLL2_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003cb2:	e00c      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3324      	adds	r3, #36	; 0x24
 8003cb8:	2102      	movs	r1, #2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 fa7e 	bl	80051bc <RCCEx_PLL3_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003cd4:	4b93      	ldr	r3, [pc, #588]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce0:	4990      	ldr	r1, [pc, #576]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ce6:	e001      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d03d      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d826      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d1d 	.word	0x08003d1d
 8003d0c:	08003d2b 	.word	0x08003d2b
 8003d10:	08003d3d 	.word	0x08003d3d
 8003d14:	08003d55 	.word	0x08003d55
 8003d18:	08003d55 	.word	0x08003d55
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1c:	4b81      	ldr	r3, [pc, #516]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	4a80      	ldr	r2, [pc, #512]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d28:	e015      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 f991 	bl	8005058 <RCCEx_PLL2_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d3a:	e00c      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3324      	adds	r3, #36	; 0x24
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 fa3a 	bl	80051bc <RCCEx_PLL3_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d4c:	e003      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
      break;
 8003d52:	e000      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d109      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d5c:	4b71      	ldr	r3, [pc, #452]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d60:	f023 0207 	bic.w	r2, r3, #7
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	496e      	ldr	r1, [pc, #440]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	650b      	str	r3, [r1, #80]	; 0x50
 8003d6e:	e001      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
 8003d72:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d042      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d88:	d02b      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8e:	d825      	bhi.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d90:	2bc0      	cmp	r3, #192	; 0xc0
 8003d92:	d028      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d94:	2bc0      	cmp	r3, #192	; 0xc0
 8003d96:	d821      	bhi.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d98:	2b80      	cmp	r3, #128	; 0x80
 8003d9a:	d016      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003d9c:	2b80      	cmp	r3, #128	; 0x80
 8003d9e:	d81d      	bhi.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d007      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003da8:	e018      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003daa:	4b5e      	ldr	r3, [pc, #376]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	4a5d      	ldr	r2, [pc, #372]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003db6:	e017      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 f94a 	bl	8005058 <RCCEx_PLL2_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003dc8:	e00e      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3324      	adds	r3, #36	; 0x24
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 f9f3 	bl	80051bc <RCCEx_PLL3_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003dda:	e005      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	75fb      	strb	r3, [r7, #23]
      break;
 8003de0:	e002      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de8:	7dfb      	ldrb	r3, [r7, #23]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003dee:	4b4d      	ldr	r3, [pc, #308]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfa:	494a      	ldr	r1, [pc, #296]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	650b      	str	r3, [r1, #80]	; 0x50
 8003e00:	e001      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
 8003e04:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d049      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e1c:	d030      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003e1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e22:	d82a      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e28:	d02c      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003e2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e2e:	d824      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e34:	d018      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e3a:	d81e      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e44:	d007      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003e46:	e018      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e48:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	4a35      	ldr	r2, [pc, #212]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e54:	e017      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f001 f8fb 	bl	8005058 <RCCEx_PLL2_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e66:	e00e      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3324      	adds	r3, #36	; 0x24
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f001 f9a4 	bl	80051bc <RCCEx_PLL3_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e78:	e005      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e7e:	e002      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e80:	bf00      	nop
 8003e82:	e000      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e8c:	4b25      	ldr	r3, [pc, #148]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e9a:	4922      	ldr	r1, [pc, #136]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	658b      	str	r3, [r1, #88]	; 0x58
 8003ea0:	e001      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
 8003ea4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d04b      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003eb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ebc:	d030      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003ebe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ec2:	d82a      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ec4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ec8:	d02e      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003eca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ece:	d824      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ed0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ed4:	d018      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003ed6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eda:	d81e      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ee4:	d007      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003ee6:	e018      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	4a0d      	ldr	r2, [pc, #52]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ef4:	e019      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 f8ab 	bl	8005058 <RCCEx_PLL2_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003f06:	e010      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3324      	adds	r3, #36	; 0x24
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 f954 	bl	80051bc <RCCEx_PLL3_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f18:	e007      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f1e:	e004      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003f20:	bf00      	nop
 8003f22:	e002      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003f24:	58024400 	.word	0x58024400
      break;
 8003f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f30:	4b99      	ldr	r3, [pc, #612]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f3e:	4996      	ldr	r1, [pc, #600]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	658b      	str	r3, [r1, #88]	; 0x58
 8003f44:	e001      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
 8003f48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d032      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5a:	2b30      	cmp	r3, #48	; 0x30
 8003f5c:	d01c      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003f5e:	2b30      	cmp	r3, #48	; 0x30
 8003f60:	d817      	bhi.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d00c      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d813      	bhi.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d016      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d10f      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f72:	4b89      	ldr	r3, [pc, #548]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	4a88      	ldr	r2, [pc, #544]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f7e:	e00e      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3304      	adds	r3, #4
 8003f84:	2102      	movs	r1, #2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 f866 	bl	8005058 <RCCEx_PLL2_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f90:	e005      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	75fb      	strb	r3, [r7, #23]
      break;
 8003f96:	e002      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003f98:	bf00      	nop
 8003f9a:	e000      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d109      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fa4:	4b7c      	ldr	r3, [pc, #496]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb0:	4979      	ldr	r1, [pc, #484]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003fb6:	e001      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
 8003fba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d047      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd0:	d030      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd6:	d82a      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003fd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fdc:	d02c      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003fde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fe2:	d824      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe8:	d018      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fee:	d81e      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff8:	d007      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003ffa:	e018      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ffc:	4b66      	ldr	r3, [pc, #408]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	4a65      	ldr	r2, [pc, #404]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004006:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004008:	e017      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f001 f821 	bl	8005058 <RCCEx_PLL2_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800401a:	e00e      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3324      	adds	r3, #36	; 0x24
 8004020:	2100      	movs	r1, #0
 8004022:	4618      	mov	r0, r3
 8004024:	f001 f8ca 	bl	80051bc <RCCEx_PLL3_Config>
 8004028:	4603      	mov	r3, r0
 800402a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800402c:	e005      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
      break;
 8004032:	e002      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004034:	bf00      	nop
 8004036:	e000      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800403a:	7dfb      	ldrb	r3, [r7, #23]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d109      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004040:	4b55      	ldr	r3, [pc, #340]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004044:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	4952      	ldr	r1, [pc, #328]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800404e:	4313      	orrs	r3, r2
 8004050:	650b      	str	r3, [r1, #80]	; 0x50
 8004052:	e001      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	7dfb      	ldrb	r3, [r7, #23]
 8004056:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d049      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800406c:	d02e      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800406e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004072:	d828      	bhi.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004074:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004078:	d02a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800407a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800407e:	d822      	bhi.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004080:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004084:	d026      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004086:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800408a:	d81c      	bhi.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800408c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004090:	d010      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004096:	d816      	bhi.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01d      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a0:	d111      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3304      	adds	r3, #4
 80040a6:	2101      	movs	r1, #1
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 ffd5 	bl	8005058 <RCCEx_PLL2_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040b2:	e012      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3324      	adds	r3, #36	; 0x24
 80040b8:	2101      	movs	r1, #1
 80040ba:	4618      	mov	r0, r3
 80040bc:	f001 f87e 	bl	80051bc <RCCEx_PLL3_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040c4:	e009      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	75fb      	strb	r3, [r7, #23]
      break;
 80040ca:	e006      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040cc:	bf00      	nop
 80040ce:	e004      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040d0:	bf00      	nop
 80040d2:	e002      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040d4:	bf00      	nop
 80040d6:	e000      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040da:	7dfb      	ldrb	r3, [r7, #23]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d109      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040e0:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ec:	492a      	ldr	r1, [pc, #168]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	650b      	str	r3, [r1, #80]	; 0x50
 80040f2:	e001      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d04d      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800410a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800410e:	d02e      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004114:	d828      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411a:	d02a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800411c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004120:	d822      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004122:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004126:	d026      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004128:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800412c:	d81c      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800412e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004132:	d010      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004138:	d816      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01d      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800413e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004142:	d111      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3304      	adds	r3, #4
 8004148:	2101      	movs	r1, #1
 800414a:	4618      	mov	r0, r3
 800414c:	f000 ff84 	bl	8005058 <RCCEx_PLL2_Config>
 8004150:	4603      	mov	r3, r0
 8004152:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004154:	e012      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3324      	adds	r3, #36	; 0x24
 800415a:	2101      	movs	r1, #1
 800415c:	4618      	mov	r0, r3
 800415e:	f001 f82d 	bl	80051bc <RCCEx_PLL3_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004166:	e009      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	75fb      	strb	r3, [r7, #23]
      break;
 800416c:	e006      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800416e:	bf00      	nop
 8004170:	e004      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004172:	bf00      	nop
 8004174:	e002      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004176:	bf00      	nop
 8004178:	e000      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800417a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10c      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004190:	4901      	ldr	r1, [pc, #4]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004192:	4313      	orrs	r3, r2
 8004194:	658b      	str	r3, [r1, #88]	; 0x58
 8004196:	e003      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004198:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419c:	7dfb      	ldrb	r3, [r7, #23]
 800419e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d02f      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b4:	d00e      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80041b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ba:	d814      	bhi.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d015      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80041c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041c4:	d10f      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c6:	4baf      	ldr	r3, [pc, #700]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	4aae      	ldr	r2, [pc, #696]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041d2:	e00c      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	2101      	movs	r1, #1
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 ff3c 	bl	8005058 <RCCEx_PLL2_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041e4:	e003      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
      break;
 80041ea:	e000      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80041ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ee:	7dfb      	ldrb	r3, [r7, #23]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041f4:	4ba3      	ldr	r3, [pc, #652]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004200:	49a0      	ldr	r1, [pc, #640]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004202:	4313      	orrs	r3, r2
 8004204:	650b      	str	r3, [r1, #80]	; 0x50
 8004206:	e001      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d032      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421c:	2b03      	cmp	r3, #3
 800421e:	d81b      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	0800425f 	.word	0x0800425f
 800422c:	08004239 	.word	0x08004239
 8004230:	08004247 	.word	0x08004247
 8004234:	0800425f 	.word	0x0800425f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004238:	4b92      	ldr	r3, [pc, #584]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	4a91      	ldr	r2, [pc, #580]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800423e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004242:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004244:	e00c      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	2102      	movs	r1, #2
 800424c:	4618      	mov	r0, r3
 800424e:	f000 ff03 	bl	8005058 <RCCEx_PLL2_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004256:	e003      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	75fb      	strb	r3, [r7, #23]
      break;
 800425c:	e000      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800425e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004266:	4b87      	ldr	r3, [pc, #540]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426a:	f023 0203 	bic.w	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	4984      	ldr	r1, [pc, #528]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004274:	4313      	orrs	r3, r2
 8004276:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004278:	e001      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427a:	7dfb      	ldrb	r3, [r7, #23]
 800427c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8086 	beq.w	8004398 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800428c:	4b7e      	ldr	r3, [pc, #504]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a7d      	ldr	r2, [pc, #500]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004296:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004298:	f7fd fa64 	bl	8001764 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800429e:	e009      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a0:	f7fd fa60 	bl	8001764 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	; 0x64
 80042ac:	d902      	bls.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	75fb      	strb	r3, [r7, #23]
        break;
 80042b2:	e005      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042b4:	4b74      	ldr	r3, [pc, #464]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ef      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d166      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042c6:	4b6f      	ldr	r3, [pc, #444]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042d0:	4053      	eors	r3, r2
 80042d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d013      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042da:	4b6a      	ldr	r3, [pc, #424]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042e4:	4b67      	ldr	r3, [pc, #412]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	4a66      	ldr	r2, [pc, #408]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042f0:	4b64      	ldr	r3, [pc, #400]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	4a63      	ldr	r2, [pc, #396]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042fc:	4a61      	ldr	r2, [pc, #388]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430c:	d115      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430e:	f7fd fa29 	bl	8001764 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004314:	e00b      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004316:	f7fd fa25 	bl	8001764 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	; 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	d902      	bls.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	75fb      	strb	r3, [r7, #23]
            break;
 800432c:	e005      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800432e:	4b55      	ldr	r3, [pc, #340]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0ed      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d126      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800434e:	d10d      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004350:	4b4c      	ldr	r3, [pc, #304]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800435e:	0919      	lsrs	r1, r3, #4
 8004360:	4b4a      	ldr	r3, [pc, #296]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004362:	400b      	ands	r3, r1
 8004364:	4947      	ldr	r1, [pc, #284]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004366:	4313      	orrs	r3, r2
 8004368:	610b      	str	r3, [r1, #16]
 800436a:	e005      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800436c:	4b45      	ldr	r3, [pc, #276]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	4a44      	ldr	r2, [pc, #272]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004372:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004376:	6113      	str	r3, [r2, #16]
 8004378:	4b42      	ldr	r3, [pc, #264]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800437a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004386:	493f      	ldr	r1, [pc, #252]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004388:	4313      	orrs	r3, r2
 800438a:	670b      	str	r3, [r1, #112]	; 0x70
 800438c:	e004      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800438e:	7dfb      	ldrb	r3, [r7, #23]
 8004390:	75bb      	strb	r3, [r7, #22]
 8004392:	e001      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004394:	7dfb      	ldrb	r3, [r7, #23]
 8004396:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8085 	beq.w	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043aa:	2b28      	cmp	r3, #40	; 0x28
 80043ac:	d866      	bhi.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80043ae:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80043b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b4:	08004491 	.word	0x08004491
 80043b8:	0800447d 	.word	0x0800447d
 80043bc:	0800447d 	.word	0x0800447d
 80043c0:	0800447d 	.word	0x0800447d
 80043c4:	0800447d 	.word	0x0800447d
 80043c8:	0800447d 	.word	0x0800447d
 80043cc:	0800447d 	.word	0x0800447d
 80043d0:	0800447d 	.word	0x0800447d
 80043d4:	08004459 	.word	0x08004459
 80043d8:	0800447d 	.word	0x0800447d
 80043dc:	0800447d 	.word	0x0800447d
 80043e0:	0800447d 	.word	0x0800447d
 80043e4:	0800447d 	.word	0x0800447d
 80043e8:	0800447d 	.word	0x0800447d
 80043ec:	0800447d 	.word	0x0800447d
 80043f0:	0800447d 	.word	0x0800447d
 80043f4:	0800446b 	.word	0x0800446b
 80043f8:	0800447d 	.word	0x0800447d
 80043fc:	0800447d 	.word	0x0800447d
 8004400:	0800447d 	.word	0x0800447d
 8004404:	0800447d 	.word	0x0800447d
 8004408:	0800447d 	.word	0x0800447d
 800440c:	0800447d 	.word	0x0800447d
 8004410:	0800447d 	.word	0x0800447d
 8004414:	08004491 	.word	0x08004491
 8004418:	0800447d 	.word	0x0800447d
 800441c:	0800447d 	.word	0x0800447d
 8004420:	0800447d 	.word	0x0800447d
 8004424:	0800447d 	.word	0x0800447d
 8004428:	0800447d 	.word	0x0800447d
 800442c:	0800447d 	.word	0x0800447d
 8004430:	0800447d 	.word	0x0800447d
 8004434:	08004491 	.word	0x08004491
 8004438:	0800447d 	.word	0x0800447d
 800443c:	0800447d 	.word	0x0800447d
 8004440:	0800447d 	.word	0x0800447d
 8004444:	0800447d 	.word	0x0800447d
 8004448:	0800447d 	.word	0x0800447d
 800444c:	0800447d 	.word	0x0800447d
 8004450:	0800447d 	.word	0x0800447d
 8004454:	08004491 	.word	0x08004491
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	2101      	movs	r1, #1
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fdfa 	bl	8005058 <RCCEx_PLL2_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004468:	e013      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3324      	adds	r3, #36	; 0x24
 800446e:	2101      	movs	r1, #1
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fea3 	bl	80051bc <RCCEx_PLL3_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800447a:	e00a      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	75fb      	strb	r3, [r7, #23]
      break;
 8004480:	e007      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004482:	bf00      	nop
 8004484:	58024400 	.word	0x58024400
 8004488:	58024800 	.word	0x58024800
 800448c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004492:	7dfb      	ldrb	r3, [r7, #23]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d109      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004498:	4b96      	ldr	r3, [pc, #600]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a4:	4993      	ldr	r1, [pc, #588]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	654b      	str	r3, [r1, #84]	; 0x54
 80044aa:	e001      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d038      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c0:	2b05      	cmp	r3, #5
 80044c2:	d821      	bhi.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80044c4:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	0800450f 	.word	0x0800450f
 80044d0:	080044e5 	.word	0x080044e5
 80044d4:	080044f7 	.word	0x080044f7
 80044d8:	0800450f 	.word	0x0800450f
 80044dc:	0800450f 	.word	0x0800450f
 80044e0:	0800450f 	.word	0x0800450f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3304      	adds	r3, #4
 80044e8:	2101      	movs	r1, #1
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fdb4 	bl	8005058 <RCCEx_PLL2_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044f4:	e00c      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3324      	adds	r3, #36	; 0x24
 80044fa:	2101      	movs	r1, #1
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fe5d 	bl	80051bc <RCCEx_PLL3_Config>
 8004502:	4603      	mov	r3, r0
 8004504:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004506:	e003      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	75fb      	strb	r3, [r7, #23]
      break;
 800450c:	e000      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800450e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004510:	7dfb      	ldrb	r3, [r7, #23]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004516:	4b77      	ldr	r3, [pc, #476]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	f023 0207 	bic.w	r2, r3, #7
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004522:	4974      	ldr	r1, [pc, #464]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004524:	4313      	orrs	r3, r2
 8004526:	654b      	str	r3, [r1, #84]	; 0x54
 8004528:	e001      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452a:	7dfb      	ldrb	r3, [r7, #23]
 800452c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d03a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004540:	2b05      	cmp	r3, #5
 8004542:	d821      	bhi.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004544:	a201      	add	r2, pc, #4	; (adr r2, 800454c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	0800458f 	.word	0x0800458f
 8004550:	08004565 	.word	0x08004565
 8004554:	08004577 	.word	0x08004577
 8004558:	0800458f 	.word	0x0800458f
 800455c:	0800458f 	.word	0x0800458f
 8004560:	0800458f 	.word	0x0800458f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3304      	adds	r3, #4
 8004568:	2101      	movs	r1, #1
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fd74 	bl	8005058 <RCCEx_PLL2_Config>
 8004570:	4603      	mov	r3, r0
 8004572:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004574:	e00c      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3324      	adds	r3, #36	; 0x24
 800457a:	2101      	movs	r1, #1
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fe1d 	bl	80051bc <RCCEx_PLL3_Config>
 8004582:	4603      	mov	r3, r0
 8004584:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004586:	e003      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	75fb      	strb	r3, [r7, #23]
      break;
 800458c:	e000      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800458e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004590:	7dfb      	ldrb	r3, [r7, #23]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004596:	4b57      	ldr	r3, [pc, #348]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	f023 0207 	bic.w	r2, r3, #7
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	4953      	ldr	r1, [pc, #332]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	658b      	str	r3, [r1, #88]	; 0x58
 80045aa:	e001      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d04b      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045c6:	d02e      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80045c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045cc:	d828      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80045ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d2:	d02a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d8:	d822      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80045da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045de:	d026      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80045e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045e4:	d81c      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80045e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ea:	d010      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80045ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045f0:	d816      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01d      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80045f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045fa:	d111      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fd28 	bl	8005058 <RCCEx_PLL2_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800460c:	e012      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3324      	adds	r3, #36	; 0x24
 8004612:	2102      	movs	r1, #2
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fdd1 	bl	80051bc <RCCEx_PLL3_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800461e:	e009      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	75fb      	strb	r3, [r7, #23]
      break;
 8004624:	e006      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004626:	bf00      	nop
 8004628:	e004      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800463a:	4b2e      	ldr	r3, [pc, #184]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004648:	492a      	ldr	r1, [pc, #168]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800464a:	4313      	orrs	r3, r2
 800464c:	654b      	str	r3, [r1, #84]	; 0x54
 800464e:	e001      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	d04d      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004666:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800466a:	d02e      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800466c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004670:	d828      	bhi.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004676:	d02a      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d822      	bhi.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800467e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004682:	d026      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004684:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004688:	d81c      	bhi.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800468a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468e:	d010      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004694:	d816      	bhi.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01d      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800469a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469e:	d111      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3304      	adds	r3, #4
 80046a4:	2100      	movs	r1, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fcd6 	bl	8005058 <RCCEx_PLL2_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046b0:	e012      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3324      	adds	r3, #36	; 0x24
 80046b6:	2102      	movs	r1, #2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fd7f 	bl	80051bc <RCCEx_PLL3_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046c2:	e009      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	75fb      	strb	r3, [r7, #23]
      break;
 80046c8:	e006      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046ca:	bf00      	nop
 80046cc:	e004      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046ce:	bf00      	nop
 80046d0:	e002      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046d2:	bf00      	nop
 80046d4:	e000      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d8:	7dfb      	ldrb	r3, [r7, #23]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046de:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ec:	4901      	ldr	r1, [pc, #4]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	658b      	str	r3, [r1, #88]	; 0x58
 80046f2:	e003      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80046f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
 80046fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004704:	2b00      	cmp	r3, #0
 8004706:	d04b      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800470e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004712:	d02e      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004714:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004718:	d828      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800471a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471e:	d02a      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004724:	d822      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004726:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800472a:	d026      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800472c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004730:	d81c      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004736:	d010      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800473c:	d816      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800473e:	2b00      	cmp	r3, #0
 8004740:	d01d      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004746:	d111      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3304      	adds	r3, #4
 800474c:	2100      	movs	r1, #0
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fc82 	bl	8005058 <RCCEx_PLL2_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004758:	e012      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3324      	adds	r3, #36	; 0x24
 800475e:	2102      	movs	r1, #2
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fd2b 	bl	80051bc <RCCEx_PLL3_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800476a:	e009      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	75fb      	strb	r3, [r7, #23]
      break;
 8004770:	e006      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004772:	bf00      	nop
 8004774:	e004      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004776:	bf00      	nop
 8004778:	e002      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800477a:	bf00      	nop
 800477c:	e000      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800477e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004786:	4b9d      	ldr	r3, [pc, #628]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004794:	4999      	ldr	r1, [pc, #612]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004796:	4313      	orrs	r3, r2
 8004798:	658b      	str	r3, [r1, #88]	; 0x58
 800479a:	e001      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	7dfb      	ldrb	r3, [r7, #23]
 800479e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b6:	d10a      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3324      	adds	r3, #36	; 0x24
 80047bc:	2102      	movs	r1, #2
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fcfc 	bl	80051bc <RCCEx_PLL3_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047ce:	4b8b      	ldr	r3, [pc, #556]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047dc:	4987      	ldr	r1, [pc, #540]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01a      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f8:	d10a      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3324      	adds	r3, #36	; 0x24
 80047fe:	2102      	movs	r1, #2
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fcdb 	bl	80051bc <RCCEx_PLL3_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004810:	4b7a      	ldr	r3, [pc, #488]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800481e:	4977      	ldr	r1, [pc, #476]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004820:	4313      	orrs	r3, r2
 8004822:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d034      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004836:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800483a:	d01d      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800483c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004840:	d817      	bhi.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484a:	d009      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800484c:	e011      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3304      	adds	r3, #4
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fbff 	bl	8005058 <RCCEx_PLL2_Config>
 800485a:	4603      	mov	r3, r0
 800485c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800485e:	e00c      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3324      	adds	r3, #36	; 0x24
 8004864:	2102      	movs	r1, #2
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fca8 	bl	80051bc <RCCEx_PLL3_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004870:	e003      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	75fb      	strb	r3, [r7, #23]
      break;
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004880:	4b5e      	ldr	r3, [pc, #376]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800488e:	495b      	ldr	r1, [pc, #364]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004890:	4313      	orrs	r3, r2
 8004892:	658b      	str	r3, [r1, #88]	; 0x58
 8004894:	e001      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d033      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048b0:	d01c      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80048b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048b6:	d816      	bhi.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80048b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048bc:	d003      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80048be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048c2:	d007      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80048c4:	e00f      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c6:	4b4d      	ldr	r3, [pc, #308]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	4a4c      	ldr	r2, [pc, #304]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80048d2:	e00c      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3324      	adds	r3, #36	; 0x24
 80048d8:	2101      	movs	r1, #1
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fc6e 	bl	80051bc <RCCEx_PLL3_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80048e4:	e003      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	75fb      	strb	r3, [r7, #23]
      break;
 80048ea:	e000      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80048ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048f4:	4b41      	ldr	r3, [pc, #260]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004902:	493e      	ldr	r1, [pc, #248]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004904:	4313      	orrs	r3, r2
 8004906:	654b      	str	r3, [r1, #84]	; 0x54
 8004908:	e001      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490a:	7dfb      	ldrb	r3, [r7, #23]
 800490c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d029      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004926:	d007      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004928:	e00f      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800492a:	4b34      	ldr	r3, [pc, #208]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	4a33      	ldr	r2, [pc, #204]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004934:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004936:	e00b      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	2102      	movs	r1, #2
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fb8a 	bl	8005058 <RCCEx_PLL2_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004948:	e002      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
      break;
 800494e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004950:	7dfb      	ldrb	r3, [r7, #23]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004956:	4b29      	ldr	r3, [pc, #164]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004962:	4926      	ldr	r1, [pc, #152]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004964:	4313      	orrs	r3, r2
 8004966:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004968:	e001      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496a:	7dfb      	ldrb	r3, [r7, #23]
 800496c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3324      	adds	r3, #36	; 0x24
 800497e:	2102      	movs	r1, #2
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fc1b 	bl	80051bc <RCCEx_PLL3_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d033      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a4:	d017      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80049a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049aa:	d811      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80049ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b0:	d013      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80049b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b6:	d80b      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d010      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80049bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c0:	d106      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c2:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	4a0d      	ldr	r2, [pc, #52]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80049ce:	e007      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	75fb      	strb	r3, [r7, #23]
      break;
 80049d4:	e004      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80049d6:	bf00      	nop
 80049d8:	e002      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80049da:	bf00      	nop
 80049dc:	e000      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80049de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049e6:	4b05      	ldr	r3, [pc, #20]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049f2:	4902      	ldr	r1, [pc, #8]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	654b      	str	r3, [r1, #84]	; 0x54
 80049f8:	e004      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80049fa:	bf00      	nop
 80049fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a00:	7dfb      	ldrb	r3, [r7, #23]
 8004a02:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a10:	4b31      	ldr	r3, [pc, #196]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1c:	492e      	ldr	r1, [pc, #184]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a2e:	4b2a      	ldr	r3, [pc, #168]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a3c:	4926      	ldr	r1, [pc, #152]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d008      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a4e:	4b22      	ldr	r3, [pc, #136]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a52:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a5a:	491f      	ldr	r1, [pc, #124]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	4a19      	ldr	r2, [pc, #100]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a76:	6113      	str	r3, [r2, #16]
 8004a78:	4b17      	ldr	r3, [pc, #92]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a82:	4915      	ldr	r1, [pc, #84]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	da08      	bge.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a90:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9c:	490e      	ldr	r1, [pc, #56]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004aae:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abc:	4906      	ldr	r1, [pc, #24]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004ac2:	7dbb      	ldrb	r3, [r7, #22]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e000      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	58024400 	.word	0x58024400

08004adc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ae0:	f7ff f85a 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	091b      	lsrs	r3, r3, #4
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	4904      	ldr	r1, [pc, #16]	; (8004b04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004af2:	5ccb      	ldrb	r3, [r1, r3]
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	58024400 	.word	0x58024400
 8004b04:	0800a8d4 	.word	0x0800a8d4

08004b08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b089      	sub	sp, #36	; 0x24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b10:	4ba1      	ldr	r3, [pc, #644]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004b1a:	4b9f      	ldr	r3, [pc, #636]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	0b1b      	lsrs	r3, r3, #12
 8004b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b26:	4b9c      	ldr	r3, [pc, #624]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2a:	091b      	lsrs	r3, r3, #4
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004b32:	4b99      	ldr	r3, [pc, #612]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	08db      	lsrs	r3, r3, #3
 8004b38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	fb02 f303 	mul.w	r3, r2, r3
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8111 	beq.w	8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	f000 8083 	beq.w	8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	f200 80a1 	bhi.w	8004ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d056      	beq.n	8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b72:	e099      	b.n	8004ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b74:	4b88      	ldr	r3, [pc, #544]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d02d      	beq.n	8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b80:	4b85      	ldr	r3, [pc, #532]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	08db      	lsrs	r3, r3, #3
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	4a84      	ldr	r2, [pc, #528]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b90:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	ee07 3a90 	vmov	s15, r3
 8004b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004baa:	4b7b      	ldr	r3, [pc, #492]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bbe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004bda:	e087      	b.n	8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bee:	4b6a      	ldr	r3, [pc, #424]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c1e:	e065      	b.n	8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c32:	4b59      	ldr	r3, [pc, #356]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c62:	e043      	b.n	8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c76:	4b48      	ldr	r3, [pc, #288]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ca6:	e021      	b.n	8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cba:	4b37      	ldr	r3, [pc, #220]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cce:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004cec:	4b2a      	ldr	r3, [pc, #168]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	0a5b      	lsrs	r3, r3, #9
 8004cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d12:	ee17 2a90 	vmov	r2, s15
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004d1a:	4b1f      	ldr	r3, [pc, #124]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	0c1b      	lsrs	r3, r3, #16
 8004d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d24:	ee07 3a90 	vmov	s15, r3
 8004d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d34:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d40:	ee17 2a90 	vmov	r2, s15
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004d48:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	0e1b      	lsrs	r3, r3, #24
 8004d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d52:	ee07 3a90 	vmov	s15, r3
 8004d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d6e:	ee17 2a90 	vmov	r2, s15
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d76:	e008      	b.n	8004d8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	609a      	str	r2, [r3, #8]
}
 8004d8a:	bf00      	nop
 8004d8c:	3724      	adds	r7, #36	; 0x24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	58024400 	.word	0x58024400
 8004d9c:	03d09000 	.word	0x03d09000
 8004da0:	46000000 	.word	0x46000000
 8004da4:	4c742400 	.word	0x4c742400
 8004da8:	4a742400 	.word	0x4a742400
 8004dac:	4af42400 	.word	0x4af42400

08004db0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b089      	sub	sp, #36	; 0x24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004db8:	4ba1      	ldr	r3, [pc, #644]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004dc2:	4b9f      	ldr	r3, [pc, #636]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	0d1b      	lsrs	r3, r3, #20
 8004dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dcc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004dce:	4b9c      	ldr	r3, [pc, #624]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	0a1b      	lsrs	r3, r3, #8
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004dda:	4b99      	ldr	r3, [pc, #612]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	08db      	lsrs	r3, r3, #3
 8004de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	fb02 f303 	mul.w	r3, r2, r3
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8111 	beq.w	8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	f000 8083 	beq.w	8004f0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	f200 80a1 	bhi.w	8004f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d056      	beq.n	8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e1a:	e099      	b.n	8004f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e1c:	4b88      	ldr	r3, [pc, #544]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d02d      	beq.n	8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e28:	4b85      	ldr	r3, [pc, #532]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	08db      	lsrs	r3, r3, #3
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	4a84      	ldr	r2, [pc, #528]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
 8004e38:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	ee07 3a90 	vmov	s15, r3
 8004e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e52:	4b7b      	ldr	r3, [pc, #492]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e82:	e087      	b.n	8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e96:	4b6a      	ldr	r3, [pc, #424]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ec6:	e065      	b.n	8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005050 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eda:	4b59      	ldr	r3, [pc, #356]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f0a:	e043      	b.n	8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f1e:	4b48      	ldr	r3, [pc, #288]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f4e:	e021      	b.n	8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005050 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f62:	4b37      	ldr	r3, [pc, #220]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004f94:	4b2a      	ldr	r3, [pc, #168]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	0a5b      	lsrs	r3, r3, #9
 8004f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004faa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fba:	ee17 2a90 	vmov	r2, s15
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004fc2:	4b1f      	ldr	r3, [pc, #124]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	0c1b      	lsrs	r3, r3, #16
 8004fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fcc:	ee07 3a90 	vmov	s15, r3
 8004fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe8:	ee17 2a90 	vmov	r2, s15
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004ff0:	4b13      	ldr	r3, [pc, #76]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	0e1b      	lsrs	r3, r3, #24
 8004ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800500a:	edd7 6a07 	vldr	s13, [r7, #28]
 800500e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005016:	ee17 2a90 	vmov	r2, s15
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800501e:	e008      	b.n	8005032 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	609a      	str	r2, [r3, #8]
}
 8005032:	bf00      	nop
 8005034:	3724      	adds	r7, #36	; 0x24
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	58024400 	.word	0x58024400
 8005044:	03d09000 	.word	0x03d09000
 8005048:	46000000 	.word	0x46000000
 800504c:	4c742400 	.word	0x4c742400
 8005050:	4a742400 	.word	0x4a742400
 8005054:	4af42400 	.word	0x4af42400

08005058 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005066:	4b53      	ldr	r3, [pc, #332]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	2b03      	cmp	r3, #3
 8005070:	d101      	bne.n	8005076 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e099      	b.n	80051aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005076:	4b4f      	ldr	r3, [pc, #316]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a4e      	ldr	r2, [pc, #312]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800507c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005082:	f7fc fb6f 	bl	8001764 <HAL_GetTick>
 8005086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005088:	e008      	b.n	800509c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800508a:	f7fc fb6b 	bl	8001764 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e086      	b.n	80051aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800509c:	4b45      	ldr	r3, [pc, #276]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f0      	bne.n	800508a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050a8:	4b42      	ldr	r3, [pc, #264]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	031b      	lsls	r3, r3, #12
 80050b6:	493f      	ldr	r1, [pc, #252]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	628b      	str	r3, [r1, #40]	; 0x28
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	025b      	lsls	r3, r3, #9
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	061b      	lsls	r3, r3, #24
 80050e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050ec:	4931      	ldr	r1, [pc, #196]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80050f2:	4b30      	ldr	r3, [pc, #192]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	492d      	ldr	r1, [pc, #180]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005100:	4313      	orrs	r3, r2
 8005102:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005104:	4b2b      	ldr	r3, [pc, #172]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	f023 0220 	bic.w	r2, r3, #32
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	4928      	ldr	r1, [pc, #160]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005112:	4313      	orrs	r3, r2
 8005114:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005116:	4b27      	ldr	r3, [pc, #156]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	4a26      	ldr	r2, [pc, #152]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800511c:	f023 0310 	bic.w	r3, r3, #16
 8005120:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005122:	4b24      	ldr	r3, [pc, #144]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005126:	4b24      	ldr	r3, [pc, #144]	; (80051b8 <RCCEx_PLL2_Config+0x160>)
 8005128:	4013      	ands	r3, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	69d2      	ldr	r2, [r2, #28]
 800512e:	00d2      	lsls	r2, r2, #3
 8005130:	4920      	ldr	r1, [pc, #128]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005132:	4313      	orrs	r3, r2
 8005134:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005136:	4b1f      	ldr	r3, [pc, #124]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800513c:	f043 0310 	orr.w	r3, r3, #16
 8005140:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005148:	4b1a      	ldr	r3, [pc, #104]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800514e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005152:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005154:	e00f      	b.n	8005176 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d106      	bne.n	800516a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800515c:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	4a14      	ldr	r2, [pc, #80]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005166:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005168:	e005      	b.n	8005176 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800516a:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	4a11      	ldr	r2, [pc, #68]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005170:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005174:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005176:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a0e      	ldr	r2, [pc, #56]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800517c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005182:	f7fc faef 	bl	8001764 <HAL_GetTick>
 8005186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005188:	e008      	b.n	800519c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800518a:	f7fc faeb 	bl	8001764 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e006      	b.n	80051aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0f0      	beq.n	800518a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	58024400 	.word	0x58024400
 80051b8:	ffff0007 	.word	0xffff0007

080051bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051ca:	4b53      	ldr	r3, [pc, #332]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d101      	bne.n	80051da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e099      	b.n	800530e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051da:	4b4f      	ldr	r3, [pc, #316]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a4e      	ldr	r2, [pc, #312]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80051e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e6:	f7fc fabd 	bl	8001764 <HAL_GetTick>
 80051ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051ec:	e008      	b.n	8005200 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80051ee:	f7fc fab9 	bl	8001764 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e086      	b.n	800530e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005200:	4b45      	ldr	r3, [pc, #276]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f0      	bne.n	80051ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800520c:	4b42      	ldr	r3, [pc, #264]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	051b      	lsls	r3, r3, #20
 800521a:	493f      	ldr	r1, [pc, #252]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 800521c:	4313      	orrs	r3, r2
 800521e:	628b      	str	r3, [r1, #40]	; 0x28
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	3b01      	subs	r3, #1
 8005226:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	3b01      	subs	r3, #1
 8005230:	025b      	lsls	r3, r3, #9
 8005232:	b29b      	uxth	r3, r3
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	3b01      	subs	r3, #1
 800523c:	041b      	lsls	r3, r3, #16
 800523e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	3b01      	subs	r3, #1
 800524a:	061b      	lsls	r3, r3, #24
 800524c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005250:	4931      	ldr	r1, [pc, #196]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005252:	4313      	orrs	r3, r2
 8005254:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005256:	4b30      	ldr	r3, [pc, #192]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	492d      	ldr	r1, [pc, #180]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005264:	4313      	orrs	r3, r2
 8005266:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005268:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	4928      	ldr	r1, [pc, #160]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005276:	4313      	orrs	r3, r2
 8005278:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800527a:	4b27      	ldr	r3, [pc, #156]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	4a26      	ldr	r2, [pc, #152]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005284:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005286:	4b24      	ldr	r3, [pc, #144]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800528a:	4b24      	ldr	r3, [pc, #144]	; (800531c <RCCEx_PLL3_Config+0x160>)
 800528c:	4013      	ands	r3, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	69d2      	ldr	r2, [r2, #28]
 8005292:	00d2      	lsls	r2, r2, #3
 8005294:	4920      	ldr	r1, [pc, #128]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005296:	4313      	orrs	r3, r2
 8005298:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800529a:	4b1f      	ldr	r3, [pc, #124]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052ac:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	4a19      	ldr	r2, [pc, #100]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052b8:	e00f      	b.n	80052da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d106      	bne.n	80052ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052c0:	4b15      	ldr	r3, [pc, #84]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	4a14      	ldr	r2, [pc, #80]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052cc:	e005      	b.n	80052da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052ce:	4b12      	ldr	r3, [pc, #72]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	4a11      	ldr	r2, [pc, #68]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052da:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a0e      	ldr	r2, [pc, #56]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e6:	f7fc fa3d 	bl	8001764 <HAL_GetTick>
 80052ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052ec:	e008      	b.n	8005300 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80052ee:	f7fc fa39 	bl	8001764 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e006      	b.n	800530e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0f0      	beq.n	80052ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	58024400 	.word	0x58024400
 800531c:	ffff0007 	.word	0xffff0007

08005320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e049      	b.n	80053c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fb ff82 	bl	8001250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f000 fda0 	bl	8005ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d001      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e054      	b.n	8005492 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a26      	ldr	r2, [pc, #152]	; (80054a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d022      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x80>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005412:	d01d      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x80>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a22      	ldr	r2, [pc, #136]	; (80054a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d018      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x80>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a21      	ldr	r2, [pc, #132]	; (80054a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d013      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x80>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1f      	ldr	r2, [pc, #124]	; (80054ac <HAL_TIM_Base_Start_IT+0xdc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00e      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x80>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1e      	ldr	r2, [pc, #120]	; (80054b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d009      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x80>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x80>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d115      	bne.n	800547c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	4b19      	ldr	r3, [pc, #100]	; (80054bc <HAL_TIM_Base_Start_IT+0xec>)
 8005458:	4013      	ands	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b06      	cmp	r3, #6
 8005460:	d015      	beq.n	800548e <HAL_TIM_Base_Start_IT+0xbe>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005468:	d011      	beq.n	800548e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0201 	orr.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547a:	e008      	b.n	800548e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	e000      	b.n	8005490 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40010000 	.word	0x40010000
 80054a4:	40000400 	.word	0x40000400
 80054a8:	40000800 	.word	0x40000800
 80054ac:	40000c00 	.word	0x40000c00
 80054b0:	40010400 	.word	0x40010400
 80054b4:	40001800 	.word	0x40001800
 80054b8:	40014000 	.word	0x40014000
 80054bc:	00010007 	.word	0x00010007

080054c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0201 	bic.w	r2, r2, #1
 80054d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6a1a      	ldr	r2, [r3, #32]
 80054de:	f241 1311 	movw	r3, #4369	; 0x1111
 80054e2:	4013      	ands	r3, r2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10f      	bne.n	8005508 <HAL_TIM_Base_Stop_IT+0x48>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6a1a      	ldr	r2, [r3, #32]
 80054ee:	f240 4344 	movw	r3, #1092	; 0x444
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d107      	bne.n	8005508 <HAL_TIM_Base_Stop_IT+0x48>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0201 	bic.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e049      	b.n	80055c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d106      	bne.n	800554a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f841 	bl	80055cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3304      	adds	r3, #4
 800555a:	4619      	mov	r1, r3
 800555c:	4610      	mov	r0, r2
 800555e:	f000 fca1 	bl	8005ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <HAL_TIM_PWM_Start+0x24>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	e03c      	b.n	800567e <HAL_TIM_PWM_Start+0x9e>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	2b04      	cmp	r3, #4
 8005608:	d109      	bne.n	800561e <HAL_TIM_PWM_Start+0x3e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b01      	cmp	r3, #1
 8005614:	bf14      	ite	ne
 8005616:	2301      	movne	r3, #1
 8005618:	2300      	moveq	r3, #0
 800561a:	b2db      	uxtb	r3, r3
 800561c:	e02f      	b.n	800567e <HAL_TIM_PWM_Start+0x9e>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b08      	cmp	r3, #8
 8005622:	d109      	bne.n	8005638 <HAL_TIM_PWM_Start+0x58>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	bf14      	ite	ne
 8005630:	2301      	movne	r3, #1
 8005632:	2300      	moveq	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	e022      	b.n	800567e <HAL_TIM_PWM_Start+0x9e>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b0c      	cmp	r3, #12
 800563c:	d109      	bne.n	8005652 <HAL_TIM_PWM_Start+0x72>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b01      	cmp	r3, #1
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	e015      	b.n	800567e <HAL_TIM_PWM_Start+0x9e>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b10      	cmp	r3, #16
 8005656:	d109      	bne.n	800566c <HAL_TIM_PWM_Start+0x8c>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	bf14      	ite	ne
 8005664:	2301      	movne	r3, #1
 8005666:	2300      	moveq	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	e008      	b.n	800567e <HAL_TIM_PWM_Start+0x9e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b01      	cmp	r3, #1
 8005676:	bf14      	ite	ne
 8005678:	2301      	movne	r3, #1
 800567a:	2300      	moveq	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e0a1      	b.n	80057ca <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <HAL_TIM_PWM_Start+0xb6>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005694:	e023      	b.n	80056de <HAL_TIM_PWM_Start+0xfe>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b04      	cmp	r3, #4
 800569a:	d104      	bne.n	80056a6 <HAL_TIM_PWM_Start+0xc6>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056a4:	e01b      	b.n	80056de <HAL_TIM_PWM_Start+0xfe>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d104      	bne.n	80056b6 <HAL_TIM_PWM_Start+0xd6>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b4:	e013      	b.n	80056de <HAL_TIM_PWM_Start+0xfe>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b0c      	cmp	r3, #12
 80056ba:	d104      	bne.n	80056c6 <HAL_TIM_PWM_Start+0xe6>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056c4:	e00b      	b.n	80056de <HAL_TIM_PWM_Start+0xfe>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d104      	bne.n	80056d6 <HAL_TIM_PWM_Start+0xf6>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056d4:	e003      	b.n	80056de <HAL_TIM_PWM_Start+0xfe>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2201      	movs	r2, #1
 80056e4:	6839      	ldr	r1, [r7, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 ffea 	bl	80066c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a38      	ldr	r2, [pc, #224]	; (80057d4 <HAL_TIM_PWM_Start+0x1f4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d013      	beq.n	800571e <HAL_TIM_PWM_Start+0x13e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a37      	ldr	r2, [pc, #220]	; (80057d8 <HAL_TIM_PWM_Start+0x1f8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00e      	beq.n	800571e <HAL_TIM_PWM_Start+0x13e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a35      	ldr	r2, [pc, #212]	; (80057dc <HAL_TIM_PWM_Start+0x1fc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d009      	beq.n	800571e <HAL_TIM_PWM_Start+0x13e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a34      	ldr	r2, [pc, #208]	; (80057e0 <HAL_TIM_PWM_Start+0x200>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d004      	beq.n	800571e <HAL_TIM_PWM_Start+0x13e>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a32      	ldr	r2, [pc, #200]	; (80057e4 <HAL_TIM_PWM_Start+0x204>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d101      	bne.n	8005722 <HAL_TIM_PWM_Start+0x142>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <HAL_TIM_PWM_Start+0x144>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d007      	beq.n	8005738 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005736:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a25      	ldr	r2, [pc, #148]	; (80057d4 <HAL_TIM_PWM_Start+0x1f4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d022      	beq.n	8005788 <HAL_TIM_PWM_Start+0x1a8>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574a:	d01d      	beq.n	8005788 <HAL_TIM_PWM_Start+0x1a8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a25      	ldr	r2, [pc, #148]	; (80057e8 <HAL_TIM_PWM_Start+0x208>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d018      	beq.n	8005788 <HAL_TIM_PWM_Start+0x1a8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a24      	ldr	r2, [pc, #144]	; (80057ec <HAL_TIM_PWM_Start+0x20c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d013      	beq.n	8005788 <HAL_TIM_PWM_Start+0x1a8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a22      	ldr	r2, [pc, #136]	; (80057f0 <HAL_TIM_PWM_Start+0x210>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00e      	beq.n	8005788 <HAL_TIM_PWM_Start+0x1a8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a1a      	ldr	r2, [pc, #104]	; (80057d8 <HAL_TIM_PWM_Start+0x1f8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d009      	beq.n	8005788 <HAL_TIM_PWM_Start+0x1a8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1e      	ldr	r2, [pc, #120]	; (80057f4 <HAL_TIM_PWM_Start+0x214>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <HAL_TIM_PWM_Start+0x1a8>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a16      	ldr	r2, [pc, #88]	; (80057dc <HAL_TIM_PWM_Start+0x1fc>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d115      	bne.n	80057b4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <HAL_TIM_PWM_Start+0x218>)
 8005790:	4013      	ands	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b06      	cmp	r3, #6
 8005798:	d015      	beq.n	80057c6 <HAL_TIM_PWM_Start+0x1e6>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a0:	d011      	beq.n	80057c6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0201 	orr.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b2:	e008      	b.n	80057c6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	e000      	b.n	80057c8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40010000 	.word	0x40010000
 80057d8:	40010400 	.word	0x40010400
 80057dc:	40014000 	.word	0x40014000
 80057e0:	40014400 	.word	0x40014400
 80057e4:	40014800 	.word	0x40014800
 80057e8:	40000400 	.word	0x40000400
 80057ec:	40000800 	.word	0x40000800
 80057f0:	40000c00 	.word	0x40000c00
 80057f4:	40001800 	.word	0x40001800
 80057f8:	00010007 	.word	0x00010007

080057fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b02      	cmp	r3, #2
 8005810:	d122      	bne.n	8005858 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b02      	cmp	r3, #2
 800581e:	d11b      	bne.n	8005858 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0202 	mvn.w	r2, #2
 8005828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fb12 	bl	8005e68 <HAL_TIM_IC_CaptureCallback>
 8005844:	e005      	b.n	8005852 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fb04 	bl	8005e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fb15 	bl	8005e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b04      	cmp	r3, #4
 8005864:	d122      	bne.n	80058ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b04      	cmp	r3, #4
 8005872:	d11b      	bne.n	80058ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0204 	mvn.w	r2, #4
 800587c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2202      	movs	r2, #2
 8005882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fae8 	bl	8005e68 <HAL_TIM_IC_CaptureCallback>
 8005898:	e005      	b.n	80058a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fada 	bl	8005e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 faeb 	bl	8005e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b08      	cmp	r3, #8
 80058b8:	d122      	bne.n	8005900 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d11b      	bne.n	8005900 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0208 	mvn.w	r2, #8
 80058d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2204      	movs	r2, #4
 80058d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fabe 	bl	8005e68 <HAL_TIM_IC_CaptureCallback>
 80058ec:	e005      	b.n	80058fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fab0 	bl	8005e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fac1 	bl	8005e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b10      	cmp	r3, #16
 800590c:	d122      	bne.n	8005954 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0310 	and.w	r3, r3, #16
 8005918:	2b10      	cmp	r3, #16
 800591a:	d11b      	bne.n	8005954 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0210 	mvn.w	r2, #16
 8005924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2208      	movs	r2, #8
 800592a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fa94 	bl	8005e68 <HAL_TIM_IC_CaptureCallback>
 8005940:	e005      	b.n	800594e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fa86 	bl	8005e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fa97 	bl	8005e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b01      	cmp	r3, #1
 8005960:	d10e      	bne.n	8005980 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b01      	cmp	r3, #1
 800596e:	d107      	bne.n	8005980 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0201 	mvn.w	r2, #1
 8005978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fb fb4e 	bl	800101c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598a:	2b80      	cmp	r3, #128	; 0x80
 800598c:	d10e      	bne.n	80059ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005998:	2b80      	cmp	r3, #128	; 0x80
 800599a:	d107      	bne.n	80059ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 ffc6 	bl	8006938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ba:	d10e      	bne.n	80059da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c6:	2b80      	cmp	r3, #128	; 0x80
 80059c8:	d107      	bne.n	80059da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 ffb9 	bl	800694c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d10e      	bne.n	8005a06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d107      	bne.n	8005a06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fa45 	bl	8005e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d10e      	bne.n	8005a32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d107      	bne.n	8005a32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f06f 0220 	mvn.w	r2, #32
 8005a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 ff79 	bl	8006924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e0ff      	b.n	8005c5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b14      	cmp	r3, #20
 8005a66:	f200 80f0 	bhi.w	8005c4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a6a:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a70:	08005ac5 	.word	0x08005ac5
 8005a74:	08005c4b 	.word	0x08005c4b
 8005a78:	08005c4b 	.word	0x08005c4b
 8005a7c:	08005c4b 	.word	0x08005c4b
 8005a80:	08005b05 	.word	0x08005b05
 8005a84:	08005c4b 	.word	0x08005c4b
 8005a88:	08005c4b 	.word	0x08005c4b
 8005a8c:	08005c4b 	.word	0x08005c4b
 8005a90:	08005b47 	.word	0x08005b47
 8005a94:	08005c4b 	.word	0x08005c4b
 8005a98:	08005c4b 	.word	0x08005c4b
 8005a9c:	08005c4b 	.word	0x08005c4b
 8005aa0:	08005b87 	.word	0x08005b87
 8005aa4:	08005c4b 	.word	0x08005c4b
 8005aa8:	08005c4b 	.word	0x08005c4b
 8005aac:	08005c4b 	.word	0x08005c4b
 8005ab0:	08005bc9 	.word	0x08005bc9
 8005ab4:	08005c4b 	.word	0x08005c4b
 8005ab8:	08005c4b 	.word	0x08005c4b
 8005abc:	08005c4b 	.word	0x08005c4b
 8005ac0:	08005c09 	.word	0x08005c09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fa84 	bl	8005fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0208 	orr.w	r2, r2, #8
 8005ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0204 	bic.w	r2, r2, #4
 8005aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6999      	ldr	r1, [r3, #24]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	619a      	str	r2, [r3, #24]
      break;
 8005b02:	e0a5      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 faf4 	bl	80060f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6999      	ldr	r1, [r3, #24]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	021a      	lsls	r2, r3, #8
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	619a      	str	r2, [r3, #24]
      break;
 8005b44:	e084      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fb5d 	bl	800620c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0208 	orr.w	r2, r2, #8
 8005b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69da      	ldr	r2, [r3, #28]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0204 	bic.w	r2, r2, #4
 8005b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69d9      	ldr	r1, [r3, #28]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	61da      	str	r2, [r3, #28]
      break;
 8005b84:	e064      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 fbc5 	bl	800631c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69d9      	ldr	r1, [r3, #28]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	021a      	lsls	r2, r3, #8
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	61da      	str	r2, [r3, #28]
      break;
 8005bc6:	e043      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fc0e 	bl	80063f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0208 	orr.w	r2, r2, #8
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0204 	bic.w	r2, r2, #4
 8005bf2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c06:	e023      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fc52 	bl	80064b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	021a      	lsls	r2, r3, #8
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c48:	e002      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop

08005c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_TIM_ConfigClockSource+0x1c>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e0dc      	b.n	8005e3a <HAL_TIM_ConfigClockSource+0x1d6>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	4b6a      	ldr	r3, [pc, #424]	; (8005e44 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ca6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a64      	ldr	r2, [pc, #400]	; (8005e48 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	f000 80a9 	beq.w	8005e0e <HAL_TIM_ConfigClockSource+0x1aa>
 8005cbc:	4a62      	ldr	r2, [pc, #392]	; (8005e48 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	f200 80ae 	bhi.w	8005e20 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cc4:	4a61      	ldr	r2, [pc, #388]	; (8005e4c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	f000 80a1 	beq.w	8005e0e <HAL_TIM_ConfigClockSource+0x1aa>
 8005ccc:	4a5f      	ldr	r2, [pc, #380]	; (8005e4c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	f200 80a6 	bhi.w	8005e20 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cd4:	4a5e      	ldr	r2, [pc, #376]	; (8005e50 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	f000 8099 	beq.w	8005e0e <HAL_TIM_ConfigClockSource+0x1aa>
 8005cdc:	4a5c      	ldr	r2, [pc, #368]	; (8005e50 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	f200 809e 	bhi.w	8005e20 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ce4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005ce8:	f000 8091 	beq.w	8005e0e <HAL_TIM_ConfigClockSource+0x1aa>
 8005cec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005cf0:	f200 8096 	bhi.w	8005e20 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cf8:	f000 8089 	beq.w	8005e0e <HAL_TIM_ConfigClockSource+0x1aa>
 8005cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d00:	f200 808e 	bhi.w	8005e20 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d08:	d03e      	beq.n	8005d88 <HAL_TIM_ConfigClockSource+0x124>
 8005d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d0e:	f200 8087 	bhi.w	8005e20 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d16:	f000 8086 	beq.w	8005e26 <HAL_TIM_ConfigClockSource+0x1c2>
 8005d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1e:	d87f      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d20:	2b70      	cmp	r3, #112	; 0x70
 8005d22:	d01a      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0xf6>
 8005d24:	2b70      	cmp	r3, #112	; 0x70
 8005d26:	d87b      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d28:	2b60      	cmp	r3, #96	; 0x60
 8005d2a:	d050      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x16a>
 8005d2c:	2b60      	cmp	r3, #96	; 0x60
 8005d2e:	d877      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d30:	2b50      	cmp	r3, #80	; 0x50
 8005d32:	d03c      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x14a>
 8005d34:	2b50      	cmp	r3, #80	; 0x50
 8005d36:	d873      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d38:	2b40      	cmp	r3, #64	; 0x40
 8005d3a:	d058      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x18a>
 8005d3c:	2b40      	cmp	r3, #64	; 0x40
 8005d3e:	d86f      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d40:	2b30      	cmp	r3, #48	; 0x30
 8005d42:	d064      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x1aa>
 8005d44:	2b30      	cmp	r3, #48	; 0x30
 8005d46:	d86b      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	d060      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x1aa>
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	d867      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d05c      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x1aa>
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	d05a      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x1aa>
 8005d58:	e062      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6899      	ldr	r1, [r3, #8]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f000 fc89 	bl	8006680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	609a      	str	r2, [r3, #8]
      break;
 8005d86:	e04f      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	6899      	ldr	r1, [r3, #8]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f000 fc72 	bl	8006680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005daa:	609a      	str	r2, [r3, #8]
      break;
 8005dac:	e03c      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	6859      	ldr	r1, [r3, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f000 fbe2 	bl	8006584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2150      	movs	r1, #80	; 0x50
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fc3c 	bl	8006644 <TIM_ITRx_SetConfig>
      break;
 8005dcc:	e02c      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6818      	ldr	r0, [r3, #0]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	6859      	ldr	r1, [r3, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f000 fc01 	bl	80065e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2160      	movs	r1, #96	; 0x60
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fc2c 	bl	8006644 <TIM_ITRx_SetConfig>
      break;
 8005dec:	e01c      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	6859      	ldr	r1, [r3, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f000 fbc2 	bl	8006584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2140      	movs	r1, #64	; 0x40
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fc1c 	bl	8006644 <TIM_ITRx_SetConfig>
      break;
 8005e0c:	e00c      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4619      	mov	r1, r3
 8005e18:	4610      	mov	r0, r2
 8005e1a:	f000 fc13 	bl	8006644 <TIM_ITRx_SetConfig>
      break;
 8005e1e:	e003      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	73fb      	strb	r3, [r7, #15]
      break;
 8005e24:	e000      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005e26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	ffceff88 	.word	0xffceff88
 8005e48:	00100040 	.word	0x00100040
 8005e4c:	00100030 	.word	0x00100030
 8005e50:	00100020 	.word	0x00100020

08005e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a40      	ldr	r2, [pc, #256]	; (8005fb8 <TIM_Base_SetConfig+0x114>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d013      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec2:	d00f      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a3d      	ldr	r2, [pc, #244]	; (8005fbc <TIM_Base_SetConfig+0x118>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00b      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a3c      	ldr	r2, [pc, #240]	; (8005fc0 <TIM_Base_SetConfig+0x11c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d007      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a3b      	ldr	r2, [pc, #236]	; (8005fc4 <TIM_Base_SetConfig+0x120>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a3a      	ldr	r2, [pc, #232]	; (8005fc8 <TIM_Base_SetConfig+0x124>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d108      	bne.n	8005ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a2f      	ldr	r2, [pc, #188]	; (8005fb8 <TIM_Base_SetConfig+0x114>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d01f      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f04:	d01b      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2c      	ldr	r2, [pc, #176]	; (8005fbc <TIM_Base_SetConfig+0x118>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d017      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2b      	ldr	r2, [pc, #172]	; (8005fc0 <TIM_Base_SetConfig+0x11c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d013      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a2a      	ldr	r2, [pc, #168]	; (8005fc4 <TIM_Base_SetConfig+0x120>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00f      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a29      	ldr	r2, [pc, #164]	; (8005fc8 <TIM_Base_SetConfig+0x124>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00b      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a28      	ldr	r2, [pc, #160]	; (8005fcc <TIM_Base_SetConfig+0x128>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d007      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a27      	ldr	r2, [pc, #156]	; (8005fd0 <TIM_Base_SetConfig+0x12c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d003      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a26      	ldr	r2, [pc, #152]	; (8005fd4 <TIM_Base_SetConfig+0x130>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d108      	bne.n	8005f50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a10      	ldr	r2, [pc, #64]	; (8005fb8 <TIM_Base_SetConfig+0x114>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00f      	beq.n	8005f9c <TIM_Base_SetConfig+0xf8>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a12      	ldr	r2, [pc, #72]	; (8005fc8 <TIM_Base_SetConfig+0x124>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00b      	beq.n	8005f9c <TIM_Base_SetConfig+0xf8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a11      	ldr	r2, [pc, #68]	; (8005fcc <TIM_Base_SetConfig+0x128>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d007      	beq.n	8005f9c <TIM_Base_SetConfig+0xf8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a10      	ldr	r2, [pc, #64]	; (8005fd0 <TIM_Base_SetConfig+0x12c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_Base_SetConfig+0xf8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a0f      	ldr	r2, [pc, #60]	; (8005fd4 <TIM_Base_SetConfig+0x130>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d103      	bne.n	8005fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	615a      	str	r2, [r3, #20]
}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40010000 	.word	0x40010000
 8005fbc:	40000400 	.word	0x40000400
 8005fc0:	40000800 	.word	0x40000800
 8005fc4:	40000c00 	.word	0x40000c00
 8005fc8:	40010400 	.word	0x40010400
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40014400 	.word	0x40014400
 8005fd4:	40014800 	.word	0x40014800

08005fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	f023 0201 	bic.w	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4b37      	ldr	r3, [pc, #220]	; (80060e0 <TIM_OC1_SetConfig+0x108>)
 8006004:	4013      	ands	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0303 	bic.w	r3, r3, #3
 800600e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f023 0302 	bic.w	r3, r3, #2
 8006020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a2d      	ldr	r2, [pc, #180]	; (80060e4 <TIM_OC1_SetConfig+0x10c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00f      	beq.n	8006054 <TIM_OC1_SetConfig+0x7c>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a2c      	ldr	r2, [pc, #176]	; (80060e8 <TIM_OC1_SetConfig+0x110>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00b      	beq.n	8006054 <TIM_OC1_SetConfig+0x7c>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a2b      	ldr	r2, [pc, #172]	; (80060ec <TIM_OC1_SetConfig+0x114>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d007      	beq.n	8006054 <TIM_OC1_SetConfig+0x7c>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a2a      	ldr	r2, [pc, #168]	; (80060f0 <TIM_OC1_SetConfig+0x118>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d003      	beq.n	8006054 <TIM_OC1_SetConfig+0x7c>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a29      	ldr	r2, [pc, #164]	; (80060f4 <TIM_OC1_SetConfig+0x11c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d10c      	bne.n	800606e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f023 0308 	bic.w	r3, r3, #8
 800605a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f023 0304 	bic.w	r3, r3, #4
 800606c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a1c      	ldr	r2, [pc, #112]	; (80060e4 <TIM_OC1_SetConfig+0x10c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00f      	beq.n	8006096 <TIM_OC1_SetConfig+0xbe>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a1b      	ldr	r2, [pc, #108]	; (80060e8 <TIM_OC1_SetConfig+0x110>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00b      	beq.n	8006096 <TIM_OC1_SetConfig+0xbe>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a1a      	ldr	r2, [pc, #104]	; (80060ec <TIM_OC1_SetConfig+0x114>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d007      	beq.n	8006096 <TIM_OC1_SetConfig+0xbe>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a19      	ldr	r2, [pc, #100]	; (80060f0 <TIM_OC1_SetConfig+0x118>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d003      	beq.n	8006096 <TIM_OC1_SetConfig+0xbe>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a18      	ldr	r2, [pc, #96]	; (80060f4 <TIM_OC1_SetConfig+0x11c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d111      	bne.n	80060ba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800609c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	621a      	str	r2, [r3, #32]
}
 80060d4:	bf00      	nop
 80060d6:	371c      	adds	r7, #28
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	fffeff8f 	.word	0xfffeff8f
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40010400 	.word	0x40010400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800

080060f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f023 0210 	bic.w	r2, r3, #16
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4b34      	ldr	r3, [pc, #208]	; (80061f4 <TIM_OC2_SetConfig+0xfc>)
 8006124:	4013      	ands	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f023 0320 	bic.w	r3, r3, #32
 8006142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a29      	ldr	r2, [pc, #164]	; (80061f8 <TIM_OC2_SetConfig+0x100>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d003      	beq.n	8006160 <TIM_OC2_SetConfig+0x68>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a28      	ldr	r2, [pc, #160]	; (80061fc <TIM_OC2_SetConfig+0x104>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d10d      	bne.n	800617c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800617a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a1e      	ldr	r2, [pc, #120]	; (80061f8 <TIM_OC2_SetConfig+0x100>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00f      	beq.n	80061a4 <TIM_OC2_SetConfig+0xac>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a1d      	ldr	r2, [pc, #116]	; (80061fc <TIM_OC2_SetConfig+0x104>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00b      	beq.n	80061a4 <TIM_OC2_SetConfig+0xac>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a1c      	ldr	r2, [pc, #112]	; (8006200 <TIM_OC2_SetConfig+0x108>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d007      	beq.n	80061a4 <TIM_OC2_SetConfig+0xac>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a1b      	ldr	r2, [pc, #108]	; (8006204 <TIM_OC2_SetConfig+0x10c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d003      	beq.n	80061a4 <TIM_OC2_SetConfig+0xac>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a1a      	ldr	r2, [pc, #104]	; (8006208 <TIM_OC2_SetConfig+0x110>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d113      	bne.n	80061cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	621a      	str	r2, [r3, #32]
}
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	feff8fff 	.word	0xfeff8fff
 80061f8:	40010000 	.word	0x40010000
 80061fc:	40010400 	.word	0x40010400
 8006200:	40014000 	.word	0x40014000
 8006204:	40014400 	.word	0x40014400
 8006208:	40014800 	.word	0x40014800

0800620c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4b33      	ldr	r3, [pc, #204]	; (8006304 <TIM_OC3_SetConfig+0xf8>)
 8006238:	4013      	ands	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0303 	bic.w	r3, r3, #3
 8006242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a28      	ldr	r2, [pc, #160]	; (8006308 <TIM_OC3_SetConfig+0xfc>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d003      	beq.n	8006272 <TIM_OC3_SetConfig+0x66>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a27      	ldr	r2, [pc, #156]	; (800630c <TIM_OC3_SetConfig+0x100>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d10d      	bne.n	800628e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800628c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a1d      	ldr	r2, [pc, #116]	; (8006308 <TIM_OC3_SetConfig+0xfc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00f      	beq.n	80062b6 <TIM_OC3_SetConfig+0xaa>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a1c      	ldr	r2, [pc, #112]	; (800630c <TIM_OC3_SetConfig+0x100>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00b      	beq.n	80062b6 <TIM_OC3_SetConfig+0xaa>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a1b      	ldr	r2, [pc, #108]	; (8006310 <TIM_OC3_SetConfig+0x104>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d007      	beq.n	80062b6 <TIM_OC3_SetConfig+0xaa>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a1a      	ldr	r2, [pc, #104]	; (8006314 <TIM_OC3_SetConfig+0x108>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d003      	beq.n	80062b6 <TIM_OC3_SetConfig+0xaa>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a19      	ldr	r2, [pc, #100]	; (8006318 <TIM_OC3_SetConfig+0x10c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d113      	bne.n	80062de <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	621a      	str	r2, [r3, #32]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	fffeff8f 	.word	0xfffeff8f
 8006308:	40010000 	.word	0x40010000
 800630c:	40010400 	.word	0x40010400
 8006310:	40014000 	.word	0x40014000
 8006314:	40014400 	.word	0x40014400
 8006318:	40014800 	.word	0x40014800

0800631c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4b24      	ldr	r3, [pc, #144]	; (80063d8 <TIM_OC4_SetConfig+0xbc>)
 8006348:	4013      	ands	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	021b      	lsls	r3, r3, #8
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4313      	orrs	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	031b      	lsls	r3, r3, #12
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a19      	ldr	r2, [pc, #100]	; (80063dc <TIM_OC4_SetConfig+0xc0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00f      	beq.n	800639c <TIM_OC4_SetConfig+0x80>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a18      	ldr	r2, [pc, #96]	; (80063e0 <TIM_OC4_SetConfig+0xc4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00b      	beq.n	800639c <TIM_OC4_SetConfig+0x80>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <TIM_OC4_SetConfig+0xc8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d007      	beq.n	800639c <TIM_OC4_SetConfig+0x80>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <TIM_OC4_SetConfig+0xcc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d003      	beq.n	800639c <TIM_OC4_SetConfig+0x80>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a15      	ldr	r2, [pc, #84]	; (80063ec <TIM_OC4_SetConfig+0xd0>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d109      	bne.n	80063b0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	019b      	lsls	r3, r3, #6
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	621a      	str	r2, [r3, #32]
}
 80063ca:	bf00      	nop
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	feff8fff 	.word	0xfeff8fff
 80063dc:	40010000 	.word	0x40010000
 80063e0:	40010400 	.word	0x40010400
 80063e4:	40014000 	.word	0x40014000
 80063e8:	40014400 	.word	0x40014400
 80063ec:	40014800 	.word	0x40014800

080063f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4b21      	ldr	r3, [pc, #132]	; (80064a0 <TIM_OC5_SetConfig+0xb0>)
 800641c:	4013      	ands	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006430:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	041b      	lsls	r3, r3, #16
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a18      	ldr	r2, [pc, #96]	; (80064a4 <TIM_OC5_SetConfig+0xb4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00f      	beq.n	8006466 <TIM_OC5_SetConfig+0x76>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a17      	ldr	r2, [pc, #92]	; (80064a8 <TIM_OC5_SetConfig+0xb8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00b      	beq.n	8006466 <TIM_OC5_SetConfig+0x76>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a16      	ldr	r2, [pc, #88]	; (80064ac <TIM_OC5_SetConfig+0xbc>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d007      	beq.n	8006466 <TIM_OC5_SetConfig+0x76>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a15      	ldr	r2, [pc, #84]	; (80064b0 <TIM_OC5_SetConfig+0xc0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d003      	beq.n	8006466 <TIM_OC5_SetConfig+0x76>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a14      	ldr	r2, [pc, #80]	; (80064b4 <TIM_OC5_SetConfig+0xc4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d109      	bne.n	800647a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800646c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	021b      	lsls	r3, r3, #8
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	621a      	str	r2, [r3, #32]
}
 8006494:	bf00      	nop
 8006496:	371c      	adds	r7, #28
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	fffeff8f 	.word	0xfffeff8f
 80064a4:	40010000 	.word	0x40010000
 80064a8:	40010400 	.word	0x40010400
 80064ac:	40014000 	.word	0x40014000
 80064b0:	40014400 	.word	0x40014400
 80064b4:	40014800 	.word	0x40014800

080064b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4b22      	ldr	r3, [pc, #136]	; (800656c <TIM_OC6_SetConfig+0xb4>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	051b      	lsls	r3, r3, #20
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a19      	ldr	r2, [pc, #100]	; (8006570 <TIM_OC6_SetConfig+0xb8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00f      	beq.n	8006530 <TIM_OC6_SetConfig+0x78>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a18      	ldr	r2, [pc, #96]	; (8006574 <TIM_OC6_SetConfig+0xbc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00b      	beq.n	8006530 <TIM_OC6_SetConfig+0x78>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a17      	ldr	r2, [pc, #92]	; (8006578 <TIM_OC6_SetConfig+0xc0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d007      	beq.n	8006530 <TIM_OC6_SetConfig+0x78>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a16      	ldr	r2, [pc, #88]	; (800657c <TIM_OC6_SetConfig+0xc4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <TIM_OC6_SetConfig+0x78>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a15      	ldr	r2, [pc, #84]	; (8006580 <TIM_OC6_SetConfig+0xc8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d109      	bne.n	8006544 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006536:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	029b      	lsls	r3, r3, #10
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	feff8fff 	.word	0xfeff8fff
 8006570:	40010000 	.word	0x40010000
 8006574:	40010400 	.word	0x40010400
 8006578:	40014000 	.word	0x40014000
 800657c:	40014400 	.word	0x40014400
 8006580:	40014800 	.word	0x40014800

08006584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	f023 0201 	bic.w	r2, r3, #1
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f023 030a 	bic.w	r3, r3, #10
 80065c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	621a      	str	r2, [r3, #32]
}
 80065d6:	bf00      	nop
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b087      	sub	sp, #28
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	f023 0210 	bic.w	r2, r3, #16
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800660c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	031b      	lsls	r3, r3, #12
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800661e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	621a      	str	r2, [r3, #32]
}
 8006636:	bf00      	nop
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
	...

08006644 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4b09      	ldr	r3, [pc, #36]	; (800667c <TIM_ITRx_SetConfig+0x38>)
 8006658:	4013      	ands	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4313      	orrs	r3, r2
 8006662:	f043 0307 	orr.w	r3, r3, #7
 8006666:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	609a      	str	r2, [r3, #8]
}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	ffcfff8f 	.word	0xffcfff8f

08006680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800669a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	021a      	lsls	r2, r3, #8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	609a      	str	r2, [r3, #8]
}
 80066b4:	bf00      	nop
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2201      	movs	r2, #1
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a1a      	ldr	r2, [r3, #32]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	401a      	ands	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a1a      	ldr	r2, [r3, #32]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f003 031f 	and.w	r3, r3, #31
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	fa01 f303 	lsl.w	r3, r1, r3
 80066f8:	431a      	orrs	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	621a      	str	r2, [r3, #32]
}
 80066fe:	bf00      	nop
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
	...

0800670c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800671c:	2b01      	cmp	r3, #1
 800671e:	d101      	bne.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006720:	2302      	movs	r3, #2
 8006722:	e06d      	b.n	8006800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a30      	ldr	r2, [pc, #192]	; (800680c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d004      	beq.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a2f      	ldr	r2, [pc, #188]	; (8006810 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d108      	bne.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800675e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006770:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a20      	ldr	r2, [pc, #128]	; (800680c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d022      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006796:	d01d      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d018      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d013      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a1a      	ldr	r2, [pc, #104]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00e      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a15      	ldr	r2, [pc, #84]	; (8006810 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d009      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a16      	ldr	r2, [pc, #88]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d004      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a15      	ldr	r2, [pc, #84]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d10c      	bne.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40010000 	.word	0x40010000
 8006810:	40010400 	.word	0x40010400
 8006814:	40000400 	.word	0x40000400
 8006818:	40000800 	.word	0x40000800
 800681c:	40000c00 	.word	0x40000c00
 8006820:	40001800 	.word	0x40001800
 8006824:	40014000 	.word	0x40014000

08006828 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006840:	2302      	movs	r3, #2
 8006842:	e065      	b.n	8006910 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	041b      	lsls	r3, r3, #16
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a16      	ldr	r2, [pc, #88]	; (800691c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a14      	ldr	r2, [pc, #80]	; (8006920 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d115      	bne.n	80068fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	051b      	lsls	r3, r3, #20
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	40010000 	.word	0x40010000
 8006920:	40010400 	.word	0x40010400

08006924 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e042      	b.n	80069f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006978:	2b00      	cmp	r3, #0
 800697a:	d106      	bne.n	800698a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7fa fcdd 	bl	8001344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2224      	movs	r2, #36	; 0x24
 800698e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0201 	bic.w	r2, r2, #1
 80069a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f8c2 	bl	8006b2c <UART_SetConfig>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e022      	b.n	80069f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fe1e 	bl	80075fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0201 	orr.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fea5 	bl	8007740 <UART_CheckIdleState>
 80069f6:	4603      	mov	r3, r0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08a      	sub	sp, #40	; 0x28
 8006a04:	af02      	add	r7, sp, #8
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	f040 8083 	bne.w	8006b22 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <HAL_UART_Transmit+0x28>
 8006a22:	88fb      	ldrh	r3, [r7, #6]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e07b      	b.n	8006b24 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_UART_Transmit+0x3a>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e074      	b.n	8006b24 <HAL_UART_Transmit+0x124>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2221      	movs	r2, #33	; 0x21
 8006a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a52:	f7fa fe87 	bl	8001764 <HAL_GetTick>
 8006a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	88fa      	ldrh	r2, [r7, #6]
 8006a5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	88fa      	ldrh	r2, [r7, #6]
 8006a64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a70:	d108      	bne.n	8006a84 <HAL_UART_Transmit+0x84>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d104      	bne.n	8006a84 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	e003      	b.n	8006a8c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006a94:	e02c      	b.n	8006af0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	2180      	movs	r1, #128	; 0x80
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 fe98 	bl	80077d6 <UART_WaitOnFlagUntilTimeout>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e039      	b.n	8006b24 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10b      	bne.n	8006ace <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ac4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	3302      	adds	r3, #2
 8006aca:	61bb      	str	r3, [r7, #24]
 8006acc:	e007      	b.n	8006ade <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	781a      	ldrb	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	3301      	adds	r3, #1
 8006adc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1cc      	bne.n	8006a96 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2200      	movs	r2, #0
 8006b04:	2140      	movs	r1, #64	; 0x40
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 fe65 	bl	80077d6 <UART_WaitOnFlagUntilTimeout>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e006      	b.n	8006b24 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e000      	b.n	8006b24 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006b22:	2302      	movs	r3, #2
  }
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3720      	adds	r7, #32
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b30:	b092      	sub	sp, #72	; 0x48
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4bbe      	ldr	r3, [pc, #760]	; (8006e54 <UART_SetConfig+0x328>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	6812      	ldr	r2, [r2, #0]
 8006b62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4ab3      	ldr	r2, [pc, #716]	; (8006e58 <UART_SetConfig+0x32c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b94:	4313      	orrs	r3, r2
 8006b96:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689a      	ldr	r2, [r3, #8]
 8006b9e:	4baf      	ldr	r3, [pc, #700]	; (8006e5c <UART_SetConfig+0x330>)
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	6812      	ldr	r2, [r2, #0]
 8006ba6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb2:	f023 010f 	bic.w	r1, r3, #15
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4aa6      	ldr	r2, [pc, #664]	; (8006e60 <UART_SetConfig+0x334>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d177      	bne.n	8006cbc <UART_SetConfig+0x190>
 8006bcc:	4ba5      	ldr	r3, [pc, #660]	; (8006e64 <UART_SetConfig+0x338>)
 8006bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bd4:	2b28      	cmp	r3, #40	; 0x28
 8006bd6:	d86d      	bhi.n	8006cb4 <UART_SetConfig+0x188>
 8006bd8:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <UART_SetConfig+0xb4>)
 8006bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bde:	bf00      	nop
 8006be0:	08006c85 	.word	0x08006c85
 8006be4:	08006cb5 	.word	0x08006cb5
 8006be8:	08006cb5 	.word	0x08006cb5
 8006bec:	08006cb5 	.word	0x08006cb5
 8006bf0:	08006cb5 	.word	0x08006cb5
 8006bf4:	08006cb5 	.word	0x08006cb5
 8006bf8:	08006cb5 	.word	0x08006cb5
 8006bfc:	08006cb5 	.word	0x08006cb5
 8006c00:	08006c8d 	.word	0x08006c8d
 8006c04:	08006cb5 	.word	0x08006cb5
 8006c08:	08006cb5 	.word	0x08006cb5
 8006c0c:	08006cb5 	.word	0x08006cb5
 8006c10:	08006cb5 	.word	0x08006cb5
 8006c14:	08006cb5 	.word	0x08006cb5
 8006c18:	08006cb5 	.word	0x08006cb5
 8006c1c:	08006cb5 	.word	0x08006cb5
 8006c20:	08006c95 	.word	0x08006c95
 8006c24:	08006cb5 	.word	0x08006cb5
 8006c28:	08006cb5 	.word	0x08006cb5
 8006c2c:	08006cb5 	.word	0x08006cb5
 8006c30:	08006cb5 	.word	0x08006cb5
 8006c34:	08006cb5 	.word	0x08006cb5
 8006c38:	08006cb5 	.word	0x08006cb5
 8006c3c:	08006cb5 	.word	0x08006cb5
 8006c40:	08006c9d 	.word	0x08006c9d
 8006c44:	08006cb5 	.word	0x08006cb5
 8006c48:	08006cb5 	.word	0x08006cb5
 8006c4c:	08006cb5 	.word	0x08006cb5
 8006c50:	08006cb5 	.word	0x08006cb5
 8006c54:	08006cb5 	.word	0x08006cb5
 8006c58:	08006cb5 	.word	0x08006cb5
 8006c5c:	08006cb5 	.word	0x08006cb5
 8006c60:	08006ca5 	.word	0x08006ca5
 8006c64:	08006cb5 	.word	0x08006cb5
 8006c68:	08006cb5 	.word	0x08006cb5
 8006c6c:	08006cb5 	.word	0x08006cb5
 8006c70:	08006cb5 	.word	0x08006cb5
 8006c74:	08006cb5 	.word	0x08006cb5
 8006c78:	08006cb5 	.word	0x08006cb5
 8006c7c:	08006cb5 	.word	0x08006cb5
 8006c80:	08006cad 	.word	0x08006cad
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8a:	e222      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c92:	e21e      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006c94:	2308      	movs	r3, #8
 8006c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c9a:	e21a      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006c9c:	2310      	movs	r3, #16
 8006c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ca2:	e216      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006ca4:	2320      	movs	r3, #32
 8006ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006caa:	e212      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006cac:	2340      	movs	r3, #64	; 0x40
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cb2:	e20e      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006cb4:	2380      	movs	r3, #128	; 0x80
 8006cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cba:	e20a      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a69      	ldr	r2, [pc, #420]	; (8006e68 <UART_SetConfig+0x33c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d130      	bne.n	8006d28 <UART_SetConfig+0x1fc>
 8006cc6:	4b67      	ldr	r3, [pc, #412]	; (8006e64 <UART_SetConfig+0x338>)
 8006cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cca:	f003 0307 	and.w	r3, r3, #7
 8006cce:	2b05      	cmp	r3, #5
 8006cd0:	d826      	bhi.n	8006d20 <UART_SetConfig+0x1f4>
 8006cd2:	a201      	add	r2, pc, #4	; (adr r2, 8006cd8 <UART_SetConfig+0x1ac>)
 8006cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd8:	08006cf1 	.word	0x08006cf1
 8006cdc:	08006cf9 	.word	0x08006cf9
 8006ce0:	08006d01 	.word	0x08006d01
 8006ce4:	08006d09 	.word	0x08006d09
 8006ce8:	08006d11 	.word	0x08006d11
 8006cec:	08006d19 	.word	0x08006d19
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf6:	e1ec      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006cf8:	2304      	movs	r3, #4
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfe:	e1e8      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006d00:	2308      	movs	r3, #8
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d06:	e1e4      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006d08:	2310      	movs	r3, #16
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0e:	e1e0      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006d10:	2320      	movs	r3, #32
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d16:	e1dc      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006d18:	2340      	movs	r3, #64	; 0x40
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1e:	e1d8      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006d20:	2380      	movs	r3, #128	; 0x80
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d26:	e1d4      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a4f      	ldr	r2, [pc, #316]	; (8006e6c <UART_SetConfig+0x340>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d130      	bne.n	8006d94 <UART_SetConfig+0x268>
 8006d32:	4b4c      	ldr	r3, [pc, #304]	; (8006e64 <UART_SetConfig+0x338>)
 8006d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	2b05      	cmp	r3, #5
 8006d3c:	d826      	bhi.n	8006d8c <UART_SetConfig+0x260>
 8006d3e:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <UART_SetConfig+0x218>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006d5d 	.word	0x08006d5d
 8006d48:	08006d65 	.word	0x08006d65
 8006d4c:	08006d6d 	.word	0x08006d6d
 8006d50:	08006d75 	.word	0x08006d75
 8006d54:	08006d7d 	.word	0x08006d7d
 8006d58:	08006d85 	.word	0x08006d85
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d62:	e1b6      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006d64:	2304      	movs	r3, #4
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6a:	e1b2      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006d6c:	2308      	movs	r3, #8
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d72:	e1ae      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006d74:	2310      	movs	r3, #16
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7a:	e1aa      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006d7c:	2320      	movs	r3, #32
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d82:	e1a6      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006d84:	2340      	movs	r3, #64	; 0x40
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d8a:	e1a2      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006d8c:	2380      	movs	r3, #128	; 0x80
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d92:	e19e      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a35      	ldr	r2, [pc, #212]	; (8006e70 <UART_SetConfig+0x344>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d130      	bne.n	8006e00 <UART_SetConfig+0x2d4>
 8006d9e:	4b31      	ldr	r3, [pc, #196]	; (8006e64 <UART_SetConfig+0x338>)
 8006da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	2b05      	cmp	r3, #5
 8006da8:	d826      	bhi.n	8006df8 <UART_SetConfig+0x2cc>
 8006daa:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <UART_SetConfig+0x284>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006dc9 	.word	0x08006dc9
 8006db4:	08006dd1 	.word	0x08006dd1
 8006db8:	08006dd9 	.word	0x08006dd9
 8006dbc:	08006de1 	.word	0x08006de1
 8006dc0:	08006de9 	.word	0x08006de9
 8006dc4:	08006df1 	.word	0x08006df1
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dce:	e180      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd6:	e17c      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006dd8:	2308      	movs	r3, #8
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dde:	e178      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006de0:	2310      	movs	r3, #16
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de6:	e174      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006de8:	2320      	movs	r3, #32
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dee:	e170      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006df0:	2340      	movs	r3, #64	; 0x40
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df6:	e16c      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006df8:	2380      	movs	r3, #128	; 0x80
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dfe:	e168      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a1b      	ldr	r2, [pc, #108]	; (8006e74 <UART_SetConfig+0x348>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d142      	bne.n	8006e90 <UART_SetConfig+0x364>
 8006e0a:	4b16      	ldr	r3, [pc, #88]	; (8006e64 <UART_SetConfig+0x338>)
 8006e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	2b05      	cmp	r3, #5
 8006e14:	d838      	bhi.n	8006e88 <UART_SetConfig+0x35c>
 8006e16:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <UART_SetConfig+0x2f0>)
 8006e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1c:	08006e35 	.word	0x08006e35
 8006e20:	08006e3d 	.word	0x08006e3d
 8006e24:	08006e45 	.word	0x08006e45
 8006e28:	08006e4d 	.word	0x08006e4d
 8006e2c:	08006e79 	.word	0x08006e79
 8006e30:	08006e81 	.word	0x08006e81
 8006e34:	2300      	movs	r3, #0
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3a:	e14a      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006e3c:	2304      	movs	r3, #4
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e42:	e146      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006e44:	2308      	movs	r3, #8
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4a:	e142      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e52:	e13e      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006e54:	cfff69f3 	.word	0xcfff69f3
 8006e58:	58000c00 	.word	0x58000c00
 8006e5c:	11fff4ff 	.word	0x11fff4ff
 8006e60:	40011000 	.word	0x40011000
 8006e64:	58024400 	.word	0x58024400
 8006e68:	40004400 	.word	0x40004400
 8006e6c:	40004800 	.word	0x40004800
 8006e70:	40004c00 	.word	0x40004c00
 8006e74:	40005000 	.word	0x40005000
 8006e78:	2320      	movs	r3, #32
 8006e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7e:	e128      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006e80:	2340      	movs	r3, #64	; 0x40
 8006e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e86:	e124      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006e88:	2380      	movs	r3, #128	; 0x80
 8006e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8e:	e120      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4acb      	ldr	r2, [pc, #812]	; (80071c4 <UART_SetConfig+0x698>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d176      	bne.n	8006f88 <UART_SetConfig+0x45c>
 8006e9a:	4bcb      	ldr	r3, [pc, #812]	; (80071c8 <UART_SetConfig+0x69c>)
 8006e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ea2:	2b28      	cmp	r3, #40	; 0x28
 8006ea4:	d86c      	bhi.n	8006f80 <UART_SetConfig+0x454>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <UART_SetConfig+0x380>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006f51 	.word	0x08006f51
 8006eb0:	08006f81 	.word	0x08006f81
 8006eb4:	08006f81 	.word	0x08006f81
 8006eb8:	08006f81 	.word	0x08006f81
 8006ebc:	08006f81 	.word	0x08006f81
 8006ec0:	08006f81 	.word	0x08006f81
 8006ec4:	08006f81 	.word	0x08006f81
 8006ec8:	08006f81 	.word	0x08006f81
 8006ecc:	08006f59 	.word	0x08006f59
 8006ed0:	08006f81 	.word	0x08006f81
 8006ed4:	08006f81 	.word	0x08006f81
 8006ed8:	08006f81 	.word	0x08006f81
 8006edc:	08006f81 	.word	0x08006f81
 8006ee0:	08006f81 	.word	0x08006f81
 8006ee4:	08006f81 	.word	0x08006f81
 8006ee8:	08006f81 	.word	0x08006f81
 8006eec:	08006f61 	.word	0x08006f61
 8006ef0:	08006f81 	.word	0x08006f81
 8006ef4:	08006f81 	.word	0x08006f81
 8006ef8:	08006f81 	.word	0x08006f81
 8006efc:	08006f81 	.word	0x08006f81
 8006f00:	08006f81 	.word	0x08006f81
 8006f04:	08006f81 	.word	0x08006f81
 8006f08:	08006f81 	.word	0x08006f81
 8006f0c:	08006f69 	.word	0x08006f69
 8006f10:	08006f81 	.word	0x08006f81
 8006f14:	08006f81 	.word	0x08006f81
 8006f18:	08006f81 	.word	0x08006f81
 8006f1c:	08006f81 	.word	0x08006f81
 8006f20:	08006f81 	.word	0x08006f81
 8006f24:	08006f81 	.word	0x08006f81
 8006f28:	08006f81 	.word	0x08006f81
 8006f2c:	08006f71 	.word	0x08006f71
 8006f30:	08006f81 	.word	0x08006f81
 8006f34:	08006f81 	.word	0x08006f81
 8006f38:	08006f81 	.word	0x08006f81
 8006f3c:	08006f81 	.word	0x08006f81
 8006f40:	08006f81 	.word	0x08006f81
 8006f44:	08006f81 	.word	0x08006f81
 8006f48:	08006f81 	.word	0x08006f81
 8006f4c:	08006f79 	.word	0x08006f79
 8006f50:	2301      	movs	r3, #1
 8006f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f56:	e0bc      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006f58:	2304      	movs	r3, #4
 8006f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5e:	e0b8      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006f60:	2308      	movs	r3, #8
 8006f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f66:	e0b4      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6e:	e0b0      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006f70:	2320      	movs	r3, #32
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f76:	e0ac      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006f78:	2340      	movs	r3, #64	; 0x40
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7e:	e0a8      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006f80:	2380      	movs	r3, #128	; 0x80
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f86:	e0a4      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a8f      	ldr	r2, [pc, #572]	; (80071cc <UART_SetConfig+0x6a0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d130      	bne.n	8006ff4 <UART_SetConfig+0x4c8>
 8006f92:	4b8d      	ldr	r3, [pc, #564]	; (80071c8 <UART_SetConfig+0x69c>)
 8006f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	2b05      	cmp	r3, #5
 8006f9c:	d826      	bhi.n	8006fec <UART_SetConfig+0x4c0>
 8006f9e:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <UART_SetConfig+0x478>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08006fbd 	.word	0x08006fbd
 8006fa8:	08006fc5 	.word	0x08006fc5
 8006fac:	08006fcd 	.word	0x08006fcd
 8006fb0:	08006fd5 	.word	0x08006fd5
 8006fb4:	08006fdd 	.word	0x08006fdd
 8006fb8:	08006fe5 	.word	0x08006fe5
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc2:	e086      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006fc4:	2304      	movs	r3, #4
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fca:	e082      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006fcc:	2308      	movs	r3, #8
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd2:	e07e      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fda:	e07a      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006fdc:	2320      	movs	r3, #32
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe2:	e076      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006fe4:	2340      	movs	r3, #64	; 0x40
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fea:	e072      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006fec:	2380      	movs	r3, #128	; 0x80
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff2:	e06e      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a75      	ldr	r2, [pc, #468]	; (80071d0 <UART_SetConfig+0x6a4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d130      	bne.n	8007060 <UART_SetConfig+0x534>
 8006ffe:	4b72      	ldr	r3, [pc, #456]	; (80071c8 <UART_SetConfig+0x69c>)
 8007000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	2b05      	cmp	r3, #5
 8007008:	d826      	bhi.n	8007058 <UART_SetConfig+0x52c>
 800700a:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <UART_SetConfig+0x4e4>)
 800700c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007010:	08007029 	.word	0x08007029
 8007014:	08007031 	.word	0x08007031
 8007018:	08007039 	.word	0x08007039
 800701c:	08007041 	.word	0x08007041
 8007020:	08007049 	.word	0x08007049
 8007024:	08007051 	.word	0x08007051
 8007028:	2300      	movs	r3, #0
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702e:	e050      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8007030:	2304      	movs	r3, #4
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007036:	e04c      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8007038:	2308      	movs	r3, #8
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703e:	e048      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8007040:	2310      	movs	r3, #16
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007046:	e044      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8007048:	2320      	movs	r3, #32
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704e:	e040      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8007050:	2340      	movs	r3, #64	; 0x40
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007056:	e03c      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8007058:	2380      	movs	r3, #128	; 0x80
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705e:	e038      	b.n	80070d2 <UART_SetConfig+0x5a6>
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a5b      	ldr	r2, [pc, #364]	; (80071d4 <UART_SetConfig+0x6a8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d130      	bne.n	80070cc <UART_SetConfig+0x5a0>
 800706a:	4b57      	ldr	r3, [pc, #348]	; (80071c8 <UART_SetConfig+0x69c>)
 800706c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706e:	f003 0307 	and.w	r3, r3, #7
 8007072:	2b05      	cmp	r3, #5
 8007074:	d826      	bhi.n	80070c4 <UART_SetConfig+0x598>
 8007076:	a201      	add	r2, pc, #4	; (adr r2, 800707c <UART_SetConfig+0x550>)
 8007078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707c:	08007095 	.word	0x08007095
 8007080:	0800709d 	.word	0x0800709d
 8007084:	080070a5 	.word	0x080070a5
 8007088:	080070ad 	.word	0x080070ad
 800708c:	080070b5 	.word	0x080070b5
 8007090:	080070bd 	.word	0x080070bd
 8007094:	2302      	movs	r3, #2
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709a:	e01a      	b.n	80070d2 <UART_SetConfig+0x5a6>
 800709c:	2304      	movs	r3, #4
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a2:	e016      	b.n	80070d2 <UART_SetConfig+0x5a6>
 80070a4:	2308      	movs	r3, #8
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070aa:	e012      	b.n	80070d2 <UART_SetConfig+0x5a6>
 80070ac:	2310      	movs	r3, #16
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b2:	e00e      	b.n	80070d2 <UART_SetConfig+0x5a6>
 80070b4:	2320      	movs	r3, #32
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ba:	e00a      	b.n	80070d2 <UART_SetConfig+0x5a6>
 80070bc:	2340      	movs	r3, #64	; 0x40
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070c2:	e006      	b.n	80070d2 <UART_SetConfig+0x5a6>
 80070c4:	2380      	movs	r3, #128	; 0x80
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ca:	e002      	b.n	80070d2 <UART_SetConfig+0x5a6>
 80070cc:	2380      	movs	r3, #128	; 0x80
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a3f      	ldr	r2, [pc, #252]	; (80071d4 <UART_SetConfig+0x6a8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	f040 80f8 	bne.w	80072ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	dc46      	bgt.n	8007174 <UART_SetConfig+0x648>
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	f2c0 8082 	blt.w	80071f0 <UART_SetConfig+0x6c4>
 80070ec:	3b02      	subs	r3, #2
 80070ee:	2b1e      	cmp	r3, #30
 80070f0:	d87e      	bhi.n	80071f0 <UART_SetConfig+0x6c4>
 80070f2:	a201      	add	r2, pc, #4	; (adr r2, 80070f8 <UART_SetConfig+0x5cc>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	0800717b 	.word	0x0800717b
 80070fc:	080071f1 	.word	0x080071f1
 8007100:	08007183 	.word	0x08007183
 8007104:	080071f1 	.word	0x080071f1
 8007108:	080071f1 	.word	0x080071f1
 800710c:	080071f1 	.word	0x080071f1
 8007110:	08007193 	.word	0x08007193
 8007114:	080071f1 	.word	0x080071f1
 8007118:	080071f1 	.word	0x080071f1
 800711c:	080071f1 	.word	0x080071f1
 8007120:	080071f1 	.word	0x080071f1
 8007124:	080071f1 	.word	0x080071f1
 8007128:	080071f1 	.word	0x080071f1
 800712c:	080071f1 	.word	0x080071f1
 8007130:	080071a3 	.word	0x080071a3
 8007134:	080071f1 	.word	0x080071f1
 8007138:	080071f1 	.word	0x080071f1
 800713c:	080071f1 	.word	0x080071f1
 8007140:	080071f1 	.word	0x080071f1
 8007144:	080071f1 	.word	0x080071f1
 8007148:	080071f1 	.word	0x080071f1
 800714c:	080071f1 	.word	0x080071f1
 8007150:	080071f1 	.word	0x080071f1
 8007154:	080071f1 	.word	0x080071f1
 8007158:	080071f1 	.word	0x080071f1
 800715c:	080071f1 	.word	0x080071f1
 8007160:	080071f1 	.word	0x080071f1
 8007164:	080071f1 	.word	0x080071f1
 8007168:	080071f1 	.word	0x080071f1
 800716c:	080071f1 	.word	0x080071f1
 8007170:	080071e3 	.word	0x080071e3
 8007174:	2b40      	cmp	r3, #64	; 0x40
 8007176:	d037      	beq.n	80071e8 <UART_SetConfig+0x6bc>
 8007178:	e03a      	b.n	80071f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800717a:	f7fd fcaf 	bl	8004adc <HAL_RCCEx_GetD3PCLK1Freq>
 800717e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007180:	e03c      	b.n	80071fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007186:	4618      	mov	r0, r3
 8007188:	f7fd fcbe 	bl	8004b08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007190:	e034      	b.n	80071fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007192:	f107 0318 	add.w	r3, r7, #24
 8007196:	4618      	mov	r0, r3
 8007198:	f7fd fe0a 	bl	8004db0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071a0:	e02c      	b.n	80071fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071a2:	4b09      	ldr	r3, [pc, #36]	; (80071c8 <UART_SetConfig+0x69c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0320 	and.w	r3, r3, #32
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d016      	beq.n	80071dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071ae:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <UART_SetConfig+0x69c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	08db      	lsrs	r3, r3, #3
 80071b4:	f003 0303 	and.w	r3, r3, #3
 80071b8:	4a07      	ldr	r2, [pc, #28]	; (80071d8 <UART_SetConfig+0x6ac>)
 80071ba:	fa22 f303 	lsr.w	r3, r2, r3
 80071be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071c0:	e01c      	b.n	80071fc <UART_SetConfig+0x6d0>
 80071c2:	bf00      	nop
 80071c4:	40011400 	.word	0x40011400
 80071c8:	58024400 	.word	0x58024400
 80071cc:	40007800 	.word	0x40007800
 80071d0:	40007c00 	.word	0x40007c00
 80071d4:	58000c00 	.word	0x58000c00
 80071d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80071dc:	4b9d      	ldr	r3, [pc, #628]	; (8007454 <UART_SetConfig+0x928>)
 80071de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e0:	e00c      	b.n	80071fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071e2:	4b9d      	ldr	r3, [pc, #628]	; (8007458 <UART_SetConfig+0x92c>)
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e6:	e009      	b.n	80071fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ee:	e005      	b.n	80071fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80071fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 81de 	beq.w	80075c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	4a94      	ldr	r2, [pc, #592]	; (800745c <UART_SetConfig+0x930>)
 800720a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800720e:	461a      	mov	r2, r3
 8007210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007212:	fbb3 f3f2 	udiv	r3, r3, r2
 8007216:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	4613      	mov	r3, r2
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	4413      	add	r3, r2
 8007222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007224:	429a      	cmp	r2, r3
 8007226:	d305      	bcc.n	8007234 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800722e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007230:	429a      	cmp	r2, r3
 8007232:	d903      	bls.n	800723c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800723a:	e1c1      	b.n	80075c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800723c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723e:	2200      	movs	r2, #0
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	60fa      	str	r2, [r7, #12]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	4a84      	ldr	r2, [pc, #528]	; (800745c <UART_SetConfig+0x930>)
 800724a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800724e:	b29b      	uxth	r3, r3
 8007250:	2200      	movs	r2, #0
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	607a      	str	r2, [r7, #4]
 8007256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800725a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800725e:	f7f9 f897 	bl	8000390 <__aeabi_uldivmod>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4610      	mov	r0, r2
 8007268:	4619      	mov	r1, r3
 800726a:	f04f 0200 	mov.w	r2, #0
 800726e:	f04f 0300 	mov.w	r3, #0
 8007272:	020b      	lsls	r3, r1, #8
 8007274:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007278:	0202      	lsls	r2, r0, #8
 800727a:	6979      	ldr	r1, [r7, #20]
 800727c:	6849      	ldr	r1, [r1, #4]
 800727e:	0849      	lsrs	r1, r1, #1
 8007280:	2000      	movs	r0, #0
 8007282:	460c      	mov	r4, r1
 8007284:	4605      	mov	r5, r0
 8007286:	eb12 0804 	adds.w	r8, r2, r4
 800728a:	eb43 0905 	adc.w	r9, r3, r5
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	469a      	mov	sl, r3
 8007296:	4693      	mov	fp, r2
 8007298:	4652      	mov	r2, sl
 800729a:	465b      	mov	r3, fp
 800729c:	4640      	mov	r0, r8
 800729e:	4649      	mov	r1, r9
 80072a0:	f7f9 f876 	bl	8000390 <__aeabi_uldivmod>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4613      	mov	r3, r2
 80072aa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b2:	d308      	bcc.n	80072c6 <UART_SetConfig+0x79a>
 80072b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ba:	d204      	bcs.n	80072c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072c2:	60da      	str	r2, [r3, #12]
 80072c4:	e17c      	b.n	80075c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80072cc:	e178      	b.n	80075c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d6:	f040 80c5 	bne.w	8007464 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80072da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072de:	2b20      	cmp	r3, #32
 80072e0:	dc48      	bgt.n	8007374 <UART_SetConfig+0x848>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	db7b      	blt.n	80073de <UART_SetConfig+0x8b2>
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	d879      	bhi.n	80073de <UART_SetConfig+0x8b2>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <UART_SetConfig+0x7c4>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	0800737b 	.word	0x0800737b
 80072f4:	08007383 	.word	0x08007383
 80072f8:	080073df 	.word	0x080073df
 80072fc:	080073df 	.word	0x080073df
 8007300:	0800738b 	.word	0x0800738b
 8007304:	080073df 	.word	0x080073df
 8007308:	080073df 	.word	0x080073df
 800730c:	080073df 	.word	0x080073df
 8007310:	0800739b 	.word	0x0800739b
 8007314:	080073df 	.word	0x080073df
 8007318:	080073df 	.word	0x080073df
 800731c:	080073df 	.word	0x080073df
 8007320:	080073df 	.word	0x080073df
 8007324:	080073df 	.word	0x080073df
 8007328:	080073df 	.word	0x080073df
 800732c:	080073df 	.word	0x080073df
 8007330:	080073ab 	.word	0x080073ab
 8007334:	080073df 	.word	0x080073df
 8007338:	080073df 	.word	0x080073df
 800733c:	080073df 	.word	0x080073df
 8007340:	080073df 	.word	0x080073df
 8007344:	080073df 	.word	0x080073df
 8007348:	080073df 	.word	0x080073df
 800734c:	080073df 	.word	0x080073df
 8007350:	080073df 	.word	0x080073df
 8007354:	080073df 	.word	0x080073df
 8007358:	080073df 	.word	0x080073df
 800735c:	080073df 	.word	0x080073df
 8007360:	080073df 	.word	0x080073df
 8007364:	080073df 	.word	0x080073df
 8007368:	080073df 	.word	0x080073df
 800736c:	080073df 	.word	0x080073df
 8007370:	080073d1 	.word	0x080073d1
 8007374:	2b40      	cmp	r3, #64	; 0x40
 8007376:	d02e      	beq.n	80073d6 <UART_SetConfig+0x8aa>
 8007378:	e031      	b.n	80073de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800737a:	f7fc fc3d 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 800737e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007380:	e033      	b.n	80073ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007382:	f7fc fc4f 	bl	8003c24 <HAL_RCC_GetPCLK2Freq>
 8007386:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007388:	e02f      	b.n	80073ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800738a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800738e:	4618      	mov	r0, r3
 8007390:	f7fd fbba 	bl	8004b08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007398:	e027      	b.n	80073ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800739a:	f107 0318 	add.w	r3, r7, #24
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fd fd06 	bl	8004db0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073a8:	e01f      	b.n	80073ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073aa:	4b2d      	ldr	r3, [pc, #180]	; (8007460 <UART_SetConfig+0x934>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073b6:	4b2a      	ldr	r3, [pc, #168]	; (8007460 <UART_SetConfig+0x934>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	08db      	lsrs	r3, r3, #3
 80073bc:	f003 0303 	and.w	r3, r3, #3
 80073c0:	4a24      	ldr	r2, [pc, #144]	; (8007454 <UART_SetConfig+0x928>)
 80073c2:	fa22 f303 	lsr.w	r3, r2, r3
 80073c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073c8:	e00f      	b.n	80073ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80073ca:	4b22      	ldr	r3, [pc, #136]	; (8007454 <UART_SetConfig+0x928>)
 80073cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073ce:	e00c      	b.n	80073ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073d0:	4b21      	ldr	r3, [pc, #132]	; (8007458 <UART_SetConfig+0x92c>)
 80073d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073d4:	e009      	b.n	80073ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073dc:	e005      	b.n	80073ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80073e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 80e7 	beq.w	80075c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	4a19      	ldr	r2, [pc, #100]	; (800745c <UART_SetConfig+0x930>)
 80073f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073fc:	461a      	mov	r2, r3
 80073fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007400:	fbb3 f3f2 	udiv	r3, r3, r2
 8007404:	005a      	lsls	r2, r3, #1
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	085b      	lsrs	r3, r3, #1
 800740c:	441a      	add	r2, r3
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	fbb2 f3f3 	udiv	r3, r2, r3
 8007416:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	2b0f      	cmp	r3, #15
 800741c:	d916      	bls.n	800744c <UART_SetConfig+0x920>
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007424:	d212      	bcs.n	800744c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007428:	b29b      	uxth	r3, r3
 800742a:	f023 030f 	bic.w	r3, r3, #15
 800742e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	085b      	lsrs	r3, r3, #1
 8007434:	b29b      	uxth	r3, r3
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	b29a      	uxth	r2, r3
 800743c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800743e:	4313      	orrs	r3, r2
 8007440:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	e0b9      	b.n	80075c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007452:	e0b5      	b.n	80075c0 <UART_SetConfig+0xa94>
 8007454:	03d09000 	.word	0x03d09000
 8007458:	003d0900 	.word	0x003d0900
 800745c:	0800a8e4 	.word	0x0800a8e4
 8007460:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007464:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007468:	2b20      	cmp	r3, #32
 800746a:	dc49      	bgt.n	8007500 <UART_SetConfig+0x9d4>
 800746c:	2b00      	cmp	r3, #0
 800746e:	db7c      	blt.n	800756a <UART_SetConfig+0xa3e>
 8007470:	2b20      	cmp	r3, #32
 8007472:	d87a      	bhi.n	800756a <UART_SetConfig+0xa3e>
 8007474:	a201      	add	r2, pc, #4	; (adr r2, 800747c <UART_SetConfig+0x950>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	08007507 	.word	0x08007507
 8007480:	0800750f 	.word	0x0800750f
 8007484:	0800756b 	.word	0x0800756b
 8007488:	0800756b 	.word	0x0800756b
 800748c:	08007517 	.word	0x08007517
 8007490:	0800756b 	.word	0x0800756b
 8007494:	0800756b 	.word	0x0800756b
 8007498:	0800756b 	.word	0x0800756b
 800749c:	08007527 	.word	0x08007527
 80074a0:	0800756b 	.word	0x0800756b
 80074a4:	0800756b 	.word	0x0800756b
 80074a8:	0800756b 	.word	0x0800756b
 80074ac:	0800756b 	.word	0x0800756b
 80074b0:	0800756b 	.word	0x0800756b
 80074b4:	0800756b 	.word	0x0800756b
 80074b8:	0800756b 	.word	0x0800756b
 80074bc:	08007537 	.word	0x08007537
 80074c0:	0800756b 	.word	0x0800756b
 80074c4:	0800756b 	.word	0x0800756b
 80074c8:	0800756b 	.word	0x0800756b
 80074cc:	0800756b 	.word	0x0800756b
 80074d0:	0800756b 	.word	0x0800756b
 80074d4:	0800756b 	.word	0x0800756b
 80074d8:	0800756b 	.word	0x0800756b
 80074dc:	0800756b 	.word	0x0800756b
 80074e0:	0800756b 	.word	0x0800756b
 80074e4:	0800756b 	.word	0x0800756b
 80074e8:	0800756b 	.word	0x0800756b
 80074ec:	0800756b 	.word	0x0800756b
 80074f0:	0800756b 	.word	0x0800756b
 80074f4:	0800756b 	.word	0x0800756b
 80074f8:	0800756b 	.word	0x0800756b
 80074fc:	0800755d 	.word	0x0800755d
 8007500:	2b40      	cmp	r3, #64	; 0x40
 8007502:	d02e      	beq.n	8007562 <UART_SetConfig+0xa36>
 8007504:	e031      	b.n	800756a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007506:	f7fc fb77 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 800750a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800750c:	e033      	b.n	8007576 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800750e:	f7fc fb89 	bl	8003c24 <HAL_RCC_GetPCLK2Freq>
 8007512:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007514:	e02f      	b.n	8007576 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800751a:	4618      	mov	r0, r3
 800751c:	f7fd faf4 	bl	8004b08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007524:	e027      	b.n	8007576 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007526:	f107 0318 	add.w	r3, r7, #24
 800752a:	4618      	mov	r0, r3
 800752c:	f7fd fc40 	bl	8004db0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007534:	e01f      	b.n	8007576 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007536:	4b2d      	ldr	r3, [pc, #180]	; (80075ec <UART_SetConfig+0xac0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0320 	and.w	r3, r3, #32
 800753e:	2b00      	cmp	r3, #0
 8007540:	d009      	beq.n	8007556 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007542:	4b2a      	ldr	r3, [pc, #168]	; (80075ec <UART_SetConfig+0xac0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	08db      	lsrs	r3, r3, #3
 8007548:	f003 0303 	and.w	r3, r3, #3
 800754c:	4a28      	ldr	r2, [pc, #160]	; (80075f0 <UART_SetConfig+0xac4>)
 800754e:	fa22 f303 	lsr.w	r3, r2, r3
 8007552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007554:	e00f      	b.n	8007576 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007556:	4b26      	ldr	r3, [pc, #152]	; (80075f0 <UART_SetConfig+0xac4>)
 8007558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800755a:	e00c      	b.n	8007576 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800755c:	4b25      	ldr	r3, [pc, #148]	; (80075f4 <UART_SetConfig+0xac8>)
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007560:	e009      	b.n	8007576 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007568:	e005      	b.n	8007576 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800756a:	2300      	movs	r3, #0
 800756c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007574:	bf00      	nop
    }

    if (pclk != 0U)
 8007576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007578:	2b00      	cmp	r3, #0
 800757a:	d021      	beq.n	80075c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	4a1d      	ldr	r2, [pc, #116]	; (80075f8 <UART_SetConfig+0xacc>)
 8007582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007586:	461a      	mov	r2, r3
 8007588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800758a:	fbb3 f2f2 	udiv	r2, r3, r2
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	441a      	add	r2, r3
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	fbb2 f3f3 	udiv	r3, r2, r3
 800759e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	2b0f      	cmp	r3, #15
 80075a4:	d909      	bls.n	80075ba <UART_SetConfig+0xa8e>
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ac:	d205      	bcs.n	80075ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60da      	str	r2, [r3, #12]
 80075b8:	e002      	b.n	80075c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2200      	movs	r2, #0
 80075d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2200      	movs	r2, #0
 80075da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80075dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3748      	adds	r7, #72	; 0x48
 80075e4:	46bd      	mov	sp, r7
 80075e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ea:	bf00      	nop
 80075ec:	58024400 	.word	0x58024400
 80075f0:	03d09000 	.word	0x03d09000
 80075f4:	003d0900 	.word	0x003d0900
 80075f8:	0800a8e4 	.word	0x0800a8e4

080075fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00a      	beq.n	8007626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00a      	beq.n	800766a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766e:	f003 0308 	and.w	r3, r3, #8
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007690:	f003 0310 	and.w	r3, r3, #16
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00a      	beq.n	80076ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b2:	f003 0320 	and.w	r3, r3, #32
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	430a      	orrs	r2, r1
 80076ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d01a      	beq.n	8007712 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076fa:	d10a      	bne.n	8007712 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	605a      	str	r2, [r3, #4]
  }
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af02      	add	r7, sp, #8
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007750:	f7fa f808 	bl	8001764 <HAL_GetTick>
 8007754:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b08      	cmp	r3, #8
 8007762:	d10e      	bne.n	8007782 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f82f 	bl	80077d6 <UART_WaitOnFlagUntilTimeout>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e025      	b.n	80077ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b04      	cmp	r3, #4
 800778e:	d10e      	bne.n	80077ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f819 	bl	80077d6 <UART_WaitOnFlagUntilTimeout>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e00f      	b.n	80077ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2220      	movs	r2, #32
 80077ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b09c      	sub	sp, #112	; 0x70
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	603b      	str	r3, [r7, #0]
 80077e2:	4613      	mov	r3, r2
 80077e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077e6:	e0a9      	b.n	800793c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ee:	f000 80a5 	beq.w	800793c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077f2:	f7f9 ffb7 	bl	8001764 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077fe:	429a      	cmp	r2, r3
 8007800:	d302      	bcc.n	8007808 <UART_WaitOnFlagUntilTimeout+0x32>
 8007802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007804:	2b00      	cmp	r3, #0
 8007806:	d140      	bne.n	800788a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007818:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800781c:	667b      	str	r3, [r7, #100]	; 0x64
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007828:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800782c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e6      	bne.n	8007808 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3308      	adds	r3, #8
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	f023 0301 	bic.w	r3, r3, #1
 8007850:	663b      	str	r3, [r7, #96]	; 0x60
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3308      	adds	r3, #8
 8007858:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800785a:	64ba      	str	r2, [r7, #72]	; 0x48
 800785c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e5      	bne.n	800783a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2220      	movs	r2, #32
 8007872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2220      	movs	r2, #32
 800787a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e069      	b.n	800795e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	2b00      	cmp	r3, #0
 8007896:	d051      	beq.n	800793c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a6:	d149      	bne.n	800793c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	e853 3f00 	ldrex	r3, [r3]
 80078be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	461a      	mov	r2, r3
 80078ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d0:	637b      	str	r3, [r7, #52]	; 0x34
 80078d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078d8:	e841 2300 	strex	r3, r2, [r1]
 80078dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1e6      	bne.n	80078b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3308      	adds	r3, #8
 80078ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	613b      	str	r3, [r7, #16]
   return(result);
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f023 0301 	bic.w	r3, r3, #1
 80078fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3308      	adds	r3, #8
 8007902:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007904:	623a      	str	r2, [r7, #32]
 8007906:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	69f9      	ldr	r1, [r7, #28]
 800790a:	6a3a      	ldr	r2, [r7, #32]
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	61bb      	str	r3, [r7, #24]
   return(result);
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e5      	bne.n	80078e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2220      	movs	r2, #32
 800791c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2220      	movs	r2, #32
 8007924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2220      	movs	r2, #32
 800792c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e010      	b.n	800795e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	69da      	ldr	r2, [r3, #28]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	4013      	ands	r3, r2
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	429a      	cmp	r2, r3
 800794a:	bf0c      	ite	eq
 800794c:	2301      	moveq	r3, #1
 800794e:	2300      	movne	r3, #0
 8007950:	b2db      	uxtb	r3, r3
 8007952:	461a      	mov	r2, r3
 8007954:	79fb      	ldrb	r3, [r7, #7]
 8007956:	429a      	cmp	r2, r3
 8007958:	f43f af46 	beq.w	80077e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3770      	adds	r7, #112	; 0x70
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007966:	b480      	push	{r7}
 8007968:	b085      	sub	sp, #20
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007974:	2b01      	cmp	r3, #1
 8007976:	d101      	bne.n	800797c <HAL_UARTEx_DisableFifoMode+0x16>
 8007978:	2302      	movs	r3, #2
 800797a:	e027      	b.n	80079cc <HAL_UARTEx_DisableFifoMode+0x66>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2224      	movs	r2, #36	; 0x24
 8007988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0201 	bic.w	r2, r2, #1
 80079a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80079aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079ec:	2302      	movs	r3, #2
 80079ee:	e02d      	b.n	8007a4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2224      	movs	r2, #36	; 0x24
 80079fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0201 	bic.w	r2, r2, #1
 8007a16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f84f 	bl	8007ad0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e02d      	b.n	8007ac8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2224      	movs	r2, #36	; 0x24
 8007a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0201 	bic.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f811 	bl	8007ad0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d108      	bne.n	8007af2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007af0:	e031      	b.n	8007b56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007af2:	2310      	movs	r3, #16
 8007af4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007af6:	2310      	movs	r3, #16
 8007af8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	0e5b      	lsrs	r3, r3, #25
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f003 0307 	and.w	r3, r3, #7
 8007b08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	0f5b      	lsrs	r3, r3, #29
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	7b3a      	ldrb	r2, [r7, #12]
 8007b1e:	4911      	ldr	r1, [pc, #68]	; (8007b64 <UARTEx_SetNbDataToProcess+0x94>)
 8007b20:	5c8a      	ldrb	r2, [r1, r2]
 8007b22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b26:	7b3a      	ldrb	r2, [r7, #12]
 8007b28:	490f      	ldr	r1, [pc, #60]	; (8007b68 <UARTEx_SetNbDataToProcess+0x98>)
 8007b2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	7b7a      	ldrb	r2, [r7, #13]
 8007b3c:	4909      	ldr	r1, [pc, #36]	; (8007b64 <UARTEx_SetNbDataToProcess+0x94>)
 8007b3e:	5c8a      	ldrb	r2, [r1, r2]
 8007b40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b44:	7b7a      	ldrb	r2, [r7, #13]
 8007b46:	4908      	ldr	r1, [pc, #32]	; (8007b68 <UARTEx_SetNbDataToProcess+0x98>)
 8007b48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b56:	bf00      	nop
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	0800a8fc 	.word	0x0800a8fc
 8007b68:	0800a904 	.word	0x0800a904

08007b6c <__errno>:
 8007b6c:	4b01      	ldr	r3, [pc, #4]	; (8007b74 <__errno+0x8>)
 8007b6e:	6818      	ldr	r0, [r3, #0]
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	24000010 	.word	0x24000010

08007b78 <__libc_init_array>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	4d0d      	ldr	r5, [pc, #52]	; (8007bb0 <__libc_init_array+0x38>)
 8007b7c:	4c0d      	ldr	r4, [pc, #52]	; (8007bb4 <__libc_init_array+0x3c>)
 8007b7e:	1b64      	subs	r4, r4, r5
 8007b80:	10a4      	asrs	r4, r4, #2
 8007b82:	2600      	movs	r6, #0
 8007b84:	42a6      	cmp	r6, r4
 8007b86:	d109      	bne.n	8007b9c <__libc_init_array+0x24>
 8007b88:	4d0b      	ldr	r5, [pc, #44]	; (8007bb8 <__libc_init_array+0x40>)
 8007b8a:	4c0c      	ldr	r4, [pc, #48]	; (8007bbc <__libc_init_array+0x44>)
 8007b8c:	f002 fe5c 	bl	800a848 <_init>
 8007b90:	1b64      	subs	r4, r4, r5
 8007b92:	10a4      	asrs	r4, r4, #2
 8007b94:	2600      	movs	r6, #0
 8007b96:	42a6      	cmp	r6, r4
 8007b98:	d105      	bne.n	8007ba6 <__libc_init_array+0x2e>
 8007b9a:	bd70      	pop	{r4, r5, r6, pc}
 8007b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ba0:	4798      	blx	r3
 8007ba2:	3601      	adds	r6, #1
 8007ba4:	e7ee      	b.n	8007b84 <__libc_init_array+0xc>
 8007ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007baa:	4798      	blx	r3
 8007bac:	3601      	adds	r6, #1
 8007bae:	e7f2      	b.n	8007b96 <__libc_init_array+0x1e>
 8007bb0:	0800acec 	.word	0x0800acec
 8007bb4:	0800acec 	.word	0x0800acec
 8007bb8:	0800acec 	.word	0x0800acec
 8007bbc:	0800acf0 	.word	0x0800acf0

08007bc0 <memset>:
 8007bc0:	4402      	add	r2, r0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d100      	bne.n	8007bca <memset+0xa>
 8007bc8:	4770      	bx	lr
 8007bca:	f803 1b01 	strb.w	r1, [r3], #1
 8007bce:	e7f9      	b.n	8007bc4 <memset+0x4>

08007bd0 <__cvt>:
 8007bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bd2:	ed2d 8b02 	vpush	{d8}
 8007bd6:	eeb0 8b40 	vmov.f64	d8, d0
 8007bda:	b085      	sub	sp, #20
 8007bdc:	4617      	mov	r7, r2
 8007bde:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007be0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007be2:	ee18 2a90 	vmov	r2, s17
 8007be6:	f025 0520 	bic.w	r5, r5, #32
 8007bea:	2a00      	cmp	r2, #0
 8007bec:	bfb6      	itet	lt
 8007bee:	222d      	movlt	r2, #45	; 0x2d
 8007bf0:	2200      	movge	r2, #0
 8007bf2:	eeb1 8b40 	vneglt.f64	d8, d0
 8007bf6:	2d46      	cmp	r5, #70	; 0x46
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	701a      	strb	r2, [r3, #0]
 8007bfc:	d004      	beq.n	8007c08 <__cvt+0x38>
 8007bfe:	2d45      	cmp	r5, #69	; 0x45
 8007c00:	d100      	bne.n	8007c04 <__cvt+0x34>
 8007c02:	3401      	adds	r4, #1
 8007c04:	2102      	movs	r1, #2
 8007c06:	e000      	b.n	8007c0a <__cvt+0x3a>
 8007c08:	2103      	movs	r1, #3
 8007c0a:	ab03      	add	r3, sp, #12
 8007c0c:	9301      	str	r3, [sp, #4]
 8007c0e:	ab02      	add	r3, sp, #8
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	4622      	mov	r2, r4
 8007c14:	4633      	mov	r3, r6
 8007c16:	eeb0 0b48 	vmov.f64	d0, d8
 8007c1a:	f000 fcc9 	bl	80085b0 <_dtoa_r>
 8007c1e:	2d47      	cmp	r5, #71	; 0x47
 8007c20:	d101      	bne.n	8007c26 <__cvt+0x56>
 8007c22:	07fb      	lsls	r3, r7, #31
 8007c24:	d51a      	bpl.n	8007c5c <__cvt+0x8c>
 8007c26:	2d46      	cmp	r5, #70	; 0x46
 8007c28:	eb00 0204 	add.w	r2, r0, r4
 8007c2c:	d10c      	bne.n	8007c48 <__cvt+0x78>
 8007c2e:	7803      	ldrb	r3, [r0, #0]
 8007c30:	2b30      	cmp	r3, #48	; 0x30
 8007c32:	d107      	bne.n	8007c44 <__cvt+0x74>
 8007c34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c3c:	bf1c      	itt	ne
 8007c3e:	f1c4 0401 	rsbne	r4, r4, #1
 8007c42:	6034      	strne	r4, [r6, #0]
 8007c44:	6833      	ldr	r3, [r6, #0]
 8007c46:	441a      	add	r2, r3
 8007c48:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c50:	bf08      	it	eq
 8007c52:	9203      	streq	r2, [sp, #12]
 8007c54:	2130      	movs	r1, #48	; 0x30
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d307      	bcc.n	8007c6c <__cvt+0x9c>
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c60:	1a1b      	subs	r3, r3, r0
 8007c62:	6013      	str	r3, [r2, #0]
 8007c64:	b005      	add	sp, #20
 8007c66:	ecbd 8b02 	vpop	{d8}
 8007c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c6c:	1c5c      	adds	r4, r3, #1
 8007c6e:	9403      	str	r4, [sp, #12]
 8007c70:	7019      	strb	r1, [r3, #0]
 8007c72:	e7f0      	b.n	8007c56 <__cvt+0x86>

08007c74 <__exponent>:
 8007c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c76:	4603      	mov	r3, r0
 8007c78:	2900      	cmp	r1, #0
 8007c7a:	bfb8      	it	lt
 8007c7c:	4249      	neglt	r1, r1
 8007c7e:	f803 2b02 	strb.w	r2, [r3], #2
 8007c82:	bfb4      	ite	lt
 8007c84:	222d      	movlt	r2, #45	; 0x2d
 8007c86:	222b      	movge	r2, #43	; 0x2b
 8007c88:	2909      	cmp	r1, #9
 8007c8a:	7042      	strb	r2, [r0, #1]
 8007c8c:	dd2a      	ble.n	8007ce4 <__exponent+0x70>
 8007c8e:	f10d 0407 	add.w	r4, sp, #7
 8007c92:	46a4      	mov	ip, r4
 8007c94:	270a      	movs	r7, #10
 8007c96:	46a6      	mov	lr, r4
 8007c98:	460a      	mov	r2, r1
 8007c9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c9e:	fb07 1516 	mls	r5, r7, r6, r1
 8007ca2:	3530      	adds	r5, #48	; 0x30
 8007ca4:	2a63      	cmp	r2, #99	; 0x63
 8007ca6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007caa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007cae:	4631      	mov	r1, r6
 8007cb0:	dcf1      	bgt.n	8007c96 <__exponent+0x22>
 8007cb2:	3130      	adds	r1, #48	; 0x30
 8007cb4:	f1ae 0502 	sub.w	r5, lr, #2
 8007cb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007cbc:	1c44      	adds	r4, r0, #1
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	4561      	cmp	r1, ip
 8007cc2:	d30a      	bcc.n	8007cda <__exponent+0x66>
 8007cc4:	f10d 0209 	add.w	r2, sp, #9
 8007cc8:	eba2 020e 	sub.w	r2, r2, lr
 8007ccc:	4565      	cmp	r5, ip
 8007cce:	bf88      	it	hi
 8007cd0:	2200      	movhi	r2, #0
 8007cd2:	4413      	add	r3, r2
 8007cd4:	1a18      	subs	r0, r3, r0
 8007cd6:	b003      	add	sp, #12
 8007cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cde:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ce2:	e7ed      	b.n	8007cc0 <__exponent+0x4c>
 8007ce4:	2330      	movs	r3, #48	; 0x30
 8007ce6:	3130      	adds	r1, #48	; 0x30
 8007ce8:	7083      	strb	r3, [r0, #2]
 8007cea:	70c1      	strb	r1, [r0, #3]
 8007cec:	1d03      	adds	r3, r0, #4
 8007cee:	e7f1      	b.n	8007cd4 <__exponent+0x60>

08007cf0 <_printf_float>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	b08b      	sub	sp, #44	; 0x2c
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007cfc:	4616      	mov	r6, r2
 8007cfe:	461f      	mov	r7, r3
 8007d00:	4605      	mov	r5, r0
 8007d02:	f001 f9c3 	bl	800908c <_localeconv_r>
 8007d06:	f8d0 b000 	ldr.w	fp, [r0]
 8007d0a:	4658      	mov	r0, fp
 8007d0c:	f7f8 fae8 	bl	80002e0 <strlen>
 8007d10:	2300      	movs	r3, #0
 8007d12:	9308      	str	r3, [sp, #32]
 8007d14:	f8d8 3000 	ldr.w	r3, [r8]
 8007d18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007d1c:	6822      	ldr	r2, [r4, #0]
 8007d1e:	3307      	adds	r3, #7
 8007d20:	f023 0307 	bic.w	r3, r3, #7
 8007d24:	f103 0108 	add.w	r1, r3, #8
 8007d28:	f8c8 1000 	str.w	r1, [r8]
 8007d2c:	4682      	mov	sl, r0
 8007d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d32:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007d36:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007f98 <_printf_float+0x2a8>
 8007d3a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007d3e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007d42:	eeb4 6b47 	vcmp.f64	d6, d7
 8007d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d4a:	dd24      	ble.n	8007d96 <_printf_float+0xa6>
 8007d4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d54:	d502      	bpl.n	8007d5c <_printf_float+0x6c>
 8007d56:	232d      	movs	r3, #45	; 0x2d
 8007d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d5c:	4b90      	ldr	r3, [pc, #576]	; (8007fa0 <_printf_float+0x2b0>)
 8007d5e:	4891      	ldr	r0, [pc, #580]	; (8007fa4 <_printf_float+0x2b4>)
 8007d60:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007d64:	bf94      	ite	ls
 8007d66:	4698      	movls	r8, r3
 8007d68:	4680      	movhi	r8, r0
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	6123      	str	r3, [r4, #16]
 8007d6e:	f022 0204 	bic.w	r2, r2, #4
 8007d72:	2300      	movs	r3, #0
 8007d74:	6022      	str	r2, [r4, #0]
 8007d76:	9304      	str	r3, [sp, #16]
 8007d78:	9700      	str	r7, [sp, #0]
 8007d7a:	4633      	mov	r3, r6
 8007d7c:	aa09      	add	r2, sp, #36	; 0x24
 8007d7e:	4621      	mov	r1, r4
 8007d80:	4628      	mov	r0, r5
 8007d82:	f000 f9d3 	bl	800812c <_printf_common>
 8007d86:	3001      	adds	r0, #1
 8007d88:	f040 808a 	bne.w	8007ea0 <_printf_float+0x1b0>
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	b00b      	add	sp, #44	; 0x2c
 8007d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d96:	eeb4 0b40 	vcmp.f64	d0, d0
 8007d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d9e:	d709      	bvc.n	8007db4 <_printf_float+0xc4>
 8007da0:	ee10 3a90 	vmov	r3, s1
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	bfbc      	itt	lt
 8007da8:	232d      	movlt	r3, #45	; 0x2d
 8007daa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007dae:	487e      	ldr	r0, [pc, #504]	; (8007fa8 <_printf_float+0x2b8>)
 8007db0:	4b7e      	ldr	r3, [pc, #504]	; (8007fac <_printf_float+0x2bc>)
 8007db2:	e7d5      	b.n	8007d60 <_printf_float+0x70>
 8007db4:	6863      	ldr	r3, [r4, #4]
 8007db6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007dba:	9104      	str	r1, [sp, #16]
 8007dbc:	1c59      	adds	r1, r3, #1
 8007dbe:	d13c      	bne.n	8007e3a <_printf_float+0x14a>
 8007dc0:	2306      	movs	r3, #6
 8007dc2:	6063      	str	r3, [r4, #4]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9303      	str	r3, [sp, #12]
 8007dc8:	ab08      	add	r3, sp, #32
 8007dca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007dce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dd2:	ab07      	add	r3, sp, #28
 8007dd4:	6861      	ldr	r1, [r4, #4]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	6022      	str	r2, [r4, #0]
 8007dda:	f10d 031b 	add.w	r3, sp, #27
 8007dde:	4628      	mov	r0, r5
 8007de0:	f7ff fef6 	bl	8007bd0 <__cvt>
 8007de4:	9b04      	ldr	r3, [sp, #16]
 8007de6:	9907      	ldr	r1, [sp, #28]
 8007de8:	2b47      	cmp	r3, #71	; 0x47
 8007dea:	4680      	mov	r8, r0
 8007dec:	d108      	bne.n	8007e00 <_printf_float+0x110>
 8007dee:	1cc8      	adds	r0, r1, #3
 8007df0:	db02      	blt.n	8007df8 <_printf_float+0x108>
 8007df2:	6863      	ldr	r3, [r4, #4]
 8007df4:	4299      	cmp	r1, r3
 8007df6:	dd41      	ble.n	8007e7c <_printf_float+0x18c>
 8007df8:	f1a9 0902 	sub.w	r9, r9, #2
 8007dfc:	fa5f f989 	uxtb.w	r9, r9
 8007e00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007e04:	d820      	bhi.n	8007e48 <_printf_float+0x158>
 8007e06:	3901      	subs	r1, #1
 8007e08:	464a      	mov	r2, r9
 8007e0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e0e:	9107      	str	r1, [sp, #28]
 8007e10:	f7ff ff30 	bl	8007c74 <__exponent>
 8007e14:	9a08      	ldr	r2, [sp, #32]
 8007e16:	9004      	str	r0, [sp, #16]
 8007e18:	1813      	adds	r3, r2, r0
 8007e1a:	2a01      	cmp	r2, #1
 8007e1c:	6123      	str	r3, [r4, #16]
 8007e1e:	dc02      	bgt.n	8007e26 <_printf_float+0x136>
 8007e20:	6822      	ldr	r2, [r4, #0]
 8007e22:	07d2      	lsls	r2, r2, #31
 8007e24:	d501      	bpl.n	8007e2a <_printf_float+0x13a>
 8007e26:	3301      	adds	r3, #1
 8007e28:	6123      	str	r3, [r4, #16]
 8007e2a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d0a2      	beq.n	8007d78 <_printf_float+0x88>
 8007e32:	232d      	movs	r3, #45	; 0x2d
 8007e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e38:	e79e      	b.n	8007d78 <_printf_float+0x88>
 8007e3a:	9904      	ldr	r1, [sp, #16]
 8007e3c:	2947      	cmp	r1, #71	; 0x47
 8007e3e:	d1c1      	bne.n	8007dc4 <_printf_float+0xd4>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1bf      	bne.n	8007dc4 <_printf_float+0xd4>
 8007e44:	2301      	movs	r3, #1
 8007e46:	e7bc      	b.n	8007dc2 <_printf_float+0xd2>
 8007e48:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007e4c:	d118      	bne.n	8007e80 <_printf_float+0x190>
 8007e4e:	2900      	cmp	r1, #0
 8007e50:	6863      	ldr	r3, [r4, #4]
 8007e52:	dd0b      	ble.n	8007e6c <_printf_float+0x17c>
 8007e54:	6121      	str	r1, [r4, #16]
 8007e56:	b913      	cbnz	r3, 8007e5e <_printf_float+0x16e>
 8007e58:	6822      	ldr	r2, [r4, #0]
 8007e5a:	07d0      	lsls	r0, r2, #31
 8007e5c:	d502      	bpl.n	8007e64 <_printf_float+0x174>
 8007e5e:	3301      	adds	r3, #1
 8007e60:	440b      	add	r3, r1
 8007e62:	6123      	str	r3, [r4, #16]
 8007e64:	2300      	movs	r3, #0
 8007e66:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e68:	9304      	str	r3, [sp, #16]
 8007e6a:	e7de      	b.n	8007e2a <_printf_float+0x13a>
 8007e6c:	b913      	cbnz	r3, 8007e74 <_printf_float+0x184>
 8007e6e:	6822      	ldr	r2, [r4, #0]
 8007e70:	07d2      	lsls	r2, r2, #31
 8007e72:	d501      	bpl.n	8007e78 <_printf_float+0x188>
 8007e74:	3302      	adds	r3, #2
 8007e76:	e7f4      	b.n	8007e62 <_printf_float+0x172>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e7f2      	b.n	8007e62 <_printf_float+0x172>
 8007e7c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007e80:	9b08      	ldr	r3, [sp, #32]
 8007e82:	4299      	cmp	r1, r3
 8007e84:	db05      	blt.n	8007e92 <_printf_float+0x1a2>
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	6121      	str	r1, [r4, #16]
 8007e8a:	07d8      	lsls	r0, r3, #31
 8007e8c:	d5ea      	bpl.n	8007e64 <_printf_float+0x174>
 8007e8e:	1c4b      	adds	r3, r1, #1
 8007e90:	e7e7      	b.n	8007e62 <_printf_float+0x172>
 8007e92:	2900      	cmp	r1, #0
 8007e94:	bfd4      	ite	le
 8007e96:	f1c1 0202 	rsble	r2, r1, #2
 8007e9a:	2201      	movgt	r2, #1
 8007e9c:	4413      	add	r3, r2
 8007e9e:	e7e0      	b.n	8007e62 <_printf_float+0x172>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	055a      	lsls	r2, r3, #21
 8007ea4:	d407      	bmi.n	8007eb6 <_printf_float+0x1c6>
 8007ea6:	6923      	ldr	r3, [r4, #16]
 8007ea8:	4642      	mov	r2, r8
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4628      	mov	r0, r5
 8007eae:	47b8      	blx	r7
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d12a      	bne.n	8007f0a <_printf_float+0x21a>
 8007eb4:	e76a      	b.n	8007d8c <_printf_float+0x9c>
 8007eb6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007eba:	f240 80e2 	bls.w	8008082 <_printf_float+0x392>
 8007ebe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007ec2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eca:	d133      	bne.n	8007f34 <_printf_float+0x244>
 8007ecc:	4a38      	ldr	r2, [pc, #224]	; (8007fb0 <_printf_float+0x2c0>)
 8007ece:	2301      	movs	r3, #1
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	47b8      	blx	r7
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	f43f af58 	beq.w	8007d8c <_printf_float+0x9c>
 8007edc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	db02      	blt.n	8007eea <_printf_float+0x1fa>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	07d8      	lsls	r0, r3, #31
 8007ee8:	d50f      	bpl.n	8007f0a <_printf_float+0x21a>
 8007eea:	4653      	mov	r3, sl
 8007eec:	465a      	mov	r2, fp
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	47b8      	blx	r7
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	f43f af49 	beq.w	8007d8c <_printf_float+0x9c>
 8007efa:	f04f 0800 	mov.w	r8, #0
 8007efe:	f104 091a 	add.w	r9, r4, #26
 8007f02:	9b08      	ldr	r3, [sp, #32]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	4543      	cmp	r3, r8
 8007f08:	dc09      	bgt.n	8007f1e <_printf_float+0x22e>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	079b      	lsls	r3, r3, #30
 8007f0e:	f100 8108 	bmi.w	8008122 <_printf_float+0x432>
 8007f12:	68e0      	ldr	r0, [r4, #12]
 8007f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f16:	4298      	cmp	r0, r3
 8007f18:	bfb8      	it	lt
 8007f1a:	4618      	movlt	r0, r3
 8007f1c:	e738      	b.n	8007d90 <_printf_float+0xa0>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	464a      	mov	r2, r9
 8007f22:	4631      	mov	r1, r6
 8007f24:	4628      	mov	r0, r5
 8007f26:	47b8      	blx	r7
 8007f28:	3001      	adds	r0, #1
 8007f2a:	f43f af2f 	beq.w	8007d8c <_printf_float+0x9c>
 8007f2e:	f108 0801 	add.w	r8, r8, #1
 8007f32:	e7e6      	b.n	8007f02 <_printf_float+0x212>
 8007f34:	9b07      	ldr	r3, [sp, #28]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	dc3c      	bgt.n	8007fb4 <_printf_float+0x2c4>
 8007f3a:	4a1d      	ldr	r2, [pc, #116]	; (8007fb0 <_printf_float+0x2c0>)
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	4631      	mov	r1, r6
 8007f40:	4628      	mov	r0, r5
 8007f42:	47b8      	blx	r7
 8007f44:	3001      	adds	r0, #1
 8007f46:	f43f af21 	beq.w	8007d8c <_printf_float+0x9c>
 8007f4a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	d102      	bne.n	8007f58 <_printf_float+0x268>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	07d9      	lsls	r1, r3, #31
 8007f56:	d5d8      	bpl.n	8007f0a <_printf_float+0x21a>
 8007f58:	4653      	mov	r3, sl
 8007f5a:	465a      	mov	r2, fp
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	4628      	mov	r0, r5
 8007f60:	47b8      	blx	r7
 8007f62:	3001      	adds	r0, #1
 8007f64:	f43f af12 	beq.w	8007d8c <_printf_float+0x9c>
 8007f68:	f04f 0900 	mov.w	r9, #0
 8007f6c:	f104 0a1a 	add.w	sl, r4, #26
 8007f70:	9b07      	ldr	r3, [sp, #28]
 8007f72:	425b      	negs	r3, r3
 8007f74:	454b      	cmp	r3, r9
 8007f76:	dc01      	bgt.n	8007f7c <_printf_float+0x28c>
 8007f78:	9b08      	ldr	r3, [sp, #32]
 8007f7a:	e795      	b.n	8007ea8 <_printf_float+0x1b8>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	4652      	mov	r2, sl
 8007f80:	4631      	mov	r1, r6
 8007f82:	4628      	mov	r0, r5
 8007f84:	47b8      	blx	r7
 8007f86:	3001      	adds	r0, #1
 8007f88:	f43f af00 	beq.w	8007d8c <_printf_float+0x9c>
 8007f8c:	f109 0901 	add.w	r9, r9, #1
 8007f90:	e7ee      	b.n	8007f70 <_printf_float+0x280>
 8007f92:	bf00      	nop
 8007f94:	f3af 8000 	nop.w
 8007f98:	ffffffff 	.word	0xffffffff
 8007f9c:	7fefffff 	.word	0x7fefffff
 8007fa0:	0800a910 	.word	0x0800a910
 8007fa4:	0800a914 	.word	0x0800a914
 8007fa8:	0800a91c 	.word	0x0800a91c
 8007fac:	0800a918 	.word	0x0800a918
 8007fb0:	0800a920 	.word	0x0800a920
 8007fb4:	9a08      	ldr	r2, [sp, #32]
 8007fb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	bfa8      	it	ge
 8007fbc:	461a      	movge	r2, r3
 8007fbe:	2a00      	cmp	r2, #0
 8007fc0:	4691      	mov	r9, r2
 8007fc2:	dc38      	bgt.n	8008036 <_printf_float+0x346>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9305      	str	r3, [sp, #20]
 8007fc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fcc:	f104 021a 	add.w	r2, r4, #26
 8007fd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007fd2:	9905      	ldr	r1, [sp, #20]
 8007fd4:	9304      	str	r3, [sp, #16]
 8007fd6:	eba3 0309 	sub.w	r3, r3, r9
 8007fda:	428b      	cmp	r3, r1
 8007fdc:	dc33      	bgt.n	8008046 <_printf_float+0x356>
 8007fde:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	db3c      	blt.n	8008060 <_printf_float+0x370>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	07da      	lsls	r2, r3, #31
 8007fea:	d439      	bmi.n	8008060 <_printf_float+0x370>
 8007fec:	9b08      	ldr	r3, [sp, #32]
 8007fee:	9a04      	ldr	r2, [sp, #16]
 8007ff0:	9907      	ldr	r1, [sp, #28]
 8007ff2:	1a9a      	subs	r2, r3, r2
 8007ff4:	eba3 0901 	sub.w	r9, r3, r1
 8007ff8:	4591      	cmp	r9, r2
 8007ffa:	bfa8      	it	ge
 8007ffc:	4691      	movge	r9, r2
 8007ffe:	f1b9 0f00 	cmp.w	r9, #0
 8008002:	dc35      	bgt.n	8008070 <_printf_float+0x380>
 8008004:	f04f 0800 	mov.w	r8, #0
 8008008:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800800c:	f104 0a1a 	add.w	sl, r4, #26
 8008010:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008014:	1a9b      	subs	r3, r3, r2
 8008016:	eba3 0309 	sub.w	r3, r3, r9
 800801a:	4543      	cmp	r3, r8
 800801c:	f77f af75 	ble.w	8007f0a <_printf_float+0x21a>
 8008020:	2301      	movs	r3, #1
 8008022:	4652      	mov	r2, sl
 8008024:	4631      	mov	r1, r6
 8008026:	4628      	mov	r0, r5
 8008028:	47b8      	blx	r7
 800802a:	3001      	adds	r0, #1
 800802c:	f43f aeae 	beq.w	8007d8c <_printf_float+0x9c>
 8008030:	f108 0801 	add.w	r8, r8, #1
 8008034:	e7ec      	b.n	8008010 <_printf_float+0x320>
 8008036:	4613      	mov	r3, r2
 8008038:	4631      	mov	r1, r6
 800803a:	4642      	mov	r2, r8
 800803c:	4628      	mov	r0, r5
 800803e:	47b8      	blx	r7
 8008040:	3001      	adds	r0, #1
 8008042:	d1bf      	bne.n	8007fc4 <_printf_float+0x2d4>
 8008044:	e6a2      	b.n	8007d8c <_printf_float+0x9c>
 8008046:	2301      	movs	r3, #1
 8008048:	4631      	mov	r1, r6
 800804a:	4628      	mov	r0, r5
 800804c:	9204      	str	r2, [sp, #16]
 800804e:	47b8      	blx	r7
 8008050:	3001      	adds	r0, #1
 8008052:	f43f ae9b 	beq.w	8007d8c <_printf_float+0x9c>
 8008056:	9b05      	ldr	r3, [sp, #20]
 8008058:	9a04      	ldr	r2, [sp, #16]
 800805a:	3301      	adds	r3, #1
 800805c:	9305      	str	r3, [sp, #20]
 800805e:	e7b7      	b.n	8007fd0 <_printf_float+0x2e0>
 8008060:	4653      	mov	r3, sl
 8008062:	465a      	mov	r2, fp
 8008064:	4631      	mov	r1, r6
 8008066:	4628      	mov	r0, r5
 8008068:	47b8      	blx	r7
 800806a:	3001      	adds	r0, #1
 800806c:	d1be      	bne.n	8007fec <_printf_float+0x2fc>
 800806e:	e68d      	b.n	8007d8c <_printf_float+0x9c>
 8008070:	9a04      	ldr	r2, [sp, #16]
 8008072:	464b      	mov	r3, r9
 8008074:	4442      	add	r2, r8
 8008076:	4631      	mov	r1, r6
 8008078:	4628      	mov	r0, r5
 800807a:	47b8      	blx	r7
 800807c:	3001      	adds	r0, #1
 800807e:	d1c1      	bne.n	8008004 <_printf_float+0x314>
 8008080:	e684      	b.n	8007d8c <_printf_float+0x9c>
 8008082:	9a08      	ldr	r2, [sp, #32]
 8008084:	2a01      	cmp	r2, #1
 8008086:	dc01      	bgt.n	800808c <_printf_float+0x39c>
 8008088:	07db      	lsls	r3, r3, #31
 800808a:	d537      	bpl.n	80080fc <_printf_float+0x40c>
 800808c:	2301      	movs	r3, #1
 800808e:	4642      	mov	r2, r8
 8008090:	4631      	mov	r1, r6
 8008092:	4628      	mov	r0, r5
 8008094:	47b8      	blx	r7
 8008096:	3001      	adds	r0, #1
 8008098:	f43f ae78 	beq.w	8007d8c <_printf_float+0x9c>
 800809c:	4653      	mov	r3, sl
 800809e:	465a      	mov	r2, fp
 80080a0:	4631      	mov	r1, r6
 80080a2:	4628      	mov	r0, r5
 80080a4:	47b8      	blx	r7
 80080a6:	3001      	adds	r0, #1
 80080a8:	f43f ae70 	beq.w	8007d8c <_printf_float+0x9c>
 80080ac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80080b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80080b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b8:	d01b      	beq.n	80080f2 <_printf_float+0x402>
 80080ba:	9b08      	ldr	r3, [sp, #32]
 80080bc:	f108 0201 	add.w	r2, r8, #1
 80080c0:	3b01      	subs	r3, #1
 80080c2:	4631      	mov	r1, r6
 80080c4:	4628      	mov	r0, r5
 80080c6:	47b8      	blx	r7
 80080c8:	3001      	adds	r0, #1
 80080ca:	d10e      	bne.n	80080ea <_printf_float+0x3fa>
 80080cc:	e65e      	b.n	8007d8c <_printf_float+0x9c>
 80080ce:	2301      	movs	r3, #1
 80080d0:	464a      	mov	r2, r9
 80080d2:	4631      	mov	r1, r6
 80080d4:	4628      	mov	r0, r5
 80080d6:	47b8      	blx	r7
 80080d8:	3001      	adds	r0, #1
 80080da:	f43f ae57 	beq.w	8007d8c <_printf_float+0x9c>
 80080de:	f108 0801 	add.w	r8, r8, #1
 80080e2:	9b08      	ldr	r3, [sp, #32]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	4543      	cmp	r3, r8
 80080e8:	dcf1      	bgt.n	80080ce <_printf_float+0x3de>
 80080ea:	9b04      	ldr	r3, [sp, #16]
 80080ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080f0:	e6db      	b.n	8007eaa <_printf_float+0x1ba>
 80080f2:	f04f 0800 	mov.w	r8, #0
 80080f6:	f104 091a 	add.w	r9, r4, #26
 80080fa:	e7f2      	b.n	80080e2 <_printf_float+0x3f2>
 80080fc:	2301      	movs	r3, #1
 80080fe:	4642      	mov	r2, r8
 8008100:	e7df      	b.n	80080c2 <_printf_float+0x3d2>
 8008102:	2301      	movs	r3, #1
 8008104:	464a      	mov	r2, r9
 8008106:	4631      	mov	r1, r6
 8008108:	4628      	mov	r0, r5
 800810a:	47b8      	blx	r7
 800810c:	3001      	adds	r0, #1
 800810e:	f43f ae3d 	beq.w	8007d8c <_printf_float+0x9c>
 8008112:	f108 0801 	add.w	r8, r8, #1
 8008116:	68e3      	ldr	r3, [r4, #12]
 8008118:	9909      	ldr	r1, [sp, #36]	; 0x24
 800811a:	1a5b      	subs	r3, r3, r1
 800811c:	4543      	cmp	r3, r8
 800811e:	dcf0      	bgt.n	8008102 <_printf_float+0x412>
 8008120:	e6f7      	b.n	8007f12 <_printf_float+0x222>
 8008122:	f04f 0800 	mov.w	r8, #0
 8008126:	f104 0919 	add.w	r9, r4, #25
 800812a:	e7f4      	b.n	8008116 <_printf_float+0x426>

0800812c <_printf_common>:
 800812c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008130:	4616      	mov	r6, r2
 8008132:	4699      	mov	r9, r3
 8008134:	688a      	ldr	r2, [r1, #8]
 8008136:	690b      	ldr	r3, [r1, #16]
 8008138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800813c:	4293      	cmp	r3, r2
 800813e:	bfb8      	it	lt
 8008140:	4613      	movlt	r3, r2
 8008142:	6033      	str	r3, [r6, #0]
 8008144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008148:	4607      	mov	r7, r0
 800814a:	460c      	mov	r4, r1
 800814c:	b10a      	cbz	r2, 8008152 <_printf_common+0x26>
 800814e:	3301      	adds	r3, #1
 8008150:	6033      	str	r3, [r6, #0]
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	0699      	lsls	r1, r3, #26
 8008156:	bf42      	ittt	mi
 8008158:	6833      	ldrmi	r3, [r6, #0]
 800815a:	3302      	addmi	r3, #2
 800815c:	6033      	strmi	r3, [r6, #0]
 800815e:	6825      	ldr	r5, [r4, #0]
 8008160:	f015 0506 	ands.w	r5, r5, #6
 8008164:	d106      	bne.n	8008174 <_printf_common+0x48>
 8008166:	f104 0a19 	add.w	sl, r4, #25
 800816a:	68e3      	ldr	r3, [r4, #12]
 800816c:	6832      	ldr	r2, [r6, #0]
 800816e:	1a9b      	subs	r3, r3, r2
 8008170:	42ab      	cmp	r3, r5
 8008172:	dc26      	bgt.n	80081c2 <_printf_common+0x96>
 8008174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008178:	1e13      	subs	r3, r2, #0
 800817a:	6822      	ldr	r2, [r4, #0]
 800817c:	bf18      	it	ne
 800817e:	2301      	movne	r3, #1
 8008180:	0692      	lsls	r2, r2, #26
 8008182:	d42b      	bmi.n	80081dc <_printf_common+0xb0>
 8008184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008188:	4649      	mov	r1, r9
 800818a:	4638      	mov	r0, r7
 800818c:	47c0      	blx	r8
 800818e:	3001      	adds	r0, #1
 8008190:	d01e      	beq.n	80081d0 <_printf_common+0xa4>
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	68e5      	ldr	r5, [r4, #12]
 8008196:	6832      	ldr	r2, [r6, #0]
 8008198:	f003 0306 	and.w	r3, r3, #6
 800819c:	2b04      	cmp	r3, #4
 800819e:	bf08      	it	eq
 80081a0:	1aad      	subeq	r5, r5, r2
 80081a2:	68a3      	ldr	r3, [r4, #8]
 80081a4:	6922      	ldr	r2, [r4, #16]
 80081a6:	bf0c      	ite	eq
 80081a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081ac:	2500      	movne	r5, #0
 80081ae:	4293      	cmp	r3, r2
 80081b0:	bfc4      	itt	gt
 80081b2:	1a9b      	subgt	r3, r3, r2
 80081b4:	18ed      	addgt	r5, r5, r3
 80081b6:	2600      	movs	r6, #0
 80081b8:	341a      	adds	r4, #26
 80081ba:	42b5      	cmp	r5, r6
 80081bc:	d11a      	bne.n	80081f4 <_printf_common+0xc8>
 80081be:	2000      	movs	r0, #0
 80081c0:	e008      	b.n	80081d4 <_printf_common+0xa8>
 80081c2:	2301      	movs	r3, #1
 80081c4:	4652      	mov	r2, sl
 80081c6:	4649      	mov	r1, r9
 80081c8:	4638      	mov	r0, r7
 80081ca:	47c0      	blx	r8
 80081cc:	3001      	adds	r0, #1
 80081ce:	d103      	bne.n	80081d8 <_printf_common+0xac>
 80081d0:	f04f 30ff 	mov.w	r0, #4294967295
 80081d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d8:	3501      	adds	r5, #1
 80081da:	e7c6      	b.n	800816a <_printf_common+0x3e>
 80081dc:	18e1      	adds	r1, r4, r3
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	2030      	movs	r0, #48	; 0x30
 80081e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081e6:	4422      	add	r2, r4
 80081e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081f0:	3302      	adds	r3, #2
 80081f2:	e7c7      	b.n	8008184 <_printf_common+0x58>
 80081f4:	2301      	movs	r3, #1
 80081f6:	4622      	mov	r2, r4
 80081f8:	4649      	mov	r1, r9
 80081fa:	4638      	mov	r0, r7
 80081fc:	47c0      	blx	r8
 80081fe:	3001      	adds	r0, #1
 8008200:	d0e6      	beq.n	80081d0 <_printf_common+0xa4>
 8008202:	3601      	adds	r6, #1
 8008204:	e7d9      	b.n	80081ba <_printf_common+0x8e>
	...

08008208 <_printf_i>:
 8008208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	7e0f      	ldrb	r7, [r1, #24]
 800820e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008210:	2f78      	cmp	r7, #120	; 0x78
 8008212:	4691      	mov	r9, r2
 8008214:	4680      	mov	r8, r0
 8008216:	460c      	mov	r4, r1
 8008218:	469a      	mov	sl, r3
 800821a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800821e:	d807      	bhi.n	8008230 <_printf_i+0x28>
 8008220:	2f62      	cmp	r7, #98	; 0x62
 8008222:	d80a      	bhi.n	800823a <_printf_i+0x32>
 8008224:	2f00      	cmp	r7, #0
 8008226:	f000 80d8 	beq.w	80083da <_printf_i+0x1d2>
 800822a:	2f58      	cmp	r7, #88	; 0x58
 800822c:	f000 80a3 	beq.w	8008376 <_printf_i+0x16e>
 8008230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008238:	e03a      	b.n	80082b0 <_printf_i+0xa8>
 800823a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800823e:	2b15      	cmp	r3, #21
 8008240:	d8f6      	bhi.n	8008230 <_printf_i+0x28>
 8008242:	a101      	add	r1, pc, #4	; (adr r1, 8008248 <_printf_i+0x40>)
 8008244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008248:	080082a1 	.word	0x080082a1
 800824c:	080082b5 	.word	0x080082b5
 8008250:	08008231 	.word	0x08008231
 8008254:	08008231 	.word	0x08008231
 8008258:	08008231 	.word	0x08008231
 800825c:	08008231 	.word	0x08008231
 8008260:	080082b5 	.word	0x080082b5
 8008264:	08008231 	.word	0x08008231
 8008268:	08008231 	.word	0x08008231
 800826c:	08008231 	.word	0x08008231
 8008270:	08008231 	.word	0x08008231
 8008274:	080083c1 	.word	0x080083c1
 8008278:	080082e5 	.word	0x080082e5
 800827c:	080083a3 	.word	0x080083a3
 8008280:	08008231 	.word	0x08008231
 8008284:	08008231 	.word	0x08008231
 8008288:	080083e3 	.word	0x080083e3
 800828c:	08008231 	.word	0x08008231
 8008290:	080082e5 	.word	0x080082e5
 8008294:	08008231 	.word	0x08008231
 8008298:	08008231 	.word	0x08008231
 800829c:	080083ab 	.word	0x080083ab
 80082a0:	682b      	ldr	r3, [r5, #0]
 80082a2:	1d1a      	adds	r2, r3, #4
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	602a      	str	r2, [r5, #0]
 80082a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082b0:	2301      	movs	r3, #1
 80082b2:	e0a3      	b.n	80083fc <_printf_i+0x1f4>
 80082b4:	6820      	ldr	r0, [r4, #0]
 80082b6:	6829      	ldr	r1, [r5, #0]
 80082b8:	0606      	lsls	r6, r0, #24
 80082ba:	f101 0304 	add.w	r3, r1, #4
 80082be:	d50a      	bpl.n	80082d6 <_printf_i+0xce>
 80082c0:	680e      	ldr	r6, [r1, #0]
 80082c2:	602b      	str	r3, [r5, #0]
 80082c4:	2e00      	cmp	r6, #0
 80082c6:	da03      	bge.n	80082d0 <_printf_i+0xc8>
 80082c8:	232d      	movs	r3, #45	; 0x2d
 80082ca:	4276      	negs	r6, r6
 80082cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082d0:	485e      	ldr	r0, [pc, #376]	; (800844c <_printf_i+0x244>)
 80082d2:	230a      	movs	r3, #10
 80082d4:	e019      	b.n	800830a <_printf_i+0x102>
 80082d6:	680e      	ldr	r6, [r1, #0]
 80082d8:	602b      	str	r3, [r5, #0]
 80082da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082de:	bf18      	it	ne
 80082e0:	b236      	sxthne	r6, r6
 80082e2:	e7ef      	b.n	80082c4 <_printf_i+0xbc>
 80082e4:	682b      	ldr	r3, [r5, #0]
 80082e6:	6820      	ldr	r0, [r4, #0]
 80082e8:	1d19      	adds	r1, r3, #4
 80082ea:	6029      	str	r1, [r5, #0]
 80082ec:	0601      	lsls	r1, r0, #24
 80082ee:	d501      	bpl.n	80082f4 <_printf_i+0xec>
 80082f0:	681e      	ldr	r6, [r3, #0]
 80082f2:	e002      	b.n	80082fa <_printf_i+0xf2>
 80082f4:	0646      	lsls	r6, r0, #25
 80082f6:	d5fb      	bpl.n	80082f0 <_printf_i+0xe8>
 80082f8:	881e      	ldrh	r6, [r3, #0]
 80082fa:	4854      	ldr	r0, [pc, #336]	; (800844c <_printf_i+0x244>)
 80082fc:	2f6f      	cmp	r7, #111	; 0x6f
 80082fe:	bf0c      	ite	eq
 8008300:	2308      	moveq	r3, #8
 8008302:	230a      	movne	r3, #10
 8008304:	2100      	movs	r1, #0
 8008306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800830a:	6865      	ldr	r5, [r4, #4]
 800830c:	60a5      	str	r5, [r4, #8]
 800830e:	2d00      	cmp	r5, #0
 8008310:	bfa2      	ittt	ge
 8008312:	6821      	ldrge	r1, [r4, #0]
 8008314:	f021 0104 	bicge.w	r1, r1, #4
 8008318:	6021      	strge	r1, [r4, #0]
 800831a:	b90e      	cbnz	r6, 8008320 <_printf_i+0x118>
 800831c:	2d00      	cmp	r5, #0
 800831e:	d04d      	beq.n	80083bc <_printf_i+0x1b4>
 8008320:	4615      	mov	r5, r2
 8008322:	fbb6 f1f3 	udiv	r1, r6, r3
 8008326:	fb03 6711 	mls	r7, r3, r1, r6
 800832a:	5dc7      	ldrb	r7, [r0, r7]
 800832c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008330:	4637      	mov	r7, r6
 8008332:	42bb      	cmp	r3, r7
 8008334:	460e      	mov	r6, r1
 8008336:	d9f4      	bls.n	8008322 <_printf_i+0x11a>
 8008338:	2b08      	cmp	r3, #8
 800833a:	d10b      	bne.n	8008354 <_printf_i+0x14c>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	07de      	lsls	r6, r3, #31
 8008340:	d508      	bpl.n	8008354 <_printf_i+0x14c>
 8008342:	6923      	ldr	r3, [r4, #16]
 8008344:	6861      	ldr	r1, [r4, #4]
 8008346:	4299      	cmp	r1, r3
 8008348:	bfde      	ittt	le
 800834a:	2330      	movle	r3, #48	; 0x30
 800834c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008350:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008354:	1b52      	subs	r2, r2, r5
 8008356:	6122      	str	r2, [r4, #16]
 8008358:	f8cd a000 	str.w	sl, [sp]
 800835c:	464b      	mov	r3, r9
 800835e:	aa03      	add	r2, sp, #12
 8008360:	4621      	mov	r1, r4
 8008362:	4640      	mov	r0, r8
 8008364:	f7ff fee2 	bl	800812c <_printf_common>
 8008368:	3001      	adds	r0, #1
 800836a:	d14c      	bne.n	8008406 <_printf_i+0x1fe>
 800836c:	f04f 30ff 	mov.w	r0, #4294967295
 8008370:	b004      	add	sp, #16
 8008372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008376:	4835      	ldr	r0, [pc, #212]	; (800844c <_printf_i+0x244>)
 8008378:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800837c:	6829      	ldr	r1, [r5, #0]
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	f851 6b04 	ldr.w	r6, [r1], #4
 8008384:	6029      	str	r1, [r5, #0]
 8008386:	061d      	lsls	r5, r3, #24
 8008388:	d514      	bpl.n	80083b4 <_printf_i+0x1ac>
 800838a:	07df      	lsls	r7, r3, #31
 800838c:	bf44      	itt	mi
 800838e:	f043 0320 	orrmi.w	r3, r3, #32
 8008392:	6023      	strmi	r3, [r4, #0]
 8008394:	b91e      	cbnz	r6, 800839e <_printf_i+0x196>
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	f023 0320 	bic.w	r3, r3, #32
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	2310      	movs	r3, #16
 80083a0:	e7b0      	b.n	8008304 <_printf_i+0xfc>
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	f043 0320 	orr.w	r3, r3, #32
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	2378      	movs	r3, #120	; 0x78
 80083ac:	4828      	ldr	r0, [pc, #160]	; (8008450 <_printf_i+0x248>)
 80083ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083b2:	e7e3      	b.n	800837c <_printf_i+0x174>
 80083b4:	0659      	lsls	r1, r3, #25
 80083b6:	bf48      	it	mi
 80083b8:	b2b6      	uxthmi	r6, r6
 80083ba:	e7e6      	b.n	800838a <_printf_i+0x182>
 80083bc:	4615      	mov	r5, r2
 80083be:	e7bb      	b.n	8008338 <_printf_i+0x130>
 80083c0:	682b      	ldr	r3, [r5, #0]
 80083c2:	6826      	ldr	r6, [r4, #0]
 80083c4:	6961      	ldr	r1, [r4, #20]
 80083c6:	1d18      	adds	r0, r3, #4
 80083c8:	6028      	str	r0, [r5, #0]
 80083ca:	0635      	lsls	r5, r6, #24
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	d501      	bpl.n	80083d4 <_printf_i+0x1cc>
 80083d0:	6019      	str	r1, [r3, #0]
 80083d2:	e002      	b.n	80083da <_printf_i+0x1d2>
 80083d4:	0670      	lsls	r0, r6, #25
 80083d6:	d5fb      	bpl.n	80083d0 <_printf_i+0x1c8>
 80083d8:	8019      	strh	r1, [r3, #0]
 80083da:	2300      	movs	r3, #0
 80083dc:	6123      	str	r3, [r4, #16]
 80083de:	4615      	mov	r5, r2
 80083e0:	e7ba      	b.n	8008358 <_printf_i+0x150>
 80083e2:	682b      	ldr	r3, [r5, #0]
 80083e4:	1d1a      	adds	r2, r3, #4
 80083e6:	602a      	str	r2, [r5, #0]
 80083e8:	681d      	ldr	r5, [r3, #0]
 80083ea:	6862      	ldr	r2, [r4, #4]
 80083ec:	2100      	movs	r1, #0
 80083ee:	4628      	mov	r0, r5
 80083f0:	f7f7 ff7e 	bl	80002f0 <memchr>
 80083f4:	b108      	cbz	r0, 80083fa <_printf_i+0x1f2>
 80083f6:	1b40      	subs	r0, r0, r5
 80083f8:	6060      	str	r0, [r4, #4]
 80083fa:	6863      	ldr	r3, [r4, #4]
 80083fc:	6123      	str	r3, [r4, #16]
 80083fe:	2300      	movs	r3, #0
 8008400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008404:	e7a8      	b.n	8008358 <_printf_i+0x150>
 8008406:	6923      	ldr	r3, [r4, #16]
 8008408:	462a      	mov	r2, r5
 800840a:	4649      	mov	r1, r9
 800840c:	4640      	mov	r0, r8
 800840e:	47d0      	blx	sl
 8008410:	3001      	adds	r0, #1
 8008412:	d0ab      	beq.n	800836c <_printf_i+0x164>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	079b      	lsls	r3, r3, #30
 8008418:	d413      	bmi.n	8008442 <_printf_i+0x23a>
 800841a:	68e0      	ldr	r0, [r4, #12]
 800841c:	9b03      	ldr	r3, [sp, #12]
 800841e:	4298      	cmp	r0, r3
 8008420:	bfb8      	it	lt
 8008422:	4618      	movlt	r0, r3
 8008424:	e7a4      	b.n	8008370 <_printf_i+0x168>
 8008426:	2301      	movs	r3, #1
 8008428:	4632      	mov	r2, r6
 800842a:	4649      	mov	r1, r9
 800842c:	4640      	mov	r0, r8
 800842e:	47d0      	blx	sl
 8008430:	3001      	adds	r0, #1
 8008432:	d09b      	beq.n	800836c <_printf_i+0x164>
 8008434:	3501      	adds	r5, #1
 8008436:	68e3      	ldr	r3, [r4, #12]
 8008438:	9903      	ldr	r1, [sp, #12]
 800843a:	1a5b      	subs	r3, r3, r1
 800843c:	42ab      	cmp	r3, r5
 800843e:	dcf2      	bgt.n	8008426 <_printf_i+0x21e>
 8008440:	e7eb      	b.n	800841a <_printf_i+0x212>
 8008442:	2500      	movs	r5, #0
 8008444:	f104 0619 	add.w	r6, r4, #25
 8008448:	e7f5      	b.n	8008436 <_printf_i+0x22e>
 800844a:	bf00      	nop
 800844c:	0800a922 	.word	0x0800a922
 8008450:	0800a933 	.word	0x0800a933

08008454 <siprintf>:
 8008454:	b40e      	push	{r1, r2, r3}
 8008456:	b500      	push	{lr}
 8008458:	b09c      	sub	sp, #112	; 0x70
 800845a:	ab1d      	add	r3, sp, #116	; 0x74
 800845c:	9002      	str	r0, [sp, #8]
 800845e:	9006      	str	r0, [sp, #24]
 8008460:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008464:	4809      	ldr	r0, [pc, #36]	; (800848c <siprintf+0x38>)
 8008466:	9107      	str	r1, [sp, #28]
 8008468:	9104      	str	r1, [sp, #16]
 800846a:	4909      	ldr	r1, [pc, #36]	; (8008490 <siprintf+0x3c>)
 800846c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008470:	9105      	str	r1, [sp, #20]
 8008472:	6800      	ldr	r0, [r0, #0]
 8008474:	9301      	str	r3, [sp, #4]
 8008476:	a902      	add	r1, sp, #8
 8008478:	f001 faf8 	bl	8009a6c <_svfiprintf_r>
 800847c:	9b02      	ldr	r3, [sp, #8]
 800847e:	2200      	movs	r2, #0
 8008480:	701a      	strb	r2, [r3, #0]
 8008482:	b01c      	add	sp, #112	; 0x70
 8008484:	f85d eb04 	ldr.w	lr, [sp], #4
 8008488:	b003      	add	sp, #12
 800848a:	4770      	bx	lr
 800848c:	24000010 	.word	0x24000010
 8008490:	ffff0208 	.word	0xffff0208

08008494 <quorem>:
 8008494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008498:	6903      	ldr	r3, [r0, #16]
 800849a:	690c      	ldr	r4, [r1, #16]
 800849c:	42a3      	cmp	r3, r4
 800849e:	4607      	mov	r7, r0
 80084a0:	f2c0 8081 	blt.w	80085a6 <quorem+0x112>
 80084a4:	3c01      	subs	r4, #1
 80084a6:	f101 0814 	add.w	r8, r1, #20
 80084aa:	f100 0514 	add.w	r5, r0, #20
 80084ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084bc:	3301      	adds	r3, #1
 80084be:	429a      	cmp	r2, r3
 80084c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80084cc:	d331      	bcc.n	8008532 <quorem+0x9e>
 80084ce:	f04f 0e00 	mov.w	lr, #0
 80084d2:	4640      	mov	r0, r8
 80084d4:	46ac      	mov	ip, r5
 80084d6:	46f2      	mov	sl, lr
 80084d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80084dc:	b293      	uxth	r3, r2
 80084de:	fb06 e303 	mla	r3, r6, r3, lr
 80084e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	ebaa 0303 	sub.w	r3, sl, r3
 80084ec:	f8dc a000 	ldr.w	sl, [ip]
 80084f0:	0c12      	lsrs	r2, r2, #16
 80084f2:	fa13 f38a 	uxtah	r3, r3, sl
 80084f6:	fb06 e202 	mla	r2, r6, r2, lr
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	9b00      	ldr	r3, [sp, #0]
 80084fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008502:	b292      	uxth	r2, r2
 8008504:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008508:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800850c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008510:	4581      	cmp	r9, r0
 8008512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008516:	f84c 3b04 	str.w	r3, [ip], #4
 800851a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800851e:	d2db      	bcs.n	80084d8 <quorem+0x44>
 8008520:	f855 300b 	ldr.w	r3, [r5, fp]
 8008524:	b92b      	cbnz	r3, 8008532 <quorem+0x9e>
 8008526:	9b01      	ldr	r3, [sp, #4]
 8008528:	3b04      	subs	r3, #4
 800852a:	429d      	cmp	r5, r3
 800852c:	461a      	mov	r2, r3
 800852e:	d32e      	bcc.n	800858e <quorem+0xfa>
 8008530:	613c      	str	r4, [r7, #16]
 8008532:	4638      	mov	r0, r7
 8008534:	f001 f846 	bl	80095c4 <__mcmp>
 8008538:	2800      	cmp	r0, #0
 800853a:	db24      	blt.n	8008586 <quorem+0xf2>
 800853c:	3601      	adds	r6, #1
 800853e:	4628      	mov	r0, r5
 8008540:	f04f 0c00 	mov.w	ip, #0
 8008544:	f858 2b04 	ldr.w	r2, [r8], #4
 8008548:	f8d0 e000 	ldr.w	lr, [r0]
 800854c:	b293      	uxth	r3, r2
 800854e:	ebac 0303 	sub.w	r3, ip, r3
 8008552:	0c12      	lsrs	r2, r2, #16
 8008554:	fa13 f38e 	uxtah	r3, r3, lr
 8008558:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800855c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008560:	b29b      	uxth	r3, r3
 8008562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008566:	45c1      	cmp	r9, r8
 8008568:	f840 3b04 	str.w	r3, [r0], #4
 800856c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008570:	d2e8      	bcs.n	8008544 <quorem+0xb0>
 8008572:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008576:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800857a:	b922      	cbnz	r2, 8008586 <quorem+0xf2>
 800857c:	3b04      	subs	r3, #4
 800857e:	429d      	cmp	r5, r3
 8008580:	461a      	mov	r2, r3
 8008582:	d30a      	bcc.n	800859a <quorem+0x106>
 8008584:	613c      	str	r4, [r7, #16]
 8008586:	4630      	mov	r0, r6
 8008588:	b003      	add	sp, #12
 800858a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858e:	6812      	ldr	r2, [r2, #0]
 8008590:	3b04      	subs	r3, #4
 8008592:	2a00      	cmp	r2, #0
 8008594:	d1cc      	bne.n	8008530 <quorem+0x9c>
 8008596:	3c01      	subs	r4, #1
 8008598:	e7c7      	b.n	800852a <quorem+0x96>
 800859a:	6812      	ldr	r2, [r2, #0]
 800859c:	3b04      	subs	r3, #4
 800859e:	2a00      	cmp	r2, #0
 80085a0:	d1f0      	bne.n	8008584 <quorem+0xf0>
 80085a2:	3c01      	subs	r4, #1
 80085a4:	e7eb      	b.n	800857e <quorem+0xea>
 80085a6:	2000      	movs	r0, #0
 80085a8:	e7ee      	b.n	8008588 <quorem+0xf4>
 80085aa:	0000      	movs	r0, r0
 80085ac:	0000      	movs	r0, r0
	...

080085b0 <_dtoa_r>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	ed2d 8b02 	vpush	{d8}
 80085b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80085ba:	b091      	sub	sp, #68	; 0x44
 80085bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085c0:	ec59 8b10 	vmov	r8, r9, d0
 80085c4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80085c6:	9106      	str	r1, [sp, #24]
 80085c8:	4606      	mov	r6, r0
 80085ca:	9208      	str	r2, [sp, #32]
 80085cc:	930c      	str	r3, [sp, #48]	; 0x30
 80085ce:	b975      	cbnz	r5, 80085ee <_dtoa_r+0x3e>
 80085d0:	2010      	movs	r0, #16
 80085d2:	f000 fd5f 	bl	8009094 <malloc>
 80085d6:	4602      	mov	r2, r0
 80085d8:	6270      	str	r0, [r6, #36]	; 0x24
 80085da:	b920      	cbnz	r0, 80085e6 <_dtoa_r+0x36>
 80085dc:	4baa      	ldr	r3, [pc, #680]	; (8008888 <_dtoa_r+0x2d8>)
 80085de:	21ea      	movs	r1, #234	; 0xea
 80085e0:	48aa      	ldr	r0, [pc, #680]	; (800888c <_dtoa_r+0x2dc>)
 80085e2:	f001 fb53 	bl	8009c8c <__assert_func>
 80085e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085ea:	6005      	str	r5, [r0, #0]
 80085ec:	60c5      	str	r5, [r0, #12]
 80085ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80085f0:	6819      	ldr	r1, [r3, #0]
 80085f2:	b151      	cbz	r1, 800860a <_dtoa_r+0x5a>
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	604a      	str	r2, [r1, #4]
 80085f8:	2301      	movs	r3, #1
 80085fa:	4093      	lsls	r3, r2
 80085fc:	608b      	str	r3, [r1, #8]
 80085fe:	4630      	mov	r0, r6
 8008600:	f000 fd9e 	bl	8009140 <_Bfree>
 8008604:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	f1b9 0300 	subs.w	r3, r9, #0
 800860e:	bfbb      	ittet	lt
 8008610:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008614:	9303      	strlt	r3, [sp, #12]
 8008616:	2300      	movge	r3, #0
 8008618:	2201      	movlt	r2, #1
 800861a:	bfac      	ite	ge
 800861c:	6023      	strge	r3, [r4, #0]
 800861e:	6022      	strlt	r2, [r4, #0]
 8008620:	4b9b      	ldr	r3, [pc, #620]	; (8008890 <_dtoa_r+0x2e0>)
 8008622:	9c03      	ldr	r4, [sp, #12]
 8008624:	43a3      	bics	r3, r4
 8008626:	d11c      	bne.n	8008662 <_dtoa_r+0xb2>
 8008628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800862a:	f242 730f 	movw	r3, #9999	; 0x270f
 800862e:	6013      	str	r3, [r2, #0]
 8008630:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008634:	ea53 0308 	orrs.w	r3, r3, r8
 8008638:	f000 84fd 	beq.w	8009036 <_dtoa_r+0xa86>
 800863c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800863e:	b963      	cbnz	r3, 800865a <_dtoa_r+0xaa>
 8008640:	4b94      	ldr	r3, [pc, #592]	; (8008894 <_dtoa_r+0x2e4>)
 8008642:	e01f      	b.n	8008684 <_dtoa_r+0xd4>
 8008644:	4b94      	ldr	r3, [pc, #592]	; (8008898 <_dtoa_r+0x2e8>)
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	3308      	adds	r3, #8
 800864a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	9801      	ldr	r0, [sp, #4]
 8008650:	b011      	add	sp, #68	; 0x44
 8008652:	ecbd 8b02 	vpop	{d8}
 8008656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865a:	4b8e      	ldr	r3, [pc, #568]	; (8008894 <_dtoa_r+0x2e4>)
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	3303      	adds	r3, #3
 8008660:	e7f3      	b.n	800864a <_dtoa_r+0x9a>
 8008662:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008666:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800866a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800866e:	d10b      	bne.n	8008688 <_dtoa_r+0xd8>
 8008670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008672:	2301      	movs	r3, #1
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 84d9 	beq.w	8009030 <_dtoa_r+0xa80>
 800867e:	4887      	ldr	r0, [pc, #540]	; (800889c <_dtoa_r+0x2ec>)
 8008680:	6018      	str	r0, [r3, #0]
 8008682:	1e43      	subs	r3, r0, #1
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	e7e2      	b.n	800864e <_dtoa_r+0x9e>
 8008688:	a90f      	add	r1, sp, #60	; 0x3c
 800868a:	aa0e      	add	r2, sp, #56	; 0x38
 800868c:	4630      	mov	r0, r6
 800868e:	eeb0 0b48 	vmov.f64	d0, d8
 8008692:	f001 f83d 	bl	8009710 <__d2b>
 8008696:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800869a:	4605      	mov	r5, r0
 800869c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800869e:	2900      	cmp	r1, #0
 80086a0:	d046      	beq.n	8008730 <_dtoa_r+0x180>
 80086a2:	ee18 4a90 	vmov	r4, s17
 80086a6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80086aa:	ec53 2b18 	vmov	r2, r3, d8
 80086ae:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80086b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80086b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80086ba:	2400      	movs	r4, #0
 80086bc:	ec43 2b16 	vmov	d6, r2, r3
 80086c0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80086c4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008870 <_dtoa_r+0x2c0>
 80086c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80086cc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008878 <_dtoa_r+0x2c8>
 80086d0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80086d4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008880 <_dtoa_r+0x2d0>
 80086d8:	ee07 1a90 	vmov	s15, r1
 80086dc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80086e0:	eeb0 7b46 	vmov.f64	d7, d6
 80086e4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80086e8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80086ec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80086f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086f4:	ee16 ba90 	vmov	fp, s13
 80086f8:	940a      	str	r4, [sp, #40]	; 0x28
 80086fa:	d508      	bpl.n	800870e <_dtoa_r+0x15e>
 80086fc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008700:	eeb4 6b47 	vcmp.f64	d6, d7
 8008704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008708:	bf18      	it	ne
 800870a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800870e:	f1bb 0f16 	cmp.w	fp, #22
 8008712:	d82f      	bhi.n	8008774 <_dtoa_r+0x1c4>
 8008714:	4b62      	ldr	r3, [pc, #392]	; (80088a0 <_dtoa_r+0x2f0>)
 8008716:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800871a:	ed93 7b00 	vldr	d7, [r3]
 800871e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008726:	d501      	bpl.n	800872c <_dtoa_r+0x17c>
 8008728:	f10b 3bff 	add.w	fp, fp, #4294967295
 800872c:	2300      	movs	r3, #0
 800872e:	e022      	b.n	8008776 <_dtoa_r+0x1c6>
 8008730:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008732:	4401      	add	r1, r0
 8008734:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008738:	2b20      	cmp	r3, #32
 800873a:	bfc1      	itttt	gt
 800873c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008740:	fa04 f303 	lslgt.w	r3, r4, r3
 8008744:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008748:	fa28 f804 	lsrgt.w	r8, r8, r4
 800874c:	bfd6      	itet	le
 800874e:	f1c3 0320 	rsble	r3, r3, #32
 8008752:	ea43 0808 	orrgt.w	r8, r3, r8
 8008756:	fa08 f803 	lslle.w	r8, r8, r3
 800875a:	ee07 8a90 	vmov	s15, r8
 800875e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008762:	3901      	subs	r1, #1
 8008764:	ee17 4a90 	vmov	r4, s15
 8008768:	ec53 2b17 	vmov	r2, r3, d7
 800876c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008770:	2401      	movs	r4, #1
 8008772:	e7a3      	b.n	80086bc <_dtoa_r+0x10c>
 8008774:	2301      	movs	r3, #1
 8008776:	930b      	str	r3, [sp, #44]	; 0x2c
 8008778:	1a43      	subs	r3, r0, r1
 800877a:	1e5a      	subs	r2, r3, #1
 800877c:	bf45      	ittet	mi
 800877e:	f1c3 0301 	rsbmi	r3, r3, #1
 8008782:	9304      	strmi	r3, [sp, #16]
 8008784:	2300      	movpl	r3, #0
 8008786:	2300      	movmi	r3, #0
 8008788:	9205      	str	r2, [sp, #20]
 800878a:	bf54      	ite	pl
 800878c:	9304      	strpl	r3, [sp, #16]
 800878e:	9305      	strmi	r3, [sp, #20]
 8008790:	f1bb 0f00 	cmp.w	fp, #0
 8008794:	db18      	blt.n	80087c8 <_dtoa_r+0x218>
 8008796:	9b05      	ldr	r3, [sp, #20]
 8008798:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800879c:	445b      	add	r3, fp
 800879e:	9305      	str	r3, [sp, #20]
 80087a0:	2300      	movs	r3, #0
 80087a2:	9a06      	ldr	r2, [sp, #24]
 80087a4:	2a09      	cmp	r2, #9
 80087a6:	d849      	bhi.n	800883c <_dtoa_r+0x28c>
 80087a8:	2a05      	cmp	r2, #5
 80087aa:	bfc4      	itt	gt
 80087ac:	3a04      	subgt	r2, #4
 80087ae:	9206      	strgt	r2, [sp, #24]
 80087b0:	9a06      	ldr	r2, [sp, #24]
 80087b2:	f1a2 0202 	sub.w	r2, r2, #2
 80087b6:	bfcc      	ite	gt
 80087b8:	2400      	movgt	r4, #0
 80087ba:	2401      	movle	r4, #1
 80087bc:	2a03      	cmp	r2, #3
 80087be:	d848      	bhi.n	8008852 <_dtoa_r+0x2a2>
 80087c0:	e8df f002 	tbb	[pc, r2]
 80087c4:	3a2c2e0b 	.word	0x3a2c2e0b
 80087c8:	9b04      	ldr	r3, [sp, #16]
 80087ca:	2200      	movs	r2, #0
 80087cc:	eba3 030b 	sub.w	r3, r3, fp
 80087d0:	9304      	str	r3, [sp, #16]
 80087d2:	9209      	str	r2, [sp, #36]	; 0x24
 80087d4:	f1cb 0300 	rsb	r3, fp, #0
 80087d8:	e7e3      	b.n	80087a2 <_dtoa_r+0x1f2>
 80087da:	2200      	movs	r2, #0
 80087dc:	9207      	str	r2, [sp, #28]
 80087de:	9a08      	ldr	r2, [sp, #32]
 80087e0:	2a00      	cmp	r2, #0
 80087e2:	dc39      	bgt.n	8008858 <_dtoa_r+0x2a8>
 80087e4:	f04f 0a01 	mov.w	sl, #1
 80087e8:	46d1      	mov	r9, sl
 80087ea:	4652      	mov	r2, sl
 80087ec:	f8cd a020 	str.w	sl, [sp, #32]
 80087f0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80087f2:	2100      	movs	r1, #0
 80087f4:	6079      	str	r1, [r7, #4]
 80087f6:	2004      	movs	r0, #4
 80087f8:	f100 0c14 	add.w	ip, r0, #20
 80087fc:	4594      	cmp	ip, r2
 80087fe:	6879      	ldr	r1, [r7, #4]
 8008800:	d92f      	bls.n	8008862 <_dtoa_r+0x2b2>
 8008802:	4630      	mov	r0, r6
 8008804:	930d      	str	r3, [sp, #52]	; 0x34
 8008806:	f000 fc5b 	bl	80090c0 <_Balloc>
 800880a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800880c:	9001      	str	r0, [sp, #4]
 800880e:	4602      	mov	r2, r0
 8008810:	2800      	cmp	r0, #0
 8008812:	d149      	bne.n	80088a8 <_dtoa_r+0x2f8>
 8008814:	4b23      	ldr	r3, [pc, #140]	; (80088a4 <_dtoa_r+0x2f4>)
 8008816:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800881a:	e6e1      	b.n	80085e0 <_dtoa_r+0x30>
 800881c:	2201      	movs	r2, #1
 800881e:	e7dd      	b.n	80087dc <_dtoa_r+0x22c>
 8008820:	2200      	movs	r2, #0
 8008822:	9207      	str	r2, [sp, #28]
 8008824:	9a08      	ldr	r2, [sp, #32]
 8008826:	eb0b 0a02 	add.w	sl, fp, r2
 800882a:	f10a 0901 	add.w	r9, sl, #1
 800882e:	464a      	mov	r2, r9
 8008830:	2a01      	cmp	r2, #1
 8008832:	bfb8      	it	lt
 8008834:	2201      	movlt	r2, #1
 8008836:	e7db      	b.n	80087f0 <_dtoa_r+0x240>
 8008838:	2201      	movs	r2, #1
 800883a:	e7f2      	b.n	8008822 <_dtoa_r+0x272>
 800883c:	2401      	movs	r4, #1
 800883e:	2200      	movs	r2, #0
 8008840:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008844:	f04f 3aff 	mov.w	sl, #4294967295
 8008848:	2100      	movs	r1, #0
 800884a:	46d1      	mov	r9, sl
 800884c:	2212      	movs	r2, #18
 800884e:	9108      	str	r1, [sp, #32]
 8008850:	e7ce      	b.n	80087f0 <_dtoa_r+0x240>
 8008852:	2201      	movs	r2, #1
 8008854:	9207      	str	r2, [sp, #28]
 8008856:	e7f5      	b.n	8008844 <_dtoa_r+0x294>
 8008858:	f8dd a020 	ldr.w	sl, [sp, #32]
 800885c:	46d1      	mov	r9, sl
 800885e:	4652      	mov	r2, sl
 8008860:	e7c6      	b.n	80087f0 <_dtoa_r+0x240>
 8008862:	3101      	adds	r1, #1
 8008864:	6079      	str	r1, [r7, #4]
 8008866:	0040      	lsls	r0, r0, #1
 8008868:	e7c6      	b.n	80087f8 <_dtoa_r+0x248>
 800886a:	bf00      	nop
 800886c:	f3af 8000 	nop.w
 8008870:	636f4361 	.word	0x636f4361
 8008874:	3fd287a7 	.word	0x3fd287a7
 8008878:	8b60c8b3 	.word	0x8b60c8b3
 800887c:	3fc68a28 	.word	0x3fc68a28
 8008880:	509f79fb 	.word	0x509f79fb
 8008884:	3fd34413 	.word	0x3fd34413
 8008888:	0800a951 	.word	0x0800a951
 800888c:	0800a968 	.word	0x0800a968
 8008890:	7ff00000 	.word	0x7ff00000
 8008894:	0800a94d 	.word	0x0800a94d
 8008898:	0800a944 	.word	0x0800a944
 800889c:	0800a921 	.word	0x0800a921
 80088a0:	0800aa58 	.word	0x0800aa58
 80088a4:	0800a9c3 	.word	0x0800a9c3
 80088a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80088aa:	9901      	ldr	r1, [sp, #4]
 80088ac:	6011      	str	r1, [r2, #0]
 80088ae:	f1b9 0f0e 	cmp.w	r9, #14
 80088b2:	d86c      	bhi.n	800898e <_dtoa_r+0x3de>
 80088b4:	2c00      	cmp	r4, #0
 80088b6:	d06a      	beq.n	800898e <_dtoa_r+0x3de>
 80088b8:	f1bb 0f00 	cmp.w	fp, #0
 80088bc:	f340 80a0 	ble.w	8008a00 <_dtoa_r+0x450>
 80088c0:	49c1      	ldr	r1, [pc, #772]	; (8008bc8 <_dtoa_r+0x618>)
 80088c2:	f00b 020f 	and.w	r2, fp, #15
 80088c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80088ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80088ce:	ed92 7b00 	vldr	d7, [r2]
 80088d2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80088d6:	f000 8087 	beq.w	80089e8 <_dtoa_r+0x438>
 80088da:	4abc      	ldr	r2, [pc, #752]	; (8008bcc <_dtoa_r+0x61c>)
 80088dc:	ed92 6b08 	vldr	d6, [r2, #32]
 80088e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80088e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80088e8:	f001 010f 	and.w	r1, r1, #15
 80088ec:	2203      	movs	r2, #3
 80088ee:	48b7      	ldr	r0, [pc, #732]	; (8008bcc <_dtoa_r+0x61c>)
 80088f0:	2900      	cmp	r1, #0
 80088f2:	d17b      	bne.n	80089ec <_dtoa_r+0x43c>
 80088f4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80088f8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80088fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008900:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008902:	2900      	cmp	r1, #0
 8008904:	f000 80a2 	beq.w	8008a4c <_dtoa_r+0x49c>
 8008908:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800890c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008910:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008918:	f140 8098 	bpl.w	8008a4c <_dtoa_r+0x49c>
 800891c:	f1b9 0f00 	cmp.w	r9, #0
 8008920:	f000 8094 	beq.w	8008a4c <_dtoa_r+0x49c>
 8008924:	f1ba 0f00 	cmp.w	sl, #0
 8008928:	dd2f      	ble.n	800898a <_dtoa_r+0x3da>
 800892a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800892e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008932:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008936:	f10b 37ff 	add.w	r7, fp, #4294967295
 800893a:	3201      	adds	r2, #1
 800893c:	4650      	mov	r0, sl
 800893e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008942:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008946:	ee07 2a90 	vmov	s15, r2
 800894a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800894e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008952:	ee15 4a90 	vmov	r4, s11
 8008956:	ec52 1b15 	vmov	r1, r2, d5
 800895a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800895e:	2800      	cmp	r0, #0
 8008960:	d177      	bne.n	8008a52 <_dtoa_r+0x4a2>
 8008962:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008966:	ee36 6b47 	vsub.f64	d6, d6, d7
 800896a:	ec42 1b17 	vmov	d7, r1, r2
 800896e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008976:	f300 8263 	bgt.w	8008e40 <_dtoa_r+0x890>
 800897a:	eeb1 7b47 	vneg.f64	d7, d7
 800897e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008986:	f100 8258 	bmi.w	8008e3a <_dtoa_r+0x88a>
 800898a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800898e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008990:	2a00      	cmp	r2, #0
 8008992:	f2c0 811d 	blt.w	8008bd0 <_dtoa_r+0x620>
 8008996:	f1bb 0f0e 	cmp.w	fp, #14
 800899a:	f300 8119 	bgt.w	8008bd0 <_dtoa_r+0x620>
 800899e:	4b8a      	ldr	r3, [pc, #552]	; (8008bc8 <_dtoa_r+0x618>)
 80089a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80089a4:	ed93 6b00 	vldr	d6, [r3]
 80089a8:	9b08      	ldr	r3, [sp, #32]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f280 80b7 	bge.w	8008b1e <_dtoa_r+0x56e>
 80089b0:	f1b9 0f00 	cmp.w	r9, #0
 80089b4:	f300 80b3 	bgt.w	8008b1e <_dtoa_r+0x56e>
 80089b8:	f040 823f 	bne.w	8008e3a <_dtoa_r+0x88a>
 80089bc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80089c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80089c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80089cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d0:	464c      	mov	r4, r9
 80089d2:	464f      	mov	r7, r9
 80089d4:	f280 8215 	bge.w	8008e02 <_dtoa_r+0x852>
 80089d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80089dc:	2331      	movs	r3, #49	; 0x31
 80089de:	f808 3b01 	strb.w	r3, [r8], #1
 80089e2:	f10b 0b01 	add.w	fp, fp, #1
 80089e6:	e211      	b.n	8008e0c <_dtoa_r+0x85c>
 80089e8:	2202      	movs	r2, #2
 80089ea:	e780      	b.n	80088ee <_dtoa_r+0x33e>
 80089ec:	07cc      	lsls	r4, r1, #31
 80089ee:	d504      	bpl.n	80089fa <_dtoa_r+0x44a>
 80089f0:	ed90 6b00 	vldr	d6, [r0]
 80089f4:	3201      	adds	r2, #1
 80089f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089fa:	1049      	asrs	r1, r1, #1
 80089fc:	3008      	adds	r0, #8
 80089fe:	e777      	b.n	80088f0 <_dtoa_r+0x340>
 8008a00:	d022      	beq.n	8008a48 <_dtoa_r+0x498>
 8008a02:	f1cb 0100 	rsb	r1, fp, #0
 8008a06:	4a70      	ldr	r2, [pc, #448]	; (8008bc8 <_dtoa_r+0x618>)
 8008a08:	f001 000f 	and.w	r0, r1, #15
 8008a0c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008a10:	ed92 7b00 	vldr	d7, [r2]
 8008a14:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008a18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a1c:	486b      	ldr	r0, [pc, #428]	; (8008bcc <_dtoa_r+0x61c>)
 8008a1e:	1109      	asrs	r1, r1, #4
 8008a20:	2400      	movs	r4, #0
 8008a22:	2202      	movs	r2, #2
 8008a24:	b929      	cbnz	r1, 8008a32 <_dtoa_r+0x482>
 8008a26:	2c00      	cmp	r4, #0
 8008a28:	f43f af6a 	beq.w	8008900 <_dtoa_r+0x350>
 8008a2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a30:	e766      	b.n	8008900 <_dtoa_r+0x350>
 8008a32:	07cf      	lsls	r7, r1, #31
 8008a34:	d505      	bpl.n	8008a42 <_dtoa_r+0x492>
 8008a36:	ed90 6b00 	vldr	d6, [r0]
 8008a3a:	3201      	adds	r2, #1
 8008a3c:	2401      	movs	r4, #1
 8008a3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a42:	1049      	asrs	r1, r1, #1
 8008a44:	3008      	adds	r0, #8
 8008a46:	e7ed      	b.n	8008a24 <_dtoa_r+0x474>
 8008a48:	2202      	movs	r2, #2
 8008a4a:	e759      	b.n	8008900 <_dtoa_r+0x350>
 8008a4c:	465f      	mov	r7, fp
 8008a4e:	4648      	mov	r0, r9
 8008a50:	e775      	b.n	800893e <_dtoa_r+0x38e>
 8008a52:	ec42 1b17 	vmov	d7, r1, r2
 8008a56:	4a5c      	ldr	r2, [pc, #368]	; (8008bc8 <_dtoa_r+0x618>)
 8008a58:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008a5c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008a60:	9a01      	ldr	r2, [sp, #4]
 8008a62:	1814      	adds	r4, r2, r0
 8008a64:	9a07      	ldr	r2, [sp, #28]
 8008a66:	b352      	cbz	r2, 8008abe <_dtoa_r+0x50e>
 8008a68:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008a6c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008a70:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008a74:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008a78:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008a7c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008a80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008a84:	ee14 2a90 	vmov	r2, s9
 8008a88:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008a8c:	3230      	adds	r2, #48	; 0x30
 8008a8e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008a92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a9a:	f808 2b01 	strb.w	r2, [r8], #1
 8008a9e:	d439      	bmi.n	8008b14 <_dtoa_r+0x564>
 8008aa0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008aa4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aac:	d472      	bmi.n	8008b94 <_dtoa_r+0x5e4>
 8008aae:	45a0      	cmp	r8, r4
 8008ab0:	f43f af6b 	beq.w	800898a <_dtoa_r+0x3da>
 8008ab4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008ab8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008abc:	e7e0      	b.n	8008a80 <_dtoa_r+0x4d0>
 8008abe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008ac2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008acc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008ad0:	ee14 2a90 	vmov	r2, s9
 8008ad4:	3230      	adds	r2, #48	; 0x30
 8008ad6:	f808 2b01 	strb.w	r2, [r8], #1
 8008ada:	45a0      	cmp	r8, r4
 8008adc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008ae0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008ae4:	d118      	bne.n	8008b18 <_dtoa_r+0x568>
 8008ae6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008aea:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008aee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008af6:	dc4d      	bgt.n	8008b94 <_dtoa_r+0x5e4>
 8008af8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008afc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b04:	f57f af41 	bpl.w	800898a <_dtoa_r+0x3da>
 8008b08:	4688      	mov	r8, r1
 8008b0a:	3901      	subs	r1, #1
 8008b0c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008b10:	2b30      	cmp	r3, #48	; 0x30
 8008b12:	d0f9      	beq.n	8008b08 <_dtoa_r+0x558>
 8008b14:	46bb      	mov	fp, r7
 8008b16:	e02a      	b.n	8008b6e <_dtoa_r+0x5be>
 8008b18:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008b1c:	e7d6      	b.n	8008acc <_dtoa_r+0x51c>
 8008b1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b22:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008b26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008b2a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008b2e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008b32:	ee15 3a10 	vmov	r3, s10
 8008b36:	3330      	adds	r3, #48	; 0x30
 8008b38:	f808 3b01 	strb.w	r3, [r8], #1
 8008b3c:	9b01      	ldr	r3, [sp, #4]
 8008b3e:	eba8 0303 	sub.w	r3, r8, r3
 8008b42:	4599      	cmp	r9, r3
 8008b44:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008b48:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008b4c:	d133      	bne.n	8008bb6 <_dtoa_r+0x606>
 8008b4e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008b52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5a:	dc1a      	bgt.n	8008b92 <_dtoa_r+0x5e2>
 8008b5c:	eeb4 7b46 	vcmp.f64	d7, d6
 8008b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b64:	d103      	bne.n	8008b6e <_dtoa_r+0x5be>
 8008b66:	ee15 3a10 	vmov	r3, s10
 8008b6a:	07d9      	lsls	r1, r3, #31
 8008b6c:	d411      	bmi.n	8008b92 <_dtoa_r+0x5e2>
 8008b6e:	4629      	mov	r1, r5
 8008b70:	4630      	mov	r0, r6
 8008b72:	f000 fae5 	bl	8009140 <_Bfree>
 8008b76:	2300      	movs	r3, #0
 8008b78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b7a:	f888 3000 	strb.w	r3, [r8]
 8008b7e:	f10b 0301 	add.w	r3, fp, #1
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f43f ad61 	beq.w	800864e <_dtoa_r+0x9e>
 8008b8c:	f8c3 8000 	str.w	r8, [r3]
 8008b90:	e55d      	b.n	800864e <_dtoa_r+0x9e>
 8008b92:	465f      	mov	r7, fp
 8008b94:	4643      	mov	r3, r8
 8008b96:	4698      	mov	r8, r3
 8008b98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b9c:	2a39      	cmp	r2, #57	; 0x39
 8008b9e:	d106      	bne.n	8008bae <_dtoa_r+0x5fe>
 8008ba0:	9a01      	ldr	r2, [sp, #4]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d1f7      	bne.n	8008b96 <_dtoa_r+0x5e6>
 8008ba6:	9901      	ldr	r1, [sp, #4]
 8008ba8:	2230      	movs	r2, #48	; 0x30
 8008baa:	3701      	adds	r7, #1
 8008bac:	700a      	strb	r2, [r1, #0]
 8008bae:	781a      	ldrb	r2, [r3, #0]
 8008bb0:	3201      	adds	r2, #1
 8008bb2:	701a      	strb	r2, [r3, #0]
 8008bb4:	e7ae      	b.n	8008b14 <_dtoa_r+0x564>
 8008bb6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008bba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc2:	d1b2      	bne.n	8008b2a <_dtoa_r+0x57a>
 8008bc4:	e7d3      	b.n	8008b6e <_dtoa_r+0x5be>
 8008bc6:	bf00      	nop
 8008bc8:	0800aa58 	.word	0x0800aa58
 8008bcc:	0800aa30 	.word	0x0800aa30
 8008bd0:	9907      	ldr	r1, [sp, #28]
 8008bd2:	2900      	cmp	r1, #0
 8008bd4:	f000 80d0 	beq.w	8008d78 <_dtoa_r+0x7c8>
 8008bd8:	9906      	ldr	r1, [sp, #24]
 8008bda:	2901      	cmp	r1, #1
 8008bdc:	f300 80b4 	bgt.w	8008d48 <_dtoa_r+0x798>
 8008be0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008be2:	2900      	cmp	r1, #0
 8008be4:	f000 80ac 	beq.w	8008d40 <_dtoa_r+0x790>
 8008be8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008bec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008bf0:	461c      	mov	r4, r3
 8008bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8008bf4:	9b04      	ldr	r3, [sp, #16]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	9304      	str	r3, [sp, #16]
 8008bfa:	9b05      	ldr	r3, [sp, #20]
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	4413      	add	r3, r2
 8008c00:	4630      	mov	r0, r6
 8008c02:	9305      	str	r3, [sp, #20]
 8008c04:	f000 fb54 	bl	80092b0 <__i2b>
 8008c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c0a:	4607      	mov	r7, r0
 8008c0c:	f1b8 0f00 	cmp.w	r8, #0
 8008c10:	dd0d      	ble.n	8008c2e <_dtoa_r+0x67e>
 8008c12:	9a05      	ldr	r2, [sp, #20]
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	dd0a      	ble.n	8008c2e <_dtoa_r+0x67e>
 8008c18:	4542      	cmp	r2, r8
 8008c1a:	9904      	ldr	r1, [sp, #16]
 8008c1c:	bfa8      	it	ge
 8008c1e:	4642      	movge	r2, r8
 8008c20:	1a89      	subs	r1, r1, r2
 8008c22:	9104      	str	r1, [sp, #16]
 8008c24:	9905      	ldr	r1, [sp, #20]
 8008c26:	eba8 0802 	sub.w	r8, r8, r2
 8008c2a:	1a8a      	subs	r2, r1, r2
 8008c2c:	9205      	str	r2, [sp, #20]
 8008c2e:	b303      	cbz	r3, 8008c72 <_dtoa_r+0x6c2>
 8008c30:	9a07      	ldr	r2, [sp, #28]
 8008c32:	2a00      	cmp	r2, #0
 8008c34:	f000 80a5 	beq.w	8008d82 <_dtoa_r+0x7d2>
 8008c38:	2c00      	cmp	r4, #0
 8008c3a:	dd13      	ble.n	8008c64 <_dtoa_r+0x6b4>
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	4622      	mov	r2, r4
 8008c40:	4630      	mov	r0, r6
 8008c42:	930d      	str	r3, [sp, #52]	; 0x34
 8008c44:	f000 fbf4 	bl	8009430 <__pow5mult>
 8008c48:	462a      	mov	r2, r5
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	4607      	mov	r7, r0
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f000 fb44 	bl	80092dc <__multiply>
 8008c54:	4629      	mov	r1, r5
 8008c56:	900a      	str	r0, [sp, #40]	; 0x28
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f000 fa71 	bl	8009140 <_Bfree>
 8008c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c62:	4615      	mov	r5, r2
 8008c64:	1b1a      	subs	r2, r3, r4
 8008c66:	d004      	beq.n	8008c72 <_dtoa_r+0x6c2>
 8008c68:	4629      	mov	r1, r5
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f000 fbe0 	bl	8009430 <__pow5mult>
 8008c70:	4605      	mov	r5, r0
 8008c72:	2101      	movs	r1, #1
 8008c74:	4630      	mov	r0, r6
 8008c76:	f000 fb1b 	bl	80092b0 <__i2b>
 8008c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	f340 8081 	ble.w	8008d86 <_dtoa_r+0x7d6>
 8008c84:	461a      	mov	r2, r3
 8008c86:	4601      	mov	r1, r0
 8008c88:	4630      	mov	r0, r6
 8008c8a:	f000 fbd1 	bl	8009430 <__pow5mult>
 8008c8e:	9b06      	ldr	r3, [sp, #24]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	4604      	mov	r4, r0
 8008c94:	dd7a      	ble.n	8008d8c <_dtoa_r+0x7dc>
 8008c96:	2300      	movs	r3, #0
 8008c98:	930a      	str	r3, [sp, #40]	; 0x28
 8008c9a:	6922      	ldr	r2, [r4, #16]
 8008c9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008ca0:	6910      	ldr	r0, [r2, #16]
 8008ca2:	f000 fab5 	bl	8009210 <__hi0bits>
 8008ca6:	f1c0 0020 	rsb	r0, r0, #32
 8008caa:	9b05      	ldr	r3, [sp, #20]
 8008cac:	4418      	add	r0, r3
 8008cae:	f010 001f 	ands.w	r0, r0, #31
 8008cb2:	f000 808c 	beq.w	8008dce <_dtoa_r+0x81e>
 8008cb6:	f1c0 0220 	rsb	r2, r0, #32
 8008cba:	2a04      	cmp	r2, #4
 8008cbc:	f340 8085 	ble.w	8008dca <_dtoa_r+0x81a>
 8008cc0:	f1c0 001c 	rsb	r0, r0, #28
 8008cc4:	9b04      	ldr	r3, [sp, #16]
 8008cc6:	4403      	add	r3, r0
 8008cc8:	9304      	str	r3, [sp, #16]
 8008cca:	9b05      	ldr	r3, [sp, #20]
 8008ccc:	4403      	add	r3, r0
 8008cce:	4480      	add	r8, r0
 8008cd0:	9305      	str	r3, [sp, #20]
 8008cd2:	9b04      	ldr	r3, [sp, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dd05      	ble.n	8008ce4 <_dtoa_r+0x734>
 8008cd8:	4629      	mov	r1, r5
 8008cda:	461a      	mov	r2, r3
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f000 fc01 	bl	80094e4 <__lshift>
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	9b05      	ldr	r3, [sp, #20]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	dd05      	ble.n	8008cf6 <_dtoa_r+0x746>
 8008cea:	4621      	mov	r1, r4
 8008cec:	461a      	mov	r2, r3
 8008cee:	4630      	mov	r0, r6
 8008cf0:	f000 fbf8 	bl	80094e4 <__lshift>
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d06a      	beq.n	8008dd2 <_dtoa_r+0x822>
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f000 fc60 	bl	80095c4 <__mcmp>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	da64      	bge.n	8008dd2 <_dtoa_r+0x822>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	220a      	movs	r2, #10
 8008d0e:	4630      	mov	r0, r6
 8008d10:	f000 fa38 	bl	8009184 <__multadd>
 8008d14:	9b07      	ldr	r3, [sp, #28]
 8008d16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 8191 	beq.w	8009044 <_dtoa_r+0xa94>
 8008d22:	4639      	mov	r1, r7
 8008d24:	2300      	movs	r3, #0
 8008d26:	220a      	movs	r2, #10
 8008d28:	4630      	mov	r0, r6
 8008d2a:	f000 fa2b 	bl	8009184 <__multadd>
 8008d2e:	f1ba 0f00 	cmp.w	sl, #0
 8008d32:	4607      	mov	r7, r0
 8008d34:	f300 808d 	bgt.w	8008e52 <_dtoa_r+0x8a2>
 8008d38:	9b06      	ldr	r3, [sp, #24]
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	dc50      	bgt.n	8008de0 <_dtoa_r+0x830>
 8008d3e:	e088      	b.n	8008e52 <_dtoa_r+0x8a2>
 8008d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d42:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008d46:	e751      	b.n	8008bec <_dtoa_r+0x63c>
 8008d48:	f109 34ff 	add.w	r4, r9, #4294967295
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	bfbf      	itttt	lt
 8008d50:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8008d52:	1ae3      	sublt	r3, r4, r3
 8008d54:	18d2      	addlt	r2, r2, r3
 8008d56:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008d58:	bfb6      	itet	lt
 8008d5a:	4623      	movlt	r3, r4
 8008d5c:	1b1c      	subge	r4, r3, r4
 8008d5e:	2400      	movlt	r4, #0
 8008d60:	f1b9 0f00 	cmp.w	r9, #0
 8008d64:	bfb5      	itete	lt
 8008d66:	9a04      	ldrlt	r2, [sp, #16]
 8008d68:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008d6c:	eba2 0809 	sublt.w	r8, r2, r9
 8008d70:	464a      	movge	r2, r9
 8008d72:	bfb8      	it	lt
 8008d74:	2200      	movlt	r2, #0
 8008d76:	e73c      	b.n	8008bf2 <_dtoa_r+0x642>
 8008d78:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008d7c:	9f07      	ldr	r7, [sp, #28]
 8008d7e:	461c      	mov	r4, r3
 8008d80:	e744      	b.n	8008c0c <_dtoa_r+0x65c>
 8008d82:	461a      	mov	r2, r3
 8008d84:	e770      	b.n	8008c68 <_dtoa_r+0x6b8>
 8008d86:	9b06      	ldr	r3, [sp, #24]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	dc18      	bgt.n	8008dbe <_dtoa_r+0x80e>
 8008d8c:	9b02      	ldr	r3, [sp, #8]
 8008d8e:	b9b3      	cbnz	r3, 8008dbe <_dtoa_r+0x80e>
 8008d90:	9b03      	ldr	r3, [sp, #12]
 8008d92:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008d96:	b9a2      	cbnz	r2, 8008dc2 <_dtoa_r+0x812>
 8008d98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008d9c:	0d12      	lsrs	r2, r2, #20
 8008d9e:	0512      	lsls	r2, r2, #20
 8008da0:	b18a      	cbz	r2, 8008dc6 <_dtoa_r+0x816>
 8008da2:	9b04      	ldr	r3, [sp, #16]
 8008da4:	3301      	adds	r3, #1
 8008da6:	9304      	str	r3, [sp, #16]
 8008da8:	9b05      	ldr	r3, [sp, #20]
 8008daa:	3301      	adds	r3, #1
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	2301      	movs	r3, #1
 8008db0:	930a      	str	r3, [sp, #40]	; 0x28
 8008db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f47f af70 	bne.w	8008c9a <_dtoa_r+0x6ea>
 8008dba:	2001      	movs	r0, #1
 8008dbc:	e775      	b.n	8008caa <_dtoa_r+0x6fa>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e7f6      	b.n	8008db0 <_dtoa_r+0x800>
 8008dc2:	9b02      	ldr	r3, [sp, #8]
 8008dc4:	e7f4      	b.n	8008db0 <_dtoa_r+0x800>
 8008dc6:	920a      	str	r2, [sp, #40]	; 0x28
 8008dc8:	e7f3      	b.n	8008db2 <_dtoa_r+0x802>
 8008dca:	d082      	beq.n	8008cd2 <_dtoa_r+0x722>
 8008dcc:	4610      	mov	r0, r2
 8008dce:	301c      	adds	r0, #28
 8008dd0:	e778      	b.n	8008cc4 <_dtoa_r+0x714>
 8008dd2:	f1b9 0f00 	cmp.w	r9, #0
 8008dd6:	dc37      	bgt.n	8008e48 <_dtoa_r+0x898>
 8008dd8:	9b06      	ldr	r3, [sp, #24]
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	dd34      	ble.n	8008e48 <_dtoa_r+0x898>
 8008dde:	46ca      	mov	sl, r9
 8008de0:	f1ba 0f00 	cmp.w	sl, #0
 8008de4:	d10d      	bne.n	8008e02 <_dtoa_r+0x852>
 8008de6:	4621      	mov	r1, r4
 8008de8:	4653      	mov	r3, sl
 8008dea:	2205      	movs	r2, #5
 8008dec:	4630      	mov	r0, r6
 8008dee:	f000 f9c9 	bl	8009184 <__multadd>
 8008df2:	4601      	mov	r1, r0
 8008df4:	4604      	mov	r4, r0
 8008df6:	4628      	mov	r0, r5
 8008df8:	f000 fbe4 	bl	80095c4 <__mcmp>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	f73f adeb 	bgt.w	80089d8 <_dtoa_r+0x428>
 8008e02:	9b08      	ldr	r3, [sp, #32]
 8008e04:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008e08:	ea6f 0b03 	mvn.w	fp, r3
 8008e0c:	f04f 0900 	mov.w	r9, #0
 8008e10:	4621      	mov	r1, r4
 8008e12:	4630      	mov	r0, r6
 8008e14:	f000 f994 	bl	8009140 <_Bfree>
 8008e18:	2f00      	cmp	r7, #0
 8008e1a:	f43f aea8 	beq.w	8008b6e <_dtoa_r+0x5be>
 8008e1e:	f1b9 0f00 	cmp.w	r9, #0
 8008e22:	d005      	beq.n	8008e30 <_dtoa_r+0x880>
 8008e24:	45b9      	cmp	r9, r7
 8008e26:	d003      	beq.n	8008e30 <_dtoa_r+0x880>
 8008e28:	4649      	mov	r1, r9
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f000 f988 	bl	8009140 <_Bfree>
 8008e30:	4639      	mov	r1, r7
 8008e32:	4630      	mov	r0, r6
 8008e34:	f000 f984 	bl	8009140 <_Bfree>
 8008e38:	e699      	b.n	8008b6e <_dtoa_r+0x5be>
 8008e3a:	2400      	movs	r4, #0
 8008e3c:	4627      	mov	r7, r4
 8008e3e:	e7e0      	b.n	8008e02 <_dtoa_r+0x852>
 8008e40:	46bb      	mov	fp, r7
 8008e42:	4604      	mov	r4, r0
 8008e44:	4607      	mov	r7, r0
 8008e46:	e5c7      	b.n	80089d8 <_dtoa_r+0x428>
 8008e48:	9b07      	ldr	r3, [sp, #28]
 8008e4a:	46ca      	mov	sl, r9
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 8100 	beq.w	8009052 <_dtoa_r+0xaa2>
 8008e52:	f1b8 0f00 	cmp.w	r8, #0
 8008e56:	dd05      	ble.n	8008e64 <_dtoa_r+0x8b4>
 8008e58:	4639      	mov	r1, r7
 8008e5a:	4642      	mov	r2, r8
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	f000 fb41 	bl	80094e4 <__lshift>
 8008e62:	4607      	mov	r7, r0
 8008e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d05d      	beq.n	8008f26 <_dtoa_r+0x976>
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f000 f927 	bl	80090c0 <_Balloc>
 8008e72:	4680      	mov	r8, r0
 8008e74:	b928      	cbnz	r0, 8008e82 <_dtoa_r+0x8d2>
 8008e76:	4b82      	ldr	r3, [pc, #520]	; (8009080 <_dtoa_r+0xad0>)
 8008e78:	4602      	mov	r2, r0
 8008e7a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008e7e:	f7ff bbaf 	b.w	80085e0 <_dtoa_r+0x30>
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	3202      	adds	r2, #2
 8008e86:	0092      	lsls	r2, r2, #2
 8008e88:	f107 010c 	add.w	r1, r7, #12
 8008e8c:	300c      	adds	r0, #12
 8008e8e:	f000 f909 	bl	80090a4 <memcpy>
 8008e92:	2201      	movs	r2, #1
 8008e94:	4641      	mov	r1, r8
 8008e96:	4630      	mov	r0, r6
 8008e98:	f000 fb24 	bl	80094e4 <__lshift>
 8008e9c:	9b01      	ldr	r3, [sp, #4]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	9304      	str	r3, [sp, #16]
 8008ea2:	9b01      	ldr	r3, [sp, #4]
 8008ea4:	4453      	add	r3, sl
 8008ea6:	9308      	str	r3, [sp, #32]
 8008ea8:	9b02      	ldr	r3, [sp, #8]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	46b9      	mov	r9, r7
 8008eb0:	9307      	str	r3, [sp, #28]
 8008eb2:	4607      	mov	r7, r0
 8008eb4:	9b04      	ldr	r3, [sp, #16]
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	4628      	mov	r0, r5
 8008ebc:	9302      	str	r3, [sp, #8]
 8008ebe:	f7ff fae9 	bl	8008494 <quorem>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	3330      	adds	r3, #48	; 0x30
 8008ec6:	9005      	str	r0, [sp, #20]
 8008ec8:	4649      	mov	r1, r9
 8008eca:	4628      	mov	r0, r5
 8008ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ece:	f000 fb79 	bl	80095c4 <__mcmp>
 8008ed2:	463a      	mov	r2, r7
 8008ed4:	4682      	mov	sl, r0
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f000 fb8f 	bl	80095fc <__mdiff>
 8008ede:	68c2      	ldr	r2, [r0, #12]
 8008ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee2:	4680      	mov	r8, r0
 8008ee4:	bb0a      	cbnz	r2, 8008f2a <_dtoa_r+0x97a>
 8008ee6:	4601      	mov	r1, r0
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f000 fb6b 	bl	80095c4 <__mcmp>
 8008eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	4641      	mov	r1, r8
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008efa:	f000 f921 	bl	8009140 <_Bfree>
 8008efe:	9b06      	ldr	r3, [sp, #24]
 8008f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f02:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008f06:	ea43 0102 	orr.w	r1, r3, r2
 8008f0a:	9b07      	ldr	r3, [sp, #28]
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f10:	d10d      	bne.n	8008f2e <_dtoa_r+0x97e>
 8008f12:	2b39      	cmp	r3, #57	; 0x39
 8008f14:	d029      	beq.n	8008f6a <_dtoa_r+0x9ba>
 8008f16:	f1ba 0f00 	cmp.w	sl, #0
 8008f1a:	dd01      	ble.n	8008f20 <_dtoa_r+0x970>
 8008f1c:	9b05      	ldr	r3, [sp, #20]
 8008f1e:	3331      	adds	r3, #49	; 0x31
 8008f20:	9a02      	ldr	r2, [sp, #8]
 8008f22:	7013      	strb	r3, [r2, #0]
 8008f24:	e774      	b.n	8008e10 <_dtoa_r+0x860>
 8008f26:	4638      	mov	r0, r7
 8008f28:	e7b8      	b.n	8008e9c <_dtoa_r+0x8ec>
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	e7e1      	b.n	8008ef2 <_dtoa_r+0x942>
 8008f2e:	f1ba 0f00 	cmp.w	sl, #0
 8008f32:	db06      	blt.n	8008f42 <_dtoa_r+0x992>
 8008f34:	9906      	ldr	r1, [sp, #24]
 8008f36:	ea41 0a0a 	orr.w	sl, r1, sl
 8008f3a:	9907      	ldr	r1, [sp, #28]
 8008f3c:	ea5a 0101 	orrs.w	r1, sl, r1
 8008f40:	d120      	bne.n	8008f84 <_dtoa_r+0x9d4>
 8008f42:	2a00      	cmp	r2, #0
 8008f44:	ddec      	ble.n	8008f20 <_dtoa_r+0x970>
 8008f46:	4629      	mov	r1, r5
 8008f48:	2201      	movs	r2, #1
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	9304      	str	r3, [sp, #16]
 8008f4e:	f000 fac9 	bl	80094e4 <__lshift>
 8008f52:	4621      	mov	r1, r4
 8008f54:	4605      	mov	r5, r0
 8008f56:	f000 fb35 	bl	80095c4 <__mcmp>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	9b04      	ldr	r3, [sp, #16]
 8008f5e:	dc02      	bgt.n	8008f66 <_dtoa_r+0x9b6>
 8008f60:	d1de      	bne.n	8008f20 <_dtoa_r+0x970>
 8008f62:	07da      	lsls	r2, r3, #31
 8008f64:	d5dc      	bpl.n	8008f20 <_dtoa_r+0x970>
 8008f66:	2b39      	cmp	r3, #57	; 0x39
 8008f68:	d1d8      	bne.n	8008f1c <_dtoa_r+0x96c>
 8008f6a:	9a02      	ldr	r2, [sp, #8]
 8008f6c:	2339      	movs	r3, #57	; 0x39
 8008f6e:	7013      	strb	r3, [r2, #0]
 8008f70:	4643      	mov	r3, r8
 8008f72:	4698      	mov	r8, r3
 8008f74:	3b01      	subs	r3, #1
 8008f76:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008f7a:	2a39      	cmp	r2, #57	; 0x39
 8008f7c:	d051      	beq.n	8009022 <_dtoa_r+0xa72>
 8008f7e:	3201      	adds	r2, #1
 8008f80:	701a      	strb	r2, [r3, #0]
 8008f82:	e745      	b.n	8008e10 <_dtoa_r+0x860>
 8008f84:	2a00      	cmp	r2, #0
 8008f86:	dd03      	ble.n	8008f90 <_dtoa_r+0x9e0>
 8008f88:	2b39      	cmp	r3, #57	; 0x39
 8008f8a:	d0ee      	beq.n	8008f6a <_dtoa_r+0x9ba>
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	e7c7      	b.n	8008f20 <_dtoa_r+0x970>
 8008f90:	9a04      	ldr	r2, [sp, #16]
 8008f92:	9908      	ldr	r1, [sp, #32]
 8008f94:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008f98:	428a      	cmp	r2, r1
 8008f9a:	d02b      	beq.n	8008ff4 <_dtoa_r+0xa44>
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	220a      	movs	r2, #10
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f000 f8ee 	bl	8009184 <__multadd>
 8008fa8:	45b9      	cmp	r9, r7
 8008faa:	4605      	mov	r5, r0
 8008fac:	f04f 0300 	mov.w	r3, #0
 8008fb0:	f04f 020a 	mov.w	r2, #10
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	d107      	bne.n	8008fca <_dtoa_r+0xa1a>
 8008fba:	f000 f8e3 	bl	8009184 <__multadd>
 8008fbe:	4681      	mov	r9, r0
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	9b04      	ldr	r3, [sp, #16]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	9304      	str	r3, [sp, #16]
 8008fc8:	e774      	b.n	8008eb4 <_dtoa_r+0x904>
 8008fca:	f000 f8db 	bl	8009184 <__multadd>
 8008fce:	4639      	mov	r1, r7
 8008fd0:	4681      	mov	r9, r0
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	220a      	movs	r2, #10
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f000 f8d4 	bl	8009184 <__multadd>
 8008fdc:	4607      	mov	r7, r0
 8008fde:	e7f0      	b.n	8008fc2 <_dtoa_r+0xa12>
 8008fe0:	f1ba 0f00 	cmp.w	sl, #0
 8008fe4:	9a01      	ldr	r2, [sp, #4]
 8008fe6:	bfcc      	ite	gt
 8008fe8:	46d0      	movgt	r8, sl
 8008fea:	f04f 0801 	movle.w	r8, #1
 8008fee:	4490      	add	r8, r2
 8008ff0:	f04f 0900 	mov.w	r9, #0
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	9302      	str	r3, [sp, #8]
 8008ffc:	f000 fa72 	bl	80094e4 <__lshift>
 8009000:	4621      	mov	r1, r4
 8009002:	4605      	mov	r5, r0
 8009004:	f000 fade 	bl	80095c4 <__mcmp>
 8009008:	2800      	cmp	r0, #0
 800900a:	dcb1      	bgt.n	8008f70 <_dtoa_r+0x9c0>
 800900c:	d102      	bne.n	8009014 <_dtoa_r+0xa64>
 800900e:	9b02      	ldr	r3, [sp, #8]
 8009010:	07db      	lsls	r3, r3, #31
 8009012:	d4ad      	bmi.n	8008f70 <_dtoa_r+0x9c0>
 8009014:	4643      	mov	r3, r8
 8009016:	4698      	mov	r8, r3
 8009018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800901c:	2a30      	cmp	r2, #48	; 0x30
 800901e:	d0fa      	beq.n	8009016 <_dtoa_r+0xa66>
 8009020:	e6f6      	b.n	8008e10 <_dtoa_r+0x860>
 8009022:	9a01      	ldr	r2, [sp, #4]
 8009024:	429a      	cmp	r2, r3
 8009026:	d1a4      	bne.n	8008f72 <_dtoa_r+0x9c2>
 8009028:	f10b 0b01 	add.w	fp, fp, #1
 800902c:	2331      	movs	r3, #49	; 0x31
 800902e:	e778      	b.n	8008f22 <_dtoa_r+0x972>
 8009030:	4b14      	ldr	r3, [pc, #80]	; (8009084 <_dtoa_r+0xad4>)
 8009032:	f7ff bb27 	b.w	8008684 <_dtoa_r+0xd4>
 8009036:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009038:	2b00      	cmp	r3, #0
 800903a:	f47f ab03 	bne.w	8008644 <_dtoa_r+0x94>
 800903e:	4b12      	ldr	r3, [pc, #72]	; (8009088 <_dtoa_r+0xad8>)
 8009040:	f7ff bb20 	b.w	8008684 <_dtoa_r+0xd4>
 8009044:	f1ba 0f00 	cmp.w	sl, #0
 8009048:	dc03      	bgt.n	8009052 <_dtoa_r+0xaa2>
 800904a:	9b06      	ldr	r3, [sp, #24]
 800904c:	2b02      	cmp	r3, #2
 800904e:	f73f aec7 	bgt.w	8008de0 <_dtoa_r+0x830>
 8009052:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009056:	4621      	mov	r1, r4
 8009058:	4628      	mov	r0, r5
 800905a:	f7ff fa1b 	bl	8008494 <quorem>
 800905e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009062:	f808 3b01 	strb.w	r3, [r8], #1
 8009066:	9a01      	ldr	r2, [sp, #4]
 8009068:	eba8 0202 	sub.w	r2, r8, r2
 800906c:	4592      	cmp	sl, r2
 800906e:	ddb7      	ble.n	8008fe0 <_dtoa_r+0xa30>
 8009070:	4629      	mov	r1, r5
 8009072:	2300      	movs	r3, #0
 8009074:	220a      	movs	r2, #10
 8009076:	4630      	mov	r0, r6
 8009078:	f000 f884 	bl	8009184 <__multadd>
 800907c:	4605      	mov	r5, r0
 800907e:	e7ea      	b.n	8009056 <_dtoa_r+0xaa6>
 8009080:	0800a9c3 	.word	0x0800a9c3
 8009084:	0800a920 	.word	0x0800a920
 8009088:	0800a944 	.word	0x0800a944

0800908c <_localeconv_r>:
 800908c:	4800      	ldr	r0, [pc, #0]	; (8009090 <_localeconv_r+0x4>)
 800908e:	4770      	bx	lr
 8009090:	24000164 	.word	0x24000164

08009094 <malloc>:
 8009094:	4b02      	ldr	r3, [pc, #8]	; (80090a0 <malloc+0xc>)
 8009096:	4601      	mov	r1, r0
 8009098:	6818      	ldr	r0, [r3, #0]
 800909a:	f000 bc17 	b.w	80098cc <_malloc_r>
 800909e:	bf00      	nop
 80090a0:	24000010 	.word	0x24000010

080090a4 <memcpy>:
 80090a4:	440a      	add	r2, r1
 80090a6:	4291      	cmp	r1, r2
 80090a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80090ac:	d100      	bne.n	80090b0 <memcpy+0xc>
 80090ae:	4770      	bx	lr
 80090b0:	b510      	push	{r4, lr}
 80090b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090ba:	4291      	cmp	r1, r2
 80090bc:	d1f9      	bne.n	80090b2 <memcpy+0xe>
 80090be:	bd10      	pop	{r4, pc}

080090c0 <_Balloc>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090c4:	4604      	mov	r4, r0
 80090c6:	460d      	mov	r5, r1
 80090c8:	b976      	cbnz	r6, 80090e8 <_Balloc+0x28>
 80090ca:	2010      	movs	r0, #16
 80090cc:	f7ff ffe2 	bl	8009094 <malloc>
 80090d0:	4602      	mov	r2, r0
 80090d2:	6260      	str	r0, [r4, #36]	; 0x24
 80090d4:	b920      	cbnz	r0, 80090e0 <_Balloc+0x20>
 80090d6:	4b18      	ldr	r3, [pc, #96]	; (8009138 <_Balloc+0x78>)
 80090d8:	4818      	ldr	r0, [pc, #96]	; (800913c <_Balloc+0x7c>)
 80090da:	2166      	movs	r1, #102	; 0x66
 80090dc:	f000 fdd6 	bl	8009c8c <__assert_func>
 80090e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090e4:	6006      	str	r6, [r0, #0]
 80090e6:	60c6      	str	r6, [r0, #12]
 80090e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090ea:	68f3      	ldr	r3, [r6, #12]
 80090ec:	b183      	cbz	r3, 8009110 <_Balloc+0x50>
 80090ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090f6:	b9b8      	cbnz	r0, 8009128 <_Balloc+0x68>
 80090f8:	2101      	movs	r1, #1
 80090fa:	fa01 f605 	lsl.w	r6, r1, r5
 80090fe:	1d72      	adds	r2, r6, #5
 8009100:	0092      	lsls	r2, r2, #2
 8009102:	4620      	mov	r0, r4
 8009104:	f000 fb60 	bl	80097c8 <_calloc_r>
 8009108:	b160      	cbz	r0, 8009124 <_Balloc+0x64>
 800910a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800910e:	e00e      	b.n	800912e <_Balloc+0x6e>
 8009110:	2221      	movs	r2, #33	; 0x21
 8009112:	2104      	movs	r1, #4
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fb57 	bl	80097c8 <_calloc_r>
 800911a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800911c:	60f0      	str	r0, [r6, #12]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1e4      	bne.n	80090ee <_Balloc+0x2e>
 8009124:	2000      	movs	r0, #0
 8009126:	bd70      	pop	{r4, r5, r6, pc}
 8009128:	6802      	ldr	r2, [r0, #0]
 800912a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800912e:	2300      	movs	r3, #0
 8009130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009134:	e7f7      	b.n	8009126 <_Balloc+0x66>
 8009136:	bf00      	nop
 8009138:	0800a951 	.word	0x0800a951
 800913c:	0800a9d4 	.word	0x0800a9d4

08009140 <_Bfree>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009144:	4605      	mov	r5, r0
 8009146:	460c      	mov	r4, r1
 8009148:	b976      	cbnz	r6, 8009168 <_Bfree+0x28>
 800914a:	2010      	movs	r0, #16
 800914c:	f7ff ffa2 	bl	8009094 <malloc>
 8009150:	4602      	mov	r2, r0
 8009152:	6268      	str	r0, [r5, #36]	; 0x24
 8009154:	b920      	cbnz	r0, 8009160 <_Bfree+0x20>
 8009156:	4b09      	ldr	r3, [pc, #36]	; (800917c <_Bfree+0x3c>)
 8009158:	4809      	ldr	r0, [pc, #36]	; (8009180 <_Bfree+0x40>)
 800915a:	218a      	movs	r1, #138	; 0x8a
 800915c:	f000 fd96 	bl	8009c8c <__assert_func>
 8009160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009164:	6006      	str	r6, [r0, #0]
 8009166:	60c6      	str	r6, [r0, #12]
 8009168:	b13c      	cbz	r4, 800917a <_Bfree+0x3a>
 800916a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800916c:	6862      	ldr	r2, [r4, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009174:	6021      	str	r1, [r4, #0]
 8009176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800917a:	bd70      	pop	{r4, r5, r6, pc}
 800917c:	0800a951 	.word	0x0800a951
 8009180:	0800a9d4 	.word	0x0800a9d4

08009184 <__multadd>:
 8009184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009188:	690d      	ldr	r5, [r1, #16]
 800918a:	4607      	mov	r7, r0
 800918c:	460c      	mov	r4, r1
 800918e:	461e      	mov	r6, r3
 8009190:	f101 0c14 	add.w	ip, r1, #20
 8009194:	2000      	movs	r0, #0
 8009196:	f8dc 3000 	ldr.w	r3, [ip]
 800919a:	b299      	uxth	r1, r3
 800919c:	fb02 6101 	mla	r1, r2, r1, r6
 80091a0:	0c1e      	lsrs	r6, r3, #16
 80091a2:	0c0b      	lsrs	r3, r1, #16
 80091a4:	fb02 3306 	mla	r3, r2, r6, r3
 80091a8:	b289      	uxth	r1, r1
 80091aa:	3001      	adds	r0, #1
 80091ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091b0:	4285      	cmp	r5, r0
 80091b2:	f84c 1b04 	str.w	r1, [ip], #4
 80091b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091ba:	dcec      	bgt.n	8009196 <__multadd+0x12>
 80091bc:	b30e      	cbz	r6, 8009202 <__multadd+0x7e>
 80091be:	68a3      	ldr	r3, [r4, #8]
 80091c0:	42ab      	cmp	r3, r5
 80091c2:	dc19      	bgt.n	80091f8 <__multadd+0x74>
 80091c4:	6861      	ldr	r1, [r4, #4]
 80091c6:	4638      	mov	r0, r7
 80091c8:	3101      	adds	r1, #1
 80091ca:	f7ff ff79 	bl	80090c0 <_Balloc>
 80091ce:	4680      	mov	r8, r0
 80091d0:	b928      	cbnz	r0, 80091de <__multadd+0x5a>
 80091d2:	4602      	mov	r2, r0
 80091d4:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <__multadd+0x84>)
 80091d6:	480d      	ldr	r0, [pc, #52]	; (800920c <__multadd+0x88>)
 80091d8:	21b5      	movs	r1, #181	; 0xb5
 80091da:	f000 fd57 	bl	8009c8c <__assert_func>
 80091de:	6922      	ldr	r2, [r4, #16]
 80091e0:	3202      	adds	r2, #2
 80091e2:	f104 010c 	add.w	r1, r4, #12
 80091e6:	0092      	lsls	r2, r2, #2
 80091e8:	300c      	adds	r0, #12
 80091ea:	f7ff ff5b 	bl	80090a4 <memcpy>
 80091ee:	4621      	mov	r1, r4
 80091f0:	4638      	mov	r0, r7
 80091f2:	f7ff ffa5 	bl	8009140 <_Bfree>
 80091f6:	4644      	mov	r4, r8
 80091f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091fc:	3501      	adds	r5, #1
 80091fe:	615e      	str	r6, [r3, #20]
 8009200:	6125      	str	r5, [r4, #16]
 8009202:	4620      	mov	r0, r4
 8009204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009208:	0800a9c3 	.word	0x0800a9c3
 800920c:	0800a9d4 	.word	0x0800a9d4

08009210 <__hi0bits>:
 8009210:	0c03      	lsrs	r3, r0, #16
 8009212:	041b      	lsls	r3, r3, #16
 8009214:	b9d3      	cbnz	r3, 800924c <__hi0bits+0x3c>
 8009216:	0400      	lsls	r0, r0, #16
 8009218:	2310      	movs	r3, #16
 800921a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800921e:	bf04      	itt	eq
 8009220:	0200      	lsleq	r0, r0, #8
 8009222:	3308      	addeq	r3, #8
 8009224:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009228:	bf04      	itt	eq
 800922a:	0100      	lsleq	r0, r0, #4
 800922c:	3304      	addeq	r3, #4
 800922e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009232:	bf04      	itt	eq
 8009234:	0080      	lsleq	r0, r0, #2
 8009236:	3302      	addeq	r3, #2
 8009238:	2800      	cmp	r0, #0
 800923a:	db05      	blt.n	8009248 <__hi0bits+0x38>
 800923c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009240:	f103 0301 	add.w	r3, r3, #1
 8009244:	bf08      	it	eq
 8009246:	2320      	moveq	r3, #32
 8009248:	4618      	mov	r0, r3
 800924a:	4770      	bx	lr
 800924c:	2300      	movs	r3, #0
 800924e:	e7e4      	b.n	800921a <__hi0bits+0xa>

08009250 <__lo0bits>:
 8009250:	6803      	ldr	r3, [r0, #0]
 8009252:	f013 0207 	ands.w	r2, r3, #7
 8009256:	4601      	mov	r1, r0
 8009258:	d00b      	beq.n	8009272 <__lo0bits+0x22>
 800925a:	07da      	lsls	r2, r3, #31
 800925c:	d423      	bmi.n	80092a6 <__lo0bits+0x56>
 800925e:	0798      	lsls	r0, r3, #30
 8009260:	bf49      	itett	mi
 8009262:	085b      	lsrmi	r3, r3, #1
 8009264:	089b      	lsrpl	r3, r3, #2
 8009266:	2001      	movmi	r0, #1
 8009268:	600b      	strmi	r3, [r1, #0]
 800926a:	bf5c      	itt	pl
 800926c:	600b      	strpl	r3, [r1, #0]
 800926e:	2002      	movpl	r0, #2
 8009270:	4770      	bx	lr
 8009272:	b298      	uxth	r0, r3
 8009274:	b9a8      	cbnz	r0, 80092a2 <__lo0bits+0x52>
 8009276:	0c1b      	lsrs	r3, r3, #16
 8009278:	2010      	movs	r0, #16
 800927a:	b2da      	uxtb	r2, r3
 800927c:	b90a      	cbnz	r2, 8009282 <__lo0bits+0x32>
 800927e:	3008      	adds	r0, #8
 8009280:	0a1b      	lsrs	r3, r3, #8
 8009282:	071a      	lsls	r2, r3, #28
 8009284:	bf04      	itt	eq
 8009286:	091b      	lsreq	r3, r3, #4
 8009288:	3004      	addeq	r0, #4
 800928a:	079a      	lsls	r2, r3, #30
 800928c:	bf04      	itt	eq
 800928e:	089b      	lsreq	r3, r3, #2
 8009290:	3002      	addeq	r0, #2
 8009292:	07da      	lsls	r2, r3, #31
 8009294:	d403      	bmi.n	800929e <__lo0bits+0x4e>
 8009296:	085b      	lsrs	r3, r3, #1
 8009298:	f100 0001 	add.w	r0, r0, #1
 800929c:	d005      	beq.n	80092aa <__lo0bits+0x5a>
 800929e:	600b      	str	r3, [r1, #0]
 80092a0:	4770      	bx	lr
 80092a2:	4610      	mov	r0, r2
 80092a4:	e7e9      	b.n	800927a <__lo0bits+0x2a>
 80092a6:	2000      	movs	r0, #0
 80092a8:	4770      	bx	lr
 80092aa:	2020      	movs	r0, #32
 80092ac:	4770      	bx	lr
	...

080092b0 <__i2b>:
 80092b0:	b510      	push	{r4, lr}
 80092b2:	460c      	mov	r4, r1
 80092b4:	2101      	movs	r1, #1
 80092b6:	f7ff ff03 	bl	80090c0 <_Balloc>
 80092ba:	4602      	mov	r2, r0
 80092bc:	b928      	cbnz	r0, 80092ca <__i2b+0x1a>
 80092be:	4b05      	ldr	r3, [pc, #20]	; (80092d4 <__i2b+0x24>)
 80092c0:	4805      	ldr	r0, [pc, #20]	; (80092d8 <__i2b+0x28>)
 80092c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092c6:	f000 fce1 	bl	8009c8c <__assert_func>
 80092ca:	2301      	movs	r3, #1
 80092cc:	6144      	str	r4, [r0, #20]
 80092ce:	6103      	str	r3, [r0, #16]
 80092d0:	bd10      	pop	{r4, pc}
 80092d2:	bf00      	nop
 80092d4:	0800a9c3 	.word	0x0800a9c3
 80092d8:	0800a9d4 	.word	0x0800a9d4

080092dc <__multiply>:
 80092dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e0:	4691      	mov	r9, r2
 80092e2:	690a      	ldr	r2, [r1, #16]
 80092e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	bfb8      	it	lt
 80092ec:	460b      	movlt	r3, r1
 80092ee:	460c      	mov	r4, r1
 80092f0:	bfbc      	itt	lt
 80092f2:	464c      	movlt	r4, r9
 80092f4:	4699      	movlt	r9, r3
 80092f6:	6927      	ldr	r7, [r4, #16]
 80092f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092fc:	68a3      	ldr	r3, [r4, #8]
 80092fe:	6861      	ldr	r1, [r4, #4]
 8009300:	eb07 060a 	add.w	r6, r7, sl
 8009304:	42b3      	cmp	r3, r6
 8009306:	b085      	sub	sp, #20
 8009308:	bfb8      	it	lt
 800930a:	3101      	addlt	r1, #1
 800930c:	f7ff fed8 	bl	80090c0 <_Balloc>
 8009310:	b930      	cbnz	r0, 8009320 <__multiply+0x44>
 8009312:	4602      	mov	r2, r0
 8009314:	4b44      	ldr	r3, [pc, #272]	; (8009428 <__multiply+0x14c>)
 8009316:	4845      	ldr	r0, [pc, #276]	; (800942c <__multiply+0x150>)
 8009318:	f240 115d 	movw	r1, #349	; 0x15d
 800931c:	f000 fcb6 	bl	8009c8c <__assert_func>
 8009320:	f100 0514 	add.w	r5, r0, #20
 8009324:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009328:	462b      	mov	r3, r5
 800932a:	2200      	movs	r2, #0
 800932c:	4543      	cmp	r3, r8
 800932e:	d321      	bcc.n	8009374 <__multiply+0x98>
 8009330:	f104 0314 	add.w	r3, r4, #20
 8009334:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009338:	f109 0314 	add.w	r3, r9, #20
 800933c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009340:	9202      	str	r2, [sp, #8]
 8009342:	1b3a      	subs	r2, r7, r4
 8009344:	3a15      	subs	r2, #21
 8009346:	f022 0203 	bic.w	r2, r2, #3
 800934a:	3204      	adds	r2, #4
 800934c:	f104 0115 	add.w	r1, r4, #21
 8009350:	428f      	cmp	r7, r1
 8009352:	bf38      	it	cc
 8009354:	2204      	movcc	r2, #4
 8009356:	9201      	str	r2, [sp, #4]
 8009358:	9a02      	ldr	r2, [sp, #8]
 800935a:	9303      	str	r3, [sp, #12]
 800935c:	429a      	cmp	r2, r3
 800935e:	d80c      	bhi.n	800937a <__multiply+0x9e>
 8009360:	2e00      	cmp	r6, #0
 8009362:	dd03      	ble.n	800936c <__multiply+0x90>
 8009364:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009368:	2b00      	cmp	r3, #0
 800936a:	d05a      	beq.n	8009422 <__multiply+0x146>
 800936c:	6106      	str	r6, [r0, #16]
 800936e:	b005      	add	sp, #20
 8009370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009374:	f843 2b04 	str.w	r2, [r3], #4
 8009378:	e7d8      	b.n	800932c <__multiply+0x50>
 800937a:	f8b3 a000 	ldrh.w	sl, [r3]
 800937e:	f1ba 0f00 	cmp.w	sl, #0
 8009382:	d024      	beq.n	80093ce <__multiply+0xf2>
 8009384:	f104 0e14 	add.w	lr, r4, #20
 8009388:	46a9      	mov	r9, r5
 800938a:	f04f 0c00 	mov.w	ip, #0
 800938e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009392:	f8d9 1000 	ldr.w	r1, [r9]
 8009396:	fa1f fb82 	uxth.w	fp, r2
 800939a:	b289      	uxth	r1, r1
 800939c:	fb0a 110b 	mla	r1, sl, fp, r1
 80093a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80093a4:	f8d9 2000 	ldr.w	r2, [r9]
 80093a8:	4461      	add	r1, ip
 80093aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80093b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093b6:	b289      	uxth	r1, r1
 80093b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093bc:	4577      	cmp	r7, lr
 80093be:	f849 1b04 	str.w	r1, [r9], #4
 80093c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093c6:	d8e2      	bhi.n	800938e <__multiply+0xb2>
 80093c8:	9a01      	ldr	r2, [sp, #4]
 80093ca:	f845 c002 	str.w	ip, [r5, r2]
 80093ce:	9a03      	ldr	r2, [sp, #12]
 80093d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093d4:	3304      	adds	r3, #4
 80093d6:	f1b9 0f00 	cmp.w	r9, #0
 80093da:	d020      	beq.n	800941e <__multiply+0x142>
 80093dc:	6829      	ldr	r1, [r5, #0]
 80093de:	f104 0c14 	add.w	ip, r4, #20
 80093e2:	46ae      	mov	lr, r5
 80093e4:	f04f 0a00 	mov.w	sl, #0
 80093e8:	f8bc b000 	ldrh.w	fp, [ip]
 80093ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093f0:	fb09 220b 	mla	r2, r9, fp, r2
 80093f4:	4492      	add	sl, r2
 80093f6:	b289      	uxth	r1, r1
 80093f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80093fc:	f84e 1b04 	str.w	r1, [lr], #4
 8009400:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009404:	f8be 1000 	ldrh.w	r1, [lr]
 8009408:	0c12      	lsrs	r2, r2, #16
 800940a:	fb09 1102 	mla	r1, r9, r2, r1
 800940e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009412:	4567      	cmp	r7, ip
 8009414:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009418:	d8e6      	bhi.n	80093e8 <__multiply+0x10c>
 800941a:	9a01      	ldr	r2, [sp, #4]
 800941c:	50a9      	str	r1, [r5, r2]
 800941e:	3504      	adds	r5, #4
 8009420:	e79a      	b.n	8009358 <__multiply+0x7c>
 8009422:	3e01      	subs	r6, #1
 8009424:	e79c      	b.n	8009360 <__multiply+0x84>
 8009426:	bf00      	nop
 8009428:	0800a9c3 	.word	0x0800a9c3
 800942c:	0800a9d4 	.word	0x0800a9d4

08009430 <__pow5mult>:
 8009430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009434:	4615      	mov	r5, r2
 8009436:	f012 0203 	ands.w	r2, r2, #3
 800943a:	4606      	mov	r6, r0
 800943c:	460f      	mov	r7, r1
 800943e:	d007      	beq.n	8009450 <__pow5mult+0x20>
 8009440:	4c25      	ldr	r4, [pc, #148]	; (80094d8 <__pow5mult+0xa8>)
 8009442:	3a01      	subs	r2, #1
 8009444:	2300      	movs	r3, #0
 8009446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800944a:	f7ff fe9b 	bl	8009184 <__multadd>
 800944e:	4607      	mov	r7, r0
 8009450:	10ad      	asrs	r5, r5, #2
 8009452:	d03d      	beq.n	80094d0 <__pow5mult+0xa0>
 8009454:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009456:	b97c      	cbnz	r4, 8009478 <__pow5mult+0x48>
 8009458:	2010      	movs	r0, #16
 800945a:	f7ff fe1b 	bl	8009094 <malloc>
 800945e:	4602      	mov	r2, r0
 8009460:	6270      	str	r0, [r6, #36]	; 0x24
 8009462:	b928      	cbnz	r0, 8009470 <__pow5mult+0x40>
 8009464:	4b1d      	ldr	r3, [pc, #116]	; (80094dc <__pow5mult+0xac>)
 8009466:	481e      	ldr	r0, [pc, #120]	; (80094e0 <__pow5mult+0xb0>)
 8009468:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800946c:	f000 fc0e 	bl	8009c8c <__assert_func>
 8009470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009474:	6004      	str	r4, [r0, #0]
 8009476:	60c4      	str	r4, [r0, #12]
 8009478:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800947c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009480:	b94c      	cbnz	r4, 8009496 <__pow5mult+0x66>
 8009482:	f240 2171 	movw	r1, #625	; 0x271
 8009486:	4630      	mov	r0, r6
 8009488:	f7ff ff12 	bl	80092b0 <__i2b>
 800948c:	2300      	movs	r3, #0
 800948e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009492:	4604      	mov	r4, r0
 8009494:	6003      	str	r3, [r0, #0]
 8009496:	f04f 0900 	mov.w	r9, #0
 800949a:	07eb      	lsls	r3, r5, #31
 800949c:	d50a      	bpl.n	80094b4 <__pow5mult+0x84>
 800949e:	4639      	mov	r1, r7
 80094a0:	4622      	mov	r2, r4
 80094a2:	4630      	mov	r0, r6
 80094a4:	f7ff ff1a 	bl	80092dc <__multiply>
 80094a8:	4639      	mov	r1, r7
 80094aa:	4680      	mov	r8, r0
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7ff fe47 	bl	8009140 <_Bfree>
 80094b2:	4647      	mov	r7, r8
 80094b4:	106d      	asrs	r5, r5, #1
 80094b6:	d00b      	beq.n	80094d0 <__pow5mult+0xa0>
 80094b8:	6820      	ldr	r0, [r4, #0]
 80094ba:	b938      	cbnz	r0, 80094cc <__pow5mult+0x9c>
 80094bc:	4622      	mov	r2, r4
 80094be:	4621      	mov	r1, r4
 80094c0:	4630      	mov	r0, r6
 80094c2:	f7ff ff0b 	bl	80092dc <__multiply>
 80094c6:	6020      	str	r0, [r4, #0]
 80094c8:	f8c0 9000 	str.w	r9, [r0]
 80094cc:	4604      	mov	r4, r0
 80094ce:	e7e4      	b.n	800949a <__pow5mult+0x6a>
 80094d0:	4638      	mov	r0, r7
 80094d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094d6:	bf00      	nop
 80094d8:	0800ab20 	.word	0x0800ab20
 80094dc:	0800a951 	.word	0x0800a951
 80094e0:	0800a9d4 	.word	0x0800a9d4

080094e4 <__lshift>:
 80094e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e8:	460c      	mov	r4, r1
 80094ea:	6849      	ldr	r1, [r1, #4]
 80094ec:	6923      	ldr	r3, [r4, #16]
 80094ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094f2:	68a3      	ldr	r3, [r4, #8]
 80094f4:	4607      	mov	r7, r0
 80094f6:	4691      	mov	r9, r2
 80094f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094fc:	f108 0601 	add.w	r6, r8, #1
 8009500:	42b3      	cmp	r3, r6
 8009502:	db0b      	blt.n	800951c <__lshift+0x38>
 8009504:	4638      	mov	r0, r7
 8009506:	f7ff fddb 	bl	80090c0 <_Balloc>
 800950a:	4605      	mov	r5, r0
 800950c:	b948      	cbnz	r0, 8009522 <__lshift+0x3e>
 800950e:	4602      	mov	r2, r0
 8009510:	4b2a      	ldr	r3, [pc, #168]	; (80095bc <__lshift+0xd8>)
 8009512:	482b      	ldr	r0, [pc, #172]	; (80095c0 <__lshift+0xdc>)
 8009514:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009518:	f000 fbb8 	bl	8009c8c <__assert_func>
 800951c:	3101      	adds	r1, #1
 800951e:	005b      	lsls	r3, r3, #1
 8009520:	e7ee      	b.n	8009500 <__lshift+0x1c>
 8009522:	2300      	movs	r3, #0
 8009524:	f100 0114 	add.w	r1, r0, #20
 8009528:	f100 0210 	add.w	r2, r0, #16
 800952c:	4618      	mov	r0, r3
 800952e:	4553      	cmp	r3, sl
 8009530:	db37      	blt.n	80095a2 <__lshift+0xbe>
 8009532:	6920      	ldr	r0, [r4, #16]
 8009534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009538:	f104 0314 	add.w	r3, r4, #20
 800953c:	f019 091f 	ands.w	r9, r9, #31
 8009540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009544:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009548:	d02f      	beq.n	80095aa <__lshift+0xc6>
 800954a:	f1c9 0e20 	rsb	lr, r9, #32
 800954e:	468a      	mov	sl, r1
 8009550:	f04f 0c00 	mov.w	ip, #0
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	fa02 f209 	lsl.w	r2, r2, r9
 800955a:	ea42 020c 	orr.w	r2, r2, ip
 800955e:	f84a 2b04 	str.w	r2, [sl], #4
 8009562:	f853 2b04 	ldr.w	r2, [r3], #4
 8009566:	4298      	cmp	r0, r3
 8009568:	fa22 fc0e 	lsr.w	ip, r2, lr
 800956c:	d8f2      	bhi.n	8009554 <__lshift+0x70>
 800956e:	1b03      	subs	r3, r0, r4
 8009570:	3b15      	subs	r3, #21
 8009572:	f023 0303 	bic.w	r3, r3, #3
 8009576:	3304      	adds	r3, #4
 8009578:	f104 0215 	add.w	r2, r4, #21
 800957c:	4290      	cmp	r0, r2
 800957e:	bf38      	it	cc
 8009580:	2304      	movcc	r3, #4
 8009582:	f841 c003 	str.w	ip, [r1, r3]
 8009586:	f1bc 0f00 	cmp.w	ip, #0
 800958a:	d001      	beq.n	8009590 <__lshift+0xac>
 800958c:	f108 0602 	add.w	r6, r8, #2
 8009590:	3e01      	subs	r6, #1
 8009592:	4638      	mov	r0, r7
 8009594:	612e      	str	r6, [r5, #16]
 8009596:	4621      	mov	r1, r4
 8009598:	f7ff fdd2 	bl	8009140 <_Bfree>
 800959c:	4628      	mov	r0, r5
 800959e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80095a6:	3301      	adds	r3, #1
 80095a8:	e7c1      	b.n	800952e <__lshift+0x4a>
 80095aa:	3904      	subs	r1, #4
 80095ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80095b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80095b4:	4298      	cmp	r0, r3
 80095b6:	d8f9      	bhi.n	80095ac <__lshift+0xc8>
 80095b8:	e7ea      	b.n	8009590 <__lshift+0xac>
 80095ba:	bf00      	nop
 80095bc:	0800a9c3 	.word	0x0800a9c3
 80095c0:	0800a9d4 	.word	0x0800a9d4

080095c4 <__mcmp>:
 80095c4:	b530      	push	{r4, r5, lr}
 80095c6:	6902      	ldr	r2, [r0, #16]
 80095c8:	690c      	ldr	r4, [r1, #16]
 80095ca:	1b12      	subs	r2, r2, r4
 80095cc:	d10e      	bne.n	80095ec <__mcmp+0x28>
 80095ce:	f100 0314 	add.w	r3, r0, #20
 80095d2:	3114      	adds	r1, #20
 80095d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095e4:	42a5      	cmp	r5, r4
 80095e6:	d003      	beq.n	80095f0 <__mcmp+0x2c>
 80095e8:	d305      	bcc.n	80095f6 <__mcmp+0x32>
 80095ea:	2201      	movs	r2, #1
 80095ec:	4610      	mov	r0, r2
 80095ee:	bd30      	pop	{r4, r5, pc}
 80095f0:	4283      	cmp	r3, r0
 80095f2:	d3f3      	bcc.n	80095dc <__mcmp+0x18>
 80095f4:	e7fa      	b.n	80095ec <__mcmp+0x28>
 80095f6:	f04f 32ff 	mov.w	r2, #4294967295
 80095fa:	e7f7      	b.n	80095ec <__mcmp+0x28>

080095fc <__mdiff>:
 80095fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009600:	460c      	mov	r4, r1
 8009602:	4606      	mov	r6, r0
 8009604:	4611      	mov	r1, r2
 8009606:	4620      	mov	r0, r4
 8009608:	4690      	mov	r8, r2
 800960a:	f7ff ffdb 	bl	80095c4 <__mcmp>
 800960e:	1e05      	subs	r5, r0, #0
 8009610:	d110      	bne.n	8009634 <__mdiff+0x38>
 8009612:	4629      	mov	r1, r5
 8009614:	4630      	mov	r0, r6
 8009616:	f7ff fd53 	bl	80090c0 <_Balloc>
 800961a:	b930      	cbnz	r0, 800962a <__mdiff+0x2e>
 800961c:	4b3a      	ldr	r3, [pc, #232]	; (8009708 <__mdiff+0x10c>)
 800961e:	4602      	mov	r2, r0
 8009620:	f240 2132 	movw	r1, #562	; 0x232
 8009624:	4839      	ldr	r0, [pc, #228]	; (800970c <__mdiff+0x110>)
 8009626:	f000 fb31 	bl	8009c8c <__assert_func>
 800962a:	2301      	movs	r3, #1
 800962c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009634:	bfa4      	itt	ge
 8009636:	4643      	movge	r3, r8
 8009638:	46a0      	movge	r8, r4
 800963a:	4630      	mov	r0, r6
 800963c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009640:	bfa6      	itte	ge
 8009642:	461c      	movge	r4, r3
 8009644:	2500      	movge	r5, #0
 8009646:	2501      	movlt	r5, #1
 8009648:	f7ff fd3a 	bl	80090c0 <_Balloc>
 800964c:	b920      	cbnz	r0, 8009658 <__mdiff+0x5c>
 800964e:	4b2e      	ldr	r3, [pc, #184]	; (8009708 <__mdiff+0x10c>)
 8009650:	4602      	mov	r2, r0
 8009652:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009656:	e7e5      	b.n	8009624 <__mdiff+0x28>
 8009658:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800965c:	6926      	ldr	r6, [r4, #16]
 800965e:	60c5      	str	r5, [r0, #12]
 8009660:	f104 0914 	add.w	r9, r4, #20
 8009664:	f108 0514 	add.w	r5, r8, #20
 8009668:	f100 0e14 	add.w	lr, r0, #20
 800966c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009670:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009674:	f108 0210 	add.w	r2, r8, #16
 8009678:	46f2      	mov	sl, lr
 800967a:	2100      	movs	r1, #0
 800967c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009680:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009684:	fa1f f883 	uxth.w	r8, r3
 8009688:	fa11 f18b 	uxtah	r1, r1, fp
 800968c:	0c1b      	lsrs	r3, r3, #16
 800968e:	eba1 0808 	sub.w	r8, r1, r8
 8009692:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009696:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800969a:	fa1f f888 	uxth.w	r8, r8
 800969e:	1419      	asrs	r1, r3, #16
 80096a0:	454e      	cmp	r6, r9
 80096a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80096a6:	f84a 3b04 	str.w	r3, [sl], #4
 80096aa:	d8e7      	bhi.n	800967c <__mdiff+0x80>
 80096ac:	1b33      	subs	r3, r6, r4
 80096ae:	3b15      	subs	r3, #21
 80096b0:	f023 0303 	bic.w	r3, r3, #3
 80096b4:	3304      	adds	r3, #4
 80096b6:	3415      	adds	r4, #21
 80096b8:	42a6      	cmp	r6, r4
 80096ba:	bf38      	it	cc
 80096bc:	2304      	movcc	r3, #4
 80096be:	441d      	add	r5, r3
 80096c0:	4473      	add	r3, lr
 80096c2:	469e      	mov	lr, r3
 80096c4:	462e      	mov	r6, r5
 80096c6:	4566      	cmp	r6, ip
 80096c8:	d30e      	bcc.n	80096e8 <__mdiff+0xec>
 80096ca:	f10c 0203 	add.w	r2, ip, #3
 80096ce:	1b52      	subs	r2, r2, r5
 80096d0:	f022 0203 	bic.w	r2, r2, #3
 80096d4:	3d03      	subs	r5, #3
 80096d6:	45ac      	cmp	ip, r5
 80096d8:	bf38      	it	cc
 80096da:	2200      	movcc	r2, #0
 80096dc:	441a      	add	r2, r3
 80096de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80096e2:	b17b      	cbz	r3, 8009704 <__mdiff+0x108>
 80096e4:	6107      	str	r7, [r0, #16]
 80096e6:	e7a3      	b.n	8009630 <__mdiff+0x34>
 80096e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80096ec:	fa11 f288 	uxtah	r2, r1, r8
 80096f0:	1414      	asrs	r4, r2, #16
 80096f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096f6:	b292      	uxth	r2, r2
 80096f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096fc:	f84e 2b04 	str.w	r2, [lr], #4
 8009700:	1421      	asrs	r1, r4, #16
 8009702:	e7e0      	b.n	80096c6 <__mdiff+0xca>
 8009704:	3f01      	subs	r7, #1
 8009706:	e7ea      	b.n	80096de <__mdiff+0xe2>
 8009708:	0800a9c3 	.word	0x0800a9c3
 800970c:	0800a9d4 	.word	0x0800a9d4

08009710 <__d2b>:
 8009710:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009714:	4689      	mov	r9, r1
 8009716:	2101      	movs	r1, #1
 8009718:	ec57 6b10 	vmov	r6, r7, d0
 800971c:	4690      	mov	r8, r2
 800971e:	f7ff fccf 	bl	80090c0 <_Balloc>
 8009722:	4604      	mov	r4, r0
 8009724:	b930      	cbnz	r0, 8009734 <__d2b+0x24>
 8009726:	4602      	mov	r2, r0
 8009728:	4b25      	ldr	r3, [pc, #148]	; (80097c0 <__d2b+0xb0>)
 800972a:	4826      	ldr	r0, [pc, #152]	; (80097c4 <__d2b+0xb4>)
 800972c:	f240 310a 	movw	r1, #778	; 0x30a
 8009730:	f000 faac 	bl	8009c8c <__assert_func>
 8009734:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009738:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800973c:	bb35      	cbnz	r5, 800978c <__d2b+0x7c>
 800973e:	2e00      	cmp	r6, #0
 8009740:	9301      	str	r3, [sp, #4]
 8009742:	d028      	beq.n	8009796 <__d2b+0x86>
 8009744:	4668      	mov	r0, sp
 8009746:	9600      	str	r6, [sp, #0]
 8009748:	f7ff fd82 	bl	8009250 <__lo0bits>
 800974c:	9900      	ldr	r1, [sp, #0]
 800974e:	b300      	cbz	r0, 8009792 <__d2b+0x82>
 8009750:	9a01      	ldr	r2, [sp, #4]
 8009752:	f1c0 0320 	rsb	r3, r0, #32
 8009756:	fa02 f303 	lsl.w	r3, r2, r3
 800975a:	430b      	orrs	r3, r1
 800975c:	40c2      	lsrs	r2, r0
 800975e:	6163      	str	r3, [r4, #20]
 8009760:	9201      	str	r2, [sp, #4]
 8009762:	9b01      	ldr	r3, [sp, #4]
 8009764:	61a3      	str	r3, [r4, #24]
 8009766:	2b00      	cmp	r3, #0
 8009768:	bf14      	ite	ne
 800976a:	2202      	movne	r2, #2
 800976c:	2201      	moveq	r2, #1
 800976e:	6122      	str	r2, [r4, #16]
 8009770:	b1d5      	cbz	r5, 80097a8 <__d2b+0x98>
 8009772:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009776:	4405      	add	r5, r0
 8009778:	f8c9 5000 	str.w	r5, [r9]
 800977c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009780:	f8c8 0000 	str.w	r0, [r8]
 8009784:	4620      	mov	r0, r4
 8009786:	b003      	add	sp, #12
 8009788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800978c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009790:	e7d5      	b.n	800973e <__d2b+0x2e>
 8009792:	6161      	str	r1, [r4, #20]
 8009794:	e7e5      	b.n	8009762 <__d2b+0x52>
 8009796:	a801      	add	r0, sp, #4
 8009798:	f7ff fd5a 	bl	8009250 <__lo0bits>
 800979c:	9b01      	ldr	r3, [sp, #4]
 800979e:	6163      	str	r3, [r4, #20]
 80097a0:	2201      	movs	r2, #1
 80097a2:	6122      	str	r2, [r4, #16]
 80097a4:	3020      	adds	r0, #32
 80097a6:	e7e3      	b.n	8009770 <__d2b+0x60>
 80097a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097b0:	f8c9 0000 	str.w	r0, [r9]
 80097b4:	6918      	ldr	r0, [r3, #16]
 80097b6:	f7ff fd2b 	bl	8009210 <__hi0bits>
 80097ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097be:	e7df      	b.n	8009780 <__d2b+0x70>
 80097c0:	0800a9c3 	.word	0x0800a9c3
 80097c4:	0800a9d4 	.word	0x0800a9d4

080097c8 <_calloc_r>:
 80097c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097ca:	fba1 2402 	umull	r2, r4, r1, r2
 80097ce:	b94c      	cbnz	r4, 80097e4 <_calloc_r+0x1c>
 80097d0:	4611      	mov	r1, r2
 80097d2:	9201      	str	r2, [sp, #4]
 80097d4:	f000 f87a 	bl	80098cc <_malloc_r>
 80097d8:	9a01      	ldr	r2, [sp, #4]
 80097da:	4605      	mov	r5, r0
 80097dc:	b930      	cbnz	r0, 80097ec <_calloc_r+0x24>
 80097de:	4628      	mov	r0, r5
 80097e0:	b003      	add	sp, #12
 80097e2:	bd30      	pop	{r4, r5, pc}
 80097e4:	220c      	movs	r2, #12
 80097e6:	6002      	str	r2, [r0, #0]
 80097e8:	2500      	movs	r5, #0
 80097ea:	e7f8      	b.n	80097de <_calloc_r+0x16>
 80097ec:	4621      	mov	r1, r4
 80097ee:	f7fe f9e7 	bl	8007bc0 <memset>
 80097f2:	e7f4      	b.n	80097de <_calloc_r+0x16>

080097f4 <_free_r>:
 80097f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097f6:	2900      	cmp	r1, #0
 80097f8:	d044      	beq.n	8009884 <_free_r+0x90>
 80097fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097fe:	9001      	str	r0, [sp, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	f1a1 0404 	sub.w	r4, r1, #4
 8009806:	bfb8      	it	lt
 8009808:	18e4      	addlt	r4, r4, r3
 800980a:	f000 fa9b 	bl	8009d44 <__malloc_lock>
 800980e:	4a1e      	ldr	r2, [pc, #120]	; (8009888 <_free_r+0x94>)
 8009810:	9801      	ldr	r0, [sp, #4]
 8009812:	6813      	ldr	r3, [r2, #0]
 8009814:	b933      	cbnz	r3, 8009824 <_free_r+0x30>
 8009816:	6063      	str	r3, [r4, #4]
 8009818:	6014      	str	r4, [r2, #0]
 800981a:	b003      	add	sp, #12
 800981c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009820:	f000 ba96 	b.w	8009d50 <__malloc_unlock>
 8009824:	42a3      	cmp	r3, r4
 8009826:	d908      	bls.n	800983a <_free_r+0x46>
 8009828:	6825      	ldr	r5, [r4, #0]
 800982a:	1961      	adds	r1, r4, r5
 800982c:	428b      	cmp	r3, r1
 800982e:	bf01      	itttt	eq
 8009830:	6819      	ldreq	r1, [r3, #0]
 8009832:	685b      	ldreq	r3, [r3, #4]
 8009834:	1949      	addeq	r1, r1, r5
 8009836:	6021      	streq	r1, [r4, #0]
 8009838:	e7ed      	b.n	8009816 <_free_r+0x22>
 800983a:	461a      	mov	r2, r3
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	b10b      	cbz	r3, 8009844 <_free_r+0x50>
 8009840:	42a3      	cmp	r3, r4
 8009842:	d9fa      	bls.n	800983a <_free_r+0x46>
 8009844:	6811      	ldr	r1, [r2, #0]
 8009846:	1855      	adds	r5, r2, r1
 8009848:	42a5      	cmp	r5, r4
 800984a:	d10b      	bne.n	8009864 <_free_r+0x70>
 800984c:	6824      	ldr	r4, [r4, #0]
 800984e:	4421      	add	r1, r4
 8009850:	1854      	adds	r4, r2, r1
 8009852:	42a3      	cmp	r3, r4
 8009854:	6011      	str	r1, [r2, #0]
 8009856:	d1e0      	bne.n	800981a <_free_r+0x26>
 8009858:	681c      	ldr	r4, [r3, #0]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	6053      	str	r3, [r2, #4]
 800985e:	4421      	add	r1, r4
 8009860:	6011      	str	r1, [r2, #0]
 8009862:	e7da      	b.n	800981a <_free_r+0x26>
 8009864:	d902      	bls.n	800986c <_free_r+0x78>
 8009866:	230c      	movs	r3, #12
 8009868:	6003      	str	r3, [r0, #0]
 800986a:	e7d6      	b.n	800981a <_free_r+0x26>
 800986c:	6825      	ldr	r5, [r4, #0]
 800986e:	1961      	adds	r1, r4, r5
 8009870:	428b      	cmp	r3, r1
 8009872:	bf04      	itt	eq
 8009874:	6819      	ldreq	r1, [r3, #0]
 8009876:	685b      	ldreq	r3, [r3, #4]
 8009878:	6063      	str	r3, [r4, #4]
 800987a:	bf04      	itt	eq
 800987c:	1949      	addeq	r1, r1, r5
 800987e:	6021      	streq	r1, [r4, #0]
 8009880:	6054      	str	r4, [r2, #4]
 8009882:	e7ca      	b.n	800981a <_free_r+0x26>
 8009884:	b003      	add	sp, #12
 8009886:	bd30      	pop	{r4, r5, pc}
 8009888:	240003c4 	.word	0x240003c4

0800988c <sbrk_aligned>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	4e0e      	ldr	r6, [pc, #56]	; (80098c8 <sbrk_aligned+0x3c>)
 8009890:	460c      	mov	r4, r1
 8009892:	6831      	ldr	r1, [r6, #0]
 8009894:	4605      	mov	r5, r0
 8009896:	b911      	cbnz	r1, 800989e <sbrk_aligned+0x12>
 8009898:	f000 f9e8 	bl	8009c6c <_sbrk_r>
 800989c:	6030      	str	r0, [r6, #0]
 800989e:	4621      	mov	r1, r4
 80098a0:	4628      	mov	r0, r5
 80098a2:	f000 f9e3 	bl	8009c6c <_sbrk_r>
 80098a6:	1c43      	adds	r3, r0, #1
 80098a8:	d00a      	beq.n	80098c0 <sbrk_aligned+0x34>
 80098aa:	1cc4      	adds	r4, r0, #3
 80098ac:	f024 0403 	bic.w	r4, r4, #3
 80098b0:	42a0      	cmp	r0, r4
 80098b2:	d007      	beq.n	80098c4 <sbrk_aligned+0x38>
 80098b4:	1a21      	subs	r1, r4, r0
 80098b6:	4628      	mov	r0, r5
 80098b8:	f000 f9d8 	bl	8009c6c <_sbrk_r>
 80098bc:	3001      	adds	r0, #1
 80098be:	d101      	bne.n	80098c4 <sbrk_aligned+0x38>
 80098c0:	f04f 34ff 	mov.w	r4, #4294967295
 80098c4:	4620      	mov	r0, r4
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	240003c8 	.word	0x240003c8

080098cc <_malloc_r>:
 80098cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d0:	1ccd      	adds	r5, r1, #3
 80098d2:	f025 0503 	bic.w	r5, r5, #3
 80098d6:	3508      	adds	r5, #8
 80098d8:	2d0c      	cmp	r5, #12
 80098da:	bf38      	it	cc
 80098dc:	250c      	movcc	r5, #12
 80098de:	2d00      	cmp	r5, #0
 80098e0:	4607      	mov	r7, r0
 80098e2:	db01      	blt.n	80098e8 <_malloc_r+0x1c>
 80098e4:	42a9      	cmp	r1, r5
 80098e6:	d905      	bls.n	80098f4 <_malloc_r+0x28>
 80098e8:	230c      	movs	r3, #12
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	2600      	movs	r6, #0
 80098ee:	4630      	mov	r0, r6
 80098f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f4:	4e2e      	ldr	r6, [pc, #184]	; (80099b0 <_malloc_r+0xe4>)
 80098f6:	f000 fa25 	bl	8009d44 <__malloc_lock>
 80098fa:	6833      	ldr	r3, [r6, #0]
 80098fc:	461c      	mov	r4, r3
 80098fe:	bb34      	cbnz	r4, 800994e <_malloc_r+0x82>
 8009900:	4629      	mov	r1, r5
 8009902:	4638      	mov	r0, r7
 8009904:	f7ff ffc2 	bl	800988c <sbrk_aligned>
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	4604      	mov	r4, r0
 800990c:	d14d      	bne.n	80099aa <_malloc_r+0xde>
 800990e:	6834      	ldr	r4, [r6, #0]
 8009910:	4626      	mov	r6, r4
 8009912:	2e00      	cmp	r6, #0
 8009914:	d140      	bne.n	8009998 <_malloc_r+0xcc>
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	4631      	mov	r1, r6
 800991a:	4638      	mov	r0, r7
 800991c:	eb04 0803 	add.w	r8, r4, r3
 8009920:	f000 f9a4 	bl	8009c6c <_sbrk_r>
 8009924:	4580      	cmp	r8, r0
 8009926:	d13a      	bne.n	800999e <_malloc_r+0xd2>
 8009928:	6821      	ldr	r1, [r4, #0]
 800992a:	3503      	adds	r5, #3
 800992c:	1a6d      	subs	r5, r5, r1
 800992e:	f025 0503 	bic.w	r5, r5, #3
 8009932:	3508      	adds	r5, #8
 8009934:	2d0c      	cmp	r5, #12
 8009936:	bf38      	it	cc
 8009938:	250c      	movcc	r5, #12
 800993a:	4629      	mov	r1, r5
 800993c:	4638      	mov	r0, r7
 800993e:	f7ff ffa5 	bl	800988c <sbrk_aligned>
 8009942:	3001      	adds	r0, #1
 8009944:	d02b      	beq.n	800999e <_malloc_r+0xd2>
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	442b      	add	r3, r5
 800994a:	6023      	str	r3, [r4, #0]
 800994c:	e00e      	b.n	800996c <_malloc_r+0xa0>
 800994e:	6822      	ldr	r2, [r4, #0]
 8009950:	1b52      	subs	r2, r2, r5
 8009952:	d41e      	bmi.n	8009992 <_malloc_r+0xc6>
 8009954:	2a0b      	cmp	r2, #11
 8009956:	d916      	bls.n	8009986 <_malloc_r+0xba>
 8009958:	1961      	adds	r1, r4, r5
 800995a:	42a3      	cmp	r3, r4
 800995c:	6025      	str	r5, [r4, #0]
 800995e:	bf18      	it	ne
 8009960:	6059      	strne	r1, [r3, #4]
 8009962:	6863      	ldr	r3, [r4, #4]
 8009964:	bf08      	it	eq
 8009966:	6031      	streq	r1, [r6, #0]
 8009968:	5162      	str	r2, [r4, r5]
 800996a:	604b      	str	r3, [r1, #4]
 800996c:	4638      	mov	r0, r7
 800996e:	f104 060b 	add.w	r6, r4, #11
 8009972:	f000 f9ed 	bl	8009d50 <__malloc_unlock>
 8009976:	f026 0607 	bic.w	r6, r6, #7
 800997a:	1d23      	adds	r3, r4, #4
 800997c:	1af2      	subs	r2, r6, r3
 800997e:	d0b6      	beq.n	80098ee <_malloc_r+0x22>
 8009980:	1b9b      	subs	r3, r3, r6
 8009982:	50a3      	str	r3, [r4, r2]
 8009984:	e7b3      	b.n	80098ee <_malloc_r+0x22>
 8009986:	6862      	ldr	r2, [r4, #4]
 8009988:	42a3      	cmp	r3, r4
 800998a:	bf0c      	ite	eq
 800998c:	6032      	streq	r2, [r6, #0]
 800998e:	605a      	strne	r2, [r3, #4]
 8009990:	e7ec      	b.n	800996c <_malloc_r+0xa0>
 8009992:	4623      	mov	r3, r4
 8009994:	6864      	ldr	r4, [r4, #4]
 8009996:	e7b2      	b.n	80098fe <_malloc_r+0x32>
 8009998:	4634      	mov	r4, r6
 800999a:	6876      	ldr	r6, [r6, #4]
 800999c:	e7b9      	b.n	8009912 <_malloc_r+0x46>
 800999e:	230c      	movs	r3, #12
 80099a0:	603b      	str	r3, [r7, #0]
 80099a2:	4638      	mov	r0, r7
 80099a4:	f000 f9d4 	bl	8009d50 <__malloc_unlock>
 80099a8:	e7a1      	b.n	80098ee <_malloc_r+0x22>
 80099aa:	6025      	str	r5, [r4, #0]
 80099ac:	e7de      	b.n	800996c <_malloc_r+0xa0>
 80099ae:	bf00      	nop
 80099b0:	240003c4 	.word	0x240003c4

080099b4 <__ssputs_r>:
 80099b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b8:	688e      	ldr	r6, [r1, #8]
 80099ba:	429e      	cmp	r6, r3
 80099bc:	4682      	mov	sl, r0
 80099be:	460c      	mov	r4, r1
 80099c0:	4690      	mov	r8, r2
 80099c2:	461f      	mov	r7, r3
 80099c4:	d838      	bhi.n	8009a38 <__ssputs_r+0x84>
 80099c6:	898a      	ldrh	r2, [r1, #12]
 80099c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099cc:	d032      	beq.n	8009a34 <__ssputs_r+0x80>
 80099ce:	6825      	ldr	r5, [r4, #0]
 80099d0:	6909      	ldr	r1, [r1, #16]
 80099d2:	eba5 0901 	sub.w	r9, r5, r1
 80099d6:	6965      	ldr	r5, [r4, #20]
 80099d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099e0:	3301      	adds	r3, #1
 80099e2:	444b      	add	r3, r9
 80099e4:	106d      	asrs	r5, r5, #1
 80099e6:	429d      	cmp	r5, r3
 80099e8:	bf38      	it	cc
 80099ea:	461d      	movcc	r5, r3
 80099ec:	0553      	lsls	r3, r2, #21
 80099ee:	d531      	bpl.n	8009a54 <__ssputs_r+0xa0>
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7ff ff6b 	bl	80098cc <_malloc_r>
 80099f6:	4606      	mov	r6, r0
 80099f8:	b950      	cbnz	r0, 8009a10 <__ssputs_r+0x5c>
 80099fa:	230c      	movs	r3, #12
 80099fc:	f8ca 3000 	str.w	r3, [sl]
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a06:	81a3      	strh	r3, [r4, #12]
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a10:	6921      	ldr	r1, [r4, #16]
 8009a12:	464a      	mov	r2, r9
 8009a14:	f7ff fb46 	bl	80090a4 <memcpy>
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a22:	81a3      	strh	r3, [r4, #12]
 8009a24:	6126      	str	r6, [r4, #16]
 8009a26:	6165      	str	r5, [r4, #20]
 8009a28:	444e      	add	r6, r9
 8009a2a:	eba5 0509 	sub.w	r5, r5, r9
 8009a2e:	6026      	str	r6, [r4, #0]
 8009a30:	60a5      	str	r5, [r4, #8]
 8009a32:	463e      	mov	r6, r7
 8009a34:	42be      	cmp	r6, r7
 8009a36:	d900      	bls.n	8009a3a <__ssputs_r+0x86>
 8009a38:	463e      	mov	r6, r7
 8009a3a:	6820      	ldr	r0, [r4, #0]
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	4641      	mov	r1, r8
 8009a40:	f000 f966 	bl	8009d10 <memmove>
 8009a44:	68a3      	ldr	r3, [r4, #8]
 8009a46:	1b9b      	subs	r3, r3, r6
 8009a48:	60a3      	str	r3, [r4, #8]
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	4433      	add	r3, r6
 8009a4e:	6023      	str	r3, [r4, #0]
 8009a50:	2000      	movs	r0, #0
 8009a52:	e7db      	b.n	8009a0c <__ssputs_r+0x58>
 8009a54:	462a      	mov	r2, r5
 8009a56:	f000 f981 	bl	8009d5c <_realloc_r>
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d1e1      	bne.n	8009a24 <__ssputs_r+0x70>
 8009a60:	6921      	ldr	r1, [r4, #16]
 8009a62:	4650      	mov	r0, sl
 8009a64:	f7ff fec6 	bl	80097f4 <_free_r>
 8009a68:	e7c7      	b.n	80099fa <__ssputs_r+0x46>
	...

08009a6c <_svfiprintf_r>:
 8009a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a70:	4698      	mov	r8, r3
 8009a72:	898b      	ldrh	r3, [r1, #12]
 8009a74:	061b      	lsls	r3, r3, #24
 8009a76:	b09d      	sub	sp, #116	; 0x74
 8009a78:	4607      	mov	r7, r0
 8009a7a:	460d      	mov	r5, r1
 8009a7c:	4614      	mov	r4, r2
 8009a7e:	d50e      	bpl.n	8009a9e <_svfiprintf_r+0x32>
 8009a80:	690b      	ldr	r3, [r1, #16]
 8009a82:	b963      	cbnz	r3, 8009a9e <_svfiprintf_r+0x32>
 8009a84:	2140      	movs	r1, #64	; 0x40
 8009a86:	f7ff ff21 	bl	80098cc <_malloc_r>
 8009a8a:	6028      	str	r0, [r5, #0]
 8009a8c:	6128      	str	r0, [r5, #16]
 8009a8e:	b920      	cbnz	r0, 8009a9a <_svfiprintf_r+0x2e>
 8009a90:	230c      	movs	r3, #12
 8009a92:	603b      	str	r3, [r7, #0]
 8009a94:	f04f 30ff 	mov.w	r0, #4294967295
 8009a98:	e0d1      	b.n	8009c3e <_svfiprintf_r+0x1d2>
 8009a9a:	2340      	movs	r3, #64	; 0x40
 8009a9c:	616b      	str	r3, [r5, #20]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa2:	2320      	movs	r3, #32
 8009aa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aac:	2330      	movs	r3, #48	; 0x30
 8009aae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c58 <_svfiprintf_r+0x1ec>
 8009ab2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ab6:	f04f 0901 	mov.w	r9, #1
 8009aba:	4623      	mov	r3, r4
 8009abc:	469a      	mov	sl, r3
 8009abe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ac2:	b10a      	cbz	r2, 8009ac8 <_svfiprintf_r+0x5c>
 8009ac4:	2a25      	cmp	r2, #37	; 0x25
 8009ac6:	d1f9      	bne.n	8009abc <_svfiprintf_r+0x50>
 8009ac8:	ebba 0b04 	subs.w	fp, sl, r4
 8009acc:	d00b      	beq.n	8009ae6 <_svfiprintf_r+0x7a>
 8009ace:	465b      	mov	r3, fp
 8009ad0:	4622      	mov	r2, r4
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	f7ff ff6d 	bl	80099b4 <__ssputs_r>
 8009ada:	3001      	adds	r0, #1
 8009adc:	f000 80aa 	beq.w	8009c34 <_svfiprintf_r+0x1c8>
 8009ae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ae2:	445a      	add	r2, fp
 8009ae4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 80a2 	beq.w	8009c34 <_svfiprintf_r+0x1c8>
 8009af0:	2300      	movs	r3, #0
 8009af2:	f04f 32ff 	mov.w	r2, #4294967295
 8009af6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009afa:	f10a 0a01 	add.w	sl, sl, #1
 8009afe:	9304      	str	r3, [sp, #16]
 8009b00:	9307      	str	r3, [sp, #28]
 8009b02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b06:	931a      	str	r3, [sp, #104]	; 0x68
 8009b08:	4654      	mov	r4, sl
 8009b0a:	2205      	movs	r2, #5
 8009b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b10:	4851      	ldr	r0, [pc, #324]	; (8009c58 <_svfiprintf_r+0x1ec>)
 8009b12:	f7f6 fbed 	bl	80002f0 <memchr>
 8009b16:	9a04      	ldr	r2, [sp, #16]
 8009b18:	b9d8      	cbnz	r0, 8009b52 <_svfiprintf_r+0xe6>
 8009b1a:	06d0      	lsls	r0, r2, #27
 8009b1c:	bf44      	itt	mi
 8009b1e:	2320      	movmi	r3, #32
 8009b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b24:	0711      	lsls	r1, r2, #28
 8009b26:	bf44      	itt	mi
 8009b28:	232b      	movmi	r3, #43	; 0x2b
 8009b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b32:	2b2a      	cmp	r3, #42	; 0x2a
 8009b34:	d015      	beq.n	8009b62 <_svfiprintf_r+0xf6>
 8009b36:	9a07      	ldr	r2, [sp, #28]
 8009b38:	4654      	mov	r4, sl
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	f04f 0c0a 	mov.w	ip, #10
 8009b40:	4621      	mov	r1, r4
 8009b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b46:	3b30      	subs	r3, #48	; 0x30
 8009b48:	2b09      	cmp	r3, #9
 8009b4a:	d94e      	bls.n	8009bea <_svfiprintf_r+0x17e>
 8009b4c:	b1b0      	cbz	r0, 8009b7c <_svfiprintf_r+0x110>
 8009b4e:	9207      	str	r2, [sp, #28]
 8009b50:	e014      	b.n	8009b7c <_svfiprintf_r+0x110>
 8009b52:	eba0 0308 	sub.w	r3, r0, r8
 8009b56:	fa09 f303 	lsl.w	r3, r9, r3
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	9304      	str	r3, [sp, #16]
 8009b5e:	46a2      	mov	sl, r4
 8009b60:	e7d2      	b.n	8009b08 <_svfiprintf_r+0x9c>
 8009b62:	9b03      	ldr	r3, [sp, #12]
 8009b64:	1d19      	adds	r1, r3, #4
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	9103      	str	r1, [sp, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	bfbb      	ittet	lt
 8009b6e:	425b      	neglt	r3, r3
 8009b70:	f042 0202 	orrlt.w	r2, r2, #2
 8009b74:	9307      	strge	r3, [sp, #28]
 8009b76:	9307      	strlt	r3, [sp, #28]
 8009b78:	bfb8      	it	lt
 8009b7a:	9204      	strlt	r2, [sp, #16]
 8009b7c:	7823      	ldrb	r3, [r4, #0]
 8009b7e:	2b2e      	cmp	r3, #46	; 0x2e
 8009b80:	d10c      	bne.n	8009b9c <_svfiprintf_r+0x130>
 8009b82:	7863      	ldrb	r3, [r4, #1]
 8009b84:	2b2a      	cmp	r3, #42	; 0x2a
 8009b86:	d135      	bne.n	8009bf4 <_svfiprintf_r+0x188>
 8009b88:	9b03      	ldr	r3, [sp, #12]
 8009b8a:	1d1a      	adds	r2, r3, #4
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	9203      	str	r2, [sp, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	bfb8      	it	lt
 8009b94:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b98:	3402      	adds	r4, #2
 8009b9a:	9305      	str	r3, [sp, #20]
 8009b9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c68 <_svfiprintf_r+0x1fc>
 8009ba0:	7821      	ldrb	r1, [r4, #0]
 8009ba2:	2203      	movs	r2, #3
 8009ba4:	4650      	mov	r0, sl
 8009ba6:	f7f6 fba3 	bl	80002f0 <memchr>
 8009baa:	b140      	cbz	r0, 8009bbe <_svfiprintf_r+0x152>
 8009bac:	2340      	movs	r3, #64	; 0x40
 8009bae:	eba0 000a 	sub.w	r0, r0, sl
 8009bb2:	fa03 f000 	lsl.w	r0, r3, r0
 8009bb6:	9b04      	ldr	r3, [sp, #16]
 8009bb8:	4303      	orrs	r3, r0
 8009bba:	3401      	adds	r4, #1
 8009bbc:	9304      	str	r3, [sp, #16]
 8009bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc2:	4826      	ldr	r0, [pc, #152]	; (8009c5c <_svfiprintf_r+0x1f0>)
 8009bc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bc8:	2206      	movs	r2, #6
 8009bca:	f7f6 fb91 	bl	80002f0 <memchr>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d038      	beq.n	8009c44 <_svfiprintf_r+0x1d8>
 8009bd2:	4b23      	ldr	r3, [pc, #140]	; (8009c60 <_svfiprintf_r+0x1f4>)
 8009bd4:	bb1b      	cbnz	r3, 8009c1e <_svfiprintf_r+0x1b2>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	3307      	adds	r3, #7
 8009bda:	f023 0307 	bic.w	r3, r3, #7
 8009bde:	3308      	adds	r3, #8
 8009be0:	9303      	str	r3, [sp, #12]
 8009be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be4:	4433      	add	r3, r6
 8009be6:	9309      	str	r3, [sp, #36]	; 0x24
 8009be8:	e767      	b.n	8009aba <_svfiprintf_r+0x4e>
 8009bea:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bee:	460c      	mov	r4, r1
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	e7a5      	b.n	8009b40 <_svfiprintf_r+0xd4>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	3401      	adds	r4, #1
 8009bf8:	9305      	str	r3, [sp, #20]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	f04f 0c0a 	mov.w	ip, #10
 8009c00:	4620      	mov	r0, r4
 8009c02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c06:	3a30      	subs	r2, #48	; 0x30
 8009c08:	2a09      	cmp	r2, #9
 8009c0a:	d903      	bls.n	8009c14 <_svfiprintf_r+0x1a8>
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0c5      	beq.n	8009b9c <_svfiprintf_r+0x130>
 8009c10:	9105      	str	r1, [sp, #20]
 8009c12:	e7c3      	b.n	8009b9c <_svfiprintf_r+0x130>
 8009c14:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c18:	4604      	mov	r4, r0
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e7f0      	b.n	8009c00 <_svfiprintf_r+0x194>
 8009c1e:	ab03      	add	r3, sp, #12
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	462a      	mov	r2, r5
 8009c24:	4b0f      	ldr	r3, [pc, #60]	; (8009c64 <_svfiprintf_r+0x1f8>)
 8009c26:	a904      	add	r1, sp, #16
 8009c28:	4638      	mov	r0, r7
 8009c2a:	f7fe f861 	bl	8007cf0 <_printf_float>
 8009c2e:	1c42      	adds	r2, r0, #1
 8009c30:	4606      	mov	r6, r0
 8009c32:	d1d6      	bne.n	8009be2 <_svfiprintf_r+0x176>
 8009c34:	89ab      	ldrh	r3, [r5, #12]
 8009c36:	065b      	lsls	r3, r3, #25
 8009c38:	f53f af2c 	bmi.w	8009a94 <_svfiprintf_r+0x28>
 8009c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c3e:	b01d      	add	sp, #116	; 0x74
 8009c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c44:	ab03      	add	r3, sp, #12
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	462a      	mov	r2, r5
 8009c4a:	4b06      	ldr	r3, [pc, #24]	; (8009c64 <_svfiprintf_r+0x1f8>)
 8009c4c:	a904      	add	r1, sp, #16
 8009c4e:	4638      	mov	r0, r7
 8009c50:	f7fe fada 	bl	8008208 <_printf_i>
 8009c54:	e7eb      	b.n	8009c2e <_svfiprintf_r+0x1c2>
 8009c56:	bf00      	nop
 8009c58:	0800ab2c 	.word	0x0800ab2c
 8009c5c:	0800ab36 	.word	0x0800ab36
 8009c60:	08007cf1 	.word	0x08007cf1
 8009c64:	080099b5 	.word	0x080099b5
 8009c68:	0800ab32 	.word	0x0800ab32

08009c6c <_sbrk_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	4d06      	ldr	r5, [pc, #24]	; (8009c88 <_sbrk_r+0x1c>)
 8009c70:	2300      	movs	r3, #0
 8009c72:	4604      	mov	r4, r0
 8009c74:	4608      	mov	r0, r1
 8009c76:	602b      	str	r3, [r5, #0]
 8009c78:	f7f7 fc8e 	bl	8001598 <_sbrk>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_sbrk_r+0x1a>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_sbrk_r+0x1a>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	240003cc 	.word	0x240003cc

08009c8c <__assert_func>:
 8009c8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c8e:	4614      	mov	r4, r2
 8009c90:	461a      	mov	r2, r3
 8009c92:	4b09      	ldr	r3, [pc, #36]	; (8009cb8 <__assert_func+0x2c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4605      	mov	r5, r0
 8009c98:	68d8      	ldr	r0, [r3, #12]
 8009c9a:	b14c      	cbz	r4, 8009cb0 <__assert_func+0x24>
 8009c9c:	4b07      	ldr	r3, [pc, #28]	; (8009cbc <__assert_func+0x30>)
 8009c9e:	9100      	str	r1, [sp, #0]
 8009ca0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ca4:	4906      	ldr	r1, [pc, #24]	; (8009cc0 <__assert_func+0x34>)
 8009ca6:	462b      	mov	r3, r5
 8009ca8:	f000 f80e 	bl	8009cc8 <fiprintf>
 8009cac:	f000 faac 	bl	800a208 <abort>
 8009cb0:	4b04      	ldr	r3, [pc, #16]	; (8009cc4 <__assert_func+0x38>)
 8009cb2:	461c      	mov	r4, r3
 8009cb4:	e7f3      	b.n	8009c9e <__assert_func+0x12>
 8009cb6:	bf00      	nop
 8009cb8:	24000010 	.word	0x24000010
 8009cbc:	0800ab3d 	.word	0x0800ab3d
 8009cc0:	0800ab4a 	.word	0x0800ab4a
 8009cc4:	0800ab78 	.word	0x0800ab78

08009cc8 <fiprintf>:
 8009cc8:	b40e      	push	{r1, r2, r3}
 8009cca:	b503      	push	{r0, r1, lr}
 8009ccc:	4601      	mov	r1, r0
 8009cce:	ab03      	add	r3, sp, #12
 8009cd0:	4805      	ldr	r0, [pc, #20]	; (8009ce8 <fiprintf+0x20>)
 8009cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd6:	6800      	ldr	r0, [r0, #0]
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	f000 f897 	bl	8009e0c <_vfiprintf_r>
 8009cde:	b002      	add	sp, #8
 8009ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ce4:	b003      	add	sp, #12
 8009ce6:	4770      	bx	lr
 8009ce8:	24000010 	.word	0x24000010

08009cec <__ascii_mbtowc>:
 8009cec:	b082      	sub	sp, #8
 8009cee:	b901      	cbnz	r1, 8009cf2 <__ascii_mbtowc+0x6>
 8009cf0:	a901      	add	r1, sp, #4
 8009cf2:	b142      	cbz	r2, 8009d06 <__ascii_mbtowc+0x1a>
 8009cf4:	b14b      	cbz	r3, 8009d0a <__ascii_mbtowc+0x1e>
 8009cf6:	7813      	ldrb	r3, [r2, #0]
 8009cf8:	600b      	str	r3, [r1, #0]
 8009cfa:	7812      	ldrb	r2, [r2, #0]
 8009cfc:	1e10      	subs	r0, r2, #0
 8009cfe:	bf18      	it	ne
 8009d00:	2001      	movne	r0, #1
 8009d02:	b002      	add	sp, #8
 8009d04:	4770      	bx	lr
 8009d06:	4610      	mov	r0, r2
 8009d08:	e7fb      	b.n	8009d02 <__ascii_mbtowc+0x16>
 8009d0a:	f06f 0001 	mvn.w	r0, #1
 8009d0e:	e7f8      	b.n	8009d02 <__ascii_mbtowc+0x16>

08009d10 <memmove>:
 8009d10:	4288      	cmp	r0, r1
 8009d12:	b510      	push	{r4, lr}
 8009d14:	eb01 0402 	add.w	r4, r1, r2
 8009d18:	d902      	bls.n	8009d20 <memmove+0x10>
 8009d1a:	4284      	cmp	r4, r0
 8009d1c:	4623      	mov	r3, r4
 8009d1e:	d807      	bhi.n	8009d30 <memmove+0x20>
 8009d20:	1e43      	subs	r3, r0, #1
 8009d22:	42a1      	cmp	r1, r4
 8009d24:	d008      	beq.n	8009d38 <memmove+0x28>
 8009d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d2e:	e7f8      	b.n	8009d22 <memmove+0x12>
 8009d30:	4402      	add	r2, r0
 8009d32:	4601      	mov	r1, r0
 8009d34:	428a      	cmp	r2, r1
 8009d36:	d100      	bne.n	8009d3a <memmove+0x2a>
 8009d38:	bd10      	pop	{r4, pc}
 8009d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d42:	e7f7      	b.n	8009d34 <memmove+0x24>

08009d44 <__malloc_lock>:
 8009d44:	4801      	ldr	r0, [pc, #4]	; (8009d4c <__malloc_lock+0x8>)
 8009d46:	f000 bc1f 	b.w	800a588 <__retarget_lock_acquire_recursive>
 8009d4a:	bf00      	nop
 8009d4c:	240003d0 	.word	0x240003d0

08009d50 <__malloc_unlock>:
 8009d50:	4801      	ldr	r0, [pc, #4]	; (8009d58 <__malloc_unlock+0x8>)
 8009d52:	f000 bc1a 	b.w	800a58a <__retarget_lock_release_recursive>
 8009d56:	bf00      	nop
 8009d58:	240003d0 	.word	0x240003d0

08009d5c <_realloc_r>:
 8009d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d60:	4680      	mov	r8, r0
 8009d62:	4614      	mov	r4, r2
 8009d64:	460e      	mov	r6, r1
 8009d66:	b921      	cbnz	r1, 8009d72 <_realloc_r+0x16>
 8009d68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	f7ff bdad 	b.w	80098cc <_malloc_r>
 8009d72:	b92a      	cbnz	r2, 8009d80 <_realloc_r+0x24>
 8009d74:	f7ff fd3e 	bl	80097f4 <_free_r>
 8009d78:	4625      	mov	r5, r4
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d80:	f000 fc6a 	bl	800a658 <_malloc_usable_size_r>
 8009d84:	4284      	cmp	r4, r0
 8009d86:	4607      	mov	r7, r0
 8009d88:	d802      	bhi.n	8009d90 <_realloc_r+0x34>
 8009d8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d8e:	d812      	bhi.n	8009db6 <_realloc_r+0x5a>
 8009d90:	4621      	mov	r1, r4
 8009d92:	4640      	mov	r0, r8
 8009d94:	f7ff fd9a 	bl	80098cc <_malloc_r>
 8009d98:	4605      	mov	r5, r0
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d0ed      	beq.n	8009d7a <_realloc_r+0x1e>
 8009d9e:	42bc      	cmp	r4, r7
 8009da0:	4622      	mov	r2, r4
 8009da2:	4631      	mov	r1, r6
 8009da4:	bf28      	it	cs
 8009da6:	463a      	movcs	r2, r7
 8009da8:	f7ff f97c 	bl	80090a4 <memcpy>
 8009dac:	4631      	mov	r1, r6
 8009dae:	4640      	mov	r0, r8
 8009db0:	f7ff fd20 	bl	80097f4 <_free_r>
 8009db4:	e7e1      	b.n	8009d7a <_realloc_r+0x1e>
 8009db6:	4635      	mov	r5, r6
 8009db8:	e7df      	b.n	8009d7a <_realloc_r+0x1e>

08009dba <__sfputc_r>:
 8009dba:	6893      	ldr	r3, [r2, #8]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	b410      	push	{r4}
 8009dc2:	6093      	str	r3, [r2, #8]
 8009dc4:	da08      	bge.n	8009dd8 <__sfputc_r+0x1e>
 8009dc6:	6994      	ldr	r4, [r2, #24]
 8009dc8:	42a3      	cmp	r3, r4
 8009dca:	db01      	blt.n	8009dd0 <__sfputc_r+0x16>
 8009dcc:	290a      	cmp	r1, #10
 8009dce:	d103      	bne.n	8009dd8 <__sfputc_r+0x1e>
 8009dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dd4:	f000 b94a 	b.w	800a06c <__swbuf_r>
 8009dd8:	6813      	ldr	r3, [r2, #0]
 8009dda:	1c58      	adds	r0, r3, #1
 8009ddc:	6010      	str	r0, [r2, #0]
 8009dde:	7019      	strb	r1, [r3, #0]
 8009de0:	4608      	mov	r0, r1
 8009de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <__sfputs_r>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	4606      	mov	r6, r0
 8009dec:	460f      	mov	r7, r1
 8009dee:	4614      	mov	r4, r2
 8009df0:	18d5      	adds	r5, r2, r3
 8009df2:	42ac      	cmp	r4, r5
 8009df4:	d101      	bne.n	8009dfa <__sfputs_r+0x12>
 8009df6:	2000      	movs	r0, #0
 8009df8:	e007      	b.n	8009e0a <__sfputs_r+0x22>
 8009dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dfe:	463a      	mov	r2, r7
 8009e00:	4630      	mov	r0, r6
 8009e02:	f7ff ffda 	bl	8009dba <__sfputc_r>
 8009e06:	1c43      	adds	r3, r0, #1
 8009e08:	d1f3      	bne.n	8009df2 <__sfputs_r+0xa>
 8009e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e0c <_vfiprintf_r>:
 8009e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e10:	460d      	mov	r5, r1
 8009e12:	b09d      	sub	sp, #116	; 0x74
 8009e14:	4614      	mov	r4, r2
 8009e16:	4698      	mov	r8, r3
 8009e18:	4606      	mov	r6, r0
 8009e1a:	b118      	cbz	r0, 8009e24 <_vfiprintf_r+0x18>
 8009e1c:	6983      	ldr	r3, [r0, #24]
 8009e1e:	b90b      	cbnz	r3, 8009e24 <_vfiprintf_r+0x18>
 8009e20:	f000 fb14 	bl	800a44c <__sinit>
 8009e24:	4b89      	ldr	r3, [pc, #548]	; (800a04c <_vfiprintf_r+0x240>)
 8009e26:	429d      	cmp	r5, r3
 8009e28:	d11b      	bne.n	8009e62 <_vfiprintf_r+0x56>
 8009e2a:	6875      	ldr	r5, [r6, #4]
 8009e2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e2e:	07d9      	lsls	r1, r3, #31
 8009e30:	d405      	bmi.n	8009e3e <_vfiprintf_r+0x32>
 8009e32:	89ab      	ldrh	r3, [r5, #12]
 8009e34:	059a      	lsls	r2, r3, #22
 8009e36:	d402      	bmi.n	8009e3e <_vfiprintf_r+0x32>
 8009e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e3a:	f000 fba5 	bl	800a588 <__retarget_lock_acquire_recursive>
 8009e3e:	89ab      	ldrh	r3, [r5, #12]
 8009e40:	071b      	lsls	r3, r3, #28
 8009e42:	d501      	bpl.n	8009e48 <_vfiprintf_r+0x3c>
 8009e44:	692b      	ldr	r3, [r5, #16]
 8009e46:	b9eb      	cbnz	r3, 8009e84 <_vfiprintf_r+0x78>
 8009e48:	4629      	mov	r1, r5
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f000 f96e 	bl	800a12c <__swsetup_r>
 8009e50:	b1c0      	cbz	r0, 8009e84 <_vfiprintf_r+0x78>
 8009e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e54:	07dc      	lsls	r4, r3, #31
 8009e56:	d50e      	bpl.n	8009e76 <_vfiprintf_r+0x6a>
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5c:	b01d      	add	sp, #116	; 0x74
 8009e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e62:	4b7b      	ldr	r3, [pc, #492]	; (800a050 <_vfiprintf_r+0x244>)
 8009e64:	429d      	cmp	r5, r3
 8009e66:	d101      	bne.n	8009e6c <_vfiprintf_r+0x60>
 8009e68:	68b5      	ldr	r5, [r6, #8]
 8009e6a:	e7df      	b.n	8009e2c <_vfiprintf_r+0x20>
 8009e6c:	4b79      	ldr	r3, [pc, #484]	; (800a054 <_vfiprintf_r+0x248>)
 8009e6e:	429d      	cmp	r5, r3
 8009e70:	bf08      	it	eq
 8009e72:	68f5      	ldreq	r5, [r6, #12]
 8009e74:	e7da      	b.n	8009e2c <_vfiprintf_r+0x20>
 8009e76:	89ab      	ldrh	r3, [r5, #12]
 8009e78:	0598      	lsls	r0, r3, #22
 8009e7a:	d4ed      	bmi.n	8009e58 <_vfiprintf_r+0x4c>
 8009e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e7e:	f000 fb84 	bl	800a58a <__retarget_lock_release_recursive>
 8009e82:	e7e9      	b.n	8009e58 <_vfiprintf_r+0x4c>
 8009e84:	2300      	movs	r3, #0
 8009e86:	9309      	str	r3, [sp, #36]	; 0x24
 8009e88:	2320      	movs	r3, #32
 8009e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e92:	2330      	movs	r3, #48	; 0x30
 8009e94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a058 <_vfiprintf_r+0x24c>
 8009e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e9c:	f04f 0901 	mov.w	r9, #1
 8009ea0:	4623      	mov	r3, r4
 8009ea2:	469a      	mov	sl, r3
 8009ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ea8:	b10a      	cbz	r2, 8009eae <_vfiprintf_r+0xa2>
 8009eaa:	2a25      	cmp	r2, #37	; 0x25
 8009eac:	d1f9      	bne.n	8009ea2 <_vfiprintf_r+0x96>
 8009eae:	ebba 0b04 	subs.w	fp, sl, r4
 8009eb2:	d00b      	beq.n	8009ecc <_vfiprintf_r+0xc0>
 8009eb4:	465b      	mov	r3, fp
 8009eb6:	4622      	mov	r2, r4
 8009eb8:	4629      	mov	r1, r5
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f7ff ff94 	bl	8009de8 <__sfputs_r>
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	f000 80aa 	beq.w	800a01a <_vfiprintf_r+0x20e>
 8009ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ec8:	445a      	add	r2, fp
 8009eca:	9209      	str	r2, [sp, #36]	; 0x24
 8009ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 80a2 	beq.w	800a01a <_vfiprintf_r+0x20e>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8009edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ee0:	f10a 0a01 	add.w	sl, sl, #1
 8009ee4:	9304      	str	r3, [sp, #16]
 8009ee6:	9307      	str	r3, [sp, #28]
 8009ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eec:	931a      	str	r3, [sp, #104]	; 0x68
 8009eee:	4654      	mov	r4, sl
 8009ef0:	2205      	movs	r2, #5
 8009ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef6:	4858      	ldr	r0, [pc, #352]	; (800a058 <_vfiprintf_r+0x24c>)
 8009ef8:	f7f6 f9fa 	bl	80002f0 <memchr>
 8009efc:	9a04      	ldr	r2, [sp, #16]
 8009efe:	b9d8      	cbnz	r0, 8009f38 <_vfiprintf_r+0x12c>
 8009f00:	06d1      	lsls	r1, r2, #27
 8009f02:	bf44      	itt	mi
 8009f04:	2320      	movmi	r3, #32
 8009f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f0a:	0713      	lsls	r3, r2, #28
 8009f0c:	bf44      	itt	mi
 8009f0e:	232b      	movmi	r3, #43	; 0x2b
 8009f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f14:	f89a 3000 	ldrb.w	r3, [sl]
 8009f18:	2b2a      	cmp	r3, #42	; 0x2a
 8009f1a:	d015      	beq.n	8009f48 <_vfiprintf_r+0x13c>
 8009f1c:	9a07      	ldr	r2, [sp, #28]
 8009f1e:	4654      	mov	r4, sl
 8009f20:	2000      	movs	r0, #0
 8009f22:	f04f 0c0a 	mov.w	ip, #10
 8009f26:	4621      	mov	r1, r4
 8009f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f2c:	3b30      	subs	r3, #48	; 0x30
 8009f2e:	2b09      	cmp	r3, #9
 8009f30:	d94e      	bls.n	8009fd0 <_vfiprintf_r+0x1c4>
 8009f32:	b1b0      	cbz	r0, 8009f62 <_vfiprintf_r+0x156>
 8009f34:	9207      	str	r2, [sp, #28]
 8009f36:	e014      	b.n	8009f62 <_vfiprintf_r+0x156>
 8009f38:	eba0 0308 	sub.w	r3, r0, r8
 8009f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8009f40:	4313      	orrs	r3, r2
 8009f42:	9304      	str	r3, [sp, #16]
 8009f44:	46a2      	mov	sl, r4
 8009f46:	e7d2      	b.n	8009eee <_vfiprintf_r+0xe2>
 8009f48:	9b03      	ldr	r3, [sp, #12]
 8009f4a:	1d19      	adds	r1, r3, #4
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	9103      	str	r1, [sp, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	bfbb      	ittet	lt
 8009f54:	425b      	neglt	r3, r3
 8009f56:	f042 0202 	orrlt.w	r2, r2, #2
 8009f5a:	9307      	strge	r3, [sp, #28]
 8009f5c:	9307      	strlt	r3, [sp, #28]
 8009f5e:	bfb8      	it	lt
 8009f60:	9204      	strlt	r2, [sp, #16]
 8009f62:	7823      	ldrb	r3, [r4, #0]
 8009f64:	2b2e      	cmp	r3, #46	; 0x2e
 8009f66:	d10c      	bne.n	8009f82 <_vfiprintf_r+0x176>
 8009f68:	7863      	ldrb	r3, [r4, #1]
 8009f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f6c:	d135      	bne.n	8009fda <_vfiprintf_r+0x1ce>
 8009f6e:	9b03      	ldr	r3, [sp, #12]
 8009f70:	1d1a      	adds	r2, r3, #4
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	9203      	str	r2, [sp, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	bfb8      	it	lt
 8009f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f7e:	3402      	adds	r4, #2
 8009f80:	9305      	str	r3, [sp, #20]
 8009f82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a068 <_vfiprintf_r+0x25c>
 8009f86:	7821      	ldrb	r1, [r4, #0]
 8009f88:	2203      	movs	r2, #3
 8009f8a:	4650      	mov	r0, sl
 8009f8c:	f7f6 f9b0 	bl	80002f0 <memchr>
 8009f90:	b140      	cbz	r0, 8009fa4 <_vfiprintf_r+0x198>
 8009f92:	2340      	movs	r3, #64	; 0x40
 8009f94:	eba0 000a 	sub.w	r0, r0, sl
 8009f98:	fa03 f000 	lsl.w	r0, r3, r0
 8009f9c:	9b04      	ldr	r3, [sp, #16]
 8009f9e:	4303      	orrs	r3, r0
 8009fa0:	3401      	adds	r4, #1
 8009fa2:	9304      	str	r3, [sp, #16]
 8009fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa8:	482c      	ldr	r0, [pc, #176]	; (800a05c <_vfiprintf_r+0x250>)
 8009faa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fae:	2206      	movs	r2, #6
 8009fb0:	f7f6 f99e 	bl	80002f0 <memchr>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d03f      	beq.n	800a038 <_vfiprintf_r+0x22c>
 8009fb8:	4b29      	ldr	r3, [pc, #164]	; (800a060 <_vfiprintf_r+0x254>)
 8009fba:	bb1b      	cbnz	r3, 800a004 <_vfiprintf_r+0x1f8>
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	3307      	adds	r3, #7
 8009fc0:	f023 0307 	bic.w	r3, r3, #7
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	9303      	str	r3, [sp, #12]
 8009fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fca:	443b      	add	r3, r7
 8009fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8009fce:	e767      	b.n	8009ea0 <_vfiprintf_r+0x94>
 8009fd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fd4:	460c      	mov	r4, r1
 8009fd6:	2001      	movs	r0, #1
 8009fd8:	e7a5      	b.n	8009f26 <_vfiprintf_r+0x11a>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	3401      	adds	r4, #1
 8009fde:	9305      	str	r3, [sp, #20]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	f04f 0c0a 	mov.w	ip, #10
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fec:	3a30      	subs	r2, #48	; 0x30
 8009fee:	2a09      	cmp	r2, #9
 8009ff0:	d903      	bls.n	8009ffa <_vfiprintf_r+0x1ee>
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0c5      	beq.n	8009f82 <_vfiprintf_r+0x176>
 8009ff6:	9105      	str	r1, [sp, #20]
 8009ff8:	e7c3      	b.n	8009f82 <_vfiprintf_r+0x176>
 8009ffa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ffe:	4604      	mov	r4, r0
 800a000:	2301      	movs	r3, #1
 800a002:	e7f0      	b.n	8009fe6 <_vfiprintf_r+0x1da>
 800a004:	ab03      	add	r3, sp, #12
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	462a      	mov	r2, r5
 800a00a:	4b16      	ldr	r3, [pc, #88]	; (800a064 <_vfiprintf_r+0x258>)
 800a00c:	a904      	add	r1, sp, #16
 800a00e:	4630      	mov	r0, r6
 800a010:	f7fd fe6e 	bl	8007cf0 <_printf_float>
 800a014:	4607      	mov	r7, r0
 800a016:	1c78      	adds	r0, r7, #1
 800a018:	d1d6      	bne.n	8009fc8 <_vfiprintf_r+0x1bc>
 800a01a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a01c:	07d9      	lsls	r1, r3, #31
 800a01e:	d405      	bmi.n	800a02c <_vfiprintf_r+0x220>
 800a020:	89ab      	ldrh	r3, [r5, #12]
 800a022:	059a      	lsls	r2, r3, #22
 800a024:	d402      	bmi.n	800a02c <_vfiprintf_r+0x220>
 800a026:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a028:	f000 faaf 	bl	800a58a <__retarget_lock_release_recursive>
 800a02c:	89ab      	ldrh	r3, [r5, #12]
 800a02e:	065b      	lsls	r3, r3, #25
 800a030:	f53f af12 	bmi.w	8009e58 <_vfiprintf_r+0x4c>
 800a034:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a036:	e711      	b.n	8009e5c <_vfiprintf_r+0x50>
 800a038:	ab03      	add	r3, sp, #12
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	462a      	mov	r2, r5
 800a03e:	4b09      	ldr	r3, [pc, #36]	; (800a064 <_vfiprintf_r+0x258>)
 800a040:	a904      	add	r1, sp, #16
 800a042:	4630      	mov	r0, r6
 800a044:	f7fe f8e0 	bl	8008208 <_printf_i>
 800a048:	e7e4      	b.n	800a014 <_vfiprintf_r+0x208>
 800a04a:	bf00      	nop
 800a04c:	0800aca4 	.word	0x0800aca4
 800a050:	0800acc4 	.word	0x0800acc4
 800a054:	0800ac84 	.word	0x0800ac84
 800a058:	0800ab2c 	.word	0x0800ab2c
 800a05c:	0800ab36 	.word	0x0800ab36
 800a060:	08007cf1 	.word	0x08007cf1
 800a064:	08009de9 	.word	0x08009de9
 800a068:	0800ab32 	.word	0x0800ab32

0800a06c <__swbuf_r>:
 800a06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06e:	460e      	mov	r6, r1
 800a070:	4614      	mov	r4, r2
 800a072:	4605      	mov	r5, r0
 800a074:	b118      	cbz	r0, 800a07e <__swbuf_r+0x12>
 800a076:	6983      	ldr	r3, [r0, #24]
 800a078:	b90b      	cbnz	r3, 800a07e <__swbuf_r+0x12>
 800a07a:	f000 f9e7 	bl	800a44c <__sinit>
 800a07e:	4b21      	ldr	r3, [pc, #132]	; (800a104 <__swbuf_r+0x98>)
 800a080:	429c      	cmp	r4, r3
 800a082:	d12b      	bne.n	800a0dc <__swbuf_r+0x70>
 800a084:	686c      	ldr	r4, [r5, #4]
 800a086:	69a3      	ldr	r3, [r4, #24]
 800a088:	60a3      	str	r3, [r4, #8]
 800a08a:	89a3      	ldrh	r3, [r4, #12]
 800a08c:	071a      	lsls	r2, r3, #28
 800a08e:	d52f      	bpl.n	800a0f0 <__swbuf_r+0x84>
 800a090:	6923      	ldr	r3, [r4, #16]
 800a092:	b36b      	cbz	r3, 800a0f0 <__swbuf_r+0x84>
 800a094:	6923      	ldr	r3, [r4, #16]
 800a096:	6820      	ldr	r0, [r4, #0]
 800a098:	1ac0      	subs	r0, r0, r3
 800a09a:	6963      	ldr	r3, [r4, #20]
 800a09c:	b2f6      	uxtb	r6, r6
 800a09e:	4283      	cmp	r3, r0
 800a0a0:	4637      	mov	r7, r6
 800a0a2:	dc04      	bgt.n	800a0ae <__swbuf_r+0x42>
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f000 f93c 	bl	800a324 <_fflush_r>
 800a0ac:	bb30      	cbnz	r0, 800a0fc <__swbuf_r+0x90>
 800a0ae:	68a3      	ldr	r3, [r4, #8]
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	60a3      	str	r3, [r4, #8]
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	1c5a      	adds	r2, r3, #1
 800a0b8:	6022      	str	r2, [r4, #0]
 800a0ba:	701e      	strb	r6, [r3, #0]
 800a0bc:	6963      	ldr	r3, [r4, #20]
 800a0be:	3001      	adds	r0, #1
 800a0c0:	4283      	cmp	r3, r0
 800a0c2:	d004      	beq.n	800a0ce <__swbuf_r+0x62>
 800a0c4:	89a3      	ldrh	r3, [r4, #12]
 800a0c6:	07db      	lsls	r3, r3, #31
 800a0c8:	d506      	bpl.n	800a0d8 <__swbuf_r+0x6c>
 800a0ca:	2e0a      	cmp	r6, #10
 800a0cc:	d104      	bne.n	800a0d8 <__swbuf_r+0x6c>
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	f000 f927 	bl	800a324 <_fflush_r>
 800a0d6:	b988      	cbnz	r0, 800a0fc <__swbuf_r+0x90>
 800a0d8:	4638      	mov	r0, r7
 800a0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0dc:	4b0a      	ldr	r3, [pc, #40]	; (800a108 <__swbuf_r+0x9c>)
 800a0de:	429c      	cmp	r4, r3
 800a0e0:	d101      	bne.n	800a0e6 <__swbuf_r+0x7a>
 800a0e2:	68ac      	ldr	r4, [r5, #8]
 800a0e4:	e7cf      	b.n	800a086 <__swbuf_r+0x1a>
 800a0e6:	4b09      	ldr	r3, [pc, #36]	; (800a10c <__swbuf_r+0xa0>)
 800a0e8:	429c      	cmp	r4, r3
 800a0ea:	bf08      	it	eq
 800a0ec:	68ec      	ldreq	r4, [r5, #12]
 800a0ee:	e7ca      	b.n	800a086 <__swbuf_r+0x1a>
 800a0f0:	4621      	mov	r1, r4
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	f000 f81a 	bl	800a12c <__swsetup_r>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d0cb      	beq.n	800a094 <__swbuf_r+0x28>
 800a0fc:	f04f 37ff 	mov.w	r7, #4294967295
 800a100:	e7ea      	b.n	800a0d8 <__swbuf_r+0x6c>
 800a102:	bf00      	nop
 800a104:	0800aca4 	.word	0x0800aca4
 800a108:	0800acc4 	.word	0x0800acc4
 800a10c:	0800ac84 	.word	0x0800ac84

0800a110 <__ascii_wctomb>:
 800a110:	b149      	cbz	r1, 800a126 <__ascii_wctomb+0x16>
 800a112:	2aff      	cmp	r2, #255	; 0xff
 800a114:	bf85      	ittet	hi
 800a116:	238a      	movhi	r3, #138	; 0x8a
 800a118:	6003      	strhi	r3, [r0, #0]
 800a11a:	700a      	strbls	r2, [r1, #0]
 800a11c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a120:	bf98      	it	ls
 800a122:	2001      	movls	r0, #1
 800a124:	4770      	bx	lr
 800a126:	4608      	mov	r0, r1
 800a128:	4770      	bx	lr
	...

0800a12c <__swsetup_r>:
 800a12c:	4b32      	ldr	r3, [pc, #200]	; (800a1f8 <__swsetup_r+0xcc>)
 800a12e:	b570      	push	{r4, r5, r6, lr}
 800a130:	681d      	ldr	r5, [r3, #0]
 800a132:	4606      	mov	r6, r0
 800a134:	460c      	mov	r4, r1
 800a136:	b125      	cbz	r5, 800a142 <__swsetup_r+0x16>
 800a138:	69ab      	ldr	r3, [r5, #24]
 800a13a:	b913      	cbnz	r3, 800a142 <__swsetup_r+0x16>
 800a13c:	4628      	mov	r0, r5
 800a13e:	f000 f985 	bl	800a44c <__sinit>
 800a142:	4b2e      	ldr	r3, [pc, #184]	; (800a1fc <__swsetup_r+0xd0>)
 800a144:	429c      	cmp	r4, r3
 800a146:	d10f      	bne.n	800a168 <__swsetup_r+0x3c>
 800a148:	686c      	ldr	r4, [r5, #4]
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a150:	0719      	lsls	r1, r3, #28
 800a152:	d42c      	bmi.n	800a1ae <__swsetup_r+0x82>
 800a154:	06dd      	lsls	r5, r3, #27
 800a156:	d411      	bmi.n	800a17c <__swsetup_r+0x50>
 800a158:	2309      	movs	r3, #9
 800a15a:	6033      	str	r3, [r6, #0]
 800a15c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a160:	81a3      	strh	r3, [r4, #12]
 800a162:	f04f 30ff 	mov.w	r0, #4294967295
 800a166:	e03e      	b.n	800a1e6 <__swsetup_r+0xba>
 800a168:	4b25      	ldr	r3, [pc, #148]	; (800a200 <__swsetup_r+0xd4>)
 800a16a:	429c      	cmp	r4, r3
 800a16c:	d101      	bne.n	800a172 <__swsetup_r+0x46>
 800a16e:	68ac      	ldr	r4, [r5, #8]
 800a170:	e7eb      	b.n	800a14a <__swsetup_r+0x1e>
 800a172:	4b24      	ldr	r3, [pc, #144]	; (800a204 <__swsetup_r+0xd8>)
 800a174:	429c      	cmp	r4, r3
 800a176:	bf08      	it	eq
 800a178:	68ec      	ldreq	r4, [r5, #12]
 800a17a:	e7e6      	b.n	800a14a <__swsetup_r+0x1e>
 800a17c:	0758      	lsls	r0, r3, #29
 800a17e:	d512      	bpl.n	800a1a6 <__swsetup_r+0x7a>
 800a180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a182:	b141      	cbz	r1, 800a196 <__swsetup_r+0x6a>
 800a184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a188:	4299      	cmp	r1, r3
 800a18a:	d002      	beq.n	800a192 <__swsetup_r+0x66>
 800a18c:	4630      	mov	r0, r6
 800a18e:	f7ff fb31 	bl	80097f4 <_free_r>
 800a192:	2300      	movs	r3, #0
 800a194:	6363      	str	r3, [r4, #52]	; 0x34
 800a196:	89a3      	ldrh	r3, [r4, #12]
 800a198:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a19c:	81a3      	strh	r3, [r4, #12]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	6063      	str	r3, [r4, #4]
 800a1a2:	6923      	ldr	r3, [r4, #16]
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	f043 0308 	orr.w	r3, r3, #8
 800a1ac:	81a3      	strh	r3, [r4, #12]
 800a1ae:	6923      	ldr	r3, [r4, #16]
 800a1b0:	b94b      	cbnz	r3, 800a1c6 <__swsetup_r+0x9a>
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1bc:	d003      	beq.n	800a1c6 <__swsetup_r+0x9a>
 800a1be:	4621      	mov	r1, r4
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f000 fa09 	bl	800a5d8 <__smakebuf_r>
 800a1c6:	89a0      	ldrh	r0, [r4, #12]
 800a1c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1cc:	f010 0301 	ands.w	r3, r0, #1
 800a1d0:	d00a      	beq.n	800a1e8 <__swsetup_r+0xbc>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60a3      	str	r3, [r4, #8]
 800a1d6:	6963      	ldr	r3, [r4, #20]
 800a1d8:	425b      	negs	r3, r3
 800a1da:	61a3      	str	r3, [r4, #24]
 800a1dc:	6923      	ldr	r3, [r4, #16]
 800a1de:	b943      	cbnz	r3, 800a1f2 <__swsetup_r+0xc6>
 800a1e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1e4:	d1ba      	bne.n	800a15c <__swsetup_r+0x30>
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}
 800a1e8:	0781      	lsls	r1, r0, #30
 800a1ea:	bf58      	it	pl
 800a1ec:	6963      	ldrpl	r3, [r4, #20]
 800a1ee:	60a3      	str	r3, [r4, #8]
 800a1f0:	e7f4      	b.n	800a1dc <__swsetup_r+0xb0>
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	e7f7      	b.n	800a1e6 <__swsetup_r+0xba>
 800a1f6:	bf00      	nop
 800a1f8:	24000010 	.word	0x24000010
 800a1fc:	0800aca4 	.word	0x0800aca4
 800a200:	0800acc4 	.word	0x0800acc4
 800a204:	0800ac84 	.word	0x0800ac84

0800a208 <abort>:
 800a208:	b508      	push	{r3, lr}
 800a20a:	2006      	movs	r0, #6
 800a20c:	f000 fa54 	bl	800a6b8 <raise>
 800a210:	2001      	movs	r0, #1
 800a212:	f7f7 f949 	bl	80014a8 <_exit>
	...

0800a218 <__sflush_r>:
 800a218:	898a      	ldrh	r2, [r1, #12]
 800a21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a21e:	4605      	mov	r5, r0
 800a220:	0710      	lsls	r0, r2, #28
 800a222:	460c      	mov	r4, r1
 800a224:	d458      	bmi.n	800a2d8 <__sflush_r+0xc0>
 800a226:	684b      	ldr	r3, [r1, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	dc05      	bgt.n	800a238 <__sflush_r+0x20>
 800a22c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a22e:	2b00      	cmp	r3, #0
 800a230:	dc02      	bgt.n	800a238 <__sflush_r+0x20>
 800a232:	2000      	movs	r0, #0
 800a234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a23a:	2e00      	cmp	r6, #0
 800a23c:	d0f9      	beq.n	800a232 <__sflush_r+0x1a>
 800a23e:	2300      	movs	r3, #0
 800a240:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a244:	682f      	ldr	r7, [r5, #0]
 800a246:	602b      	str	r3, [r5, #0]
 800a248:	d032      	beq.n	800a2b0 <__sflush_r+0x98>
 800a24a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	075a      	lsls	r2, r3, #29
 800a250:	d505      	bpl.n	800a25e <__sflush_r+0x46>
 800a252:	6863      	ldr	r3, [r4, #4]
 800a254:	1ac0      	subs	r0, r0, r3
 800a256:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a258:	b10b      	cbz	r3, 800a25e <__sflush_r+0x46>
 800a25a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a25c:	1ac0      	subs	r0, r0, r3
 800a25e:	2300      	movs	r3, #0
 800a260:	4602      	mov	r2, r0
 800a262:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a264:	6a21      	ldr	r1, [r4, #32]
 800a266:	4628      	mov	r0, r5
 800a268:	47b0      	blx	r6
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	d106      	bne.n	800a27e <__sflush_r+0x66>
 800a270:	6829      	ldr	r1, [r5, #0]
 800a272:	291d      	cmp	r1, #29
 800a274:	d82c      	bhi.n	800a2d0 <__sflush_r+0xb8>
 800a276:	4a2a      	ldr	r2, [pc, #168]	; (800a320 <__sflush_r+0x108>)
 800a278:	40ca      	lsrs	r2, r1
 800a27a:	07d6      	lsls	r6, r2, #31
 800a27c:	d528      	bpl.n	800a2d0 <__sflush_r+0xb8>
 800a27e:	2200      	movs	r2, #0
 800a280:	6062      	str	r2, [r4, #4]
 800a282:	04d9      	lsls	r1, r3, #19
 800a284:	6922      	ldr	r2, [r4, #16]
 800a286:	6022      	str	r2, [r4, #0]
 800a288:	d504      	bpl.n	800a294 <__sflush_r+0x7c>
 800a28a:	1c42      	adds	r2, r0, #1
 800a28c:	d101      	bne.n	800a292 <__sflush_r+0x7a>
 800a28e:	682b      	ldr	r3, [r5, #0]
 800a290:	b903      	cbnz	r3, 800a294 <__sflush_r+0x7c>
 800a292:	6560      	str	r0, [r4, #84]	; 0x54
 800a294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a296:	602f      	str	r7, [r5, #0]
 800a298:	2900      	cmp	r1, #0
 800a29a:	d0ca      	beq.n	800a232 <__sflush_r+0x1a>
 800a29c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2a0:	4299      	cmp	r1, r3
 800a2a2:	d002      	beq.n	800a2aa <__sflush_r+0x92>
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	f7ff faa5 	bl	80097f4 <_free_r>
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a2ae:	e7c1      	b.n	800a234 <__sflush_r+0x1c>
 800a2b0:	6a21      	ldr	r1, [r4, #32]
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	47b0      	blx	r6
 800a2b8:	1c41      	adds	r1, r0, #1
 800a2ba:	d1c7      	bne.n	800a24c <__sflush_r+0x34>
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d0c4      	beq.n	800a24c <__sflush_r+0x34>
 800a2c2:	2b1d      	cmp	r3, #29
 800a2c4:	d001      	beq.n	800a2ca <__sflush_r+0xb2>
 800a2c6:	2b16      	cmp	r3, #22
 800a2c8:	d101      	bne.n	800a2ce <__sflush_r+0xb6>
 800a2ca:	602f      	str	r7, [r5, #0]
 800a2cc:	e7b1      	b.n	800a232 <__sflush_r+0x1a>
 800a2ce:	89a3      	ldrh	r3, [r4, #12]
 800a2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2d4:	81a3      	strh	r3, [r4, #12]
 800a2d6:	e7ad      	b.n	800a234 <__sflush_r+0x1c>
 800a2d8:	690f      	ldr	r7, [r1, #16]
 800a2da:	2f00      	cmp	r7, #0
 800a2dc:	d0a9      	beq.n	800a232 <__sflush_r+0x1a>
 800a2de:	0793      	lsls	r3, r2, #30
 800a2e0:	680e      	ldr	r6, [r1, #0]
 800a2e2:	bf08      	it	eq
 800a2e4:	694b      	ldreq	r3, [r1, #20]
 800a2e6:	600f      	str	r7, [r1, #0]
 800a2e8:	bf18      	it	ne
 800a2ea:	2300      	movne	r3, #0
 800a2ec:	eba6 0807 	sub.w	r8, r6, r7
 800a2f0:	608b      	str	r3, [r1, #8]
 800a2f2:	f1b8 0f00 	cmp.w	r8, #0
 800a2f6:	dd9c      	ble.n	800a232 <__sflush_r+0x1a>
 800a2f8:	6a21      	ldr	r1, [r4, #32]
 800a2fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2fc:	4643      	mov	r3, r8
 800a2fe:	463a      	mov	r2, r7
 800a300:	4628      	mov	r0, r5
 800a302:	47b0      	blx	r6
 800a304:	2800      	cmp	r0, #0
 800a306:	dc06      	bgt.n	800a316 <__sflush_r+0xfe>
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a30e:	81a3      	strh	r3, [r4, #12]
 800a310:	f04f 30ff 	mov.w	r0, #4294967295
 800a314:	e78e      	b.n	800a234 <__sflush_r+0x1c>
 800a316:	4407      	add	r7, r0
 800a318:	eba8 0800 	sub.w	r8, r8, r0
 800a31c:	e7e9      	b.n	800a2f2 <__sflush_r+0xda>
 800a31e:	bf00      	nop
 800a320:	20400001 	.word	0x20400001

0800a324 <_fflush_r>:
 800a324:	b538      	push	{r3, r4, r5, lr}
 800a326:	690b      	ldr	r3, [r1, #16]
 800a328:	4605      	mov	r5, r0
 800a32a:	460c      	mov	r4, r1
 800a32c:	b913      	cbnz	r3, 800a334 <_fflush_r+0x10>
 800a32e:	2500      	movs	r5, #0
 800a330:	4628      	mov	r0, r5
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	b118      	cbz	r0, 800a33e <_fflush_r+0x1a>
 800a336:	6983      	ldr	r3, [r0, #24]
 800a338:	b90b      	cbnz	r3, 800a33e <_fflush_r+0x1a>
 800a33a:	f000 f887 	bl	800a44c <__sinit>
 800a33e:	4b14      	ldr	r3, [pc, #80]	; (800a390 <_fflush_r+0x6c>)
 800a340:	429c      	cmp	r4, r3
 800a342:	d11b      	bne.n	800a37c <_fflush_r+0x58>
 800a344:	686c      	ldr	r4, [r5, #4]
 800a346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d0ef      	beq.n	800a32e <_fflush_r+0xa>
 800a34e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a350:	07d0      	lsls	r0, r2, #31
 800a352:	d404      	bmi.n	800a35e <_fflush_r+0x3a>
 800a354:	0599      	lsls	r1, r3, #22
 800a356:	d402      	bmi.n	800a35e <_fflush_r+0x3a>
 800a358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a35a:	f000 f915 	bl	800a588 <__retarget_lock_acquire_recursive>
 800a35e:	4628      	mov	r0, r5
 800a360:	4621      	mov	r1, r4
 800a362:	f7ff ff59 	bl	800a218 <__sflush_r>
 800a366:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a368:	07da      	lsls	r2, r3, #31
 800a36a:	4605      	mov	r5, r0
 800a36c:	d4e0      	bmi.n	800a330 <_fflush_r+0xc>
 800a36e:	89a3      	ldrh	r3, [r4, #12]
 800a370:	059b      	lsls	r3, r3, #22
 800a372:	d4dd      	bmi.n	800a330 <_fflush_r+0xc>
 800a374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a376:	f000 f908 	bl	800a58a <__retarget_lock_release_recursive>
 800a37a:	e7d9      	b.n	800a330 <_fflush_r+0xc>
 800a37c:	4b05      	ldr	r3, [pc, #20]	; (800a394 <_fflush_r+0x70>)
 800a37e:	429c      	cmp	r4, r3
 800a380:	d101      	bne.n	800a386 <_fflush_r+0x62>
 800a382:	68ac      	ldr	r4, [r5, #8]
 800a384:	e7df      	b.n	800a346 <_fflush_r+0x22>
 800a386:	4b04      	ldr	r3, [pc, #16]	; (800a398 <_fflush_r+0x74>)
 800a388:	429c      	cmp	r4, r3
 800a38a:	bf08      	it	eq
 800a38c:	68ec      	ldreq	r4, [r5, #12]
 800a38e:	e7da      	b.n	800a346 <_fflush_r+0x22>
 800a390:	0800aca4 	.word	0x0800aca4
 800a394:	0800acc4 	.word	0x0800acc4
 800a398:	0800ac84 	.word	0x0800ac84

0800a39c <std>:
 800a39c:	2300      	movs	r3, #0
 800a39e:	b510      	push	{r4, lr}
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a3a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3aa:	6083      	str	r3, [r0, #8]
 800a3ac:	8181      	strh	r1, [r0, #12]
 800a3ae:	6643      	str	r3, [r0, #100]	; 0x64
 800a3b0:	81c2      	strh	r2, [r0, #14]
 800a3b2:	6183      	str	r3, [r0, #24]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	2208      	movs	r2, #8
 800a3b8:	305c      	adds	r0, #92	; 0x5c
 800a3ba:	f7fd fc01 	bl	8007bc0 <memset>
 800a3be:	4b05      	ldr	r3, [pc, #20]	; (800a3d4 <std+0x38>)
 800a3c0:	6263      	str	r3, [r4, #36]	; 0x24
 800a3c2:	4b05      	ldr	r3, [pc, #20]	; (800a3d8 <std+0x3c>)
 800a3c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3c6:	4b05      	ldr	r3, [pc, #20]	; (800a3dc <std+0x40>)
 800a3c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3ca:	4b05      	ldr	r3, [pc, #20]	; (800a3e0 <std+0x44>)
 800a3cc:	6224      	str	r4, [r4, #32]
 800a3ce:	6323      	str	r3, [r4, #48]	; 0x30
 800a3d0:	bd10      	pop	{r4, pc}
 800a3d2:	bf00      	nop
 800a3d4:	0800a6f1 	.word	0x0800a6f1
 800a3d8:	0800a713 	.word	0x0800a713
 800a3dc:	0800a74b 	.word	0x0800a74b
 800a3e0:	0800a76f 	.word	0x0800a76f

0800a3e4 <_cleanup_r>:
 800a3e4:	4901      	ldr	r1, [pc, #4]	; (800a3ec <_cleanup_r+0x8>)
 800a3e6:	f000 b8af 	b.w	800a548 <_fwalk_reent>
 800a3ea:	bf00      	nop
 800a3ec:	0800a325 	.word	0x0800a325

0800a3f0 <__sfmoreglue>:
 800a3f0:	b570      	push	{r4, r5, r6, lr}
 800a3f2:	2268      	movs	r2, #104	; 0x68
 800a3f4:	1e4d      	subs	r5, r1, #1
 800a3f6:	4355      	muls	r5, r2
 800a3f8:	460e      	mov	r6, r1
 800a3fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a3fe:	f7ff fa65 	bl	80098cc <_malloc_r>
 800a402:	4604      	mov	r4, r0
 800a404:	b140      	cbz	r0, 800a418 <__sfmoreglue+0x28>
 800a406:	2100      	movs	r1, #0
 800a408:	e9c0 1600 	strd	r1, r6, [r0]
 800a40c:	300c      	adds	r0, #12
 800a40e:	60a0      	str	r0, [r4, #8]
 800a410:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a414:	f7fd fbd4 	bl	8007bc0 <memset>
 800a418:	4620      	mov	r0, r4
 800a41a:	bd70      	pop	{r4, r5, r6, pc}

0800a41c <__sfp_lock_acquire>:
 800a41c:	4801      	ldr	r0, [pc, #4]	; (800a424 <__sfp_lock_acquire+0x8>)
 800a41e:	f000 b8b3 	b.w	800a588 <__retarget_lock_acquire_recursive>
 800a422:	bf00      	nop
 800a424:	240003d1 	.word	0x240003d1

0800a428 <__sfp_lock_release>:
 800a428:	4801      	ldr	r0, [pc, #4]	; (800a430 <__sfp_lock_release+0x8>)
 800a42a:	f000 b8ae 	b.w	800a58a <__retarget_lock_release_recursive>
 800a42e:	bf00      	nop
 800a430:	240003d1 	.word	0x240003d1

0800a434 <__sinit_lock_acquire>:
 800a434:	4801      	ldr	r0, [pc, #4]	; (800a43c <__sinit_lock_acquire+0x8>)
 800a436:	f000 b8a7 	b.w	800a588 <__retarget_lock_acquire_recursive>
 800a43a:	bf00      	nop
 800a43c:	240003d2 	.word	0x240003d2

0800a440 <__sinit_lock_release>:
 800a440:	4801      	ldr	r0, [pc, #4]	; (800a448 <__sinit_lock_release+0x8>)
 800a442:	f000 b8a2 	b.w	800a58a <__retarget_lock_release_recursive>
 800a446:	bf00      	nop
 800a448:	240003d2 	.word	0x240003d2

0800a44c <__sinit>:
 800a44c:	b510      	push	{r4, lr}
 800a44e:	4604      	mov	r4, r0
 800a450:	f7ff fff0 	bl	800a434 <__sinit_lock_acquire>
 800a454:	69a3      	ldr	r3, [r4, #24]
 800a456:	b11b      	cbz	r3, 800a460 <__sinit+0x14>
 800a458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a45c:	f7ff bff0 	b.w	800a440 <__sinit_lock_release>
 800a460:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a464:	6523      	str	r3, [r4, #80]	; 0x50
 800a466:	4b13      	ldr	r3, [pc, #76]	; (800a4b4 <__sinit+0x68>)
 800a468:	4a13      	ldr	r2, [pc, #76]	; (800a4b8 <__sinit+0x6c>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a46e:	42a3      	cmp	r3, r4
 800a470:	bf04      	itt	eq
 800a472:	2301      	moveq	r3, #1
 800a474:	61a3      	streq	r3, [r4, #24]
 800a476:	4620      	mov	r0, r4
 800a478:	f000 f820 	bl	800a4bc <__sfp>
 800a47c:	6060      	str	r0, [r4, #4]
 800a47e:	4620      	mov	r0, r4
 800a480:	f000 f81c 	bl	800a4bc <__sfp>
 800a484:	60a0      	str	r0, [r4, #8]
 800a486:	4620      	mov	r0, r4
 800a488:	f000 f818 	bl	800a4bc <__sfp>
 800a48c:	2200      	movs	r2, #0
 800a48e:	60e0      	str	r0, [r4, #12]
 800a490:	2104      	movs	r1, #4
 800a492:	6860      	ldr	r0, [r4, #4]
 800a494:	f7ff ff82 	bl	800a39c <std>
 800a498:	68a0      	ldr	r0, [r4, #8]
 800a49a:	2201      	movs	r2, #1
 800a49c:	2109      	movs	r1, #9
 800a49e:	f7ff ff7d 	bl	800a39c <std>
 800a4a2:	68e0      	ldr	r0, [r4, #12]
 800a4a4:	2202      	movs	r2, #2
 800a4a6:	2112      	movs	r1, #18
 800a4a8:	f7ff ff78 	bl	800a39c <std>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	61a3      	str	r3, [r4, #24]
 800a4b0:	e7d2      	b.n	800a458 <__sinit+0xc>
 800a4b2:	bf00      	nop
 800a4b4:	0800a90c 	.word	0x0800a90c
 800a4b8:	0800a3e5 	.word	0x0800a3e5

0800a4bc <__sfp>:
 800a4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4be:	4607      	mov	r7, r0
 800a4c0:	f7ff ffac 	bl	800a41c <__sfp_lock_acquire>
 800a4c4:	4b1e      	ldr	r3, [pc, #120]	; (800a540 <__sfp+0x84>)
 800a4c6:	681e      	ldr	r6, [r3, #0]
 800a4c8:	69b3      	ldr	r3, [r6, #24]
 800a4ca:	b913      	cbnz	r3, 800a4d2 <__sfp+0x16>
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	f7ff ffbd 	bl	800a44c <__sinit>
 800a4d2:	3648      	adds	r6, #72	; 0x48
 800a4d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	d503      	bpl.n	800a4e4 <__sfp+0x28>
 800a4dc:	6833      	ldr	r3, [r6, #0]
 800a4de:	b30b      	cbz	r3, 800a524 <__sfp+0x68>
 800a4e0:	6836      	ldr	r6, [r6, #0]
 800a4e2:	e7f7      	b.n	800a4d4 <__sfp+0x18>
 800a4e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a4e8:	b9d5      	cbnz	r5, 800a520 <__sfp+0x64>
 800a4ea:	4b16      	ldr	r3, [pc, #88]	; (800a544 <__sfp+0x88>)
 800a4ec:	60e3      	str	r3, [r4, #12]
 800a4ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a4f2:	6665      	str	r5, [r4, #100]	; 0x64
 800a4f4:	f000 f847 	bl	800a586 <__retarget_lock_init_recursive>
 800a4f8:	f7ff ff96 	bl	800a428 <__sfp_lock_release>
 800a4fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a500:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a504:	6025      	str	r5, [r4, #0]
 800a506:	61a5      	str	r5, [r4, #24]
 800a508:	2208      	movs	r2, #8
 800a50a:	4629      	mov	r1, r5
 800a50c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a510:	f7fd fb56 	bl	8007bc0 <memset>
 800a514:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a518:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a51c:	4620      	mov	r0, r4
 800a51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a520:	3468      	adds	r4, #104	; 0x68
 800a522:	e7d9      	b.n	800a4d8 <__sfp+0x1c>
 800a524:	2104      	movs	r1, #4
 800a526:	4638      	mov	r0, r7
 800a528:	f7ff ff62 	bl	800a3f0 <__sfmoreglue>
 800a52c:	4604      	mov	r4, r0
 800a52e:	6030      	str	r0, [r6, #0]
 800a530:	2800      	cmp	r0, #0
 800a532:	d1d5      	bne.n	800a4e0 <__sfp+0x24>
 800a534:	f7ff ff78 	bl	800a428 <__sfp_lock_release>
 800a538:	230c      	movs	r3, #12
 800a53a:	603b      	str	r3, [r7, #0]
 800a53c:	e7ee      	b.n	800a51c <__sfp+0x60>
 800a53e:	bf00      	nop
 800a540:	0800a90c 	.word	0x0800a90c
 800a544:	ffff0001 	.word	0xffff0001

0800a548 <_fwalk_reent>:
 800a548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a54c:	4606      	mov	r6, r0
 800a54e:	4688      	mov	r8, r1
 800a550:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a554:	2700      	movs	r7, #0
 800a556:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a55a:	f1b9 0901 	subs.w	r9, r9, #1
 800a55e:	d505      	bpl.n	800a56c <_fwalk_reent+0x24>
 800a560:	6824      	ldr	r4, [r4, #0]
 800a562:	2c00      	cmp	r4, #0
 800a564:	d1f7      	bne.n	800a556 <_fwalk_reent+0xe>
 800a566:	4638      	mov	r0, r7
 800a568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a56c:	89ab      	ldrh	r3, [r5, #12]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d907      	bls.n	800a582 <_fwalk_reent+0x3a>
 800a572:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a576:	3301      	adds	r3, #1
 800a578:	d003      	beq.n	800a582 <_fwalk_reent+0x3a>
 800a57a:	4629      	mov	r1, r5
 800a57c:	4630      	mov	r0, r6
 800a57e:	47c0      	blx	r8
 800a580:	4307      	orrs	r7, r0
 800a582:	3568      	adds	r5, #104	; 0x68
 800a584:	e7e9      	b.n	800a55a <_fwalk_reent+0x12>

0800a586 <__retarget_lock_init_recursive>:
 800a586:	4770      	bx	lr

0800a588 <__retarget_lock_acquire_recursive>:
 800a588:	4770      	bx	lr

0800a58a <__retarget_lock_release_recursive>:
 800a58a:	4770      	bx	lr

0800a58c <__swhatbuf_r>:
 800a58c:	b570      	push	{r4, r5, r6, lr}
 800a58e:	460e      	mov	r6, r1
 800a590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a594:	2900      	cmp	r1, #0
 800a596:	b096      	sub	sp, #88	; 0x58
 800a598:	4614      	mov	r4, r2
 800a59a:	461d      	mov	r5, r3
 800a59c:	da08      	bge.n	800a5b0 <__swhatbuf_r+0x24>
 800a59e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	602a      	str	r2, [r5, #0]
 800a5a6:	061a      	lsls	r2, r3, #24
 800a5a8:	d410      	bmi.n	800a5cc <__swhatbuf_r+0x40>
 800a5aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ae:	e00e      	b.n	800a5ce <__swhatbuf_r+0x42>
 800a5b0:	466a      	mov	r2, sp
 800a5b2:	f000 f903 	bl	800a7bc <_fstat_r>
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	dbf1      	blt.n	800a59e <__swhatbuf_r+0x12>
 800a5ba:	9a01      	ldr	r2, [sp, #4]
 800a5bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5c4:	425a      	negs	r2, r3
 800a5c6:	415a      	adcs	r2, r3
 800a5c8:	602a      	str	r2, [r5, #0]
 800a5ca:	e7ee      	b.n	800a5aa <__swhatbuf_r+0x1e>
 800a5cc:	2340      	movs	r3, #64	; 0x40
 800a5ce:	2000      	movs	r0, #0
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	b016      	add	sp, #88	; 0x58
 800a5d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a5d8 <__smakebuf_r>:
 800a5d8:	898b      	ldrh	r3, [r1, #12]
 800a5da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5dc:	079d      	lsls	r5, r3, #30
 800a5de:	4606      	mov	r6, r0
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	d507      	bpl.n	800a5f4 <__smakebuf_r+0x1c>
 800a5e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	6123      	str	r3, [r4, #16]
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	6163      	str	r3, [r4, #20]
 800a5f0:	b002      	add	sp, #8
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	ab01      	add	r3, sp, #4
 800a5f6:	466a      	mov	r2, sp
 800a5f8:	f7ff ffc8 	bl	800a58c <__swhatbuf_r>
 800a5fc:	9900      	ldr	r1, [sp, #0]
 800a5fe:	4605      	mov	r5, r0
 800a600:	4630      	mov	r0, r6
 800a602:	f7ff f963 	bl	80098cc <_malloc_r>
 800a606:	b948      	cbnz	r0, 800a61c <__smakebuf_r+0x44>
 800a608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a60c:	059a      	lsls	r2, r3, #22
 800a60e:	d4ef      	bmi.n	800a5f0 <__smakebuf_r+0x18>
 800a610:	f023 0303 	bic.w	r3, r3, #3
 800a614:	f043 0302 	orr.w	r3, r3, #2
 800a618:	81a3      	strh	r3, [r4, #12]
 800a61a:	e7e3      	b.n	800a5e4 <__smakebuf_r+0xc>
 800a61c:	4b0d      	ldr	r3, [pc, #52]	; (800a654 <__smakebuf_r+0x7c>)
 800a61e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a620:	89a3      	ldrh	r3, [r4, #12]
 800a622:	6020      	str	r0, [r4, #0]
 800a624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a628:	81a3      	strh	r3, [r4, #12]
 800a62a:	9b00      	ldr	r3, [sp, #0]
 800a62c:	6163      	str	r3, [r4, #20]
 800a62e:	9b01      	ldr	r3, [sp, #4]
 800a630:	6120      	str	r0, [r4, #16]
 800a632:	b15b      	cbz	r3, 800a64c <__smakebuf_r+0x74>
 800a634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a638:	4630      	mov	r0, r6
 800a63a:	f000 f8d1 	bl	800a7e0 <_isatty_r>
 800a63e:	b128      	cbz	r0, 800a64c <__smakebuf_r+0x74>
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	f023 0303 	bic.w	r3, r3, #3
 800a646:	f043 0301 	orr.w	r3, r3, #1
 800a64a:	81a3      	strh	r3, [r4, #12]
 800a64c:	89a0      	ldrh	r0, [r4, #12]
 800a64e:	4305      	orrs	r5, r0
 800a650:	81a5      	strh	r5, [r4, #12]
 800a652:	e7cd      	b.n	800a5f0 <__smakebuf_r+0x18>
 800a654:	0800a3e5 	.word	0x0800a3e5

0800a658 <_malloc_usable_size_r>:
 800a658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a65c:	1f18      	subs	r0, r3, #4
 800a65e:	2b00      	cmp	r3, #0
 800a660:	bfbc      	itt	lt
 800a662:	580b      	ldrlt	r3, [r1, r0]
 800a664:	18c0      	addlt	r0, r0, r3
 800a666:	4770      	bx	lr

0800a668 <_raise_r>:
 800a668:	291f      	cmp	r1, #31
 800a66a:	b538      	push	{r3, r4, r5, lr}
 800a66c:	4604      	mov	r4, r0
 800a66e:	460d      	mov	r5, r1
 800a670:	d904      	bls.n	800a67c <_raise_r+0x14>
 800a672:	2316      	movs	r3, #22
 800a674:	6003      	str	r3, [r0, #0]
 800a676:	f04f 30ff 	mov.w	r0, #4294967295
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a67e:	b112      	cbz	r2, 800a686 <_raise_r+0x1e>
 800a680:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a684:	b94b      	cbnz	r3, 800a69a <_raise_r+0x32>
 800a686:	4620      	mov	r0, r4
 800a688:	f000 f830 	bl	800a6ec <_getpid_r>
 800a68c:	462a      	mov	r2, r5
 800a68e:	4601      	mov	r1, r0
 800a690:	4620      	mov	r0, r4
 800a692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a696:	f000 b817 	b.w	800a6c8 <_kill_r>
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d00a      	beq.n	800a6b4 <_raise_r+0x4c>
 800a69e:	1c59      	adds	r1, r3, #1
 800a6a0:	d103      	bne.n	800a6aa <_raise_r+0x42>
 800a6a2:	2316      	movs	r3, #22
 800a6a4:	6003      	str	r3, [r0, #0]
 800a6a6:	2001      	movs	r0, #1
 800a6a8:	e7e7      	b.n	800a67a <_raise_r+0x12>
 800a6aa:	2400      	movs	r4, #0
 800a6ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	4798      	blx	r3
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	e7e0      	b.n	800a67a <_raise_r+0x12>

0800a6b8 <raise>:
 800a6b8:	4b02      	ldr	r3, [pc, #8]	; (800a6c4 <raise+0xc>)
 800a6ba:	4601      	mov	r1, r0
 800a6bc:	6818      	ldr	r0, [r3, #0]
 800a6be:	f7ff bfd3 	b.w	800a668 <_raise_r>
 800a6c2:	bf00      	nop
 800a6c4:	24000010 	.word	0x24000010

0800a6c8 <_kill_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	4d07      	ldr	r5, [pc, #28]	; (800a6e8 <_kill_r+0x20>)
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	4608      	mov	r0, r1
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	602b      	str	r3, [r5, #0]
 800a6d6:	f7f6 fed7 	bl	8001488 <_kill>
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	d102      	bne.n	800a6e4 <_kill_r+0x1c>
 800a6de:	682b      	ldr	r3, [r5, #0]
 800a6e0:	b103      	cbz	r3, 800a6e4 <_kill_r+0x1c>
 800a6e2:	6023      	str	r3, [r4, #0]
 800a6e4:	bd38      	pop	{r3, r4, r5, pc}
 800a6e6:	bf00      	nop
 800a6e8:	240003cc 	.word	0x240003cc

0800a6ec <_getpid_r>:
 800a6ec:	f7f6 bec4 	b.w	8001478 <_getpid>

0800a6f0 <__sread>:
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f8:	f000 f894 	bl	800a824 <_read_r>
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	bfab      	itete	ge
 800a700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a702:	89a3      	ldrhlt	r3, [r4, #12]
 800a704:	181b      	addge	r3, r3, r0
 800a706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a70a:	bfac      	ite	ge
 800a70c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a70e:	81a3      	strhlt	r3, [r4, #12]
 800a710:	bd10      	pop	{r4, pc}

0800a712 <__swrite>:
 800a712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a716:	461f      	mov	r7, r3
 800a718:	898b      	ldrh	r3, [r1, #12]
 800a71a:	05db      	lsls	r3, r3, #23
 800a71c:	4605      	mov	r5, r0
 800a71e:	460c      	mov	r4, r1
 800a720:	4616      	mov	r6, r2
 800a722:	d505      	bpl.n	800a730 <__swrite+0x1e>
 800a724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a728:	2302      	movs	r3, #2
 800a72a:	2200      	movs	r2, #0
 800a72c:	f000 f868 	bl	800a800 <_lseek_r>
 800a730:	89a3      	ldrh	r3, [r4, #12]
 800a732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a73a:	81a3      	strh	r3, [r4, #12]
 800a73c:	4632      	mov	r2, r6
 800a73e:	463b      	mov	r3, r7
 800a740:	4628      	mov	r0, r5
 800a742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a746:	f000 b817 	b.w	800a778 <_write_r>

0800a74a <__sseek>:
 800a74a:	b510      	push	{r4, lr}
 800a74c:	460c      	mov	r4, r1
 800a74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a752:	f000 f855 	bl	800a800 <_lseek_r>
 800a756:	1c43      	adds	r3, r0, #1
 800a758:	89a3      	ldrh	r3, [r4, #12]
 800a75a:	bf15      	itete	ne
 800a75c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a75e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a766:	81a3      	strheq	r3, [r4, #12]
 800a768:	bf18      	it	ne
 800a76a:	81a3      	strhne	r3, [r4, #12]
 800a76c:	bd10      	pop	{r4, pc}

0800a76e <__sclose>:
 800a76e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a772:	f000 b813 	b.w	800a79c <_close_r>
	...

0800a778 <_write_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	4d07      	ldr	r5, [pc, #28]	; (800a798 <_write_r+0x20>)
 800a77c:	4604      	mov	r4, r0
 800a77e:	4608      	mov	r0, r1
 800a780:	4611      	mov	r1, r2
 800a782:	2200      	movs	r2, #0
 800a784:	602a      	str	r2, [r5, #0]
 800a786:	461a      	mov	r2, r3
 800a788:	f7f6 feb5 	bl	80014f6 <_write>
 800a78c:	1c43      	adds	r3, r0, #1
 800a78e:	d102      	bne.n	800a796 <_write_r+0x1e>
 800a790:	682b      	ldr	r3, [r5, #0]
 800a792:	b103      	cbz	r3, 800a796 <_write_r+0x1e>
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	bd38      	pop	{r3, r4, r5, pc}
 800a798:	240003cc 	.word	0x240003cc

0800a79c <_close_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4d06      	ldr	r5, [pc, #24]	; (800a7b8 <_close_r+0x1c>)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	602b      	str	r3, [r5, #0]
 800a7a8:	f7f6 fec1 	bl	800152e <_close>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_close_r+0x1a>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_close_r+0x1a>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	240003cc 	.word	0x240003cc

0800a7bc <_fstat_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4d07      	ldr	r5, [pc, #28]	; (800a7dc <_fstat_r+0x20>)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	602b      	str	r3, [r5, #0]
 800a7ca:	f7f6 febc 	bl	8001546 <_fstat>
 800a7ce:	1c43      	adds	r3, r0, #1
 800a7d0:	d102      	bne.n	800a7d8 <_fstat_r+0x1c>
 800a7d2:	682b      	ldr	r3, [r5, #0]
 800a7d4:	b103      	cbz	r3, 800a7d8 <_fstat_r+0x1c>
 800a7d6:	6023      	str	r3, [r4, #0]
 800a7d8:	bd38      	pop	{r3, r4, r5, pc}
 800a7da:	bf00      	nop
 800a7dc:	240003cc 	.word	0x240003cc

0800a7e0 <_isatty_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	4d06      	ldr	r5, [pc, #24]	; (800a7fc <_isatty_r+0x1c>)
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	4608      	mov	r0, r1
 800a7ea:	602b      	str	r3, [r5, #0]
 800a7ec:	f7f6 febb 	bl	8001566 <_isatty>
 800a7f0:	1c43      	adds	r3, r0, #1
 800a7f2:	d102      	bne.n	800a7fa <_isatty_r+0x1a>
 800a7f4:	682b      	ldr	r3, [r5, #0]
 800a7f6:	b103      	cbz	r3, 800a7fa <_isatty_r+0x1a>
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}
 800a7fc:	240003cc 	.word	0x240003cc

0800a800 <_lseek_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4d07      	ldr	r5, [pc, #28]	; (800a820 <_lseek_r+0x20>)
 800a804:	4604      	mov	r4, r0
 800a806:	4608      	mov	r0, r1
 800a808:	4611      	mov	r1, r2
 800a80a:	2200      	movs	r2, #0
 800a80c:	602a      	str	r2, [r5, #0]
 800a80e:	461a      	mov	r2, r3
 800a810:	f7f6 feb4 	bl	800157c <_lseek>
 800a814:	1c43      	adds	r3, r0, #1
 800a816:	d102      	bne.n	800a81e <_lseek_r+0x1e>
 800a818:	682b      	ldr	r3, [r5, #0]
 800a81a:	b103      	cbz	r3, 800a81e <_lseek_r+0x1e>
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	240003cc 	.word	0x240003cc

0800a824 <_read_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	4d07      	ldr	r5, [pc, #28]	; (800a844 <_read_r+0x20>)
 800a828:	4604      	mov	r4, r0
 800a82a:	4608      	mov	r0, r1
 800a82c:	4611      	mov	r1, r2
 800a82e:	2200      	movs	r2, #0
 800a830:	602a      	str	r2, [r5, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	f7f6 fe42 	bl	80014bc <_read>
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	d102      	bne.n	800a842 <_read_r+0x1e>
 800a83c:	682b      	ldr	r3, [r5, #0]
 800a83e:	b103      	cbz	r3, 800a842 <_read_r+0x1e>
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	bd38      	pop	{r3, r4, r5, pc}
 800a844:	240003cc 	.word	0x240003cc

0800a848 <_init>:
 800a848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84a:	bf00      	nop
 800a84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a84e:	bc08      	pop	{r3}
 800a850:	469e      	mov	lr, r3
 800a852:	4770      	bx	lr

0800a854 <_fini>:
 800a854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a856:	bf00      	nop
 800a858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a85a:	bc08      	pop	{r3}
 800a85c:	469e      	mov	lr, r3
 800a85e:	4770      	bx	lr
