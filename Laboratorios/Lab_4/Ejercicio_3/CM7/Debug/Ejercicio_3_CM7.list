
Ejercicio_3_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae20  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800b0c0  0800b0c0  0001b0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5d4  0800b5d4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5d4  0800b5d4  0001b5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5dc  0800b5dc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5dc  0800b5dc  0001b5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5e0  0800b5e0  0001b5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800b5e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  240001e4  0800b7c8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240008a8  0800b7c8  000208a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a55f  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002adf  00000000  00000000  0003a771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0003d250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003e6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b1b7  00000000  00000000  0003fa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c8e  00000000  00000000  0007abbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00186a6d  00000000  00000000  0009484d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021b2ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066e4  00000000  00000000  0021b30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b0a8 	.word	0x0800b0a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800b0a8 	.word	0x0800b0a8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007cc:	bf00      	nop
 80007ce:	4b49      	ldr	r3, [pc, #292]	; (80008f4 <main+0x134>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <main+0x24>
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	60fa      	str	r2, [r7, #12]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dcf4      	bgt.n	80007ce <main+0xe>
  if ( timeout < 0 )
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da01      	bge.n	80007ee <main+0x2e>
  {
  Error_Handler();
 80007ea:	f001 f853 	bl	8001894 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f001 faf1 	bl	8001dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f897 	bl	8000924 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007f6:	4b3f      	ldr	r3, [pc, #252]	; (80008f4 <main+0x134>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a3d      	ldr	r2, [pc, #244]	; (80008f4 <main+0x134>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <main+0x134>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000814:	2000      	movs	r0, #0
 8000816:	f001 fe93 	bl	8002540 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f001 fea9 	bl	8002574 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000828:	bf00      	nop
 800082a:	4b32      	ldr	r3, [pc, #200]	; (80008f4 <main+0x134>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <main+0x80>
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	60fa      	str	r2, [r7, #12]
 800083c:	2b00      	cmp	r3, #0
 800083e:	dcf4      	bgt.n	800082a <main+0x6a>
if ( timeout < 0 )
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <main+0x8a>
{
Error_Handler();
 8000846:	f001 f825 	bl	8001894 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 fab9 	bl	8000dc0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800084e:	f000 fa6b 	bl	8000d28 <MX_USART3_UART_Init>
  MX_I2C4_Init();
 8000852:	f000 f8e1 	bl	8000a18 <MX_I2C4_Init>
  MX_TIM2_Init();
 8000856:	f000 f9cb 	bl	8000bf0 <MX_TIM2_Init>
  MX_TIM1_Init();
 800085a:	f000 f91d 	bl	8000a98 <MX_TIM1_Init>
  MX_TIM5_Init();
 800085e:	f000 fa15 	bl	8000c8c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  // Incialización del timer 5
  HAL_TIM_Base_Start(&htim5);
 8000862:	4825      	ldr	r0, [pc, #148]	; (80008f8 <main+0x138>)
 8000864:	f005 f972 	bl	8005b4c <HAL_TIM_Base_Start>

  // Inicialización del PWM
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2101      	movs	r1, #1
 800086c:	4823      	ldr	r0, [pc, #140]	; (80008fc <main+0x13c>)
 800086e:	f001 fe33 	bl	80024d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	4821      	ldr	r0, [pc, #132]	; (80008fc <main+0x13c>)
 8000878:	f001 fe2e 	bl	80024d8 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Init(&htim1);
 800087c:	4820      	ldr	r0, [pc, #128]	; (8000900 <main+0x140>)
 800087e:	f005 fa7c 	bl	8005d7a <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000882:	2100      	movs	r1, #0
 8000884:	481e      	ldr	r0, [pc, #120]	; (8000900 <main+0x140>)
 8000886:	f005 fad9 	bl	8005e3c <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 100;
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <main+0x144>)
 800088c:	2264      	movs	r2, #100	; 0x64
 800088e:	635a      	str	r2, [r3, #52]	; 0x34

  // Revisión de conexión del MPU6050
  HAL_StatusTypeDef status;
  status = HAL_I2C_IsDeviceReady(&hi2c4, MPU6050_ADDR, 1, 3000);
 8000890:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000894:	2201      	movs	r2, #1
 8000896:	21d0      	movs	r1, #208	; 0xd0
 8000898:	481b      	ldr	r0, [pc, #108]	; (8000908 <main+0x148>)
 800089a:	f002 f93d 	bl	8002b18 <HAL_I2C_IsDeviceReady>
 800089e:	4603      	mov	r3, r0
 80008a0:	72fb      	strb	r3, [r7, #11]
  if (status == HAL_OK) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 80008a2:	7afb      	ldrb	r3, [r7, #11]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d105      	bne.n	80008b4 <main+0xf4>
 80008a8:	2201      	movs	r2, #1
 80008aa:	2101      	movs	r1, #1
 80008ac:	4817      	ldr	r0, [pc, #92]	; (800090c <main+0x14c>)
 80008ae:	f001 fe13 	bl	80024d8 <HAL_GPIO_WritePin>
 80008b2:	e005      	b.n	80008c0 <main+0x100>
  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ba:	4814      	ldr	r0, [pc, #80]	; (800090c <main+0x14c>)
 80008bc:	f001 fe0c 	bl	80024d8 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80008c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c4:	f001 fb18 	bl	8001ef8 <HAL_Delay>

  // Prueba de comunicación UART
  uart_buf_len = sprintf(uart_buf, "MPU6050 test\r\n");
 80008c8:	4911      	ldr	r1, [pc, #68]	; (8000910 <main+0x150>)
 80008ca:	4812      	ldr	r0, [pc, #72]	; (8000914 <main+0x154>)
 80008cc:	f008 f9f2 	bl	8008cb4 <siprintf>
 80008d0:	4603      	mov	r3, r0
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <main+0x158>)
 80008d6:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <main+0x158>)
 80008da:	881a      	ldrh	r2, [r3, #0]
 80008dc:	2364      	movs	r3, #100	; 0x64
 80008de:	490d      	ldr	r1, [pc, #52]	; (8000914 <main+0x154>)
 80008e0:	480e      	ldr	r0, [pc, #56]	; (800091c <main+0x15c>)
 80008e2:	f006 fcbb 	bl	800725c <HAL_UART_Transmit>

  // Inicialización del MPU6050
  MPU6050_init();
 80008e6:	f000 fb01 	bl	8000eec <MPU6050_init>

  // Inicialización de la interrupción por timer
  HAL_TIM_Base_Start_IT(&htim2);
 80008ea:	480d      	ldr	r0, [pc, #52]	; (8000920 <main+0x160>)
 80008ec:	f005 f99e 	bl	8005c2c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <main+0x130>
 80008f2:	bf00      	nop
 80008f4:	58024400 	.word	0x58024400
 80008f8:	240002e4 	.word	0x240002e4
 80008fc:	58020c00 	.word	0x58020c00
 8000900:	2400024c 	.word	0x2400024c
 8000904:	40010000 	.word	0x40010000
 8000908:	24000200 	.word	0x24000200
 800090c:	58020400 	.word	0x58020400
 8000910:	0800b0c0 	.word	0x0800b0c0
 8000914:	24000858 	.word	0x24000858
 8000918:	2400088a 	.word	0x2400088a
 800091c:	24000330 	.word	0x24000330
 8000920:	24000298 	.word	0x24000298

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	; 0x70
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	224c      	movs	r2, #76	; 0x4c
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f007 fd72 	bl	800841c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2220      	movs	r2, #32
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f007 fd6c 	bl	800841c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000944:	2004      	movs	r0, #4
 8000946:	f002 fd2d 	bl	80033a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <SystemClock_Config+0xec>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <SystemClock_Config+0xec>)
 8000954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <SystemClock_Config+0xec>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <SystemClock_Config+0xf0>)
 8000966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000968:	4a2a      	ldr	r2, [pc, #168]	; (8000a14 <SystemClock_Config+0xf0>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <SystemClock_Config+0xf0>)
 8000972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800097c:	bf00      	nop
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <SystemClock_Config+0xec>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800098a:	d1f8      	bne.n	800097e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098c:	2301      	movs	r3, #1
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000990:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	2302      	movs	r3, #2
 800099c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009a2:	2378      	movs	r3, #120	; 0x78
 80009a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009b2:	230c      	movs	r3, #12
 80009b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	4618      	mov	r0, r3
 80009c4:	f002 fd48 	bl	8003458 <HAL_RCC_OscConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009ce:	f000 ff61 	bl	8001894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	233f      	movs	r3, #63	; 0x3f
 80009d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d6:	2303      	movs	r3, #3
 80009d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009de:	2308      	movs	r3, #8
 80009e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009e6:	2340      	movs	r3, #64	; 0x40
 80009e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2104      	movs	r1, #4
 80009f8:	4618      	mov	r0, r3
 80009fa:	f003 f95b 	bl	8003cb4 <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000a04:	f000 ff46 	bl	8001894 <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3770      	adds	r7, #112	; 0x70
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	58024800 	.word	0x58024800
 8000a14:	58000400 	.word	0x58000400

08000a18 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <MX_I2C4_Init+0x74>)
 8000a1e:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <MX_I2C4_Init+0x78>)
 8000a20:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_I2C4_Init+0x74>)
 8000a24:	4a1b      	ldr	r2, [pc, #108]	; (8000a94 <MX_I2C4_Init+0x7c>)
 8000a26:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <MX_I2C4_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_I2C4_Init+0x74>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MX_I2C4_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_I2C4_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_I2C4_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_I2C4_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_I2C4_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a52:	480e      	ldr	r0, [pc, #56]	; (8000a8c <MX_I2C4_Init+0x74>)
 8000a54:	f001 fda2 	bl	800259c <HAL_I2C_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a5e:	f000 ff19 	bl	8001894 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a62:	2100      	movs	r1, #0
 8000a64:	4809      	ldr	r0, [pc, #36]	; (8000a8c <MX_I2C4_Init+0x74>)
 8000a66:	f002 fc05 	bl	8003274 <HAL_I2CEx_ConfigAnalogFilter>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a70:	f000 ff10 	bl	8001894 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a74:	2100      	movs	r1, #0
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_I2C4_Init+0x74>)
 8000a78:	f002 fc47 	bl	800330a <HAL_I2CEx_ConfigDigitalFilter>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a82:	f000 ff07 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	24000200 	.word	0x24000200
 8000a90:	58001c00 	.word	0x58001c00
 8000a94:	307075b1 	.word	0x307075b1

08000a98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b09a      	sub	sp, #104	; 0x68
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
 8000ac8:	615a      	str	r2, [r3, #20]
 8000aca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	222c      	movs	r2, #44	; 0x2c
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f007 fca2 	bl	800841c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad8:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <MX_TIM1_Init+0x150>)
 8000ada:	4a44      	ldr	r2, [pc, #272]	; (8000bec <MX_TIM1_Init+0x154>)
 8000adc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240;
 8000ade:	4b42      	ldr	r3, [pc, #264]	; (8000be8 <MX_TIM1_Init+0x150>)
 8000ae0:	22f0      	movs	r2, #240	; 0xf0
 8000ae2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <MX_TIM1_Init+0x150>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000aea:	4b3f      	ldr	r3, [pc, #252]	; (8000be8 <MX_TIM1_Init+0x150>)
 8000aec:	2264      	movs	r2, #100	; 0x64
 8000aee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af0:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <MX_TIM1_Init+0x150>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af6:	4b3c      	ldr	r3, [pc, #240]	; (8000be8 <MX_TIM1_Init+0x150>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000afc:	4b3a      	ldr	r3, [pc, #232]	; (8000be8 <MX_TIM1_Init+0x150>)
 8000afe:	2280      	movs	r2, #128	; 0x80
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b02:	4839      	ldr	r0, [pc, #228]	; (8000be8 <MX_TIM1_Init+0x150>)
 8000b04:	f004 ffca 	bl	8005a9c <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b0e:	f000 fec1 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b16:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4832      	ldr	r0, [pc, #200]	; (8000be8 <MX_TIM1_Init+0x150>)
 8000b20:	f005 fcce 	bl	80064c0 <HAL_TIM_ConfigClockSource>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b2a:	f000 feb3 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b2e:	482e      	ldr	r0, [pc, #184]	; (8000be8 <MX_TIM1_Init+0x150>)
 8000b30:	f005 f923 	bl	8005d7a <HAL_TIM_PWM_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b3a:	f000 feab 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4825      	ldr	r0, [pc, #148]	; (8000be8 <MX_TIM1_Init+0x150>)
 8000b52:	f006 fa09 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000b5c:	f000 fe9a 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b60:	2360      	movs	r3, #96	; 0x60
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b80:	2200      	movs	r2, #0
 8000b82:	4619      	mov	r1, r3
 8000b84:	4818      	ldr	r0, [pc, #96]	; (8000be8 <MX_TIM1_Init+0x150>)
 8000b86:	f005 fb87 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000b90:	f000 fe80 	bl	8001894 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4807      	ldr	r0, [pc, #28]	; (8000be8 <MX_TIM1_Init+0x150>)
 8000bca:	f006 fa5b 	bl	8007084 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000bd4:	f000 fe5e 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <MX_TIM1_Init+0x150>)
 8000bda:	f000 ff35 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 8000bde:	bf00      	nop
 8000be0:	3768      	adds	r7, #104	; 0x68
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2400024c 	.word	0x2400024c
 8000bec:	40010000 	.word	0x40010000

08000bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c18:	22ef      	movs	r2, #239	; 0xef
 8000c1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 31249;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c24:	f647 2211 	movw	r2, #31249	; 0x7a11
 8000c28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c36:	4814      	ldr	r0, [pc, #80]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c38:	f004 ff30 	bl	8005a9c <HAL_TIM_Base_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c42:	f000 fe27 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4619      	mov	r1, r3
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c54:	f005 fc34 	bl	80064c0 <HAL_TIM_ConfigClockSource>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c5e:	f000 fe19 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4806      	ldr	r0, [pc, #24]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c70:	f006 f97a 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c7a:	f000 fe0b 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	3720      	adds	r7, #32
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	24000298 	.word	0x24000298

08000c8c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <MX_TIM5_Init+0x94>)
 8000cac:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <MX_TIM5_Init+0x98>)
 8000cae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <MX_TIM5_Init+0x94>)
 8000cb2:	22f0      	movs	r2, #240	; 0xf0
 8000cb4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_TIM5_Init+0x94>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <MX_TIM5_Init+0x94>)
 8000cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <MX_TIM5_Init+0x94>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_TIM5_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000cd0:	4813      	ldr	r0, [pc, #76]	; (8000d20 <MX_TIM5_Init+0x94>)
 8000cd2:	f004 fee3 	bl	8005a9c <HAL_TIM_Base_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000cdc:	f000 fdda 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4619      	mov	r1, r3
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <MX_TIM5_Init+0x94>)
 8000cee:	f005 fbe7 	bl	80064c0 <HAL_TIM_ConfigClockSource>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000cf8:	f000 fdcc 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_TIM5_Init+0x94>)
 8000d0a:	f006 f92d 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000d14:	f000 fdbe 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	240002e4 	.word	0x240002e4
 8000d24:	40000c00 	.word	0x40000c00

08000d28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d2e:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <MX_USART3_UART_Init+0x94>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d70:	4811      	ldr	r0, [pc, #68]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d72:	f006 fa23 	bl	80071bc <HAL_UART_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d7c:	f000 fd8a 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d80:	2100      	movs	r1, #0
 8000d82:	480d      	ldr	r0, [pc, #52]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d84:	f007 fa56 	bl	8008234 <HAL_UARTEx_SetTxFifoThreshold>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d8e:	f000 fd81 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4808      	ldr	r0, [pc, #32]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d96:	f007 fa8b 	bl	80082b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000da0:	f000 fd78 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000da6:	f007 fa0c 	bl	80081c2 <HAL_UARTEx_DisableFifoMode>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000db0:	f000 fd70 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	24000330 	.word	0x24000330
 8000dbc:	40004800 	.word	0x40004800

08000dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	4b42      	ldr	r3, [pc, #264]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	4a40      	ldr	r2, [pc, #256]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de6:	4b3e      	ldr	r3, [pc, #248]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df4:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	4a39      	ldr	r2, [pc, #228]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e04:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	4a31      	ldr	r2, [pc, #196]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e22:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e30:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	4a2a      	ldr	r2, [pc, #168]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e38:	f043 0320 	orr.w	r3, r3, #32
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	f003 0320 	and.w	r3, r3, #32
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4e:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e56:	f043 0310 	orr.w	r3, r3, #16
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	4815      	ldr	r0, [pc, #84]	; (8000ee4 <MX_GPIO_Init+0x124>)
 8000e90:	f001 fb22 	bl	80024d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2103      	movs	r1, #3
 8000e98:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <MX_GPIO_Init+0x128>)
 8000e9a:	f001 fb1d 	bl	80024d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <MX_GPIO_Init+0x124>)
 8000eb6:	f001 f95f 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_GPIO_Init+0x128>)
 8000ed2:	f001 f951 	bl	8002178 <HAL_GPIO_Init>

}
 8000ed6:	bf00      	nop
 8000ed8:	3730      	adds	r7, #48	; 0x30
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	58020400 	.word	0x58020400
 8000ee8:	58020c00 	.word	0x58020c00

08000eec <MPU6050_init>:

/* USER CODE BEGIN 4 */
void MPU6050_init(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 3000);
 8000ef2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <MPU6050_init+0xd4>)
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2301      	movs	r3, #1
 8000f02:	2275      	movs	r2, #117	; 0x75
 8000f04:	21d0      	movs	r1, #208	; 0xd0
 8000f06:	482f      	ldr	r0, [pc, #188]	; (8000fc4 <MPU6050_init+0xd8>)
 8000f08:	f001 fcec 	bl	80028e4 <HAL_I2C_Mem_Read>
	uart_buf_len = sprintf(uart_buf, "Dirección: %u \r\n", check);
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <MPU6050_init+0xd4>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	492d      	ldr	r1, [pc, #180]	; (8000fc8 <MPU6050_init+0xdc>)
 8000f14:	482d      	ldr	r0, [pc, #180]	; (8000fcc <MPU6050_init+0xe0>)
 8000f16:	f007 fecd 	bl	8008cb4 <siprintf>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <MPU6050_init+0xe4>)
 8000f20:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8000f22:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <MPU6050_init+0xe4>)
 8000f24:	881a      	ldrh	r2, [r3, #0]
 8000f26:	2364      	movs	r3, #100	; 0x64
 8000f28:	4928      	ldr	r1, [pc, #160]	; (8000fcc <MPU6050_init+0xe0>)
 8000f2a:	482a      	ldr	r0, [pc, #168]	; (8000fd4 <MPU6050_init+0xe8>)
 8000f2c:	f006 f996 	bl	800725c <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f34:	f000 ffe0 	bl	8001ef8 <HAL_Delay>

	data = 0x00;
 8000f38:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <MPU6050_init+0xec>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 3000);
 8000f3e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	2301      	movs	r3, #1
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <MPU6050_init+0xec>)
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	226b      	movs	r2, #107	; 0x6b
 8000f50:	21d0      	movs	r1, #208	; 0xd0
 8000f52:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <MPU6050_init+0xd8>)
 8000f54:	f001 fbb2 	bl	80026bc <HAL_I2C_Mem_Write>
	data = 0b10000011;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MPU6050_init+0xec>)
 8000f5a:	2283      	movs	r2, #131	; 0x83
 8000f5c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, SMPLRT_DIV, 1, &data, 1, 3000);
 8000f5e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	2301      	movs	r3, #1
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MPU6050_init+0xec>)
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	2219      	movs	r2, #25
 8000f70:	21d0      	movs	r1, #208	; 0xd0
 8000f72:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <MPU6050_init+0xd8>)
 8000f74:	f001 fba2 	bl	80026bc <HAL_I2C_Mem_Write>
	data = 0x00;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MPU6050_init+0xec>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, GYRO_CONFIG, 1, &data, 1, 3000);
 8000f7e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2301      	movs	r3, #1
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <MPU6050_init+0xec>)
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	221b      	movs	r2, #27
 8000f90:	21d0      	movs	r1, #208	; 0xd0
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <MPU6050_init+0xd8>)
 8000f94:	f001 fb92 	bl	80026bc <HAL_I2C_Mem_Write>
	data = 0x00;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MPU6050_init+0xec>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, ACCEL_CONFIG, 1, &data, 1, 3000);
 8000f9e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MPU6050_init+0xec>)
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	221c      	movs	r2, #28
 8000fb0:	21d0      	movs	r1, #208	; 0xd0
 8000fb2:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MPU6050_init+0xd8>)
 8000fb4:	f001 fb82 	bl	80026bc <HAL_I2C_Mem_Write>

}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	240003c0 	.word	0x240003c0
 8000fc4:	24000200 	.word	0x24000200
 8000fc8:	0800b0d0 	.word	0x0800b0d0
 8000fcc:	24000858 	.word	0x24000858
 8000fd0:	2400088a 	.word	0x2400088a
 8000fd4:	24000330 	.word	0x24000330
 8000fd8:	240003c1 	.word	0x240003c1
 8000fdc:	00000000 	.word	0x00000000

08000fe0 <MPU6050_read_gyro>:

void MPU6050_read_gyro(void){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af04      	add	r7, sp, #16
	uint8_t read_gyro[6];

	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, GYRO_XOUT_H, 1, read_gyro, 6, 3000);
 8000fe6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	2306      	movs	r3, #6
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	2243      	movs	r2, #67	; 0x43
 8000ff8:	21d0      	movs	r1, #208	; 0xd0
 8000ffa:	482b      	ldr	r0, [pc, #172]	; (80010a8 <MPU6050_read_gyro+0xc8>)
 8000ffc:	f001 fc72 	bl	80028e4 <HAL_I2C_Mem_Read>

	gyr_X_read = (int16_t)(read_gyro[0] << 8 | read_gyro[1]);
 8001000:	783b      	ldrb	r3, [r7, #0]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	787b      	ldrb	r3, [r7, #1]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <MPU6050_read_gyro+0xcc>)
 8001010:	801a      	strh	r2, [r3, #0]
	gyr_Y_read = (int16_t)(read_gyro[2] << 8 | read_gyro[3]);
 8001012:	78bb      	ldrb	r3, [r7, #2]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	b21a      	sxth	r2, r3
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	b21b      	sxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	b21a      	sxth	r2, r3
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <MPU6050_read_gyro+0xd0>)
 8001022:	801a      	strh	r2, [r3, #0]
	gyr_Z_read = (int16_t)(read_gyro[4] << 8 | read_gyro[5]);
 8001024:	793b      	ldrb	r3, [r7, #4]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	797b      	ldrb	r3, [r7, #5]
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b21a      	sxth	r2, r3
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <MPU6050_read_gyro+0xd4>)
 8001034:	801a      	strh	r2, [r3, #0]

	gyr_X = gyr_X_read/131.0;
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MPU6050_read_gyro+0xcc>)
 8001038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001044:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80010a0 <MPU6050_read_gyro+0xc0>
 8001048:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800104c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MPU6050_read_gyro+0xd8>)
 8001052:	edc3 7a00 	vstr	s15, [r3]
	gyr_Y = gyr_Y_read/131.0;
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MPU6050_read_gyro+0xd0>)
 8001058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001064:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 80010a0 <MPU6050_read_gyro+0xc0>
 8001068:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800106c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MPU6050_read_gyro+0xdc>)
 8001072:	edc3 7a00 	vstr	s15, [r3]
	gyr_Z = gyr_Z_read/131.0;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MPU6050_read_gyro+0xd4>)
 8001078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001084:	ed9f 5b06 	vldr	d5, [pc, #24]	; 80010a0 <MPU6050_read_gyro+0xc0>
 8001088:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800108c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MPU6050_read_gyro+0xe0>)
 8001092:	edc3 7a00 	vstr	s15, [r3]
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	00000000 	.word	0x00000000
 80010a4:	40606000 	.word	0x40606000
 80010a8:	24000200 	.word	0x24000200
 80010ac:	240003c2 	.word	0x240003c2
 80010b0:	240003c4 	.word	0x240003c4
 80010b4:	240003c6 	.word	0x240003c6
 80010b8:	240003c8 	.word	0x240003c8
 80010bc:	240003cc 	.word	0x240003cc
 80010c0:	240003d0 	.word	0x240003d0

080010c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a8e      	ldr	r2, [pc, #568]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	f040 8114 	bne.w	80012fe <HAL_TIM_PeriodElapsedCallback+0x23a>
	{
		if(n_muestras == 0) timer_val = __HAL_TIM_GET_COUNTER(&htim5);
 80010d6:	4b8d      	ldr	r3, [pc, #564]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80010d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d104      	bne.n	80010ea <HAL_TIM_PeriodElapsedCallback+0x26>
 80010e0:	4b8b      	ldr	r3, [pc, #556]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	4a8b      	ldr	r2, [pc, #556]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80010e8:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80010ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ee:	488a      	ldr	r0, [pc, #552]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80010f0:	f001 fa0b 	bl	800250a <HAL_GPIO_TogglePin>
		MPU6050_read_gyro();
 80010f4:	f7ff ff74 	bl	8000fe0 <MPU6050_read_gyro>

		uart_buf_len = sprintf(uart_buf, "\r\n Muestra: %u \r\n", n_muestras);
 80010f8:	4b84      	ldr	r3, [pc, #528]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80010fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fe:	461a      	mov	r2, r3
 8001100:	4986      	ldr	r1, [pc, #536]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001102:	4887      	ldr	r0, [pc, #540]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001104:	f007 fdd6 	bl	8008cb4 <siprintf>
 8001108:	4603      	mov	r3, r0
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b85      	ldr	r3, [pc, #532]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800110e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001110:	4b84      	ldr	r3, [pc, #528]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001112:	881a      	ldrh	r2, [r3, #0]
 8001114:	2364      	movs	r3, #100	; 0x64
 8001116:	4982      	ldr	r1, [pc, #520]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001118:	4883      	ldr	r0, [pc, #524]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800111a:	f006 f89f 	bl	800725c <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "GyrX = %.5f °/s \r\n", gyr_X);
 800111e:	4b83      	ldr	r3, [pc, #524]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001120:	edd3 7a00 	vldr	s15, [r3]
 8001124:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001128:	ec53 2b17 	vmov	r2, r3, d7
 800112c:	4980      	ldr	r1, [pc, #512]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800112e:	487c      	ldr	r0, [pc, #496]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001130:	f007 fdc0 	bl	8008cb4 <siprintf>
 8001134:	4603      	mov	r3, r0
 8001136:	b29a      	uxth	r2, r3
 8001138:	4b7a      	ldr	r3, [pc, #488]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800113a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 800113c:	4b79      	ldr	r3, [pc, #484]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800113e:	881a      	ldrh	r2, [r3, #0]
 8001140:	2364      	movs	r3, #100	; 0x64
 8001142:	4977      	ldr	r1, [pc, #476]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001144:	4878      	ldr	r0, [pc, #480]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001146:	f006 f889 	bl	800725c <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "GyrY = %.5f °/s \r\n", gyr_Y);
 800114a:	4b7a      	ldr	r3, [pc, #488]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001154:	ec53 2b17 	vmov	r2, r3, d7
 8001158:	4977      	ldr	r1, [pc, #476]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800115a:	4871      	ldr	r0, [pc, #452]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800115c:	f007 fdaa 	bl	8008cb4 <siprintf>
 8001160:	4603      	mov	r3, r0
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b6f      	ldr	r3, [pc, #444]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001166:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001168:	4b6e      	ldr	r3, [pc, #440]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800116a:	881a      	ldrh	r2, [r3, #0]
 800116c:	2364      	movs	r3, #100	; 0x64
 800116e:	496c      	ldr	r1, [pc, #432]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001170:	486d      	ldr	r0, [pc, #436]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001172:	f006 f873 	bl	800725c <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "GyrZ = %.5f °/s \r\n\n", gyr_Z);
 8001176:	4b71      	ldr	r3, [pc, #452]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001180:	ec53 2b17 	vmov	r2, r3, d7
 8001184:	496e      	ldr	r1, [pc, #440]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001186:	4866      	ldr	r0, [pc, #408]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001188:	f007 fd94 	bl	8008cb4 <siprintf>
 800118c:	4603      	mov	r3, r0
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b64      	ldr	r3, [pc, #400]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001192:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001194:	4b63      	ldr	r3, [pc, #396]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001196:	881a      	ldrh	r2, [r3, #0]
 8001198:	2364      	movs	r3, #100	; 0x64
 800119a:	4961      	ldr	r1, [pc, #388]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800119c:	4862      	ldr	r0, [pc, #392]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800119e:	f006 f85d 	bl	800725c <HAL_UART_Transmit>

		// Guardado de muestras en los arreglos
		if(dutyCycle == 40){
 80011a2:	4b68      	ldr	r3, [pc, #416]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80011a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a8:	2b28      	cmp	r3, #40	; 0x28
 80011aa:	d11e      	bne.n	80011ea <HAL_TIM_PeriodElapsedCallback+0x126>
			muestras40_x[n_muestras] = gyr_X;
 80011ac:	4b57      	ldr	r3, [pc, #348]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80011ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b2:	4618      	mov	r0, r3
 80011b4:	4b5d      	ldr	r3, [pc, #372]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x268>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4963      	ldr	r1, [pc, #396]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80011ba:	0083      	lsls	r3, r0, #2
 80011bc:	440b      	add	r3, r1
 80011be:	601a      	str	r2, [r3, #0]
			muestras40_y[n_muestras] = gyr_Y;
 80011c0:	4b52      	ldr	r3, [pc, #328]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80011c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c6:	4618      	mov	r0, r3
 80011c8:	4b5a      	ldr	r3, [pc, #360]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	495f      	ldr	r1, [pc, #380]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x288>)
 80011ce:	0083      	lsls	r3, r0, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	601a      	str	r2, [r3, #0]
			muestras40_z[n_muestras] = gyr_Z;
 80011d4:	4b4d      	ldr	r3, [pc, #308]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80011d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011da:	4618      	mov	r0, r3
 80011dc:	4b57      	ldr	r3, [pc, #348]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x278>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	495b      	ldr	r1, [pc, #364]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80011e2:	0083      	lsls	r3, r0, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	e046      	b.n	8001278 <HAL_TIM_PeriodElapsedCallback+0x1b4>
		} else if(dutyCycle == 60){
 80011ea:	4b56      	ldr	r3, [pc, #344]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80011ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f0:	2b3c      	cmp	r3, #60	; 0x3c
 80011f2:	d11e      	bne.n	8001232 <HAL_TIM_PeriodElapsedCallback+0x16e>
			muestras60_x[n_muestras] = gyr_X;
 80011f4:	4b45      	ldr	r3, [pc, #276]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80011f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fa:	4618      	mov	r0, r3
 80011fc:	4b4b      	ldr	r3, [pc, #300]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x268>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4954      	ldr	r1, [pc, #336]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001202:	0083      	lsls	r3, r0, #2
 8001204:	440b      	add	r3, r1
 8001206:	601a      	str	r2, [r3, #0]
			muestras60_y[n_muestras] = gyr_Y;
 8001208:	4b40      	ldr	r3, [pc, #256]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 800120a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120e:	4618      	mov	r0, r3
 8001210:	4b48      	ldr	r3, [pc, #288]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4950      	ldr	r1, [pc, #320]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001216:	0083      	lsls	r3, r0, #2
 8001218:	440b      	add	r3, r1
 800121a:	601a      	str	r2, [r3, #0]
			muestras60_z[n_muestras] = gyr_Z;
 800121c:	4b3b      	ldr	r3, [pc, #236]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 800121e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001222:	4618      	mov	r0, r3
 8001224:	4b45      	ldr	r3, [pc, #276]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	494c      	ldr	r1, [pc, #304]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800122a:	0083      	lsls	r3, r0, #2
 800122c:	440b      	add	r3, r1
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	e022      	b.n	8001278 <HAL_TIM_PeriodElapsedCallback+0x1b4>
		} else if(dutyCycle == 80){
 8001232:	4b44      	ldr	r3, [pc, #272]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001238:	2b50      	cmp	r3, #80	; 0x50
 800123a:	d11d      	bne.n	8001278 <HAL_TIM_PeriodElapsedCallback+0x1b4>
			muestras80_x[n_muestras] = gyr_X;
 800123c:	4b33      	ldr	r3, [pc, #204]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 800123e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001242:	4618      	mov	r0, r3
 8001244:	4b39      	ldr	r3, [pc, #228]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4945      	ldr	r1, [pc, #276]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800124a:	0083      	lsls	r3, r0, #2
 800124c:	440b      	add	r3, r1
 800124e:	601a      	str	r2, [r3, #0]
			muestras80_y[n_muestras] = gyr_Y;
 8001250:	4b2e      	ldr	r3, [pc, #184]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001256:	4618      	mov	r0, r3
 8001258:	4b36      	ldr	r3, [pc, #216]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4941      	ldr	r1, [pc, #260]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800125e:	0083      	lsls	r3, r0, #2
 8001260:	440b      	add	r3, r1
 8001262:	601a      	str	r2, [r3, #0]
			muestras80_z[n_muestras] = gyr_Z;
 8001264:	4b29      	ldr	r3, [pc, #164]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126a:	4618      	mov	r0, r3
 800126c:	4b33      	ldr	r3, [pc, #204]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x278>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	493d      	ldr	r1, [pc, #244]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001272:	0083      	lsls	r3, r0, #2
 8001274:	440b      	add	r3, r1
 8001276:	601a      	str	r2, [r3, #0]
		}

		n_muestras++;
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 800127a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127e:	b29b      	uxth	r3, r3
 8001280:	3301      	adds	r3, #1
 8001282:	b29b      	uxth	r3, r3
 8001284:	b21a      	sxth	r2, r3
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001288:	801a      	strh	r2, [r3, #0]
		if(n_muestras == limite_muestras){
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 800128c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001290:	4b36      	ldr	r3, [pc, #216]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001296:	429a      	cmp	r2, r3
 8001298:	d131      	bne.n	80012fe <HAL_TIM_PeriodElapsedCallback+0x23a>
			uart_buf_len = sprintf(uart_buf, "Muestras: %u \r\n", n_muestras);
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x248>)
 800129c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4933      	ldr	r1, [pc, #204]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80012a4:	481e      	ldr	r0, [pc, #120]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80012a6:	f007 fd05 	bl	8008cb4 <siprintf>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80012b0:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80012b4:	881a      	ldrh	r2, [r3, #0]
 80012b6:	2364      	movs	r3, #100	; 0x64
 80012b8:	4919      	ldr	r1, [pc, #100]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80012ba:	481b      	ldr	r0, [pc, #108]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80012bc:	f005 ffce 	bl	800725c <HAL_UART_Transmit>
			HAL_TIM_Base_Stop_IT(&htim2);
 80012c0:	4811      	ldr	r0, [pc, #68]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80012c2:	f004 fd2b 	bl	8005d1c <HAL_TIM_Base_Stop_IT>

			// Comprobación del tiempo de muestreo
			timer_val = __HAL_TIM_GET_COUNTER(&htim5) - timer_val;
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	4a10      	ldr	r2, [pc, #64]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80012d4:	6013      	str	r3, [r2, #0]
			uart_buf_len = sprintf(uart_buf, "Tiempo transcurrido: %u us\r\n", timer_val);
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4925      	ldr	r1, [pc, #148]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80012de:	4810      	ldr	r0, [pc, #64]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80012e0:	f007 fce8 	bl	8008cb4 <siprintf>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80012ea:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80012ee:	881a      	ldrh	r2, [r3, #0]
 80012f0:	2364      	movs	r3, #100	; 0x64
 80012f2:	490b      	ldr	r1, [pc, #44]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80012f6:	f005 ffb1 	bl	800725c <HAL_UART_Transmit>

			changeCycle();
 80012fa:	f000 f83d 	bl	8001378 <changeCycle>
		}
	}
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	24000298 	.word	0x24000298
 800130c:	240003d4 	.word	0x240003d4
 8001310:	240002e4 	.word	0x240002e4
 8001314:	2400088c 	.word	0x2400088c
 8001318:	58020400 	.word	0x58020400
 800131c:	0800b0e4 	.word	0x0800b0e4
 8001320:	24000858 	.word	0x24000858
 8001324:	2400088a 	.word	0x2400088a
 8001328:	24000330 	.word	0x24000330
 800132c:	240003c8 	.word	0x240003c8
 8001330:	0800b0f8 	.word	0x0800b0f8
 8001334:	240003cc 	.word	0x240003cc
 8001338:	0800b10c 	.word	0x0800b10c
 800133c:	240003d0 	.word	0x240003d0
 8001340:	0800b120 	.word	0x0800b120
 8001344:	24000008 	.word	0x24000008
 8001348:	240003d8 	.word	0x240003d8
 800134c:	24000458 	.word	0x24000458
 8001350:	240004d8 	.word	0x240004d8
 8001354:	24000558 	.word	0x24000558
 8001358:	240005d8 	.word	0x240005d8
 800135c:	24000658 	.word	0x24000658
 8001360:	240006d8 	.word	0x240006d8
 8001364:	24000758 	.word	0x24000758
 8001368:	240007d8 	.word	0x240007d8
 800136c:	2400000a 	.word	0x2400000a
 8001370:	0800b138 	.word	0x0800b138
 8001374:	0800b148 	.word	0x0800b148

08001378 <changeCycle>:

void changeCycle(void){
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 800137e:	4b93      	ldr	r3, [pc, #588]	; (80015cc <changeCycle+0x254>)
 8001380:	2200      	movs	r2, #0
 8001382:	635a      	str	r2, [r3, #52]	; 0x34
	n_muestras = 0;
 8001384:	4b92      	ldr	r3, [pc, #584]	; (80015d0 <changeCycle+0x258>)
 8001386:	2200      	movs	r2, #0
 8001388:	801a      	strh	r2, [r3, #0]

	if(dutyCycle == 40){
 800138a:	4b92      	ldr	r3, [pc, #584]	; (80015d4 <changeCycle+0x25c>)
 800138c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001390:	2b28      	cmp	r3, #40	; 0x28
 8001392:	f040 80b8 	bne.w	8001506 <changeCycle+0x18e>
		dutyCycle = 60;
 8001396:	4b8f      	ldr	r3, [pc, #572]	; (80015d4 <changeCycle+0x25c>)
 8001398:	223c      	movs	r2, #60	; 0x3c
 800139a:	801a      	strh	r2, [r3, #0]
		TIM1->CCR1 = 80;
 800139c:	4b8b      	ldr	r3, [pc, #556]	; (80015cc <changeCycle+0x254>)
 800139e:	2250      	movs	r2, #80	; 0x50
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34

		uart_buf_len = sprintf(uart_buf, "DUTY CYCLE: 40%");
 80013a2:	498d      	ldr	r1, [pc, #564]	; (80015d8 <changeCycle+0x260>)
 80013a4:	488d      	ldr	r0, [pc, #564]	; (80015dc <changeCycle+0x264>)
 80013a6:	f007 fc85 	bl	8008cb4 <siprintf>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b8c      	ldr	r3, [pc, #560]	; (80015e0 <changeCycle+0x268>)
 80013b0:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80013b2:	4b8b      	ldr	r3, [pc, #556]	; (80015e0 <changeCycle+0x268>)
 80013b4:	881a      	ldrh	r2, [r3, #0]
 80013b6:	2364      	movs	r3, #100	; 0x64
 80013b8:	4988      	ldr	r1, [pc, #544]	; (80015dc <changeCycle+0x264>)
 80013ba:	488a      	ldr	r0, [pc, #552]	; (80015e4 <changeCycle+0x26c>)
 80013bc:	f005 ff4e 	bl	800725c <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "\r\n Eje X: ");
 80013c0:	4989      	ldr	r1, [pc, #548]	; (80015e8 <changeCycle+0x270>)
 80013c2:	4886      	ldr	r0, [pc, #536]	; (80015dc <changeCycle+0x264>)
 80013c4:	f007 fc76 	bl	8008cb4 <siprintf>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b84      	ldr	r3, [pc, #528]	; (80015e0 <changeCycle+0x268>)
 80013ce:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80013d0:	4b83      	ldr	r3, [pc, #524]	; (80015e0 <changeCycle+0x268>)
 80013d2:	881a      	ldrh	r2, [r3, #0]
 80013d4:	2364      	movs	r3, #100	; 0x64
 80013d6:	4981      	ldr	r1, [pc, #516]	; (80015dc <changeCycle+0x264>)
 80013d8:	4882      	ldr	r0, [pc, #520]	; (80015e4 <changeCycle+0x26c>)
 80013da:	f005 ff3f 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
 80013e2:	e01b      	b.n	800141c <changeCycle+0xa4>
			uart_buf_len = sprintf(uart_buf, "%.2f, ", muestras40_x[i]);
 80013e4:	4a81      	ldr	r2, [pc, #516]	; (80015ec <changeCycle+0x274>)
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f4:	ec53 2b17 	vmov	r2, r3, d7
 80013f8:	497d      	ldr	r1, [pc, #500]	; (80015f0 <changeCycle+0x278>)
 80013fa:	4878      	ldr	r0, [pc, #480]	; (80015dc <changeCycle+0x264>)
 80013fc:	f007 fc5a 	bl	8008cb4 <siprintf>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b76      	ldr	r3, [pc, #472]	; (80015e0 <changeCycle+0x268>)
 8001406:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001408:	4b75      	ldr	r3, [pc, #468]	; (80015e0 <changeCycle+0x268>)
 800140a:	881a      	ldrh	r2, [r3, #0]
 800140c:	2364      	movs	r3, #100	; 0x64
 800140e:	4973      	ldr	r1, [pc, #460]	; (80015dc <changeCycle+0x264>)
 8001410:	4874      	ldr	r0, [pc, #464]	; (80015e4 <changeCycle+0x26c>)
 8001412:	f005 ff23 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	3301      	adds	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
 800141c:	4b75      	ldr	r3, [pc, #468]	; (80015f4 <changeCycle+0x27c>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	461a      	mov	r2, r3
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	4293      	cmp	r3, r2
 8001428:	dbdc      	blt.n	80013e4 <changeCycle+0x6c>
		}
		uart_buf_len = sprintf(uart_buf, "\r\n Eje Y: ");
 800142a:	4973      	ldr	r1, [pc, #460]	; (80015f8 <changeCycle+0x280>)
 800142c:	486b      	ldr	r0, [pc, #428]	; (80015dc <changeCycle+0x264>)
 800142e:	f007 fc41 	bl	8008cb4 <siprintf>
 8001432:	4603      	mov	r3, r0
 8001434:	b29a      	uxth	r2, r3
 8001436:	4b6a      	ldr	r3, [pc, #424]	; (80015e0 <changeCycle+0x268>)
 8001438:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 800143a:	4b69      	ldr	r3, [pc, #420]	; (80015e0 <changeCycle+0x268>)
 800143c:	881a      	ldrh	r2, [r3, #0]
 800143e:	2364      	movs	r3, #100	; 0x64
 8001440:	4966      	ldr	r1, [pc, #408]	; (80015dc <changeCycle+0x264>)
 8001442:	4868      	ldr	r0, [pc, #416]	; (80015e4 <changeCycle+0x26c>)
 8001444:	f005 ff0a 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
 800144c:	e01b      	b.n	8001486 <changeCycle+0x10e>
			uart_buf_len = sprintf(uart_buf, "%.2f, ", muestras40_y[i]);
 800144e:	4a6b      	ldr	r2, [pc, #428]	; (80015fc <changeCycle+0x284>)
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800145e:	ec53 2b17 	vmov	r2, r3, d7
 8001462:	4963      	ldr	r1, [pc, #396]	; (80015f0 <changeCycle+0x278>)
 8001464:	485d      	ldr	r0, [pc, #372]	; (80015dc <changeCycle+0x264>)
 8001466:	f007 fc25 	bl	8008cb4 <siprintf>
 800146a:	4603      	mov	r3, r0
 800146c:	b29a      	uxth	r2, r3
 800146e:	4b5c      	ldr	r3, [pc, #368]	; (80015e0 <changeCycle+0x268>)
 8001470:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001472:	4b5b      	ldr	r3, [pc, #364]	; (80015e0 <changeCycle+0x268>)
 8001474:	881a      	ldrh	r2, [r3, #0]
 8001476:	2364      	movs	r3, #100	; 0x64
 8001478:	4958      	ldr	r1, [pc, #352]	; (80015dc <changeCycle+0x264>)
 800147a:	485a      	ldr	r0, [pc, #360]	; (80015e4 <changeCycle+0x26c>)
 800147c:	f005 feee 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	3301      	adds	r3, #1
 8001484:	623b      	str	r3, [r7, #32]
 8001486:	4b5b      	ldr	r3, [pc, #364]	; (80015f4 <changeCycle+0x27c>)
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	461a      	mov	r2, r3
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	4293      	cmp	r3, r2
 8001492:	dbdc      	blt.n	800144e <changeCycle+0xd6>
		}
		uart_buf_len = sprintf(uart_buf, "\r\n Eje Z: ");
 8001494:	495a      	ldr	r1, [pc, #360]	; (8001600 <changeCycle+0x288>)
 8001496:	4851      	ldr	r0, [pc, #324]	; (80015dc <changeCycle+0x264>)
 8001498:	f007 fc0c 	bl	8008cb4 <siprintf>
 800149c:	4603      	mov	r3, r0
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b4f      	ldr	r3, [pc, #316]	; (80015e0 <changeCycle+0x268>)
 80014a2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80014a4:	4b4e      	ldr	r3, [pc, #312]	; (80015e0 <changeCycle+0x268>)
 80014a6:	881a      	ldrh	r2, [r3, #0]
 80014a8:	2364      	movs	r3, #100	; 0x64
 80014aa:	494c      	ldr	r1, [pc, #304]	; (80015dc <changeCycle+0x264>)
 80014ac:	484d      	ldr	r0, [pc, #308]	; (80015e4 <changeCycle+0x26c>)
 80014ae:	f005 fed5 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	e01b      	b.n	80014f0 <changeCycle+0x178>
			uart_buf_len = sprintf(uart_buf, "%.2f, ", muestras40_z[i]);
 80014b8:	4a52      	ldr	r2, [pc, #328]	; (8001604 <changeCycle+0x28c>)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014c8:	ec53 2b17 	vmov	r2, r3, d7
 80014cc:	4948      	ldr	r1, [pc, #288]	; (80015f0 <changeCycle+0x278>)
 80014ce:	4843      	ldr	r0, [pc, #268]	; (80015dc <changeCycle+0x264>)
 80014d0:	f007 fbf0 	bl	8008cb4 <siprintf>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <changeCycle+0x268>)
 80014da:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80014dc:	4b40      	ldr	r3, [pc, #256]	; (80015e0 <changeCycle+0x268>)
 80014de:	881a      	ldrh	r2, [r3, #0]
 80014e0:	2364      	movs	r3, #100	; 0x64
 80014e2:	493e      	ldr	r1, [pc, #248]	; (80015dc <changeCycle+0x264>)
 80014e4:	483f      	ldr	r0, [pc, #252]	; (80015e4 <changeCycle+0x26c>)
 80014e6:	f005 feb9 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <changeCycle+0x27c>)
 80014f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f6:	461a      	mov	r2, r3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	4293      	cmp	r3, r2
 80014fc:	dbdc      	blt.n	80014b8 <changeCycle+0x140>
		}

		HAL_TIM_Base_Start_IT(&htim2);
 80014fe:	4842      	ldr	r0, [pc, #264]	; (8001608 <changeCycle+0x290>)
 8001500:	f004 fb94 	bl	8005c2c <HAL_TIM_Base_Start_IT>
		}
		TIM1->CCR1 = 0;
		dutyCycle = 0;
		HAL_TIM_Base_Stop_IT(&htim2);
	}
}
 8001504:	e19f      	b.n	8001846 <changeCycle+0x4ce>
	} else if(dutyCycle == 60){
 8001506:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <changeCycle+0x25c>)
 8001508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150c:	2b3c      	cmp	r3, #60	; 0x3c
 800150e:	f040 80dd 	bne.w	80016cc <changeCycle+0x354>
		dutyCycle = 80;
 8001512:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <changeCycle+0x25c>)
 8001514:	2250      	movs	r2, #80	; 0x50
 8001516:	801a      	strh	r2, [r3, #0]
		TIM1->CCR1 = 100;
 8001518:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <changeCycle+0x254>)
 800151a:	2264      	movs	r2, #100	; 0x64
 800151c:	635a      	str	r2, [r3, #52]	; 0x34
		uart_buf_len = sprintf(uart_buf, "DUTY CYCLE: 60%");
 800151e:	493b      	ldr	r1, [pc, #236]	; (800160c <changeCycle+0x294>)
 8001520:	482e      	ldr	r0, [pc, #184]	; (80015dc <changeCycle+0x264>)
 8001522:	f007 fbc7 	bl	8008cb4 <siprintf>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <changeCycle+0x268>)
 800152c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <changeCycle+0x268>)
 8001530:	881a      	ldrh	r2, [r3, #0]
 8001532:	2364      	movs	r3, #100	; 0x64
 8001534:	4929      	ldr	r1, [pc, #164]	; (80015dc <changeCycle+0x264>)
 8001536:	482b      	ldr	r0, [pc, #172]	; (80015e4 <changeCycle+0x26c>)
 8001538:	f005 fe90 	bl	800725c <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "\r\n Eje X: ");
 800153c:	492a      	ldr	r1, [pc, #168]	; (80015e8 <changeCycle+0x270>)
 800153e:	4827      	ldr	r0, [pc, #156]	; (80015dc <changeCycle+0x264>)
 8001540:	f007 fbb8 	bl	8008cb4 <siprintf>
 8001544:	4603      	mov	r3, r0
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <changeCycle+0x268>)
 800154a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <changeCycle+0x268>)
 800154e:	881a      	ldrh	r2, [r3, #0]
 8001550:	2364      	movs	r3, #100	; 0x64
 8001552:	4922      	ldr	r1, [pc, #136]	; (80015dc <changeCycle+0x264>)
 8001554:	4823      	ldr	r0, [pc, #140]	; (80015e4 <changeCycle+0x26c>)
 8001556:	f005 fe81 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	e01b      	b.n	8001598 <changeCycle+0x220>
			uart_buf_len = sprintf(uart_buf, "%.2f, ", muestras60_x[i]);
 8001560:	4a2b      	ldr	r2, [pc, #172]	; (8001610 <changeCycle+0x298>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001570:	ec53 2b17 	vmov	r2, r3, d7
 8001574:	491e      	ldr	r1, [pc, #120]	; (80015f0 <changeCycle+0x278>)
 8001576:	4819      	ldr	r0, [pc, #100]	; (80015dc <changeCycle+0x264>)
 8001578:	f007 fb9c 	bl	8008cb4 <siprintf>
 800157c:	4603      	mov	r3, r0
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <changeCycle+0x268>)
 8001582:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <changeCycle+0x268>)
 8001586:	881a      	ldrh	r2, [r3, #0]
 8001588:	2364      	movs	r3, #100	; 0x64
 800158a:	4914      	ldr	r1, [pc, #80]	; (80015dc <changeCycle+0x264>)
 800158c:	4815      	ldr	r0, [pc, #84]	; (80015e4 <changeCycle+0x26c>)
 800158e:	f005 fe65 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	3301      	adds	r3, #1
 8001596:	61bb      	str	r3, [r7, #24]
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <changeCycle+0x27c>)
 800159a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159e:	461a      	mov	r2, r3
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	4293      	cmp	r3, r2
 80015a4:	dbdc      	blt.n	8001560 <changeCycle+0x1e8>
		uart_buf_len = sprintf(uart_buf, "\r\n Eje Y: ");
 80015a6:	4914      	ldr	r1, [pc, #80]	; (80015f8 <changeCycle+0x280>)
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <changeCycle+0x264>)
 80015aa:	f007 fb83 	bl	8008cb4 <siprintf>
 80015ae:	4603      	mov	r3, r0
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <changeCycle+0x268>)
 80015b4:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <changeCycle+0x268>)
 80015b8:	881a      	ldrh	r2, [r3, #0]
 80015ba:	2364      	movs	r3, #100	; 0x64
 80015bc:	4907      	ldr	r1, [pc, #28]	; (80015dc <changeCycle+0x264>)
 80015be:	4809      	ldr	r0, [pc, #36]	; (80015e4 <changeCycle+0x26c>)
 80015c0:	f005 fe4c 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e040      	b.n	800164c <changeCycle+0x2d4>
 80015ca:	bf00      	nop
 80015cc:	40010000 	.word	0x40010000
 80015d0:	240003d4 	.word	0x240003d4
 80015d4:	24000008 	.word	0x24000008
 80015d8:	0800b168 	.word	0x0800b168
 80015dc:	24000858 	.word	0x24000858
 80015e0:	2400088a 	.word	0x2400088a
 80015e4:	24000330 	.word	0x24000330
 80015e8:	0800b178 	.word	0x0800b178
 80015ec:	240003d8 	.word	0x240003d8
 80015f0:	0800b184 	.word	0x0800b184
 80015f4:	2400000a 	.word	0x2400000a
 80015f8:	0800b18c 	.word	0x0800b18c
 80015fc:	24000458 	.word	0x24000458
 8001600:	0800b198 	.word	0x0800b198
 8001604:	240004d8 	.word	0x240004d8
 8001608:	24000298 	.word	0x24000298
 800160c:	0800b1a4 	.word	0x0800b1a4
 8001610:	24000558 	.word	0x24000558
			uart_buf_len = sprintf(uart_buf, "%.2f, ", muestras60_y[i]);
 8001614:	4a8e      	ldr	r2, [pc, #568]	; (8001850 <changeCycle+0x4d8>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001624:	ec53 2b17 	vmov	r2, r3, d7
 8001628:	498a      	ldr	r1, [pc, #552]	; (8001854 <changeCycle+0x4dc>)
 800162a:	488b      	ldr	r0, [pc, #556]	; (8001858 <changeCycle+0x4e0>)
 800162c:	f007 fb42 	bl	8008cb4 <siprintf>
 8001630:	4603      	mov	r3, r0
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b89      	ldr	r3, [pc, #548]	; (800185c <changeCycle+0x4e4>)
 8001636:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001638:	4b88      	ldr	r3, [pc, #544]	; (800185c <changeCycle+0x4e4>)
 800163a:	881a      	ldrh	r2, [r3, #0]
 800163c:	2364      	movs	r3, #100	; 0x64
 800163e:	4986      	ldr	r1, [pc, #536]	; (8001858 <changeCycle+0x4e0>)
 8001640:	4887      	ldr	r0, [pc, #540]	; (8001860 <changeCycle+0x4e8>)
 8001642:	f005 fe0b 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	4b85      	ldr	r3, [pc, #532]	; (8001864 <changeCycle+0x4ec>)
 800164e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001652:	461a      	mov	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	4293      	cmp	r3, r2
 8001658:	dbdc      	blt.n	8001614 <changeCycle+0x29c>
		uart_buf_len = sprintf(uart_buf, "\r\n Eje Z: ");
 800165a:	4983      	ldr	r1, [pc, #524]	; (8001868 <changeCycle+0x4f0>)
 800165c:	487e      	ldr	r0, [pc, #504]	; (8001858 <changeCycle+0x4e0>)
 800165e:	f007 fb29 	bl	8008cb4 <siprintf>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b7d      	ldr	r3, [pc, #500]	; (800185c <changeCycle+0x4e4>)
 8001668:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 800166a:	4b7c      	ldr	r3, [pc, #496]	; (800185c <changeCycle+0x4e4>)
 800166c:	881a      	ldrh	r2, [r3, #0]
 800166e:	2364      	movs	r3, #100	; 0x64
 8001670:	4979      	ldr	r1, [pc, #484]	; (8001858 <changeCycle+0x4e0>)
 8001672:	487b      	ldr	r0, [pc, #492]	; (8001860 <changeCycle+0x4e8>)
 8001674:	f005 fdf2 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	e01b      	b.n	80016b6 <changeCycle+0x33e>
			uart_buf_len = sprintf(uart_buf, "%.2f, ", muestras60_z[i]);
 800167e:	4a7b      	ldr	r2, [pc, #492]	; (800186c <changeCycle+0x4f4>)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	edd3 7a00 	vldr	s15, [r3]
 800168a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800168e:	ec53 2b17 	vmov	r2, r3, d7
 8001692:	4970      	ldr	r1, [pc, #448]	; (8001854 <changeCycle+0x4dc>)
 8001694:	4870      	ldr	r0, [pc, #448]	; (8001858 <changeCycle+0x4e0>)
 8001696:	f007 fb0d 	bl	8008cb4 <siprintf>
 800169a:	4603      	mov	r3, r0
 800169c:	b29a      	uxth	r2, r3
 800169e:	4b6f      	ldr	r3, [pc, #444]	; (800185c <changeCycle+0x4e4>)
 80016a0:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80016a2:	4b6e      	ldr	r3, [pc, #440]	; (800185c <changeCycle+0x4e4>)
 80016a4:	881a      	ldrh	r2, [r3, #0]
 80016a6:	2364      	movs	r3, #100	; 0x64
 80016a8:	496b      	ldr	r1, [pc, #428]	; (8001858 <changeCycle+0x4e0>)
 80016aa:	486d      	ldr	r0, [pc, #436]	; (8001860 <changeCycle+0x4e8>)
 80016ac:	f005 fdd6 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	3301      	adds	r3, #1
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b6b      	ldr	r3, [pc, #428]	; (8001864 <changeCycle+0x4ec>)
 80016b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016bc:	461a      	mov	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4293      	cmp	r3, r2
 80016c2:	dbdc      	blt.n	800167e <changeCycle+0x306>
		HAL_TIM_Base_Start_IT(&htim2);
 80016c4:	486a      	ldr	r0, [pc, #424]	; (8001870 <changeCycle+0x4f8>)
 80016c6:	f004 fab1 	bl	8005c2c <HAL_TIM_Base_Start_IT>
}
 80016ca:	e0bc      	b.n	8001846 <changeCycle+0x4ce>
	} else if(dutyCycle == 80){
 80016cc:	4b69      	ldr	r3, [pc, #420]	; (8001874 <changeCycle+0x4fc>)
 80016ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d2:	2b50      	cmp	r3, #80	; 0x50
 80016d4:	f040 80b7 	bne.w	8001846 <changeCycle+0x4ce>
		uart_buf_len = sprintf(uart_buf, "DUTY CYCLE: 80%");
 80016d8:	4967      	ldr	r1, [pc, #412]	; (8001878 <changeCycle+0x500>)
 80016da:	485f      	ldr	r0, [pc, #380]	; (8001858 <changeCycle+0x4e0>)
 80016dc:	f007 faea 	bl	8008cb4 <siprintf>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <changeCycle+0x4e4>)
 80016e6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80016e8:	4b5c      	ldr	r3, [pc, #368]	; (800185c <changeCycle+0x4e4>)
 80016ea:	881a      	ldrh	r2, [r3, #0]
 80016ec:	2364      	movs	r3, #100	; 0x64
 80016ee:	495a      	ldr	r1, [pc, #360]	; (8001858 <changeCycle+0x4e0>)
 80016f0:	485b      	ldr	r0, [pc, #364]	; (8001860 <changeCycle+0x4e8>)
 80016f2:	f005 fdb3 	bl	800725c <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "\r\n Eje X: ");
 80016f6:	4961      	ldr	r1, [pc, #388]	; (800187c <changeCycle+0x504>)
 80016f8:	4857      	ldr	r0, [pc, #348]	; (8001858 <changeCycle+0x4e0>)
 80016fa:	f007 fadb 	bl	8008cb4 <siprintf>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	4b56      	ldr	r3, [pc, #344]	; (800185c <changeCycle+0x4e4>)
 8001704:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001706:	4b55      	ldr	r3, [pc, #340]	; (800185c <changeCycle+0x4e4>)
 8001708:	881a      	ldrh	r2, [r3, #0]
 800170a:	2364      	movs	r3, #100	; 0x64
 800170c:	4952      	ldr	r1, [pc, #328]	; (8001858 <changeCycle+0x4e0>)
 800170e:	4854      	ldr	r0, [pc, #336]	; (8001860 <changeCycle+0x4e8>)
 8001710:	f005 fda4 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e01b      	b.n	8001752 <changeCycle+0x3da>
			uart_buf_len = sprintf(uart_buf, "%.2f, ", muestras80_x[i]);
 800171a:	4a59      	ldr	r2, [pc, #356]	; (8001880 <changeCycle+0x508>)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800172a:	ec53 2b17 	vmov	r2, r3, d7
 800172e:	4949      	ldr	r1, [pc, #292]	; (8001854 <changeCycle+0x4dc>)
 8001730:	4849      	ldr	r0, [pc, #292]	; (8001858 <changeCycle+0x4e0>)
 8001732:	f007 fabf 	bl	8008cb4 <siprintf>
 8001736:	4603      	mov	r3, r0
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b48      	ldr	r3, [pc, #288]	; (800185c <changeCycle+0x4e4>)
 800173c:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 800173e:	4b47      	ldr	r3, [pc, #284]	; (800185c <changeCycle+0x4e4>)
 8001740:	881a      	ldrh	r2, [r3, #0]
 8001742:	2364      	movs	r3, #100	; 0x64
 8001744:	4944      	ldr	r1, [pc, #272]	; (8001858 <changeCycle+0x4e0>)
 8001746:	4846      	ldr	r0, [pc, #280]	; (8001860 <changeCycle+0x4e8>)
 8001748:	f005 fd88 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3301      	adds	r3, #1
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b44      	ldr	r3, [pc, #272]	; (8001864 <changeCycle+0x4ec>)
 8001754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001758:	461a      	mov	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4293      	cmp	r3, r2
 800175e:	dbdc      	blt.n	800171a <changeCycle+0x3a2>
		uart_buf_len = sprintf(uart_buf, "\r\n Eje Y: ");
 8001760:	4948      	ldr	r1, [pc, #288]	; (8001884 <changeCycle+0x50c>)
 8001762:	483d      	ldr	r0, [pc, #244]	; (8001858 <changeCycle+0x4e0>)
 8001764:	f007 faa6 	bl	8008cb4 <siprintf>
 8001768:	4603      	mov	r3, r0
 800176a:	b29a      	uxth	r2, r3
 800176c:	4b3b      	ldr	r3, [pc, #236]	; (800185c <changeCycle+0x4e4>)
 800176e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001770:	4b3a      	ldr	r3, [pc, #232]	; (800185c <changeCycle+0x4e4>)
 8001772:	881a      	ldrh	r2, [r3, #0]
 8001774:	2364      	movs	r3, #100	; 0x64
 8001776:	4938      	ldr	r1, [pc, #224]	; (8001858 <changeCycle+0x4e0>)
 8001778:	4839      	ldr	r0, [pc, #228]	; (8001860 <changeCycle+0x4e8>)
 800177a:	f005 fd6f 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	e01b      	b.n	80017bc <changeCycle+0x444>
			uart_buf_len = sprintf(uart_buf, "%.2f, ", muestras80_y[i]);
 8001784:	4a40      	ldr	r2, [pc, #256]	; (8001888 <changeCycle+0x510>)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001794:	ec53 2b17 	vmov	r2, r3, d7
 8001798:	492e      	ldr	r1, [pc, #184]	; (8001854 <changeCycle+0x4dc>)
 800179a:	482f      	ldr	r0, [pc, #188]	; (8001858 <changeCycle+0x4e0>)
 800179c:	f007 fa8a 	bl	8008cb4 <siprintf>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <changeCycle+0x4e4>)
 80017a6:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80017a8:	4b2c      	ldr	r3, [pc, #176]	; (800185c <changeCycle+0x4e4>)
 80017aa:	881a      	ldrh	r2, [r3, #0]
 80017ac:	2364      	movs	r3, #100	; 0x64
 80017ae:	492a      	ldr	r1, [pc, #168]	; (8001858 <changeCycle+0x4e0>)
 80017b0:	482b      	ldr	r0, [pc, #172]	; (8001860 <changeCycle+0x4e8>)
 80017b2:	f005 fd53 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	3301      	adds	r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	4b29      	ldr	r3, [pc, #164]	; (8001864 <changeCycle+0x4ec>)
 80017be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4293      	cmp	r3, r2
 80017c8:	dbdc      	blt.n	8001784 <changeCycle+0x40c>
		uart_buf_len = sprintf(uart_buf, "\r\n Eje Z: ");
 80017ca:	4927      	ldr	r1, [pc, #156]	; (8001868 <changeCycle+0x4f0>)
 80017cc:	4822      	ldr	r0, [pc, #136]	; (8001858 <changeCycle+0x4e0>)
 80017ce:	f007 fa71 	bl	8008cb4 <siprintf>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <changeCycle+0x4e4>)
 80017d8:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <changeCycle+0x4e4>)
 80017dc:	881a      	ldrh	r2, [r3, #0]
 80017de:	2364      	movs	r3, #100	; 0x64
 80017e0:	491d      	ldr	r1, [pc, #116]	; (8001858 <changeCycle+0x4e0>)
 80017e2:	481f      	ldr	r0, [pc, #124]	; (8001860 <changeCycle+0x4e8>)
 80017e4:	f005 fd3a 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	e01b      	b.n	8001826 <changeCycle+0x4ae>
			uart_buf_len = sprintf(uart_buf, "%.2f, ", muestras80_z[i]);
 80017ee:	4a27      	ldr	r2, [pc, #156]	; (800188c <changeCycle+0x514>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017fe:	ec53 2b17 	vmov	r2, r3, d7
 8001802:	4914      	ldr	r1, [pc, #80]	; (8001854 <changeCycle+0x4dc>)
 8001804:	4814      	ldr	r0, [pc, #80]	; (8001858 <changeCycle+0x4e0>)
 8001806:	f007 fa55 	bl	8008cb4 <siprintf>
 800180a:	4603      	mov	r3, r0
 800180c:	b29a      	uxth	r2, r3
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <changeCycle+0x4e4>)
 8001810:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <changeCycle+0x4e4>)
 8001814:	881a      	ldrh	r2, [r3, #0]
 8001816:	2364      	movs	r3, #100	; 0x64
 8001818:	490f      	ldr	r1, [pc, #60]	; (8001858 <changeCycle+0x4e0>)
 800181a:	4811      	ldr	r0, [pc, #68]	; (8001860 <changeCycle+0x4e8>)
 800181c:	f005 fd1e 	bl	800725c <HAL_UART_Transmit>
		for (int i = 0; i < limite_muestras; i++){
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3301      	adds	r3, #1
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <changeCycle+0x4ec>)
 8001828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800182c:	461a      	mov	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4293      	cmp	r3, r2
 8001832:	dbdc      	blt.n	80017ee <changeCycle+0x476>
		TIM1->CCR1 = 0;
 8001834:	4b16      	ldr	r3, [pc, #88]	; (8001890 <changeCycle+0x518>)
 8001836:	2200      	movs	r2, #0
 8001838:	635a      	str	r2, [r3, #52]	; 0x34
		dutyCycle = 0;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <changeCycle+0x4fc>)
 800183c:	2200      	movs	r2, #0
 800183e:	801a      	strh	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <changeCycle+0x4f8>)
 8001842:	f004 fa6b 	bl	8005d1c <HAL_TIM_Base_Stop_IT>
}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	; 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	240005d8 	.word	0x240005d8
 8001854:	0800b184 	.word	0x0800b184
 8001858:	24000858 	.word	0x24000858
 800185c:	2400088a 	.word	0x2400088a
 8001860:	24000330 	.word	0x24000330
 8001864:	2400000a 	.word	0x2400000a
 8001868:	0800b198 	.word	0x0800b198
 800186c:	24000658 	.word	0x24000658
 8001870:	24000298 	.word	0x24000298
 8001874:	24000008 	.word	0x24000008
 8001878:	0800b1b4 	.word	0x0800b1b4
 800187c:	0800b178 	.word	0x0800b178
 8001880:	240006d8 	.word	0x240006d8
 8001884:	0800b18c 	.word	0x0800b18c
 8001888:	24000758 	.word	0x24000758
 800188c:	240007d8 	.word	0x240007d8
 8001890:	40010000 	.word	0x40010000

08001894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001898:	b672      	cpsid	i
}
 800189a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800189c:	e7fe      	b.n	800189c <Error_Handler+0x8>
	...

080018a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_MspInit+0x30>)
 80018a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018ac:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_MspInit+0x30>)
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_MspInit+0x30>)
 80018b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	58024400 	.word	0x58024400

080018d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0b8      	sub	sp, #224	; 0xe0
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	22bc      	movs	r2, #188	; 0xbc
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f006 fd91 	bl	800841c <memset>
  if(hi2c->Instance==I2C4)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a25      	ldr	r2, [pc, #148]	; (8001994 <HAL_I2C_MspInit+0xc0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d142      	bne.n	800198a <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001904:	2310      	movs	r3, #16
 8001906:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	4618      	mov	r0, r3
 8001914:	f002 fd5a 	bl	80043cc <HAL_RCCEx_PeriphCLKConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800191e:	f7ff ffb9 	bl	8001894 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <HAL_I2C_MspInit+0xc4>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_I2C_MspInit+0xc4>)
 800192a:	f043 0320 	orr.w	r3, r3, #32
 800192e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_I2C_MspInit+0xc4>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001938:	f003 0320 	and.w	r3, r3, #32
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001940:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001948:	2312      	movs	r3, #18
 800194a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800195a:	2304      	movs	r3, #4
 800195c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001960:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001964:	4619      	mov	r1, r3
 8001966:	480d      	ldr	r0, [pc, #52]	; (800199c <HAL_I2C_MspInit+0xc8>)
 8001968:	f000 fc06 	bl	8002178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_I2C_MspInit+0xc4>)
 800196e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001972:	4a09      	ldr	r2, [pc, #36]	; (8001998 <HAL_I2C_MspInit+0xc4>)
 8001974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001978:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_I2C_MspInit+0xc4>)
 800197e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	37e0      	adds	r7, #224	; 0xe0
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	58001c00 	.word	0x58001c00
 8001998:	58024400 	.word	0x58024400
 800199c:	58021400 	.word	0x58021400

080019a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <HAL_TIM_Base_MspInit+0x9c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10f      	bne.n	80019d2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019b2:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <HAL_TIM_Base_MspInit+0xa0>)
 80019b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019b8:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <HAL_TIM_Base_MspInit+0xa0>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <HAL_TIM_Base_MspInit+0xa0>)
 80019c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80019d0:	e030      	b.n	8001a34 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019da:	d117      	bne.n	8001a0c <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_TIM_Base_MspInit+0xa0>)
 80019de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019e2:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <HAL_TIM_Base_MspInit+0xa0>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_TIM_Base_MspInit+0xa0>)
 80019ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	201c      	movs	r0, #28
 8001a00:	f000 fb85 	bl	800210e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a04:	201c      	movs	r0, #28
 8001a06:	f000 fb9c 	bl	8002142 <HAL_NVIC_EnableIRQ>
}
 8001a0a:	e013      	b.n	8001a34 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM5)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0c      	ldr	r2, [pc, #48]	; (8001a44 <HAL_TIM_Base_MspInit+0xa4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10e      	bne.n	8001a34 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_TIM_Base_MspInit+0xa0>)
 8001a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a1c:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_TIM_Base_MspInit+0xa0>)
 8001a1e:	f043 0308 	orr.w	r3, r3, #8
 8001a22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_TIM_Base_MspInit+0xa0>)
 8001a28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	58024400 	.word	0x58024400
 8001a44:	40000c00 	.word	0x40000c00

08001a48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <HAL_TIM_MspPostInit+0x6c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d11f      	bne.n	8001aaa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <HAL_TIM_MspPostInit+0x70>)
 8001a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a70:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <HAL_TIM_MspPostInit+0x70>)
 8001a72:	f043 0310 	orr.w	r3, r3, #16
 8001a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_TIM_MspPostInit+0x70>)
 8001a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <HAL_TIM_MspPostInit+0x74>)
 8001aa6:	f000 fb67 	bl	8002178 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40010000 	.word	0x40010000
 8001ab8:	58024400 	.word	0x58024400
 8001abc:	58021000 	.word	0x58021000

08001ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b0b8      	sub	sp, #224	; 0xe0
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	22bc      	movs	r2, #188	; 0xbc
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f006 fc9b 	bl	800841c <memset>
  if(huart->Instance==USART3)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a25      	ldr	r2, [pc, #148]	; (8001b80 <HAL_UART_MspInit+0xc0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d142      	bne.n	8001b76 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001af0:	2302      	movs	r3, #2
 8001af2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fc64 	bl	80043cc <HAL_RCCEx_PeriphCLKConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b0a:	f7ff fec3 	bl	8001894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b32:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b64:	2307      	movs	r3, #7
 8001b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4805      	ldr	r0, [pc, #20]	; (8001b88 <HAL_UART_MspInit+0xc8>)
 8001b72:	f000 fb01 	bl	8002178 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b76:	bf00      	nop
 8001b78:	37e0      	adds	r7, #224	; 0xe0
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40004800 	.word	0x40004800
 8001b84:	58024400 	.word	0x58024400
 8001b88:	58020c00 	.word	0x58020c00

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <NMI_Handler+0x4>

08001b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <MemManage_Handler+0x4>

08001b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd8:	f000 f96e 	bl	8001eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <TIM2_IRQHandler+0x10>)
 8001be6:	f004 fa37 	bl	8006058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	24000298 	.word	0x24000298

08001bf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
	return 1;
 8001bf8:	2301      	movs	r3, #1
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_kill>:

int _kill(int pid, int sig)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c0e:	f006 fbdb 	bl	80083c8 <__errno>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2216      	movs	r2, #22
 8001c16:	601a      	str	r2, [r3, #0]
	return -1;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_exit>:

void _exit (int status)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ffe7 	bl	8001c04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c36:	e7fe      	b.n	8001c36 <_exit+0x12>

08001c38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	e00a      	b.n	8001c60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c4a:	f3af 8000 	nop.w
 8001c4e:	4601      	mov	r1, r0
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	60ba      	str	r2, [r7, #8]
 8001c56:	b2ca      	uxtb	r2, r1
 8001c58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbf0      	blt.n	8001c4a <_read+0x12>
	}

return len;
 8001c68:	687b      	ldr	r3, [r7, #4]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e009      	b.n	8001c98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	dbf1      	blt.n	8001c84 <_write+0x12>
	}
	return len;
 8001ca0:	687b      	ldr	r3, [r7, #4]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_close>:

int _close(int file)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
	return -1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd2:	605a      	str	r2, [r3, #4]
	return 0;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_isatty>:

int _isatty(int file)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	return 0;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <_sbrk+0x5c>)
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <_sbrk+0x60>)
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <_sbrk+0x64>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <_sbrk+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d207      	bcs.n	8001d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d44:	f006 fb40 	bl	80083c8 <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	e009      	b.n	8001d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <_sbrk+0x64>)
 8001d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	24080000 	.word	0x24080000
 8001d74:	00000400 	.word	0x00000400
 8001d78:	24000890 	.word	0x24000890
 8001d7c:	240008a8 	.word	0x240008a8

08001d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d84:	f7fe fc86 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d88:	480c      	ldr	r0, [pc, #48]	; (8001dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d8a:	490d      	ldr	r1, [pc, #52]	; (8001dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d90:	e002      	b.n	8001d98 <LoopCopyDataInit>

08001d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d96:	3304      	adds	r3, #4

08001d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d9c:	d3f9      	bcc.n	8001d92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001da0:	4c0a      	ldr	r4, [pc, #40]	; (8001dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da4:	e001      	b.n	8001daa <LoopFillZerobss>

08001da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da8:	3204      	adds	r2, #4

08001daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dac:	d3fb      	bcc.n	8001da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dae:	f006 fb11 	bl	80083d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001db2:	f7fe fd05 	bl	80007c0 <main>
  bx  lr
 8001db6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001db8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001dbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dc0:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8001dc4:	0800b5e4 	.word	0x0800b5e4
  ldr r2, =_sbss
 8001dc8:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8001dcc:	240008a8 	.word	0x240008a8

08001dd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd0:	e7fe      	b.n	8001dd0 <ADC3_IRQHandler>
	...

08001dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dda:	2003      	movs	r0, #3
 8001ddc:	f000 f98c 	bl	80020f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001de0:	f002 f91e 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_Init+0x68>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	4913      	ldr	r1, [pc, #76]	; (8001e40 <HAL_Init+0x6c>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_Init+0x68>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <HAL_Init+0x6c>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
 8001e14:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <HAL_Init+0x70>)
 8001e16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e18:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <HAL_Init+0x74>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 f814 	bl	8001e4c <HAL_InitTick>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e002      	b.n	8001e34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e2e:	f7ff fd37 	bl	80018a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	58024400 	.word	0x58024400
 8001e40:	0800b1c4 	.word	0x0800b1c4
 8001e44:	24000004 	.word	0x24000004
 8001e48:	24000000 	.word	0x24000000

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_InitTick+0x60>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e021      	b.n	8001ea4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_InitTick+0x64>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_InitTick+0x60>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f971 	bl	800215e <HAL_SYSTICK_Config>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00e      	b.n	8001ea4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b0f      	cmp	r3, #15
 8001e8a:	d80a      	bhi.n	8001ea2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f000 f93b 	bl	800210e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e98:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <HAL_InitTick+0x68>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	24000010 	.word	0x24000010
 8001eb0:	24000000 	.word	0x24000000
 8001eb4:	2400000c 	.word	0x2400000c

08001eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_IncTick+0x20>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_IncTick+0x24>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_IncTick+0x24>)
 8001eca:	6013      	str	r3, [r2, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	24000010 	.word	0x24000010
 8001edc:	24000894 	.word	0x24000894

08001ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_GetTick+0x14>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	24000894 	.word	0x24000894

08001ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f00:	f7ff ffee 	bl	8001ee0 <HAL_GetTick>
 8001f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f10:	d005      	beq.n	8001f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_Delay+0x44>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f1e:	bf00      	nop
 8001f20:	f7ff ffde 	bl	8001ee0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d8f7      	bhi.n	8001f20 <HAL_Delay+0x28>
  {
  }
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	24000010 	.word	0x24000010

08001f40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetREVID+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0c1b      	lsrs	r3, r3, #16
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	5c001000 	.word	0x5c001000

08001f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <__NVIC_SetPriorityGrouping+0x40>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <__NVIC_SetPriorityGrouping+0x40>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00
 8001f9c:	05fa0000 	.word	0x05fa0000

08001fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 0307 	and.w	r3, r3, #7
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db0b      	blt.n	8001fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4907      	ldr	r1, [pc, #28]	; (8001ff4 <__NVIC_EnableIRQ+0x38>)
 8001fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2001      	movs	r0, #1
 8001fde:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000e100 	.word	0xe000e100

08001ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	490c      	ldr	r1, [pc, #48]	; (8002044 <__NVIC_SetPriority+0x4c>)
 8002012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4908      	ldr	r1, [pc, #32]	; (8002048 <__NVIC_SetPriority+0x50>)
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3b04      	subs	r3, #4
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	; 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f1c3 0307 	rsb	r3, r3, #7
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf28      	it	cs
 800206a:	2304      	movcs	r3, #4
 800206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	2b06      	cmp	r3, #6
 8002074:	d902      	bls.n	800207c <NVIC_EncodePriority+0x30>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3b03      	subs	r3, #3
 800207a:	e000      	b.n	800207e <NVIC_EncodePriority+0x32>
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	f04f 32ff 	mov.w	r2, #4294967295
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002094:	f04f 31ff 	mov.w	r1, #4294967295
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43d9      	mvns	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	4313      	orrs	r3, r2
         );
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c4:	d301      	bcc.n	80020ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00f      	b.n	80020ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <SysTick_Config+0x40>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d2:	210f      	movs	r1, #15
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f7ff ff8e 	bl	8001ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <SysTick_Config+0x40>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <SysTick_Config+0x40>)
 80020e4:	2207      	movs	r2, #7
 80020e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	e000e010 	.word	0xe000e010

080020f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff29 	bl	8001f58 <__NVIC_SetPriorityGrouping>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800211c:	f7ff ff40 	bl	8001fa0 <__NVIC_GetPriorityGrouping>
 8002120:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7ff ff90 	bl	800204c <NVIC_EncodePriority>
 800212c:	4602      	mov	r2, r0
 800212e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff5f 	bl	8001ff8 <__NVIC_SetPriority>
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff33 	bl	8001fbc <__NVIC_EnableIRQ>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffa4 	bl	80020b4 <SysTick_Config>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	; 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002186:	4b89      	ldr	r3, [pc, #548]	; (80023ac <HAL_GPIO_Init+0x234>)
 8002188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800218a:	e194      	b.n	80024b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2101      	movs	r1, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8186 	beq.w	80024b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d005      	beq.n	80021bc <HAL_GPIO_Init+0x44>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d130      	bne.n	800221e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021f2:	2201      	movs	r2, #1
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	f003 0201 	and.w	r2, r3, #1
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b03      	cmp	r3, #3
 8002228:	d017      	beq.n	800225a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d123      	bne.n	80022ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	08da      	lsrs	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3208      	adds	r2, #8
 800226e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	08da      	lsrs	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3208      	adds	r2, #8
 80022a8:	69b9      	ldr	r1, [r7, #24]
 80022aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0203 	and.w	r2, r3, #3
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80e0 	beq.w	80024b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f0:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <HAL_GPIO_Init+0x238>)
 80022f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022f6:	4a2e      	ldr	r2, [pc, #184]	; (80023b0 <HAL_GPIO_Init+0x238>)
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002300:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_GPIO_Init+0x238>)
 8002302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230e:	4a29      	ldr	r2, [pc, #164]	; (80023b4 <HAL_GPIO_Init+0x23c>)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	220f      	movs	r2, #15
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <HAL_GPIO_Init+0x240>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d052      	beq.n	80023e0 <HAL_GPIO_Init+0x268>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <HAL_GPIO_Init+0x244>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d031      	beq.n	80023a6 <HAL_GPIO_Init+0x22e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <HAL_GPIO_Init+0x248>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d02b      	beq.n	80023a2 <HAL_GPIO_Init+0x22a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <HAL_GPIO_Init+0x24c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d025      	beq.n	800239e <HAL_GPIO_Init+0x226>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1c      	ldr	r2, [pc, #112]	; (80023c8 <HAL_GPIO_Init+0x250>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01f      	beq.n	800239a <HAL_GPIO_Init+0x222>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <HAL_GPIO_Init+0x254>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d019      	beq.n	8002396 <HAL_GPIO_Init+0x21e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a1a      	ldr	r2, [pc, #104]	; (80023d0 <HAL_GPIO_Init+0x258>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_GPIO_Init+0x21a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <HAL_GPIO_Init+0x25c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00d      	beq.n	800238e <HAL_GPIO_Init+0x216>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <HAL_GPIO_Init+0x260>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <HAL_GPIO_Init+0x212>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a17      	ldr	r2, [pc, #92]	; (80023dc <HAL_GPIO_Init+0x264>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d101      	bne.n	8002386 <HAL_GPIO_Init+0x20e>
 8002382:	2309      	movs	r3, #9
 8002384:	e02d      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 8002386:	230a      	movs	r3, #10
 8002388:	e02b      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 800238a:	2308      	movs	r3, #8
 800238c:	e029      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 800238e:	2307      	movs	r3, #7
 8002390:	e027      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 8002392:	2306      	movs	r3, #6
 8002394:	e025      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 8002396:	2305      	movs	r3, #5
 8002398:	e023      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 800239a:	2304      	movs	r3, #4
 800239c:	e021      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 800239e:	2303      	movs	r3, #3
 80023a0:	e01f      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e01d      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e01b      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 80023aa:	bf00      	nop
 80023ac:	58000080 	.word	0x58000080
 80023b0:	58024400 	.word	0x58024400
 80023b4:	58000400 	.word	0x58000400
 80023b8:	58020000 	.word	0x58020000
 80023bc:	58020400 	.word	0x58020400
 80023c0:	58020800 	.word	0x58020800
 80023c4:	58020c00 	.word	0x58020c00
 80023c8:	58021000 	.word	0x58021000
 80023cc:	58021400 	.word	0x58021400
 80023d0:	58021800 	.word	0x58021800
 80023d4:	58021c00 	.word	0x58021c00
 80023d8:	58022000 	.word	0x58022000
 80023dc:	58022400 	.word	0x58022400
 80023e0:	2300      	movs	r3, #0
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	f002 0203 	and.w	r2, r2, #3
 80023e8:	0092      	lsls	r2, r2, #2
 80023ea:	4093      	lsls	r3, r2
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f2:	4938      	ldr	r1, [pc, #224]	; (80024d4 <HAL_GPIO_Init+0x35c>)
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	3302      	adds	r3, #2
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800242e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	3301      	adds	r3, #1
 80024b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f47f ae63 	bne.w	800218c <HAL_GPIO_Init+0x14>
  }
}
 80024c6:	bf00      	nop
 80024c8:	bf00      	nop
 80024ca:	3724      	adds	r7, #36	; 0x24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	58000400 	.word	0x58000400

080024d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
 80024e4:	4613      	mov	r3, r2
 80024e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e8:	787b      	ldrb	r3, [r7, #1]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80024f4:	e003      	b.n	80024fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	041a      	lsls	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	619a      	str	r2, [r3, #24]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800250a:	b480      	push	{r7}
 800250c:	b085      	sub	sp, #20
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800251c:	887a      	ldrh	r2, [r7, #2]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4013      	ands	r3, r2
 8002522:	041a      	lsls	r2, r3, #16
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	43d9      	mvns	r1, r3
 8002528:	887b      	ldrh	r3, [r7, #2]
 800252a:	400b      	ands	r3, r1
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	619a      	str	r2, [r3, #24]
}
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002548:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_HSEM_FastTake+0x2c>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3320      	adds	r3, #32
 800254e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002552:	4a07      	ldr	r2, [pc, #28]	; (8002570 <HAL_HSEM_FastTake+0x30>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	e000      	b.n	800255e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	58026400 	.word	0x58026400
 8002570:	80000300 	.word	0x80000300

08002574 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800257e:	4906      	ldr	r1, [pc, #24]	; (8002598 <HAL_HSEM_Release+0x24>)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	58026400 	.word	0x58026400

0800259c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e07f      	b.n	80026ae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff f986 	bl	80018d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2224      	movs	r2, #36	; 0x24
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d107      	bne.n	8002616 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	e006      	b.n	8002624 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002622:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d104      	bne.n	8002636 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002634:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_I2C_Init+0x11c>)
 8002642:	430b      	orrs	r3, r1
 8002644:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002654:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69d9      	ldr	r1, [r3, #28]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1a      	ldr	r2, [r3, #32]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	02008000 	.word	0x02008000

080026bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	4608      	mov	r0, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	461a      	mov	r2, r3
 80026ca:	4603      	mov	r3, r0
 80026cc:	817b      	strh	r3, [r7, #10]
 80026ce:	460b      	mov	r3, r1
 80026d0:	813b      	strh	r3, [r7, #8]
 80026d2:	4613      	mov	r3, r2
 80026d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b20      	cmp	r3, #32
 80026e0:	f040 80f9 	bne.w	80028d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_I2C_Mem_Write+0x34>
 80026ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d105      	bne.n	80026fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0ed      	b.n	80028d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_I2C_Mem_Write+0x4e>
 8002706:	2302      	movs	r3, #2
 8002708:	e0e6      	b.n	80028d8 <HAL_I2C_Mem_Write+0x21c>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002712:	f7ff fbe5 	bl	8001ee0 <HAL_GetTick>
 8002716:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2319      	movs	r3, #25
 800271e:	2201      	movs	r2, #1
 8002720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fbcb 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0d1      	b.n	80028d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2221      	movs	r2, #33	; 0x21
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2240      	movs	r2, #64	; 0x40
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a3a      	ldr	r2, [r7, #32]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800275c:	88f8      	ldrh	r0, [r7, #6]
 800275e:	893a      	ldrh	r2, [r7, #8]
 8002760:	8979      	ldrh	r1, [r7, #10]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	4603      	mov	r3, r0
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fadb 	bl	8002d28 <I2C_RequestMemoryWrite>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0a9      	b.n	80028d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	2bff      	cmp	r3, #255	; 0xff
 800278c:	d90e      	bls.n	80027ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	22ff      	movs	r2, #255	; 0xff
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002798:	b2da      	uxtb	r2, r3
 800279a:	8979      	ldrh	r1, [r7, #10]
 800279c:	2300      	movs	r3, #0
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fd33 	bl	8003210 <I2C_TransferConfig>
 80027aa:	e00f      	b.n	80027cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	8979      	ldrh	r1, [r7, #10]
 80027be:	2300      	movs	r3, #0
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 fd22 	bl	8003210 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fbb5 	bl	8002f40 <I2C_WaitOnTXISFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e07b      	b.n	80028d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	781a      	ldrb	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d034      	beq.n	8002884 <HAL_I2C_Mem_Write+0x1c8>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281e:	2b00      	cmp	r3, #0
 8002820:	d130      	bne.n	8002884 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	2200      	movs	r2, #0
 800282a:	2180      	movs	r1, #128	; 0x80
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fb47 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e04d      	b.n	80028d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	2bff      	cmp	r3, #255	; 0xff
 8002844:	d90e      	bls.n	8002864 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	22ff      	movs	r2, #255	; 0xff
 800284a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002850:	b2da      	uxtb	r2, r3
 8002852:	8979      	ldrh	r1, [r7, #10]
 8002854:	2300      	movs	r3, #0
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fcd7 	bl	8003210 <I2C_TransferConfig>
 8002862:	e00f      	b.n	8002884 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002872:	b2da      	uxtb	r2, r3
 8002874:	8979      	ldrh	r1, [r7, #10]
 8002876:	2300      	movs	r3, #0
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fcc6 	bl	8003210 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d19e      	bne.n	80027cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fb94 	bl	8002fc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e01a      	b.n	80028d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2220      	movs	r2, #32
 80028a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_I2C_Mem_Write+0x224>)
 80028b6:	400b      	ands	r3, r1
 80028b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
  }
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	fe00e800 	.word	0xfe00e800

080028e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	4608      	mov	r0, r1
 80028ee:	4611      	mov	r1, r2
 80028f0:	461a      	mov	r2, r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	817b      	strh	r3, [r7, #10]
 80028f6:	460b      	mov	r3, r1
 80028f8:	813b      	strh	r3, [r7, #8]
 80028fa:	4613      	mov	r3, r2
 80028fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b20      	cmp	r3, #32
 8002908:	f040 80fd 	bne.w	8002b06 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_I2C_Mem_Read+0x34>
 8002912:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0f1      	b.n	8002b08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_I2C_Mem_Read+0x4e>
 800292e:	2302      	movs	r3, #2
 8002930:	e0ea      	b.n	8002b08 <HAL_I2C_Mem_Read+0x224>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800293a:	f7ff fad1 	bl	8001ee0 <HAL_GetTick>
 800293e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2319      	movs	r3, #25
 8002946:	2201      	movs	r2, #1
 8002948:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fab7 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0d5      	b.n	8002b08 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2222      	movs	r2, #34	; 0x22
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2240      	movs	r2, #64	; 0x40
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a3a      	ldr	r2, [r7, #32]
 8002976:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800297c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002984:	88f8      	ldrh	r0, [r7, #6]
 8002986:	893a      	ldrh	r2, [r7, #8]
 8002988:	8979      	ldrh	r1, [r7, #10]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	9301      	str	r3, [sp, #4]
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	4603      	mov	r3, r0
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fa1b 	bl	8002dd0 <I2C_RequestMemoryRead>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0ad      	b.n	8002b08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2bff      	cmp	r3, #255	; 0xff
 80029b4:	d90e      	bls.n	80029d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	22ff      	movs	r2, #255	; 0xff
 80029ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	8979      	ldrh	r1, [r7, #10]
 80029c4:	4b52      	ldr	r3, [pc, #328]	; (8002b10 <HAL_I2C_Mem_Read+0x22c>)
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 fc1f 	bl	8003210 <I2C_TransferConfig>
 80029d2:	e00f      	b.n	80029f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	8979      	ldrh	r1, [r7, #10]
 80029e6:	4b4a      	ldr	r3, [pc, #296]	; (8002b10 <HAL_I2C_Mem_Read+0x22c>)
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fc0e 	bl	8003210 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	2200      	movs	r2, #0
 80029fc:	2104      	movs	r1, #4
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fa5e 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e07c      	b.n	8002b08 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d034      	beq.n	8002ab4 <HAL_I2C_Mem_Read+0x1d0>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d130      	bne.n	8002ab4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fa2f 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e04d      	b.n	8002b08 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2bff      	cmp	r3, #255	; 0xff
 8002a74:	d90e      	bls.n	8002a94 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	22ff      	movs	r2, #255	; 0xff
 8002a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	8979      	ldrh	r1, [r7, #10]
 8002a84:	2300      	movs	r3, #0
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fbbf 	bl	8003210 <I2C_TransferConfig>
 8002a92:	e00f      	b.n	8002ab4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	8979      	ldrh	r1, [r7, #10]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fbae 	bl	8003210 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d19a      	bne.n	80029f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fa7c 	bl	8002fc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e01a      	b.n	8002b08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6859      	ldr	r1, [r3, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_I2C_Mem_Read+0x230>)
 8002ae6:	400b      	ands	r3, r1
 8002ae8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
  }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	80002400 	.word	0x80002400
 8002b14:	fe00e800 	.word	0xfe00e800

08002b18 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	460b      	mov	r3, r1
 8002b26:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	f040 80ef 	bne.w	8002d18 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b48:	d101      	bne.n	8002b4e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e0e5      	b.n	8002d1a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_I2C_IsDeviceReady+0x44>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e0de      	b.n	8002d1a <HAL_I2C_IsDeviceReady+0x202>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2224      	movs	r2, #36	; 0x24
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d105      	bne.n	8002b86 <HAL_I2C_IsDeviceReady+0x6e>
 8002b7a:	897b      	ldrh	r3, [r7, #10]
 8002b7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b80:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <HAL_I2C_IsDeviceReady+0x20c>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	e004      	b.n	8002b90 <HAL_I2C_IsDeviceReady+0x78>
 8002b86:	897b      	ldrh	r3, [r7, #10]
 8002b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b8c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002b96:	f7ff f9a3 	bl	8001ee0 <HAL_GetTick>
 8002b9a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	bf0c      	ite	eq
 8002baa:	2301      	moveq	r3, #1
 8002bac:	2300      	movne	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002bc8:	e034      	b.n	8002c34 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd0:	d01a      	beq.n	8002c08 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bd2:	f7ff f985 	bl	8001ee0 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d302      	bcc.n	8002be8 <HAL_I2C_IsDeviceReady+0xd0>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10f      	bne.n	8002c08 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e088      	b.n	8002d1a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c34:	7ffb      	ldrb	r3, [r7, #31]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <HAL_I2C_IsDeviceReady+0x128>
 8002c3a:	7fbb      	ldrb	r3, [r7, #30]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0c4      	beq.n	8002bca <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d01a      	beq.n	8002c84 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2200      	movs	r2, #0
 8002c56:	2120      	movs	r1, #32
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f931 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e058      	b.n	8002d1a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e04a      	b.n	8002d1a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2120      	movs	r1, #32
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f916 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e03d      	b.n	8002d1a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2220      	movs	r2, #32
 8002cac:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d118      	bne.n	8002ce8 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2120      	movs	r1, #32
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f8f5 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e01c      	b.n	8002d1a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	3301      	adds	r3, #1
 8002cec:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	f63f af3d 	bhi.w	8002b72 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
  }
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	02002000 	.word	0x02002000

08002d28 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	4608      	mov	r0, r1
 8002d32:	4611      	mov	r1, r2
 8002d34:	461a      	mov	r2, r3
 8002d36:	4603      	mov	r3, r0
 8002d38:	817b      	strh	r3, [r7, #10]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	813b      	strh	r3, [r7, #8]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	8979      	ldrh	r1, [r7, #10]
 8002d48:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <I2C_RequestMemoryWrite+0xa4>)
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fa5d 	bl	8003210 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	69b9      	ldr	r1, [r7, #24]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f8f0 	bl	8002f40 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e02c      	b.n	8002dc4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d105      	bne.n	8002d7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d70:	893b      	ldrh	r3, [r7, #8]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28
 8002d7a:	e015      	b.n	8002da8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d7c:	893b      	ldrh	r3, [r7, #8]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	69b9      	ldr	r1, [r7, #24]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f8d6 	bl	8002f40 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e012      	b.n	8002dc4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d9e:	893b      	ldrh	r3, [r7, #8]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2200      	movs	r2, #0
 8002db0:	2180      	movs	r1, #128	; 0x80
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f884 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	80002000 	.word	0x80002000

08002dd0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	4608      	mov	r0, r1
 8002dda:	4611      	mov	r1, r2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	817b      	strh	r3, [r7, #10]
 8002de2:	460b      	mov	r3, r1
 8002de4:	813b      	strh	r3, [r7, #8]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	8979      	ldrh	r1, [r7, #10]
 8002df0:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <I2C_RequestMemoryRead+0xa4>)
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2300      	movs	r3, #0
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fa0a 	bl	8003210 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f89d 	bl	8002f40 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e02c      	b.n	8002e6a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e16:	893b      	ldrh	r3, [r7, #8]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e20:	e015      	b.n	8002e4e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e22:	893b      	ldrh	r3, [r7, #8]
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	69b9      	ldr	r1, [r7, #24]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f883 	bl	8002f40 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e012      	b.n	8002e6a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e44:	893b      	ldrh	r3, [r7, #8]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2200      	movs	r2, #0
 8002e56:	2140      	movs	r1, #64	; 0x40
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f831 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	80002000 	.word	0x80002000

08002e78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d103      	bne.n	8002e96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d007      	beq.n	8002eb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	619a      	str	r2, [r3, #24]
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed0:	e022      	b.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d01e      	beq.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eda:	f7ff f801 	bl	8001ee0 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d302      	bcc.n	8002ef0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d113      	bne.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	f043 0220 	orr.w	r2, r3, #32
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e00f      	b.n	8002f38 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4013      	ands	r3, r2
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d0cd      	beq.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f4c:	e02c      	b.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f870 	bl	8003038 <I2C_IsErrorOccurred>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e02a      	b.n	8002fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d01e      	beq.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6a:	f7fe ffb9 	bl	8001ee0 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d302      	bcc.n	8002f80 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d113      	bne.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	f043 0220 	orr.w	r2, r3, #32
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e007      	b.n	8002fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d1cb      	bne.n	8002f4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fcc:	e028      	b.n	8003020 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f830 	bl	8003038 <I2C_IsErrorOccurred>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e026      	b.n	8003030 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7fe ff7d 	bl	8001ee0 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d113      	bne.n	8003020 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e007      	b.n	8003030 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b20      	cmp	r3, #32
 800302c:	d1cf      	bne.n	8002fce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	d075      	beq.n	8003150 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2210      	movs	r2, #16
 800306a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800306c:	e056      	b.n	800311c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d052      	beq.n	800311c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fe ff33 	bl	8001ee0 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_IsErrorOccurred+0x54>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d147      	bne.n	800311c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003096:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800309e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ae:	d12e      	bne.n	800310e <I2C_IsErrorOccurred+0xd6>
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030b6:	d02a      	beq.n	800310e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d027      	beq.n	800310e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030cc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030ce:	f7fe ff07 	bl	8001ee0 <HAL_GetTick>
 80030d2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d4:	e01b      	b.n	800310e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030d6:	f7fe ff03 	bl	8001ee0 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b19      	cmp	r3, #25
 80030e2:	d914      	bls.n	800310e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b20      	cmp	r3, #32
 800311a:	d1dc      	bne.n	80030d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b20      	cmp	r3, #32
 8003128:	d003      	beq.n	8003132 <I2C_IsErrorOccurred+0xfa>
 800312a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800312e:	2b00      	cmp	r3, #0
 8003130:	d09d      	beq.n	800306e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2220      	movs	r2, #32
 8003140:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003172:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00b      	beq.n	800319c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f043 0308 	orr.w	r3, r3, #8
 800318a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003194:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	f043 0302 	orr.w	r3, r3, #2
 80031ac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80031be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d01c      	beq.n	8003200 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f7ff fe56 	bl	8002e78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <I2C_IsErrorOccurred+0x1d4>)
 80031d8:	400b      	ands	r3, r1
 80031da:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003204:	4618      	mov	r0, r3
 8003206:	3728      	adds	r7, #40	; 0x28
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	fe00e800 	.word	0xfe00e800

08003210 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	817b      	strh	r3, [r7, #10]
 800321e:	4613      	mov	r3, r2
 8003220:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003222:	897b      	ldrh	r3, [r7, #10]
 8003224:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003228:	7a7b      	ldrb	r3, [r7, #9]
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003230:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	4313      	orrs	r3, r2
 800323a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800323e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	0d5b      	lsrs	r3, r3, #21
 800324a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <I2C_TransferConfig+0x60>)
 8003250:	430b      	orrs	r3, r1
 8003252:	43db      	mvns	r3, r3
 8003254:	ea02 0103 	and.w	r1, r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	03ff63ff 	.word	0x03ff63ff

08003274 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b20      	cmp	r3, #32
 8003288:	d138      	bne.n	80032fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003294:	2302      	movs	r3, #2
 8003296:	e032      	b.n	80032fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2224      	movs	r2, #36	; 0x24
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e000      	b.n	80032fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
  }
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b20      	cmp	r3, #32
 800331e:	d139      	bne.n	8003394 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800332a:	2302      	movs	r3, #2
 800332c:	e033      	b.n	8003396 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2224      	movs	r2, #36	; 0x24
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800335c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	e000      	b.n	8003396 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80033ac:	4b29      	ldr	r3, [pc, #164]	; (8003454 <HAL_PWREx_ConfigSupply+0xb0>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	2b06      	cmp	r3, #6
 80033b6:	d00a      	beq.n	80033ce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80033b8:	4b26      	ldr	r3, [pc, #152]	; (8003454 <HAL_PWREx_ConfigSupply+0xb0>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d001      	beq.n	80033ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e040      	b.n	800344c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e03e      	b.n	800344c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80033ce:	4b21      	ldr	r3, [pc, #132]	; (8003454 <HAL_PWREx_ConfigSupply+0xb0>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80033d6:	491f      	ldr	r1, [pc, #124]	; (8003454 <HAL_PWREx_ConfigSupply+0xb0>)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80033de:	f7fe fd7f 	bl	8001ee0 <HAL_GetTick>
 80033e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033e4:	e009      	b.n	80033fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80033e6:	f7fe fd7b 	bl	8001ee0 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033f4:	d901      	bls.n	80033fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e028      	b.n	800344c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033fa:	4b16      	ldr	r3, [pc, #88]	; (8003454 <HAL_PWREx_ConfigSupply+0xb0>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003406:	d1ee      	bne.n	80033e6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b1e      	cmp	r3, #30
 800340c:	d008      	beq.n	8003420 <HAL_PWREx_ConfigSupply+0x7c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b2e      	cmp	r3, #46	; 0x2e
 8003412:	d005      	beq.n	8003420 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b1d      	cmp	r3, #29
 8003418:	d002      	beq.n	8003420 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b2d      	cmp	r3, #45	; 0x2d
 800341e:	d114      	bne.n	800344a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003420:	f7fe fd5e 	bl	8001ee0 <HAL_GetTick>
 8003424:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003426:	e009      	b.n	800343c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003428:	f7fe fd5a 	bl	8001ee0 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003436:	d901      	bls.n	800343c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e007      	b.n	800344c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_PWREx_ConfigSupply+0xb0>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d1ee      	bne.n	8003428 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	58024800 	.word	0x58024800

08003458 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08c      	sub	sp, #48	; 0x30
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f000 bc1d 	b.w	8003ca6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8087 	beq.w	8003588 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800347a:	4b99      	ldr	r3, [pc, #612]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003484:	4b96      	ldr	r3, [pc, #600]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	2b10      	cmp	r3, #16
 800348e:	d007      	beq.n	80034a0 <HAL_RCC_OscConfig+0x48>
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003492:	2b18      	cmp	r3, #24
 8003494:	d110      	bne.n	80034b8 <HAL_RCC_OscConfig+0x60>
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d10b      	bne.n	80034b8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a0:	4b8f      	ldr	r3, [pc, #572]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d06c      	beq.n	8003586 <HAL_RCC_OscConfig+0x12e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d168      	bne.n	8003586 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e3f6      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c0:	d106      	bne.n	80034d0 <HAL_RCC_OscConfig+0x78>
 80034c2:	4b87      	ldr	r3, [pc, #540]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a86      	ldr	r2, [pc, #536]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e02e      	b.n	800352e <HAL_RCC_OscConfig+0xd6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10c      	bne.n	80034f2 <HAL_RCC_OscConfig+0x9a>
 80034d8:	4b81      	ldr	r3, [pc, #516]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a80      	ldr	r2, [pc, #512]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	4b7e      	ldr	r3, [pc, #504]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a7d      	ldr	r2, [pc, #500]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	e01d      	b.n	800352e <HAL_RCC_OscConfig+0xd6>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034fa:	d10c      	bne.n	8003516 <HAL_RCC_OscConfig+0xbe>
 80034fc:	4b78      	ldr	r3, [pc, #480]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a77      	ldr	r2, [pc, #476]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003502:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	4b75      	ldr	r3, [pc, #468]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a74      	ldr	r2, [pc, #464]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 800350e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	e00b      	b.n	800352e <HAL_RCC_OscConfig+0xd6>
 8003516:	4b72      	ldr	r3, [pc, #456]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a71      	ldr	r2, [pc, #452]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 800351c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6e      	ldr	r2, [pc, #440]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d013      	beq.n	800355e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fe fcd3 	bl	8001ee0 <HAL_GetTick>
 800353a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800353e:	f7fe fccf 	bl	8001ee0 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b64      	cmp	r3, #100	; 0x64
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e3aa      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003550:	4b63      	ldr	r3, [pc, #396]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0xe6>
 800355c:	e014      	b.n	8003588 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355e:	f7fe fcbf 	bl	8001ee0 <HAL_GetTick>
 8003562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003566:	f7fe fcbb 	bl	8001ee0 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b64      	cmp	r3, #100	; 0x64
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e396      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003578:	4b59      	ldr	r3, [pc, #356]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1f0      	bne.n	8003566 <HAL_RCC_OscConfig+0x10e>
 8003584:	e000      	b.n	8003588 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003586:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80cb 	beq.w	800372c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003596:	4b52      	ldr	r3, [pc, #328]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800359e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035a0:	4b4f      	ldr	r3, [pc, #316]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <HAL_RCC_OscConfig+0x164>
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	2b18      	cmp	r3, #24
 80035b0:	d156      	bne.n	8003660 <HAL_RCC_OscConfig+0x208>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d151      	bne.n	8003660 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035bc:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_OscConfig+0x17c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e368      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80035d4:	4b42      	ldr	r3, [pc, #264]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f023 0219 	bic.w	r2, r3, #25
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	493f      	ldr	r1, [pc, #252]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035e6:	f7fe fc7b 	bl	8001ee0 <HAL_GetTick>
 80035ea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ee:	f7fe fc77 	bl	8001ee0 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e352      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003600:	4b37      	ldr	r3, [pc, #220]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360c:	f7fe fc98 	bl	8001f40 <HAL_GetREVID>
 8003610:	4603      	mov	r3, r0
 8003612:	f241 0203 	movw	r2, #4099	; 0x1003
 8003616:	4293      	cmp	r3, r2
 8003618:	d817      	bhi.n	800364a <HAL_RCC_OscConfig+0x1f2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d108      	bne.n	8003634 <HAL_RCC_OscConfig+0x1dc>
 8003622:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800362a:	4a2d      	ldr	r2, [pc, #180]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 800362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003630:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003632:	e07b      	b.n	800372c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003634:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	031b      	lsls	r3, r3, #12
 8003642:	4927      	ldr	r1, [pc, #156]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003648:	e070      	b.n	800372c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364a:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	061b      	lsls	r3, r3, #24
 8003658:	4921      	ldr	r1, [pc, #132]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 800365a:	4313      	orrs	r3, r2
 800365c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800365e:	e065      	b.n	800372c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d048      	beq.n	80036fa <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 0219 	bic.w	r2, r3, #25
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	491a      	ldr	r1, [pc, #104]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367a:	f7fe fc31 	bl	8001ee0 <HAL_GetTick>
 800367e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003682:	f7fe fc2d 	bl	8001ee0 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e308      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003694:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a0:	f7fe fc4e 	bl	8001f40 <HAL_GetREVID>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d81a      	bhi.n	80036e4 <HAL_RCC_OscConfig+0x28c>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d108      	bne.n	80036c8 <HAL_RCC_OscConfig+0x270>
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80036be:	4a08      	ldr	r2, [pc, #32]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80036c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c4:	6053      	str	r3, [r2, #4]
 80036c6:	e031      	b.n	800372c <HAL_RCC_OscConfig+0x2d4>
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	031b      	lsls	r3, r3, #12
 80036d6:	4902      	ldr	r1, [pc, #8]	; (80036e0 <HAL_RCC_OscConfig+0x288>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
 80036dc:	e026      	b.n	800372c <HAL_RCC_OscConfig+0x2d4>
 80036de:	bf00      	nop
 80036e0:	58024400 	.word	0x58024400
 80036e4:	4b9a      	ldr	r3, [pc, #616]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	4997      	ldr	r1, [pc, #604]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]
 80036f8:	e018      	b.n	800372c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fa:	4b95      	ldr	r3, [pc, #596]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a94      	ldr	r2, [pc, #592]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fe fbeb 	bl	8001ee0 <HAL_GetTick>
 800370a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800370e:	f7fe fbe7 	bl	8001ee0 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e2c2      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003720:	4b8b      	ldr	r3, [pc, #556]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f0      	bne.n	800370e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80a9 	beq.w	800388c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373a:	4b85      	ldr	r3, [pc, #532]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003742:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003744:	4b82      	ldr	r3, [pc, #520]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d007      	beq.n	8003760 <HAL_RCC_OscConfig+0x308>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b18      	cmp	r3, #24
 8003754:	d13a      	bne.n	80037cc <HAL_RCC_OscConfig+0x374>
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d135      	bne.n	80037cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003760:	4b7b      	ldr	r3, [pc, #492]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_OscConfig+0x320>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d001      	beq.n	8003778 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e296      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003778:	f7fe fbe2 	bl	8001f40 <HAL_GetREVID>
 800377c:	4603      	mov	r3, r0
 800377e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003782:	4293      	cmp	r3, r2
 8003784:	d817      	bhi.n	80037b6 <HAL_RCC_OscConfig+0x35e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	2b20      	cmp	r3, #32
 800378c:	d108      	bne.n	80037a0 <HAL_RCC_OscConfig+0x348>
 800378e:	4b70      	ldr	r3, [pc, #448]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003796:	4a6e      	ldr	r2, [pc, #440]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003798:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800379c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800379e:	e075      	b.n	800388c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037a0:	4b6b      	ldr	r3, [pc, #428]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	069b      	lsls	r3, r3, #26
 80037ae:	4968      	ldr	r1, [pc, #416]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037b4:	e06a      	b.n	800388c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037b6:	4b66      	ldr	r3, [pc, #408]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	061b      	lsls	r3, r3, #24
 80037c4:	4962      	ldr	r1, [pc, #392]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037ca:	e05f      	b.n	800388c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d042      	beq.n	800385a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80037d4:	4b5e      	ldr	r3, [pc, #376]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a5d      	ldr	r2, [pc, #372]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80037da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fe fb7e 	bl	8001ee0 <HAL_GetTick>
 80037e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80037e8:	f7fe fb7a 	bl	8001ee0 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e255      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037fa:	4b55      	ldr	r3, [pc, #340]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003806:	f7fe fb9b 	bl	8001f40 <HAL_GetREVID>
 800380a:	4603      	mov	r3, r0
 800380c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003810:	4293      	cmp	r3, r2
 8003812:	d817      	bhi.n	8003844 <HAL_RCC_OscConfig+0x3ec>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	2b20      	cmp	r3, #32
 800381a:	d108      	bne.n	800382e <HAL_RCC_OscConfig+0x3d6>
 800381c:	4b4c      	ldr	r3, [pc, #304]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003824:	4a4a      	ldr	r2, [pc, #296]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003826:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800382a:	6053      	str	r3, [r2, #4]
 800382c:	e02e      	b.n	800388c <HAL_RCC_OscConfig+0x434>
 800382e:	4b48      	ldr	r3, [pc, #288]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	069b      	lsls	r3, r3, #26
 800383c:	4944      	ldr	r1, [pc, #272]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]
 8003842:	e023      	b.n	800388c <HAL_RCC_OscConfig+0x434>
 8003844:	4b42      	ldr	r3, [pc, #264]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	493f      	ldr	r1, [pc, #252]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003854:	4313      	orrs	r3, r2
 8003856:	60cb      	str	r3, [r1, #12]
 8003858:	e018      	b.n	800388c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800385a:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a3c      	ldr	r2, [pc, #240]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003866:	f7fe fb3b 	bl	8001ee0 <HAL_GetTick>
 800386a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800386e:	f7fe fb37 	bl	8001ee0 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e212      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003880:	4b33      	ldr	r3, [pc, #204]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f0      	bne.n	800386e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d036      	beq.n	8003906 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d019      	beq.n	80038d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a0:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80038a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a4:	4a2a      	ldr	r2, [pc, #168]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ac:	f7fe fb18 	bl	8001ee0 <HAL_GetTick>
 80038b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b4:	f7fe fb14 	bl	8001ee0 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e1ef      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038c6:	4b22      	ldr	r3, [pc, #136]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80038c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0x45c>
 80038d2:	e018      	b.n	8003906 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d4:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80038d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d8:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e0:	f7fe fafe 	bl	8001ee0 <HAL_GetTick>
 80038e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e8:	f7fe fafa 	bl	8001ee0 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e1d5      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80038fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d039      	beq.n	8003986 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d01c      	beq.n	8003954 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a0c      	ldr	r2, [pc, #48]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003924:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003926:	f7fe fadb 	bl	8001ee0 <HAL_GetTick>
 800392a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800392e:	f7fe fad7 	bl	8001ee0 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e1b2      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x4d6>
 800394c:	e01b      	b.n	8003986 <HAL_RCC_OscConfig+0x52e>
 800394e:	bf00      	nop
 8003950:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003954:	4b9b      	ldr	r3, [pc, #620]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a9a      	ldr	r2, [pc, #616]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 800395a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800395e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003960:	f7fe fabe 	bl	8001ee0 <HAL_GetTick>
 8003964:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003968:	f7fe faba 	bl	8001ee0 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e195      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800397a:	4b92      	ldr	r3, [pc, #584]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8081 	beq.w	8003a96 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003994:	4b8c      	ldr	r3, [pc, #560]	; (8003bc8 <HAL_RCC_OscConfig+0x770>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a8b      	ldr	r2, [pc, #556]	; (8003bc8 <HAL_RCC_OscConfig+0x770>)
 800399a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039a0:	f7fe fa9e 	bl	8001ee0 <HAL_GetTick>
 80039a4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039a8:	f7fe fa9a 	bl	8001ee0 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e175      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ba:	4b83      	ldr	r3, [pc, #524]	; (8003bc8 <HAL_RCC_OscConfig+0x770>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d106      	bne.n	80039dc <HAL_RCC_OscConfig+0x584>
 80039ce:	4b7d      	ldr	r3, [pc, #500]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	4a7c      	ldr	r2, [pc, #496]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	6713      	str	r3, [r2, #112]	; 0x70
 80039da:	e02d      	b.n	8003a38 <HAL_RCC_OscConfig+0x5e0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10c      	bne.n	80039fe <HAL_RCC_OscConfig+0x5a6>
 80039e4:	4b77      	ldr	r3, [pc, #476]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	4a76      	ldr	r2, [pc, #472]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 80039ea:	f023 0301 	bic.w	r3, r3, #1
 80039ee:	6713      	str	r3, [r2, #112]	; 0x70
 80039f0:	4b74      	ldr	r3, [pc, #464]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	4a73      	ldr	r2, [pc, #460]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 80039f6:	f023 0304 	bic.w	r3, r3, #4
 80039fa:	6713      	str	r3, [r2, #112]	; 0x70
 80039fc:	e01c      	b.n	8003a38 <HAL_RCC_OscConfig+0x5e0>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b05      	cmp	r3, #5
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x5c8>
 8003a06:	4b6f      	ldr	r3, [pc, #444]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	4a6e      	ldr	r2, [pc, #440]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	6713      	str	r3, [r2, #112]	; 0x70
 8003a12:	4b6c      	ldr	r3, [pc, #432]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	4a6b      	ldr	r2, [pc, #428]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1e:	e00b      	b.n	8003a38 <HAL_RCC_OscConfig+0x5e0>
 8003a20:	4b68      	ldr	r3, [pc, #416]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	4a67      	ldr	r2, [pc, #412]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2c:	4b65      	ldr	r3, [pc, #404]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	4a64      	ldr	r2, [pc, #400]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a32:	f023 0304 	bic.w	r3, r3, #4
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d015      	beq.n	8003a6c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fe fa4e 	bl	8001ee0 <HAL_GetTick>
 8003a44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a48:	f7fe fa4a 	bl	8001ee0 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e123      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a5e:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0ee      	beq.n	8003a48 <HAL_RCC_OscConfig+0x5f0>
 8003a6a:	e014      	b.n	8003a96 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fe fa38 	bl	8001ee0 <HAL_GetTick>
 8003a70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7fe fa34 	bl	8001ee0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e10d      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a8a:	4b4e      	ldr	r3, [pc, #312]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1ee      	bne.n	8003a74 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8102 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003aa0:	4b48      	ldr	r3, [pc, #288]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aa8:	2b18      	cmp	r3, #24
 8003aaa:	f000 80bd 	beq.w	8003c28 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	f040 809e 	bne.w	8003bf4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab8:	4b42      	ldr	r3, [pc, #264]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a41      	ldr	r2, [pc, #260]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003abe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fe fa0c 	bl	8001ee0 <HAL_GetTick>
 8003ac8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fe fa08 	bl	8001ee0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0e3      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ade:	4b39      	ldr	r3, [pc, #228]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aea:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aee:	4b37      	ldr	r3, [pc, #220]	; (8003bcc <HAL_RCC_OscConfig+0x774>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003afa:	0112      	lsls	r2, r2, #4
 8003afc:	430a      	orrs	r2, r1
 8003afe:	4931      	ldr	r1, [pc, #196]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	628b      	str	r3, [r1, #40]	; 0x28
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b12:	3b01      	subs	r3, #1
 8003b14:	025b      	lsls	r3, r3, #9
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	061b      	lsls	r3, r3, #24
 8003b30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b34:	4923      	ldr	r1, [pc, #140]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003b3a:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	4a21      	ldr	r2, [pc, #132]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b46:	4b1f      	ldr	r3, [pc, #124]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b4a:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <HAL_RCC_OscConfig+0x778>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b52:	00d2      	lsls	r2, r2, #3
 8003b54:	491b      	ldr	r1, [pc, #108]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b5a:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	f023 020c 	bic.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	4917      	ldr	r1, [pc, #92]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003b6c:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	f023 0202 	bic.w	r2, r3, #2
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b78:	4912      	ldr	r1, [pc, #72]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b7e:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	4a10      	ldr	r2, [pc, #64]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	4a0d      	ldr	r2, [pc, #52]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003b96:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	4a07      	ldr	r2, [pc, #28]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003bb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fe f991 	bl	8001ee0 <HAL_GetTick>
 8003bbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bc0:	e011      	b.n	8003be6 <HAL_RCC_OscConfig+0x78e>
 8003bc2:	bf00      	nop
 8003bc4:	58024400 	.word	0x58024400
 8003bc8:	58024800 	.word	0x58024800
 8003bcc:	fffffc0c 	.word	0xfffffc0c
 8003bd0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fe f984 	bl	8001ee0 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e05f      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003be6:	4b32      	ldr	r3, [pc, #200]	; (8003cb0 <HAL_RCC_OscConfig+0x858>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x77c>
 8003bf2:	e057      	b.n	8003ca4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf4:	4b2e      	ldr	r3, [pc, #184]	; (8003cb0 <HAL_RCC_OscConfig+0x858>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a2d      	ldr	r2, [pc, #180]	; (8003cb0 <HAL_RCC_OscConfig+0x858>)
 8003bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fe f96e 	bl	8001ee0 <HAL_GetTick>
 8003c04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fe f96a 	bl	8001ee0 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e045      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c1a:	4b25      	ldr	r3, [pc, #148]	; (8003cb0 <HAL_RCC_OscConfig+0x858>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x7b0>
 8003c26:	e03d      	b.n	8003ca4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c28:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <HAL_RCC_OscConfig+0x858>)
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c2e:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <HAL_RCC_OscConfig+0x858>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d031      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f003 0203 	and.w	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d12a      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d122      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d11a      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	0a5b      	lsrs	r3, r3, #9
 8003c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c76:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d111      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d108      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	0e1b      	lsrs	r3, r3, #24
 8003c92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3730      	adds	r7, #48	; 0x30
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	58024400 	.word	0x58024400

08003cb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e19c      	b.n	8004002 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc8:	4b8a      	ldr	r3, [pc, #552]	; (8003ef4 <HAL_RCC_ClockConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d910      	bls.n	8003cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd6:	4b87      	ldr	r3, [pc, #540]	; (8003ef4 <HAL_RCC_ClockConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 020f 	bic.w	r2, r3, #15
 8003cde:	4985      	ldr	r1, [pc, #532]	; (8003ef4 <HAL_RCC_ClockConfig+0x240>)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce6:	4b83      	ldr	r3, [pc, #524]	; (8003ef4 <HAL_RCC_ClockConfig+0x240>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d001      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e184      	b.n	8004002 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	4b7b      	ldr	r3, [pc, #492]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d908      	bls.n	8003d26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d14:	4b78      	ldr	r3, [pc, #480]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	4975      	ldr	r1, [pc, #468]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d010      	beq.n	8003d54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	4b70      	ldr	r3, [pc, #448]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d908      	bls.n	8003d54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d42:	4b6d      	ldr	r3, [pc, #436]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	496a      	ldr	r1, [pc, #424]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d010      	beq.n	8003d82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	4b64      	ldr	r3, [pc, #400]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d908      	bls.n	8003d82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d70:	4b61      	ldr	r3, [pc, #388]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	495e      	ldr	r1, [pc, #376]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d010      	beq.n	8003db0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69da      	ldr	r2, [r3, #28]
 8003d92:	4b59      	ldr	r3, [pc, #356]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d908      	bls.n	8003db0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d9e:	4b56      	ldr	r3, [pc, #344]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	4953      	ldr	r1, [pc, #332]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d010      	beq.n	8003dde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	4b4d      	ldr	r3, [pc, #308]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d908      	bls.n	8003dde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dcc:	4b4a      	ldr	r3, [pc, #296]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f023 020f 	bic.w	r2, r3, #15
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4947      	ldr	r1, [pc, #284]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d055      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003dea:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	4940      	ldr	r1, [pc, #256]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d107      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e04:	4b3c      	ldr	r3, [pc, #240]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d121      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0f6      	b.n	8004002 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d107      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e1c:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d115      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0ea      	b.n	8004002 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d107      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e34:	4b30      	ldr	r3, [pc, #192]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0de      	b.n	8004002 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e44:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0d6      	b.n	8004002 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e54:	4b28      	ldr	r3, [pc, #160]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f023 0207 	bic.w	r2, r3, #7
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	4925      	ldr	r1, [pc, #148]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e66:	f7fe f83b 	bl	8001ee0 <HAL_GetTick>
 8003e6a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6c:	e00a      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e6e:	f7fe f837 	bl	8001ee0 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e0be      	b.n	8004002 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e84:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d1eb      	bne.n	8003e6e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d010      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d208      	bcs.n	8003ec4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f023 020f 	bic.w	r2, r3, #15
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	490e      	ldr	r1, [pc, #56]	; (8003ef8 <HAL_RCC_ClockConfig+0x244>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_ClockConfig+0x240>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d214      	bcs.n	8003efc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <HAL_RCC_ClockConfig+0x240>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 020f 	bic.w	r2, r3, #15
 8003eda:	4906      	ldr	r1, [pc, #24]	; (8003ef4 <HAL_RCC_ClockConfig+0x240>)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <HAL_RCC_ClockConfig+0x240>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e086      	b.n	8004002 <HAL_RCC_ClockConfig+0x34e>
 8003ef4:	52002000 	.word	0x52002000
 8003ef8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d010      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	4b3f      	ldr	r3, [pc, #252]	; (800400c <HAL_RCC_ClockConfig+0x358>)
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d208      	bcs.n	8003f2a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f18:	4b3c      	ldr	r3, [pc, #240]	; (800400c <HAL_RCC_ClockConfig+0x358>)
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	4939      	ldr	r1, [pc, #228]	; (800400c <HAL_RCC_ClockConfig+0x358>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d010      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	4b34      	ldr	r3, [pc, #208]	; (800400c <HAL_RCC_ClockConfig+0x358>)
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d208      	bcs.n	8003f58 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f46:	4b31      	ldr	r3, [pc, #196]	; (800400c <HAL_RCC_ClockConfig+0x358>)
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	492e      	ldr	r1, [pc, #184]	; (800400c <HAL_RCC_ClockConfig+0x358>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d010      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	4b28      	ldr	r3, [pc, #160]	; (800400c <HAL_RCC_ClockConfig+0x358>)
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d208      	bcs.n	8003f86 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f74:	4b25      	ldr	r3, [pc, #148]	; (800400c <HAL_RCC_ClockConfig+0x358>)
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4922      	ldr	r1, [pc, #136]	; (800400c <HAL_RCC_ClockConfig+0x358>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d010      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69da      	ldr	r2, [r3, #28]
 8003f96:	4b1d      	ldr	r3, [pc, #116]	; (800400c <HAL_RCC_ClockConfig+0x358>)
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d208      	bcs.n	8003fb4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003fa2:	4b1a      	ldr	r3, [pc, #104]	; (800400c <HAL_RCC_ClockConfig+0x358>)
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	4917      	ldr	r1, [pc, #92]	; (800400c <HAL_RCC_ClockConfig+0x358>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fb4:	f000 f834 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	4b14      	ldr	r3, [pc, #80]	; (800400c <HAL_RCC_ClockConfig+0x358>)
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	4912      	ldr	r1, [pc, #72]	; (8004010 <HAL_RCC_ClockConfig+0x35c>)
 8003fc6:	5ccb      	ldrb	r3, [r1, r3]
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fd2:	4b0e      	ldr	r3, [pc, #56]	; (800400c <HAL_RCC_ClockConfig+0x358>)
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	4a0d      	ldr	r2, [pc, #52]	; (8004010 <HAL_RCC_ClockConfig+0x35c>)
 8003fdc:	5cd3      	ldrb	r3, [r2, r3]
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe8:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <HAL_RCC_ClockConfig+0x360>)
 8003fea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fec:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <HAL_RCC_ClockConfig+0x364>)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <HAL_RCC_ClockConfig+0x368>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd ff28 	bl	8001e4c <HAL_InitTick>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	58024400 	.word	0x58024400
 8004010:	0800b1c4 	.word	0x0800b1c4
 8004014:	24000004 	.word	0x24000004
 8004018:	24000000 	.word	0x24000000
 800401c:	2400000c 	.word	0x2400000c

08004020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004020:	b480      	push	{r7}
 8004022:	b089      	sub	sp, #36	; 0x24
 8004024:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004026:	4bb3      	ldr	r3, [pc, #716]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800402e:	2b18      	cmp	r3, #24
 8004030:	f200 8155 	bhi.w	80042de <HAL_RCC_GetSysClockFreq+0x2be>
 8004034:	a201      	add	r2, pc, #4	; (adr r2, 800403c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403a:	bf00      	nop
 800403c:	080040a1 	.word	0x080040a1
 8004040:	080042df 	.word	0x080042df
 8004044:	080042df 	.word	0x080042df
 8004048:	080042df 	.word	0x080042df
 800404c:	080042df 	.word	0x080042df
 8004050:	080042df 	.word	0x080042df
 8004054:	080042df 	.word	0x080042df
 8004058:	080042df 	.word	0x080042df
 800405c:	080040c7 	.word	0x080040c7
 8004060:	080042df 	.word	0x080042df
 8004064:	080042df 	.word	0x080042df
 8004068:	080042df 	.word	0x080042df
 800406c:	080042df 	.word	0x080042df
 8004070:	080042df 	.word	0x080042df
 8004074:	080042df 	.word	0x080042df
 8004078:	080042df 	.word	0x080042df
 800407c:	080040cd 	.word	0x080040cd
 8004080:	080042df 	.word	0x080042df
 8004084:	080042df 	.word	0x080042df
 8004088:	080042df 	.word	0x080042df
 800408c:	080042df 	.word	0x080042df
 8004090:	080042df 	.word	0x080042df
 8004094:	080042df 	.word	0x080042df
 8004098:	080042df 	.word	0x080042df
 800409c:	080040d3 	.word	0x080040d3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040a0:	4b94      	ldr	r3, [pc, #592]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d009      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040ac:	4b91      	ldr	r3, [pc, #580]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	08db      	lsrs	r3, r3, #3
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	4a90      	ldr	r2, [pc, #576]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
 80040bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80040be:	e111      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80040c0:	4b8d      	ldr	r3, [pc, #564]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040c2:	61bb      	str	r3, [r7, #24]
    break;
 80040c4:	e10e      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80040c6:	4b8d      	ldr	r3, [pc, #564]	; (80042fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80040c8:	61bb      	str	r3, [r7, #24]
    break;
 80040ca:	e10b      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80040cc:	4b8c      	ldr	r3, [pc, #560]	; (8004300 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80040ce:	61bb      	str	r3, [r7, #24]
    break;
 80040d0:	e108      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040d2:	4b88      	ldr	r3, [pc, #544]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80040dc:	4b85      	ldr	r3, [pc, #532]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80040e8:	4b82      	ldr	r3, [pc, #520]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80040f2:	4b80      	ldr	r3, [pc, #512]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	08db      	lsrs	r3, r3, #3
 80040f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80e1 	beq.w	80042d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b02      	cmp	r3, #2
 800411a:	f000 8083 	beq.w	8004224 <HAL_RCC_GetSysClockFreq+0x204>
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b02      	cmp	r3, #2
 8004122:	f200 80a1 	bhi.w	8004268 <HAL_RCC_GetSysClockFreq+0x248>
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_RCC_GetSysClockFreq+0x114>
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d056      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004132:	e099      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004134:	4b6f      	ldr	r3, [pc, #444]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d02d      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004140:	4b6c      	ldr	r3, [pc, #432]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	08db      	lsrs	r3, r3, #3
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	4a6b      	ldr	r2, [pc, #428]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
 8004150:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	ee07 3a90 	vmov	s15, r3
 8004158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800416a:	4b62      	ldr	r3, [pc, #392]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004172:	ee07 3a90 	vmov	s15, r3
 8004176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800417a:	ed97 6a02 	vldr	s12, [r7, #8]
 800417e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004304 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800418a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800418e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004196:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800419a:	e087      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004308 <HAL_RCC_GetSysClockFreq+0x2e8>
 80041aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ae:	4b51      	ldr	r3, [pc, #324]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b6:	ee07 3a90 	vmov	s15, r3
 80041ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041be:	ed97 6a02 	vldr	s12, [r7, #8]
 80041c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004304 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041de:	e065      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	ee07 3a90 	vmov	s15, r3
 80041e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800430c <HAL_RCC_GetSysClockFreq+0x2ec>
 80041ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041f2:	4b40      	ldr	r3, [pc, #256]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004202:	ed97 6a02 	vldr	s12, [r7, #8]
 8004206:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800420a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800420e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800421a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004222:	e043      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004310 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004236:	4b2f      	ldr	r3, [pc, #188]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423e:	ee07 3a90 	vmov	s15, r3
 8004242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004246:	ed97 6a02 	vldr	s12, [r7, #8]
 800424a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800424e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800425a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800425e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004266:	e021      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004272:	eddf 6a26 	vldr	s13, [pc, #152]	; 800430c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800427a:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800428a:	ed97 6a02 	vldr	s12, [r7, #8]
 800428e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004304 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800429a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800429e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042aa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80042ac:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	0a5b      	lsrs	r3, r3, #9
 80042b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042b6:	3301      	adds	r3, #1
 80042b8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	ee07 3a90 	vmov	s15, r3
 80042c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80042c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042d0:	ee17 3a90 	vmov	r3, s15
 80042d4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80042d6:	e005      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	61bb      	str	r3, [r7, #24]
    break;
 80042dc:	e002      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80042de:	4b07      	ldr	r3, [pc, #28]	; (80042fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042e0:	61bb      	str	r3, [r7, #24]
    break;
 80042e2:	bf00      	nop
  }

  return sysclockfreq;
 80042e4:	69bb      	ldr	r3, [r7, #24]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3724      	adds	r7, #36	; 0x24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	58024400 	.word	0x58024400
 80042f8:	03d09000 	.word	0x03d09000
 80042fc:	003d0900 	.word	0x003d0900
 8004300:	007a1200 	.word	0x007a1200
 8004304:	46000000 	.word	0x46000000
 8004308:	4c742400 	.word	0x4c742400
 800430c:	4a742400 	.word	0x4a742400
 8004310:	4af42400 	.word	0x4af42400

08004314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800431a:	f7ff fe81 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 800431e:	4602      	mov	r2, r0
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <HAL_RCC_GetHCLKFreq+0x50>)
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	0a1b      	lsrs	r3, r3, #8
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	490f      	ldr	r1, [pc, #60]	; (8004368 <HAL_RCC_GetHCLKFreq+0x54>)
 800432c:	5ccb      	ldrb	r3, [r1, r3]
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	fa22 f303 	lsr.w	r3, r2, r3
 8004336:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <HAL_RCC_GetHCLKFreq+0x50>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	4a09      	ldr	r2, [pc, #36]	; (8004368 <HAL_RCC_GetHCLKFreq+0x54>)
 8004342:	5cd3      	ldrb	r3, [r2, r3]
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	fa22 f303 	lsr.w	r3, r2, r3
 800434e:	4a07      	ldr	r2, [pc, #28]	; (800436c <HAL_RCC_GetHCLKFreq+0x58>)
 8004350:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004352:	4a07      	ldr	r2, [pc, #28]	; (8004370 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004358:	4b04      	ldr	r3, [pc, #16]	; (800436c <HAL_RCC_GetHCLKFreq+0x58>)
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	58024400 	.word	0x58024400
 8004368:	0800b1c4 	.word	0x0800b1c4
 800436c:	24000004 	.word	0x24000004
 8004370:	24000000 	.word	0x24000000

08004374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004378:	f7ff ffcc 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 800437c:	4602      	mov	r2, r0
 800437e:	4b06      	ldr	r3, [pc, #24]	; (8004398 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	091b      	lsrs	r3, r3, #4
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	4904      	ldr	r1, [pc, #16]	; (800439c <HAL_RCC_GetPCLK1Freq+0x28>)
 800438a:	5ccb      	ldrb	r3, [r1, r3]
 800438c:	f003 031f 	and.w	r3, r3, #31
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004394:	4618      	mov	r0, r3
 8004396:	bd80      	pop	{r7, pc}
 8004398:	58024400 	.word	0x58024400
 800439c:	0800b1c4 	.word	0x0800b1c4

080043a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80043a4:	f7ff ffb6 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	4904      	ldr	r1, [pc, #16]	; (80043c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043b6:	5ccb      	ldrb	r3, [r1, r3]
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	58024400 	.word	0x58024400
 80043c8:	0800b1c4 	.word	0x0800b1c4

080043cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043d4:	2300      	movs	r3, #0
 80043d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043d8:	2300      	movs	r3, #0
 80043da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d03f      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043f0:	d02a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80043f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043f6:	d824      	bhi.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043fc:	d018      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004402:	d81e      	bhi.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440c:	d007      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800440e:	e018      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004410:	4ba3      	ldr	r3, [pc, #652]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	4aa2      	ldr	r2, [pc, #648]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800441a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800441c:	e015      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3304      	adds	r3, #4
 8004422:	2102      	movs	r1, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f001 f9d5 	bl	80057d4 <RCCEx_PLL2_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800442e:	e00c      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3324      	adds	r3, #36	; 0x24
 8004434:	2102      	movs	r1, #2
 8004436:	4618      	mov	r0, r3
 8004438:	f001 fa7e 	bl	8005938 <RCCEx_PLL3_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004440:	e003      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	75fb      	strb	r3, [r7, #23]
      break;
 8004446:	e000      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d109      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004450:	4b93      	ldr	r3, [pc, #588]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800445c:	4990      	ldr	r1, [pc, #576]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800445e:	4313      	orrs	r3, r2
 8004460:	650b      	str	r3, [r1, #80]	; 0x50
 8004462:	e001      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	7dfb      	ldrb	r3, [r7, #23]
 8004466:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d03d      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004478:	2b04      	cmp	r3, #4
 800447a:	d826      	bhi.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	08004499 	.word	0x08004499
 8004488:	080044a7 	.word	0x080044a7
 800448c:	080044b9 	.word	0x080044b9
 8004490:	080044d1 	.word	0x080044d1
 8004494:	080044d1 	.word	0x080044d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004498:	4b81      	ldr	r3, [pc, #516]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	4a80      	ldr	r2, [pc, #512]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800449e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044a4:	e015      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3304      	adds	r3, #4
 80044aa:	2100      	movs	r1, #0
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 f991 	bl	80057d4 <RCCEx_PLL2_Config>
 80044b2:	4603      	mov	r3, r0
 80044b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044b6:	e00c      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3324      	adds	r3, #36	; 0x24
 80044bc:	2100      	movs	r1, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 fa3a 	bl	8005938 <RCCEx_PLL3_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044c8:	e003      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	75fb      	strb	r3, [r7, #23]
      break;
 80044ce:	e000      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80044d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044d8:	4b71      	ldr	r3, [pc, #452]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044dc:	f023 0207 	bic.w	r2, r3, #7
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	496e      	ldr	r1, [pc, #440]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	650b      	str	r3, [r1, #80]	; 0x50
 80044ea:	e001      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
 80044ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d042      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004504:	d02b      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450a:	d825      	bhi.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800450c:	2bc0      	cmp	r3, #192	; 0xc0
 800450e:	d028      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004510:	2bc0      	cmp	r3, #192	; 0xc0
 8004512:	d821      	bhi.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004514:	2b80      	cmp	r3, #128	; 0x80
 8004516:	d016      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004518:	2b80      	cmp	r3, #128	; 0x80
 800451a:	d81d      	bhi.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d007      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004524:	e018      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004526:	4b5e      	ldr	r3, [pc, #376]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	4a5d      	ldr	r2, [pc, #372]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800452c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004530:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004532:	e017      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3304      	adds	r3, #4
 8004538:	2100      	movs	r1, #0
 800453a:	4618      	mov	r0, r3
 800453c:	f001 f94a 	bl	80057d4 <RCCEx_PLL2_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004544:	e00e      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3324      	adds	r3, #36	; 0x24
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f001 f9f3 	bl	8005938 <RCCEx_PLL3_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004556:	e005      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	75fb      	strb	r3, [r7, #23]
      break;
 800455c:	e002      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800455e:	bf00      	nop
 8004560:	e000      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004564:	7dfb      	ldrb	r3, [r7, #23]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800456a:	4b4d      	ldr	r3, [pc, #308]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800456c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004576:	494a      	ldr	r1, [pc, #296]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004578:	4313      	orrs	r3, r2
 800457a:	650b      	str	r3, [r1, #80]	; 0x50
 800457c:	e001      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457e:	7dfb      	ldrb	r3, [r7, #23]
 8004580:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458a:	2b00      	cmp	r3, #0
 800458c:	d049      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004594:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004598:	d030      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800459a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800459e:	d82a      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80045a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045a4:	d02c      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80045a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045aa:	d824      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80045ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b0:	d018      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80045b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b6:	d81e      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80045bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045c0:	d007      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80045c2:	e018      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c4:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	4a35      	ldr	r2, [pc, #212]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045d0:	e017      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	2100      	movs	r1, #0
 80045d8:	4618      	mov	r0, r3
 80045da:	f001 f8fb 	bl	80057d4 <RCCEx_PLL2_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80045e2:	e00e      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3324      	adds	r3, #36	; 0x24
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 f9a4 	bl	8005938 <RCCEx_PLL3_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045f4:	e005      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	75fb      	strb	r3, [r7, #23]
      break;
 80045fa:	e002      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80045fc:	bf00      	nop
 80045fe:	e000      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004602:	7dfb      	ldrb	r3, [r7, #23]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004616:	4922      	ldr	r1, [pc, #136]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004618:	4313      	orrs	r3, r2
 800461a:	658b      	str	r3, [r1, #88]	; 0x58
 800461c:	e001      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461e:	7dfb      	ldrb	r3, [r7, #23]
 8004620:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800462a:	2b00      	cmp	r3, #0
 800462c:	d04b      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004638:	d030      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800463a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800463e:	d82a      	bhi.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004640:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004644:	d02e      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004646:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800464a:	d824      	bhi.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800464c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004650:	d018      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004652:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004656:	d81e      	bhi.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800465c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004660:	d007      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004662:	e018      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004664:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800466a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800466e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004670:	e019      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	2100      	movs	r1, #0
 8004678:	4618      	mov	r0, r3
 800467a:	f001 f8ab 	bl	80057d4 <RCCEx_PLL2_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004682:	e010      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3324      	adds	r3, #36	; 0x24
 8004688:	2100      	movs	r1, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f001 f954 	bl	8005938 <RCCEx_PLL3_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004694:	e007      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	75fb      	strb	r3, [r7, #23]
      break;
 800469a:	e004      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800469c:	bf00      	nop
 800469e:	e002      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80046a0:	58024400 	.word	0x58024400
      break;
 80046a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80046ac:	4b99      	ldr	r3, [pc, #612]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046ba:	4996      	ldr	r1, [pc, #600]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	658b      	str	r3, [r1, #88]	; 0x58
 80046c0:	e001      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
 80046c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d032      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d6:	2b30      	cmp	r3, #48	; 0x30
 80046d8:	d01c      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80046da:	2b30      	cmp	r3, #48	; 0x30
 80046dc:	d817      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d00c      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d813      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d016      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80046ea:	2b10      	cmp	r3, #16
 80046ec:	d10f      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ee:	4b89      	ldr	r3, [pc, #548]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	4a88      	ldr	r2, [pc, #544]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80046fa:	e00e      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	2102      	movs	r1, #2
 8004702:	4618      	mov	r0, r3
 8004704:	f001 f866 	bl	80057d4 <RCCEx_PLL2_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800470c:	e005      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	75fb      	strb	r3, [r7, #23]
      break;
 8004712:	e002      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004714:	bf00      	nop
 8004716:	e000      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d109      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004720:	4b7c      	ldr	r3, [pc, #496]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004724:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472c:	4979      	ldr	r1, [pc, #484]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800472e:	4313      	orrs	r3, r2
 8004730:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004732:	e001      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	7dfb      	ldrb	r3, [r7, #23]
 8004736:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d047      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800474c:	d030      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800474e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004752:	d82a      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004754:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004758:	d02c      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800475a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800475e:	d824      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004764:	d018      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476a:	d81e      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004774:	d007      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004776:	e018      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004778:	4b66      	ldr	r3, [pc, #408]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	4a65      	ldr	r2, [pc, #404]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800477e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004782:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004784:	e017      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3304      	adds	r3, #4
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f001 f821 	bl	80057d4 <RCCEx_PLL2_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004796:	e00e      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3324      	adds	r3, #36	; 0x24
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f001 f8ca 	bl	8005938 <RCCEx_PLL3_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80047a8:	e005      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
      break;
 80047ae:	e002      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80047b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80047bc:	4b55      	ldr	r3, [pc, #340]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c8:	4952      	ldr	r1, [pc, #328]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	650b      	str	r3, [r1, #80]	; 0x50
 80047ce:	e001      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d0:	7dfb      	ldrb	r3, [r7, #23]
 80047d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d049      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047e8:	d02e      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80047ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047ee:	d828      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80047f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047f4:	d02a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x480>
 80047f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047fa:	d822      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80047fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004800:	d026      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004802:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004806:	d81c      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800480c:	d010      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800480e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004812:	d816      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01d      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481c:	d111      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3304      	adds	r3, #4
 8004822:	2101      	movs	r1, #1
 8004824:	4618      	mov	r0, r3
 8004826:	f000 ffd5 	bl	80057d4 <RCCEx_PLL2_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800482e:	e012      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3324      	adds	r3, #36	; 0x24
 8004834:	2101      	movs	r1, #1
 8004836:	4618      	mov	r0, r3
 8004838:	f001 f87e 	bl	8005938 <RCCEx_PLL3_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004840:	e009      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
      break;
 8004846:	e006      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004848:	bf00      	nop
 800484a:	e004      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800484c:	bf00      	nop
 800484e:	e002      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004850:	bf00      	nop
 8004852:	e000      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800485c:	4b2d      	ldr	r3, [pc, #180]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800485e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004860:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004868:	492a      	ldr	r1, [pc, #168]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800486a:	4313      	orrs	r3, r2
 800486c:	650b      	str	r3, [r1, #80]	; 0x50
 800486e:	e001      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	7dfb      	ldrb	r3, [r7, #23]
 8004872:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d04d      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004886:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800488a:	d02e      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800488c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004890:	d828      	bhi.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004896:	d02a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d822      	bhi.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800489e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048a2:	d026      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80048a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048a8:	d81c      	bhi.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80048aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ae:	d010      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80048b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048b4:	d816      	bhi.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01d      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80048ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048be:	d111      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	2101      	movs	r1, #1
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 ff84 	bl	80057d4 <RCCEx_PLL2_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80048d0:	e012      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3324      	adds	r3, #36	; 0x24
 80048d6:	2101      	movs	r1, #1
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 f82d 	bl	8005938 <RCCEx_PLL3_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80048e2:	e009      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	75fb      	strb	r3, [r7, #23]
      break;
 80048e8:	e006      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80048ea:	bf00      	nop
 80048ec:	e004      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80048ee:	bf00      	nop
 80048f0:	e002      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80048f2:	bf00      	nop
 80048f4:	e000      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80048f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10c      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80048fe:	4b05      	ldr	r3, [pc, #20]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004902:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800490c:	4901      	ldr	r1, [pc, #4]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800490e:	4313      	orrs	r3, r2
 8004910:	658b      	str	r3, [r1, #88]	; 0x58
 8004912:	e003      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004914:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004918:	7dfb      	ldrb	r3, [r7, #23]
 800491a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d02f      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800492c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004930:	d00e      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004936:	d814      	bhi.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d015      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800493c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004940:	d10f      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004942:	4baf      	ldr	r3, [pc, #700]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004946:	4aae      	ldr	r2, [pc, #696]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800494c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800494e:	e00c      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	2101      	movs	r1, #1
 8004956:	4618      	mov	r0, r3
 8004958:	f000 ff3c 	bl	80057d4 <RCCEx_PLL2_Config>
 800495c:	4603      	mov	r3, r0
 800495e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004960:	e003      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	75fb      	strb	r3, [r7, #23]
      break;
 8004966:	e000      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800496a:	7dfb      	ldrb	r3, [r7, #23]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d109      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004970:	4ba3      	ldr	r3, [pc, #652]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004974:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800497c:	49a0      	ldr	r1, [pc, #640]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800497e:	4313      	orrs	r3, r2
 8004980:	650b      	str	r3, [r1, #80]	; 0x50
 8004982:	e001      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004984:	7dfb      	ldrb	r3, [r7, #23]
 8004986:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d032      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004998:	2b03      	cmp	r3, #3
 800499a:	d81b      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049db 	.word	0x080049db
 80049a8:	080049b5 	.word	0x080049b5
 80049ac:	080049c3 	.word	0x080049c3
 80049b0:	080049db 	.word	0x080049db
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b4:	4b92      	ldr	r3, [pc, #584]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	4a91      	ldr	r2, [pc, #580]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80049c0:	e00c      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3304      	adds	r3, #4
 80049c6:	2102      	movs	r1, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 ff03 	bl	80057d4 <RCCEx_PLL2_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80049d2:	e003      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	75fb      	strb	r3, [r7, #23]
      break;
 80049d8:	e000      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80049da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d109      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80049e2:	4b87      	ldr	r3, [pc, #540]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e6:	f023 0203 	bic.w	r2, r3, #3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	4984      	ldr	r1, [pc, #528]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049f4:	e001      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f6:	7dfb      	ldrb	r3, [r7, #23]
 80049f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8086 	beq.w	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a08:	4b7e      	ldr	r3, [pc, #504]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a7d      	ldr	r2, [pc, #500]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a14:	f7fd fa64 	bl	8001ee0 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a1a:	e009      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a1c:	f7fd fa60 	bl	8001ee0 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	; 0x64
 8004a28:	d902      	bls.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	75fb      	strb	r3, [r7, #23]
        break;
 8004a2e:	e005      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a30:	4b74      	ldr	r3, [pc, #464]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0ef      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d166      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004a42:	4b6f      	ldr	r3, [pc, #444]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a4c:	4053      	eors	r3, r2
 8004a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d013      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a56:	4b6a      	ldr	r3, [pc, #424]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a5e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a60:	4b67      	ldr	r3, [pc, #412]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	4a66      	ldr	r2, [pc, #408]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a6c:	4b64      	ldr	r3, [pc, #400]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	4a63      	ldr	r2, [pc, #396]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a76:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004a78:	4a61      	ldr	r2, [pc, #388]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a88:	d115      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7fd fa29 	bl	8001ee0 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a90:	e00b      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a92:	f7fd fa25 	bl	8001ee0 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d902      	bls.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	75fb      	strb	r3, [r7, #23]
            break;
 8004aa8:	e005      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aaa:	4b55      	ldr	r3, [pc, #340]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0ed      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d126      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aca:	d10d      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004acc:	4b4c      	ldr	r3, [pc, #304]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ada:	0919      	lsrs	r1, r3, #4
 8004adc:	4b4a      	ldr	r3, [pc, #296]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004ade:	400b      	ands	r3, r1
 8004ae0:	4947      	ldr	r1, [pc, #284]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	610b      	str	r3, [r1, #16]
 8004ae6:	e005      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004ae8:	4b45      	ldr	r3, [pc, #276]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	4a44      	ldr	r2, [pc, #272]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004aee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004af2:	6113      	str	r3, [r2, #16]
 8004af4:	4b42      	ldr	r3, [pc, #264]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004af6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b02:	493f      	ldr	r1, [pc, #252]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	670b      	str	r3, [r1, #112]	; 0x70
 8004b08:	e004      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
 8004b0c:	75bb      	strb	r3, [r7, #22]
 8004b0e:	e001      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
 8004b12:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8085 	beq.w	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b26:	2b28      	cmp	r3, #40	; 0x28
 8004b28:	d866      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004b2a:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004c0d 	.word	0x08004c0d
 8004b34:	08004bf9 	.word	0x08004bf9
 8004b38:	08004bf9 	.word	0x08004bf9
 8004b3c:	08004bf9 	.word	0x08004bf9
 8004b40:	08004bf9 	.word	0x08004bf9
 8004b44:	08004bf9 	.word	0x08004bf9
 8004b48:	08004bf9 	.word	0x08004bf9
 8004b4c:	08004bf9 	.word	0x08004bf9
 8004b50:	08004bd5 	.word	0x08004bd5
 8004b54:	08004bf9 	.word	0x08004bf9
 8004b58:	08004bf9 	.word	0x08004bf9
 8004b5c:	08004bf9 	.word	0x08004bf9
 8004b60:	08004bf9 	.word	0x08004bf9
 8004b64:	08004bf9 	.word	0x08004bf9
 8004b68:	08004bf9 	.word	0x08004bf9
 8004b6c:	08004bf9 	.word	0x08004bf9
 8004b70:	08004be7 	.word	0x08004be7
 8004b74:	08004bf9 	.word	0x08004bf9
 8004b78:	08004bf9 	.word	0x08004bf9
 8004b7c:	08004bf9 	.word	0x08004bf9
 8004b80:	08004bf9 	.word	0x08004bf9
 8004b84:	08004bf9 	.word	0x08004bf9
 8004b88:	08004bf9 	.word	0x08004bf9
 8004b8c:	08004bf9 	.word	0x08004bf9
 8004b90:	08004c0d 	.word	0x08004c0d
 8004b94:	08004bf9 	.word	0x08004bf9
 8004b98:	08004bf9 	.word	0x08004bf9
 8004b9c:	08004bf9 	.word	0x08004bf9
 8004ba0:	08004bf9 	.word	0x08004bf9
 8004ba4:	08004bf9 	.word	0x08004bf9
 8004ba8:	08004bf9 	.word	0x08004bf9
 8004bac:	08004bf9 	.word	0x08004bf9
 8004bb0:	08004c0d 	.word	0x08004c0d
 8004bb4:	08004bf9 	.word	0x08004bf9
 8004bb8:	08004bf9 	.word	0x08004bf9
 8004bbc:	08004bf9 	.word	0x08004bf9
 8004bc0:	08004bf9 	.word	0x08004bf9
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004bf9 	.word	0x08004bf9
 8004bcc:	08004bf9 	.word	0x08004bf9
 8004bd0:	08004c0d 	.word	0x08004c0d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	2101      	movs	r1, #1
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fdfa 	bl	80057d4 <RCCEx_PLL2_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004be4:	e013      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3324      	adds	r3, #36	; 0x24
 8004bea:	2101      	movs	r1, #1
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fea3 	bl	8005938 <RCCEx_PLL3_Config>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004bfc:	e007      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004bfe:	bf00      	nop
 8004c00:	58024400 	.word	0x58024400
 8004c04:	58024800 	.word	0x58024800
 8004c08:	00ffffcf 	.word	0x00ffffcf
      break;
 8004c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c14:	4b96      	ldr	r3, [pc, #600]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c18:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c20:	4993      	ldr	r1, [pc, #588]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	654b      	str	r3, [r1, #84]	; 0x54
 8004c26:	e001      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d038      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3c:	2b05      	cmp	r3, #5
 8004c3e:	d821      	bhi.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004c40:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c46:	bf00      	nop
 8004c48:	08004c8b 	.word	0x08004c8b
 8004c4c:	08004c61 	.word	0x08004c61
 8004c50:	08004c73 	.word	0x08004c73
 8004c54:	08004c8b 	.word	0x08004c8b
 8004c58:	08004c8b 	.word	0x08004c8b
 8004c5c:	08004c8b 	.word	0x08004c8b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3304      	adds	r3, #4
 8004c64:	2101      	movs	r1, #1
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fdb4 	bl	80057d4 <RCCEx_PLL2_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004c70:	e00c      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3324      	adds	r3, #36	; 0x24
 8004c76:	2101      	movs	r1, #1
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 fe5d 	bl	8005938 <RCCEx_PLL3_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004c82:	e003      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	75fb      	strb	r3, [r7, #23]
      break;
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d109      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004c92:	4b77      	ldr	r3, [pc, #476]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	f023 0207 	bic.w	r2, r3, #7
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9e:	4974      	ldr	r1, [pc, #464]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	654b      	str	r3, [r1, #84]	; 0x54
 8004ca4:	e001      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
 8004ca8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d03a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbc:	2b05      	cmp	r3, #5
 8004cbe:	d821      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004cc0:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004d0b 	.word	0x08004d0b
 8004ccc:	08004ce1 	.word	0x08004ce1
 8004cd0:	08004cf3 	.word	0x08004cf3
 8004cd4:	08004d0b 	.word	0x08004d0b
 8004cd8:	08004d0b 	.word	0x08004d0b
 8004cdc:	08004d0b 	.word	0x08004d0b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fd74 	bl	80057d4 <RCCEx_PLL2_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004cf0:	e00c      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3324      	adds	r3, #36	; 0x24
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fe1d 	bl	8005938 <RCCEx_PLL3_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004d02:	e003      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	75fb      	strb	r3, [r7, #23]
      break;
 8004d08:	e000      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d12:	4b57      	ldr	r3, [pc, #348]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	f023 0207 	bic.w	r2, r3, #7
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d20:	4953      	ldr	r1, [pc, #332]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	658b      	str	r3, [r1, #88]	; 0x58
 8004d26:	e001      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
 8004d2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d04b      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d42:	d02e      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d48:	d828      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4e:	d02a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d54:	d822      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004d56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d5a:	d026      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004d5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d60:	d81c      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004d62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d66:	d010      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d6c:	d816      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01d      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004d72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d76:	d111      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fd28 	bl	80057d4 <RCCEx_PLL2_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004d88:	e012      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3324      	adds	r3, #36	; 0x24
 8004d8e:	2102      	movs	r1, #2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fdd1 	bl	8005938 <RCCEx_PLL3_Config>
 8004d96:	4603      	mov	r3, r0
 8004d98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004d9a:	e009      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004da0:	e006      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004da2:	bf00      	nop
 8004da4:	e004      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004da6:	bf00      	nop
 8004da8:	e002      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10a      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004db6:	4b2e      	ldr	r3, [pc, #184]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc4:	492a      	ldr	r1, [pc, #168]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	654b      	str	r3, [r1, #84]	; 0x54
 8004dca:	e001      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dcc:	7dfb      	ldrb	r3, [r7, #23]
 8004dce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d04d      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004de2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004de6:	d02e      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004de8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004dec:	d828      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	d02a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df8:	d822      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004dfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dfe:	d026      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004e00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e04:	d81c      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e0a:	d010      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e10:	d816      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01d      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1a:	d111      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fcd6 	bl	80057d4 <RCCEx_PLL2_Config>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004e2c:	e012      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3324      	adds	r3, #36	; 0x24
 8004e32:	2102      	movs	r1, #2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fd7f 	bl	8005938 <RCCEx_PLL3_Config>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004e3e:	e009      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	75fb      	strb	r3, [r7, #23]
      break;
 8004e44:	e006      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004e46:	bf00      	nop
 8004e48:	e004      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004e4a:	bf00      	nop
 8004e4c:	e002      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10c      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e68:	4901      	ldr	r1, [pc, #4]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	658b      	str	r3, [r1, #88]	; 0x58
 8004e6e:	e003      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004e70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d04b      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e8a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e8e:	d02e      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004e90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e94:	d828      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9a:	d02a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea0:	d822      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004ea2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ea6:	d026      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004ea8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004eac:	d81c      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eb2:	d010      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eb8:	d816      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01d      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec2:	d111      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	2100      	movs	r1, #0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fc82 	bl	80057d4 <RCCEx_PLL2_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004ed4:	e012      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3324      	adds	r3, #36	; 0x24
 8004eda:	2102      	movs	r1, #2
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fd2b 	bl	8005938 <RCCEx_PLL3_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004ee6:	e009      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	75fb      	strb	r3, [r7, #23]
      break;
 8004eec:	e006      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e004      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004ef2:	bf00      	nop
 8004ef4:	e002      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004ef6:	bf00      	nop
 8004ef8:	e000      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004efc:	7dfb      	ldrb	r3, [r7, #23]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f02:	4b9d      	ldr	r3, [pc, #628]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f10:	4999      	ldr	r1, [pc, #612]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	658b      	str	r3, [r1, #88]	; 0x58
 8004f16:	e001      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
 8004f1a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f32:	d10a      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3324      	adds	r3, #36	; 0x24
 8004f38:	2102      	movs	r1, #2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fcfc 	bl	8005938 <RCCEx_PLL3_Config>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004f4a:	4b8b      	ldr	r3, [pc, #556]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f58:	4987      	ldr	r1, [pc, #540]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0310 	and.w	r3, r3, #16
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f74:	d10a      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3324      	adds	r3, #36	; 0x24
 8004f7a:	2102      	movs	r1, #2
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fcdb 	bl	8005938 <RCCEx_PLL3_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f8c:	4b7a      	ldr	r3, [pc, #488]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9a:	4977      	ldr	r1, [pc, #476]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d034      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004fb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fb6:	d01d      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fbc:	d817      	bhi.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc6:	d009      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004fc8:	e011      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fbff 	bl	80057d4 <RCCEx_PLL2_Config>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004fda:	e00c      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3324      	adds	r3, #36	; 0x24
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fca8 	bl	8005938 <RCCEx_PLL3_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004fec:	e003      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff2:	e000      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10a      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ffc:	4b5e      	ldr	r3, [pc, #376]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800500a:	495b      	ldr	r1, [pc, #364]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800500c:	4313      	orrs	r3, r2
 800500e:	658b      	str	r3, [r1, #88]	; 0x58
 8005010:	e001      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005012:	7dfb      	ldrb	r3, [r7, #23]
 8005014:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d033      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005028:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800502c:	d01c      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800502e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005032:	d816      	bhi.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005034:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005038:	d003      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800503a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800503e:	d007      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005040:	e00f      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005042:	4b4d      	ldr	r3, [pc, #308]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	4a4c      	ldr	r2, [pc, #304]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800504c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800504e:	e00c      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3324      	adds	r3, #36	; 0x24
 8005054:	2101      	movs	r1, #1
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fc6e 	bl	8005938 <RCCEx_PLL3_Config>
 800505c:	4603      	mov	r3, r0
 800505e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005060:	e003      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	75fb      	strb	r3, [r7, #23]
      break;
 8005066:	e000      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800506a:	7dfb      	ldrb	r3, [r7, #23]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10a      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005070:	4b41      	ldr	r3, [pc, #260]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005074:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800507e:	493e      	ldr	r1, [pc, #248]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005080:	4313      	orrs	r3, r2
 8005082:	654b      	str	r3, [r1, #84]	; 0x54
 8005084:	e001      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005086:	7dfb      	ldrb	r3, [r7, #23]
 8005088:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d029      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800509e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a2:	d007      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80050a4:	e00f      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a6:	4b34      	ldr	r3, [pc, #208]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	4a33      	ldr	r2, [pc, #204]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80050b2:	e00b      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	2102      	movs	r1, #2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fb8a 	bl	80057d4 <RCCEx_PLL2_Config>
 80050c0:	4603      	mov	r3, r0
 80050c2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80050c4:	e002      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	75fb      	strb	r3, [r7, #23]
      break;
 80050ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050d2:	4b29      	ldr	r3, [pc, #164]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050de:	4926      	ldr	r1, [pc, #152]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80050e4:	e001      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
 80050e8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3324      	adds	r3, #36	; 0x24
 80050fa:	2102      	movs	r1, #2
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fc1b 	bl	8005938 <RCCEx_PLL3_Config>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d033      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800511c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005120:	d017      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005126:	d811      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800512c:	d013      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800512e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005132:	d80b      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005134:	2b00      	cmp	r3, #0
 8005136:	d010      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513c:	d106      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800513e:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	4a0d      	ldr	r2, [pc, #52]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005148:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800514a:	e007      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]
      break;
 8005150:	e004      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005152:	bf00      	nop
 8005154:	e002      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005156:	bf00      	nop
 8005158:	e000      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800515a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800515c:	7dfb      	ldrb	r3, [r7, #23]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10c      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005162:	4b05      	ldr	r3, [pc, #20]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800516e:	4902      	ldr	r1, [pc, #8]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005170:	4313      	orrs	r3, r2
 8005172:	654b      	str	r3, [r1, #84]	; 0x54
 8005174:	e004      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005176:	bf00      	nop
 8005178:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
 800517e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800518c:	4b31      	ldr	r3, [pc, #196]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800518e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005190:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005198:	492e      	ldr	r1, [pc, #184]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800519a:	4313      	orrs	r3, r2
 800519c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80051aa:	4b2a      	ldr	r3, [pc, #168]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051b8:	4926      	ldr	r1, [pc, #152]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051ca:	4b22      	ldr	r3, [pc, #136]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051d6:	491f      	ldr	r1, [pc, #124]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00d      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051e8:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	4a19      	ldr	r2, [pc, #100]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051f2:	6113      	str	r3, [r2, #16]
 80051f4:	4b17      	ldr	r3, [pc, #92]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80051fe:	4915      	ldr	r1, [pc, #84]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005200:	4313      	orrs	r3, r2
 8005202:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	da08      	bge.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800520c:	4b11      	ldr	r3, [pc, #68]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800520e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005210:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005218:	490e      	ldr	r1, [pc, #56]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800521a:	4313      	orrs	r3, r2
 800521c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d009      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	4906      	ldr	r1, [pc, #24]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800523a:	4313      	orrs	r3, r2
 800523c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800523e:	7dbb      	ldrb	r3, [r7, #22]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	58024400 	.word	0x58024400

08005258 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800525c:	f7ff f85a 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8005260:	4602      	mov	r2, r0
 8005262:	4b06      	ldr	r3, [pc, #24]	; (800527c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	091b      	lsrs	r3, r3, #4
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	4904      	ldr	r1, [pc, #16]	; (8005280 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800526e:	5ccb      	ldrb	r3, [r1, r3]
 8005270:	f003 031f 	and.w	r3, r3, #31
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005278:	4618      	mov	r0, r3
 800527a:	bd80      	pop	{r7, pc}
 800527c:	58024400 	.word	0x58024400
 8005280:	0800b1c4 	.word	0x0800b1c4

08005284 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005284:	b480      	push	{r7}
 8005286:	b089      	sub	sp, #36	; 0x24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800528c:	4ba1      	ldr	r3, [pc, #644]	; (8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800528e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005296:	4b9f      	ldr	r3, [pc, #636]	; (8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	0b1b      	lsrs	r3, r3, #12
 800529c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80052a2:	4b9c      	ldr	r3, [pc, #624]	; (8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	091b      	lsrs	r3, r3, #4
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80052ae:	4b99      	ldr	r3, [pc, #612]	; (8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	08db      	lsrs	r3, r3, #3
 80052b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	fb02 f303 	mul.w	r3, r2, r3
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8111 	beq.w	80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	f000 8083 	beq.w	80053e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	f200 80a1 	bhi.w	8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d056      	beq.n	800539c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80052ee:	e099      	b.n	8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052f0:	4b88      	ldr	r3, [pc, #544]	; (8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d02d      	beq.n	8005358 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052fc:	4b85      	ldr	r3, [pc, #532]	; (8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	08db      	lsrs	r3, r3, #3
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	4a84      	ldr	r2, [pc, #528]	; (8005518 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
 800530c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	ee07 3a90 	vmov	s15, r3
 8005314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005326:	4b7b      	ldr	r3, [pc, #492]	; (8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005336:	ed97 6a03 	vldr	s12, [r7, #12]
 800533a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800551c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800533e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800534a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800534e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005352:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005356:	e087      	b.n	8005468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005362:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005520 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800536a:	4b6a      	ldr	r3, [pc, #424]	; (8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800537a:	ed97 6a03 	vldr	s12, [r7, #12]
 800537e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800551c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800538a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800538e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005396:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800539a:	e065      	b.n	8005468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80053aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ae:	4b59      	ldr	r3, [pc, #356]	; (8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053be:	ed97 6a03 	vldr	s12, [r7, #12]
 80053c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800551c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053de:	e043      	b.n	8005468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005528 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80053ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f2:	4b48      	ldr	r3, [pc, #288]	; (8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005402:	ed97 6a03 	vldr	s12, [r7, #12]
 8005406:	eddf 5a45 	vldr	s11, [pc, #276]	; 800551c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800540a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800540e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800541a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005422:	e021      	b.n	8005468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005436:	4b37      	ldr	r3, [pc, #220]	; (8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005446:	ed97 6a03 	vldr	s12, [r7, #12]
 800544a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800551c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800544e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800545a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800545e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005462:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005466:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005468:	4b2a      	ldr	r3, [pc, #168]	; (8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	0a5b      	lsrs	r3, r3, #9
 800546e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800547e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005482:	edd7 6a07 	vldr	s13, [r7, #28]
 8005486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800548a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800548e:	ee17 2a90 	vmov	r2, s15
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005496:	4b1f      	ldr	r3, [pc, #124]	; (8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	0c1b      	lsrs	r3, r3, #16
 800549c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a0:	ee07 3a90 	vmov	s15, r3
 80054a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054bc:	ee17 2a90 	vmov	r2, s15
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80054c4:	4b13      	ldr	r3, [pc, #76]	; (8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c8:	0e1b      	lsrs	r3, r3, #24
 80054ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054de:	edd7 6a07 	vldr	s13, [r7, #28]
 80054e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ea:	ee17 2a90 	vmov	r2, s15
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80054f2:	e008      	b.n	8005506 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	609a      	str	r2, [r3, #8]
}
 8005506:	bf00      	nop
 8005508:	3724      	adds	r7, #36	; 0x24
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	58024400 	.word	0x58024400
 8005518:	03d09000 	.word	0x03d09000
 800551c:	46000000 	.word	0x46000000
 8005520:	4c742400 	.word	0x4c742400
 8005524:	4a742400 	.word	0x4a742400
 8005528:	4af42400 	.word	0x4af42400

0800552c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800552c:	b480      	push	{r7}
 800552e:	b089      	sub	sp, #36	; 0x24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005534:	4ba1      	ldr	r3, [pc, #644]	; (80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800553e:	4b9f      	ldr	r3, [pc, #636]	; (80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	0d1b      	lsrs	r3, r3, #20
 8005544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005548:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800554a:	4b9c      	ldr	r3, [pc, #624]	; (80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	0a1b      	lsrs	r3, r3, #8
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005556:	4b99      	ldr	r3, [pc, #612]	; (80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555a:	08db      	lsrs	r3, r3, #3
 800555c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 8111 	beq.w	800579c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	2b02      	cmp	r3, #2
 800557e:	f000 8083 	beq.w	8005688 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	2b02      	cmp	r3, #2
 8005586:	f200 80a1 	bhi.w	80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d056      	beq.n	8005644 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005596:	e099      	b.n	80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005598:	4b88      	ldr	r3, [pc, #544]	; (80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02d      	beq.n	8005600 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055a4:	4b85      	ldr	r3, [pc, #532]	; (80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	08db      	lsrs	r3, r3, #3
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	4a84      	ldr	r2, [pc, #528]	; (80057c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
 80055b4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	ee07 3a90 	vmov	s15, r3
 80055bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ce:	4b7b      	ldr	r3, [pc, #492]	; (80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055de:	ed97 6a03 	vldr	s12, [r7, #12]
 80055e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80055fe:	e087      	b.n	8005710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80057c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800560e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005612:	4b6a      	ldr	r3, [pc, #424]	; (80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005622:	ed97 6a03 	vldr	s12, [r7, #12]
 8005626:	eddf 5a67 	vldr	s11, [pc, #412]	; 80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800562a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005642:	e065      	b.n	8005710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005656:	4b59      	ldr	r3, [pc, #356]	; (80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005666:	ed97 6a03 	vldr	s12, [r7, #12]
 800566a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800566e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800567a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005682:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005686:	e043      	b.n	8005710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005692:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80057d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569a:	4b48      	ldr	r3, [pc, #288]	; (80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056ca:	e021      	b.n	8005710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056de:	4b37      	ldr	r3, [pc, #220]	; (80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80056f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800570e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005710:	4b2a      	ldr	r3, [pc, #168]	; (80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	0a5b      	lsrs	r3, r3, #9
 8005716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800572a:	edd7 6a07 	vldr	s13, [r7, #28]
 800572e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005736:	ee17 2a90 	vmov	r2, s15
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800573e:	4b1f      	ldr	r3, [pc, #124]	; (80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	0c1b      	lsrs	r3, r3, #16
 8005744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005748:	ee07 3a90 	vmov	s15, r3
 800574c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005750:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005754:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005758:	edd7 6a07 	vldr	s13, [r7, #28]
 800575c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005764:	ee17 2a90 	vmov	r2, s15
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800576c:	4b13      	ldr	r3, [pc, #76]	; (80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	0e1b      	lsrs	r3, r3, #24
 8005772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005786:	edd7 6a07 	vldr	s13, [r7, #28]
 800578a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800578e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005792:	ee17 2a90 	vmov	r2, s15
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800579a:	e008      	b.n	80057ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	609a      	str	r2, [r3, #8]
}
 80057ae:	bf00      	nop
 80057b0:	3724      	adds	r7, #36	; 0x24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	58024400 	.word	0x58024400
 80057c0:	03d09000 	.word	0x03d09000
 80057c4:	46000000 	.word	0x46000000
 80057c8:	4c742400 	.word	0x4c742400
 80057cc:	4a742400 	.word	0x4a742400
 80057d0:	4af42400 	.word	0x4af42400

080057d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057e2:	4b53      	ldr	r3, [pc, #332]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d101      	bne.n	80057f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e099      	b.n	8005926 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80057f2:	4b4f      	ldr	r3, [pc, #316]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a4e      	ldr	r2, [pc, #312]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80057f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057fe:	f7fc fb6f 	bl	8001ee0 <HAL_GetTick>
 8005802:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005804:	e008      	b.n	8005818 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005806:	f7fc fb6b 	bl	8001ee0 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e086      	b.n	8005926 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005818:	4b45      	ldr	r3, [pc, #276]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f0      	bne.n	8005806 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005824:	4b42      	ldr	r3, [pc, #264]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	031b      	lsls	r3, r3, #12
 8005832:	493f      	ldr	r1, [pc, #252]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 8005834:	4313      	orrs	r3, r2
 8005836:	628b      	str	r3, [r1, #40]	; 0x28
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	3b01      	subs	r3, #1
 800583e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	3b01      	subs	r3, #1
 8005848:	025b      	lsls	r3, r3, #9
 800584a:	b29b      	uxth	r3, r3
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	3b01      	subs	r3, #1
 8005854:	041b      	lsls	r3, r3, #16
 8005856:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	3b01      	subs	r3, #1
 8005862:	061b      	lsls	r3, r3, #24
 8005864:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005868:	4931      	ldr	r1, [pc, #196]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 800586a:	4313      	orrs	r3, r2
 800586c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800586e:	4b30      	ldr	r3, [pc, #192]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005872:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	492d      	ldr	r1, [pc, #180]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 800587c:	4313      	orrs	r3, r2
 800587e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005880:	4b2b      	ldr	r3, [pc, #172]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	f023 0220 	bic.w	r2, r3, #32
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	4928      	ldr	r1, [pc, #160]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 800588e:	4313      	orrs	r3, r2
 8005890:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005892:	4b27      	ldr	r3, [pc, #156]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	4a26      	ldr	r2, [pc, #152]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 8005898:	f023 0310 	bic.w	r3, r3, #16
 800589c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800589e:	4b24      	ldr	r3, [pc, #144]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80058a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058a2:	4b24      	ldr	r3, [pc, #144]	; (8005934 <RCCEx_PLL2_Config+0x160>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	69d2      	ldr	r2, [r2, #28]
 80058aa:	00d2      	lsls	r2, r2, #3
 80058ac:	4920      	ldr	r1, [pc, #128]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058b2:	4b1f      	ldr	r3, [pc, #124]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	4a1e      	ldr	r2, [pc, #120]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80058b8:	f043 0310 	orr.w	r3, r3, #16
 80058bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d106      	bne.n	80058d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80058c4:	4b1a      	ldr	r3, [pc, #104]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	4a19      	ldr	r2, [pc, #100]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80058ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058d0:	e00f      	b.n	80058f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d106      	bne.n	80058e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80058d8:	4b15      	ldr	r3, [pc, #84]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	4a14      	ldr	r2, [pc, #80]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80058de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058e4:	e005      	b.n	80058f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80058e6:	4b12      	ldr	r3, [pc, #72]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	4a11      	ldr	r2, [pc, #68]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80058ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80058f2:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a0e      	ldr	r2, [pc, #56]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 80058f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058fe:	f7fc faef 	bl	8001ee0 <HAL_GetTick>
 8005902:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005904:	e008      	b.n	8005918 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005906:	f7fc faeb 	bl	8001ee0 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e006      	b.n	8005926 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005918:	4b05      	ldr	r3, [pc, #20]	; (8005930 <RCCEx_PLL2_Config+0x15c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f0      	beq.n	8005906 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	58024400 	.word	0x58024400
 8005934:	ffff0007 	.word	0xffff0007

08005938 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005946:	4b53      	ldr	r3, [pc, #332]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	2b03      	cmp	r3, #3
 8005950:	d101      	bne.n	8005956 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e099      	b.n	8005a8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005956:	4b4f      	ldr	r3, [pc, #316]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a4e      	ldr	r2, [pc, #312]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 800595c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005962:	f7fc fabd 	bl	8001ee0 <HAL_GetTick>
 8005966:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005968:	e008      	b.n	800597c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800596a:	f7fc fab9 	bl	8001ee0 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e086      	b.n	8005a8a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800597c:	4b45      	ldr	r3, [pc, #276]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1f0      	bne.n	800596a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005988:	4b42      	ldr	r3, [pc, #264]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	051b      	lsls	r3, r3, #20
 8005996:	493f      	ldr	r1, [pc, #252]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005998:	4313      	orrs	r3, r2
 800599a:	628b      	str	r3, [r1, #40]	; 0x28
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	025b      	lsls	r3, r3, #9
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	061b      	lsls	r3, r3, #24
 80059c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059cc:	4931      	ldr	r1, [pc, #196]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80059d2:	4b30      	ldr	r3, [pc, #192]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 80059d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	492d      	ldr	r1, [pc, #180]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80059e4:	4b2b      	ldr	r3, [pc, #172]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	4928      	ldr	r1, [pc, #160]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80059f6:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	4a26      	ldr	r2, [pc, #152]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 80059fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a02:	4b24      	ldr	r3, [pc, #144]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a06:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <RCCEx_PLL3_Config+0x160>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	69d2      	ldr	r2, [r2, #28]
 8005a0e:	00d2      	lsls	r2, r2, #3
 8005a10:	4920      	ldr	r1, [pc, #128]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a16:	4b1f      	ldr	r3, [pc, #124]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	4a1e      	ldr	r2, [pc, #120]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a28:	4b1a      	ldr	r3, [pc, #104]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	4a19      	ldr	r2, [pc, #100]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005a2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a34:	e00f      	b.n	8005a56 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d106      	bne.n	8005a4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a3c:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	4a14      	ldr	r2, [pc, #80]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005a42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a48:	e005      	b.n	8005a56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a4a:	4b12      	ldr	r3, [pc, #72]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	4a11      	ldr	r2, [pc, #68]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005a50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a56:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a0e      	ldr	r2, [pc, #56]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a62:	f7fc fa3d 	bl	8001ee0 <HAL_GetTick>
 8005a66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a68:	e008      	b.n	8005a7c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a6a:	f7fc fa39 	bl	8001ee0 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e006      	b.n	8005a8a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a7c:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <RCCEx_PLL3_Config+0x15c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d0f0      	beq.n	8005a6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	58024400 	.word	0x58024400
 8005a98:	ffff0007 	.word	0xffff0007

08005a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e049      	b.n	8005b42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fb ff6c 	bl	80019a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f000 fe10 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d001      	beq.n	8005b64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e04c      	b.n	8005bfe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a26      	ldr	r2, [pc, #152]	; (8005c0c <HAL_TIM_Base_Start+0xc0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d022      	beq.n	8005bbc <HAL_TIM_Base_Start+0x70>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7e:	d01d      	beq.n	8005bbc <HAL_TIM_Base_Start+0x70>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <HAL_TIM_Base_Start+0xc4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d018      	beq.n	8005bbc <HAL_TIM_Base_Start+0x70>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a21      	ldr	r2, [pc, #132]	; (8005c14 <HAL_TIM_Base_Start+0xc8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d013      	beq.n	8005bbc <HAL_TIM_Base_Start+0x70>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1f      	ldr	r2, [pc, #124]	; (8005c18 <HAL_TIM_Base_Start+0xcc>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00e      	beq.n	8005bbc <HAL_TIM_Base_Start+0x70>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1e      	ldr	r2, [pc, #120]	; (8005c1c <HAL_TIM_Base_Start+0xd0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d009      	beq.n	8005bbc <HAL_TIM_Base_Start+0x70>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1c      	ldr	r2, [pc, #112]	; (8005c20 <HAL_TIM_Base_Start+0xd4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d004      	beq.n	8005bbc <HAL_TIM_Base_Start+0x70>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1b      	ldr	r2, [pc, #108]	; (8005c24 <HAL_TIM_Base_Start+0xd8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d115      	bne.n	8005be8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <HAL_TIM_Base_Start+0xdc>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b06      	cmp	r3, #6
 8005bcc:	d015      	beq.n	8005bfa <HAL_TIM_Base_Start+0xae>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd4:	d011      	beq.n	8005bfa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0201 	orr.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be6:	e008      	b.n	8005bfa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	e000      	b.n	8005bfc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40010000 	.word	0x40010000
 8005c10:	40000400 	.word	0x40000400
 8005c14:	40000800 	.word	0x40000800
 8005c18:	40000c00 	.word	0x40000c00
 8005c1c:	40010400 	.word	0x40010400
 8005c20:	40001800 	.word	0x40001800
 8005c24:	40014000 	.word	0x40014000
 8005c28:	00010007 	.word	0x00010007

08005c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d001      	beq.n	8005c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e054      	b.n	8005cee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a26      	ldr	r2, [pc, #152]	; (8005cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d022      	beq.n	8005cac <HAL_TIM_Base_Start_IT+0x80>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6e:	d01d      	beq.n	8005cac <HAL_TIM_Base_Start_IT+0x80>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a22      	ldr	r2, [pc, #136]	; (8005d00 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d018      	beq.n	8005cac <HAL_TIM_Base_Start_IT+0x80>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a21      	ldr	r2, [pc, #132]	; (8005d04 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d013      	beq.n	8005cac <HAL_TIM_Base_Start_IT+0x80>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1f      	ldr	r2, [pc, #124]	; (8005d08 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00e      	beq.n	8005cac <HAL_TIM_Base_Start_IT+0x80>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1e      	ldr	r2, [pc, #120]	; (8005d0c <HAL_TIM_Base_Start_IT+0xe0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d009      	beq.n	8005cac <HAL_TIM_Base_Start_IT+0x80>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a1c      	ldr	r2, [pc, #112]	; (8005d10 <HAL_TIM_Base_Start_IT+0xe4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <HAL_TIM_Base_Start_IT+0x80>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1b      	ldr	r2, [pc, #108]	; (8005d14 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d115      	bne.n	8005cd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	4b19      	ldr	r3, [pc, #100]	; (8005d18 <HAL_TIM_Base_Start_IT+0xec>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b06      	cmp	r3, #6
 8005cbc:	d015      	beq.n	8005cea <HAL_TIM_Base_Start_IT+0xbe>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc4:	d011      	beq.n	8005cea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0201 	orr.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd6:	e008      	b.n	8005cea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	e000      	b.n	8005cec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40010000 	.word	0x40010000
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800
 8005d08:	40000c00 	.word	0x40000c00
 8005d0c:	40010400 	.word	0x40010400
 8005d10:	40001800 	.word	0x40001800
 8005d14:	40014000 	.word	0x40014000
 8005d18:	00010007 	.word	0x00010007

08005d1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0201 	bic.w	r2, r2, #1
 8005d32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6a1a      	ldr	r2, [r3, #32]
 8005d3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10f      	bne.n	8005d64 <HAL_TIM_Base_Stop_IT+0x48>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6a1a      	ldr	r2, [r3, #32]
 8005d4a:	f240 4344 	movw	r3, #1092	; 0x444
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d107      	bne.n	8005d64 <HAL_TIM_Base_Stop_IT+0x48>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0201 	bic.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e049      	b.n	8005e20 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d106      	bne.n	8005da6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f841 	bl	8005e28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2202      	movs	r2, #2
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3304      	adds	r3, #4
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f000 fca1 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d109      	bne.n	8005e60 <HAL_TIM_PWM_Start+0x24>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	bf14      	ite	ne
 8005e58:	2301      	movne	r3, #1
 8005e5a:	2300      	moveq	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	e03c      	b.n	8005eda <HAL_TIM_PWM_Start+0x9e>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d109      	bne.n	8005e7a <HAL_TIM_PWM_Start+0x3e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	bf14      	ite	ne
 8005e72:	2301      	movne	r3, #1
 8005e74:	2300      	moveq	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	e02f      	b.n	8005eda <HAL_TIM_PWM_Start+0x9e>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d109      	bne.n	8005e94 <HAL_TIM_PWM_Start+0x58>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	bf14      	ite	ne
 8005e8c:	2301      	movne	r3, #1
 8005e8e:	2300      	moveq	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e022      	b.n	8005eda <HAL_TIM_PWM_Start+0x9e>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b0c      	cmp	r3, #12
 8005e98:	d109      	bne.n	8005eae <HAL_TIM_PWM_Start+0x72>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	bf14      	ite	ne
 8005ea6:	2301      	movne	r3, #1
 8005ea8:	2300      	moveq	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	e015      	b.n	8005eda <HAL_TIM_PWM_Start+0x9e>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d109      	bne.n	8005ec8 <HAL_TIM_PWM_Start+0x8c>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	bf14      	ite	ne
 8005ec0:	2301      	movne	r3, #1
 8005ec2:	2300      	moveq	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	e008      	b.n	8005eda <HAL_TIM_PWM_Start+0x9e>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	bf14      	ite	ne
 8005ed4:	2301      	movne	r3, #1
 8005ed6:	2300      	moveq	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e0a1      	b.n	8006026 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <HAL_TIM_PWM_Start+0xb6>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ef0:	e023      	b.n	8005f3a <HAL_TIM_PWM_Start+0xfe>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d104      	bne.n	8005f02 <HAL_TIM_PWM_Start+0xc6>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f00:	e01b      	b.n	8005f3a <HAL_TIM_PWM_Start+0xfe>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d104      	bne.n	8005f12 <HAL_TIM_PWM_Start+0xd6>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f10:	e013      	b.n	8005f3a <HAL_TIM_PWM_Start+0xfe>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b0c      	cmp	r3, #12
 8005f16:	d104      	bne.n	8005f22 <HAL_TIM_PWM_Start+0xe6>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f20:	e00b      	b.n	8005f3a <HAL_TIM_PWM_Start+0xfe>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b10      	cmp	r3, #16
 8005f26:	d104      	bne.n	8005f32 <HAL_TIM_PWM_Start+0xf6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f30:	e003      	b.n	8005f3a <HAL_TIM_PWM_Start+0xfe>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2202      	movs	r2, #2
 8005f36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 ffea 	bl	8006f1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a38      	ldr	r2, [pc, #224]	; (8006030 <HAL_TIM_PWM_Start+0x1f4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d013      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x13e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a37      	ldr	r2, [pc, #220]	; (8006034 <HAL_TIM_PWM_Start+0x1f8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00e      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x13e>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a35      	ldr	r2, [pc, #212]	; (8006038 <HAL_TIM_PWM_Start+0x1fc>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d009      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x13e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a34      	ldr	r2, [pc, #208]	; (800603c <HAL_TIM_PWM_Start+0x200>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d004      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x13e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a32      	ldr	r2, [pc, #200]	; (8006040 <HAL_TIM_PWM_Start+0x204>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d101      	bne.n	8005f7e <HAL_TIM_PWM_Start+0x142>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <HAL_TIM_PWM_Start+0x144>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d007      	beq.n	8005f94 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a25      	ldr	r2, [pc, #148]	; (8006030 <HAL_TIM_PWM_Start+0x1f4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d022      	beq.n	8005fe4 <HAL_TIM_PWM_Start+0x1a8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa6:	d01d      	beq.n	8005fe4 <HAL_TIM_PWM_Start+0x1a8>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a25      	ldr	r2, [pc, #148]	; (8006044 <HAL_TIM_PWM_Start+0x208>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <HAL_TIM_PWM_Start+0x1a8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a24      	ldr	r2, [pc, #144]	; (8006048 <HAL_TIM_PWM_Start+0x20c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <HAL_TIM_PWM_Start+0x1a8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a22      	ldr	r2, [pc, #136]	; (800604c <HAL_TIM_PWM_Start+0x210>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_TIM_PWM_Start+0x1a8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1a      	ldr	r2, [pc, #104]	; (8006034 <HAL_TIM_PWM_Start+0x1f8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_TIM_PWM_Start+0x1a8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1e      	ldr	r2, [pc, #120]	; (8006050 <HAL_TIM_PWM_Start+0x214>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_TIM_PWM_Start+0x1a8>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a16      	ldr	r2, [pc, #88]	; (8006038 <HAL_TIM_PWM_Start+0x1fc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d115      	bne.n	8006010 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	4b1a      	ldr	r3, [pc, #104]	; (8006054 <HAL_TIM_PWM_Start+0x218>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b06      	cmp	r3, #6
 8005ff4:	d015      	beq.n	8006022 <HAL_TIM_PWM_Start+0x1e6>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ffc:	d011      	beq.n	8006022 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f042 0201 	orr.w	r2, r2, #1
 800600c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600e:	e008      	b.n	8006022 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	e000      	b.n	8006024 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006022:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40010000 	.word	0x40010000
 8006034:	40010400 	.word	0x40010400
 8006038:	40014000 	.word	0x40014000
 800603c:	40014400 	.word	0x40014400
 8006040:	40014800 	.word	0x40014800
 8006044:	40000400 	.word	0x40000400
 8006048:	40000800 	.word	0x40000800
 800604c:	40000c00 	.word	0x40000c00
 8006050:	40001800 	.word	0x40001800
 8006054:	00010007 	.word	0x00010007

08006058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b02      	cmp	r3, #2
 800606c:	d122      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b02      	cmp	r3, #2
 800607a:	d11b      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0202 	mvn.w	r2, #2
 8006084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fb12 	bl	80066c4 <HAL_TIM_IC_CaptureCallback>
 80060a0:	e005      	b.n	80060ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fb04 	bl	80066b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fb15 	bl	80066d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d122      	bne.n	8006108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d11b      	bne.n	8006108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0204 	mvn.w	r2, #4
 80060d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fae8 	bl	80066c4 <HAL_TIM_IC_CaptureCallback>
 80060f4:	e005      	b.n	8006102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fada 	bl	80066b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 faeb 	bl	80066d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b08      	cmp	r3, #8
 8006114:	d122      	bne.n	800615c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b08      	cmp	r3, #8
 8006122:	d11b      	bne.n	800615c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0208 	mvn.w	r2, #8
 800612c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2204      	movs	r2, #4
 8006132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fabe 	bl	80066c4 <HAL_TIM_IC_CaptureCallback>
 8006148:	e005      	b.n	8006156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fab0 	bl	80066b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fac1 	bl	80066d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0310 	and.w	r3, r3, #16
 8006166:	2b10      	cmp	r3, #16
 8006168:	d122      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0310 	and.w	r3, r3, #16
 8006174:	2b10      	cmp	r3, #16
 8006176:	d11b      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0210 	mvn.w	r2, #16
 8006180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2208      	movs	r2, #8
 8006186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fa94 	bl	80066c4 <HAL_TIM_IC_CaptureCallback>
 800619c:	e005      	b.n	80061aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fa86 	bl	80066b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fa97 	bl	80066d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d10e      	bne.n	80061dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d107      	bne.n	80061dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0201 	mvn.w	r2, #1
 80061d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7fa ff74 	bl	80010c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e6:	2b80      	cmp	r3, #128	; 0x80
 80061e8:	d10e      	bne.n	8006208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f4:	2b80      	cmp	r3, #128	; 0x80
 80061f6:	d107      	bne.n	8006208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 ffc6 	bl	8007194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006216:	d10e      	bne.n	8006236 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006222:	2b80      	cmp	r3, #128	; 0x80
 8006224:	d107      	bne.n	8006236 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800622e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 ffb9 	bl	80071a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b40      	cmp	r3, #64	; 0x40
 8006242:	d10e      	bne.n	8006262 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624e:	2b40      	cmp	r3, #64	; 0x40
 8006250:	d107      	bne.n	8006262 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800625a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fa45 	bl	80066ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	2b20      	cmp	r3, #32
 800626e:	d10e      	bne.n	800628e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b20      	cmp	r3, #32
 800627c:	d107      	bne.n	800628e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f06f 0220 	mvn.w	r2, #32
 8006286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 ff79 	bl	8007180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800628e:	bf00      	nop
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e0ff      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b14      	cmp	r3, #20
 80062c2:	f200 80f0 	bhi.w	80064a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80062c6:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062cc:	08006321 	.word	0x08006321
 80062d0:	080064a7 	.word	0x080064a7
 80062d4:	080064a7 	.word	0x080064a7
 80062d8:	080064a7 	.word	0x080064a7
 80062dc:	08006361 	.word	0x08006361
 80062e0:	080064a7 	.word	0x080064a7
 80062e4:	080064a7 	.word	0x080064a7
 80062e8:	080064a7 	.word	0x080064a7
 80062ec:	080063a3 	.word	0x080063a3
 80062f0:	080064a7 	.word	0x080064a7
 80062f4:	080064a7 	.word	0x080064a7
 80062f8:	080064a7 	.word	0x080064a7
 80062fc:	080063e3 	.word	0x080063e3
 8006300:	080064a7 	.word	0x080064a7
 8006304:	080064a7 	.word	0x080064a7
 8006308:	080064a7 	.word	0x080064a7
 800630c:	08006425 	.word	0x08006425
 8006310:	080064a7 	.word	0x080064a7
 8006314:	080064a7 	.word	0x080064a7
 8006318:	080064a7 	.word	0x080064a7
 800631c:	08006465 	.word	0x08006465
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fa84 	bl	8006834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0208 	orr.w	r2, r2, #8
 800633a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0204 	bic.w	r2, r2, #4
 800634a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6999      	ldr	r1, [r3, #24]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	691a      	ldr	r2, [r3, #16]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	619a      	str	r2, [r3, #24]
      break;
 800635e:	e0a5      	b.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	4618      	mov	r0, r3
 8006368:	f000 faf4 	bl	8006954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699a      	ldr	r2, [r3, #24]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800637a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800638a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6999      	ldr	r1, [r3, #24]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	021a      	lsls	r2, r3, #8
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	619a      	str	r2, [r3, #24]
      break;
 80063a0:	e084      	b.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68b9      	ldr	r1, [r7, #8]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fb5d 	bl	8006a68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69da      	ldr	r2, [r3, #28]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0208 	orr.w	r2, r2, #8
 80063bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69da      	ldr	r2, [r3, #28]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0204 	bic.w	r2, r2, #4
 80063cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69d9      	ldr	r1, [r3, #28]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	61da      	str	r2, [r3, #28]
      break;
 80063e0:	e064      	b.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68b9      	ldr	r1, [r7, #8]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fbc5 	bl	8006b78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69da      	ldr	r2, [r3, #28]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69da      	ldr	r2, [r3, #28]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800640c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69d9      	ldr	r1, [r3, #28]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	021a      	lsls	r2, r3, #8
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	61da      	str	r2, [r3, #28]
      break;
 8006422:	e043      	b.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fc0e 	bl	8006c4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0208 	orr.w	r2, r2, #8
 800643e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0204 	bic.w	r2, r2, #4
 800644e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006462:	e023      	b.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fc52 	bl	8006d14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800647e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800648e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	021a      	lsls	r2, r3, #8
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064a4:	e002      	b.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	75fb      	strb	r3, [r7, #23]
      break;
 80064aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop

080064c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_TIM_ConfigClockSource+0x1c>
 80064d8:	2302      	movs	r3, #2
 80064da:	e0dc      	b.n	8006696 <HAL_TIM_ConfigClockSource+0x1d6>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	4b6a      	ldr	r3, [pc, #424]	; (80066a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a64      	ldr	r2, [pc, #400]	; (80066a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	f000 80a9 	beq.w	800666a <HAL_TIM_ConfigClockSource+0x1aa>
 8006518:	4a62      	ldr	r2, [pc, #392]	; (80066a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	f200 80ae 	bhi.w	800667c <HAL_TIM_ConfigClockSource+0x1bc>
 8006520:	4a61      	ldr	r2, [pc, #388]	; (80066a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	f000 80a1 	beq.w	800666a <HAL_TIM_ConfigClockSource+0x1aa>
 8006528:	4a5f      	ldr	r2, [pc, #380]	; (80066a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	f200 80a6 	bhi.w	800667c <HAL_TIM_ConfigClockSource+0x1bc>
 8006530:	4a5e      	ldr	r2, [pc, #376]	; (80066ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8006532:	4293      	cmp	r3, r2
 8006534:	f000 8099 	beq.w	800666a <HAL_TIM_ConfigClockSource+0x1aa>
 8006538:	4a5c      	ldr	r2, [pc, #368]	; (80066ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800653a:	4293      	cmp	r3, r2
 800653c:	f200 809e 	bhi.w	800667c <HAL_TIM_ConfigClockSource+0x1bc>
 8006540:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006544:	f000 8091 	beq.w	800666a <HAL_TIM_ConfigClockSource+0x1aa>
 8006548:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800654c:	f200 8096 	bhi.w	800667c <HAL_TIM_ConfigClockSource+0x1bc>
 8006550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006554:	f000 8089 	beq.w	800666a <HAL_TIM_ConfigClockSource+0x1aa>
 8006558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800655c:	f200 808e 	bhi.w	800667c <HAL_TIM_ConfigClockSource+0x1bc>
 8006560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006564:	d03e      	beq.n	80065e4 <HAL_TIM_ConfigClockSource+0x124>
 8006566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800656a:	f200 8087 	bhi.w	800667c <HAL_TIM_ConfigClockSource+0x1bc>
 800656e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006572:	f000 8086 	beq.w	8006682 <HAL_TIM_ConfigClockSource+0x1c2>
 8006576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657a:	d87f      	bhi.n	800667c <HAL_TIM_ConfigClockSource+0x1bc>
 800657c:	2b70      	cmp	r3, #112	; 0x70
 800657e:	d01a      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0xf6>
 8006580:	2b70      	cmp	r3, #112	; 0x70
 8006582:	d87b      	bhi.n	800667c <HAL_TIM_ConfigClockSource+0x1bc>
 8006584:	2b60      	cmp	r3, #96	; 0x60
 8006586:	d050      	beq.n	800662a <HAL_TIM_ConfigClockSource+0x16a>
 8006588:	2b60      	cmp	r3, #96	; 0x60
 800658a:	d877      	bhi.n	800667c <HAL_TIM_ConfigClockSource+0x1bc>
 800658c:	2b50      	cmp	r3, #80	; 0x50
 800658e:	d03c      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x14a>
 8006590:	2b50      	cmp	r3, #80	; 0x50
 8006592:	d873      	bhi.n	800667c <HAL_TIM_ConfigClockSource+0x1bc>
 8006594:	2b40      	cmp	r3, #64	; 0x40
 8006596:	d058      	beq.n	800664a <HAL_TIM_ConfigClockSource+0x18a>
 8006598:	2b40      	cmp	r3, #64	; 0x40
 800659a:	d86f      	bhi.n	800667c <HAL_TIM_ConfigClockSource+0x1bc>
 800659c:	2b30      	cmp	r3, #48	; 0x30
 800659e:	d064      	beq.n	800666a <HAL_TIM_ConfigClockSource+0x1aa>
 80065a0:	2b30      	cmp	r3, #48	; 0x30
 80065a2:	d86b      	bhi.n	800667c <HAL_TIM_ConfigClockSource+0x1bc>
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	d060      	beq.n	800666a <HAL_TIM_ConfigClockSource+0x1aa>
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	d867      	bhi.n	800667c <HAL_TIM_ConfigClockSource+0x1bc>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d05c      	beq.n	800666a <HAL_TIM_ConfigClockSource+0x1aa>
 80065b0:	2b10      	cmp	r3, #16
 80065b2:	d05a      	beq.n	800666a <HAL_TIM_ConfigClockSource+0x1aa>
 80065b4:	e062      	b.n	800667c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	6899      	ldr	r1, [r3, #8]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f000 fc89 	bl	8006edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	609a      	str	r2, [r3, #8]
      break;
 80065e2:	e04f      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6818      	ldr	r0, [r3, #0]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	6899      	ldr	r1, [r3, #8]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f000 fc72 	bl	8006edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006606:	609a      	str	r2, [r3, #8]
      break;
 8006608:	e03c      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	6859      	ldr	r1, [r3, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	461a      	mov	r2, r3
 8006618:	f000 fbe2 	bl	8006de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2150      	movs	r1, #80	; 0x50
 8006622:	4618      	mov	r0, r3
 8006624:	f000 fc3c 	bl	8006ea0 <TIM_ITRx_SetConfig>
      break;
 8006628:	e02c      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6859      	ldr	r1, [r3, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	461a      	mov	r2, r3
 8006638:	f000 fc01 	bl	8006e3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2160      	movs	r1, #96	; 0x60
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fc2c 	bl	8006ea0 <TIM_ITRx_SetConfig>
      break;
 8006648:	e01c      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	6859      	ldr	r1, [r3, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	461a      	mov	r2, r3
 8006658:	f000 fbc2 	bl	8006de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2140      	movs	r1, #64	; 0x40
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fc1c 	bl	8006ea0 <TIM_ITRx_SetConfig>
      break;
 8006668:	e00c      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4619      	mov	r1, r3
 8006674:	4610      	mov	r0, r2
 8006676:	f000 fc13 	bl	8006ea0 <TIM_ITRx_SetConfig>
      break;
 800667a:	e003      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	73fb      	strb	r3, [r7, #15]
      break;
 8006680:	e000      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	ffceff88 	.word	0xffceff88
 80066a4:	00100040 	.word	0x00100040
 80066a8:	00100030 	.word	0x00100030
 80066ac:	00100020 	.word	0x00100020

080066b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a40      	ldr	r2, [pc, #256]	; (8006814 <TIM_Base_SetConfig+0x114>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d013      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671e:	d00f      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a3d      	ldr	r2, [pc, #244]	; (8006818 <TIM_Base_SetConfig+0x118>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00b      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a3c      	ldr	r2, [pc, #240]	; (800681c <TIM_Base_SetConfig+0x11c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d007      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a3b      	ldr	r2, [pc, #236]	; (8006820 <TIM_Base_SetConfig+0x120>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a3a      	ldr	r2, [pc, #232]	; (8006824 <TIM_Base_SetConfig+0x124>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d108      	bne.n	8006752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a2f      	ldr	r2, [pc, #188]	; (8006814 <TIM_Base_SetConfig+0x114>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01f      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006760:	d01b      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a2c      	ldr	r2, [pc, #176]	; (8006818 <TIM_Base_SetConfig+0x118>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d017      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2b      	ldr	r2, [pc, #172]	; (800681c <TIM_Base_SetConfig+0x11c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2a      	ldr	r2, [pc, #168]	; (8006820 <TIM_Base_SetConfig+0x120>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00f      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a29      	ldr	r2, [pc, #164]	; (8006824 <TIM_Base_SetConfig+0x124>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00b      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a28      	ldr	r2, [pc, #160]	; (8006828 <TIM_Base_SetConfig+0x128>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d007      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a27      	ldr	r2, [pc, #156]	; (800682c <TIM_Base_SetConfig+0x12c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a26      	ldr	r2, [pc, #152]	; (8006830 <TIM_Base_SetConfig+0x130>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d108      	bne.n	80067ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a10      	ldr	r2, [pc, #64]	; (8006814 <TIM_Base_SetConfig+0x114>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00f      	beq.n	80067f8 <TIM_Base_SetConfig+0xf8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a12      	ldr	r2, [pc, #72]	; (8006824 <TIM_Base_SetConfig+0x124>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00b      	beq.n	80067f8 <TIM_Base_SetConfig+0xf8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a11      	ldr	r2, [pc, #68]	; (8006828 <TIM_Base_SetConfig+0x128>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d007      	beq.n	80067f8 <TIM_Base_SetConfig+0xf8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a10      	ldr	r2, [pc, #64]	; (800682c <TIM_Base_SetConfig+0x12c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_Base_SetConfig+0xf8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a0f      	ldr	r2, [pc, #60]	; (8006830 <TIM_Base_SetConfig+0x130>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d103      	bne.n	8006800 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	615a      	str	r2, [r3, #20]
}
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40010000 	.word	0x40010000
 8006818:	40000400 	.word	0x40000400
 800681c:	40000800 	.word	0x40000800
 8006820:	40000c00 	.word	0x40000c00
 8006824:	40010400 	.word	0x40010400
 8006828:	40014000 	.word	0x40014000
 800682c:	40014400 	.word	0x40014400
 8006830:	40014800 	.word	0x40014800

08006834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f023 0201 	bic.w	r2, r3, #1
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4b37      	ldr	r3, [pc, #220]	; (800693c <TIM_OC1_SetConfig+0x108>)
 8006860:	4013      	ands	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f023 0302 	bic.w	r3, r3, #2
 800687c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a2d      	ldr	r2, [pc, #180]	; (8006940 <TIM_OC1_SetConfig+0x10c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00f      	beq.n	80068b0 <TIM_OC1_SetConfig+0x7c>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a2c      	ldr	r2, [pc, #176]	; (8006944 <TIM_OC1_SetConfig+0x110>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00b      	beq.n	80068b0 <TIM_OC1_SetConfig+0x7c>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a2b      	ldr	r2, [pc, #172]	; (8006948 <TIM_OC1_SetConfig+0x114>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d007      	beq.n	80068b0 <TIM_OC1_SetConfig+0x7c>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a2a      	ldr	r2, [pc, #168]	; (800694c <TIM_OC1_SetConfig+0x118>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_OC1_SetConfig+0x7c>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a29      	ldr	r2, [pc, #164]	; (8006950 <TIM_OC1_SetConfig+0x11c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d10c      	bne.n	80068ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f023 0308 	bic.w	r3, r3, #8
 80068b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	4313      	orrs	r3, r2
 80068c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f023 0304 	bic.w	r3, r3, #4
 80068c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a1c      	ldr	r2, [pc, #112]	; (8006940 <TIM_OC1_SetConfig+0x10c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00f      	beq.n	80068f2 <TIM_OC1_SetConfig+0xbe>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a1b      	ldr	r2, [pc, #108]	; (8006944 <TIM_OC1_SetConfig+0x110>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00b      	beq.n	80068f2 <TIM_OC1_SetConfig+0xbe>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a1a      	ldr	r2, [pc, #104]	; (8006948 <TIM_OC1_SetConfig+0x114>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d007      	beq.n	80068f2 <TIM_OC1_SetConfig+0xbe>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a19      	ldr	r2, [pc, #100]	; (800694c <TIM_OC1_SetConfig+0x118>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d003      	beq.n	80068f2 <TIM_OC1_SetConfig+0xbe>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a18      	ldr	r2, [pc, #96]	; (8006950 <TIM_OC1_SetConfig+0x11c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d111      	bne.n	8006916 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	621a      	str	r2, [r3, #32]
}
 8006930:	bf00      	nop
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	fffeff8f 	.word	0xfffeff8f
 8006940:	40010000 	.word	0x40010000
 8006944:	40010400 	.word	0x40010400
 8006948:	40014000 	.word	0x40014000
 800694c:	40014400 	.word	0x40014400
 8006950:	40014800 	.word	0x40014800

08006954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	f023 0210 	bic.w	r2, r3, #16
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4b34      	ldr	r3, [pc, #208]	; (8006a50 <TIM_OC2_SetConfig+0xfc>)
 8006980:	4013      	ands	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	021b      	lsls	r3, r3, #8
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f023 0320 	bic.w	r3, r3, #32
 800699e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a29      	ldr	r2, [pc, #164]	; (8006a54 <TIM_OC2_SetConfig+0x100>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d003      	beq.n	80069bc <TIM_OC2_SetConfig+0x68>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a28      	ldr	r2, [pc, #160]	; (8006a58 <TIM_OC2_SetConfig+0x104>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d10d      	bne.n	80069d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	011b      	lsls	r3, r3, #4
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a1e      	ldr	r2, [pc, #120]	; (8006a54 <TIM_OC2_SetConfig+0x100>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d00f      	beq.n	8006a00 <TIM_OC2_SetConfig+0xac>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a1d      	ldr	r2, [pc, #116]	; (8006a58 <TIM_OC2_SetConfig+0x104>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d00b      	beq.n	8006a00 <TIM_OC2_SetConfig+0xac>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a1c      	ldr	r2, [pc, #112]	; (8006a5c <TIM_OC2_SetConfig+0x108>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d007      	beq.n	8006a00 <TIM_OC2_SetConfig+0xac>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a1b      	ldr	r2, [pc, #108]	; (8006a60 <TIM_OC2_SetConfig+0x10c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d003      	beq.n	8006a00 <TIM_OC2_SetConfig+0xac>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a1a      	ldr	r2, [pc, #104]	; (8006a64 <TIM_OC2_SetConfig+0x110>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d113      	bne.n	8006a28 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	621a      	str	r2, [r3, #32]
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	feff8fff 	.word	0xfeff8fff
 8006a54:	40010000 	.word	0x40010000
 8006a58:	40010400 	.word	0x40010400
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	40014400 	.word	0x40014400
 8006a64:	40014800 	.word	0x40014800

08006a68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4b33      	ldr	r3, [pc, #204]	; (8006b60 <TIM_OC3_SetConfig+0xf8>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0303 	bic.w	r3, r3, #3
 8006a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	021b      	lsls	r3, r3, #8
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a28      	ldr	r2, [pc, #160]	; (8006b64 <TIM_OC3_SetConfig+0xfc>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d003      	beq.n	8006ace <TIM_OC3_SetConfig+0x66>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a27      	ldr	r2, [pc, #156]	; (8006b68 <TIM_OC3_SetConfig+0x100>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d10d      	bne.n	8006aea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	021b      	lsls	r3, r3, #8
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a1d      	ldr	r2, [pc, #116]	; (8006b64 <TIM_OC3_SetConfig+0xfc>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00f      	beq.n	8006b12 <TIM_OC3_SetConfig+0xaa>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a1c      	ldr	r2, [pc, #112]	; (8006b68 <TIM_OC3_SetConfig+0x100>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d00b      	beq.n	8006b12 <TIM_OC3_SetConfig+0xaa>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a1b      	ldr	r2, [pc, #108]	; (8006b6c <TIM_OC3_SetConfig+0x104>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d007      	beq.n	8006b12 <TIM_OC3_SetConfig+0xaa>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a1a      	ldr	r2, [pc, #104]	; (8006b70 <TIM_OC3_SetConfig+0x108>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d003      	beq.n	8006b12 <TIM_OC3_SetConfig+0xaa>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a19      	ldr	r2, [pc, #100]	; (8006b74 <TIM_OC3_SetConfig+0x10c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d113      	bne.n	8006b3a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	621a      	str	r2, [r3, #32]
}
 8006b54:	bf00      	nop
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	fffeff8f 	.word	0xfffeff8f
 8006b64:	40010000 	.word	0x40010000
 8006b68:	40010400 	.word	0x40010400
 8006b6c:	40014000 	.word	0x40014000
 8006b70:	40014400 	.word	0x40014400
 8006b74:	40014800 	.word	0x40014800

08006b78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4b24      	ldr	r3, [pc, #144]	; (8006c34 <TIM_OC4_SetConfig+0xbc>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	021b      	lsls	r3, r3, #8
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	031b      	lsls	r3, r3, #12
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a19      	ldr	r2, [pc, #100]	; (8006c38 <TIM_OC4_SetConfig+0xc0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d00f      	beq.n	8006bf8 <TIM_OC4_SetConfig+0x80>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a18      	ldr	r2, [pc, #96]	; (8006c3c <TIM_OC4_SetConfig+0xc4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d00b      	beq.n	8006bf8 <TIM_OC4_SetConfig+0x80>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a17      	ldr	r2, [pc, #92]	; (8006c40 <TIM_OC4_SetConfig+0xc8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d007      	beq.n	8006bf8 <TIM_OC4_SetConfig+0x80>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a16      	ldr	r2, [pc, #88]	; (8006c44 <TIM_OC4_SetConfig+0xcc>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d003      	beq.n	8006bf8 <TIM_OC4_SetConfig+0x80>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a15      	ldr	r2, [pc, #84]	; (8006c48 <TIM_OC4_SetConfig+0xd0>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d109      	bne.n	8006c0c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	019b      	lsls	r3, r3, #6
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	621a      	str	r2, [r3, #32]
}
 8006c26:	bf00      	nop
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	feff8fff 	.word	0xfeff8fff
 8006c38:	40010000 	.word	0x40010000
 8006c3c:	40010400 	.word	0x40010400
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40014400 	.word	0x40014400
 8006c48:	40014800 	.word	0x40014800

08006c4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4b21      	ldr	r3, [pc, #132]	; (8006cfc <TIM_OC5_SetConfig+0xb0>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	041b      	lsls	r3, r3, #16
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a18      	ldr	r2, [pc, #96]	; (8006d00 <TIM_OC5_SetConfig+0xb4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00f      	beq.n	8006cc2 <TIM_OC5_SetConfig+0x76>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a17      	ldr	r2, [pc, #92]	; (8006d04 <TIM_OC5_SetConfig+0xb8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00b      	beq.n	8006cc2 <TIM_OC5_SetConfig+0x76>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a16      	ldr	r2, [pc, #88]	; (8006d08 <TIM_OC5_SetConfig+0xbc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d007      	beq.n	8006cc2 <TIM_OC5_SetConfig+0x76>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a15      	ldr	r2, [pc, #84]	; (8006d0c <TIM_OC5_SetConfig+0xc0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d003      	beq.n	8006cc2 <TIM_OC5_SetConfig+0x76>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a14      	ldr	r2, [pc, #80]	; (8006d10 <TIM_OC5_SetConfig+0xc4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d109      	bne.n	8006cd6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	021b      	lsls	r3, r3, #8
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	621a      	str	r2, [r3, #32]
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	fffeff8f 	.word	0xfffeff8f
 8006d00:	40010000 	.word	0x40010000
 8006d04:	40010400 	.word	0x40010400
 8006d08:	40014000 	.word	0x40014000
 8006d0c:	40014400 	.word	0x40014400
 8006d10:	40014800 	.word	0x40014800

08006d14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4b22      	ldr	r3, [pc, #136]	; (8006dc8 <TIM_OC6_SetConfig+0xb4>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	021b      	lsls	r3, r3, #8
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	051b      	lsls	r3, r3, #20
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <TIM_OC6_SetConfig+0xb8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00f      	beq.n	8006d8c <TIM_OC6_SetConfig+0x78>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a18      	ldr	r2, [pc, #96]	; (8006dd0 <TIM_OC6_SetConfig+0xbc>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00b      	beq.n	8006d8c <TIM_OC6_SetConfig+0x78>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a17      	ldr	r2, [pc, #92]	; (8006dd4 <TIM_OC6_SetConfig+0xc0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d007      	beq.n	8006d8c <TIM_OC6_SetConfig+0x78>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a16      	ldr	r2, [pc, #88]	; (8006dd8 <TIM_OC6_SetConfig+0xc4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d003      	beq.n	8006d8c <TIM_OC6_SetConfig+0x78>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a15      	ldr	r2, [pc, #84]	; (8006ddc <TIM_OC6_SetConfig+0xc8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d109      	bne.n	8006da0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	029b      	lsls	r3, r3, #10
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	621a      	str	r2, [r3, #32]
}
 8006dba:	bf00      	nop
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	feff8fff 	.word	0xfeff8fff
 8006dcc:	40010000 	.word	0x40010000
 8006dd0:	40010400 	.word	0x40010400
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40014400 	.word	0x40014400
 8006ddc:	40014800 	.word	0x40014800

08006de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	f023 0201 	bic.w	r2, r3, #1
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f023 030a 	bic.w	r3, r3, #10
 8006e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	621a      	str	r2, [r3, #32]
}
 8006e32:	bf00      	nop
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b087      	sub	sp, #28
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	f023 0210 	bic.w	r2, r3, #16
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	031b      	lsls	r3, r3, #12
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	621a      	str	r2, [r3, #32]
}
 8006e92:	bf00      	nop
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
	...

08006ea0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4b09      	ldr	r3, [pc, #36]	; (8006ed8 <TIM_ITRx_SetConfig+0x38>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f043 0307 	orr.w	r3, r3, #7
 8006ec2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	609a      	str	r2, [r3, #8]
}
 8006eca:	bf00      	nop
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	ffcfff8f 	.word	0xffcfff8f

08006edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	021a      	lsls	r2, r3, #8
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	609a      	str	r2, [r3, #8]
}
 8006f10:	bf00      	nop
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f003 031f 	and.w	r3, r3, #31
 8006f2e:	2201      	movs	r2, #1
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1a      	ldr	r2, [r3, #32]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	43db      	mvns	r3, r3
 8006f3e:	401a      	ands	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a1a      	ldr	r2, [r3, #32]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	fa01 f303 	lsl.w	r3, r1, r3
 8006f54:	431a      	orrs	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	621a      	str	r2, [r3, #32]
}
 8006f5a:	bf00      	nop
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e06d      	b.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a30      	ldr	r2, [pc, #192]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d004      	beq.n	8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a2f      	ldr	r2, [pc, #188]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d108      	bne.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a20      	ldr	r2, [pc, #128]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d022      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff2:	d01d      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1d      	ldr	r2, [pc, #116]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d018      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a1c      	ldr	r2, [pc, #112]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d013      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a1a      	ldr	r2, [pc, #104]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00e      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a15      	ldr	r2, [pc, #84]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d009      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a16      	ldr	r2, [pc, #88]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d004      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a15      	ldr	r2, [pc, #84]	; (8007080 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d10c      	bne.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	4313      	orrs	r3, r2
 8007040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	40010000 	.word	0x40010000
 800706c:	40010400 	.word	0x40010400
 8007070:	40000400 	.word	0x40000400
 8007074:	40000800 	.word	0x40000800
 8007078:	40000c00 	.word	0x40000c00
 800707c:	40001800 	.word	0x40001800
 8007080:	40014000 	.word	0x40014000

08007084 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800709c:	2302      	movs	r3, #2
 800709e:	e065      	b.n	800716c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	041b      	lsls	r3, r3, #16
 8007116:	4313      	orrs	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a16      	ldr	r2, [pc, #88]	; (8007178 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d004      	beq.n	800712e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a14      	ldr	r2, [pc, #80]	; (800717c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d115      	bne.n	800715a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	051b      	lsls	r3, r3, #20
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	40010000 	.word	0x40010000
 800717c:	40010400 	.word	0x40010400

08007180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e042      	b.n	8007254 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d106      	bne.n	80071e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7fa fc6d 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2224      	movs	r2, #36	; 0x24
 80071ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0201 	bic.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f8c2 	bl	8007388 <UART_SetConfig>
 8007204:	4603      	mov	r3, r0
 8007206:	2b01      	cmp	r3, #1
 8007208:	d101      	bne.n	800720e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e022      	b.n	8007254 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fe1e 	bl	8007e58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800722a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800723a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0201 	orr.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fea5 	bl	8007f9c <UART_CheckIdleState>
 8007252:	4603      	mov	r3, r0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08a      	sub	sp, #40	; 0x28
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	4613      	mov	r3, r2
 800726a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007272:	2b20      	cmp	r3, #32
 8007274:	f040 8083 	bne.w	800737e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <HAL_UART_Transmit+0x28>
 800727e:	88fb      	ldrh	r3, [r7, #6]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e07b      	b.n	8007380 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800728e:	2b01      	cmp	r3, #1
 8007290:	d101      	bne.n	8007296 <HAL_UART_Transmit+0x3a>
 8007292:	2302      	movs	r3, #2
 8007294:	e074      	b.n	8007380 <HAL_UART_Transmit+0x124>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2221      	movs	r2, #33	; 0x21
 80072aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072ae:	f7fa fe17 	bl	8001ee0 <HAL_GetTick>
 80072b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	88fa      	ldrh	r2, [r7, #6]
 80072b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	88fa      	ldrh	r2, [r7, #6]
 80072c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072cc:	d108      	bne.n	80072e0 <HAL_UART_Transmit+0x84>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d104      	bne.n	80072e0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	e003      	b.n	80072e8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80072f0:	e02c      	b.n	800734c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2200      	movs	r2, #0
 80072fa:	2180      	movs	r1, #128	; 0x80
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 fe98 	bl	8008032 <UART_WaitOnFlagUntilTimeout>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e039      	b.n	8007380 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10b      	bne.n	800732a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007320:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	3302      	adds	r3, #2
 8007326:	61bb      	str	r3, [r7, #24]
 8007328:	e007      	b.n	800733a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	781a      	ldrb	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	3301      	adds	r3, #1
 8007338:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007340:	b29b      	uxth	r3, r3
 8007342:	3b01      	subs	r3, #1
 8007344:	b29a      	uxth	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007352:	b29b      	uxth	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1cc      	bne.n	80072f2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	2200      	movs	r2, #0
 8007360:	2140      	movs	r1, #64	; 0x40
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 fe65 	bl	8008032 <UART_WaitOnFlagUntilTimeout>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e006      	b.n	8007380 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2220      	movs	r2, #32
 8007376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	e000      	b.n	8007380 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800737e:	2302      	movs	r3, #2
  }
}
 8007380:	4618      	mov	r0, r3
 8007382:	3720      	adds	r7, #32
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800738c:	b092      	sub	sp, #72	; 0x48
 800738e:	af00      	add	r7, sp, #0
 8007390:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	431a      	orrs	r2, r3
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	431a      	orrs	r2, r3
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4bbe      	ldr	r3, [pc, #760]	; (80076b0 <UART_SetConfig+0x328>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	6812      	ldr	r2, [r2, #0]
 80073be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073c0:	430b      	orrs	r3, r1
 80073c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4ab3      	ldr	r2, [pc, #716]	; (80076b4 <UART_SetConfig+0x32c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d004      	beq.n	80073f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073f0:	4313      	orrs	r3, r2
 80073f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	4baf      	ldr	r3, [pc, #700]	; (80076b8 <UART_SetConfig+0x330>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007404:	430b      	orrs	r3, r1
 8007406:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	f023 010f 	bic.w	r1, r3, #15
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4aa6      	ldr	r2, [pc, #664]	; (80076bc <UART_SetConfig+0x334>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d177      	bne.n	8007518 <UART_SetConfig+0x190>
 8007428:	4ba5      	ldr	r3, [pc, #660]	; (80076c0 <UART_SetConfig+0x338>)
 800742a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800742c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007430:	2b28      	cmp	r3, #40	; 0x28
 8007432:	d86d      	bhi.n	8007510 <UART_SetConfig+0x188>
 8007434:	a201      	add	r2, pc, #4	; (adr r2, 800743c <UART_SetConfig+0xb4>)
 8007436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743a:	bf00      	nop
 800743c:	080074e1 	.word	0x080074e1
 8007440:	08007511 	.word	0x08007511
 8007444:	08007511 	.word	0x08007511
 8007448:	08007511 	.word	0x08007511
 800744c:	08007511 	.word	0x08007511
 8007450:	08007511 	.word	0x08007511
 8007454:	08007511 	.word	0x08007511
 8007458:	08007511 	.word	0x08007511
 800745c:	080074e9 	.word	0x080074e9
 8007460:	08007511 	.word	0x08007511
 8007464:	08007511 	.word	0x08007511
 8007468:	08007511 	.word	0x08007511
 800746c:	08007511 	.word	0x08007511
 8007470:	08007511 	.word	0x08007511
 8007474:	08007511 	.word	0x08007511
 8007478:	08007511 	.word	0x08007511
 800747c:	080074f1 	.word	0x080074f1
 8007480:	08007511 	.word	0x08007511
 8007484:	08007511 	.word	0x08007511
 8007488:	08007511 	.word	0x08007511
 800748c:	08007511 	.word	0x08007511
 8007490:	08007511 	.word	0x08007511
 8007494:	08007511 	.word	0x08007511
 8007498:	08007511 	.word	0x08007511
 800749c:	080074f9 	.word	0x080074f9
 80074a0:	08007511 	.word	0x08007511
 80074a4:	08007511 	.word	0x08007511
 80074a8:	08007511 	.word	0x08007511
 80074ac:	08007511 	.word	0x08007511
 80074b0:	08007511 	.word	0x08007511
 80074b4:	08007511 	.word	0x08007511
 80074b8:	08007511 	.word	0x08007511
 80074bc:	08007501 	.word	0x08007501
 80074c0:	08007511 	.word	0x08007511
 80074c4:	08007511 	.word	0x08007511
 80074c8:	08007511 	.word	0x08007511
 80074cc:	08007511 	.word	0x08007511
 80074d0:	08007511 	.word	0x08007511
 80074d4:	08007511 	.word	0x08007511
 80074d8:	08007511 	.word	0x08007511
 80074dc:	08007509 	.word	0x08007509
 80074e0:	2301      	movs	r3, #1
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074e6:	e222      	b.n	800792e <UART_SetConfig+0x5a6>
 80074e8:	2304      	movs	r3, #4
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ee:	e21e      	b.n	800792e <UART_SetConfig+0x5a6>
 80074f0:	2308      	movs	r3, #8
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074f6:	e21a      	b.n	800792e <UART_SetConfig+0x5a6>
 80074f8:	2310      	movs	r3, #16
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074fe:	e216      	b.n	800792e <UART_SetConfig+0x5a6>
 8007500:	2320      	movs	r3, #32
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007506:	e212      	b.n	800792e <UART_SetConfig+0x5a6>
 8007508:	2340      	movs	r3, #64	; 0x40
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750e:	e20e      	b.n	800792e <UART_SetConfig+0x5a6>
 8007510:	2380      	movs	r3, #128	; 0x80
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007516:	e20a      	b.n	800792e <UART_SetConfig+0x5a6>
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a69      	ldr	r2, [pc, #420]	; (80076c4 <UART_SetConfig+0x33c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d130      	bne.n	8007584 <UART_SetConfig+0x1fc>
 8007522:	4b67      	ldr	r3, [pc, #412]	; (80076c0 <UART_SetConfig+0x338>)
 8007524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	2b05      	cmp	r3, #5
 800752c:	d826      	bhi.n	800757c <UART_SetConfig+0x1f4>
 800752e:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <UART_SetConfig+0x1ac>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	0800754d 	.word	0x0800754d
 8007538:	08007555 	.word	0x08007555
 800753c:	0800755d 	.word	0x0800755d
 8007540:	08007565 	.word	0x08007565
 8007544:	0800756d 	.word	0x0800756d
 8007548:	08007575 	.word	0x08007575
 800754c:	2300      	movs	r3, #0
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007552:	e1ec      	b.n	800792e <UART_SetConfig+0x5a6>
 8007554:	2304      	movs	r3, #4
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800755a:	e1e8      	b.n	800792e <UART_SetConfig+0x5a6>
 800755c:	2308      	movs	r3, #8
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007562:	e1e4      	b.n	800792e <UART_SetConfig+0x5a6>
 8007564:	2310      	movs	r3, #16
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756a:	e1e0      	b.n	800792e <UART_SetConfig+0x5a6>
 800756c:	2320      	movs	r3, #32
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007572:	e1dc      	b.n	800792e <UART_SetConfig+0x5a6>
 8007574:	2340      	movs	r3, #64	; 0x40
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757a:	e1d8      	b.n	800792e <UART_SetConfig+0x5a6>
 800757c:	2380      	movs	r3, #128	; 0x80
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007582:	e1d4      	b.n	800792e <UART_SetConfig+0x5a6>
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a4f      	ldr	r2, [pc, #316]	; (80076c8 <UART_SetConfig+0x340>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d130      	bne.n	80075f0 <UART_SetConfig+0x268>
 800758e:	4b4c      	ldr	r3, [pc, #304]	; (80076c0 <UART_SetConfig+0x338>)
 8007590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	2b05      	cmp	r3, #5
 8007598:	d826      	bhi.n	80075e8 <UART_SetConfig+0x260>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <UART_SetConfig+0x218>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075b9 	.word	0x080075b9
 80075a4:	080075c1 	.word	0x080075c1
 80075a8:	080075c9 	.word	0x080075c9
 80075ac:	080075d1 	.word	0x080075d1
 80075b0:	080075d9 	.word	0x080075d9
 80075b4:	080075e1 	.word	0x080075e1
 80075b8:	2300      	movs	r3, #0
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075be:	e1b6      	b.n	800792e <UART_SetConfig+0x5a6>
 80075c0:	2304      	movs	r3, #4
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075c6:	e1b2      	b.n	800792e <UART_SetConfig+0x5a6>
 80075c8:	2308      	movs	r3, #8
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ce:	e1ae      	b.n	800792e <UART_SetConfig+0x5a6>
 80075d0:	2310      	movs	r3, #16
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075d6:	e1aa      	b.n	800792e <UART_SetConfig+0x5a6>
 80075d8:	2320      	movs	r3, #32
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075de:	e1a6      	b.n	800792e <UART_SetConfig+0x5a6>
 80075e0:	2340      	movs	r3, #64	; 0x40
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e6:	e1a2      	b.n	800792e <UART_SetConfig+0x5a6>
 80075e8:	2380      	movs	r3, #128	; 0x80
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ee:	e19e      	b.n	800792e <UART_SetConfig+0x5a6>
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a35      	ldr	r2, [pc, #212]	; (80076cc <UART_SetConfig+0x344>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d130      	bne.n	800765c <UART_SetConfig+0x2d4>
 80075fa:	4b31      	ldr	r3, [pc, #196]	; (80076c0 <UART_SetConfig+0x338>)
 80075fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	2b05      	cmp	r3, #5
 8007604:	d826      	bhi.n	8007654 <UART_SetConfig+0x2cc>
 8007606:	a201      	add	r2, pc, #4	; (adr r2, 800760c <UART_SetConfig+0x284>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	08007625 	.word	0x08007625
 8007610:	0800762d 	.word	0x0800762d
 8007614:	08007635 	.word	0x08007635
 8007618:	0800763d 	.word	0x0800763d
 800761c:	08007645 	.word	0x08007645
 8007620:	0800764d 	.word	0x0800764d
 8007624:	2300      	movs	r3, #0
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762a:	e180      	b.n	800792e <UART_SetConfig+0x5a6>
 800762c:	2304      	movs	r3, #4
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007632:	e17c      	b.n	800792e <UART_SetConfig+0x5a6>
 8007634:	2308      	movs	r3, #8
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763a:	e178      	b.n	800792e <UART_SetConfig+0x5a6>
 800763c:	2310      	movs	r3, #16
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007642:	e174      	b.n	800792e <UART_SetConfig+0x5a6>
 8007644:	2320      	movs	r3, #32
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800764a:	e170      	b.n	800792e <UART_SetConfig+0x5a6>
 800764c:	2340      	movs	r3, #64	; 0x40
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007652:	e16c      	b.n	800792e <UART_SetConfig+0x5a6>
 8007654:	2380      	movs	r3, #128	; 0x80
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765a:	e168      	b.n	800792e <UART_SetConfig+0x5a6>
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1b      	ldr	r2, [pc, #108]	; (80076d0 <UART_SetConfig+0x348>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d142      	bne.n	80076ec <UART_SetConfig+0x364>
 8007666:	4b16      	ldr	r3, [pc, #88]	; (80076c0 <UART_SetConfig+0x338>)
 8007668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	2b05      	cmp	r3, #5
 8007670:	d838      	bhi.n	80076e4 <UART_SetConfig+0x35c>
 8007672:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <UART_SetConfig+0x2f0>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	08007691 	.word	0x08007691
 800767c:	08007699 	.word	0x08007699
 8007680:	080076a1 	.word	0x080076a1
 8007684:	080076a9 	.word	0x080076a9
 8007688:	080076d5 	.word	0x080076d5
 800768c:	080076dd 	.word	0x080076dd
 8007690:	2300      	movs	r3, #0
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007696:	e14a      	b.n	800792e <UART_SetConfig+0x5a6>
 8007698:	2304      	movs	r3, #4
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769e:	e146      	b.n	800792e <UART_SetConfig+0x5a6>
 80076a0:	2308      	movs	r3, #8
 80076a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076a6:	e142      	b.n	800792e <UART_SetConfig+0x5a6>
 80076a8:	2310      	movs	r3, #16
 80076aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ae:	e13e      	b.n	800792e <UART_SetConfig+0x5a6>
 80076b0:	cfff69f3 	.word	0xcfff69f3
 80076b4:	58000c00 	.word	0x58000c00
 80076b8:	11fff4ff 	.word	0x11fff4ff
 80076bc:	40011000 	.word	0x40011000
 80076c0:	58024400 	.word	0x58024400
 80076c4:	40004400 	.word	0x40004400
 80076c8:	40004800 	.word	0x40004800
 80076cc:	40004c00 	.word	0x40004c00
 80076d0:	40005000 	.word	0x40005000
 80076d4:	2320      	movs	r3, #32
 80076d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076da:	e128      	b.n	800792e <UART_SetConfig+0x5a6>
 80076dc:	2340      	movs	r3, #64	; 0x40
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e2:	e124      	b.n	800792e <UART_SetConfig+0x5a6>
 80076e4:	2380      	movs	r3, #128	; 0x80
 80076e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ea:	e120      	b.n	800792e <UART_SetConfig+0x5a6>
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4acb      	ldr	r2, [pc, #812]	; (8007a20 <UART_SetConfig+0x698>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d176      	bne.n	80077e4 <UART_SetConfig+0x45c>
 80076f6:	4bcb      	ldr	r3, [pc, #812]	; (8007a24 <UART_SetConfig+0x69c>)
 80076f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076fe:	2b28      	cmp	r3, #40	; 0x28
 8007700:	d86c      	bhi.n	80077dc <UART_SetConfig+0x454>
 8007702:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <UART_SetConfig+0x380>)
 8007704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007708:	080077ad 	.word	0x080077ad
 800770c:	080077dd 	.word	0x080077dd
 8007710:	080077dd 	.word	0x080077dd
 8007714:	080077dd 	.word	0x080077dd
 8007718:	080077dd 	.word	0x080077dd
 800771c:	080077dd 	.word	0x080077dd
 8007720:	080077dd 	.word	0x080077dd
 8007724:	080077dd 	.word	0x080077dd
 8007728:	080077b5 	.word	0x080077b5
 800772c:	080077dd 	.word	0x080077dd
 8007730:	080077dd 	.word	0x080077dd
 8007734:	080077dd 	.word	0x080077dd
 8007738:	080077dd 	.word	0x080077dd
 800773c:	080077dd 	.word	0x080077dd
 8007740:	080077dd 	.word	0x080077dd
 8007744:	080077dd 	.word	0x080077dd
 8007748:	080077bd 	.word	0x080077bd
 800774c:	080077dd 	.word	0x080077dd
 8007750:	080077dd 	.word	0x080077dd
 8007754:	080077dd 	.word	0x080077dd
 8007758:	080077dd 	.word	0x080077dd
 800775c:	080077dd 	.word	0x080077dd
 8007760:	080077dd 	.word	0x080077dd
 8007764:	080077dd 	.word	0x080077dd
 8007768:	080077c5 	.word	0x080077c5
 800776c:	080077dd 	.word	0x080077dd
 8007770:	080077dd 	.word	0x080077dd
 8007774:	080077dd 	.word	0x080077dd
 8007778:	080077dd 	.word	0x080077dd
 800777c:	080077dd 	.word	0x080077dd
 8007780:	080077dd 	.word	0x080077dd
 8007784:	080077dd 	.word	0x080077dd
 8007788:	080077cd 	.word	0x080077cd
 800778c:	080077dd 	.word	0x080077dd
 8007790:	080077dd 	.word	0x080077dd
 8007794:	080077dd 	.word	0x080077dd
 8007798:	080077dd 	.word	0x080077dd
 800779c:	080077dd 	.word	0x080077dd
 80077a0:	080077dd 	.word	0x080077dd
 80077a4:	080077dd 	.word	0x080077dd
 80077a8:	080077d5 	.word	0x080077d5
 80077ac:	2301      	movs	r3, #1
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b2:	e0bc      	b.n	800792e <UART_SetConfig+0x5a6>
 80077b4:	2304      	movs	r3, #4
 80077b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ba:	e0b8      	b.n	800792e <UART_SetConfig+0x5a6>
 80077bc:	2308      	movs	r3, #8
 80077be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077c2:	e0b4      	b.n	800792e <UART_SetConfig+0x5a6>
 80077c4:	2310      	movs	r3, #16
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ca:	e0b0      	b.n	800792e <UART_SetConfig+0x5a6>
 80077cc:	2320      	movs	r3, #32
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077d2:	e0ac      	b.n	800792e <UART_SetConfig+0x5a6>
 80077d4:	2340      	movs	r3, #64	; 0x40
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077da:	e0a8      	b.n	800792e <UART_SetConfig+0x5a6>
 80077dc:	2380      	movs	r3, #128	; 0x80
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e2:	e0a4      	b.n	800792e <UART_SetConfig+0x5a6>
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a8f      	ldr	r2, [pc, #572]	; (8007a28 <UART_SetConfig+0x6a0>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d130      	bne.n	8007850 <UART_SetConfig+0x4c8>
 80077ee:	4b8d      	ldr	r3, [pc, #564]	; (8007a24 <UART_SetConfig+0x69c>)
 80077f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	2b05      	cmp	r3, #5
 80077f8:	d826      	bhi.n	8007848 <UART_SetConfig+0x4c0>
 80077fa:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <UART_SetConfig+0x478>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007819 	.word	0x08007819
 8007804:	08007821 	.word	0x08007821
 8007808:	08007829 	.word	0x08007829
 800780c:	08007831 	.word	0x08007831
 8007810:	08007839 	.word	0x08007839
 8007814:	08007841 	.word	0x08007841
 8007818:	2300      	movs	r3, #0
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800781e:	e086      	b.n	800792e <UART_SetConfig+0x5a6>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007826:	e082      	b.n	800792e <UART_SetConfig+0x5a6>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800782e:	e07e      	b.n	800792e <UART_SetConfig+0x5a6>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007836:	e07a      	b.n	800792e <UART_SetConfig+0x5a6>
 8007838:	2320      	movs	r3, #32
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800783e:	e076      	b.n	800792e <UART_SetConfig+0x5a6>
 8007840:	2340      	movs	r3, #64	; 0x40
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007846:	e072      	b.n	800792e <UART_SetConfig+0x5a6>
 8007848:	2380      	movs	r3, #128	; 0x80
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800784e:	e06e      	b.n	800792e <UART_SetConfig+0x5a6>
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a75      	ldr	r2, [pc, #468]	; (8007a2c <UART_SetConfig+0x6a4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d130      	bne.n	80078bc <UART_SetConfig+0x534>
 800785a:	4b72      	ldr	r3, [pc, #456]	; (8007a24 <UART_SetConfig+0x69c>)
 800785c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	2b05      	cmp	r3, #5
 8007864:	d826      	bhi.n	80078b4 <UART_SetConfig+0x52c>
 8007866:	a201      	add	r2, pc, #4	; (adr r2, 800786c <UART_SetConfig+0x4e4>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	08007885 	.word	0x08007885
 8007870:	0800788d 	.word	0x0800788d
 8007874:	08007895 	.word	0x08007895
 8007878:	0800789d 	.word	0x0800789d
 800787c:	080078a5 	.word	0x080078a5
 8007880:	080078ad 	.word	0x080078ad
 8007884:	2300      	movs	r3, #0
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788a:	e050      	b.n	800792e <UART_SetConfig+0x5a6>
 800788c:	2304      	movs	r3, #4
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007892:	e04c      	b.n	800792e <UART_SetConfig+0x5a6>
 8007894:	2308      	movs	r3, #8
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800789a:	e048      	b.n	800792e <UART_SetConfig+0x5a6>
 800789c:	2310      	movs	r3, #16
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078a2:	e044      	b.n	800792e <UART_SetConfig+0x5a6>
 80078a4:	2320      	movs	r3, #32
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078aa:	e040      	b.n	800792e <UART_SetConfig+0x5a6>
 80078ac:	2340      	movs	r3, #64	; 0x40
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078b2:	e03c      	b.n	800792e <UART_SetConfig+0x5a6>
 80078b4:	2380      	movs	r3, #128	; 0x80
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ba:	e038      	b.n	800792e <UART_SetConfig+0x5a6>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a5b      	ldr	r2, [pc, #364]	; (8007a30 <UART_SetConfig+0x6a8>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d130      	bne.n	8007928 <UART_SetConfig+0x5a0>
 80078c6:	4b57      	ldr	r3, [pc, #348]	; (8007a24 <UART_SetConfig+0x69c>)
 80078c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d826      	bhi.n	8007920 <UART_SetConfig+0x598>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <UART_SetConfig+0x550>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078f1 	.word	0x080078f1
 80078dc:	080078f9 	.word	0x080078f9
 80078e0:	08007901 	.word	0x08007901
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007911 	.word	0x08007911
 80078ec:	08007919 	.word	0x08007919
 80078f0:	2302      	movs	r3, #2
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f6:	e01a      	b.n	800792e <UART_SetConfig+0x5a6>
 80078f8:	2304      	movs	r3, #4
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fe:	e016      	b.n	800792e <UART_SetConfig+0x5a6>
 8007900:	2308      	movs	r3, #8
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007906:	e012      	b.n	800792e <UART_SetConfig+0x5a6>
 8007908:	2310      	movs	r3, #16
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800790e:	e00e      	b.n	800792e <UART_SetConfig+0x5a6>
 8007910:	2320      	movs	r3, #32
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007916:	e00a      	b.n	800792e <UART_SetConfig+0x5a6>
 8007918:	2340      	movs	r3, #64	; 0x40
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791e:	e006      	b.n	800792e <UART_SetConfig+0x5a6>
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007926:	e002      	b.n	800792e <UART_SetConfig+0x5a6>
 8007928:	2380      	movs	r3, #128	; 0x80
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a3f      	ldr	r2, [pc, #252]	; (8007a30 <UART_SetConfig+0x6a8>)
 8007934:	4293      	cmp	r3, r2
 8007936:	f040 80f8 	bne.w	8007b2a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800793a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800793e:	2b20      	cmp	r3, #32
 8007940:	dc46      	bgt.n	80079d0 <UART_SetConfig+0x648>
 8007942:	2b02      	cmp	r3, #2
 8007944:	f2c0 8082 	blt.w	8007a4c <UART_SetConfig+0x6c4>
 8007948:	3b02      	subs	r3, #2
 800794a:	2b1e      	cmp	r3, #30
 800794c:	d87e      	bhi.n	8007a4c <UART_SetConfig+0x6c4>
 800794e:	a201      	add	r2, pc, #4	; (adr r2, 8007954 <UART_SetConfig+0x5cc>)
 8007950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007954:	080079d7 	.word	0x080079d7
 8007958:	08007a4d 	.word	0x08007a4d
 800795c:	080079df 	.word	0x080079df
 8007960:	08007a4d 	.word	0x08007a4d
 8007964:	08007a4d 	.word	0x08007a4d
 8007968:	08007a4d 	.word	0x08007a4d
 800796c:	080079ef 	.word	0x080079ef
 8007970:	08007a4d 	.word	0x08007a4d
 8007974:	08007a4d 	.word	0x08007a4d
 8007978:	08007a4d 	.word	0x08007a4d
 800797c:	08007a4d 	.word	0x08007a4d
 8007980:	08007a4d 	.word	0x08007a4d
 8007984:	08007a4d 	.word	0x08007a4d
 8007988:	08007a4d 	.word	0x08007a4d
 800798c:	080079ff 	.word	0x080079ff
 8007990:	08007a4d 	.word	0x08007a4d
 8007994:	08007a4d 	.word	0x08007a4d
 8007998:	08007a4d 	.word	0x08007a4d
 800799c:	08007a4d 	.word	0x08007a4d
 80079a0:	08007a4d 	.word	0x08007a4d
 80079a4:	08007a4d 	.word	0x08007a4d
 80079a8:	08007a4d 	.word	0x08007a4d
 80079ac:	08007a4d 	.word	0x08007a4d
 80079b0:	08007a4d 	.word	0x08007a4d
 80079b4:	08007a4d 	.word	0x08007a4d
 80079b8:	08007a4d 	.word	0x08007a4d
 80079bc:	08007a4d 	.word	0x08007a4d
 80079c0:	08007a4d 	.word	0x08007a4d
 80079c4:	08007a4d 	.word	0x08007a4d
 80079c8:	08007a4d 	.word	0x08007a4d
 80079cc:	08007a3f 	.word	0x08007a3f
 80079d0:	2b40      	cmp	r3, #64	; 0x40
 80079d2:	d037      	beq.n	8007a44 <UART_SetConfig+0x6bc>
 80079d4:	e03a      	b.n	8007a4c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80079d6:	f7fd fc3f 	bl	8005258 <HAL_RCCEx_GetD3PCLK1Freq>
 80079da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079dc:	e03c      	b.n	8007a58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fd fc4e 	bl	8005284 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079ec:	e034      	b.n	8007a58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079ee:	f107 0318 	add.w	r3, r7, #24
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fd fd9a 	bl	800552c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079fc:	e02c      	b.n	8007a58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079fe:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <UART_SetConfig+0x69c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d016      	beq.n	8007a38 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a0a:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <UART_SetConfig+0x69c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	08db      	lsrs	r3, r3, #3
 8007a10:	f003 0303 	and.w	r3, r3, #3
 8007a14:	4a07      	ldr	r2, [pc, #28]	; (8007a34 <UART_SetConfig+0x6ac>)
 8007a16:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a1c:	e01c      	b.n	8007a58 <UART_SetConfig+0x6d0>
 8007a1e:	bf00      	nop
 8007a20:	40011400 	.word	0x40011400
 8007a24:	58024400 	.word	0x58024400
 8007a28:	40007800 	.word	0x40007800
 8007a2c:	40007c00 	.word	0x40007c00
 8007a30:	58000c00 	.word	0x58000c00
 8007a34:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007a38:	4b9d      	ldr	r3, [pc, #628]	; (8007cb0 <UART_SetConfig+0x928>)
 8007a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a3c:	e00c      	b.n	8007a58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a3e:	4b9d      	ldr	r3, [pc, #628]	; (8007cb4 <UART_SetConfig+0x92c>)
 8007a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a42:	e009      	b.n	8007a58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a4a:	e005      	b.n	8007a58 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 81de 	beq.w	8007e1c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	4a94      	ldr	r2, [pc, #592]	; (8007cb8 <UART_SetConfig+0x930>)
 8007a66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a72:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	4413      	add	r3, r2
 8007a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d305      	bcc.n	8007a90 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d903      	bls.n	8007a98 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a96:	e1c1      	b.n	8007e1c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	60fa      	str	r2, [r7, #12]
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	4a84      	ldr	r2, [pc, #528]	; (8007cb8 <UART_SetConfig+0x930>)
 8007aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2200      	movs	r2, #0
 8007aae:	603b      	str	r3, [r7, #0]
 8007ab0:	607a      	str	r2, [r7, #4]
 8007ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007aba:	f7f8 fc69 	bl	8000390 <__aeabi_uldivmod>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	f04f 0200 	mov.w	r2, #0
 8007aca:	f04f 0300 	mov.w	r3, #0
 8007ace:	020b      	lsls	r3, r1, #8
 8007ad0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ad4:	0202      	lsls	r2, r0, #8
 8007ad6:	6979      	ldr	r1, [r7, #20]
 8007ad8:	6849      	ldr	r1, [r1, #4]
 8007ada:	0849      	lsrs	r1, r1, #1
 8007adc:	2000      	movs	r0, #0
 8007ade:	460c      	mov	r4, r1
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	eb12 0804 	adds.w	r8, r2, r4
 8007ae6:	eb43 0905 	adc.w	r9, r3, r5
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	469a      	mov	sl, r3
 8007af2:	4693      	mov	fp, r2
 8007af4:	4652      	mov	r2, sl
 8007af6:	465b      	mov	r3, fp
 8007af8:	4640      	mov	r0, r8
 8007afa:	4649      	mov	r1, r9
 8007afc:	f7f8 fc48 	bl	8000390 <__aeabi_uldivmod>
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4613      	mov	r3, r2
 8007b06:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b0e:	d308      	bcc.n	8007b22 <UART_SetConfig+0x79a>
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b16:	d204      	bcs.n	8007b22 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b1e:	60da      	str	r2, [r3, #12]
 8007b20:	e17c      	b.n	8007e1c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b28:	e178      	b.n	8007e1c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b32:	f040 80c5 	bne.w	8007cc0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007b36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	dc48      	bgt.n	8007bd0 <UART_SetConfig+0x848>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	db7b      	blt.n	8007c3a <UART_SetConfig+0x8b2>
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	d879      	bhi.n	8007c3a <UART_SetConfig+0x8b2>
 8007b46:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <UART_SetConfig+0x7c4>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007bd7 	.word	0x08007bd7
 8007b50:	08007bdf 	.word	0x08007bdf
 8007b54:	08007c3b 	.word	0x08007c3b
 8007b58:	08007c3b 	.word	0x08007c3b
 8007b5c:	08007be7 	.word	0x08007be7
 8007b60:	08007c3b 	.word	0x08007c3b
 8007b64:	08007c3b 	.word	0x08007c3b
 8007b68:	08007c3b 	.word	0x08007c3b
 8007b6c:	08007bf7 	.word	0x08007bf7
 8007b70:	08007c3b 	.word	0x08007c3b
 8007b74:	08007c3b 	.word	0x08007c3b
 8007b78:	08007c3b 	.word	0x08007c3b
 8007b7c:	08007c3b 	.word	0x08007c3b
 8007b80:	08007c3b 	.word	0x08007c3b
 8007b84:	08007c3b 	.word	0x08007c3b
 8007b88:	08007c3b 	.word	0x08007c3b
 8007b8c:	08007c07 	.word	0x08007c07
 8007b90:	08007c3b 	.word	0x08007c3b
 8007b94:	08007c3b 	.word	0x08007c3b
 8007b98:	08007c3b 	.word	0x08007c3b
 8007b9c:	08007c3b 	.word	0x08007c3b
 8007ba0:	08007c3b 	.word	0x08007c3b
 8007ba4:	08007c3b 	.word	0x08007c3b
 8007ba8:	08007c3b 	.word	0x08007c3b
 8007bac:	08007c3b 	.word	0x08007c3b
 8007bb0:	08007c3b 	.word	0x08007c3b
 8007bb4:	08007c3b 	.word	0x08007c3b
 8007bb8:	08007c3b 	.word	0x08007c3b
 8007bbc:	08007c3b 	.word	0x08007c3b
 8007bc0:	08007c3b 	.word	0x08007c3b
 8007bc4:	08007c3b 	.word	0x08007c3b
 8007bc8:	08007c3b 	.word	0x08007c3b
 8007bcc:	08007c2d 	.word	0x08007c2d
 8007bd0:	2b40      	cmp	r3, #64	; 0x40
 8007bd2:	d02e      	beq.n	8007c32 <UART_SetConfig+0x8aa>
 8007bd4:	e031      	b.n	8007c3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bd6:	f7fc fbcd 	bl	8004374 <HAL_RCC_GetPCLK1Freq>
 8007bda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007bdc:	e033      	b.n	8007c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bde:	f7fc fbdf 	bl	80043a0 <HAL_RCC_GetPCLK2Freq>
 8007be2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007be4:	e02f      	b.n	8007c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fd fb4a 	bl	8005284 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bf4:	e027      	b.n	8007c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bf6:	f107 0318 	add.w	r3, r7, #24
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fd fc96 	bl	800552c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c04:	e01f      	b.n	8007c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c06:	4b2d      	ldr	r3, [pc, #180]	; (8007cbc <UART_SetConfig+0x934>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c12:	4b2a      	ldr	r3, [pc, #168]	; (8007cbc <UART_SetConfig+0x934>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	08db      	lsrs	r3, r3, #3
 8007c18:	f003 0303 	and.w	r3, r3, #3
 8007c1c:	4a24      	ldr	r2, [pc, #144]	; (8007cb0 <UART_SetConfig+0x928>)
 8007c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c24:	e00f      	b.n	8007c46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007c26:	4b22      	ldr	r3, [pc, #136]	; (8007cb0 <UART_SetConfig+0x928>)
 8007c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c2a:	e00c      	b.n	8007c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c2c:	4b21      	ldr	r3, [pc, #132]	; (8007cb4 <UART_SetConfig+0x92c>)
 8007c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c30:	e009      	b.n	8007c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c38:	e005      	b.n	8007c46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007c44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 80e7 	beq.w	8007e1c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	4a19      	ldr	r2, [pc, #100]	; (8007cb8 <UART_SetConfig+0x930>)
 8007c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c60:	005a      	lsls	r2, r3, #1
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	085b      	lsrs	r3, r3, #1
 8007c68:	441a      	add	r2, r3
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c76:	2b0f      	cmp	r3, #15
 8007c78:	d916      	bls.n	8007ca8 <UART_SetConfig+0x920>
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c80:	d212      	bcs.n	8007ca8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f023 030f 	bic.w	r3, r3, #15
 8007c8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	085b      	lsrs	r3, r3, #1
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007ca4:	60da      	str	r2, [r3, #12]
 8007ca6:	e0b9      	b.n	8007e1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007cae:	e0b5      	b.n	8007e1c <UART_SetConfig+0xa94>
 8007cb0:	03d09000 	.word	0x03d09000
 8007cb4:	003d0900 	.word	0x003d0900
 8007cb8:	0800b1d4 	.word	0x0800b1d4
 8007cbc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cc0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007cc4:	2b20      	cmp	r3, #32
 8007cc6:	dc49      	bgt.n	8007d5c <UART_SetConfig+0x9d4>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	db7c      	blt.n	8007dc6 <UART_SetConfig+0xa3e>
 8007ccc:	2b20      	cmp	r3, #32
 8007cce:	d87a      	bhi.n	8007dc6 <UART_SetConfig+0xa3e>
 8007cd0:	a201      	add	r2, pc, #4	; (adr r2, 8007cd8 <UART_SetConfig+0x950>)
 8007cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd6:	bf00      	nop
 8007cd8:	08007d63 	.word	0x08007d63
 8007cdc:	08007d6b 	.word	0x08007d6b
 8007ce0:	08007dc7 	.word	0x08007dc7
 8007ce4:	08007dc7 	.word	0x08007dc7
 8007ce8:	08007d73 	.word	0x08007d73
 8007cec:	08007dc7 	.word	0x08007dc7
 8007cf0:	08007dc7 	.word	0x08007dc7
 8007cf4:	08007dc7 	.word	0x08007dc7
 8007cf8:	08007d83 	.word	0x08007d83
 8007cfc:	08007dc7 	.word	0x08007dc7
 8007d00:	08007dc7 	.word	0x08007dc7
 8007d04:	08007dc7 	.word	0x08007dc7
 8007d08:	08007dc7 	.word	0x08007dc7
 8007d0c:	08007dc7 	.word	0x08007dc7
 8007d10:	08007dc7 	.word	0x08007dc7
 8007d14:	08007dc7 	.word	0x08007dc7
 8007d18:	08007d93 	.word	0x08007d93
 8007d1c:	08007dc7 	.word	0x08007dc7
 8007d20:	08007dc7 	.word	0x08007dc7
 8007d24:	08007dc7 	.word	0x08007dc7
 8007d28:	08007dc7 	.word	0x08007dc7
 8007d2c:	08007dc7 	.word	0x08007dc7
 8007d30:	08007dc7 	.word	0x08007dc7
 8007d34:	08007dc7 	.word	0x08007dc7
 8007d38:	08007dc7 	.word	0x08007dc7
 8007d3c:	08007dc7 	.word	0x08007dc7
 8007d40:	08007dc7 	.word	0x08007dc7
 8007d44:	08007dc7 	.word	0x08007dc7
 8007d48:	08007dc7 	.word	0x08007dc7
 8007d4c:	08007dc7 	.word	0x08007dc7
 8007d50:	08007dc7 	.word	0x08007dc7
 8007d54:	08007dc7 	.word	0x08007dc7
 8007d58:	08007db9 	.word	0x08007db9
 8007d5c:	2b40      	cmp	r3, #64	; 0x40
 8007d5e:	d02e      	beq.n	8007dbe <UART_SetConfig+0xa36>
 8007d60:	e031      	b.n	8007dc6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d62:	f7fc fb07 	bl	8004374 <HAL_RCC_GetPCLK1Freq>
 8007d66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d68:	e033      	b.n	8007dd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d6a:	f7fc fb19 	bl	80043a0 <HAL_RCC_GetPCLK2Freq>
 8007d6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d70:	e02f      	b.n	8007dd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fd fa84 	bl	8005284 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d80:	e027      	b.n	8007dd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d82:	f107 0318 	add.w	r3, r7, #24
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fd fbd0 	bl	800552c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d90:	e01f      	b.n	8007dd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d92:	4b2d      	ldr	r3, [pc, #180]	; (8007e48 <UART_SetConfig+0xac0>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d009      	beq.n	8007db2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d9e:	4b2a      	ldr	r3, [pc, #168]	; (8007e48 <UART_SetConfig+0xac0>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	08db      	lsrs	r3, r3, #3
 8007da4:	f003 0303 	and.w	r3, r3, #3
 8007da8:	4a28      	ldr	r2, [pc, #160]	; (8007e4c <UART_SetConfig+0xac4>)
 8007daa:	fa22 f303 	lsr.w	r3, r2, r3
 8007dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007db0:	e00f      	b.n	8007dd2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007db2:	4b26      	ldr	r3, [pc, #152]	; (8007e4c <UART_SetConfig+0xac4>)
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007db6:	e00c      	b.n	8007dd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007db8:	4b25      	ldr	r3, [pc, #148]	; (8007e50 <UART_SetConfig+0xac8>)
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dbc:	e009      	b.n	8007dd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dc4:	e005      	b.n	8007dd2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007dd0:	bf00      	nop
    }

    if (pclk != 0U)
 8007dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d021      	beq.n	8007e1c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	4a1d      	ldr	r2, [pc, #116]	; (8007e54 <UART_SetConfig+0xacc>)
 8007dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007de2:	461a      	mov	r2, r3
 8007de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	085b      	lsrs	r3, r3, #1
 8007df0:	441a      	add	r2, r3
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dfa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	2b0f      	cmp	r3, #15
 8007e00:	d909      	bls.n	8007e16 <UART_SetConfig+0xa8e>
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e08:	d205      	bcs.n	8007e16 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	60da      	str	r2, [r3, #12]
 8007e14:	e002      	b.n	8007e1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2200      	movs	r2, #0
 8007e36:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e38:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3748      	adds	r7, #72	; 0x48
 8007e40:	46bd      	mov	sp, r7
 8007e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e46:	bf00      	nop
 8007e48:	58024400 	.word	0x58024400
 8007e4c:	03d09000 	.word	0x03d09000
 8007e50:	003d0900 	.word	0x003d0900
 8007e54:	0800b1d4 	.word	0x0800b1d4

08007e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00a      	beq.n	8007e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00a      	beq.n	8007ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00a      	beq.n	8007ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eca:	f003 0308 	and.w	r3, r3, #8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00a      	beq.n	8007ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eec:	f003 0310 	and.w	r3, r3, #16
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0e:	f003 0320 	and.w	r3, r3, #32
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01a      	beq.n	8007f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f56:	d10a      	bne.n	8007f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	430a      	orrs	r2, r1
 8007f8e:	605a      	str	r2, [r3, #4]
  }
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af02      	add	r7, sp, #8
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fac:	f7f9 ff98 	bl	8001ee0 <HAL_GetTick>
 8007fb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0308 	and.w	r3, r3, #8
 8007fbc:	2b08      	cmp	r3, #8
 8007fbe:	d10e      	bne.n	8007fde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f82f 	bl	8008032 <UART_WaitOnFlagUntilTimeout>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e025      	b.n	800802a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d10e      	bne.n	800800a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f819 	bl	8008032 <UART_WaitOnFlagUntilTimeout>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e00f      	b.n	800802a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2220      	movs	r2, #32
 800800e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2220      	movs	r2, #32
 8008016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b09c      	sub	sp, #112	; 0x70
 8008036:	af00      	add	r7, sp, #0
 8008038:	60f8      	str	r0, [r7, #12]
 800803a:	60b9      	str	r1, [r7, #8]
 800803c:	603b      	str	r3, [r7, #0]
 800803e:	4613      	mov	r3, r2
 8008040:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008042:	e0a9      	b.n	8008198 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804a:	f000 80a5 	beq.w	8008198 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800804e:	f7f9 ff47 	bl	8001ee0 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800805a:	429a      	cmp	r2, r3
 800805c:	d302      	bcc.n	8008064 <UART_WaitOnFlagUntilTimeout+0x32>
 800805e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008060:	2b00      	cmp	r3, #0
 8008062:	d140      	bne.n	80080e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008074:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008078:	667b      	str	r3, [r7, #100]	; 0x64
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008082:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008084:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008088:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800808a:	e841 2300 	strex	r3, r2, [r1]
 800808e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1e6      	bne.n	8008064 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3308      	adds	r3, #8
 800809c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	f023 0301 	bic.w	r3, r3, #1
 80080ac:	663b      	str	r3, [r7, #96]	; 0x60
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3308      	adds	r3, #8
 80080b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80080b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080be:	e841 2300 	strex	r3, r2, [r1]
 80080c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e5      	bne.n	8008096 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e069      	b.n	80081ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0304 	and.w	r3, r3, #4
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d051      	beq.n	8008198 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008102:	d149      	bne.n	8008198 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800810c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	e853 3f00 	ldrex	r3, [r3]
 800811a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008122:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	461a      	mov	r2, r3
 800812a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800812c:	637b      	str	r3, [r7, #52]	; 0x34
 800812e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008130:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008134:	e841 2300 	strex	r3, r2, [r1]
 8008138:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e6      	bne.n	800810e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3308      	adds	r3, #8
 8008146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	e853 3f00 	ldrex	r3, [r3]
 800814e:	613b      	str	r3, [r7, #16]
   return(result);
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f023 0301 	bic.w	r3, r3, #1
 8008156:	66bb      	str	r3, [r7, #104]	; 0x68
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3308      	adds	r3, #8
 800815e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008160:	623a      	str	r2, [r7, #32]
 8008162:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	69f9      	ldr	r1, [r7, #28]
 8008166:	6a3a      	ldr	r2, [r7, #32]
 8008168:	e841 2300 	strex	r3, r2, [r1]
 800816c:	61bb      	str	r3, [r7, #24]
   return(result);
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e5      	bne.n	8008140 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2220      	movs	r2, #32
 8008178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2220      	movs	r2, #32
 8008180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2220      	movs	r2, #32
 8008188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e010      	b.n	80081ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	69da      	ldr	r2, [r3, #28]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	4013      	ands	r3, r2
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	bf0c      	ite	eq
 80081a8:	2301      	moveq	r3, #1
 80081aa:	2300      	movne	r3, #0
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	461a      	mov	r2, r3
 80081b0:	79fb      	ldrb	r3, [r7, #7]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	f43f af46 	beq.w	8008044 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3770      	adds	r7, #112	; 0x70
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b085      	sub	sp, #20
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d101      	bne.n	80081d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80081d4:	2302      	movs	r3, #2
 80081d6:	e027      	b.n	8008228 <HAL_UARTEx_DisableFifoMode+0x66>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2224      	movs	r2, #36	; 0x24
 80081e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0201 	bic.w	r2, r2, #1
 80081fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008206:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2220      	movs	r2, #32
 800821a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008244:	2b01      	cmp	r3, #1
 8008246:	d101      	bne.n	800824c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008248:	2302      	movs	r3, #2
 800824a:	e02d      	b.n	80082a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2224      	movs	r2, #36	; 0x24
 8008258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f022 0201 	bic.w	r2, r2, #1
 8008272:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	430a      	orrs	r2, r1
 8008286:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f84f 	bl	800832c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2220      	movs	r2, #32
 800829a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e02d      	b.n	8008324 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2224      	movs	r2, #36	; 0x24
 80082d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 0201 	bic.w	r2, r2, #1
 80082ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f811 	bl	800832c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2220      	movs	r2, #32
 8008316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008338:	2b00      	cmp	r3, #0
 800833a:	d108      	bne.n	800834e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800834c:	e031      	b.n	80083b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800834e:	2310      	movs	r3, #16
 8008350:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008352:	2310      	movs	r3, #16
 8008354:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	0e5b      	lsrs	r3, r3, #25
 800835e:	b2db      	uxtb	r3, r3
 8008360:	f003 0307 	and.w	r3, r3, #7
 8008364:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	0f5b      	lsrs	r3, r3, #29
 800836e:	b2db      	uxtb	r3, r3
 8008370:	f003 0307 	and.w	r3, r3, #7
 8008374:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	7b3a      	ldrb	r2, [r7, #12]
 800837a:	4911      	ldr	r1, [pc, #68]	; (80083c0 <UARTEx_SetNbDataToProcess+0x94>)
 800837c:	5c8a      	ldrb	r2, [r1, r2]
 800837e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008382:	7b3a      	ldrb	r2, [r7, #12]
 8008384:	490f      	ldr	r1, [pc, #60]	; (80083c4 <UARTEx_SetNbDataToProcess+0x98>)
 8008386:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008388:	fb93 f3f2 	sdiv	r3, r3, r2
 800838c:	b29a      	uxth	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	7b7a      	ldrb	r2, [r7, #13]
 8008398:	4909      	ldr	r1, [pc, #36]	; (80083c0 <UARTEx_SetNbDataToProcess+0x94>)
 800839a:	5c8a      	ldrb	r2, [r1, r2]
 800839c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083a0:	7b7a      	ldrb	r2, [r7, #13]
 80083a2:	4908      	ldr	r1, [pc, #32]	; (80083c4 <UARTEx_SetNbDataToProcess+0x98>)
 80083a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083b2:	bf00      	nop
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	0800b1ec 	.word	0x0800b1ec
 80083c4:	0800b1f4 	.word	0x0800b1f4

080083c8 <__errno>:
 80083c8:	4b01      	ldr	r3, [pc, #4]	; (80083d0 <__errno+0x8>)
 80083ca:	6818      	ldr	r0, [r3, #0]
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	24000014 	.word	0x24000014

080083d4 <__libc_init_array>:
 80083d4:	b570      	push	{r4, r5, r6, lr}
 80083d6:	4d0d      	ldr	r5, [pc, #52]	; (800840c <__libc_init_array+0x38>)
 80083d8:	4c0d      	ldr	r4, [pc, #52]	; (8008410 <__libc_init_array+0x3c>)
 80083da:	1b64      	subs	r4, r4, r5
 80083dc:	10a4      	asrs	r4, r4, #2
 80083de:	2600      	movs	r6, #0
 80083e0:	42a6      	cmp	r6, r4
 80083e2:	d109      	bne.n	80083f8 <__libc_init_array+0x24>
 80083e4:	4d0b      	ldr	r5, [pc, #44]	; (8008414 <__libc_init_array+0x40>)
 80083e6:	4c0c      	ldr	r4, [pc, #48]	; (8008418 <__libc_init_array+0x44>)
 80083e8:	f002 fe5e 	bl	800b0a8 <_init>
 80083ec:	1b64      	subs	r4, r4, r5
 80083ee:	10a4      	asrs	r4, r4, #2
 80083f0:	2600      	movs	r6, #0
 80083f2:	42a6      	cmp	r6, r4
 80083f4:	d105      	bne.n	8008402 <__libc_init_array+0x2e>
 80083f6:	bd70      	pop	{r4, r5, r6, pc}
 80083f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083fc:	4798      	blx	r3
 80083fe:	3601      	adds	r6, #1
 8008400:	e7ee      	b.n	80083e0 <__libc_init_array+0xc>
 8008402:	f855 3b04 	ldr.w	r3, [r5], #4
 8008406:	4798      	blx	r3
 8008408:	3601      	adds	r6, #1
 800840a:	e7f2      	b.n	80083f2 <__libc_init_array+0x1e>
 800840c:	0800b5dc 	.word	0x0800b5dc
 8008410:	0800b5dc 	.word	0x0800b5dc
 8008414:	0800b5dc 	.word	0x0800b5dc
 8008418:	0800b5e0 	.word	0x0800b5e0

0800841c <memset>:
 800841c:	4402      	add	r2, r0
 800841e:	4603      	mov	r3, r0
 8008420:	4293      	cmp	r3, r2
 8008422:	d100      	bne.n	8008426 <memset+0xa>
 8008424:	4770      	bx	lr
 8008426:	f803 1b01 	strb.w	r1, [r3], #1
 800842a:	e7f9      	b.n	8008420 <memset+0x4>

0800842c <__cvt>:
 800842c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800842e:	ed2d 8b02 	vpush	{d8}
 8008432:	eeb0 8b40 	vmov.f64	d8, d0
 8008436:	b085      	sub	sp, #20
 8008438:	4617      	mov	r7, r2
 800843a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800843c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800843e:	ee18 2a90 	vmov	r2, s17
 8008442:	f025 0520 	bic.w	r5, r5, #32
 8008446:	2a00      	cmp	r2, #0
 8008448:	bfb6      	itet	lt
 800844a:	222d      	movlt	r2, #45	; 0x2d
 800844c:	2200      	movge	r2, #0
 800844e:	eeb1 8b40 	vneglt.f64	d8, d0
 8008452:	2d46      	cmp	r5, #70	; 0x46
 8008454:	460c      	mov	r4, r1
 8008456:	701a      	strb	r2, [r3, #0]
 8008458:	d004      	beq.n	8008464 <__cvt+0x38>
 800845a:	2d45      	cmp	r5, #69	; 0x45
 800845c:	d100      	bne.n	8008460 <__cvt+0x34>
 800845e:	3401      	adds	r4, #1
 8008460:	2102      	movs	r1, #2
 8008462:	e000      	b.n	8008466 <__cvt+0x3a>
 8008464:	2103      	movs	r1, #3
 8008466:	ab03      	add	r3, sp, #12
 8008468:	9301      	str	r3, [sp, #4]
 800846a:	ab02      	add	r3, sp, #8
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	4622      	mov	r2, r4
 8008470:	4633      	mov	r3, r6
 8008472:	eeb0 0b48 	vmov.f64	d0, d8
 8008476:	f000 fccb 	bl	8008e10 <_dtoa_r>
 800847a:	2d47      	cmp	r5, #71	; 0x47
 800847c:	d101      	bne.n	8008482 <__cvt+0x56>
 800847e:	07fb      	lsls	r3, r7, #31
 8008480:	d51a      	bpl.n	80084b8 <__cvt+0x8c>
 8008482:	2d46      	cmp	r5, #70	; 0x46
 8008484:	eb00 0204 	add.w	r2, r0, r4
 8008488:	d10c      	bne.n	80084a4 <__cvt+0x78>
 800848a:	7803      	ldrb	r3, [r0, #0]
 800848c:	2b30      	cmp	r3, #48	; 0x30
 800848e:	d107      	bne.n	80084a0 <__cvt+0x74>
 8008490:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008498:	bf1c      	itt	ne
 800849a:	f1c4 0401 	rsbne	r4, r4, #1
 800849e:	6034      	strne	r4, [r6, #0]
 80084a0:	6833      	ldr	r3, [r6, #0]
 80084a2:	441a      	add	r2, r3
 80084a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80084a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ac:	bf08      	it	eq
 80084ae:	9203      	streq	r2, [sp, #12]
 80084b0:	2130      	movs	r1, #48	; 0x30
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d307      	bcc.n	80084c8 <__cvt+0x9c>
 80084b8:	9b03      	ldr	r3, [sp, #12]
 80084ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084bc:	1a1b      	subs	r3, r3, r0
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	b005      	add	sp, #20
 80084c2:	ecbd 8b02 	vpop	{d8}
 80084c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084c8:	1c5c      	adds	r4, r3, #1
 80084ca:	9403      	str	r4, [sp, #12]
 80084cc:	7019      	strb	r1, [r3, #0]
 80084ce:	e7f0      	b.n	80084b2 <__cvt+0x86>

080084d0 <__exponent>:
 80084d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084d2:	4603      	mov	r3, r0
 80084d4:	2900      	cmp	r1, #0
 80084d6:	bfb8      	it	lt
 80084d8:	4249      	neglt	r1, r1
 80084da:	f803 2b02 	strb.w	r2, [r3], #2
 80084de:	bfb4      	ite	lt
 80084e0:	222d      	movlt	r2, #45	; 0x2d
 80084e2:	222b      	movge	r2, #43	; 0x2b
 80084e4:	2909      	cmp	r1, #9
 80084e6:	7042      	strb	r2, [r0, #1]
 80084e8:	dd2a      	ble.n	8008540 <__exponent+0x70>
 80084ea:	f10d 0407 	add.w	r4, sp, #7
 80084ee:	46a4      	mov	ip, r4
 80084f0:	270a      	movs	r7, #10
 80084f2:	46a6      	mov	lr, r4
 80084f4:	460a      	mov	r2, r1
 80084f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80084fa:	fb07 1516 	mls	r5, r7, r6, r1
 80084fe:	3530      	adds	r5, #48	; 0x30
 8008500:	2a63      	cmp	r2, #99	; 0x63
 8008502:	f104 34ff 	add.w	r4, r4, #4294967295
 8008506:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800850a:	4631      	mov	r1, r6
 800850c:	dcf1      	bgt.n	80084f2 <__exponent+0x22>
 800850e:	3130      	adds	r1, #48	; 0x30
 8008510:	f1ae 0502 	sub.w	r5, lr, #2
 8008514:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008518:	1c44      	adds	r4, r0, #1
 800851a:	4629      	mov	r1, r5
 800851c:	4561      	cmp	r1, ip
 800851e:	d30a      	bcc.n	8008536 <__exponent+0x66>
 8008520:	f10d 0209 	add.w	r2, sp, #9
 8008524:	eba2 020e 	sub.w	r2, r2, lr
 8008528:	4565      	cmp	r5, ip
 800852a:	bf88      	it	hi
 800852c:	2200      	movhi	r2, #0
 800852e:	4413      	add	r3, r2
 8008530:	1a18      	subs	r0, r3, r0
 8008532:	b003      	add	sp, #12
 8008534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800853a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800853e:	e7ed      	b.n	800851c <__exponent+0x4c>
 8008540:	2330      	movs	r3, #48	; 0x30
 8008542:	3130      	adds	r1, #48	; 0x30
 8008544:	7083      	strb	r3, [r0, #2]
 8008546:	70c1      	strb	r1, [r0, #3]
 8008548:	1d03      	adds	r3, r0, #4
 800854a:	e7f1      	b.n	8008530 <__exponent+0x60>
 800854c:	0000      	movs	r0, r0
	...

08008550 <_printf_float>:
 8008550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	b08b      	sub	sp, #44	; 0x2c
 8008556:	460c      	mov	r4, r1
 8008558:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800855c:	4616      	mov	r6, r2
 800855e:	461f      	mov	r7, r3
 8008560:	4605      	mov	r5, r0
 8008562:	f001 f9c3 	bl	80098ec <_localeconv_r>
 8008566:	f8d0 b000 	ldr.w	fp, [r0]
 800856a:	4658      	mov	r0, fp
 800856c:	f7f7 feb8 	bl	80002e0 <strlen>
 8008570:	2300      	movs	r3, #0
 8008572:	9308      	str	r3, [sp, #32]
 8008574:	f8d8 3000 	ldr.w	r3, [r8]
 8008578:	f894 9018 	ldrb.w	r9, [r4, #24]
 800857c:	6822      	ldr	r2, [r4, #0]
 800857e:	3307      	adds	r3, #7
 8008580:	f023 0307 	bic.w	r3, r3, #7
 8008584:	f103 0108 	add.w	r1, r3, #8
 8008588:	f8c8 1000 	str.w	r1, [r8]
 800858c:	4682      	mov	sl, r0
 800858e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008592:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008596:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80087f8 <_printf_float+0x2a8>
 800859a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800859e:	eeb0 6bc0 	vabs.f64	d6, d0
 80085a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80085a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085aa:	dd24      	ble.n	80085f6 <_printf_float+0xa6>
 80085ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80085b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b4:	d502      	bpl.n	80085bc <_printf_float+0x6c>
 80085b6:	232d      	movs	r3, #45	; 0x2d
 80085b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085bc:	4b90      	ldr	r3, [pc, #576]	; (8008800 <_printf_float+0x2b0>)
 80085be:	4891      	ldr	r0, [pc, #580]	; (8008804 <_printf_float+0x2b4>)
 80085c0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80085c4:	bf94      	ite	ls
 80085c6:	4698      	movls	r8, r3
 80085c8:	4680      	movhi	r8, r0
 80085ca:	2303      	movs	r3, #3
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	f022 0204 	bic.w	r2, r2, #4
 80085d2:	2300      	movs	r3, #0
 80085d4:	6022      	str	r2, [r4, #0]
 80085d6:	9304      	str	r3, [sp, #16]
 80085d8:	9700      	str	r7, [sp, #0]
 80085da:	4633      	mov	r3, r6
 80085dc:	aa09      	add	r2, sp, #36	; 0x24
 80085de:	4621      	mov	r1, r4
 80085e0:	4628      	mov	r0, r5
 80085e2:	f000 f9d3 	bl	800898c <_printf_common>
 80085e6:	3001      	adds	r0, #1
 80085e8:	f040 808a 	bne.w	8008700 <_printf_float+0x1b0>
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295
 80085f0:	b00b      	add	sp, #44	; 0x2c
 80085f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f6:	eeb4 0b40 	vcmp.f64	d0, d0
 80085fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085fe:	d709      	bvc.n	8008614 <_printf_float+0xc4>
 8008600:	ee10 3a90 	vmov	r3, s1
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfbc      	itt	lt
 8008608:	232d      	movlt	r3, #45	; 0x2d
 800860a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800860e:	487e      	ldr	r0, [pc, #504]	; (8008808 <_printf_float+0x2b8>)
 8008610:	4b7e      	ldr	r3, [pc, #504]	; (800880c <_printf_float+0x2bc>)
 8008612:	e7d5      	b.n	80085c0 <_printf_float+0x70>
 8008614:	6863      	ldr	r3, [r4, #4]
 8008616:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800861a:	9104      	str	r1, [sp, #16]
 800861c:	1c59      	adds	r1, r3, #1
 800861e:	d13c      	bne.n	800869a <_printf_float+0x14a>
 8008620:	2306      	movs	r3, #6
 8008622:	6063      	str	r3, [r4, #4]
 8008624:	2300      	movs	r3, #0
 8008626:	9303      	str	r3, [sp, #12]
 8008628:	ab08      	add	r3, sp, #32
 800862a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800862e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008632:	ab07      	add	r3, sp, #28
 8008634:	6861      	ldr	r1, [r4, #4]
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	6022      	str	r2, [r4, #0]
 800863a:	f10d 031b 	add.w	r3, sp, #27
 800863e:	4628      	mov	r0, r5
 8008640:	f7ff fef4 	bl	800842c <__cvt>
 8008644:	9b04      	ldr	r3, [sp, #16]
 8008646:	9907      	ldr	r1, [sp, #28]
 8008648:	2b47      	cmp	r3, #71	; 0x47
 800864a:	4680      	mov	r8, r0
 800864c:	d108      	bne.n	8008660 <_printf_float+0x110>
 800864e:	1cc8      	adds	r0, r1, #3
 8008650:	db02      	blt.n	8008658 <_printf_float+0x108>
 8008652:	6863      	ldr	r3, [r4, #4]
 8008654:	4299      	cmp	r1, r3
 8008656:	dd41      	ble.n	80086dc <_printf_float+0x18c>
 8008658:	f1a9 0902 	sub.w	r9, r9, #2
 800865c:	fa5f f989 	uxtb.w	r9, r9
 8008660:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008664:	d820      	bhi.n	80086a8 <_printf_float+0x158>
 8008666:	3901      	subs	r1, #1
 8008668:	464a      	mov	r2, r9
 800866a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800866e:	9107      	str	r1, [sp, #28]
 8008670:	f7ff ff2e 	bl	80084d0 <__exponent>
 8008674:	9a08      	ldr	r2, [sp, #32]
 8008676:	9004      	str	r0, [sp, #16]
 8008678:	1813      	adds	r3, r2, r0
 800867a:	2a01      	cmp	r2, #1
 800867c:	6123      	str	r3, [r4, #16]
 800867e:	dc02      	bgt.n	8008686 <_printf_float+0x136>
 8008680:	6822      	ldr	r2, [r4, #0]
 8008682:	07d2      	lsls	r2, r2, #31
 8008684:	d501      	bpl.n	800868a <_printf_float+0x13a>
 8008686:	3301      	adds	r3, #1
 8008688:	6123      	str	r3, [r4, #16]
 800868a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d0a2      	beq.n	80085d8 <_printf_float+0x88>
 8008692:	232d      	movs	r3, #45	; 0x2d
 8008694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008698:	e79e      	b.n	80085d8 <_printf_float+0x88>
 800869a:	9904      	ldr	r1, [sp, #16]
 800869c:	2947      	cmp	r1, #71	; 0x47
 800869e:	d1c1      	bne.n	8008624 <_printf_float+0xd4>
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1bf      	bne.n	8008624 <_printf_float+0xd4>
 80086a4:	2301      	movs	r3, #1
 80086a6:	e7bc      	b.n	8008622 <_printf_float+0xd2>
 80086a8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80086ac:	d118      	bne.n	80086e0 <_printf_float+0x190>
 80086ae:	2900      	cmp	r1, #0
 80086b0:	6863      	ldr	r3, [r4, #4]
 80086b2:	dd0b      	ble.n	80086cc <_printf_float+0x17c>
 80086b4:	6121      	str	r1, [r4, #16]
 80086b6:	b913      	cbnz	r3, 80086be <_printf_float+0x16e>
 80086b8:	6822      	ldr	r2, [r4, #0]
 80086ba:	07d0      	lsls	r0, r2, #31
 80086bc:	d502      	bpl.n	80086c4 <_printf_float+0x174>
 80086be:	3301      	adds	r3, #1
 80086c0:	440b      	add	r3, r1
 80086c2:	6123      	str	r3, [r4, #16]
 80086c4:	2300      	movs	r3, #0
 80086c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80086c8:	9304      	str	r3, [sp, #16]
 80086ca:	e7de      	b.n	800868a <_printf_float+0x13a>
 80086cc:	b913      	cbnz	r3, 80086d4 <_printf_float+0x184>
 80086ce:	6822      	ldr	r2, [r4, #0]
 80086d0:	07d2      	lsls	r2, r2, #31
 80086d2:	d501      	bpl.n	80086d8 <_printf_float+0x188>
 80086d4:	3302      	adds	r3, #2
 80086d6:	e7f4      	b.n	80086c2 <_printf_float+0x172>
 80086d8:	2301      	movs	r3, #1
 80086da:	e7f2      	b.n	80086c2 <_printf_float+0x172>
 80086dc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80086e0:	9b08      	ldr	r3, [sp, #32]
 80086e2:	4299      	cmp	r1, r3
 80086e4:	db05      	blt.n	80086f2 <_printf_float+0x1a2>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	6121      	str	r1, [r4, #16]
 80086ea:	07d8      	lsls	r0, r3, #31
 80086ec:	d5ea      	bpl.n	80086c4 <_printf_float+0x174>
 80086ee:	1c4b      	adds	r3, r1, #1
 80086f0:	e7e7      	b.n	80086c2 <_printf_float+0x172>
 80086f2:	2900      	cmp	r1, #0
 80086f4:	bfd4      	ite	le
 80086f6:	f1c1 0202 	rsble	r2, r1, #2
 80086fa:	2201      	movgt	r2, #1
 80086fc:	4413      	add	r3, r2
 80086fe:	e7e0      	b.n	80086c2 <_printf_float+0x172>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	055a      	lsls	r2, r3, #21
 8008704:	d407      	bmi.n	8008716 <_printf_float+0x1c6>
 8008706:	6923      	ldr	r3, [r4, #16]
 8008708:	4642      	mov	r2, r8
 800870a:	4631      	mov	r1, r6
 800870c:	4628      	mov	r0, r5
 800870e:	47b8      	blx	r7
 8008710:	3001      	adds	r0, #1
 8008712:	d12a      	bne.n	800876a <_printf_float+0x21a>
 8008714:	e76a      	b.n	80085ec <_printf_float+0x9c>
 8008716:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800871a:	f240 80e2 	bls.w	80088e2 <_printf_float+0x392>
 800871e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008722:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800872a:	d133      	bne.n	8008794 <_printf_float+0x244>
 800872c:	4a38      	ldr	r2, [pc, #224]	; (8008810 <_printf_float+0x2c0>)
 800872e:	2301      	movs	r3, #1
 8008730:	4631      	mov	r1, r6
 8008732:	4628      	mov	r0, r5
 8008734:	47b8      	blx	r7
 8008736:	3001      	adds	r0, #1
 8008738:	f43f af58 	beq.w	80085ec <_printf_float+0x9c>
 800873c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008740:	429a      	cmp	r2, r3
 8008742:	db02      	blt.n	800874a <_printf_float+0x1fa>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	07d8      	lsls	r0, r3, #31
 8008748:	d50f      	bpl.n	800876a <_printf_float+0x21a>
 800874a:	4653      	mov	r3, sl
 800874c:	465a      	mov	r2, fp
 800874e:	4631      	mov	r1, r6
 8008750:	4628      	mov	r0, r5
 8008752:	47b8      	blx	r7
 8008754:	3001      	adds	r0, #1
 8008756:	f43f af49 	beq.w	80085ec <_printf_float+0x9c>
 800875a:	f04f 0800 	mov.w	r8, #0
 800875e:	f104 091a 	add.w	r9, r4, #26
 8008762:	9b08      	ldr	r3, [sp, #32]
 8008764:	3b01      	subs	r3, #1
 8008766:	4543      	cmp	r3, r8
 8008768:	dc09      	bgt.n	800877e <_printf_float+0x22e>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	079b      	lsls	r3, r3, #30
 800876e:	f100 8108 	bmi.w	8008982 <_printf_float+0x432>
 8008772:	68e0      	ldr	r0, [r4, #12]
 8008774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008776:	4298      	cmp	r0, r3
 8008778:	bfb8      	it	lt
 800877a:	4618      	movlt	r0, r3
 800877c:	e738      	b.n	80085f0 <_printf_float+0xa0>
 800877e:	2301      	movs	r3, #1
 8008780:	464a      	mov	r2, r9
 8008782:	4631      	mov	r1, r6
 8008784:	4628      	mov	r0, r5
 8008786:	47b8      	blx	r7
 8008788:	3001      	adds	r0, #1
 800878a:	f43f af2f 	beq.w	80085ec <_printf_float+0x9c>
 800878e:	f108 0801 	add.w	r8, r8, #1
 8008792:	e7e6      	b.n	8008762 <_printf_float+0x212>
 8008794:	9b07      	ldr	r3, [sp, #28]
 8008796:	2b00      	cmp	r3, #0
 8008798:	dc3c      	bgt.n	8008814 <_printf_float+0x2c4>
 800879a:	4a1d      	ldr	r2, [pc, #116]	; (8008810 <_printf_float+0x2c0>)
 800879c:	2301      	movs	r3, #1
 800879e:	4631      	mov	r1, r6
 80087a0:	4628      	mov	r0, r5
 80087a2:	47b8      	blx	r7
 80087a4:	3001      	adds	r0, #1
 80087a6:	f43f af21 	beq.w	80085ec <_printf_float+0x9c>
 80087aa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	d102      	bne.n	80087b8 <_printf_float+0x268>
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	07d9      	lsls	r1, r3, #31
 80087b6:	d5d8      	bpl.n	800876a <_printf_float+0x21a>
 80087b8:	4653      	mov	r3, sl
 80087ba:	465a      	mov	r2, fp
 80087bc:	4631      	mov	r1, r6
 80087be:	4628      	mov	r0, r5
 80087c0:	47b8      	blx	r7
 80087c2:	3001      	adds	r0, #1
 80087c4:	f43f af12 	beq.w	80085ec <_printf_float+0x9c>
 80087c8:	f04f 0900 	mov.w	r9, #0
 80087cc:	f104 0a1a 	add.w	sl, r4, #26
 80087d0:	9b07      	ldr	r3, [sp, #28]
 80087d2:	425b      	negs	r3, r3
 80087d4:	454b      	cmp	r3, r9
 80087d6:	dc01      	bgt.n	80087dc <_printf_float+0x28c>
 80087d8:	9b08      	ldr	r3, [sp, #32]
 80087da:	e795      	b.n	8008708 <_printf_float+0x1b8>
 80087dc:	2301      	movs	r3, #1
 80087de:	4652      	mov	r2, sl
 80087e0:	4631      	mov	r1, r6
 80087e2:	4628      	mov	r0, r5
 80087e4:	47b8      	blx	r7
 80087e6:	3001      	adds	r0, #1
 80087e8:	f43f af00 	beq.w	80085ec <_printf_float+0x9c>
 80087ec:	f109 0901 	add.w	r9, r9, #1
 80087f0:	e7ee      	b.n	80087d0 <_printf_float+0x280>
 80087f2:	bf00      	nop
 80087f4:	f3af 8000 	nop.w
 80087f8:	ffffffff 	.word	0xffffffff
 80087fc:	7fefffff 	.word	0x7fefffff
 8008800:	0800b200 	.word	0x0800b200
 8008804:	0800b204 	.word	0x0800b204
 8008808:	0800b20c 	.word	0x0800b20c
 800880c:	0800b208 	.word	0x0800b208
 8008810:	0800b210 	.word	0x0800b210
 8008814:	9a08      	ldr	r2, [sp, #32]
 8008816:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008818:	429a      	cmp	r2, r3
 800881a:	bfa8      	it	ge
 800881c:	461a      	movge	r2, r3
 800881e:	2a00      	cmp	r2, #0
 8008820:	4691      	mov	r9, r2
 8008822:	dc38      	bgt.n	8008896 <_printf_float+0x346>
 8008824:	2300      	movs	r3, #0
 8008826:	9305      	str	r3, [sp, #20]
 8008828:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800882c:	f104 021a 	add.w	r2, r4, #26
 8008830:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008832:	9905      	ldr	r1, [sp, #20]
 8008834:	9304      	str	r3, [sp, #16]
 8008836:	eba3 0309 	sub.w	r3, r3, r9
 800883a:	428b      	cmp	r3, r1
 800883c:	dc33      	bgt.n	80088a6 <_printf_float+0x356>
 800883e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008842:	429a      	cmp	r2, r3
 8008844:	db3c      	blt.n	80088c0 <_printf_float+0x370>
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	07da      	lsls	r2, r3, #31
 800884a:	d439      	bmi.n	80088c0 <_printf_float+0x370>
 800884c:	9b08      	ldr	r3, [sp, #32]
 800884e:	9a04      	ldr	r2, [sp, #16]
 8008850:	9907      	ldr	r1, [sp, #28]
 8008852:	1a9a      	subs	r2, r3, r2
 8008854:	eba3 0901 	sub.w	r9, r3, r1
 8008858:	4591      	cmp	r9, r2
 800885a:	bfa8      	it	ge
 800885c:	4691      	movge	r9, r2
 800885e:	f1b9 0f00 	cmp.w	r9, #0
 8008862:	dc35      	bgt.n	80088d0 <_printf_float+0x380>
 8008864:	f04f 0800 	mov.w	r8, #0
 8008868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800886c:	f104 0a1a 	add.w	sl, r4, #26
 8008870:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008874:	1a9b      	subs	r3, r3, r2
 8008876:	eba3 0309 	sub.w	r3, r3, r9
 800887a:	4543      	cmp	r3, r8
 800887c:	f77f af75 	ble.w	800876a <_printf_float+0x21a>
 8008880:	2301      	movs	r3, #1
 8008882:	4652      	mov	r2, sl
 8008884:	4631      	mov	r1, r6
 8008886:	4628      	mov	r0, r5
 8008888:	47b8      	blx	r7
 800888a:	3001      	adds	r0, #1
 800888c:	f43f aeae 	beq.w	80085ec <_printf_float+0x9c>
 8008890:	f108 0801 	add.w	r8, r8, #1
 8008894:	e7ec      	b.n	8008870 <_printf_float+0x320>
 8008896:	4613      	mov	r3, r2
 8008898:	4631      	mov	r1, r6
 800889a:	4642      	mov	r2, r8
 800889c:	4628      	mov	r0, r5
 800889e:	47b8      	blx	r7
 80088a0:	3001      	adds	r0, #1
 80088a2:	d1bf      	bne.n	8008824 <_printf_float+0x2d4>
 80088a4:	e6a2      	b.n	80085ec <_printf_float+0x9c>
 80088a6:	2301      	movs	r3, #1
 80088a8:	4631      	mov	r1, r6
 80088aa:	4628      	mov	r0, r5
 80088ac:	9204      	str	r2, [sp, #16]
 80088ae:	47b8      	blx	r7
 80088b0:	3001      	adds	r0, #1
 80088b2:	f43f ae9b 	beq.w	80085ec <_printf_float+0x9c>
 80088b6:	9b05      	ldr	r3, [sp, #20]
 80088b8:	9a04      	ldr	r2, [sp, #16]
 80088ba:	3301      	adds	r3, #1
 80088bc:	9305      	str	r3, [sp, #20]
 80088be:	e7b7      	b.n	8008830 <_printf_float+0x2e0>
 80088c0:	4653      	mov	r3, sl
 80088c2:	465a      	mov	r2, fp
 80088c4:	4631      	mov	r1, r6
 80088c6:	4628      	mov	r0, r5
 80088c8:	47b8      	blx	r7
 80088ca:	3001      	adds	r0, #1
 80088cc:	d1be      	bne.n	800884c <_printf_float+0x2fc>
 80088ce:	e68d      	b.n	80085ec <_printf_float+0x9c>
 80088d0:	9a04      	ldr	r2, [sp, #16]
 80088d2:	464b      	mov	r3, r9
 80088d4:	4442      	add	r2, r8
 80088d6:	4631      	mov	r1, r6
 80088d8:	4628      	mov	r0, r5
 80088da:	47b8      	blx	r7
 80088dc:	3001      	adds	r0, #1
 80088de:	d1c1      	bne.n	8008864 <_printf_float+0x314>
 80088e0:	e684      	b.n	80085ec <_printf_float+0x9c>
 80088e2:	9a08      	ldr	r2, [sp, #32]
 80088e4:	2a01      	cmp	r2, #1
 80088e6:	dc01      	bgt.n	80088ec <_printf_float+0x39c>
 80088e8:	07db      	lsls	r3, r3, #31
 80088ea:	d537      	bpl.n	800895c <_printf_float+0x40c>
 80088ec:	2301      	movs	r3, #1
 80088ee:	4642      	mov	r2, r8
 80088f0:	4631      	mov	r1, r6
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b8      	blx	r7
 80088f6:	3001      	adds	r0, #1
 80088f8:	f43f ae78 	beq.w	80085ec <_printf_float+0x9c>
 80088fc:	4653      	mov	r3, sl
 80088fe:	465a      	mov	r2, fp
 8008900:	4631      	mov	r1, r6
 8008902:	4628      	mov	r0, r5
 8008904:	47b8      	blx	r7
 8008906:	3001      	adds	r0, #1
 8008908:	f43f ae70 	beq.w	80085ec <_printf_float+0x9c>
 800890c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008910:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008918:	d01b      	beq.n	8008952 <_printf_float+0x402>
 800891a:	9b08      	ldr	r3, [sp, #32]
 800891c:	f108 0201 	add.w	r2, r8, #1
 8008920:	3b01      	subs	r3, #1
 8008922:	4631      	mov	r1, r6
 8008924:	4628      	mov	r0, r5
 8008926:	47b8      	blx	r7
 8008928:	3001      	adds	r0, #1
 800892a:	d10e      	bne.n	800894a <_printf_float+0x3fa>
 800892c:	e65e      	b.n	80085ec <_printf_float+0x9c>
 800892e:	2301      	movs	r3, #1
 8008930:	464a      	mov	r2, r9
 8008932:	4631      	mov	r1, r6
 8008934:	4628      	mov	r0, r5
 8008936:	47b8      	blx	r7
 8008938:	3001      	adds	r0, #1
 800893a:	f43f ae57 	beq.w	80085ec <_printf_float+0x9c>
 800893e:	f108 0801 	add.w	r8, r8, #1
 8008942:	9b08      	ldr	r3, [sp, #32]
 8008944:	3b01      	subs	r3, #1
 8008946:	4543      	cmp	r3, r8
 8008948:	dcf1      	bgt.n	800892e <_printf_float+0x3de>
 800894a:	9b04      	ldr	r3, [sp, #16]
 800894c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008950:	e6db      	b.n	800870a <_printf_float+0x1ba>
 8008952:	f04f 0800 	mov.w	r8, #0
 8008956:	f104 091a 	add.w	r9, r4, #26
 800895a:	e7f2      	b.n	8008942 <_printf_float+0x3f2>
 800895c:	2301      	movs	r3, #1
 800895e:	4642      	mov	r2, r8
 8008960:	e7df      	b.n	8008922 <_printf_float+0x3d2>
 8008962:	2301      	movs	r3, #1
 8008964:	464a      	mov	r2, r9
 8008966:	4631      	mov	r1, r6
 8008968:	4628      	mov	r0, r5
 800896a:	47b8      	blx	r7
 800896c:	3001      	adds	r0, #1
 800896e:	f43f ae3d 	beq.w	80085ec <_printf_float+0x9c>
 8008972:	f108 0801 	add.w	r8, r8, #1
 8008976:	68e3      	ldr	r3, [r4, #12]
 8008978:	9909      	ldr	r1, [sp, #36]	; 0x24
 800897a:	1a5b      	subs	r3, r3, r1
 800897c:	4543      	cmp	r3, r8
 800897e:	dcf0      	bgt.n	8008962 <_printf_float+0x412>
 8008980:	e6f7      	b.n	8008772 <_printf_float+0x222>
 8008982:	f04f 0800 	mov.w	r8, #0
 8008986:	f104 0919 	add.w	r9, r4, #25
 800898a:	e7f4      	b.n	8008976 <_printf_float+0x426>

0800898c <_printf_common>:
 800898c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008990:	4616      	mov	r6, r2
 8008992:	4699      	mov	r9, r3
 8008994:	688a      	ldr	r2, [r1, #8]
 8008996:	690b      	ldr	r3, [r1, #16]
 8008998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800899c:	4293      	cmp	r3, r2
 800899e:	bfb8      	it	lt
 80089a0:	4613      	movlt	r3, r2
 80089a2:	6033      	str	r3, [r6, #0]
 80089a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089a8:	4607      	mov	r7, r0
 80089aa:	460c      	mov	r4, r1
 80089ac:	b10a      	cbz	r2, 80089b2 <_printf_common+0x26>
 80089ae:	3301      	adds	r3, #1
 80089b0:	6033      	str	r3, [r6, #0]
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	0699      	lsls	r1, r3, #26
 80089b6:	bf42      	ittt	mi
 80089b8:	6833      	ldrmi	r3, [r6, #0]
 80089ba:	3302      	addmi	r3, #2
 80089bc:	6033      	strmi	r3, [r6, #0]
 80089be:	6825      	ldr	r5, [r4, #0]
 80089c0:	f015 0506 	ands.w	r5, r5, #6
 80089c4:	d106      	bne.n	80089d4 <_printf_common+0x48>
 80089c6:	f104 0a19 	add.w	sl, r4, #25
 80089ca:	68e3      	ldr	r3, [r4, #12]
 80089cc:	6832      	ldr	r2, [r6, #0]
 80089ce:	1a9b      	subs	r3, r3, r2
 80089d0:	42ab      	cmp	r3, r5
 80089d2:	dc26      	bgt.n	8008a22 <_printf_common+0x96>
 80089d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089d8:	1e13      	subs	r3, r2, #0
 80089da:	6822      	ldr	r2, [r4, #0]
 80089dc:	bf18      	it	ne
 80089de:	2301      	movne	r3, #1
 80089e0:	0692      	lsls	r2, r2, #26
 80089e2:	d42b      	bmi.n	8008a3c <_printf_common+0xb0>
 80089e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089e8:	4649      	mov	r1, r9
 80089ea:	4638      	mov	r0, r7
 80089ec:	47c0      	blx	r8
 80089ee:	3001      	adds	r0, #1
 80089f0:	d01e      	beq.n	8008a30 <_printf_common+0xa4>
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	68e5      	ldr	r5, [r4, #12]
 80089f6:	6832      	ldr	r2, [r6, #0]
 80089f8:	f003 0306 	and.w	r3, r3, #6
 80089fc:	2b04      	cmp	r3, #4
 80089fe:	bf08      	it	eq
 8008a00:	1aad      	subeq	r5, r5, r2
 8008a02:	68a3      	ldr	r3, [r4, #8]
 8008a04:	6922      	ldr	r2, [r4, #16]
 8008a06:	bf0c      	ite	eq
 8008a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a0c:	2500      	movne	r5, #0
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	bfc4      	itt	gt
 8008a12:	1a9b      	subgt	r3, r3, r2
 8008a14:	18ed      	addgt	r5, r5, r3
 8008a16:	2600      	movs	r6, #0
 8008a18:	341a      	adds	r4, #26
 8008a1a:	42b5      	cmp	r5, r6
 8008a1c:	d11a      	bne.n	8008a54 <_printf_common+0xc8>
 8008a1e:	2000      	movs	r0, #0
 8008a20:	e008      	b.n	8008a34 <_printf_common+0xa8>
 8008a22:	2301      	movs	r3, #1
 8008a24:	4652      	mov	r2, sl
 8008a26:	4649      	mov	r1, r9
 8008a28:	4638      	mov	r0, r7
 8008a2a:	47c0      	blx	r8
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	d103      	bne.n	8008a38 <_printf_common+0xac>
 8008a30:	f04f 30ff 	mov.w	r0, #4294967295
 8008a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a38:	3501      	adds	r5, #1
 8008a3a:	e7c6      	b.n	80089ca <_printf_common+0x3e>
 8008a3c:	18e1      	adds	r1, r4, r3
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	2030      	movs	r0, #48	; 0x30
 8008a42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a46:	4422      	add	r2, r4
 8008a48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a50:	3302      	adds	r3, #2
 8008a52:	e7c7      	b.n	80089e4 <_printf_common+0x58>
 8008a54:	2301      	movs	r3, #1
 8008a56:	4622      	mov	r2, r4
 8008a58:	4649      	mov	r1, r9
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	47c0      	blx	r8
 8008a5e:	3001      	adds	r0, #1
 8008a60:	d0e6      	beq.n	8008a30 <_printf_common+0xa4>
 8008a62:	3601      	adds	r6, #1
 8008a64:	e7d9      	b.n	8008a1a <_printf_common+0x8e>
	...

08008a68 <_printf_i>:
 8008a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a6c:	7e0f      	ldrb	r7, [r1, #24]
 8008a6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a70:	2f78      	cmp	r7, #120	; 0x78
 8008a72:	4691      	mov	r9, r2
 8008a74:	4680      	mov	r8, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	469a      	mov	sl, r3
 8008a7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a7e:	d807      	bhi.n	8008a90 <_printf_i+0x28>
 8008a80:	2f62      	cmp	r7, #98	; 0x62
 8008a82:	d80a      	bhi.n	8008a9a <_printf_i+0x32>
 8008a84:	2f00      	cmp	r7, #0
 8008a86:	f000 80d8 	beq.w	8008c3a <_printf_i+0x1d2>
 8008a8a:	2f58      	cmp	r7, #88	; 0x58
 8008a8c:	f000 80a3 	beq.w	8008bd6 <_printf_i+0x16e>
 8008a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a98:	e03a      	b.n	8008b10 <_printf_i+0xa8>
 8008a9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a9e:	2b15      	cmp	r3, #21
 8008aa0:	d8f6      	bhi.n	8008a90 <_printf_i+0x28>
 8008aa2:	a101      	add	r1, pc, #4	; (adr r1, 8008aa8 <_printf_i+0x40>)
 8008aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008aa8:	08008b01 	.word	0x08008b01
 8008aac:	08008b15 	.word	0x08008b15
 8008ab0:	08008a91 	.word	0x08008a91
 8008ab4:	08008a91 	.word	0x08008a91
 8008ab8:	08008a91 	.word	0x08008a91
 8008abc:	08008a91 	.word	0x08008a91
 8008ac0:	08008b15 	.word	0x08008b15
 8008ac4:	08008a91 	.word	0x08008a91
 8008ac8:	08008a91 	.word	0x08008a91
 8008acc:	08008a91 	.word	0x08008a91
 8008ad0:	08008a91 	.word	0x08008a91
 8008ad4:	08008c21 	.word	0x08008c21
 8008ad8:	08008b45 	.word	0x08008b45
 8008adc:	08008c03 	.word	0x08008c03
 8008ae0:	08008a91 	.word	0x08008a91
 8008ae4:	08008a91 	.word	0x08008a91
 8008ae8:	08008c43 	.word	0x08008c43
 8008aec:	08008a91 	.word	0x08008a91
 8008af0:	08008b45 	.word	0x08008b45
 8008af4:	08008a91 	.word	0x08008a91
 8008af8:	08008a91 	.word	0x08008a91
 8008afc:	08008c0b 	.word	0x08008c0b
 8008b00:	682b      	ldr	r3, [r5, #0]
 8008b02:	1d1a      	adds	r2, r3, #4
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	602a      	str	r2, [r5, #0]
 8008b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b10:	2301      	movs	r3, #1
 8008b12:	e0a3      	b.n	8008c5c <_printf_i+0x1f4>
 8008b14:	6820      	ldr	r0, [r4, #0]
 8008b16:	6829      	ldr	r1, [r5, #0]
 8008b18:	0606      	lsls	r6, r0, #24
 8008b1a:	f101 0304 	add.w	r3, r1, #4
 8008b1e:	d50a      	bpl.n	8008b36 <_printf_i+0xce>
 8008b20:	680e      	ldr	r6, [r1, #0]
 8008b22:	602b      	str	r3, [r5, #0]
 8008b24:	2e00      	cmp	r6, #0
 8008b26:	da03      	bge.n	8008b30 <_printf_i+0xc8>
 8008b28:	232d      	movs	r3, #45	; 0x2d
 8008b2a:	4276      	negs	r6, r6
 8008b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b30:	485e      	ldr	r0, [pc, #376]	; (8008cac <_printf_i+0x244>)
 8008b32:	230a      	movs	r3, #10
 8008b34:	e019      	b.n	8008b6a <_printf_i+0x102>
 8008b36:	680e      	ldr	r6, [r1, #0]
 8008b38:	602b      	str	r3, [r5, #0]
 8008b3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b3e:	bf18      	it	ne
 8008b40:	b236      	sxthne	r6, r6
 8008b42:	e7ef      	b.n	8008b24 <_printf_i+0xbc>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	6820      	ldr	r0, [r4, #0]
 8008b48:	1d19      	adds	r1, r3, #4
 8008b4a:	6029      	str	r1, [r5, #0]
 8008b4c:	0601      	lsls	r1, r0, #24
 8008b4e:	d501      	bpl.n	8008b54 <_printf_i+0xec>
 8008b50:	681e      	ldr	r6, [r3, #0]
 8008b52:	e002      	b.n	8008b5a <_printf_i+0xf2>
 8008b54:	0646      	lsls	r6, r0, #25
 8008b56:	d5fb      	bpl.n	8008b50 <_printf_i+0xe8>
 8008b58:	881e      	ldrh	r6, [r3, #0]
 8008b5a:	4854      	ldr	r0, [pc, #336]	; (8008cac <_printf_i+0x244>)
 8008b5c:	2f6f      	cmp	r7, #111	; 0x6f
 8008b5e:	bf0c      	ite	eq
 8008b60:	2308      	moveq	r3, #8
 8008b62:	230a      	movne	r3, #10
 8008b64:	2100      	movs	r1, #0
 8008b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b6a:	6865      	ldr	r5, [r4, #4]
 8008b6c:	60a5      	str	r5, [r4, #8]
 8008b6e:	2d00      	cmp	r5, #0
 8008b70:	bfa2      	ittt	ge
 8008b72:	6821      	ldrge	r1, [r4, #0]
 8008b74:	f021 0104 	bicge.w	r1, r1, #4
 8008b78:	6021      	strge	r1, [r4, #0]
 8008b7a:	b90e      	cbnz	r6, 8008b80 <_printf_i+0x118>
 8008b7c:	2d00      	cmp	r5, #0
 8008b7e:	d04d      	beq.n	8008c1c <_printf_i+0x1b4>
 8008b80:	4615      	mov	r5, r2
 8008b82:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b86:	fb03 6711 	mls	r7, r3, r1, r6
 8008b8a:	5dc7      	ldrb	r7, [r0, r7]
 8008b8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b90:	4637      	mov	r7, r6
 8008b92:	42bb      	cmp	r3, r7
 8008b94:	460e      	mov	r6, r1
 8008b96:	d9f4      	bls.n	8008b82 <_printf_i+0x11a>
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	d10b      	bne.n	8008bb4 <_printf_i+0x14c>
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	07de      	lsls	r6, r3, #31
 8008ba0:	d508      	bpl.n	8008bb4 <_printf_i+0x14c>
 8008ba2:	6923      	ldr	r3, [r4, #16]
 8008ba4:	6861      	ldr	r1, [r4, #4]
 8008ba6:	4299      	cmp	r1, r3
 8008ba8:	bfde      	ittt	le
 8008baa:	2330      	movle	r3, #48	; 0x30
 8008bac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bb4:	1b52      	subs	r2, r2, r5
 8008bb6:	6122      	str	r2, [r4, #16]
 8008bb8:	f8cd a000 	str.w	sl, [sp]
 8008bbc:	464b      	mov	r3, r9
 8008bbe:	aa03      	add	r2, sp, #12
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	f7ff fee2 	bl	800898c <_printf_common>
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d14c      	bne.n	8008c66 <_printf_i+0x1fe>
 8008bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd0:	b004      	add	sp, #16
 8008bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd6:	4835      	ldr	r0, [pc, #212]	; (8008cac <_printf_i+0x244>)
 8008bd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bdc:	6829      	ldr	r1, [r5, #0]
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008be4:	6029      	str	r1, [r5, #0]
 8008be6:	061d      	lsls	r5, r3, #24
 8008be8:	d514      	bpl.n	8008c14 <_printf_i+0x1ac>
 8008bea:	07df      	lsls	r7, r3, #31
 8008bec:	bf44      	itt	mi
 8008bee:	f043 0320 	orrmi.w	r3, r3, #32
 8008bf2:	6023      	strmi	r3, [r4, #0]
 8008bf4:	b91e      	cbnz	r6, 8008bfe <_printf_i+0x196>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	f023 0320 	bic.w	r3, r3, #32
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	2310      	movs	r3, #16
 8008c00:	e7b0      	b.n	8008b64 <_printf_i+0xfc>
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	f043 0320 	orr.w	r3, r3, #32
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	2378      	movs	r3, #120	; 0x78
 8008c0c:	4828      	ldr	r0, [pc, #160]	; (8008cb0 <_printf_i+0x248>)
 8008c0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c12:	e7e3      	b.n	8008bdc <_printf_i+0x174>
 8008c14:	0659      	lsls	r1, r3, #25
 8008c16:	bf48      	it	mi
 8008c18:	b2b6      	uxthmi	r6, r6
 8008c1a:	e7e6      	b.n	8008bea <_printf_i+0x182>
 8008c1c:	4615      	mov	r5, r2
 8008c1e:	e7bb      	b.n	8008b98 <_printf_i+0x130>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	6826      	ldr	r6, [r4, #0]
 8008c24:	6961      	ldr	r1, [r4, #20]
 8008c26:	1d18      	adds	r0, r3, #4
 8008c28:	6028      	str	r0, [r5, #0]
 8008c2a:	0635      	lsls	r5, r6, #24
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	d501      	bpl.n	8008c34 <_printf_i+0x1cc>
 8008c30:	6019      	str	r1, [r3, #0]
 8008c32:	e002      	b.n	8008c3a <_printf_i+0x1d2>
 8008c34:	0670      	lsls	r0, r6, #25
 8008c36:	d5fb      	bpl.n	8008c30 <_printf_i+0x1c8>
 8008c38:	8019      	strh	r1, [r3, #0]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	6123      	str	r3, [r4, #16]
 8008c3e:	4615      	mov	r5, r2
 8008c40:	e7ba      	b.n	8008bb8 <_printf_i+0x150>
 8008c42:	682b      	ldr	r3, [r5, #0]
 8008c44:	1d1a      	adds	r2, r3, #4
 8008c46:	602a      	str	r2, [r5, #0]
 8008c48:	681d      	ldr	r5, [r3, #0]
 8008c4a:	6862      	ldr	r2, [r4, #4]
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f7f7 fb4e 	bl	80002f0 <memchr>
 8008c54:	b108      	cbz	r0, 8008c5a <_printf_i+0x1f2>
 8008c56:	1b40      	subs	r0, r0, r5
 8008c58:	6060      	str	r0, [r4, #4]
 8008c5a:	6863      	ldr	r3, [r4, #4]
 8008c5c:	6123      	str	r3, [r4, #16]
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c64:	e7a8      	b.n	8008bb8 <_printf_i+0x150>
 8008c66:	6923      	ldr	r3, [r4, #16]
 8008c68:	462a      	mov	r2, r5
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	4640      	mov	r0, r8
 8008c6e:	47d0      	blx	sl
 8008c70:	3001      	adds	r0, #1
 8008c72:	d0ab      	beq.n	8008bcc <_printf_i+0x164>
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	079b      	lsls	r3, r3, #30
 8008c78:	d413      	bmi.n	8008ca2 <_printf_i+0x23a>
 8008c7a:	68e0      	ldr	r0, [r4, #12]
 8008c7c:	9b03      	ldr	r3, [sp, #12]
 8008c7e:	4298      	cmp	r0, r3
 8008c80:	bfb8      	it	lt
 8008c82:	4618      	movlt	r0, r3
 8008c84:	e7a4      	b.n	8008bd0 <_printf_i+0x168>
 8008c86:	2301      	movs	r3, #1
 8008c88:	4632      	mov	r2, r6
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	4640      	mov	r0, r8
 8008c8e:	47d0      	blx	sl
 8008c90:	3001      	adds	r0, #1
 8008c92:	d09b      	beq.n	8008bcc <_printf_i+0x164>
 8008c94:	3501      	adds	r5, #1
 8008c96:	68e3      	ldr	r3, [r4, #12]
 8008c98:	9903      	ldr	r1, [sp, #12]
 8008c9a:	1a5b      	subs	r3, r3, r1
 8008c9c:	42ab      	cmp	r3, r5
 8008c9e:	dcf2      	bgt.n	8008c86 <_printf_i+0x21e>
 8008ca0:	e7eb      	b.n	8008c7a <_printf_i+0x212>
 8008ca2:	2500      	movs	r5, #0
 8008ca4:	f104 0619 	add.w	r6, r4, #25
 8008ca8:	e7f5      	b.n	8008c96 <_printf_i+0x22e>
 8008caa:	bf00      	nop
 8008cac:	0800b212 	.word	0x0800b212
 8008cb0:	0800b223 	.word	0x0800b223

08008cb4 <siprintf>:
 8008cb4:	b40e      	push	{r1, r2, r3}
 8008cb6:	b500      	push	{lr}
 8008cb8:	b09c      	sub	sp, #112	; 0x70
 8008cba:	ab1d      	add	r3, sp, #116	; 0x74
 8008cbc:	9002      	str	r0, [sp, #8]
 8008cbe:	9006      	str	r0, [sp, #24]
 8008cc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cc4:	4809      	ldr	r0, [pc, #36]	; (8008cec <siprintf+0x38>)
 8008cc6:	9107      	str	r1, [sp, #28]
 8008cc8:	9104      	str	r1, [sp, #16]
 8008cca:	4909      	ldr	r1, [pc, #36]	; (8008cf0 <siprintf+0x3c>)
 8008ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd0:	9105      	str	r1, [sp, #20]
 8008cd2:	6800      	ldr	r0, [r0, #0]
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	a902      	add	r1, sp, #8
 8008cd8:	f001 faf8 	bl	800a2cc <_svfiprintf_r>
 8008cdc:	9b02      	ldr	r3, [sp, #8]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	701a      	strb	r2, [r3, #0]
 8008ce2:	b01c      	add	sp, #112	; 0x70
 8008ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ce8:	b003      	add	sp, #12
 8008cea:	4770      	bx	lr
 8008cec:	24000014 	.word	0x24000014
 8008cf0:	ffff0208 	.word	0xffff0208

08008cf4 <quorem>:
 8008cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	6903      	ldr	r3, [r0, #16]
 8008cfa:	690c      	ldr	r4, [r1, #16]
 8008cfc:	42a3      	cmp	r3, r4
 8008cfe:	4607      	mov	r7, r0
 8008d00:	f2c0 8081 	blt.w	8008e06 <quorem+0x112>
 8008d04:	3c01      	subs	r4, #1
 8008d06:	f101 0814 	add.w	r8, r1, #20
 8008d0a:	f100 0514 	add.w	r5, r0, #20
 8008d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d28:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d2c:	d331      	bcc.n	8008d92 <quorem+0x9e>
 8008d2e:	f04f 0e00 	mov.w	lr, #0
 8008d32:	4640      	mov	r0, r8
 8008d34:	46ac      	mov	ip, r5
 8008d36:	46f2      	mov	sl, lr
 8008d38:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d3c:	b293      	uxth	r3, r2
 8008d3e:	fb06 e303 	mla	r3, r6, r3, lr
 8008d42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	ebaa 0303 	sub.w	r3, sl, r3
 8008d4c:	f8dc a000 	ldr.w	sl, [ip]
 8008d50:	0c12      	lsrs	r2, r2, #16
 8008d52:	fa13 f38a 	uxtah	r3, r3, sl
 8008d56:	fb06 e202 	mla	r2, r6, r2, lr
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	9b00      	ldr	r3, [sp, #0]
 8008d5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d62:	b292      	uxth	r2, r2
 8008d64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d70:	4581      	cmp	r9, r0
 8008d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d76:	f84c 3b04 	str.w	r3, [ip], #4
 8008d7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d7e:	d2db      	bcs.n	8008d38 <quorem+0x44>
 8008d80:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d84:	b92b      	cbnz	r3, 8008d92 <quorem+0x9e>
 8008d86:	9b01      	ldr	r3, [sp, #4]
 8008d88:	3b04      	subs	r3, #4
 8008d8a:	429d      	cmp	r5, r3
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	d32e      	bcc.n	8008dee <quorem+0xfa>
 8008d90:	613c      	str	r4, [r7, #16]
 8008d92:	4638      	mov	r0, r7
 8008d94:	f001 f846 	bl	8009e24 <__mcmp>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	db24      	blt.n	8008de6 <quorem+0xf2>
 8008d9c:	3601      	adds	r6, #1
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f04f 0c00 	mov.w	ip, #0
 8008da4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008da8:	f8d0 e000 	ldr.w	lr, [r0]
 8008dac:	b293      	uxth	r3, r2
 8008dae:	ebac 0303 	sub.w	r3, ip, r3
 8008db2:	0c12      	lsrs	r2, r2, #16
 8008db4:	fa13 f38e 	uxtah	r3, r3, lr
 8008db8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008dbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dc6:	45c1      	cmp	r9, r8
 8008dc8:	f840 3b04 	str.w	r3, [r0], #4
 8008dcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008dd0:	d2e8      	bcs.n	8008da4 <quorem+0xb0>
 8008dd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008dd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dda:	b922      	cbnz	r2, 8008de6 <quorem+0xf2>
 8008ddc:	3b04      	subs	r3, #4
 8008dde:	429d      	cmp	r5, r3
 8008de0:	461a      	mov	r2, r3
 8008de2:	d30a      	bcc.n	8008dfa <quorem+0x106>
 8008de4:	613c      	str	r4, [r7, #16]
 8008de6:	4630      	mov	r0, r6
 8008de8:	b003      	add	sp, #12
 8008dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dee:	6812      	ldr	r2, [r2, #0]
 8008df0:	3b04      	subs	r3, #4
 8008df2:	2a00      	cmp	r2, #0
 8008df4:	d1cc      	bne.n	8008d90 <quorem+0x9c>
 8008df6:	3c01      	subs	r4, #1
 8008df8:	e7c7      	b.n	8008d8a <quorem+0x96>
 8008dfa:	6812      	ldr	r2, [r2, #0]
 8008dfc:	3b04      	subs	r3, #4
 8008dfe:	2a00      	cmp	r2, #0
 8008e00:	d1f0      	bne.n	8008de4 <quorem+0xf0>
 8008e02:	3c01      	subs	r4, #1
 8008e04:	e7eb      	b.n	8008dde <quorem+0xea>
 8008e06:	2000      	movs	r0, #0
 8008e08:	e7ee      	b.n	8008de8 <quorem+0xf4>
 8008e0a:	0000      	movs	r0, r0
 8008e0c:	0000      	movs	r0, r0
	...

08008e10 <_dtoa_r>:
 8008e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e14:	ed2d 8b02 	vpush	{d8}
 8008e18:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e1a:	b091      	sub	sp, #68	; 0x44
 8008e1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008e20:	ec59 8b10 	vmov	r8, r9, d0
 8008e24:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008e26:	9106      	str	r1, [sp, #24]
 8008e28:	4606      	mov	r6, r0
 8008e2a:	9208      	str	r2, [sp, #32]
 8008e2c:	930c      	str	r3, [sp, #48]	; 0x30
 8008e2e:	b975      	cbnz	r5, 8008e4e <_dtoa_r+0x3e>
 8008e30:	2010      	movs	r0, #16
 8008e32:	f000 fd5f 	bl	80098f4 <malloc>
 8008e36:	4602      	mov	r2, r0
 8008e38:	6270      	str	r0, [r6, #36]	; 0x24
 8008e3a:	b920      	cbnz	r0, 8008e46 <_dtoa_r+0x36>
 8008e3c:	4baa      	ldr	r3, [pc, #680]	; (80090e8 <_dtoa_r+0x2d8>)
 8008e3e:	21ea      	movs	r1, #234	; 0xea
 8008e40:	48aa      	ldr	r0, [pc, #680]	; (80090ec <_dtoa_r+0x2dc>)
 8008e42:	f001 fb53 	bl	800a4ec <__assert_func>
 8008e46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e4a:	6005      	str	r5, [r0, #0]
 8008e4c:	60c5      	str	r5, [r0, #12]
 8008e4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008e50:	6819      	ldr	r1, [r3, #0]
 8008e52:	b151      	cbz	r1, 8008e6a <_dtoa_r+0x5a>
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	604a      	str	r2, [r1, #4]
 8008e58:	2301      	movs	r3, #1
 8008e5a:	4093      	lsls	r3, r2
 8008e5c:	608b      	str	r3, [r1, #8]
 8008e5e:	4630      	mov	r0, r6
 8008e60:	f000 fd9e 	bl	80099a0 <_Bfree>
 8008e64:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008e66:	2200      	movs	r2, #0
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	f1b9 0300 	subs.w	r3, r9, #0
 8008e6e:	bfbb      	ittet	lt
 8008e70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e74:	9303      	strlt	r3, [sp, #12]
 8008e76:	2300      	movge	r3, #0
 8008e78:	2201      	movlt	r2, #1
 8008e7a:	bfac      	ite	ge
 8008e7c:	6023      	strge	r3, [r4, #0]
 8008e7e:	6022      	strlt	r2, [r4, #0]
 8008e80:	4b9b      	ldr	r3, [pc, #620]	; (80090f0 <_dtoa_r+0x2e0>)
 8008e82:	9c03      	ldr	r4, [sp, #12]
 8008e84:	43a3      	bics	r3, r4
 8008e86:	d11c      	bne.n	8008ec2 <_dtoa_r+0xb2>
 8008e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008e94:	ea53 0308 	orrs.w	r3, r3, r8
 8008e98:	f000 84fd 	beq.w	8009896 <_dtoa_r+0xa86>
 8008e9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e9e:	b963      	cbnz	r3, 8008eba <_dtoa_r+0xaa>
 8008ea0:	4b94      	ldr	r3, [pc, #592]	; (80090f4 <_dtoa_r+0x2e4>)
 8008ea2:	e01f      	b.n	8008ee4 <_dtoa_r+0xd4>
 8008ea4:	4b94      	ldr	r3, [pc, #592]	; (80090f8 <_dtoa_r+0x2e8>)
 8008ea6:	9301      	str	r3, [sp, #4]
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	9801      	ldr	r0, [sp, #4]
 8008eb0:	b011      	add	sp, #68	; 0x44
 8008eb2:	ecbd 8b02 	vpop	{d8}
 8008eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eba:	4b8e      	ldr	r3, [pc, #568]	; (80090f4 <_dtoa_r+0x2e4>)
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	3303      	adds	r3, #3
 8008ec0:	e7f3      	b.n	8008eaa <_dtoa_r+0x9a>
 8008ec2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008ec6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ece:	d10b      	bne.n	8008ee8 <_dtoa_r+0xd8>
 8008ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	6013      	str	r3, [r2, #0]
 8008ed6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 84d9 	beq.w	8009890 <_dtoa_r+0xa80>
 8008ede:	4887      	ldr	r0, [pc, #540]	; (80090fc <_dtoa_r+0x2ec>)
 8008ee0:	6018      	str	r0, [r3, #0]
 8008ee2:	1e43      	subs	r3, r0, #1
 8008ee4:	9301      	str	r3, [sp, #4]
 8008ee6:	e7e2      	b.n	8008eae <_dtoa_r+0x9e>
 8008ee8:	a90f      	add	r1, sp, #60	; 0x3c
 8008eea:	aa0e      	add	r2, sp, #56	; 0x38
 8008eec:	4630      	mov	r0, r6
 8008eee:	eeb0 0b48 	vmov.f64	d0, d8
 8008ef2:	f001 f83d 	bl	8009f70 <__d2b>
 8008ef6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008efa:	4605      	mov	r5, r0
 8008efc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008efe:	2900      	cmp	r1, #0
 8008f00:	d046      	beq.n	8008f90 <_dtoa_r+0x180>
 8008f02:	ee18 4a90 	vmov	r4, s17
 8008f06:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008f0a:	ec53 2b18 	vmov	r2, r3, d8
 8008f0e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008f12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008f16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008f1a:	2400      	movs	r4, #0
 8008f1c:	ec43 2b16 	vmov	d6, r2, r3
 8008f20:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008f24:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80090d0 <_dtoa_r+0x2c0>
 8008f28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008f2c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80090d8 <_dtoa_r+0x2c8>
 8008f30:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008f34:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80090e0 <_dtoa_r+0x2d0>
 8008f38:	ee07 1a90 	vmov	s15, r1
 8008f3c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008f40:	eeb0 7b46 	vmov.f64	d7, d6
 8008f44:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008f48:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008f4c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f54:	ee16 ba90 	vmov	fp, s13
 8008f58:	940a      	str	r4, [sp, #40]	; 0x28
 8008f5a:	d508      	bpl.n	8008f6e <_dtoa_r+0x15e>
 8008f5c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008f60:	eeb4 6b47 	vcmp.f64	d6, d7
 8008f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f68:	bf18      	it	ne
 8008f6a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008f6e:	f1bb 0f16 	cmp.w	fp, #22
 8008f72:	d82f      	bhi.n	8008fd4 <_dtoa_r+0x1c4>
 8008f74:	4b62      	ldr	r3, [pc, #392]	; (8009100 <_dtoa_r+0x2f0>)
 8008f76:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f7a:	ed93 7b00 	vldr	d7, [r3]
 8008f7e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f86:	d501      	bpl.n	8008f8c <_dtoa_r+0x17c>
 8008f88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e022      	b.n	8008fd6 <_dtoa_r+0x1c6>
 8008f90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f92:	4401      	add	r1, r0
 8008f94:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008f98:	2b20      	cmp	r3, #32
 8008f9a:	bfc1      	itttt	gt
 8008f9c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fa0:	fa04 f303 	lslgt.w	r3, r4, r3
 8008fa4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008fa8:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008fac:	bfd6      	itet	le
 8008fae:	f1c3 0320 	rsble	r3, r3, #32
 8008fb2:	ea43 0808 	orrgt.w	r8, r3, r8
 8008fb6:	fa08 f803 	lslle.w	r8, r8, r3
 8008fba:	ee07 8a90 	vmov	s15, r8
 8008fbe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008fc2:	3901      	subs	r1, #1
 8008fc4:	ee17 4a90 	vmov	r4, s15
 8008fc8:	ec53 2b17 	vmov	r2, r3, d7
 8008fcc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008fd0:	2401      	movs	r4, #1
 8008fd2:	e7a3      	b.n	8008f1c <_dtoa_r+0x10c>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fd8:	1a43      	subs	r3, r0, r1
 8008fda:	1e5a      	subs	r2, r3, #1
 8008fdc:	bf45      	ittet	mi
 8008fde:	f1c3 0301 	rsbmi	r3, r3, #1
 8008fe2:	9304      	strmi	r3, [sp, #16]
 8008fe4:	2300      	movpl	r3, #0
 8008fe6:	2300      	movmi	r3, #0
 8008fe8:	9205      	str	r2, [sp, #20]
 8008fea:	bf54      	ite	pl
 8008fec:	9304      	strpl	r3, [sp, #16]
 8008fee:	9305      	strmi	r3, [sp, #20]
 8008ff0:	f1bb 0f00 	cmp.w	fp, #0
 8008ff4:	db18      	blt.n	8009028 <_dtoa_r+0x218>
 8008ff6:	9b05      	ldr	r3, [sp, #20]
 8008ff8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008ffc:	445b      	add	r3, fp
 8008ffe:	9305      	str	r3, [sp, #20]
 8009000:	2300      	movs	r3, #0
 8009002:	9a06      	ldr	r2, [sp, #24]
 8009004:	2a09      	cmp	r2, #9
 8009006:	d849      	bhi.n	800909c <_dtoa_r+0x28c>
 8009008:	2a05      	cmp	r2, #5
 800900a:	bfc4      	itt	gt
 800900c:	3a04      	subgt	r2, #4
 800900e:	9206      	strgt	r2, [sp, #24]
 8009010:	9a06      	ldr	r2, [sp, #24]
 8009012:	f1a2 0202 	sub.w	r2, r2, #2
 8009016:	bfcc      	ite	gt
 8009018:	2400      	movgt	r4, #0
 800901a:	2401      	movle	r4, #1
 800901c:	2a03      	cmp	r2, #3
 800901e:	d848      	bhi.n	80090b2 <_dtoa_r+0x2a2>
 8009020:	e8df f002 	tbb	[pc, r2]
 8009024:	3a2c2e0b 	.word	0x3a2c2e0b
 8009028:	9b04      	ldr	r3, [sp, #16]
 800902a:	2200      	movs	r2, #0
 800902c:	eba3 030b 	sub.w	r3, r3, fp
 8009030:	9304      	str	r3, [sp, #16]
 8009032:	9209      	str	r2, [sp, #36]	; 0x24
 8009034:	f1cb 0300 	rsb	r3, fp, #0
 8009038:	e7e3      	b.n	8009002 <_dtoa_r+0x1f2>
 800903a:	2200      	movs	r2, #0
 800903c:	9207      	str	r2, [sp, #28]
 800903e:	9a08      	ldr	r2, [sp, #32]
 8009040:	2a00      	cmp	r2, #0
 8009042:	dc39      	bgt.n	80090b8 <_dtoa_r+0x2a8>
 8009044:	f04f 0a01 	mov.w	sl, #1
 8009048:	46d1      	mov	r9, sl
 800904a:	4652      	mov	r2, sl
 800904c:	f8cd a020 	str.w	sl, [sp, #32]
 8009050:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009052:	2100      	movs	r1, #0
 8009054:	6079      	str	r1, [r7, #4]
 8009056:	2004      	movs	r0, #4
 8009058:	f100 0c14 	add.w	ip, r0, #20
 800905c:	4594      	cmp	ip, r2
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	d92f      	bls.n	80090c2 <_dtoa_r+0x2b2>
 8009062:	4630      	mov	r0, r6
 8009064:	930d      	str	r3, [sp, #52]	; 0x34
 8009066:	f000 fc5b 	bl	8009920 <_Balloc>
 800906a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800906c:	9001      	str	r0, [sp, #4]
 800906e:	4602      	mov	r2, r0
 8009070:	2800      	cmp	r0, #0
 8009072:	d149      	bne.n	8009108 <_dtoa_r+0x2f8>
 8009074:	4b23      	ldr	r3, [pc, #140]	; (8009104 <_dtoa_r+0x2f4>)
 8009076:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800907a:	e6e1      	b.n	8008e40 <_dtoa_r+0x30>
 800907c:	2201      	movs	r2, #1
 800907e:	e7dd      	b.n	800903c <_dtoa_r+0x22c>
 8009080:	2200      	movs	r2, #0
 8009082:	9207      	str	r2, [sp, #28]
 8009084:	9a08      	ldr	r2, [sp, #32]
 8009086:	eb0b 0a02 	add.w	sl, fp, r2
 800908a:	f10a 0901 	add.w	r9, sl, #1
 800908e:	464a      	mov	r2, r9
 8009090:	2a01      	cmp	r2, #1
 8009092:	bfb8      	it	lt
 8009094:	2201      	movlt	r2, #1
 8009096:	e7db      	b.n	8009050 <_dtoa_r+0x240>
 8009098:	2201      	movs	r2, #1
 800909a:	e7f2      	b.n	8009082 <_dtoa_r+0x272>
 800909c:	2401      	movs	r4, #1
 800909e:	2200      	movs	r2, #0
 80090a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80090a4:	f04f 3aff 	mov.w	sl, #4294967295
 80090a8:	2100      	movs	r1, #0
 80090aa:	46d1      	mov	r9, sl
 80090ac:	2212      	movs	r2, #18
 80090ae:	9108      	str	r1, [sp, #32]
 80090b0:	e7ce      	b.n	8009050 <_dtoa_r+0x240>
 80090b2:	2201      	movs	r2, #1
 80090b4:	9207      	str	r2, [sp, #28]
 80090b6:	e7f5      	b.n	80090a4 <_dtoa_r+0x294>
 80090b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80090bc:	46d1      	mov	r9, sl
 80090be:	4652      	mov	r2, sl
 80090c0:	e7c6      	b.n	8009050 <_dtoa_r+0x240>
 80090c2:	3101      	adds	r1, #1
 80090c4:	6079      	str	r1, [r7, #4]
 80090c6:	0040      	lsls	r0, r0, #1
 80090c8:	e7c6      	b.n	8009058 <_dtoa_r+0x248>
 80090ca:	bf00      	nop
 80090cc:	f3af 8000 	nop.w
 80090d0:	636f4361 	.word	0x636f4361
 80090d4:	3fd287a7 	.word	0x3fd287a7
 80090d8:	8b60c8b3 	.word	0x8b60c8b3
 80090dc:	3fc68a28 	.word	0x3fc68a28
 80090e0:	509f79fb 	.word	0x509f79fb
 80090e4:	3fd34413 	.word	0x3fd34413
 80090e8:	0800b241 	.word	0x0800b241
 80090ec:	0800b258 	.word	0x0800b258
 80090f0:	7ff00000 	.word	0x7ff00000
 80090f4:	0800b23d 	.word	0x0800b23d
 80090f8:	0800b234 	.word	0x0800b234
 80090fc:	0800b211 	.word	0x0800b211
 8009100:	0800b348 	.word	0x0800b348
 8009104:	0800b2b3 	.word	0x0800b2b3
 8009108:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800910a:	9901      	ldr	r1, [sp, #4]
 800910c:	6011      	str	r1, [r2, #0]
 800910e:	f1b9 0f0e 	cmp.w	r9, #14
 8009112:	d86c      	bhi.n	80091ee <_dtoa_r+0x3de>
 8009114:	2c00      	cmp	r4, #0
 8009116:	d06a      	beq.n	80091ee <_dtoa_r+0x3de>
 8009118:	f1bb 0f00 	cmp.w	fp, #0
 800911c:	f340 80a0 	ble.w	8009260 <_dtoa_r+0x450>
 8009120:	49c1      	ldr	r1, [pc, #772]	; (8009428 <_dtoa_r+0x618>)
 8009122:	f00b 020f 	and.w	r2, fp, #15
 8009126:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800912a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800912e:	ed92 7b00 	vldr	d7, [r2]
 8009132:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009136:	f000 8087 	beq.w	8009248 <_dtoa_r+0x438>
 800913a:	4abc      	ldr	r2, [pc, #752]	; (800942c <_dtoa_r+0x61c>)
 800913c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009140:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009144:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009148:	f001 010f 	and.w	r1, r1, #15
 800914c:	2203      	movs	r2, #3
 800914e:	48b7      	ldr	r0, [pc, #732]	; (800942c <_dtoa_r+0x61c>)
 8009150:	2900      	cmp	r1, #0
 8009152:	d17b      	bne.n	800924c <_dtoa_r+0x43c>
 8009154:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009158:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800915c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009160:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009162:	2900      	cmp	r1, #0
 8009164:	f000 80a2 	beq.w	80092ac <_dtoa_r+0x49c>
 8009168:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800916c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009170:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009178:	f140 8098 	bpl.w	80092ac <_dtoa_r+0x49c>
 800917c:	f1b9 0f00 	cmp.w	r9, #0
 8009180:	f000 8094 	beq.w	80092ac <_dtoa_r+0x49c>
 8009184:	f1ba 0f00 	cmp.w	sl, #0
 8009188:	dd2f      	ble.n	80091ea <_dtoa_r+0x3da>
 800918a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800918e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009192:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009196:	f10b 37ff 	add.w	r7, fp, #4294967295
 800919a:	3201      	adds	r2, #1
 800919c:	4650      	mov	r0, sl
 800919e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80091a2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80091a6:	ee07 2a90 	vmov	s15, r2
 80091aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80091ae:	eea7 5b06 	vfma.f64	d5, d7, d6
 80091b2:	ee15 4a90 	vmov	r4, s11
 80091b6:	ec52 1b15 	vmov	r1, r2, d5
 80091ba:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80091be:	2800      	cmp	r0, #0
 80091c0:	d177      	bne.n	80092b2 <_dtoa_r+0x4a2>
 80091c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80091c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80091ca:	ec42 1b17 	vmov	d7, r1, r2
 80091ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80091d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d6:	f300 8263 	bgt.w	80096a0 <_dtoa_r+0x890>
 80091da:	eeb1 7b47 	vneg.f64	d7, d7
 80091de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80091e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e6:	f100 8258 	bmi.w	800969a <_dtoa_r+0x88a>
 80091ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80091ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091f0:	2a00      	cmp	r2, #0
 80091f2:	f2c0 811d 	blt.w	8009430 <_dtoa_r+0x620>
 80091f6:	f1bb 0f0e 	cmp.w	fp, #14
 80091fa:	f300 8119 	bgt.w	8009430 <_dtoa_r+0x620>
 80091fe:	4b8a      	ldr	r3, [pc, #552]	; (8009428 <_dtoa_r+0x618>)
 8009200:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009204:	ed93 6b00 	vldr	d6, [r3]
 8009208:	9b08      	ldr	r3, [sp, #32]
 800920a:	2b00      	cmp	r3, #0
 800920c:	f280 80b7 	bge.w	800937e <_dtoa_r+0x56e>
 8009210:	f1b9 0f00 	cmp.w	r9, #0
 8009214:	f300 80b3 	bgt.w	800937e <_dtoa_r+0x56e>
 8009218:	f040 823f 	bne.w	800969a <_dtoa_r+0x88a>
 800921c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009220:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009224:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009228:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800922c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009230:	464c      	mov	r4, r9
 8009232:	464f      	mov	r7, r9
 8009234:	f280 8215 	bge.w	8009662 <_dtoa_r+0x852>
 8009238:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800923c:	2331      	movs	r3, #49	; 0x31
 800923e:	f808 3b01 	strb.w	r3, [r8], #1
 8009242:	f10b 0b01 	add.w	fp, fp, #1
 8009246:	e211      	b.n	800966c <_dtoa_r+0x85c>
 8009248:	2202      	movs	r2, #2
 800924a:	e780      	b.n	800914e <_dtoa_r+0x33e>
 800924c:	07cc      	lsls	r4, r1, #31
 800924e:	d504      	bpl.n	800925a <_dtoa_r+0x44a>
 8009250:	ed90 6b00 	vldr	d6, [r0]
 8009254:	3201      	adds	r2, #1
 8009256:	ee27 7b06 	vmul.f64	d7, d7, d6
 800925a:	1049      	asrs	r1, r1, #1
 800925c:	3008      	adds	r0, #8
 800925e:	e777      	b.n	8009150 <_dtoa_r+0x340>
 8009260:	d022      	beq.n	80092a8 <_dtoa_r+0x498>
 8009262:	f1cb 0100 	rsb	r1, fp, #0
 8009266:	4a70      	ldr	r2, [pc, #448]	; (8009428 <_dtoa_r+0x618>)
 8009268:	f001 000f 	and.w	r0, r1, #15
 800926c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009270:	ed92 7b00 	vldr	d7, [r2]
 8009274:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009278:	ed8d 7b02 	vstr	d7, [sp, #8]
 800927c:	486b      	ldr	r0, [pc, #428]	; (800942c <_dtoa_r+0x61c>)
 800927e:	1109      	asrs	r1, r1, #4
 8009280:	2400      	movs	r4, #0
 8009282:	2202      	movs	r2, #2
 8009284:	b929      	cbnz	r1, 8009292 <_dtoa_r+0x482>
 8009286:	2c00      	cmp	r4, #0
 8009288:	f43f af6a 	beq.w	8009160 <_dtoa_r+0x350>
 800928c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009290:	e766      	b.n	8009160 <_dtoa_r+0x350>
 8009292:	07cf      	lsls	r7, r1, #31
 8009294:	d505      	bpl.n	80092a2 <_dtoa_r+0x492>
 8009296:	ed90 6b00 	vldr	d6, [r0]
 800929a:	3201      	adds	r2, #1
 800929c:	2401      	movs	r4, #1
 800929e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80092a2:	1049      	asrs	r1, r1, #1
 80092a4:	3008      	adds	r0, #8
 80092a6:	e7ed      	b.n	8009284 <_dtoa_r+0x474>
 80092a8:	2202      	movs	r2, #2
 80092aa:	e759      	b.n	8009160 <_dtoa_r+0x350>
 80092ac:	465f      	mov	r7, fp
 80092ae:	4648      	mov	r0, r9
 80092b0:	e775      	b.n	800919e <_dtoa_r+0x38e>
 80092b2:	ec42 1b17 	vmov	d7, r1, r2
 80092b6:	4a5c      	ldr	r2, [pc, #368]	; (8009428 <_dtoa_r+0x618>)
 80092b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80092bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80092c0:	9a01      	ldr	r2, [sp, #4]
 80092c2:	1814      	adds	r4, r2, r0
 80092c4:	9a07      	ldr	r2, [sp, #28]
 80092c6:	b352      	cbz	r2, 800931e <_dtoa_r+0x50e>
 80092c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80092cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80092d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80092d4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80092d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80092dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80092e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80092e4:	ee14 2a90 	vmov	r2, s9
 80092e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80092ec:	3230      	adds	r2, #48	; 0x30
 80092ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 80092f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80092f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092fa:	f808 2b01 	strb.w	r2, [r8], #1
 80092fe:	d439      	bmi.n	8009374 <_dtoa_r+0x564>
 8009300:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009304:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800930c:	d472      	bmi.n	80093f4 <_dtoa_r+0x5e4>
 800930e:	45a0      	cmp	r8, r4
 8009310:	f43f af6b 	beq.w	80091ea <_dtoa_r+0x3da>
 8009314:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009318:	ee26 6b03 	vmul.f64	d6, d6, d3
 800931c:	e7e0      	b.n	80092e0 <_dtoa_r+0x4d0>
 800931e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009322:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009326:	4621      	mov	r1, r4
 8009328:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800932c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009330:	ee14 2a90 	vmov	r2, s9
 8009334:	3230      	adds	r2, #48	; 0x30
 8009336:	f808 2b01 	strb.w	r2, [r8], #1
 800933a:	45a0      	cmp	r8, r4
 800933c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009340:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009344:	d118      	bne.n	8009378 <_dtoa_r+0x568>
 8009346:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800934a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800934e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009356:	dc4d      	bgt.n	80093f4 <_dtoa_r+0x5e4>
 8009358:	ee35 7b47 	vsub.f64	d7, d5, d7
 800935c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009364:	f57f af41 	bpl.w	80091ea <_dtoa_r+0x3da>
 8009368:	4688      	mov	r8, r1
 800936a:	3901      	subs	r1, #1
 800936c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009370:	2b30      	cmp	r3, #48	; 0x30
 8009372:	d0f9      	beq.n	8009368 <_dtoa_r+0x558>
 8009374:	46bb      	mov	fp, r7
 8009376:	e02a      	b.n	80093ce <_dtoa_r+0x5be>
 8009378:	ee26 6b03 	vmul.f64	d6, d6, d3
 800937c:	e7d6      	b.n	800932c <_dtoa_r+0x51c>
 800937e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009382:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009386:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800938a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800938e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009392:	ee15 3a10 	vmov	r3, s10
 8009396:	3330      	adds	r3, #48	; 0x30
 8009398:	f808 3b01 	strb.w	r3, [r8], #1
 800939c:	9b01      	ldr	r3, [sp, #4]
 800939e:	eba8 0303 	sub.w	r3, r8, r3
 80093a2:	4599      	cmp	r9, r3
 80093a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80093a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80093ac:	d133      	bne.n	8009416 <_dtoa_r+0x606>
 80093ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80093b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80093b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ba:	dc1a      	bgt.n	80093f2 <_dtoa_r+0x5e2>
 80093bc:	eeb4 7b46 	vcmp.f64	d7, d6
 80093c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093c4:	d103      	bne.n	80093ce <_dtoa_r+0x5be>
 80093c6:	ee15 3a10 	vmov	r3, s10
 80093ca:	07d9      	lsls	r1, r3, #31
 80093cc:	d411      	bmi.n	80093f2 <_dtoa_r+0x5e2>
 80093ce:	4629      	mov	r1, r5
 80093d0:	4630      	mov	r0, r6
 80093d2:	f000 fae5 	bl	80099a0 <_Bfree>
 80093d6:	2300      	movs	r3, #0
 80093d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093da:	f888 3000 	strb.w	r3, [r8]
 80093de:	f10b 0301 	add.w	r3, fp, #1
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f43f ad61 	beq.w	8008eae <_dtoa_r+0x9e>
 80093ec:	f8c3 8000 	str.w	r8, [r3]
 80093f0:	e55d      	b.n	8008eae <_dtoa_r+0x9e>
 80093f2:	465f      	mov	r7, fp
 80093f4:	4643      	mov	r3, r8
 80093f6:	4698      	mov	r8, r3
 80093f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093fc:	2a39      	cmp	r2, #57	; 0x39
 80093fe:	d106      	bne.n	800940e <_dtoa_r+0x5fe>
 8009400:	9a01      	ldr	r2, [sp, #4]
 8009402:	429a      	cmp	r2, r3
 8009404:	d1f7      	bne.n	80093f6 <_dtoa_r+0x5e6>
 8009406:	9901      	ldr	r1, [sp, #4]
 8009408:	2230      	movs	r2, #48	; 0x30
 800940a:	3701      	adds	r7, #1
 800940c:	700a      	strb	r2, [r1, #0]
 800940e:	781a      	ldrb	r2, [r3, #0]
 8009410:	3201      	adds	r2, #1
 8009412:	701a      	strb	r2, [r3, #0]
 8009414:	e7ae      	b.n	8009374 <_dtoa_r+0x564>
 8009416:	ee27 7b04 	vmul.f64	d7, d7, d4
 800941a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800941e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009422:	d1b2      	bne.n	800938a <_dtoa_r+0x57a>
 8009424:	e7d3      	b.n	80093ce <_dtoa_r+0x5be>
 8009426:	bf00      	nop
 8009428:	0800b348 	.word	0x0800b348
 800942c:	0800b320 	.word	0x0800b320
 8009430:	9907      	ldr	r1, [sp, #28]
 8009432:	2900      	cmp	r1, #0
 8009434:	f000 80d0 	beq.w	80095d8 <_dtoa_r+0x7c8>
 8009438:	9906      	ldr	r1, [sp, #24]
 800943a:	2901      	cmp	r1, #1
 800943c:	f300 80b4 	bgt.w	80095a8 <_dtoa_r+0x798>
 8009440:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009442:	2900      	cmp	r1, #0
 8009444:	f000 80ac 	beq.w	80095a0 <_dtoa_r+0x790>
 8009448:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800944c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009450:	461c      	mov	r4, r3
 8009452:	930a      	str	r3, [sp, #40]	; 0x28
 8009454:	9b04      	ldr	r3, [sp, #16]
 8009456:	4413      	add	r3, r2
 8009458:	9304      	str	r3, [sp, #16]
 800945a:	9b05      	ldr	r3, [sp, #20]
 800945c:	2101      	movs	r1, #1
 800945e:	4413      	add	r3, r2
 8009460:	4630      	mov	r0, r6
 8009462:	9305      	str	r3, [sp, #20]
 8009464:	f000 fb54 	bl	8009b10 <__i2b>
 8009468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800946a:	4607      	mov	r7, r0
 800946c:	f1b8 0f00 	cmp.w	r8, #0
 8009470:	dd0d      	ble.n	800948e <_dtoa_r+0x67e>
 8009472:	9a05      	ldr	r2, [sp, #20]
 8009474:	2a00      	cmp	r2, #0
 8009476:	dd0a      	ble.n	800948e <_dtoa_r+0x67e>
 8009478:	4542      	cmp	r2, r8
 800947a:	9904      	ldr	r1, [sp, #16]
 800947c:	bfa8      	it	ge
 800947e:	4642      	movge	r2, r8
 8009480:	1a89      	subs	r1, r1, r2
 8009482:	9104      	str	r1, [sp, #16]
 8009484:	9905      	ldr	r1, [sp, #20]
 8009486:	eba8 0802 	sub.w	r8, r8, r2
 800948a:	1a8a      	subs	r2, r1, r2
 800948c:	9205      	str	r2, [sp, #20]
 800948e:	b303      	cbz	r3, 80094d2 <_dtoa_r+0x6c2>
 8009490:	9a07      	ldr	r2, [sp, #28]
 8009492:	2a00      	cmp	r2, #0
 8009494:	f000 80a5 	beq.w	80095e2 <_dtoa_r+0x7d2>
 8009498:	2c00      	cmp	r4, #0
 800949a:	dd13      	ble.n	80094c4 <_dtoa_r+0x6b4>
 800949c:	4639      	mov	r1, r7
 800949e:	4622      	mov	r2, r4
 80094a0:	4630      	mov	r0, r6
 80094a2:	930d      	str	r3, [sp, #52]	; 0x34
 80094a4:	f000 fbf4 	bl	8009c90 <__pow5mult>
 80094a8:	462a      	mov	r2, r5
 80094aa:	4601      	mov	r1, r0
 80094ac:	4607      	mov	r7, r0
 80094ae:	4630      	mov	r0, r6
 80094b0:	f000 fb44 	bl	8009b3c <__multiply>
 80094b4:	4629      	mov	r1, r5
 80094b6:	900a      	str	r0, [sp, #40]	; 0x28
 80094b8:	4630      	mov	r0, r6
 80094ba:	f000 fa71 	bl	80099a0 <_Bfree>
 80094be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094c2:	4615      	mov	r5, r2
 80094c4:	1b1a      	subs	r2, r3, r4
 80094c6:	d004      	beq.n	80094d2 <_dtoa_r+0x6c2>
 80094c8:	4629      	mov	r1, r5
 80094ca:	4630      	mov	r0, r6
 80094cc:	f000 fbe0 	bl	8009c90 <__pow5mult>
 80094d0:	4605      	mov	r5, r0
 80094d2:	2101      	movs	r1, #1
 80094d4:	4630      	mov	r0, r6
 80094d6:	f000 fb1b 	bl	8009b10 <__i2b>
 80094da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094dc:	2b00      	cmp	r3, #0
 80094de:	4604      	mov	r4, r0
 80094e0:	f340 8081 	ble.w	80095e6 <_dtoa_r+0x7d6>
 80094e4:	461a      	mov	r2, r3
 80094e6:	4601      	mov	r1, r0
 80094e8:	4630      	mov	r0, r6
 80094ea:	f000 fbd1 	bl	8009c90 <__pow5mult>
 80094ee:	9b06      	ldr	r3, [sp, #24]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	4604      	mov	r4, r0
 80094f4:	dd7a      	ble.n	80095ec <_dtoa_r+0x7dc>
 80094f6:	2300      	movs	r3, #0
 80094f8:	930a      	str	r3, [sp, #40]	; 0x28
 80094fa:	6922      	ldr	r2, [r4, #16]
 80094fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009500:	6910      	ldr	r0, [r2, #16]
 8009502:	f000 fab5 	bl	8009a70 <__hi0bits>
 8009506:	f1c0 0020 	rsb	r0, r0, #32
 800950a:	9b05      	ldr	r3, [sp, #20]
 800950c:	4418      	add	r0, r3
 800950e:	f010 001f 	ands.w	r0, r0, #31
 8009512:	f000 808c 	beq.w	800962e <_dtoa_r+0x81e>
 8009516:	f1c0 0220 	rsb	r2, r0, #32
 800951a:	2a04      	cmp	r2, #4
 800951c:	f340 8085 	ble.w	800962a <_dtoa_r+0x81a>
 8009520:	f1c0 001c 	rsb	r0, r0, #28
 8009524:	9b04      	ldr	r3, [sp, #16]
 8009526:	4403      	add	r3, r0
 8009528:	9304      	str	r3, [sp, #16]
 800952a:	9b05      	ldr	r3, [sp, #20]
 800952c:	4403      	add	r3, r0
 800952e:	4480      	add	r8, r0
 8009530:	9305      	str	r3, [sp, #20]
 8009532:	9b04      	ldr	r3, [sp, #16]
 8009534:	2b00      	cmp	r3, #0
 8009536:	dd05      	ble.n	8009544 <_dtoa_r+0x734>
 8009538:	4629      	mov	r1, r5
 800953a:	461a      	mov	r2, r3
 800953c:	4630      	mov	r0, r6
 800953e:	f000 fc01 	bl	8009d44 <__lshift>
 8009542:	4605      	mov	r5, r0
 8009544:	9b05      	ldr	r3, [sp, #20]
 8009546:	2b00      	cmp	r3, #0
 8009548:	dd05      	ble.n	8009556 <_dtoa_r+0x746>
 800954a:	4621      	mov	r1, r4
 800954c:	461a      	mov	r2, r3
 800954e:	4630      	mov	r0, r6
 8009550:	f000 fbf8 	bl	8009d44 <__lshift>
 8009554:	4604      	mov	r4, r0
 8009556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009558:	2b00      	cmp	r3, #0
 800955a:	d06a      	beq.n	8009632 <_dtoa_r+0x822>
 800955c:	4621      	mov	r1, r4
 800955e:	4628      	mov	r0, r5
 8009560:	f000 fc60 	bl	8009e24 <__mcmp>
 8009564:	2800      	cmp	r0, #0
 8009566:	da64      	bge.n	8009632 <_dtoa_r+0x822>
 8009568:	2300      	movs	r3, #0
 800956a:	4629      	mov	r1, r5
 800956c:	220a      	movs	r2, #10
 800956e:	4630      	mov	r0, r6
 8009570:	f000 fa38 	bl	80099e4 <__multadd>
 8009574:	9b07      	ldr	r3, [sp, #28]
 8009576:	f10b 3bff 	add.w	fp, fp, #4294967295
 800957a:	4605      	mov	r5, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 8191 	beq.w	80098a4 <_dtoa_r+0xa94>
 8009582:	4639      	mov	r1, r7
 8009584:	2300      	movs	r3, #0
 8009586:	220a      	movs	r2, #10
 8009588:	4630      	mov	r0, r6
 800958a:	f000 fa2b 	bl	80099e4 <__multadd>
 800958e:	f1ba 0f00 	cmp.w	sl, #0
 8009592:	4607      	mov	r7, r0
 8009594:	f300 808d 	bgt.w	80096b2 <_dtoa_r+0x8a2>
 8009598:	9b06      	ldr	r3, [sp, #24]
 800959a:	2b02      	cmp	r3, #2
 800959c:	dc50      	bgt.n	8009640 <_dtoa_r+0x830>
 800959e:	e088      	b.n	80096b2 <_dtoa_r+0x8a2>
 80095a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80095a6:	e751      	b.n	800944c <_dtoa_r+0x63c>
 80095a8:	f109 34ff 	add.w	r4, r9, #4294967295
 80095ac:	42a3      	cmp	r3, r4
 80095ae:	bfbf      	itttt	lt
 80095b0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80095b2:	1ae3      	sublt	r3, r4, r3
 80095b4:	18d2      	addlt	r2, r2, r3
 80095b6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80095b8:	bfb6      	itet	lt
 80095ba:	4623      	movlt	r3, r4
 80095bc:	1b1c      	subge	r4, r3, r4
 80095be:	2400      	movlt	r4, #0
 80095c0:	f1b9 0f00 	cmp.w	r9, #0
 80095c4:	bfb5      	itete	lt
 80095c6:	9a04      	ldrlt	r2, [sp, #16]
 80095c8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80095cc:	eba2 0809 	sublt.w	r8, r2, r9
 80095d0:	464a      	movge	r2, r9
 80095d2:	bfb8      	it	lt
 80095d4:	2200      	movlt	r2, #0
 80095d6:	e73c      	b.n	8009452 <_dtoa_r+0x642>
 80095d8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80095dc:	9f07      	ldr	r7, [sp, #28]
 80095de:	461c      	mov	r4, r3
 80095e0:	e744      	b.n	800946c <_dtoa_r+0x65c>
 80095e2:	461a      	mov	r2, r3
 80095e4:	e770      	b.n	80094c8 <_dtoa_r+0x6b8>
 80095e6:	9b06      	ldr	r3, [sp, #24]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	dc18      	bgt.n	800961e <_dtoa_r+0x80e>
 80095ec:	9b02      	ldr	r3, [sp, #8]
 80095ee:	b9b3      	cbnz	r3, 800961e <_dtoa_r+0x80e>
 80095f0:	9b03      	ldr	r3, [sp, #12]
 80095f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80095f6:	b9a2      	cbnz	r2, 8009622 <_dtoa_r+0x812>
 80095f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80095fc:	0d12      	lsrs	r2, r2, #20
 80095fe:	0512      	lsls	r2, r2, #20
 8009600:	b18a      	cbz	r2, 8009626 <_dtoa_r+0x816>
 8009602:	9b04      	ldr	r3, [sp, #16]
 8009604:	3301      	adds	r3, #1
 8009606:	9304      	str	r3, [sp, #16]
 8009608:	9b05      	ldr	r3, [sp, #20]
 800960a:	3301      	adds	r3, #1
 800960c:	9305      	str	r3, [sp, #20]
 800960e:	2301      	movs	r3, #1
 8009610:	930a      	str	r3, [sp, #40]	; 0x28
 8009612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009614:	2b00      	cmp	r3, #0
 8009616:	f47f af70 	bne.w	80094fa <_dtoa_r+0x6ea>
 800961a:	2001      	movs	r0, #1
 800961c:	e775      	b.n	800950a <_dtoa_r+0x6fa>
 800961e:	2300      	movs	r3, #0
 8009620:	e7f6      	b.n	8009610 <_dtoa_r+0x800>
 8009622:	9b02      	ldr	r3, [sp, #8]
 8009624:	e7f4      	b.n	8009610 <_dtoa_r+0x800>
 8009626:	920a      	str	r2, [sp, #40]	; 0x28
 8009628:	e7f3      	b.n	8009612 <_dtoa_r+0x802>
 800962a:	d082      	beq.n	8009532 <_dtoa_r+0x722>
 800962c:	4610      	mov	r0, r2
 800962e:	301c      	adds	r0, #28
 8009630:	e778      	b.n	8009524 <_dtoa_r+0x714>
 8009632:	f1b9 0f00 	cmp.w	r9, #0
 8009636:	dc37      	bgt.n	80096a8 <_dtoa_r+0x898>
 8009638:	9b06      	ldr	r3, [sp, #24]
 800963a:	2b02      	cmp	r3, #2
 800963c:	dd34      	ble.n	80096a8 <_dtoa_r+0x898>
 800963e:	46ca      	mov	sl, r9
 8009640:	f1ba 0f00 	cmp.w	sl, #0
 8009644:	d10d      	bne.n	8009662 <_dtoa_r+0x852>
 8009646:	4621      	mov	r1, r4
 8009648:	4653      	mov	r3, sl
 800964a:	2205      	movs	r2, #5
 800964c:	4630      	mov	r0, r6
 800964e:	f000 f9c9 	bl	80099e4 <__multadd>
 8009652:	4601      	mov	r1, r0
 8009654:	4604      	mov	r4, r0
 8009656:	4628      	mov	r0, r5
 8009658:	f000 fbe4 	bl	8009e24 <__mcmp>
 800965c:	2800      	cmp	r0, #0
 800965e:	f73f adeb 	bgt.w	8009238 <_dtoa_r+0x428>
 8009662:	9b08      	ldr	r3, [sp, #32]
 8009664:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009668:	ea6f 0b03 	mvn.w	fp, r3
 800966c:	f04f 0900 	mov.w	r9, #0
 8009670:	4621      	mov	r1, r4
 8009672:	4630      	mov	r0, r6
 8009674:	f000 f994 	bl	80099a0 <_Bfree>
 8009678:	2f00      	cmp	r7, #0
 800967a:	f43f aea8 	beq.w	80093ce <_dtoa_r+0x5be>
 800967e:	f1b9 0f00 	cmp.w	r9, #0
 8009682:	d005      	beq.n	8009690 <_dtoa_r+0x880>
 8009684:	45b9      	cmp	r9, r7
 8009686:	d003      	beq.n	8009690 <_dtoa_r+0x880>
 8009688:	4649      	mov	r1, r9
 800968a:	4630      	mov	r0, r6
 800968c:	f000 f988 	bl	80099a0 <_Bfree>
 8009690:	4639      	mov	r1, r7
 8009692:	4630      	mov	r0, r6
 8009694:	f000 f984 	bl	80099a0 <_Bfree>
 8009698:	e699      	b.n	80093ce <_dtoa_r+0x5be>
 800969a:	2400      	movs	r4, #0
 800969c:	4627      	mov	r7, r4
 800969e:	e7e0      	b.n	8009662 <_dtoa_r+0x852>
 80096a0:	46bb      	mov	fp, r7
 80096a2:	4604      	mov	r4, r0
 80096a4:	4607      	mov	r7, r0
 80096a6:	e5c7      	b.n	8009238 <_dtoa_r+0x428>
 80096a8:	9b07      	ldr	r3, [sp, #28]
 80096aa:	46ca      	mov	sl, r9
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8100 	beq.w	80098b2 <_dtoa_r+0xaa2>
 80096b2:	f1b8 0f00 	cmp.w	r8, #0
 80096b6:	dd05      	ble.n	80096c4 <_dtoa_r+0x8b4>
 80096b8:	4639      	mov	r1, r7
 80096ba:	4642      	mov	r2, r8
 80096bc:	4630      	mov	r0, r6
 80096be:	f000 fb41 	bl	8009d44 <__lshift>
 80096c2:	4607      	mov	r7, r0
 80096c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d05d      	beq.n	8009786 <_dtoa_r+0x976>
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	4630      	mov	r0, r6
 80096ce:	f000 f927 	bl	8009920 <_Balloc>
 80096d2:	4680      	mov	r8, r0
 80096d4:	b928      	cbnz	r0, 80096e2 <_dtoa_r+0x8d2>
 80096d6:	4b82      	ldr	r3, [pc, #520]	; (80098e0 <_dtoa_r+0xad0>)
 80096d8:	4602      	mov	r2, r0
 80096da:	f240 21ea 	movw	r1, #746	; 0x2ea
 80096de:	f7ff bbaf 	b.w	8008e40 <_dtoa_r+0x30>
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	3202      	adds	r2, #2
 80096e6:	0092      	lsls	r2, r2, #2
 80096e8:	f107 010c 	add.w	r1, r7, #12
 80096ec:	300c      	adds	r0, #12
 80096ee:	f000 f909 	bl	8009904 <memcpy>
 80096f2:	2201      	movs	r2, #1
 80096f4:	4641      	mov	r1, r8
 80096f6:	4630      	mov	r0, r6
 80096f8:	f000 fb24 	bl	8009d44 <__lshift>
 80096fc:	9b01      	ldr	r3, [sp, #4]
 80096fe:	3301      	adds	r3, #1
 8009700:	9304      	str	r3, [sp, #16]
 8009702:	9b01      	ldr	r3, [sp, #4]
 8009704:	4453      	add	r3, sl
 8009706:	9308      	str	r3, [sp, #32]
 8009708:	9b02      	ldr	r3, [sp, #8]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	46b9      	mov	r9, r7
 8009710:	9307      	str	r3, [sp, #28]
 8009712:	4607      	mov	r7, r0
 8009714:	9b04      	ldr	r3, [sp, #16]
 8009716:	4621      	mov	r1, r4
 8009718:	3b01      	subs	r3, #1
 800971a:	4628      	mov	r0, r5
 800971c:	9302      	str	r3, [sp, #8]
 800971e:	f7ff fae9 	bl	8008cf4 <quorem>
 8009722:	4603      	mov	r3, r0
 8009724:	3330      	adds	r3, #48	; 0x30
 8009726:	9005      	str	r0, [sp, #20]
 8009728:	4649      	mov	r1, r9
 800972a:	4628      	mov	r0, r5
 800972c:	9309      	str	r3, [sp, #36]	; 0x24
 800972e:	f000 fb79 	bl	8009e24 <__mcmp>
 8009732:	463a      	mov	r2, r7
 8009734:	4682      	mov	sl, r0
 8009736:	4621      	mov	r1, r4
 8009738:	4630      	mov	r0, r6
 800973a:	f000 fb8f 	bl	8009e5c <__mdiff>
 800973e:	68c2      	ldr	r2, [r0, #12]
 8009740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009742:	4680      	mov	r8, r0
 8009744:	bb0a      	cbnz	r2, 800978a <_dtoa_r+0x97a>
 8009746:	4601      	mov	r1, r0
 8009748:	4628      	mov	r0, r5
 800974a:	f000 fb6b 	bl	8009e24 <__mcmp>
 800974e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009750:	4602      	mov	r2, r0
 8009752:	4641      	mov	r1, r8
 8009754:	4630      	mov	r0, r6
 8009756:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800975a:	f000 f921 	bl	80099a0 <_Bfree>
 800975e:	9b06      	ldr	r3, [sp, #24]
 8009760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009762:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009766:	ea43 0102 	orr.w	r1, r3, r2
 800976a:	9b07      	ldr	r3, [sp, #28]
 800976c:	430b      	orrs	r3, r1
 800976e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009770:	d10d      	bne.n	800978e <_dtoa_r+0x97e>
 8009772:	2b39      	cmp	r3, #57	; 0x39
 8009774:	d029      	beq.n	80097ca <_dtoa_r+0x9ba>
 8009776:	f1ba 0f00 	cmp.w	sl, #0
 800977a:	dd01      	ble.n	8009780 <_dtoa_r+0x970>
 800977c:	9b05      	ldr	r3, [sp, #20]
 800977e:	3331      	adds	r3, #49	; 0x31
 8009780:	9a02      	ldr	r2, [sp, #8]
 8009782:	7013      	strb	r3, [r2, #0]
 8009784:	e774      	b.n	8009670 <_dtoa_r+0x860>
 8009786:	4638      	mov	r0, r7
 8009788:	e7b8      	b.n	80096fc <_dtoa_r+0x8ec>
 800978a:	2201      	movs	r2, #1
 800978c:	e7e1      	b.n	8009752 <_dtoa_r+0x942>
 800978e:	f1ba 0f00 	cmp.w	sl, #0
 8009792:	db06      	blt.n	80097a2 <_dtoa_r+0x992>
 8009794:	9906      	ldr	r1, [sp, #24]
 8009796:	ea41 0a0a 	orr.w	sl, r1, sl
 800979a:	9907      	ldr	r1, [sp, #28]
 800979c:	ea5a 0101 	orrs.w	r1, sl, r1
 80097a0:	d120      	bne.n	80097e4 <_dtoa_r+0x9d4>
 80097a2:	2a00      	cmp	r2, #0
 80097a4:	ddec      	ble.n	8009780 <_dtoa_r+0x970>
 80097a6:	4629      	mov	r1, r5
 80097a8:	2201      	movs	r2, #1
 80097aa:	4630      	mov	r0, r6
 80097ac:	9304      	str	r3, [sp, #16]
 80097ae:	f000 fac9 	bl	8009d44 <__lshift>
 80097b2:	4621      	mov	r1, r4
 80097b4:	4605      	mov	r5, r0
 80097b6:	f000 fb35 	bl	8009e24 <__mcmp>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	9b04      	ldr	r3, [sp, #16]
 80097be:	dc02      	bgt.n	80097c6 <_dtoa_r+0x9b6>
 80097c0:	d1de      	bne.n	8009780 <_dtoa_r+0x970>
 80097c2:	07da      	lsls	r2, r3, #31
 80097c4:	d5dc      	bpl.n	8009780 <_dtoa_r+0x970>
 80097c6:	2b39      	cmp	r3, #57	; 0x39
 80097c8:	d1d8      	bne.n	800977c <_dtoa_r+0x96c>
 80097ca:	9a02      	ldr	r2, [sp, #8]
 80097cc:	2339      	movs	r3, #57	; 0x39
 80097ce:	7013      	strb	r3, [r2, #0]
 80097d0:	4643      	mov	r3, r8
 80097d2:	4698      	mov	r8, r3
 80097d4:	3b01      	subs	r3, #1
 80097d6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80097da:	2a39      	cmp	r2, #57	; 0x39
 80097dc:	d051      	beq.n	8009882 <_dtoa_r+0xa72>
 80097de:	3201      	adds	r2, #1
 80097e0:	701a      	strb	r2, [r3, #0]
 80097e2:	e745      	b.n	8009670 <_dtoa_r+0x860>
 80097e4:	2a00      	cmp	r2, #0
 80097e6:	dd03      	ble.n	80097f0 <_dtoa_r+0x9e0>
 80097e8:	2b39      	cmp	r3, #57	; 0x39
 80097ea:	d0ee      	beq.n	80097ca <_dtoa_r+0x9ba>
 80097ec:	3301      	adds	r3, #1
 80097ee:	e7c7      	b.n	8009780 <_dtoa_r+0x970>
 80097f0:	9a04      	ldr	r2, [sp, #16]
 80097f2:	9908      	ldr	r1, [sp, #32]
 80097f4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80097f8:	428a      	cmp	r2, r1
 80097fa:	d02b      	beq.n	8009854 <_dtoa_r+0xa44>
 80097fc:	4629      	mov	r1, r5
 80097fe:	2300      	movs	r3, #0
 8009800:	220a      	movs	r2, #10
 8009802:	4630      	mov	r0, r6
 8009804:	f000 f8ee 	bl	80099e4 <__multadd>
 8009808:	45b9      	cmp	r9, r7
 800980a:	4605      	mov	r5, r0
 800980c:	f04f 0300 	mov.w	r3, #0
 8009810:	f04f 020a 	mov.w	r2, #10
 8009814:	4649      	mov	r1, r9
 8009816:	4630      	mov	r0, r6
 8009818:	d107      	bne.n	800982a <_dtoa_r+0xa1a>
 800981a:	f000 f8e3 	bl	80099e4 <__multadd>
 800981e:	4681      	mov	r9, r0
 8009820:	4607      	mov	r7, r0
 8009822:	9b04      	ldr	r3, [sp, #16]
 8009824:	3301      	adds	r3, #1
 8009826:	9304      	str	r3, [sp, #16]
 8009828:	e774      	b.n	8009714 <_dtoa_r+0x904>
 800982a:	f000 f8db 	bl	80099e4 <__multadd>
 800982e:	4639      	mov	r1, r7
 8009830:	4681      	mov	r9, r0
 8009832:	2300      	movs	r3, #0
 8009834:	220a      	movs	r2, #10
 8009836:	4630      	mov	r0, r6
 8009838:	f000 f8d4 	bl	80099e4 <__multadd>
 800983c:	4607      	mov	r7, r0
 800983e:	e7f0      	b.n	8009822 <_dtoa_r+0xa12>
 8009840:	f1ba 0f00 	cmp.w	sl, #0
 8009844:	9a01      	ldr	r2, [sp, #4]
 8009846:	bfcc      	ite	gt
 8009848:	46d0      	movgt	r8, sl
 800984a:	f04f 0801 	movle.w	r8, #1
 800984e:	4490      	add	r8, r2
 8009850:	f04f 0900 	mov.w	r9, #0
 8009854:	4629      	mov	r1, r5
 8009856:	2201      	movs	r2, #1
 8009858:	4630      	mov	r0, r6
 800985a:	9302      	str	r3, [sp, #8]
 800985c:	f000 fa72 	bl	8009d44 <__lshift>
 8009860:	4621      	mov	r1, r4
 8009862:	4605      	mov	r5, r0
 8009864:	f000 fade 	bl	8009e24 <__mcmp>
 8009868:	2800      	cmp	r0, #0
 800986a:	dcb1      	bgt.n	80097d0 <_dtoa_r+0x9c0>
 800986c:	d102      	bne.n	8009874 <_dtoa_r+0xa64>
 800986e:	9b02      	ldr	r3, [sp, #8]
 8009870:	07db      	lsls	r3, r3, #31
 8009872:	d4ad      	bmi.n	80097d0 <_dtoa_r+0x9c0>
 8009874:	4643      	mov	r3, r8
 8009876:	4698      	mov	r8, r3
 8009878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800987c:	2a30      	cmp	r2, #48	; 0x30
 800987e:	d0fa      	beq.n	8009876 <_dtoa_r+0xa66>
 8009880:	e6f6      	b.n	8009670 <_dtoa_r+0x860>
 8009882:	9a01      	ldr	r2, [sp, #4]
 8009884:	429a      	cmp	r2, r3
 8009886:	d1a4      	bne.n	80097d2 <_dtoa_r+0x9c2>
 8009888:	f10b 0b01 	add.w	fp, fp, #1
 800988c:	2331      	movs	r3, #49	; 0x31
 800988e:	e778      	b.n	8009782 <_dtoa_r+0x972>
 8009890:	4b14      	ldr	r3, [pc, #80]	; (80098e4 <_dtoa_r+0xad4>)
 8009892:	f7ff bb27 	b.w	8008ee4 <_dtoa_r+0xd4>
 8009896:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009898:	2b00      	cmp	r3, #0
 800989a:	f47f ab03 	bne.w	8008ea4 <_dtoa_r+0x94>
 800989e:	4b12      	ldr	r3, [pc, #72]	; (80098e8 <_dtoa_r+0xad8>)
 80098a0:	f7ff bb20 	b.w	8008ee4 <_dtoa_r+0xd4>
 80098a4:	f1ba 0f00 	cmp.w	sl, #0
 80098a8:	dc03      	bgt.n	80098b2 <_dtoa_r+0xaa2>
 80098aa:	9b06      	ldr	r3, [sp, #24]
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	f73f aec7 	bgt.w	8009640 <_dtoa_r+0x830>
 80098b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80098b6:	4621      	mov	r1, r4
 80098b8:	4628      	mov	r0, r5
 80098ba:	f7ff fa1b 	bl	8008cf4 <quorem>
 80098be:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80098c2:	f808 3b01 	strb.w	r3, [r8], #1
 80098c6:	9a01      	ldr	r2, [sp, #4]
 80098c8:	eba8 0202 	sub.w	r2, r8, r2
 80098cc:	4592      	cmp	sl, r2
 80098ce:	ddb7      	ble.n	8009840 <_dtoa_r+0xa30>
 80098d0:	4629      	mov	r1, r5
 80098d2:	2300      	movs	r3, #0
 80098d4:	220a      	movs	r2, #10
 80098d6:	4630      	mov	r0, r6
 80098d8:	f000 f884 	bl	80099e4 <__multadd>
 80098dc:	4605      	mov	r5, r0
 80098de:	e7ea      	b.n	80098b6 <_dtoa_r+0xaa6>
 80098e0:	0800b2b3 	.word	0x0800b2b3
 80098e4:	0800b210 	.word	0x0800b210
 80098e8:	0800b234 	.word	0x0800b234

080098ec <_localeconv_r>:
 80098ec:	4800      	ldr	r0, [pc, #0]	; (80098f0 <_localeconv_r+0x4>)
 80098ee:	4770      	bx	lr
 80098f0:	24000168 	.word	0x24000168

080098f4 <malloc>:
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <malloc+0xc>)
 80098f6:	4601      	mov	r1, r0
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	f000 bc17 	b.w	800a12c <_malloc_r>
 80098fe:	bf00      	nop
 8009900:	24000014 	.word	0x24000014

08009904 <memcpy>:
 8009904:	440a      	add	r2, r1
 8009906:	4291      	cmp	r1, r2
 8009908:	f100 33ff 	add.w	r3, r0, #4294967295
 800990c:	d100      	bne.n	8009910 <memcpy+0xc>
 800990e:	4770      	bx	lr
 8009910:	b510      	push	{r4, lr}
 8009912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800991a:	4291      	cmp	r1, r2
 800991c:	d1f9      	bne.n	8009912 <memcpy+0xe>
 800991e:	bd10      	pop	{r4, pc}

08009920 <_Balloc>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009924:	4604      	mov	r4, r0
 8009926:	460d      	mov	r5, r1
 8009928:	b976      	cbnz	r6, 8009948 <_Balloc+0x28>
 800992a:	2010      	movs	r0, #16
 800992c:	f7ff ffe2 	bl	80098f4 <malloc>
 8009930:	4602      	mov	r2, r0
 8009932:	6260      	str	r0, [r4, #36]	; 0x24
 8009934:	b920      	cbnz	r0, 8009940 <_Balloc+0x20>
 8009936:	4b18      	ldr	r3, [pc, #96]	; (8009998 <_Balloc+0x78>)
 8009938:	4818      	ldr	r0, [pc, #96]	; (800999c <_Balloc+0x7c>)
 800993a:	2166      	movs	r1, #102	; 0x66
 800993c:	f000 fdd6 	bl	800a4ec <__assert_func>
 8009940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009944:	6006      	str	r6, [r0, #0]
 8009946:	60c6      	str	r6, [r0, #12]
 8009948:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800994a:	68f3      	ldr	r3, [r6, #12]
 800994c:	b183      	cbz	r3, 8009970 <_Balloc+0x50>
 800994e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009956:	b9b8      	cbnz	r0, 8009988 <_Balloc+0x68>
 8009958:	2101      	movs	r1, #1
 800995a:	fa01 f605 	lsl.w	r6, r1, r5
 800995e:	1d72      	adds	r2, r6, #5
 8009960:	0092      	lsls	r2, r2, #2
 8009962:	4620      	mov	r0, r4
 8009964:	f000 fb60 	bl	800a028 <_calloc_r>
 8009968:	b160      	cbz	r0, 8009984 <_Balloc+0x64>
 800996a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800996e:	e00e      	b.n	800998e <_Balloc+0x6e>
 8009970:	2221      	movs	r2, #33	; 0x21
 8009972:	2104      	movs	r1, #4
 8009974:	4620      	mov	r0, r4
 8009976:	f000 fb57 	bl	800a028 <_calloc_r>
 800997a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800997c:	60f0      	str	r0, [r6, #12]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e4      	bne.n	800994e <_Balloc+0x2e>
 8009984:	2000      	movs	r0, #0
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	6802      	ldr	r2, [r0, #0]
 800998a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800998e:	2300      	movs	r3, #0
 8009990:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009994:	e7f7      	b.n	8009986 <_Balloc+0x66>
 8009996:	bf00      	nop
 8009998:	0800b241 	.word	0x0800b241
 800999c:	0800b2c4 	.word	0x0800b2c4

080099a0 <_Bfree>:
 80099a0:	b570      	push	{r4, r5, r6, lr}
 80099a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099a4:	4605      	mov	r5, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	b976      	cbnz	r6, 80099c8 <_Bfree+0x28>
 80099aa:	2010      	movs	r0, #16
 80099ac:	f7ff ffa2 	bl	80098f4 <malloc>
 80099b0:	4602      	mov	r2, r0
 80099b2:	6268      	str	r0, [r5, #36]	; 0x24
 80099b4:	b920      	cbnz	r0, 80099c0 <_Bfree+0x20>
 80099b6:	4b09      	ldr	r3, [pc, #36]	; (80099dc <_Bfree+0x3c>)
 80099b8:	4809      	ldr	r0, [pc, #36]	; (80099e0 <_Bfree+0x40>)
 80099ba:	218a      	movs	r1, #138	; 0x8a
 80099bc:	f000 fd96 	bl	800a4ec <__assert_func>
 80099c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099c4:	6006      	str	r6, [r0, #0]
 80099c6:	60c6      	str	r6, [r0, #12]
 80099c8:	b13c      	cbz	r4, 80099da <_Bfree+0x3a>
 80099ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80099cc:	6862      	ldr	r2, [r4, #4]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099d4:	6021      	str	r1, [r4, #0]
 80099d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	0800b241 	.word	0x0800b241
 80099e0:	0800b2c4 	.word	0x0800b2c4

080099e4 <__multadd>:
 80099e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e8:	690d      	ldr	r5, [r1, #16]
 80099ea:	4607      	mov	r7, r0
 80099ec:	460c      	mov	r4, r1
 80099ee:	461e      	mov	r6, r3
 80099f0:	f101 0c14 	add.w	ip, r1, #20
 80099f4:	2000      	movs	r0, #0
 80099f6:	f8dc 3000 	ldr.w	r3, [ip]
 80099fa:	b299      	uxth	r1, r3
 80099fc:	fb02 6101 	mla	r1, r2, r1, r6
 8009a00:	0c1e      	lsrs	r6, r3, #16
 8009a02:	0c0b      	lsrs	r3, r1, #16
 8009a04:	fb02 3306 	mla	r3, r2, r6, r3
 8009a08:	b289      	uxth	r1, r1
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a10:	4285      	cmp	r5, r0
 8009a12:	f84c 1b04 	str.w	r1, [ip], #4
 8009a16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a1a:	dcec      	bgt.n	80099f6 <__multadd+0x12>
 8009a1c:	b30e      	cbz	r6, 8009a62 <__multadd+0x7e>
 8009a1e:	68a3      	ldr	r3, [r4, #8]
 8009a20:	42ab      	cmp	r3, r5
 8009a22:	dc19      	bgt.n	8009a58 <__multadd+0x74>
 8009a24:	6861      	ldr	r1, [r4, #4]
 8009a26:	4638      	mov	r0, r7
 8009a28:	3101      	adds	r1, #1
 8009a2a:	f7ff ff79 	bl	8009920 <_Balloc>
 8009a2e:	4680      	mov	r8, r0
 8009a30:	b928      	cbnz	r0, 8009a3e <__multadd+0x5a>
 8009a32:	4602      	mov	r2, r0
 8009a34:	4b0c      	ldr	r3, [pc, #48]	; (8009a68 <__multadd+0x84>)
 8009a36:	480d      	ldr	r0, [pc, #52]	; (8009a6c <__multadd+0x88>)
 8009a38:	21b5      	movs	r1, #181	; 0xb5
 8009a3a:	f000 fd57 	bl	800a4ec <__assert_func>
 8009a3e:	6922      	ldr	r2, [r4, #16]
 8009a40:	3202      	adds	r2, #2
 8009a42:	f104 010c 	add.w	r1, r4, #12
 8009a46:	0092      	lsls	r2, r2, #2
 8009a48:	300c      	adds	r0, #12
 8009a4a:	f7ff ff5b 	bl	8009904 <memcpy>
 8009a4e:	4621      	mov	r1, r4
 8009a50:	4638      	mov	r0, r7
 8009a52:	f7ff ffa5 	bl	80099a0 <_Bfree>
 8009a56:	4644      	mov	r4, r8
 8009a58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a5c:	3501      	adds	r5, #1
 8009a5e:	615e      	str	r6, [r3, #20]
 8009a60:	6125      	str	r5, [r4, #16]
 8009a62:	4620      	mov	r0, r4
 8009a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a68:	0800b2b3 	.word	0x0800b2b3
 8009a6c:	0800b2c4 	.word	0x0800b2c4

08009a70 <__hi0bits>:
 8009a70:	0c03      	lsrs	r3, r0, #16
 8009a72:	041b      	lsls	r3, r3, #16
 8009a74:	b9d3      	cbnz	r3, 8009aac <__hi0bits+0x3c>
 8009a76:	0400      	lsls	r0, r0, #16
 8009a78:	2310      	movs	r3, #16
 8009a7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a7e:	bf04      	itt	eq
 8009a80:	0200      	lsleq	r0, r0, #8
 8009a82:	3308      	addeq	r3, #8
 8009a84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a88:	bf04      	itt	eq
 8009a8a:	0100      	lsleq	r0, r0, #4
 8009a8c:	3304      	addeq	r3, #4
 8009a8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a92:	bf04      	itt	eq
 8009a94:	0080      	lsleq	r0, r0, #2
 8009a96:	3302      	addeq	r3, #2
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	db05      	blt.n	8009aa8 <__hi0bits+0x38>
 8009a9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009aa0:	f103 0301 	add.w	r3, r3, #1
 8009aa4:	bf08      	it	eq
 8009aa6:	2320      	moveq	r3, #32
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	4770      	bx	lr
 8009aac:	2300      	movs	r3, #0
 8009aae:	e7e4      	b.n	8009a7a <__hi0bits+0xa>

08009ab0 <__lo0bits>:
 8009ab0:	6803      	ldr	r3, [r0, #0]
 8009ab2:	f013 0207 	ands.w	r2, r3, #7
 8009ab6:	4601      	mov	r1, r0
 8009ab8:	d00b      	beq.n	8009ad2 <__lo0bits+0x22>
 8009aba:	07da      	lsls	r2, r3, #31
 8009abc:	d423      	bmi.n	8009b06 <__lo0bits+0x56>
 8009abe:	0798      	lsls	r0, r3, #30
 8009ac0:	bf49      	itett	mi
 8009ac2:	085b      	lsrmi	r3, r3, #1
 8009ac4:	089b      	lsrpl	r3, r3, #2
 8009ac6:	2001      	movmi	r0, #1
 8009ac8:	600b      	strmi	r3, [r1, #0]
 8009aca:	bf5c      	itt	pl
 8009acc:	600b      	strpl	r3, [r1, #0]
 8009ace:	2002      	movpl	r0, #2
 8009ad0:	4770      	bx	lr
 8009ad2:	b298      	uxth	r0, r3
 8009ad4:	b9a8      	cbnz	r0, 8009b02 <__lo0bits+0x52>
 8009ad6:	0c1b      	lsrs	r3, r3, #16
 8009ad8:	2010      	movs	r0, #16
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	b90a      	cbnz	r2, 8009ae2 <__lo0bits+0x32>
 8009ade:	3008      	adds	r0, #8
 8009ae0:	0a1b      	lsrs	r3, r3, #8
 8009ae2:	071a      	lsls	r2, r3, #28
 8009ae4:	bf04      	itt	eq
 8009ae6:	091b      	lsreq	r3, r3, #4
 8009ae8:	3004      	addeq	r0, #4
 8009aea:	079a      	lsls	r2, r3, #30
 8009aec:	bf04      	itt	eq
 8009aee:	089b      	lsreq	r3, r3, #2
 8009af0:	3002      	addeq	r0, #2
 8009af2:	07da      	lsls	r2, r3, #31
 8009af4:	d403      	bmi.n	8009afe <__lo0bits+0x4e>
 8009af6:	085b      	lsrs	r3, r3, #1
 8009af8:	f100 0001 	add.w	r0, r0, #1
 8009afc:	d005      	beq.n	8009b0a <__lo0bits+0x5a>
 8009afe:	600b      	str	r3, [r1, #0]
 8009b00:	4770      	bx	lr
 8009b02:	4610      	mov	r0, r2
 8009b04:	e7e9      	b.n	8009ada <__lo0bits+0x2a>
 8009b06:	2000      	movs	r0, #0
 8009b08:	4770      	bx	lr
 8009b0a:	2020      	movs	r0, #32
 8009b0c:	4770      	bx	lr
	...

08009b10 <__i2b>:
 8009b10:	b510      	push	{r4, lr}
 8009b12:	460c      	mov	r4, r1
 8009b14:	2101      	movs	r1, #1
 8009b16:	f7ff ff03 	bl	8009920 <_Balloc>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	b928      	cbnz	r0, 8009b2a <__i2b+0x1a>
 8009b1e:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <__i2b+0x24>)
 8009b20:	4805      	ldr	r0, [pc, #20]	; (8009b38 <__i2b+0x28>)
 8009b22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b26:	f000 fce1 	bl	800a4ec <__assert_func>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	6144      	str	r4, [r0, #20]
 8009b2e:	6103      	str	r3, [r0, #16]
 8009b30:	bd10      	pop	{r4, pc}
 8009b32:	bf00      	nop
 8009b34:	0800b2b3 	.word	0x0800b2b3
 8009b38:	0800b2c4 	.word	0x0800b2c4

08009b3c <__multiply>:
 8009b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b40:	4691      	mov	r9, r2
 8009b42:	690a      	ldr	r2, [r1, #16]
 8009b44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	bfb8      	it	lt
 8009b4c:	460b      	movlt	r3, r1
 8009b4e:	460c      	mov	r4, r1
 8009b50:	bfbc      	itt	lt
 8009b52:	464c      	movlt	r4, r9
 8009b54:	4699      	movlt	r9, r3
 8009b56:	6927      	ldr	r7, [r4, #16]
 8009b58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b5c:	68a3      	ldr	r3, [r4, #8]
 8009b5e:	6861      	ldr	r1, [r4, #4]
 8009b60:	eb07 060a 	add.w	r6, r7, sl
 8009b64:	42b3      	cmp	r3, r6
 8009b66:	b085      	sub	sp, #20
 8009b68:	bfb8      	it	lt
 8009b6a:	3101      	addlt	r1, #1
 8009b6c:	f7ff fed8 	bl	8009920 <_Balloc>
 8009b70:	b930      	cbnz	r0, 8009b80 <__multiply+0x44>
 8009b72:	4602      	mov	r2, r0
 8009b74:	4b44      	ldr	r3, [pc, #272]	; (8009c88 <__multiply+0x14c>)
 8009b76:	4845      	ldr	r0, [pc, #276]	; (8009c8c <__multiply+0x150>)
 8009b78:	f240 115d 	movw	r1, #349	; 0x15d
 8009b7c:	f000 fcb6 	bl	800a4ec <__assert_func>
 8009b80:	f100 0514 	add.w	r5, r0, #20
 8009b84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b88:	462b      	mov	r3, r5
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	4543      	cmp	r3, r8
 8009b8e:	d321      	bcc.n	8009bd4 <__multiply+0x98>
 8009b90:	f104 0314 	add.w	r3, r4, #20
 8009b94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b98:	f109 0314 	add.w	r3, r9, #20
 8009b9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ba0:	9202      	str	r2, [sp, #8]
 8009ba2:	1b3a      	subs	r2, r7, r4
 8009ba4:	3a15      	subs	r2, #21
 8009ba6:	f022 0203 	bic.w	r2, r2, #3
 8009baa:	3204      	adds	r2, #4
 8009bac:	f104 0115 	add.w	r1, r4, #21
 8009bb0:	428f      	cmp	r7, r1
 8009bb2:	bf38      	it	cc
 8009bb4:	2204      	movcc	r2, #4
 8009bb6:	9201      	str	r2, [sp, #4]
 8009bb8:	9a02      	ldr	r2, [sp, #8]
 8009bba:	9303      	str	r3, [sp, #12]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d80c      	bhi.n	8009bda <__multiply+0x9e>
 8009bc0:	2e00      	cmp	r6, #0
 8009bc2:	dd03      	ble.n	8009bcc <__multiply+0x90>
 8009bc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d05a      	beq.n	8009c82 <__multiply+0x146>
 8009bcc:	6106      	str	r6, [r0, #16]
 8009bce:	b005      	add	sp, #20
 8009bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd4:	f843 2b04 	str.w	r2, [r3], #4
 8009bd8:	e7d8      	b.n	8009b8c <__multiply+0x50>
 8009bda:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bde:	f1ba 0f00 	cmp.w	sl, #0
 8009be2:	d024      	beq.n	8009c2e <__multiply+0xf2>
 8009be4:	f104 0e14 	add.w	lr, r4, #20
 8009be8:	46a9      	mov	r9, r5
 8009bea:	f04f 0c00 	mov.w	ip, #0
 8009bee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009bf2:	f8d9 1000 	ldr.w	r1, [r9]
 8009bf6:	fa1f fb82 	uxth.w	fp, r2
 8009bfa:	b289      	uxth	r1, r1
 8009bfc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c04:	f8d9 2000 	ldr.w	r2, [r9]
 8009c08:	4461      	add	r1, ip
 8009c0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c16:	b289      	uxth	r1, r1
 8009c18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c1c:	4577      	cmp	r7, lr
 8009c1e:	f849 1b04 	str.w	r1, [r9], #4
 8009c22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c26:	d8e2      	bhi.n	8009bee <__multiply+0xb2>
 8009c28:	9a01      	ldr	r2, [sp, #4]
 8009c2a:	f845 c002 	str.w	ip, [r5, r2]
 8009c2e:	9a03      	ldr	r2, [sp, #12]
 8009c30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c34:	3304      	adds	r3, #4
 8009c36:	f1b9 0f00 	cmp.w	r9, #0
 8009c3a:	d020      	beq.n	8009c7e <__multiply+0x142>
 8009c3c:	6829      	ldr	r1, [r5, #0]
 8009c3e:	f104 0c14 	add.w	ip, r4, #20
 8009c42:	46ae      	mov	lr, r5
 8009c44:	f04f 0a00 	mov.w	sl, #0
 8009c48:	f8bc b000 	ldrh.w	fp, [ip]
 8009c4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c50:	fb09 220b 	mla	r2, r9, fp, r2
 8009c54:	4492      	add	sl, r2
 8009c56:	b289      	uxth	r1, r1
 8009c58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009c5c:	f84e 1b04 	str.w	r1, [lr], #4
 8009c60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009c64:	f8be 1000 	ldrh.w	r1, [lr]
 8009c68:	0c12      	lsrs	r2, r2, #16
 8009c6a:	fb09 1102 	mla	r1, r9, r2, r1
 8009c6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009c72:	4567      	cmp	r7, ip
 8009c74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c78:	d8e6      	bhi.n	8009c48 <__multiply+0x10c>
 8009c7a:	9a01      	ldr	r2, [sp, #4]
 8009c7c:	50a9      	str	r1, [r5, r2]
 8009c7e:	3504      	adds	r5, #4
 8009c80:	e79a      	b.n	8009bb8 <__multiply+0x7c>
 8009c82:	3e01      	subs	r6, #1
 8009c84:	e79c      	b.n	8009bc0 <__multiply+0x84>
 8009c86:	bf00      	nop
 8009c88:	0800b2b3 	.word	0x0800b2b3
 8009c8c:	0800b2c4 	.word	0x0800b2c4

08009c90 <__pow5mult>:
 8009c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c94:	4615      	mov	r5, r2
 8009c96:	f012 0203 	ands.w	r2, r2, #3
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	460f      	mov	r7, r1
 8009c9e:	d007      	beq.n	8009cb0 <__pow5mult+0x20>
 8009ca0:	4c25      	ldr	r4, [pc, #148]	; (8009d38 <__pow5mult+0xa8>)
 8009ca2:	3a01      	subs	r2, #1
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009caa:	f7ff fe9b 	bl	80099e4 <__multadd>
 8009cae:	4607      	mov	r7, r0
 8009cb0:	10ad      	asrs	r5, r5, #2
 8009cb2:	d03d      	beq.n	8009d30 <__pow5mult+0xa0>
 8009cb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009cb6:	b97c      	cbnz	r4, 8009cd8 <__pow5mult+0x48>
 8009cb8:	2010      	movs	r0, #16
 8009cba:	f7ff fe1b 	bl	80098f4 <malloc>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	6270      	str	r0, [r6, #36]	; 0x24
 8009cc2:	b928      	cbnz	r0, 8009cd0 <__pow5mult+0x40>
 8009cc4:	4b1d      	ldr	r3, [pc, #116]	; (8009d3c <__pow5mult+0xac>)
 8009cc6:	481e      	ldr	r0, [pc, #120]	; (8009d40 <__pow5mult+0xb0>)
 8009cc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ccc:	f000 fc0e 	bl	800a4ec <__assert_func>
 8009cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cd4:	6004      	str	r4, [r0, #0]
 8009cd6:	60c4      	str	r4, [r0, #12]
 8009cd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009cdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ce0:	b94c      	cbnz	r4, 8009cf6 <__pow5mult+0x66>
 8009ce2:	f240 2171 	movw	r1, #625	; 0x271
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f7ff ff12 	bl	8009b10 <__i2b>
 8009cec:	2300      	movs	r3, #0
 8009cee:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	6003      	str	r3, [r0, #0]
 8009cf6:	f04f 0900 	mov.w	r9, #0
 8009cfa:	07eb      	lsls	r3, r5, #31
 8009cfc:	d50a      	bpl.n	8009d14 <__pow5mult+0x84>
 8009cfe:	4639      	mov	r1, r7
 8009d00:	4622      	mov	r2, r4
 8009d02:	4630      	mov	r0, r6
 8009d04:	f7ff ff1a 	bl	8009b3c <__multiply>
 8009d08:	4639      	mov	r1, r7
 8009d0a:	4680      	mov	r8, r0
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	f7ff fe47 	bl	80099a0 <_Bfree>
 8009d12:	4647      	mov	r7, r8
 8009d14:	106d      	asrs	r5, r5, #1
 8009d16:	d00b      	beq.n	8009d30 <__pow5mult+0xa0>
 8009d18:	6820      	ldr	r0, [r4, #0]
 8009d1a:	b938      	cbnz	r0, 8009d2c <__pow5mult+0x9c>
 8009d1c:	4622      	mov	r2, r4
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4630      	mov	r0, r6
 8009d22:	f7ff ff0b 	bl	8009b3c <__multiply>
 8009d26:	6020      	str	r0, [r4, #0]
 8009d28:	f8c0 9000 	str.w	r9, [r0]
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	e7e4      	b.n	8009cfa <__pow5mult+0x6a>
 8009d30:	4638      	mov	r0, r7
 8009d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d36:	bf00      	nop
 8009d38:	0800b410 	.word	0x0800b410
 8009d3c:	0800b241 	.word	0x0800b241
 8009d40:	0800b2c4 	.word	0x0800b2c4

08009d44 <__lshift>:
 8009d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d48:	460c      	mov	r4, r1
 8009d4a:	6849      	ldr	r1, [r1, #4]
 8009d4c:	6923      	ldr	r3, [r4, #16]
 8009d4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d52:	68a3      	ldr	r3, [r4, #8]
 8009d54:	4607      	mov	r7, r0
 8009d56:	4691      	mov	r9, r2
 8009d58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d5c:	f108 0601 	add.w	r6, r8, #1
 8009d60:	42b3      	cmp	r3, r6
 8009d62:	db0b      	blt.n	8009d7c <__lshift+0x38>
 8009d64:	4638      	mov	r0, r7
 8009d66:	f7ff fddb 	bl	8009920 <_Balloc>
 8009d6a:	4605      	mov	r5, r0
 8009d6c:	b948      	cbnz	r0, 8009d82 <__lshift+0x3e>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	4b2a      	ldr	r3, [pc, #168]	; (8009e1c <__lshift+0xd8>)
 8009d72:	482b      	ldr	r0, [pc, #172]	; (8009e20 <__lshift+0xdc>)
 8009d74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d78:	f000 fbb8 	bl	800a4ec <__assert_func>
 8009d7c:	3101      	adds	r1, #1
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	e7ee      	b.n	8009d60 <__lshift+0x1c>
 8009d82:	2300      	movs	r3, #0
 8009d84:	f100 0114 	add.w	r1, r0, #20
 8009d88:	f100 0210 	add.w	r2, r0, #16
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	4553      	cmp	r3, sl
 8009d90:	db37      	blt.n	8009e02 <__lshift+0xbe>
 8009d92:	6920      	ldr	r0, [r4, #16]
 8009d94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d98:	f104 0314 	add.w	r3, r4, #20
 8009d9c:	f019 091f 	ands.w	r9, r9, #31
 8009da0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009da4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009da8:	d02f      	beq.n	8009e0a <__lshift+0xc6>
 8009daa:	f1c9 0e20 	rsb	lr, r9, #32
 8009dae:	468a      	mov	sl, r1
 8009db0:	f04f 0c00 	mov.w	ip, #0
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	fa02 f209 	lsl.w	r2, r2, r9
 8009dba:	ea42 020c 	orr.w	r2, r2, ip
 8009dbe:	f84a 2b04 	str.w	r2, [sl], #4
 8009dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dc6:	4298      	cmp	r0, r3
 8009dc8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009dcc:	d8f2      	bhi.n	8009db4 <__lshift+0x70>
 8009dce:	1b03      	subs	r3, r0, r4
 8009dd0:	3b15      	subs	r3, #21
 8009dd2:	f023 0303 	bic.w	r3, r3, #3
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	f104 0215 	add.w	r2, r4, #21
 8009ddc:	4290      	cmp	r0, r2
 8009dde:	bf38      	it	cc
 8009de0:	2304      	movcc	r3, #4
 8009de2:	f841 c003 	str.w	ip, [r1, r3]
 8009de6:	f1bc 0f00 	cmp.w	ip, #0
 8009dea:	d001      	beq.n	8009df0 <__lshift+0xac>
 8009dec:	f108 0602 	add.w	r6, r8, #2
 8009df0:	3e01      	subs	r6, #1
 8009df2:	4638      	mov	r0, r7
 8009df4:	612e      	str	r6, [r5, #16]
 8009df6:	4621      	mov	r1, r4
 8009df8:	f7ff fdd2 	bl	80099a0 <_Bfree>
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e02:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e06:	3301      	adds	r3, #1
 8009e08:	e7c1      	b.n	8009d8e <__lshift+0x4a>
 8009e0a:	3904      	subs	r1, #4
 8009e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e10:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e14:	4298      	cmp	r0, r3
 8009e16:	d8f9      	bhi.n	8009e0c <__lshift+0xc8>
 8009e18:	e7ea      	b.n	8009df0 <__lshift+0xac>
 8009e1a:	bf00      	nop
 8009e1c:	0800b2b3 	.word	0x0800b2b3
 8009e20:	0800b2c4 	.word	0x0800b2c4

08009e24 <__mcmp>:
 8009e24:	b530      	push	{r4, r5, lr}
 8009e26:	6902      	ldr	r2, [r0, #16]
 8009e28:	690c      	ldr	r4, [r1, #16]
 8009e2a:	1b12      	subs	r2, r2, r4
 8009e2c:	d10e      	bne.n	8009e4c <__mcmp+0x28>
 8009e2e:	f100 0314 	add.w	r3, r0, #20
 8009e32:	3114      	adds	r1, #20
 8009e34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e44:	42a5      	cmp	r5, r4
 8009e46:	d003      	beq.n	8009e50 <__mcmp+0x2c>
 8009e48:	d305      	bcc.n	8009e56 <__mcmp+0x32>
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	bd30      	pop	{r4, r5, pc}
 8009e50:	4283      	cmp	r3, r0
 8009e52:	d3f3      	bcc.n	8009e3c <__mcmp+0x18>
 8009e54:	e7fa      	b.n	8009e4c <__mcmp+0x28>
 8009e56:	f04f 32ff 	mov.w	r2, #4294967295
 8009e5a:	e7f7      	b.n	8009e4c <__mcmp+0x28>

08009e5c <__mdiff>:
 8009e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e60:	460c      	mov	r4, r1
 8009e62:	4606      	mov	r6, r0
 8009e64:	4611      	mov	r1, r2
 8009e66:	4620      	mov	r0, r4
 8009e68:	4690      	mov	r8, r2
 8009e6a:	f7ff ffdb 	bl	8009e24 <__mcmp>
 8009e6e:	1e05      	subs	r5, r0, #0
 8009e70:	d110      	bne.n	8009e94 <__mdiff+0x38>
 8009e72:	4629      	mov	r1, r5
 8009e74:	4630      	mov	r0, r6
 8009e76:	f7ff fd53 	bl	8009920 <_Balloc>
 8009e7a:	b930      	cbnz	r0, 8009e8a <__mdiff+0x2e>
 8009e7c:	4b3a      	ldr	r3, [pc, #232]	; (8009f68 <__mdiff+0x10c>)
 8009e7e:	4602      	mov	r2, r0
 8009e80:	f240 2132 	movw	r1, #562	; 0x232
 8009e84:	4839      	ldr	r0, [pc, #228]	; (8009f6c <__mdiff+0x110>)
 8009e86:	f000 fb31 	bl	800a4ec <__assert_func>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e94:	bfa4      	itt	ge
 8009e96:	4643      	movge	r3, r8
 8009e98:	46a0      	movge	r8, r4
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ea0:	bfa6      	itte	ge
 8009ea2:	461c      	movge	r4, r3
 8009ea4:	2500      	movge	r5, #0
 8009ea6:	2501      	movlt	r5, #1
 8009ea8:	f7ff fd3a 	bl	8009920 <_Balloc>
 8009eac:	b920      	cbnz	r0, 8009eb8 <__mdiff+0x5c>
 8009eae:	4b2e      	ldr	r3, [pc, #184]	; (8009f68 <__mdiff+0x10c>)
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009eb6:	e7e5      	b.n	8009e84 <__mdiff+0x28>
 8009eb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ebc:	6926      	ldr	r6, [r4, #16]
 8009ebe:	60c5      	str	r5, [r0, #12]
 8009ec0:	f104 0914 	add.w	r9, r4, #20
 8009ec4:	f108 0514 	add.w	r5, r8, #20
 8009ec8:	f100 0e14 	add.w	lr, r0, #20
 8009ecc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ed0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ed4:	f108 0210 	add.w	r2, r8, #16
 8009ed8:	46f2      	mov	sl, lr
 8009eda:	2100      	movs	r1, #0
 8009edc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ee0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ee4:	fa1f f883 	uxth.w	r8, r3
 8009ee8:	fa11 f18b 	uxtah	r1, r1, fp
 8009eec:	0c1b      	lsrs	r3, r3, #16
 8009eee:	eba1 0808 	sub.w	r8, r1, r8
 8009ef2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ef6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009efa:	fa1f f888 	uxth.w	r8, r8
 8009efe:	1419      	asrs	r1, r3, #16
 8009f00:	454e      	cmp	r6, r9
 8009f02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f06:	f84a 3b04 	str.w	r3, [sl], #4
 8009f0a:	d8e7      	bhi.n	8009edc <__mdiff+0x80>
 8009f0c:	1b33      	subs	r3, r6, r4
 8009f0e:	3b15      	subs	r3, #21
 8009f10:	f023 0303 	bic.w	r3, r3, #3
 8009f14:	3304      	adds	r3, #4
 8009f16:	3415      	adds	r4, #21
 8009f18:	42a6      	cmp	r6, r4
 8009f1a:	bf38      	it	cc
 8009f1c:	2304      	movcc	r3, #4
 8009f1e:	441d      	add	r5, r3
 8009f20:	4473      	add	r3, lr
 8009f22:	469e      	mov	lr, r3
 8009f24:	462e      	mov	r6, r5
 8009f26:	4566      	cmp	r6, ip
 8009f28:	d30e      	bcc.n	8009f48 <__mdiff+0xec>
 8009f2a:	f10c 0203 	add.w	r2, ip, #3
 8009f2e:	1b52      	subs	r2, r2, r5
 8009f30:	f022 0203 	bic.w	r2, r2, #3
 8009f34:	3d03      	subs	r5, #3
 8009f36:	45ac      	cmp	ip, r5
 8009f38:	bf38      	it	cc
 8009f3a:	2200      	movcc	r2, #0
 8009f3c:	441a      	add	r2, r3
 8009f3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f42:	b17b      	cbz	r3, 8009f64 <__mdiff+0x108>
 8009f44:	6107      	str	r7, [r0, #16]
 8009f46:	e7a3      	b.n	8009e90 <__mdiff+0x34>
 8009f48:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f4c:	fa11 f288 	uxtah	r2, r1, r8
 8009f50:	1414      	asrs	r4, r2, #16
 8009f52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f56:	b292      	uxth	r2, r2
 8009f58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f5c:	f84e 2b04 	str.w	r2, [lr], #4
 8009f60:	1421      	asrs	r1, r4, #16
 8009f62:	e7e0      	b.n	8009f26 <__mdiff+0xca>
 8009f64:	3f01      	subs	r7, #1
 8009f66:	e7ea      	b.n	8009f3e <__mdiff+0xe2>
 8009f68:	0800b2b3 	.word	0x0800b2b3
 8009f6c:	0800b2c4 	.word	0x0800b2c4

08009f70 <__d2b>:
 8009f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f74:	4689      	mov	r9, r1
 8009f76:	2101      	movs	r1, #1
 8009f78:	ec57 6b10 	vmov	r6, r7, d0
 8009f7c:	4690      	mov	r8, r2
 8009f7e:	f7ff fccf 	bl	8009920 <_Balloc>
 8009f82:	4604      	mov	r4, r0
 8009f84:	b930      	cbnz	r0, 8009f94 <__d2b+0x24>
 8009f86:	4602      	mov	r2, r0
 8009f88:	4b25      	ldr	r3, [pc, #148]	; (800a020 <__d2b+0xb0>)
 8009f8a:	4826      	ldr	r0, [pc, #152]	; (800a024 <__d2b+0xb4>)
 8009f8c:	f240 310a 	movw	r1, #778	; 0x30a
 8009f90:	f000 faac 	bl	800a4ec <__assert_func>
 8009f94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009f98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f9c:	bb35      	cbnz	r5, 8009fec <__d2b+0x7c>
 8009f9e:	2e00      	cmp	r6, #0
 8009fa0:	9301      	str	r3, [sp, #4]
 8009fa2:	d028      	beq.n	8009ff6 <__d2b+0x86>
 8009fa4:	4668      	mov	r0, sp
 8009fa6:	9600      	str	r6, [sp, #0]
 8009fa8:	f7ff fd82 	bl	8009ab0 <__lo0bits>
 8009fac:	9900      	ldr	r1, [sp, #0]
 8009fae:	b300      	cbz	r0, 8009ff2 <__d2b+0x82>
 8009fb0:	9a01      	ldr	r2, [sp, #4]
 8009fb2:	f1c0 0320 	rsb	r3, r0, #32
 8009fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fba:	430b      	orrs	r3, r1
 8009fbc:	40c2      	lsrs	r2, r0
 8009fbe:	6163      	str	r3, [r4, #20]
 8009fc0:	9201      	str	r2, [sp, #4]
 8009fc2:	9b01      	ldr	r3, [sp, #4]
 8009fc4:	61a3      	str	r3, [r4, #24]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	bf14      	ite	ne
 8009fca:	2202      	movne	r2, #2
 8009fcc:	2201      	moveq	r2, #1
 8009fce:	6122      	str	r2, [r4, #16]
 8009fd0:	b1d5      	cbz	r5, 800a008 <__d2b+0x98>
 8009fd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009fd6:	4405      	add	r5, r0
 8009fd8:	f8c9 5000 	str.w	r5, [r9]
 8009fdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009fe0:	f8c8 0000 	str.w	r0, [r8]
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	b003      	add	sp, #12
 8009fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ff0:	e7d5      	b.n	8009f9e <__d2b+0x2e>
 8009ff2:	6161      	str	r1, [r4, #20]
 8009ff4:	e7e5      	b.n	8009fc2 <__d2b+0x52>
 8009ff6:	a801      	add	r0, sp, #4
 8009ff8:	f7ff fd5a 	bl	8009ab0 <__lo0bits>
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	6163      	str	r3, [r4, #20]
 800a000:	2201      	movs	r2, #1
 800a002:	6122      	str	r2, [r4, #16]
 800a004:	3020      	adds	r0, #32
 800a006:	e7e3      	b.n	8009fd0 <__d2b+0x60>
 800a008:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a00c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a010:	f8c9 0000 	str.w	r0, [r9]
 800a014:	6918      	ldr	r0, [r3, #16]
 800a016:	f7ff fd2b 	bl	8009a70 <__hi0bits>
 800a01a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a01e:	e7df      	b.n	8009fe0 <__d2b+0x70>
 800a020:	0800b2b3 	.word	0x0800b2b3
 800a024:	0800b2c4 	.word	0x0800b2c4

0800a028 <_calloc_r>:
 800a028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a02a:	fba1 2402 	umull	r2, r4, r1, r2
 800a02e:	b94c      	cbnz	r4, 800a044 <_calloc_r+0x1c>
 800a030:	4611      	mov	r1, r2
 800a032:	9201      	str	r2, [sp, #4]
 800a034:	f000 f87a 	bl	800a12c <_malloc_r>
 800a038:	9a01      	ldr	r2, [sp, #4]
 800a03a:	4605      	mov	r5, r0
 800a03c:	b930      	cbnz	r0, 800a04c <_calloc_r+0x24>
 800a03e:	4628      	mov	r0, r5
 800a040:	b003      	add	sp, #12
 800a042:	bd30      	pop	{r4, r5, pc}
 800a044:	220c      	movs	r2, #12
 800a046:	6002      	str	r2, [r0, #0]
 800a048:	2500      	movs	r5, #0
 800a04a:	e7f8      	b.n	800a03e <_calloc_r+0x16>
 800a04c:	4621      	mov	r1, r4
 800a04e:	f7fe f9e5 	bl	800841c <memset>
 800a052:	e7f4      	b.n	800a03e <_calloc_r+0x16>

0800a054 <_free_r>:
 800a054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a056:	2900      	cmp	r1, #0
 800a058:	d044      	beq.n	800a0e4 <_free_r+0x90>
 800a05a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a05e:	9001      	str	r0, [sp, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	f1a1 0404 	sub.w	r4, r1, #4
 800a066:	bfb8      	it	lt
 800a068:	18e4      	addlt	r4, r4, r3
 800a06a:	f000 fa9b 	bl	800a5a4 <__malloc_lock>
 800a06e:	4a1e      	ldr	r2, [pc, #120]	; (800a0e8 <_free_r+0x94>)
 800a070:	9801      	ldr	r0, [sp, #4]
 800a072:	6813      	ldr	r3, [r2, #0]
 800a074:	b933      	cbnz	r3, 800a084 <_free_r+0x30>
 800a076:	6063      	str	r3, [r4, #4]
 800a078:	6014      	str	r4, [r2, #0]
 800a07a:	b003      	add	sp, #12
 800a07c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a080:	f000 ba96 	b.w	800a5b0 <__malloc_unlock>
 800a084:	42a3      	cmp	r3, r4
 800a086:	d908      	bls.n	800a09a <_free_r+0x46>
 800a088:	6825      	ldr	r5, [r4, #0]
 800a08a:	1961      	adds	r1, r4, r5
 800a08c:	428b      	cmp	r3, r1
 800a08e:	bf01      	itttt	eq
 800a090:	6819      	ldreq	r1, [r3, #0]
 800a092:	685b      	ldreq	r3, [r3, #4]
 800a094:	1949      	addeq	r1, r1, r5
 800a096:	6021      	streq	r1, [r4, #0]
 800a098:	e7ed      	b.n	800a076 <_free_r+0x22>
 800a09a:	461a      	mov	r2, r3
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	b10b      	cbz	r3, 800a0a4 <_free_r+0x50>
 800a0a0:	42a3      	cmp	r3, r4
 800a0a2:	d9fa      	bls.n	800a09a <_free_r+0x46>
 800a0a4:	6811      	ldr	r1, [r2, #0]
 800a0a6:	1855      	adds	r5, r2, r1
 800a0a8:	42a5      	cmp	r5, r4
 800a0aa:	d10b      	bne.n	800a0c4 <_free_r+0x70>
 800a0ac:	6824      	ldr	r4, [r4, #0]
 800a0ae:	4421      	add	r1, r4
 800a0b0:	1854      	adds	r4, r2, r1
 800a0b2:	42a3      	cmp	r3, r4
 800a0b4:	6011      	str	r1, [r2, #0]
 800a0b6:	d1e0      	bne.n	800a07a <_free_r+0x26>
 800a0b8:	681c      	ldr	r4, [r3, #0]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	6053      	str	r3, [r2, #4]
 800a0be:	4421      	add	r1, r4
 800a0c0:	6011      	str	r1, [r2, #0]
 800a0c2:	e7da      	b.n	800a07a <_free_r+0x26>
 800a0c4:	d902      	bls.n	800a0cc <_free_r+0x78>
 800a0c6:	230c      	movs	r3, #12
 800a0c8:	6003      	str	r3, [r0, #0]
 800a0ca:	e7d6      	b.n	800a07a <_free_r+0x26>
 800a0cc:	6825      	ldr	r5, [r4, #0]
 800a0ce:	1961      	adds	r1, r4, r5
 800a0d0:	428b      	cmp	r3, r1
 800a0d2:	bf04      	itt	eq
 800a0d4:	6819      	ldreq	r1, [r3, #0]
 800a0d6:	685b      	ldreq	r3, [r3, #4]
 800a0d8:	6063      	str	r3, [r4, #4]
 800a0da:	bf04      	itt	eq
 800a0dc:	1949      	addeq	r1, r1, r5
 800a0de:	6021      	streq	r1, [r4, #0]
 800a0e0:	6054      	str	r4, [r2, #4]
 800a0e2:	e7ca      	b.n	800a07a <_free_r+0x26>
 800a0e4:	b003      	add	sp, #12
 800a0e6:	bd30      	pop	{r4, r5, pc}
 800a0e8:	24000898 	.word	0x24000898

0800a0ec <sbrk_aligned>:
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	4e0e      	ldr	r6, [pc, #56]	; (800a128 <sbrk_aligned+0x3c>)
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	6831      	ldr	r1, [r6, #0]
 800a0f4:	4605      	mov	r5, r0
 800a0f6:	b911      	cbnz	r1, 800a0fe <sbrk_aligned+0x12>
 800a0f8:	f000 f9e8 	bl	800a4cc <_sbrk_r>
 800a0fc:	6030      	str	r0, [r6, #0]
 800a0fe:	4621      	mov	r1, r4
 800a100:	4628      	mov	r0, r5
 800a102:	f000 f9e3 	bl	800a4cc <_sbrk_r>
 800a106:	1c43      	adds	r3, r0, #1
 800a108:	d00a      	beq.n	800a120 <sbrk_aligned+0x34>
 800a10a:	1cc4      	adds	r4, r0, #3
 800a10c:	f024 0403 	bic.w	r4, r4, #3
 800a110:	42a0      	cmp	r0, r4
 800a112:	d007      	beq.n	800a124 <sbrk_aligned+0x38>
 800a114:	1a21      	subs	r1, r4, r0
 800a116:	4628      	mov	r0, r5
 800a118:	f000 f9d8 	bl	800a4cc <_sbrk_r>
 800a11c:	3001      	adds	r0, #1
 800a11e:	d101      	bne.n	800a124 <sbrk_aligned+0x38>
 800a120:	f04f 34ff 	mov.w	r4, #4294967295
 800a124:	4620      	mov	r0, r4
 800a126:	bd70      	pop	{r4, r5, r6, pc}
 800a128:	2400089c 	.word	0x2400089c

0800a12c <_malloc_r>:
 800a12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a130:	1ccd      	adds	r5, r1, #3
 800a132:	f025 0503 	bic.w	r5, r5, #3
 800a136:	3508      	adds	r5, #8
 800a138:	2d0c      	cmp	r5, #12
 800a13a:	bf38      	it	cc
 800a13c:	250c      	movcc	r5, #12
 800a13e:	2d00      	cmp	r5, #0
 800a140:	4607      	mov	r7, r0
 800a142:	db01      	blt.n	800a148 <_malloc_r+0x1c>
 800a144:	42a9      	cmp	r1, r5
 800a146:	d905      	bls.n	800a154 <_malloc_r+0x28>
 800a148:	230c      	movs	r3, #12
 800a14a:	603b      	str	r3, [r7, #0]
 800a14c:	2600      	movs	r6, #0
 800a14e:	4630      	mov	r0, r6
 800a150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a154:	4e2e      	ldr	r6, [pc, #184]	; (800a210 <_malloc_r+0xe4>)
 800a156:	f000 fa25 	bl	800a5a4 <__malloc_lock>
 800a15a:	6833      	ldr	r3, [r6, #0]
 800a15c:	461c      	mov	r4, r3
 800a15e:	bb34      	cbnz	r4, 800a1ae <_malloc_r+0x82>
 800a160:	4629      	mov	r1, r5
 800a162:	4638      	mov	r0, r7
 800a164:	f7ff ffc2 	bl	800a0ec <sbrk_aligned>
 800a168:	1c43      	adds	r3, r0, #1
 800a16a:	4604      	mov	r4, r0
 800a16c:	d14d      	bne.n	800a20a <_malloc_r+0xde>
 800a16e:	6834      	ldr	r4, [r6, #0]
 800a170:	4626      	mov	r6, r4
 800a172:	2e00      	cmp	r6, #0
 800a174:	d140      	bne.n	800a1f8 <_malloc_r+0xcc>
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	4631      	mov	r1, r6
 800a17a:	4638      	mov	r0, r7
 800a17c:	eb04 0803 	add.w	r8, r4, r3
 800a180:	f000 f9a4 	bl	800a4cc <_sbrk_r>
 800a184:	4580      	cmp	r8, r0
 800a186:	d13a      	bne.n	800a1fe <_malloc_r+0xd2>
 800a188:	6821      	ldr	r1, [r4, #0]
 800a18a:	3503      	adds	r5, #3
 800a18c:	1a6d      	subs	r5, r5, r1
 800a18e:	f025 0503 	bic.w	r5, r5, #3
 800a192:	3508      	adds	r5, #8
 800a194:	2d0c      	cmp	r5, #12
 800a196:	bf38      	it	cc
 800a198:	250c      	movcc	r5, #12
 800a19a:	4629      	mov	r1, r5
 800a19c:	4638      	mov	r0, r7
 800a19e:	f7ff ffa5 	bl	800a0ec <sbrk_aligned>
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	d02b      	beq.n	800a1fe <_malloc_r+0xd2>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	442b      	add	r3, r5
 800a1aa:	6023      	str	r3, [r4, #0]
 800a1ac:	e00e      	b.n	800a1cc <_malloc_r+0xa0>
 800a1ae:	6822      	ldr	r2, [r4, #0]
 800a1b0:	1b52      	subs	r2, r2, r5
 800a1b2:	d41e      	bmi.n	800a1f2 <_malloc_r+0xc6>
 800a1b4:	2a0b      	cmp	r2, #11
 800a1b6:	d916      	bls.n	800a1e6 <_malloc_r+0xba>
 800a1b8:	1961      	adds	r1, r4, r5
 800a1ba:	42a3      	cmp	r3, r4
 800a1bc:	6025      	str	r5, [r4, #0]
 800a1be:	bf18      	it	ne
 800a1c0:	6059      	strne	r1, [r3, #4]
 800a1c2:	6863      	ldr	r3, [r4, #4]
 800a1c4:	bf08      	it	eq
 800a1c6:	6031      	streq	r1, [r6, #0]
 800a1c8:	5162      	str	r2, [r4, r5]
 800a1ca:	604b      	str	r3, [r1, #4]
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	f104 060b 	add.w	r6, r4, #11
 800a1d2:	f000 f9ed 	bl	800a5b0 <__malloc_unlock>
 800a1d6:	f026 0607 	bic.w	r6, r6, #7
 800a1da:	1d23      	adds	r3, r4, #4
 800a1dc:	1af2      	subs	r2, r6, r3
 800a1de:	d0b6      	beq.n	800a14e <_malloc_r+0x22>
 800a1e0:	1b9b      	subs	r3, r3, r6
 800a1e2:	50a3      	str	r3, [r4, r2]
 800a1e4:	e7b3      	b.n	800a14e <_malloc_r+0x22>
 800a1e6:	6862      	ldr	r2, [r4, #4]
 800a1e8:	42a3      	cmp	r3, r4
 800a1ea:	bf0c      	ite	eq
 800a1ec:	6032      	streq	r2, [r6, #0]
 800a1ee:	605a      	strne	r2, [r3, #4]
 800a1f0:	e7ec      	b.n	800a1cc <_malloc_r+0xa0>
 800a1f2:	4623      	mov	r3, r4
 800a1f4:	6864      	ldr	r4, [r4, #4]
 800a1f6:	e7b2      	b.n	800a15e <_malloc_r+0x32>
 800a1f8:	4634      	mov	r4, r6
 800a1fa:	6876      	ldr	r6, [r6, #4]
 800a1fc:	e7b9      	b.n	800a172 <_malloc_r+0x46>
 800a1fe:	230c      	movs	r3, #12
 800a200:	603b      	str	r3, [r7, #0]
 800a202:	4638      	mov	r0, r7
 800a204:	f000 f9d4 	bl	800a5b0 <__malloc_unlock>
 800a208:	e7a1      	b.n	800a14e <_malloc_r+0x22>
 800a20a:	6025      	str	r5, [r4, #0]
 800a20c:	e7de      	b.n	800a1cc <_malloc_r+0xa0>
 800a20e:	bf00      	nop
 800a210:	24000898 	.word	0x24000898

0800a214 <__ssputs_r>:
 800a214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a218:	688e      	ldr	r6, [r1, #8]
 800a21a:	429e      	cmp	r6, r3
 800a21c:	4682      	mov	sl, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	4690      	mov	r8, r2
 800a222:	461f      	mov	r7, r3
 800a224:	d838      	bhi.n	800a298 <__ssputs_r+0x84>
 800a226:	898a      	ldrh	r2, [r1, #12]
 800a228:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a22c:	d032      	beq.n	800a294 <__ssputs_r+0x80>
 800a22e:	6825      	ldr	r5, [r4, #0]
 800a230:	6909      	ldr	r1, [r1, #16]
 800a232:	eba5 0901 	sub.w	r9, r5, r1
 800a236:	6965      	ldr	r5, [r4, #20]
 800a238:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a23c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a240:	3301      	adds	r3, #1
 800a242:	444b      	add	r3, r9
 800a244:	106d      	asrs	r5, r5, #1
 800a246:	429d      	cmp	r5, r3
 800a248:	bf38      	it	cc
 800a24a:	461d      	movcc	r5, r3
 800a24c:	0553      	lsls	r3, r2, #21
 800a24e:	d531      	bpl.n	800a2b4 <__ssputs_r+0xa0>
 800a250:	4629      	mov	r1, r5
 800a252:	f7ff ff6b 	bl	800a12c <_malloc_r>
 800a256:	4606      	mov	r6, r0
 800a258:	b950      	cbnz	r0, 800a270 <__ssputs_r+0x5c>
 800a25a:	230c      	movs	r3, #12
 800a25c:	f8ca 3000 	str.w	r3, [sl]
 800a260:	89a3      	ldrh	r3, [r4, #12]
 800a262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a266:	81a3      	strh	r3, [r4, #12]
 800a268:	f04f 30ff 	mov.w	r0, #4294967295
 800a26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a270:	6921      	ldr	r1, [r4, #16]
 800a272:	464a      	mov	r2, r9
 800a274:	f7ff fb46 	bl	8009904 <memcpy>
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a282:	81a3      	strh	r3, [r4, #12]
 800a284:	6126      	str	r6, [r4, #16]
 800a286:	6165      	str	r5, [r4, #20]
 800a288:	444e      	add	r6, r9
 800a28a:	eba5 0509 	sub.w	r5, r5, r9
 800a28e:	6026      	str	r6, [r4, #0]
 800a290:	60a5      	str	r5, [r4, #8]
 800a292:	463e      	mov	r6, r7
 800a294:	42be      	cmp	r6, r7
 800a296:	d900      	bls.n	800a29a <__ssputs_r+0x86>
 800a298:	463e      	mov	r6, r7
 800a29a:	6820      	ldr	r0, [r4, #0]
 800a29c:	4632      	mov	r2, r6
 800a29e:	4641      	mov	r1, r8
 800a2a0:	f000 f966 	bl	800a570 <memmove>
 800a2a4:	68a3      	ldr	r3, [r4, #8]
 800a2a6:	1b9b      	subs	r3, r3, r6
 800a2a8:	60a3      	str	r3, [r4, #8]
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	4433      	add	r3, r6
 800a2ae:	6023      	str	r3, [r4, #0]
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	e7db      	b.n	800a26c <__ssputs_r+0x58>
 800a2b4:	462a      	mov	r2, r5
 800a2b6:	f000 f981 	bl	800a5bc <_realloc_r>
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d1e1      	bne.n	800a284 <__ssputs_r+0x70>
 800a2c0:	6921      	ldr	r1, [r4, #16]
 800a2c2:	4650      	mov	r0, sl
 800a2c4:	f7ff fec6 	bl	800a054 <_free_r>
 800a2c8:	e7c7      	b.n	800a25a <__ssputs_r+0x46>
	...

0800a2cc <_svfiprintf_r>:
 800a2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d0:	4698      	mov	r8, r3
 800a2d2:	898b      	ldrh	r3, [r1, #12]
 800a2d4:	061b      	lsls	r3, r3, #24
 800a2d6:	b09d      	sub	sp, #116	; 0x74
 800a2d8:	4607      	mov	r7, r0
 800a2da:	460d      	mov	r5, r1
 800a2dc:	4614      	mov	r4, r2
 800a2de:	d50e      	bpl.n	800a2fe <_svfiprintf_r+0x32>
 800a2e0:	690b      	ldr	r3, [r1, #16]
 800a2e2:	b963      	cbnz	r3, 800a2fe <_svfiprintf_r+0x32>
 800a2e4:	2140      	movs	r1, #64	; 0x40
 800a2e6:	f7ff ff21 	bl	800a12c <_malloc_r>
 800a2ea:	6028      	str	r0, [r5, #0]
 800a2ec:	6128      	str	r0, [r5, #16]
 800a2ee:	b920      	cbnz	r0, 800a2fa <_svfiprintf_r+0x2e>
 800a2f0:	230c      	movs	r3, #12
 800a2f2:	603b      	str	r3, [r7, #0]
 800a2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f8:	e0d1      	b.n	800a49e <_svfiprintf_r+0x1d2>
 800a2fa:	2340      	movs	r3, #64	; 0x40
 800a2fc:	616b      	str	r3, [r5, #20]
 800a2fe:	2300      	movs	r3, #0
 800a300:	9309      	str	r3, [sp, #36]	; 0x24
 800a302:	2320      	movs	r3, #32
 800a304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a308:	f8cd 800c 	str.w	r8, [sp, #12]
 800a30c:	2330      	movs	r3, #48	; 0x30
 800a30e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a4b8 <_svfiprintf_r+0x1ec>
 800a312:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a316:	f04f 0901 	mov.w	r9, #1
 800a31a:	4623      	mov	r3, r4
 800a31c:	469a      	mov	sl, r3
 800a31e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a322:	b10a      	cbz	r2, 800a328 <_svfiprintf_r+0x5c>
 800a324:	2a25      	cmp	r2, #37	; 0x25
 800a326:	d1f9      	bne.n	800a31c <_svfiprintf_r+0x50>
 800a328:	ebba 0b04 	subs.w	fp, sl, r4
 800a32c:	d00b      	beq.n	800a346 <_svfiprintf_r+0x7a>
 800a32e:	465b      	mov	r3, fp
 800a330:	4622      	mov	r2, r4
 800a332:	4629      	mov	r1, r5
 800a334:	4638      	mov	r0, r7
 800a336:	f7ff ff6d 	bl	800a214 <__ssputs_r>
 800a33a:	3001      	adds	r0, #1
 800a33c:	f000 80aa 	beq.w	800a494 <_svfiprintf_r+0x1c8>
 800a340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a342:	445a      	add	r2, fp
 800a344:	9209      	str	r2, [sp, #36]	; 0x24
 800a346:	f89a 3000 	ldrb.w	r3, [sl]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 80a2 	beq.w	800a494 <_svfiprintf_r+0x1c8>
 800a350:	2300      	movs	r3, #0
 800a352:	f04f 32ff 	mov.w	r2, #4294967295
 800a356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a35a:	f10a 0a01 	add.w	sl, sl, #1
 800a35e:	9304      	str	r3, [sp, #16]
 800a360:	9307      	str	r3, [sp, #28]
 800a362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a366:	931a      	str	r3, [sp, #104]	; 0x68
 800a368:	4654      	mov	r4, sl
 800a36a:	2205      	movs	r2, #5
 800a36c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a370:	4851      	ldr	r0, [pc, #324]	; (800a4b8 <_svfiprintf_r+0x1ec>)
 800a372:	f7f5 ffbd 	bl	80002f0 <memchr>
 800a376:	9a04      	ldr	r2, [sp, #16]
 800a378:	b9d8      	cbnz	r0, 800a3b2 <_svfiprintf_r+0xe6>
 800a37a:	06d0      	lsls	r0, r2, #27
 800a37c:	bf44      	itt	mi
 800a37e:	2320      	movmi	r3, #32
 800a380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a384:	0711      	lsls	r1, r2, #28
 800a386:	bf44      	itt	mi
 800a388:	232b      	movmi	r3, #43	; 0x2b
 800a38a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a38e:	f89a 3000 	ldrb.w	r3, [sl]
 800a392:	2b2a      	cmp	r3, #42	; 0x2a
 800a394:	d015      	beq.n	800a3c2 <_svfiprintf_r+0xf6>
 800a396:	9a07      	ldr	r2, [sp, #28]
 800a398:	4654      	mov	r4, sl
 800a39a:	2000      	movs	r0, #0
 800a39c:	f04f 0c0a 	mov.w	ip, #10
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3a6:	3b30      	subs	r3, #48	; 0x30
 800a3a8:	2b09      	cmp	r3, #9
 800a3aa:	d94e      	bls.n	800a44a <_svfiprintf_r+0x17e>
 800a3ac:	b1b0      	cbz	r0, 800a3dc <_svfiprintf_r+0x110>
 800a3ae:	9207      	str	r2, [sp, #28]
 800a3b0:	e014      	b.n	800a3dc <_svfiprintf_r+0x110>
 800a3b2:	eba0 0308 	sub.w	r3, r0, r8
 800a3b6:	fa09 f303 	lsl.w	r3, r9, r3
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	9304      	str	r3, [sp, #16]
 800a3be:	46a2      	mov	sl, r4
 800a3c0:	e7d2      	b.n	800a368 <_svfiprintf_r+0x9c>
 800a3c2:	9b03      	ldr	r3, [sp, #12]
 800a3c4:	1d19      	adds	r1, r3, #4
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	9103      	str	r1, [sp, #12]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	bfbb      	ittet	lt
 800a3ce:	425b      	neglt	r3, r3
 800a3d0:	f042 0202 	orrlt.w	r2, r2, #2
 800a3d4:	9307      	strge	r3, [sp, #28]
 800a3d6:	9307      	strlt	r3, [sp, #28]
 800a3d8:	bfb8      	it	lt
 800a3da:	9204      	strlt	r2, [sp, #16]
 800a3dc:	7823      	ldrb	r3, [r4, #0]
 800a3de:	2b2e      	cmp	r3, #46	; 0x2e
 800a3e0:	d10c      	bne.n	800a3fc <_svfiprintf_r+0x130>
 800a3e2:	7863      	ldrb	r3, [r4, #1]
 800a3e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3e6:	d135      	bne.n	800a454 <_svfiprintf_r+0x188>
 800a3e8:	9b03      	ldr	r3, [sp, #12]
 800a3ea:	1d1a      	adds	r2, r3, #4
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	9203      	str	r2, [sp, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bfb8      	it	lt
 800a3f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3f8:	3402      	adds	r4, #2
 800a3fa:	9305      	str	r3, [sp, #20]
 800a3fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a4c8 <_svfiprintf_r+0x1fc>
 800a400:	7821      	ldrb	r1, [r4, #0]
 800a402:	2203      	movs	r2, #3
 800a404:	4650      	mov	r0, sl
 800a406:	f7f5 ff73 	bl	80002f0 <memchr>
 800a40a:	b140      	cbz	r0, 800a41e <_svfiprintf_r+0x152>
 800a40c:	2340      	movs	r3, #64	; 0x40
 800a40e:	eba0 000a 	sub.w	r0, r0, sl
 800a412:	fa03 f000 	lsl.w	r0, r3, r0
 800a416:	9b04      	ldr	r3, [sp, #16]
 800a418:	4303      	orrs	r3, r0
 800a41a:	3401      	adds	r4, #1
 800a41c:	9304      	str	r3, [sp, #16]
 800a41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a422:	4826      	ldr	r0, [pc, #152]	; (800a4bc <_svfiprintf_r+0x1f0>)
 800a424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a428:	2206      	movs	r2, #6
 800a42a:	f7f5 ff61 	bl	80002f0 <memchr>
 800a42e:	2800      	cmp	r0, #0
 800a430:	d038      	beq.n	800a4a4 <_svfiprintf_r+0x1d8>
 800a432:	4b23      	ldr	r3, [pc, #140]	; (800a4c0 <_svfiprintf_r+0x1f4>)
 800a434:	bb1b      	cbnz	r3, 800a47e <_svfiprintf_r+0x1b2>
 800a436:	9b03      	ldr	r3, [sp, #12]
 800a438:	3307      	adds	r3, #7
 800a43a:	f023 0307 	bic.w	r3, r3, #7
 800a43e:	3308      	adds	r3, #8
 800a440:	9303      	str	r3, [sp, #12]
 800a442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a444:	4433      	add	r3, r6
 800a446:	9309      	str	r3, [sp, #36]	; 0x24
 800a448:	e767      	b.n	800a31a <_svfiprintf_r+0x4e>
 800a44a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a44e:	460c      	mov	r4, r1
 800a450:	2001      	movs	r0, #1
 800a452:	e7a5      	b.n	800a3a0 <_svfiprintf_r+0xd4>
 800a454:	2300      	movs	r3, #0
 800a456:	3401      	adds	r4, #1
 800a458:	9305      	str	r3, [sp, #20]
 800a45a:	4619      	mov	r1, r3
 800a45c:	f04f 0c0a 	mov.w	ip, #10
 800a460:	4620      	mov	r0, r4
 800a462:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a466:	3a30      	subs	r2, #48	; 0x30
 800a468:	2a09      	cmp	r2, #9
 800a46a:	d903      	bls.n	800a474 <_svfiprintf_r+0x1a8>
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0c5      	beq.n	800a3fc <_svfiprintf_r+0x130>
 800a470:	9105      	str	r1, [sp, #20]
 800a472:	e7c3      	b.n	800a3fc <_svfiprintf_r+0x130>
 800a474:	fb0c 2101 	mla	r1, ip, r1, r2
 800a478:	4604      	mov	r4, r0
 800a47a:	2301      	movs	r3, #1
 800a47c:	e7f0      	b.n	800a460 <_svfiprintf_r+0x194>
 800a47e:	ab03      	add	r3, sp, #12
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	462a      	mov	r2, r5
 800a484:	4b0f      	ldr	r3, [pc, #60]	; (800a4c4 <_svfiprintf_r+0x1f8>)
 800a486:	a904      	add	r1, sp, #16
 800a488:	4638      	mov	r0, r7
 800a48a:	f7fe f861 	bl	8008550 <_printf_float>
 800a48e:	1c42      	adds	r2, r0, #1
 800a490:	4606      	mov	r6, r0
 800a492:	d1d6      	bne.n	800a442 <_svfiprintf_r+0x176>
 800a494:	89ab      	ldrh	r3, [r5, #12]
 800a496:	065b      	lsls	r3, r3, #25
 800a498:	f53f af2c 	bmi.w	800a2f4 <_svfiprintf_r+0x28>
 800a49c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a49e:	b01d      	add	sp, #116	; 0x74
 800a4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a4:	ab03      	add	r3, sp, #12
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	462a      	mov	r2, r5
 800a4aa:	4b06      	ldr	r3, [pc, #24]	; (800a4c4 <_svfiprintf_r+0x1f8>)
 800a4ac:	a904      	add	r1, sp, #16
 800a4ae:	4638      	mov	r0, r7
 800a4b0:	f7fe fada 	bl	8008a68 <_printf_i>
 800a4b4:	e7eb      	b.n	800a48e <_svfiprintf_r+0x1c2>
 800a4b6:	bf00      	nop
 800a4b8:	0800b41c 	.word	0x0800b41c
 800a4bc:	0800b426 	.word	0x0800b426
 800a4c0:	08008551 	.word	0x08008551
 800a4c4:	0800a215 	.word	0x0800a215
 800a4c8:	0800b422 	.word	0x0800b422

0800a4cc <_sbrk_r>:
 800a4cc:	b538      	push	{r3, r4, r5, lr}
 800a4ce:	4d06      	ldr	r5, [pc, #24]	; (800a4e8 <_sbrk_r+0x1c>)
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	4608      	mov	r0, r1
 800a4d6:	602b      	str	r3, [r5, #0]
 800a4d8:	f7f7 fc1c 	bl	8001d14 <_sbrk>
 800a4dc:	1c43      	adds	r3, r0, #1
 800a4de:	d102      	bne.n	800a4e6 <_sbrk_r+0x1a>
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	b103      	cbz	r3, 800a4e6 <_sbrk_r+0x1a>
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}
 800a4e8:	240008a0 	.word	0x240008a0

0800a4ec <__assert_func>:
 800a4ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4ee:	4614      	mov	r4, r2
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	4b09      	ldr	r3, [pc, #36]	; (800a518 <__assert_func+0x2c>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	68d8      	ldr	r0, [r3, #12]
 800a4fa:	b14c      	cbz	r4, 800a510 <__assert_func+0x24>
 800a4fc:	4b07      	ldr	r3, [pc, #28]	; (800a51c <__assert_func+0x30>)
 800a4fe:	9100      	str	r1, [sp, #0]
 800a500:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a504:	4906      	ldr	r1, [pc, #24]	; (800a520 <__assert_func+0x34>)
 800a506:	462b      	mov	r3, r5
 800a508:	f000 f80e 	bl	800a528 <fiprintf>
 800a50c:	f000 faac 	bl	800aa68 <abort>
 800a510:	4b04      	ldr	r3, [pc, #16]	; (800a524 <__assert_func+0x38>)
 800a512:	461c      	mov	r4, r3
 800a514:	e7f3      	b.n	800a4fe <__assert_func+0x12>
 800a516:	bf00      	nop
 800a518:	24000014 	.word	0x24000014
 800a51c:	0800b42d 	.word	0x0800b42d
 800a520:	0800b43a 	.word	0x0800b43a
 800a524:	0800b468 	.word	0x0800b468

0800a528 <fiprintf>:
 800a528:	b40e      	push	{r1, r2, r3}
 800a52a:	b503      	push	{r0, r1, lr}
 800a52c:	4601      	mov	r1, r0
 800a52e:	ab03      	add	r3, sp, #12
 800a530:	4805      	ldr	r0, [pc, #20]	; (800a548 <fiprintf+0x20>)
 800a532:	f853 2b04 	ldr.w	r2, [r3], #4
 800a536:	6800      	ldr	r0, [r0, #0]
 800a538:	9301      	str	r3, [sp, #4]
 800a53a:	f000 f897 	bl	800a66c <_vfiprintf_r>
 800a53e:	b002      	add	sp, #8
 800a540:	f85d eb04 	ldr.w	lr, [sp], #4
 800a544:	b003      	add	sp, #12
 800a546:	4770      	bx	lr
 800a548:	24000014 	.word	0x24000014

0800a54c <__ascii_mbtowc>:
 800a54c:	b082      	sub	sp, #8
 800a54e:	b901      	cbnz	r1, 800a552 <__ascii_mbtowc+0x6>
 800a550:	a901      	add	r1, sp, #4
 800a552:	b142      	cbz	r2, 800a566 <__ascii_mbtowc+0x1a>
 800a554:	b14b      	cbz	r3, 800a56a <__ascii_mbtowc+0x1e>
 800a556:	7813      	ldrb	r3, [r2, #0]
 800a558:	600b      	str	r3, [r1, #0]
 800a55a:	7812      	ldrb	r2, [r2, #0]
 800a55c:	1e10      	subs	r0, r2, #0
 800a55e:	bf18      	it	ne
 800a560:	2001      	movne	r0, #1
 800a562:	b002      	add	sp, #8
 800a564:	4770      	bx	lr
 800a566:	4610      	mov	r0, r2
 800a568:	e7fb      	b.n	800a562 <__ascii_mbtowc+0x16>
 800a56a:	f06f 0001 	mvn.w	r0, #1
 800a56e:	e7f8      	b.n	800a562 <__ascii_mbtowc+0x16>

0800a570 <memmove>:
 800a570:	4288      	cmp	r0, r1
 800a572:	b510      	push	{r4, lr}
 800a574:	eb01 0402 	add.w	r4, r1, r2
 800a578:	d902      	bls.n	800a580 <memmove+0x10>
 800a57a:	4284      	cmp	r4, r0
 800a57c:	4623      	mov	r3, r4
 800a57e:	d807      	bhi.n	800a590 <memmove+0x20>
 800a580:	1e43      	subs	r3, r0, #1
 800a582:	42a1      	cmp	r1, r4
 800a584:	d008      	beq.n	800a598 <memmove+0x28>
 800a586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a58a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a58e:	e7f8      	b.n	800a582 <memmove+0x12>
 800a590:	4402      	add	r2, r0
 800a592:	4601      	mov	r1, r0
 800a594:	428a      	cmp	r2, r1
 800a596:	d100      	bne.n	800a59a <memmove+0x2a>
 800a598:	bd10      	pop	{r4, pc}
 800a59a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a59e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5a2:	e7f7      	b.n	800a594 <memmove+0x24>

0800a5a4 <__malloc_lock>:
 800a5a4:	4801      	ldr	r0, [pc, #4]	; (800a5ac <__malloc_lock+0x8>)
 800a5a6:	f000 bc1f 	b.w	800ade8 <__retarget_lock_acquire_recursive>
 800a5aa:	bf00      	nop
 800a5ac:	240008a4 	.word	0x240008a4

0800a5b0 <__malloc_unlock>:
 800a5b0:	4801      	ldr	r0, [pc, #4]	; (800a5b8 <__malloc_unlock+0x8>)
 800a5b2:	f000 bc1a 	b.w	800adea <__retarget_lock_release_recursive>
 800a5b6:	bf00      	nop
 800a5b8:	240008a4 	.word	0x240008a4

0800a5bc <_realloc_r>:
 800a5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c0:	4680      	mov	r8, r0
 800a5c2:	4614      	mov	r4, r2
 800a5c4:	460e      	mov	r6, r1
 800a5c6:	b921      	cbnz	r1, 800a5d2 <_realloc_r+0x16>
 800a5c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	f7ff bdad 	b.w	800a12c <_malloc_r>
 800a5d2:	b92a      	cbnz	r2, 800a5e0 <_realloc_r+0x24>
 800a5d4:	f7ff fd3e 	bl	800a054 <_free_r>
 800a5d8:	4625      	mov	r5, r4
 800a5da:	4628      	mov	r0, r5
 800a5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e0:	f000 fc6a 	bl	800aeb8 <_malloc_usable_size_r>
 800a5e4:	4284      	cmp	r4, r0
 800a5e6:	4607      	mov	r7, r0
 800a5e8:	d802      	bhi.n	800a5f0 <_realloc_r+0x34>
 800a5ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5ee:	d812      	bhi.n	800a616 <_realloc_r+0x5a>
 800a5f0:	4621      	mov	r1, r4
 800a5f2:	4640      	mov	r0, r8
 800a5f4:	f7ff fd9a 	bl	800a12c <_malloc_r>
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d0ed      	beq.n	800a5da <_realloc_r+0x1e>
 800a5fe:	42bc      	cmp	r4, r7
 800a600:	4622      	mov	r2, r4
 800a602:	4631      	mov	r1, r6
 800a604:	bf28      	it	cs
 800a606:	463a      	movcs	r2, r7
 800a608:	f7ff f97c 	bl	8009904 <memcpy>
 800a60c:	4631      	mov	r1, r6
 800a60e:	4640      	mov	r0, r8
 800a610:	f7ff fd20 	bl	800a054 <_free_r>
 800a614:	e7e1      	b.n	800a5da <_realloc_r+0x1e>
 800a616:	4635      	mov	r5, r6
 800a618:	e7df      	b.n	800a5da <_realloc_r+0x1e>

0800a61a <__sfputc_r>:
 800a61a:	6893      	ldr	r3, [r2, #8]
 800a61c:	3b01      	subs	r3, #1
 800a61e:	2b00      	cmp	r3, #0
 800a620:	b410      	push	{r4}
 800a622:	6093      	str	r3, [r2, #8]
 800a624:	da08      	bge.n	800a638 <__sfputc_r+0x1e>
 800a626:	6994      	ldr	r4, [r2, #24]
 800a628:	42a3      	cmp	r3, r4
 800a62a:	db01      	blt.n	800a630 <__sfputc_r+0x16>
 800a62c:	290a      	cmp	r1, #10
 800a62e:	d103      	bne.n	800a638 <__sfputc_r+0x1e>
 800a630:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a634:	f000 b94a 	b.w	800a8cc <__swbuf_r>
 800a638:	6813      	ldr	r3, [r2, #0]
 800a63a:	1c58      	adds	r0, r3, #1
 800a63c:	6010      	str	r0, [r2, #0]
 800a63e:	7019      	strb	r1, [r3, #0]
 800a640:	4608      	mov	r0, r1
 800a642:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <__sfputs_r>:
 800a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64a:	4606      	mov	r6, r0
 800a64c:	460f      	mov	r7, r1
 800a64e:	4614      	mov	r4, r2
 800a650:	18d5      	adds	r5, r2, r3
 800a652:	42ac      	cmp	r4, r5
 800a654:	d101      	bne.n	800a65a <__sfputs_r+0x12>
 800a656:	2000      	movs	r0, #0
 800a658:	e007      	b.n	800a66a <__sfputs_r+0x22>
 800a65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a65e:	463a      	mov	r2, r7
 800a660:	4630      	mov	r0, r6
 800a662:	f7ff ffda 	bl	800a61a <__sfputc_r>
 800a666:	1c43      	adds	r3, r0, #1
 800a668:	d1f3      	bne.n	800a652 <__sfputs_r+0xa>
 800a66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a66c <_vfiprintf_r>:
 800a66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a670:	460d      	mov	r5, r1
 800a672:	b09d      	sub	sp, #116	; 0x74
 800a674:	4614      	mov	r4, r2
 800a676:	4698      	mov	r8, r3
 800a678:	4606      	mov	r6, r0
 800a67a:	b118      	cbz	r0, 800a684 <_vfiprintf_r+0x18>
 800a67c:	6983      	ldr	r3, [r0, #24]
 800a67e:	b90b      	cbnz	r3, 800a684 <_vfiprintf_r+0x18>
 800a680:	f000 fb14 	bl	800acac <__sinit>
 800a684:	4b89      	ldr	r3, [pc, #548]	; (800a8ac <_vfiprintf_r+0x240>)
 800a686:	429d      	cmp	r5, r3
 800a688:	d11b      	bne.n	800a6c2 <_vfiprintf_r+0x56>
 800a68a:	6875      	ldr	r5, [r6, #4]
 800a68c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a68e:	07d9      	lsls	r1, r3, #31
 800a690:	d405      	bmi.n	800a69e <_vfiprintf_r+0x32>
 800a692:	89ab      	ldrh	r3, [r5, #12]
 800a694:	059a      	lsls	r2, r3, #22
 800a696:	d402      	bmi.n	800a69e <_vfiprintf_r+0x32>
 800a698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a69a:	f000 fba5 	bl	800ade8 <__retarget_lock_acquire_recursive>
 800a69e:	89ab      	ldrh	r3, [r5, #12]
 800a6a0:	071b      	lsls	r3, r3, #28
 800a6a2:	d501      	bpl.n	800a6a8 <_vfiprintf_r+0x3c>
 800a6a4:	692b      	ldr	r3, [r5, #16]
 800a6a6:	b9eb      	cbnz	r3, 800a6e4 <_vfiprintf_r+0x78>
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f000 f96e 	bl	800a98c <__swsetup_r>
 800a6b0:	b1c0      	cbz	r0, 800a6e4 <_vfiprintf_r+0x78>
 800a6b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6b4:	07dc      	lsls	r4, r3, #31
 800a6b6:	d50e      	bpl.n	800a6d6 <_vfiprintf_r+0x6a>
 800a6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6bc:	b01d      	add	sp, #116	; 0x74
 800a6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c2:	4b7b      	ldr	r3, [pc, #492]	; (800a8b0 <_vfiprintf_r+0x244>)
 800a6c4:	429d      	cmp	r5, r3
 800a6c6:	d101      	bne.n	800a6cc <_vfiprintf_r+0x60>
 800a6c8:	68b5      	ldr	r5, [r6, #8]
 800a6ca:	e7df      	b.n	800a68c <_vfiprintf_r+0x20>
 800a6cc:	4b79      	ldr	r3, [pc, #484]	; (800a8b4 <_vfiprintf_r+0x248>)
 800a6ce:	429d      	cmp	r5, r3
 800a6d0:	bf08      	it	eq
 800a6d2:	68f5      	ldreq	r5, [r6, #12]
 800a6d4:	e7da      	b.n	800a68c <_vfiprintf_r+0x20>
 800a6d6:	89ab      	ldrh	r3, [r5, #12]
 800a6d8:	0598      	lsls	r0, r3, #22
 800a6da:	d4ed      	bmi.n	800a6b8 <_vfiprintf_r+0x4c>
 800a6dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6de:	f000 fb84 	bl	800adea <__retarget_lock_release_recursive>
 800a6e2:	e7e9      	b.n	800a6b8 <_vfiprintf_r+0x4c>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6e8:	2320      	movs	r3, #32
 800a6ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6f2:	2330      	movs	r3, #48	; 0x30
 800a6f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8b8 <_vfiprintf_r+0x24c>
 800a6f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6fc:	f04f 0901 	mov.w	r9, #1
 800a700:	4623      	mov	r3, r4
 800a702:	469a      	mov	sl, r3
 800a704:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a708:	b10a      	cbz	r2, 800a70e <_vfiprintf_r+0xa2>
 800a70a:	2a25      	cmp	r2, #37	; 0x25
 800a70c:	d1f9      	bne.n	800a702 <_vfiprintf_r+0x96>
 800a70e:	ebba 0b04 	subs.w	fp, sl, r4
 800a712:	d00b      	beq.n	800a72c <_vfiprintf_r+0xc0>
 800a714:	465b      	mov	r3, fp
 800a716:	4622      	mov	r2, r4
 800a718:	4629      	mov	r1, r5
 800a71a:	4630      	mov	r0, r6
 800a71c:	f7ff ff94 	bl	800a648 <__sfputs_r>
 800a720:	3001      	adds	r0, #1
 800a722:	f000 80aa 	beq.w	800a87a <_vfiprintf_r+0x20e>
 800a726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a728:	445a      	add	r2, fp
 800a72a:	9209      	str	r2, [sp, #36]	; 0x24
 800a72c:	f89a 3000 	ldrb.w	r3, [sl]
 800a730:	2b00      	cmp	r3, #0
 800a732:	f000 80a2 	beq.w	800a87a <_vfiprintf_r+0x20e>
 800a736:	2300      	movs	r3, #0
 800a738:	f04f 32ff 	mov.w	r2, #4294967295
 800a73c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a740:	f10a 0a01 	add.w	sl, sl, #1
 800a744:	9304      	str	r3, [sp, #16]
 800a746:	9307      	str	r3, [sp, #28]
 800a748:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a74c:	931a      	str	r3, [sp, #104]	; 0x68
 800a74e:	4654      	mov	r4, sl
 800a750:	2205      	movs	r2, #5
 800a752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a756:	4858      	ldr	r0, [pc, #352]	; (800a8b8 <_vfiprintf_r+0x24c>)
 800a758:	f7f5 fdca 	bl	80002f0 <memchr>
 800a75c:	9a04      	ldr	r2, [sp, #16]
 800a75e:	b9d8      	cbnz	r0, 800a798 <_vfiprintf_r+0x12c>
 800a760:	06d1      	lsls	r1, r2, #27
 800a762:	bf44      	itt	mi
 800a764:	2320      	movmi	r3, #32
 800a766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a76a:	0713      	lsls	r3, r2, #28
 800a76c:	bf44      	itt	mi
 800a76e:	232b      	movmi	r3, #43	; 0x2b
 800a770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a774:	f89a 3000 	ldrb.w	r3, [sl]
 800a778:	2b2a      	cmp	r3, #42	; 0x2a
 800a77a:	d015      	beq.n	800a7a8 <_vfiprintf_r+0x13c>
 800a77c:	9a07      	ldr	r2, [sp, #28]
 800a77e:	4654      	mov	r4, sl
 800a780:	2000      	movs	r0, #0
 800a782:	f04f 0c0a 	mov.w	ip, #10
 800a786:	4621      	mov	r1, r4
 800a788:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a78c:	3b30      	subs	r3, #48	; 0x30
 800a78e:	2b09      	cmp	r3, #9
 800a790:	d94e      	bls.n	800a830 <_vfiprintf_r+0x1c4>
 800a792:	b1b0      	cbz	r0, 800a7c2 <_vfiprintf_r+0x156>
 800a794:	9207      	str	r2, [sp, #28]
 800a796:	e014      	b.n	800a7c2 <_vfiprintf_r+0x156>
 800a798:	eba0 0308 	sub.w	r3, r0, r8
 800a79c:	fa09 f303 	lsl.w	r3, r9, r3
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	9304      	str	r3, [sp, #16]
 800a7a4:	46a2      	mov	sl, r4
 800a7a6:	e7d2      	b.n	800a74e <_vfiprintf_r+0xe2>
 800a7a8:	9b03      	ldr	r3, [sp, #12]
 800a7aa:	1d19      	adds	r1, r3, #4
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	9103      	str	r1, [sp, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	bfbb      	ittet	lt
 800a7b4:	425b      	neglt	r3, r3
 800a7b6:	f042 0202 	orrlt.w	r2, r2, #2
 800a7ba:	9307      	strge	r3, [sp, #28]
 800a7bc:	9307      	strlt	r3, [sp, #28]
 800a7be:	bfb8      	it	lt
 800a7c0:	9204      	strlt	r2, [sp, #16]
 800a7c2:	7823      	ldrb	r3, [r4, #0]
 800a7c4:	2b2e      	cmp	r3, #46	; 0x2e
 800a7c6:	d10c      	bne.n	800a7e2 <_vfiprintf_r+0x176>
 800a7c8:	7863      	ldrb	r3, [r4, #1]
 800a7ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a7cc:	d135      	bne.n	800a83a <_vfiprintf_r+0x1ce>
 800a7ce:	9b03      	ldr	r3, [sp, #12]
 800a7d0:	1d1a      	adds	r2, r3, #4
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	9203      	str	r2, [sp, #12]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	bfb8      	it	lt
 800a7da:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7de:	3402      	adds	r4, #2
 800a7e0:	9305      	str	r3, [sp, #20]
 800a7e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8c8 <_vfiprintf_r+0x25c>
 800a7e6:	7821      	ldrb	r1, [r4, #0]
 800a7e8:	2203      	movs	r2, #3
 800a7ea:	4650      	mov	r0, sl
 800a7ec:	f7f5 fd80 	bl	80002f0 <memchr>
 800a7f0:	b140      	cbz	r0, 800a804 <_vfiprintf_r+0x198>
 800a7f2:	2340      	movs	r3, #64	; 0x40
 800a7f4:	eba0 000a 	sub.w	r0, r0, sl
 800a7f8:	fa03 f000 	lsl.w	r0, r3, r0
 800a7fc:	9b04      	ldr	r3, [sp, #16]
 800a7fe:	4303      	orrs	r3, r0
 800a800:	3401      	adds	r4, #1
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a808:	482c      	ldr	r0, [pc, #176]	; (800a8bc <_vfiprintf_r+0x250>)
 800a80a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a80e:	2206      	movs	r2, #6
 800a810:	f7f5 fd6e 	bl	80002f0 <memchr>
 800a814:	2800      	cmp	r0, #0
 800a816:	d03f      	beq.n	800a898 <_vfiprintf_r+0x22c>
 800a818:	4b29      	ldr	r3, [pc, #164]	; (800a8c0 <_vfiprintf_r+0x254>)
 800a81a:	bb1b      	cbnz	r3, 800a864 <_vfiprintf_r+0x1f8>
 800a81c:	9b03      	ldr	r3, [sp, #12]
 800a81e:	3307      	adds	r3, #7
 800a820:	f023 0307 	bic.w	r3, r3, #7
 800a824:	3308      	adds	r3, #8
 800a826:	9303      	str	r3, [sp, #12]
 800a828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a82a:	443b      	add	r3, r7
 800a82c:	9309      	str	r3, [sp, #36]	; 0x24
 800a82e:	e767      	b.n	800a700 <_vfiprintf_r+0x94>
 800a830:	fb0c 3202 	mla	r2, ip, r2, r3
 800a834:	460c      	mov	r4, r1
 800a836:	2001      	movs	r0, #1
 800a838:	e7a5      	b.n	800a786 <_vfiprintf_r+0x11a>
 800a83a:	2300      	movs	r3, #0
 800a83c:	3401      	adds	r4, #1
 800a83e:	9305      	str	r3, [sp, #20]
 800a840:	4619      	mov	r1, r3
 800a842:	f04f 0c0a 	mov.w	ip, #10
 800a846:	4620      	mov	r0, r4
 800a848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a84c:	3a30      	subs	r2, #48	; 0x30
 800a84e:	2a09      	cmp	r2, #9
 800a850:	d903      	bls.n	800a85a <_vfiprintf_r+0x1ee>
 800a852:	2b00      	cmp	r3, #0
 800a854:	d0c5      	beq.n	800a7e2 <_vfiprintf_r+0x176>
 800a856:	9105      	str	r1, [sp, #20]
 800a858:	e7c3      	b.n	800a7e2 <_vfiprintf_r+0x176>
 800a85a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a85e:	4604      	mov	r4, r0
 800a860:	2301      	movs	r3, #1
 800a862:	e7f0      	b.n	800a846 <_vfiprintf_r+0x1da>
 800a864:	ab03      	add	r3, sp, #12
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	462a      	mov	r2, r5
 800a86a:	4b16      	ldr	r3, [pc, #88]	; (800a8c4 <_vfiprintf_r+0x258>)
 800a86c:	a904      	add	r1, sp, #16
 800a86e:	4630      	mov	r0, r6
 800a870:	f7fd fe6e 	bl	8008550 <_printf_float>
 800a874:	4607      	mov	r7, r0
 800a876:	1c78      	adds	r0, r7, #1
 800a878:	d1d6      	bne.n	800a828 <_vfiprintf_r+0x1bc>
 800a87a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a87c:	07d9      	lsls	r1, r3, #31
 800a87e:	d405      	bmi.n	800a88c <_vfiprintf_r+0x220>
 800a880:	89ab      	ldrh	r3, [r5, #12]
 800a882:	059a      	lsls	r2, r3, #22
 800a884:	d402      	bmi.n	800a88c <_vfiprintf_r+0x220>
 800a886:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a888:	f000 faaf 	bl	800adea <__retarget_lock_release_recursive>
 800a88c:	89ab      	ldrh	r3, [r5, #12]
 800a88e:	065b      	lsls	r3, r3, #25
 800a890:	f53f af12 	bmi.w	800a6b8 <_vfiprintf_r+0x4c>
 800a894:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a896:	e711      	b.n	800a6bc <_vfiprintf_r+0x50>
 800a898:	ab03      	add	r3, sp, #12
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	462a      	mov	r2, r5
 800a89e:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <_vfiprintf_r+0x258>)
 800a8a0:	a904      	add	r1, sp, #16
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f7fe f8e0 	bl	8008a68 <_printf_i>
 800a8a8:	e7e4      	b.n	800a874 <_vfiprintf_r+0x208>
 800a8aa:	bf00      	nop
 800a8ac:	0800b594 	.word	0x0800b594
 800a8b0:	0800b5b4 	.word	0x0800b5b4
 800a8b4:	0800b574 	.word	0x0800b574
 800a8b8:	0800b41c 	.word	0x0800b41c
 800a8bc:	0800b426 	.word	0x0800b426
 800a8c0:	08008551 	.word	0x08008551
 800a8c4:	0800a649 	.word	0x0800a649
 800a8c8:	0800b422 	.word	0x0800b422

0800a8cc <__swbuf_r>:
 800a8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ce:	460e      	mov	r6, r1
 800a8d0:	4614      	mov	r4, r2
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	b118      	cbz	r0, 800a8de <__swbuf_r+0x12>
 800a8d6:	6983      	ldr	r3, [r0, #24]
 800a8d8:	b90b      	cbnz	r3, 800a8de <__swbuf_r+0x12>
 800a8da:	f000 f9e7 	bl	800acac <__sinit>
 800a8de:	4b21      	ldr	r3, [pc, #132]	; (800a964 <__swbuf_r+0x98>)
 800a8e0:	429c      	cmp	r4, r3
 800a8e2:	d12b      	bne.n	800a93c <__swbuf_r+0x70>
 800a8e4:	686c      	ldr	r4, [r5, #4]
 800a8e6:	69a3      	ldr	r3, [r4, #24]
 800a8e8:	60a3      	str	r3, [r4, #8]
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	071a      	lsls	r2, r3, #28
 800a8ee:	d52f      	bpl.n	800a950 <__swbuf_r+0x84>
 800a8f0:	6923      	ldr	r3, [r4, #16]
 800a8f2:	b36b      	cbz	r3, 800a950 <__swbuf_r+0x84>
 800a8f4:	6923      	ldr	r3, [r4, #16]
 800a8f6:	6820      	ldr	r0, [r4, #0]
 800a8f8:	1ac0      	subs	r0, r0, r3
 800a8fa:	6963      	ldr	r3, [r4, #20]
 800a8fc:	b2f6      	uxtb	r6, r6
 800a8fe:	4283      	cmp	r3, r0
 800a900:	4637      	mov	r7, r6
 800a902:	dc04      	bgt.n	800a90e <__swbuf_r+0x42>
 800a904:	4621      	mov	r1, r4
 800a906:	4628      	mov	r0, r5
 800a908:	f000 f93c 	bl	800ab84 <_fflush_r>
 800a90c:	bb30      	cbnz	r0, 800a95c <__swbuf_r+0x90>
 800a90e:	68a3      	ldr	r3, [r4, #8]
 800a910:	3b01      	subs	r3, #1
 800a912:	60a3      	str	r3, [r4, #8]
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	1c5a      	adds	r2, r3, #1
 800a918:	6022      	str	r2, [r4, #0]
 800a91a:	701e      	strb	r6, [r3, #0]
 800a91c:	6963      	ldr	r3, [r4, #20]
 800a91e:	3001      	adds	r0, #1
 800a920:	4283      	cmp	r3, r0
 800a922:	d004      	beq.n	800a92e <__swbuf_r+0x62>
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	07db      	lsls	r3, r3, #31
 800a928:	d506      	bpl.n	800a938 <__swbuf_r+0x6c>
 800a92a:	2e0a      	cmp	r6, #10
 800a92c:	d104      	bne.n	800a938 <__swbuf_r+0x6c>
 800a92e:	4621      	mov	r1, r4
 800a930:	4628      	mov	r0, r5
 800a932:	f000 f927 	bl	800ab84 <_fflush_r>
 800a936:	b988      	cbnz	r0, 800a95c <__swbuf_r+0x90>
 800a938:	4638      	mov	r0, r7
 800a93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a93c:	4b0a      	ldr	r3, [pc, #40]	; (800a968 <__swbuf_r+0x9c>)
 800a93e:	429c      	cmp	r4, r3
 800a940:	d101      	bne.n	800a946 <__swbuf_r+0x7a>
 800a942:	68ac      	ldr	r4, [r5, #8]
 800a944:	e7cf      	b.n	800a8e6 <__swbuf_r+0x1a>
 800a946:	4b09      	ldr	r3, [pc, #36]	; (800a96c <__swbuf_r+0xa0>)
 800a948:	429c      	cmp	r4, r3
 800a94a:	bf08      	it	eq
 800a94c:	68ec      	ldreq	r4, [r5, #12]
 800a94e:	e7ca      	b.n	800a8e6 <__swbuf_r+0x1a>
 800a950:	4621      	mov	r1, r4
 800a952:	4628      	mov	r0, r5
 800a954:	f000 f81a 	bl	800a98c <__swsetup_r>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d0cb      	beq.n	800a8f4 <__swbuf_r+0x28>
 800a95c:	f04f 37ff 	mov.w	r7, #4294967295
 800a960:	e7ea      	b.n	800a938 <__swbuf_r+0x6c>
 800a962:	bf00      	nop
 800a964:	0800b594 	.word	0x0800b594
 800a968:	0800b5b4 	.word	0x0800b5b4
 800a96c:	0800b574 	.word	0x0800b574

0800a970 <__ascii_wctomb>:
 800a970:	b149      	cbz	r1, 800a986 <__ascii_wctomb+0x16>
 800a972:	2aff      	cmp	r2, #255	; 0xff
 800a974:	bf85      	ittet	hi
 800a976:	238a      	movhi	r3, #138	; 0x8a
 800a978:	6003      	strhi	r3, [r0, #0]
 800a97a:	700a      	strbls	r2, [r1, #0]
 800a97c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a980:	bf98      	it	ls
 800a982:	2001      	movls	r0, #1
 800a984:	4770      	bx	lr
 800a986:	4608      	mov	r0, r1
 800a988:	4770      	bx	lr
	...

0800a98c <__swsetup_r>:
 800a98c:	4b32      	ldr	r3, [pc, #200]	; (800aa58 <__swsetup_r+0xcc>)
 800a98e:	b570      	push	{r4, r5, r6, lr}
 800a990:	681d      	ldr	r5, [r3, #0]
 800a992:	4606      	mov	r6, r0
 800a994:	460c      	mov	r4, r1
 800a996:	b125      	cbz	r5, 800a9a2 <__swsetup_r+0x16>
 800a998:	69ab      	ldr	r3, [r5, #24]
 800a99a:	b913      	cbnz	r3, 800a9a2 <__swsetup_r+0x16>
 800a99c:	4628      	mov	r0, r5
 800a99e:	f000 f985 	bl	800acac <__sinit>
 800a9a2:	4b2e      	ldr	r3, [pc, #184]	; (800aa5c <__swsetup_r+0xd0>)
 800a9a4:	429c      	cmp	r4, r3
 800a9a6:	d10f      	bne.n	800a9c8 <__swsetup_r+0x3c>
 800a9a8:	686c      	ldr	r4, [r5, #4]
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9b0:	0719      	lsls	r1, r3, #28
 800a9b2:	d42c      	bmi.n	800aa0e <__swsetup_r+0x82>
 800a9b4:	06dd      	lsls	r5, r3, #27
 800a9b6:	d411      	bmi.n	800a9dc <__swsetup_r+0x50>
 800a9b8:	2309      	movs	r3, #9
 800a9ba:	6033      	str	r3, [r6, #0]
 800a9bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9c0:	81a3      	strh	r3, [r4, #12]
 800a9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c6:	e03e      	b.n	800aa46 <__swsetup_r+0xba>
 800a9c8:	4b25      	ldr	r3, [pc, #148]	; (800aa60 <__swsetup_r+0xd4>)
 800a9ca:	429c      	cmp	r4, r3
 800a9cc:	d101      	bne.n	800a9d2 <__swsetup_r+0x46>
 800a9ce:	68ac      	ldr	r4, [r5, #8]
 800a9d0:	e7eb      	b.n	800a9aa <__swsetup_r+0x1e>
 800a9d2:	4b24      	ldr	r3, [pc, #144]	; (800aa64 <__swsetup_r+0xd8>)
 800a9d4:	429c      	cmp	r4, r3
 800a9d6:	bf08      	it	eq
 800a9d8:	68ec      	ldreq	r4, [r5, #12]
 800a9da:	e7e6      	b.n	800a9aa <__swsetup_r+0x1e>
 800a9dc:	0758      	lsls	r0, r3, #29
 800a9de:	d512      	bpl.n	800aa06 <__swsetup_r+0x7a>
 800a9e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9e2:	b141      	cbz	r1, 800a9f6 <__swsetup_r+0x6a>
 800a9e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9e8:	4299      	cmp	r1, r3
 800a9ea:	d002      	beq.n	800a9f2 <__swsetup_r+0x66>
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f7ff fb31 	bl	800a054 <_free_r>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	6363      	str	r3, [r4, #52]	; 0x34
 800a9f6:	89a3      	ldrh	r3, [r4, #12]
 800a9f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9fc:	81a3      	strh	r3, [r4, #12]
 800a9fe:	2300      	movs	r3, #0
 800aa00:	6063      	str	r3, [r4, #4]
 800aa02:	6923      	ldr	r3, [r4, #16]
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	89a3      	ldrh	r3, [r4, #12]
 800aa08:	f043 0308 	orr.w	r3, r3, #8
 800aa0c:	81a3      	strh	r3, [r4, #12]
 800aa0e:	6923      	ldr	r3, [r4, #16]
 800aa10:	b94b      	cbnz	r3, 800aa26 <__swsetup_r+0x9a>
 800aa12:	89a3      	ldrh	r3, [r4, #12]
 800aa14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa1c:	d003      	beq.n	800aa26 <__swsetup_r+0x9a>
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4630      	mov	r0, r6
 800aa22:	f000 fa09 	bl	800ae38 <__smakebuf_r>
 800aa26:	89a0      	ldrh	r0, [r4, #12]
 800aa28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa2c:	f010 0301 	ands.w	r3, r0, #1
 800aa30:	d00a      	beq.n	800aa48 <__swsetup_r+0xbc>
 800aa32:	2300      	movs	r3, #0
 800aa34:	60a3      	str	r3, [r4, #8]
 800aa36:	6963      	ldr	r3, [r4, #20]
 800aa38:	425b      	negs	r3, r3
 800aa3a:	61a3      	str	r3, [r4, #24]
 800aa3c:	6923      	ldr	r3, [r4, #16]
 800aa3e:	b943      	cbnz	r3, 800aa52 <__swsetup_r+0xc6>
 800aa40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa44:	d1ba      	bne.n	800a9bc <__swsetup_r+0x30>
 800aa46:	bd70      	pop	{r4, r5, r6, pc}
 800aa48:	0781      	lsls	r1, r0, #30
 800aa4a:	bf58      	it	pl
 800aa4c:	6963      	ldrpl	r3, [r4, #20]
 800aa4e:	60a3      	str	r3, [r4, #8]
 800aa50:	e7f4      	b.n	800aa3c <__swsetup_r+0xb0>
 800aa52:	2000      	movs	r0, #0
 800aa54:	e7f7      	b.n	800aa46 <__swsetup_r+0xba>
 800aa56:	bf00      	nop
 800aa58:	24000014 	.word	0x24000014
 800aa5c:	0800b594 	.word	0x0800b594
 800aa60:	0800b5b4 	.word	0x0800b5b4
 800aa64:	0800b574 	.word	0x0800b574

0800aa68 <abort>:
 800aa68:	b508      	push	{r3, lr}
 800aa6a:	2006      	movs	r0, #6
 800aa6c:	f000 fa54 	bl	800af18 <raise>
 800aa70:	2001      	movs	r0, #1
 800aa72:	f7f7 f8d7 	bl	8001c24 <_exit>
	...

0800aa78 <__sflush_r>:
 800aa78:	898a      	ldrh	r2, [r1, #12]
 800aa7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7e:	4605      	mov	r5, r0
 800aa80:	0710      	lsls	r0, r2, #28
 800aa82:	460c      	mov	r4, r1
 800aa84:	d458      	bmi.n	800ab38 <__sflush_r+0xc0>
 800aa86:	684b      	ldr	r3, [r1, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	dc05      	bgt.n	800aa98 <__sflush_r+0x20>
 800aa8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	dc02      	bgt.n	800aa98 <__sflush_r+0x20>
 800aa92:	2000      	movs	r0, #0
 800aa94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa9a:	2e00      	cmp	r6, #0
 800aa9c:	d0f9      	beq.n	800aa92 <__sflush_r+0x1a>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aaa4:	682f      	ldr	r7, [r5, #0]
 800aaa6:	602b      	str	r3, [r5, #0]
 800aaa8:	d032      	beq.n	800ab10 <__sflush_r+0x98>
 800aaaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aaac:	89a3      	ldrh	r3, [r4, #12]
 800aaae:	075a      	lsls	r2, r3, #29
 800aab0:	d505      	bpl.n	800aabe <__sflush_r+0x46>
 800aab2:	6863      	ldr	r3, [r4, #4]
 800aab4:	1ac0      	subs	r0, r0, r3
 800aab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aab8:	b10b      	cbz	r3, 800aabe <__sflush_r+0x46>
 800aaba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aabc:	1ac0      	subs	r0, r0, r3
 800aabe:	2300      	movs	r3, #0
 800aac0:	4602      	mov	r2, r0
 800aac2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aac4:	6a21      	ldr	r1, [r4, #32]
 800aac6:	4628      	mov	r0, r5
 800aac8:	47b0      	blx	r6
 800aaca:	1c43      	adds	r3, r0, #1
 800aacc:	89a3      	ldrh	r3, [r4, #12]
 800aace:	d106      	bne.n	800aade <__sflush_r+0x66>
 800aad0:	6829      	ldr	r1, [r5, #0]
 800aad2:	291d      	cmp	r1, #29
 800aad4:	d82c      	bhi.n	800ab30 <__sflush_r+0xb8>
 800aad6:	4a2a      	ldr	r2, [pc, #168]	; (800ab80 <__sflush_r+0x108>)
 800aad8:	40ca      	lsrs	r2, r1
 800aada:	07d6      	lsls	r6, r2, #31
 800aadc:	d528      	bpl.n	800ab30 <__sflush_r+0xb8>
 800aade:	2200      	movs	r2, #0
 800aae0:	6062      	str	r2, [r4, #4]
 800aae2:	04d9      	lsls	r1, r3, #19
 800aae4:	6922      	ldr	r2, [r4, #16]
 800aae6:	6022      	str	r2, [r4, #0]
 800aae8:	d504      	bpl.n	800aaf4 <__sflush_r+0x7c>
 800aaea:	1c42      	adds	r2, r0, #1
 800aaec:	d101      	bne.n	800aaf2 <__sflush_r+0x7a>
 800aaee:	682b      	ldr	r3, [r5, #0]
 800aaf0:	b903      	cbnz	r3, 800aaf4 <__sflush_r+0x7c>
 800aaf2:	6560      	str	r0, [r4, #84]	; 0x54
 800aaf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaf6:	602f      	str	r7, [r5, #0]
 800aaf8:	2900      	cmp	r1, #0
 800aafa:	d0ca      	beq.n	800aa92 <__sflush_r+0x1a>
 800aafc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab00:	4299      	cmp	r1, r3
 800ab02:	d002      	beq.n	800ab0a <__sflush_r+0x92>
 800ab04:	4628      	mov	r0, r5
 800ab06:	f7ff faa5 	bl	800a054 <_free_r>
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	6360      	str	r0, [r4, #52]	; 0x34
 800ab0e:	e7c1      	b.n	800aa94 <__sflush_r+0x1c>
 800ab10:	6a21      	ldr	r1, [r4, #32]
 800ab12:	2301      	movs	r3, #1
 800ab14:	4628      	mov	r0, r5
 800ab16:	47b0      	blx	r6
 800ab18:	1c41      	adds	r1, r0, #1
 800ab1a:	d1c7      	bne.n	800aaac <__sflush_r+0x34>
 800ab1c:	682b      	ldr	r3, [r5, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d0c4      	beq.n	800aaac <__sflush_r+0x34>
 800ab22:	2b1d      	cmp	r3, #29
 800ab24:	d001      	beq.n	800ab2a <__sflush_r+0xb2>
 800ab26:	2b16      	cmp	r3, #22
 800ab28:	d101      	bne.n	800ab2e <__sflush_r+0xb6>
 800ab2a:	602f      	str	r7, [r5, #0]
 800ab2c:	e7b1      	b.n	800aa92 <__sflush_r+0x1a>
 800ab2e:	89a3      	ldrh	r3, [r4, #12]
 800ab30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab34:	81a3      	strh	r3, [r4, #12]
 800ab36:	e7ad      	b.n	800aa94 <__sflush_r+0x1c>
 800ab38:	690f      	ldr	r7, [r1, #16]
 800ab3a:	2f00      	cmp	r7, #0
 800ab3c:	d0a9      	beq.n	800aa92 <__sflush_r+0x1a>
 800ab3e:	0793      	lsls	r3, r2, #30
 800ab40:	680e      	ldr	r6, [r1, #0]
 800ab42:	bf08      	it	eq
 800ab44:	694b      	ldreq	r3, [r1, #20]
 800ab46:	600f      	str	r7, [r1, #0]
 800ab48:	bf18      	it	ne
 800ab4a:	2300      	movne	r3, #0
 800ab4c:	eba6 0807 	sub.w	r8, r6, r7
 800ab50:	608b      	str	r3, [r1, #8]
 800ab52:	f1b8 0f00 	cmp.w	r8, #0
 800ab56:	dd9c      	ble.n	800aa92 <__sflush_r+0x1a>
 800ab58:	6a21      	ldr	r1, [r4, #32]
 800ab5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab5c:	4643      	mov	r3, r8
 800ab5e:	463a      	mov	r2, r7
 800ab60:	4628      	mov	r0, r5
 800ab62:	47b0      	blx	r6
 800ab64:	2800      	cmp	r0, #0
 800ab66:	dc06      	bgt.n	800ab76 <__sflush_r+0xfe>
 800ab68:	89a3      	ldrh	r3, [r4, #12]
 800ab6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab6e:	81a3      	strh	r3, [r4, #12]
 800ab70:	f04f 30ff 	mov.w	r0, #4294967295
 800ab74:	e78e      	b.n	800aa94 <__sflush_r+0x1c>
 800ab76:	4407      	add	r7, r0
 800ab78:	eba8 0800 	sub.w	r8, r8, r0
 800ab7c:	e7e9      	b.n	800ab52 <__sflush_r+0xda>
 800ab7e:	bf00      	nop
 800ab80:	20400001 	.word	0x20400001

0800ab84 <_fflush_r>:
 800ab84:	b538      	push	{r3, r4, r5, lr}
 800ab86:	690b      	ldr	r3, [r1, #16]
 800ab88:	4605      	mov	r5, r0
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	b913      	cbnz	r3, 800ab94 <_fflush_r+0x10>
 800ab8e:	2500      	movs	r5, #0
 800ab90:	4628      	mov	r0, r5
 800ab92:	bd38      	pop	{r3, r4, r5, pc}
 800ab94:	b118      	cbz	r0, 800ab9e <_fflush_r+0x1a>
 800ab96:	6983      	ldr	r3, [r0, #24]
 800ab98:	b90b      	cbnz	r3, 800ab9e <_fflush_r+0x1a>
 800ab9a:	f000 f887 	bl	800acac <__sinit>
 800ab9e:	4b14      	ldr	r3, [pc, #80]	; (800abf0 <_fflush_r+0x6c>)
 800aba0:	429c      	cmp	r4, r3
 800aba2:	d11b      	bne.n	800abdc <_fflush_r+0x58>
 800aba4:	686c      	ldr	r4, [r5, #4]
 800aba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0ef      	beq.n	800ab8e <_fflush_r+0xa>
 800abae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abb0:	07d0      	lsls	r0, r2, #31
 800abb2:	d404      	bmi.n	800abbe <_fflush_r+0x3a>
 800abb4:	0599      	lsls	r1, r3, #22
 800abb6:	d402      	bmi.n	800abbe <_fflush_r+0x3a>
 800abb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abba:	f000 f915 	bl	800ade8 <__retarget_lock_acquire_recursive>
 800abbe:	4628      	mov	r0, r5
 800abc0:	4621      	mov	r1, r4
 800abc2:	f7ff ff59 	bl	800aa78 <__sflush_r>
 800abc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abc8:	07da      	lsls	r2, r3, #31
 800abca:	4605      	mov	r5, r0
 800abcc:	d4e0      	bmi.n	800ab90 <_fflush_r+0xc>
 800abce:	89a3      	ldrh	r3, [r4, #12]
 800abd0:	059b      	lsls	r3, r3, #22
 800abd2:	d4dd      	bmi.n	800ab90 <_fflush_r+0xc>
 800abd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abd6:	f000 f908 	bl	800adea <__retarget_lock_release_recursive>
 800abda:	e7d9      	b.n	800ab90 <_fflush_r+0xc>
 800abdc:	4b05      	ldr	r3, [pc, #20]	; (800abf4 <_fflush_r+0x70>)
 800abde:	429c      	cmp	r4, r3
 800abe0:	d101      	bne.n	800abe6 <_fflush_r+0x62>
 800abe2:	68ac      	ldr	r4, [r5, #8]
 800abe4:	e7df      	b.n	800aba6 <_fflush_r+0x22>
 800abe6:	4b04      	ldr	r3, [pc, #16]	; (800abf8 <_fflush_r+0x74>)
 800abe8:	429c      	cmp	r4, r3
 800abea:	bf08      	it	eq
 800abec:	68ec      	ldreq	r4, [r5, #12]
 800abee:	e7da      	b.n	800aba6 <_fflush_r+0x22>
 800abf0:	0800b594 	.word	0x0800b594
 800abf4:	0800b5b4 	.word	0x0800b5b4
 800abf8:	0800b574 	.word	0x0800b574

0800abfc <std>:
 800abfc:	2300      	movs	r3, #0
 800abfe:	b510      	push	{r4, lr}
 800ac00:	4604      	mov	r4, r0
 800ac02:	e9c0 3300 	strd	r3, r3, [r0]
 800ac06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac0a:	6083      	str	r3, [r0, #8]
 800ac0c:	8181      	strh	r1, [r0, #12]
 800ac0e:	6643      	str	r3, [r0, #100]	; 0x64
 800ac10:	81c2      	strh	r2, [r0, #14]
 800ac12:	6183      	str	r3, [r0, #24]
 800ac14:	4619      	mov	r1, r3
 800ac16:	2208      	movs	r2, #8
 800ac18:	305c      	adds	r0, #92	; 0x5c
 800ac1a:	f7fd fbff 	bl	800841c <memset>
 800ac1e:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <std+0x38>)
 800ac20:	6263      	str	r3, [r4, #36]	; 0x24
 800ac22:	4b05      	ldr	r3, [pc, #20]	; (800ac38 <std+0x3c>)
 800ac24:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac26:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <std+0x40>)
 800ac28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac2a:	4b05      	ldr	r3, [pc, #20]	; (800ac40 <std+0x44>)
 800ac2c:	6224      	str	r4, [r4, #32]
 800ac2e:	6323      	str	r3, [r4, #48]	; 0x30
 800ac30:	bd10      	pop	{r4, pc}
 800ac32:	bf00      	nop
 800ac34:	0800af51 	.word	0x0800af51
 800ac38:	0800af73 	.word	0x0800af73
 800ac3c:	0800afab 	.word	0x0800afab
 800ac40:	0800afcf 	.word	0x0800afcf

0800ac44 <_cleanup_r>:
 800ac44:	4901      	ldr	r1, [pc, #4]	; (800ac4c <_cleanup_r+0x8>)
 800ac46:	f000 b8af 	b.w	800ada8 <_fwalk_reent>
 800ac4a:	bf00      	nop
 800ac4c:	0800ab85 	.word	0x0800ab85

0800ac50 <__sfmoreglue>:
 800ac50:	b570      	push	{r4, r5, r6, lr}
 800ac52:	2268      	movs	r2, #104	; 0x68
 800ac54:	1e4d      	subs	r5, r1, #1
 800ac56:	4355      	muls	r5, r2
 800ac58:	460e      	mov	r6, r1
 800ac5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac5e:	f7ff fa65 	bl	800a12c <_malloc_r>
 800ac62:	4604      	mov	r4, r0
 800ac64:	b140      	cbz	r0, 800ac78 <__sfmoreglue+0x28>
 800ac66:	2100      	movs	r1, #0
 800ac68:	e9c0 1600 	strd	r1, r6, [r0]
 800ac6c:	300c      	adds	r0, #12
 800ac6e:	60a0      	str	r0, [r4, #8]
 800ac70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac74:	f7fd fbd2 	bl	800841c <memset>
 800ac78:	4620      	mov	r0, r4
 800ac7a:	bd70      	pop	{r4, r5, r6, pc}

0800ac7c <__sfp_lock_acquire>:
 800ac7c:	4801      	ldr	r0, [pc, #4]	; (800ac84 <__sfp_lock_acquire+0x8>)
 800ac7e:	f000 b8b3 	b.w	800ade8 <__retarget_lock_acquire_recursive>
 800ac82:	bf00      	nop
 800ac84:	240008a5 	.word	0x240008a5

0800ac88 <__sfp_lock_release>:
 800ac88:	4801      	ldr	r0, [pc, #4]	; (800ac90 <__sfp_lock_release+0x8>)
 800ac8a:	f000 b8ae 	b.w	800adea <__retarget_lock_release_recursive>
 800ac8e:	bf00      	nop
 800ac90:	240008a5 	.word	0x240008a5

0800ac94 <__sinit_lock_acquire>:
 800ac94:	4801      	ldr	r0, [pc, #4]	; (800ac9c <__sinit_lock_acquire+0x8>)
 800ac96:	f000 b8a7 	b.w	800ade8 <__retarget_lock_acquire_recursive>
 800ac9a:	bf00      	nop
 800ac9c:	240008a6 	.word	0x240008a6

0800aca0 <__sinit_lock_release>:
 800aca0:	4801      	ldr	r0, [pc, #4]	; (800aca8 <__sinit_lock_release+0x8>)
 800aca2:	f000 b8a2 	b.w	800adea <__retarget_lock_release_recursive>
 800aca6:	bf00      	nop
 800aca8:	240008a6 	.word	0x240008a6

0800acac <__sinit>:
 800acac:	b510      	push	{r4, lr}
 800acae:	4604      	mov	r4, r0
 800acb0:	f7ff fff0 	bl	800ac94 <__sinit_lock_acquire>
 800acb4:	69a3      	ldr	r3, [r4, #24]
 800acb6:	b11b      	cbz	r3, 800acc0 <__sinit+0x14>
 800acb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acbc:	f7ff bff0 	b.w	800aca0 <__sinit_lock_release>
 800acc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800acc4:	6523      	str	r3, [r4, #80]	; 0x50
 800acc6:	4b13      	ldr	r3, [pc, #76]	; (800ad14 <__sinit+0x68>)
 800acc8:	4a13      	ldr	r2, [pc, #76]	; (800ad18 <__sinit+0x6c>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	62a2      	str	r2, [r4, #40]	; 0x28
 800acce:	42a3      	cmp	r3, r4
 800acd0:	bf04      	itt	eq
 800acd2:	2301      	moveq	r3, #1
 800acd4:	61a3      	streq	r3, [r4, #24]
 800acd6:	4620      	mov	r0, r4
 800acd8:	f000 f820 	bl	800ad1c <__sfp>
 800acdc:	6060      	str	r0, [r4, #4]
 800acde:	4620      	mov	r0, r4
 800ace0:	f000 f81c 	bl	800ad1c <__sfp>
 800ace4:	60a0      	str	r0, [r4, #8]
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 f818 	bl	800ad1c <__sfp>
 800acec:	2200      	movs	r2, #0
 800acee:	60e0      	str	r0, [r4, #12]
 800acf0:	2104      	movs	r1, #4
 800acf2:	6860      	ldr	r0, [r4, #4]
 800acf4:	f7ff ff82 	bl	800abfc <std>
 800acf8:	68a0      	ldr	r0, [r4, #8]
 800acfa:	2201      	movs	r2, #1
 800acfc:	2109      	movs	r1, #9
 800acfe:	f7ff ff7d 	bl	800abfc <std>
 800ad02:	68e0      	ldr	r0, [r4, #12]
 800ad04:	2202      	movs	r2, #2
 800ad06:	2112      	movs	r1, #18
 800ad08:	f7ff ff78 	bl	800abfc <std>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	61a3      	str	r3, [r4, #24]
 800ad10:	e7d2      	b.n	800acb8 <__sinit+0xc>
 800ad12:	bf00      	nop
 800ad14:	0800b1fc 	.word	0x0800b1fc
 800ad18:	0800ac45 	.word	0x0800ac45

0800ad1c <__sfp>:
 800ad1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1e:	4607      	mov	r7, r0
 800ad20:	f7ff ffac 	bl	800ac7c <__sfp_lock_acquire>
 800ad24:	4b1e      	ldr	r3, [pc, #120]	; (800ada0 <__sfp+0x84>)
 800ad26:	681e      	ldr	r6, [r3, #0]
 800ad28:	69b3      	ldr	r3, [r6, #24]
 800ad2a:	b913      	cbnz	r3, 800ad32 <__sfp+0x16>
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	f7ff ffbd 	bl	800acac <__sinit>
 800ad32:	3648      	adds	r6, #72	; 0x48
 800ad34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	d503      	bpl.n	800ad44 <__sfp+0x28>
 800ad3c:	6833      	ldr	r3, [r6, #0]
 800ad3e:	b30b      	cbz	r3, 800ad84 <__sfp+0x68>
 800ad40:	6836      	ldr	r6, [r6, #0]
 800ad42:	e7f7      	b.n	800ad34 <__sfp+0x18>
 800ad44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad48:	b9d5      	cbnz	r5, 800ad80 <__sfp+0x64>
 800ad4a:	4b16      	ldr	r3, [pc, #88]	; (800ada4 <__sfp+0x88>)
 800ad4c:	60e3      	str	r3, [r4, #12]
 800ad4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad52:	6665      	str	r5, [r4, #100]	; 0x64
 800ad54:	f000 f847 	bl	800ade6 <__retarget_lock_init_recursive>
 800ad58:	f7ff ff96 	bl	800ac88 <__sfp_lock_release>
 800ad5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad64:	6025      	str	r5, [r4, #0]
 800ad66:	61a5      	str	r5, [r4, #24]
 800ad68:	2208      	movs	r2, #8
 800ad6a:	4629      	mov	r1, r5
 800ad6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad70:	f7fd fb54 	bl	800841c <memset>
 800ad74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad80:	3468      	adds	r4, #104	; 0x68
 800ad82:	e7d9      	b.n	800ad38 <__sfp+0x1c>
 800ad84:	2104      	movs	r1, #4
 800ad86:	4638      	mov	r0, r7
 800ad88:	f7ff ff62 	bl	800ac50 <__sfmoreglue>
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	6030      	str	r0, [r6, #0]
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d1d5      	bne.n	800ad40 <__sfp+0x24>
 800ad94:	f7ff ff78 	bl	800ac88 <__sfp_lock_release>
 800ad98:	230c      	movs	r3, #12
 800ad9a:	603b      	str	r3, [r7, #0]
 800ad9c:	e7ee      	b.n	800ad7c <__sfp+0x60>
 800ad9e:	bf00      	nop
 800ada0:	0800b1fc 	.word	0x0800b1fc
 800ada4:	ffff0001 	.word	0xffff0001

0800ada8 <_fwalk_reent>:
 800ada8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adac:	4606      	mov	r6, r0
 800adae:	4688      	mov	r8, r1
 800adb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adb4:	2700      	movs	r7, #0
 800adb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adba:	f1b9 0901 	subs.w	r9, r9, #1
 800adbe:	d505      	bpl.n	800adcc <_fwalk_reent+0x24>
 800adc0:	6824      	ldr	r4, [r4, #0]
 800adc2:	2c00      	cmp	r4, #0
 800adc4:	d1f7      	bne.n	800adb6 <_fwalk_reent+0xe>
 800adc6:	4638      	mov	r0, r7
 800adc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adcc:	89ab      	ldrh	r3, [r5, #12]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d907      	bls.n	800ade2 <_fwalk_reent+0x3a>
 800add2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800add6:	3301      	adds	r3, #1
 800add8:	d003      	beq.n	800ade2 <_fwalk_reent+0x3a>
 800adda:	4629      	mov	r1, r5
 800addc:	4630      	mov	r0, r6
 800adde:	47c0      	blx	r8
 800ade0:	4307      	orrs	r7, r0
 800ade2:	3568      	adds	r5, #104	; 0x68
 800ade4:	e7e9      	b.n	800adba <_fwalk_reent+0x12>

0800ade6 <__retarget_lock_init_recursive>:
 800ade6:	4770      	bx	lr

0800ade8 <__retarget_lock_acquire_recursive>:
 800ade8:	4770      	bx	lr

0800adea <__retarget_lock_release_recursive>:
 800adea:	4770      	bx	lr

0800adec <__swhatbuf_r>:
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	460e      	mov	r6, r1
 800adf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf4:	2900      	cmp	r1, #0
 800adf6:	b096      	sub	sp, #88	; 0x58
 800adf8:	4614      	mov	r4, r2
 800adfa:	461d      	mov	r5, r3
 800adfc:	da08      	bge.n	800ae10 <__swhatbuf_r+0x24>
 800adfe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	602a      	str	r2, [r5, #0]
 800ae06:	061a      	lsls	r2, r3, #24
 800ae08:	d410      	bmi.n	800ae2c <__swhatbuf_r+0x40>
 800ae0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae0e:	e00e      	b.n	800ae2e <__swhatbuf_r+0x42>
 800ae10:	466a      	mov	r2, sp
 800ae12:	f000 f903 	bl	800b01c <_fstat_r>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	dbf1      	blt.n	800adfe <__swhatbuf_r+0x12>
 800ae1a:	9a01      	ldr	r2, [sp, #4]
 800ae1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae24:	425a      	negs	r2, r3
 800ae26:	415a      	adcs	r2, r3
 800ae28:	602a      	str	r2, [r5, #0]
 800ae2a:	e7ee      	b.n	800ae0a <__swhatbuf_r+0x1e>
 800ae2c:	2340      	movs	r3, #64	; 0x40
 800ae2e:	2000      	movs	r0, #0
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	b016      	add	sp, #88	; 0x58
 800ae34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae38 <__smakebuf_r>:
 800ae38:	898b      	ldrh	r3, [r1, #12]
 800ae3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae3c:	079d      	lsls	r5, r3, #30
 800ae3e:	4606      	mov	r6, r0
 800ae40:	460c      	mov	r4, r1
 800ae42:	d507      	bpl.n	800ae54 <__smakebuf_r+0x1c>
 800ae44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	6123      	str	r3, [r4, #16]
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	6163      	str	r3, [r4, #20]
 800ae50:	b002      	add	sp, #8
 800ae52:	bd70      	pop	{r4, r5, r6, pc}
 800ae54:	ab01      	add	r3, sp, #4
 800ae56:	466a      	mov	r2, sp
 800ae58:	f7ff ffc8 	bl	800adec <__swhatbuf_r>
 800ae5c:	9900      	ldr	r1, [sp, #0]
 800ae5e:	4605      	mov	r5, r0
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7ff f963 	bl	800a12c <_malloc_r>
 800ae66:	b948      	cbnz	r0, 800ae7c <__smakebuf_r+0x44>
 800ae68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae6c:	059a      	lsls	r2, r3, #22
 800ae6e:	d4ef      	bmi.n	800ae50 <__smakebuf_r+0x18>
 800ae70:	f023 0303 	bic.w	r3, r3, #3
 800ae74:	f043 0302 	orr.w	r3, r3, #2
 800ae78:	81a3      	strh	r3, [r4, #12]
 800ae7a:	e7e3      	b.n	800ae44 <__smakebuf_r+0xc>
 800ae7c:	4b0d      	ldr	r3, [pc, #52]	; (800aeb4 <__smakebuf_r+0x7c>)
 800ae7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae80:	89a3      	ldrh	r3, [r4, #12]
 800ae82:	6020      	str	r0, [r4, #0]
 800ae84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae88:	81a3      	strh	r3, [r4, #12]
 800ae8a:	9b00      	ldr	r3, [sp, #0]
 800ae8c:	6163      	str	r3, [r4, #20]
 800ae8e:	9b01      	ldr	r3, [sp, #4]
 800ae90:	6120      	str	r0, [r4, #16]
 800ae92:	b15b      	cbz	r3, 800aeac <__smakebuf_r+0x74>
 800ae94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae98:	4630      	mov	r0, r6
 800ae9a:	f000 f8d1 	bl	800b040 <_isatty_r>
 800ae9e:	b128      	cbz	r0, 800aeac <__smakebuf_r+0x74>
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	f023 0303 	bic.w	r3, r3, #3
 800aea6:	f043 0301 	orr.w	r3, r3, #1
 800aeaa:	81a3      	strh	r3, [r4, #12]
 800aeac:	89a0      	ldrh	r0, [r4, #12]
 800aeae:	4305      	orrs	r5, r0
 800aeb0:	81a5      	strh	r5, [r4, #12]
 800aeb2:	e7cd      	b.n	800ae50 <__smakebuf_r+0x18>
 800aeb4:	0800ac45 	.word	0x0800ac45

0800aeb8 <_malloc_usable_size_r>:
 800aeb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aebc:	1f18      	subs	r0, r3, #4
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	bfbc      	itt	lt
 800aec2:	580b      	ldrlt	r3, [r1, r0]
 800aec4:	18c0      	addlt	r0, r0, r3
 800aec6:	4770      	bx	lr

0800aec8 <_raise_r>:
 800aec8:	291f      	cmp	r1, #31
 800aeca:	b538      	push	{r3, r4, r5, lr}
 800aecc:	4604      	mov	r4, r0
 800aece:	460d      	mov	r5, r1
 800aed0:	d904      	bls.n	800aedc <_raise_r+0x14>
 800aed2:	2316      	movs	r3, #22
 800aed4:	6003      	str	r3, [r0, #0]
 800aed6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeda:	bd38      	pop	{r3, r4, r5, pc}
 800aedc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aede:	b112      	cbz	r2, 800aee6 <_raise_r+0x1e>
 800aee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aee4:	b94b      	cbnz	r3, 800aefa <_raise_r+0x32>
 800aee6:	4620      	mov	r0, r4
 800aee8:	f000 f830 	bl	800af4c <_getpid_r>
 800aeec:	462a      	mov	r2, r5
 800aeee:	4601      	mov	r1, r0
 800aef0:	4620      	mov	r0, r4
 800aef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aef6:	f000 b817 	b.w	800af28 <_kill_r>
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d00a      	beq.n	800af14 <_raise_r+0x4c>
 800aefe:	1c59      	adds	r1, r3, #1
 800af00:	d103      	bne.n	800af0a <_raise_r+0x42>
 800af02:	2316      	movs	r3, #22
 800af04:	6003      	str	r3, [r0, #0]
 800af06:	2001      	movs	r0, #1
 800af08:	e7e7      	b.n	800aeda <_raise_r+0x12>
 800af0a:	2400      	movs	r4, #0
 800af0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af10:	4628      	mov	r0, r5
 800af12:	4798      	blx	r3
 800af14:	2000      	movs	r0, #0
 800af16:	e7e0      	b.n	800aeda <_raise_r+0x12>

0800af18 <raise>:
 800af18:	4b02      	ldr	r3, [pc, #8]	; (800af24 <raise+0xc>)
 800af1a:	4601      	mov	r1, r0
 800af1c:	6818      	ldr	r0, [r3, #0]
 800af1e:	f7ff bfd3 	b.w	800aec8 <_raise_r>
 800af22:	bf00      	nop
 800af24:	24000014 	.word	0x24000014

0800af28 <_kill_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4d07      	ldr	r5, [pc, #28]	; (800af48 <_kill_r+0x20>)
 800af2c:	2300      	movs	r3, #0
 800af2e:	4604      	mov	r4, r0
 800af30:	4608      	mov	r0, r1
 800af32:	4611      	mov	r1, r2
 800af34:	602b      	str	r3, [r5, #0]
 800af36:	f7f6 fe65 	bl	8001c04 <_kill>
 800af3a:	1c43      	adds	r3, r0, #1
 800af3c:	d102      	bne.n	800af44 <_kill_r+0x1c>
 800af3e:	682b      	ldr	r3, [r5, #0]
 800af40:	b103      	cbz	r3, 800af44 <_kill_r+0x1c>
 800af42:	6023      	str	r3, [r4, #0]
 800af44:	bd38      	pop	{r3, r4, r5, pc}
 800af46:	bf00      	nop
 800af48:	240008a0 	.word	0x240008a0

0800af4c <_getpid_r>:
 800af4c:	f7f6 be52 	b.w	8001bf4 <_getpid>

0800af50 <__sread>:
 800af50:	b510      	push	{r4, lr}
 800af52:	460c      	mov	r4, r1
 800af54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af58:	f000 f894 	bl	800b084 <_read_r>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	bfab      	itete	ge
 800af60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af62:	89a3      	ldrhlt	r3, [r4, #12]
 800af64:	181b      	addge	r3, r3, r0
 800af66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af6a:	bfac      	ite	ge
 800af6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800af6e:	81a3      	strhlt	r3, [r4, #12]
 800af70:	bd10      	pop	{r4, pc}

0800af72 <__swrite>:
 800af72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af76:	461f      	mov	r7, r3
 800af78:	898b      	ldrh	r3, [r1, #12]
 800af7a:	05db      	lsls	r3, r3, #23
 800af7c:	4605      	mov	r5, r0
 800af7e:	460c      	mov	r4, r1
 800af80:	4616      	mov	r6, r2
 800af82:	d505      	bpl.n	800af90 <__swrite+0x1e>
 800af84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af88:	2302      	movs	r3, #2
 800af8a:	2200      	movs	r2, #0
 800af8c:	f000 f868 	bl	800b060 <_lseek_r>
 800af90:	89a3      	ldrh	r3, [r4, #12]
 800af92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af9a:	81a3      	strh	r3, [r4, #12]
 800af9c:	4632      	mov	r2, r6
 800af9e:	463b      	mov	r3, r7
 800afa0:	4628      	mov	r0, r5
 800afa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afa6:	f000 b817 	b.w	800afd8 <_write_r>

0800afaa <__sseek>:
 800afaa:	b510      	push	{r4, lr}
 800afac:	460c      	mov	r4, r1
 800afae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afb2:	f000 f855 	bl	800b060 <_lseek_r>
 800afb6:	1c43      	adds	r3, r0, #1
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	bf15      	itete	ne
 800afbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800afbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afc6:	81a3      	strheq	r3, [r4, #12]
 800afc8:	bf18      	it	ne
 800afca:	81a3      	strhne	r3, [r4, #12]
 800afcc:	bd10      	pop	{r4, pc}

0800afce <__sclose>:
 800afce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afd2:	f000 b813 	b.w	800affc <_close_r>
	...

0800afd8 <_write_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d07      	ldr	r5, [pc, #28]	; (800aff8 <_write_r+0x20>)
 800afdc:	4604      	mov	r4, r0
 800afde:	4608      	mov	r0, r1
 800afe0:	4611      	mov	r1, r2
 800afe2:	2200      	movs	r2, #0
 800afe4:	602a      	str	r2, [r5, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	f7f6 fe43 	bl	8001c72 <_write>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d102      	bne.n	800aff6 <_write_r+0x1e>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	b103      	cbz	r3, 800aff6 <_write_r+0x1e>
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	240008a0 	.word	0x240008a0

0800affc <_close_r>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	4d06      	ldr	r5, [pc, #24]	; (800b018 <_close_r+0x1c>)
 800b000:	2300      	movs	r3, #0
 800b002:	4604      	mov	r4, r0
 800b004:	4608      	mov	r0, r1
 800b006:	602b      	str	r3, [r5, #0]
 800b008:	f7f6 fe4f 	bl	8001caa <_close>
 800b00c:	1c43      	adds	r3, r0, #1
 800b00e:	d102      	bne.n	800b016 <_close_r+0x1a>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	b103      	cbz	r3, 800b016 <_close_r+0x1a>
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	bd38      	pop	{r3, r4, r5, pc}
 800b018:	240008a0 	.word	0x240008a0

0800b01c <_fstat_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4d07      	ldr	r5, [pc, #28]	; (800b03c <_fstat_r+0x20>)
 800b020:	2300      	movs	r3, #0
 800b022:	4604      	mov	r4, r0
 800b024:	4608      	mov	r0, r1
 800b026:	4611      	mov	r1, r2
 800b028:	602b      	str	r3, [r5, #0]
 800b02a:	f7f6 fe4a 	bl	8001cc2 <_fstat>
 800b02e:	1c43      	adds	r3, r0, #1
 800b030:	d102      	bne.n	800b038 <_fstat_r+0x1c>
 800b032:	682b      	ldr	r3, [r5, #0]
 800b034:	b103      	cbz	r3, 800b038 <_fstat_r+0x1c>
 800b036:	6023      	str	r3, [r4, #0]
 800b038:	bd38      	pop	{r3, r4, r5, pc}
 800b03a:	bf00      	nop
 800b03c:	240008a0 	.word	0x240008a0

0800b040 <_isatty_r>:
 800b040:	b538      	push	{r3, r4, r5, lr}
 800b042:	4d06      	ldr	r5, [pc, #24]	; (800b05c <_isatty_r+0x1c>)
 800b044:	2300      	movs	r3, #0
 800b046:	4604      	mov	r4, r0
 800b048:	4608      	mov	r0, r1
 800b04a:	602b      	str	r3, [r5, #0]
 800b04c:	f7f6 fe49 	bl	8001ce2 <_isatty>
 800b050:	1c43      	adds	r3, r0, #1
 800b052:	d102      	bne.n	800b05a <_isatty_r+0x1a>
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	b103      	cbz	r3, 800b05a <_isatty_r+0x1a>
 800b058:	6023      	str	r3, [r4, #0]
 800b05a:	bd38      	pop	{r3, r4, r5, pc}
 800b05c:	240008a0 	.word	0x240008a0

0800b060 <_lseek_r>:
 800b060:	b538      	push	{r3, r4, r5, lr}
 800b062:	4d07      	ldr	r5, [pc, #28]	; (800b080 <_lseek_r+0x20>)
 800b064:	4604      	mov	r4, r0
 800b066:	4608      	mov	r0, r1
 800b068:	4611      	mov	r1, r2
 800b06a:	2200      	movs	r2, #0
 800b06c:	602a      	str	r2, [r5, #0]
 800b06e:	461a      	mov	r2, r3
 800b070:	f7f6 fe42 	bl	8001cf8 <_lseek>
 800b074:	1c43      	adds	r3, r0, #1
 800b076:	d102      	bne.n	800b07e <_lseek_r+0x1e>
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	b103      	cbz	r3, 800b07e <_lseek_r+0x1e>
 800b07c:	6023      	str	r3, [r4, #0]
 800b07e:	bd38      	pop	{r3, r4, r5, pc}
 800b080:	240008a0 	.word	0x240008a0

0800b084 <_read_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	4d07      	ldr	r5, [pc, #28]	; (800b0a4 <_read_r+0x20>)
 800b088:	4604      	mov	r4, r0
 800b08a:	4608      	mov	r0, r1
 800b08c:	4611      	mov	r1, r2
 800b08e:	2200      	movs	r2, #0
 800b090:	602a      	str	r2, [r5, #0]
 800b092:	461a      	mov	r2, r3
 800b094:	f7f6 fdd0 	bl	8001c38 <_read>
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	d102      	bne.n	800b0a2 <_read_r+0x1e>
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	b103      	cbz	r3, 800b0a2 <_read_r+0x1e>
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	240008a0 	.word	0x240008a0

0800b0a8 <_init>:
 800b0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0aa:	bf00      	nop
 800b0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ae:	bc08      	pop	{r3}
 800b0b0:	469e      	mov	lr, r3
 800b0b2:	4770      	bx	lr

0800b0b4 <_fini>:
 800b0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b6:	bf00      	nop
 800b0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ba:	bc08      	pop	{r3}
 800b0bc:	469e      	mov	lr, r3
 800b0be:	4770      	bx	lr
