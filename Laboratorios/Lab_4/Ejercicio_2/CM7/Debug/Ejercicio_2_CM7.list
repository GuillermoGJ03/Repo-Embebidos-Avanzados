
Ejercicio_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f90  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006260  08006260  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006260  08006260  00016260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006268  08006268  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800626c  0800626c  0001626c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  24000010  08006280  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000158  08006280  00020158  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018afd  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271e  00000000  00000000  00038b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0003b260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003c5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039ef1  00000000  00000000  0003d838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018978  00000000  00000000  00077729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018404f  00000000  00000000  000900a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002140f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005354  00000000  00000000  00214140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006210 	.word	0x08006210

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08006210 	.word	0x08006210

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b3f      	ldr	r3, [pc, #252]	; (8000814 <main+0x10c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	60fa      	str	r2, [r7, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 fa63 	bl	8000bfc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fbf9 	bl	8000f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f871 	bl	8000820 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b35      	ldr	r3, [pc, #212]	; (8000814 <main+0x10c>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a33      	ldr	r2, [pc, #204]	; (8000814 <main+0x10c>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b31      	ldr	r3, [pc, #196]	; (8000814 <main+0x10c>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 ff55 	bl	800160c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 ff6b 	bl	8001640 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <main+0x10c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	60fa      	str	r2, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 fa35 	bl	8000bfc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f9c1 	bl	8000b18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f973 	bl	8000a80 <MX_USART3_UART_Init>
  MX_I2C4_Init();
 800079a:	f000 f8bb 	bl	8000914 <MX_I2C4_Init>
  MX_TIM2_Init();
 800079e:	f000 f8f9 	bl	8000994 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim2);
 80007a2:	481d      	ldr	r0, [pc, #116]	; (8000818 <main+0x110>)
 80007a4:	f003 fc5b 	bl	800405e <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007a8:	2100      	movs	r1, #0
 80007aa:	481b      	ldr	r0, [pc, #108]	; (8000818 <main+0x110>)
 80007ac:	f003 fcb8 	bl	8004120 <HAL_TIM_PWM_Start>
  TIM2->CCR1 = 0;
 80007b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007b4:	2200      	movs	r2, #0
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34
  int cond = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2101      	movs	r1, #1
 80007c0:	4816      	ldr	r0, [pc, #88]	; (800081c <main+0x114>)
 80007c2:	f000 ff09 	bl	80015d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2102      	movs	r1, #2
 80007ca:	4814      	ldr	r0, [pc, #80]	; (800081c <main+0x114>)
 80007cc:	f000 ff04 	bl	80015d8 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TIM2->CCR1 += (5 * cond);
 80007d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e2:	440b      	add	r3, r1
 80007e4:	6353      	str	r3, [r2, #52]	; 0x34
	  HAL_Delay(500);
 80007e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ea:	f000 fc31 	bl	8001050 <HAL_Delay>

	  if (TIM2->CCR1 == 100 || TIM2->CCR1 == 0){
 80007ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f4:	2b64      	cmp	r3, #100	; 0x64
 80007f6:	d004      	beq.n	8000802 <main+0xfa>
 80007f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1e6      	bne.n	80007d0 <main+0xc8>
		  cond = cond * -1;
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	425b      	negs	r3, r3
 8000806:	60bb      	str	r3, [r7, #8]
		  HAL_Delay(2000);
 8000808:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800080c:	f000 fc20 	bl	8001050 <HAL_Delay>
	  TIM2->CCR1 += (5 * cond);
 8000810:	e7de      	b.n	80007d0 <main+0xc8>
 8000812:	bf00      	nop
 8000814:	58024400 	.word	0x58024400
 8000818:	24000078 	.word	0x24000078
 800081c:	58020c00 	.word	0x58020c00

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b09c      	sub	sp, #112	; 0x70
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	224c      	movs	r2, #76	; 0x4c
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f005 fce6 	bl	8006200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2220      	movs	r2, #32
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f005 fce0 	bl	8006200 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000840:	2004      	movs	r0, #4
 8000842:	f001 f839 	bl	80018b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b30      	ldr	r3, [pc, #192]	; (800090c <SystemClock_Config+0xec>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a2f      	ldr	r2, [pc, #188]	; (800090c <SystemClock_Config+0xec>)
 8000850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <SystemClock_Config+0xec>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <SystemClock_Config+0xf0>)
 8000862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000864:	4a2a      	ldr	r2, [pc, #168]	; (8000910 <SystemClock_Config+0xf0>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800086c:	4b28      	ldr	r3, [pc, #160]	; (8000910 <SystemClock_Config+0xf0>)
 800086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000878:	bf00      	nop
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <SystemClock_Config+0xec>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000886:	d1f8      	bne.n	800087a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000888:	2301      	movs	r3, #1
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800088c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000896:	2302      	movs	r3, #2
 8000898:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800089a:	2301      	movs	r3, #1
 800089c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800089e:	2378      	movs	r3, #120	; 0x78
 80008a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008ae:	230c      	movs	r3, #12
 80008b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 f854 	bl	800196c <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008ca:	f000 f997 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	233f      	movs	r3, #63	; 0x3f
 80008d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d2:	2303      	movs	r3, #3
 80008d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008da:	2308      	movs	r3, #8
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008de:	2340      	movs	r3, #64	; 0x40
 80008e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e2:	2340      	movs	r3, #64	; 0x40
 80008e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2104      	movs	r1, #4
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fc67 	bl	80021c8 <HAL_RCC_ClockConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000900:	f000 f97c 	bl	8000bfc <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	3770      	adds	r7, #112	; 0x70
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	58024800 	.word	0x58024800
 8000910:	58000400 	.word	0x58000400

08000914 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_I2C4_Init+0x74>)
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <MX_I2C4_Init+0x78>)
 800091c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_I2C4_Init+0x74>)
 8000920:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <MX_I2C4_Init+0x7c>)
 8000922:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_I2C4_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_I2C4_Init+0x74>)
 800092c:	2201      	movs	r2, #1
 800092e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_I2C4_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_I2C4_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_I2C4_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_I2C4_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_I2C4_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800094e:	480e      	ldr	r0, [pc, #56]	; (8000988 <MX_I2C4_Init+0x74>)
 8000950:	f000 fe8a 	bl	8001668 <HAL_I2C_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800095a:	f000 f94f 	bl	8000bfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095e:	2100      	movs	r1, #0
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <MX_I2C4_Init+0x74>)
 8000962:	f000 ff11 	bl	8001788 <HAL_I2CEx_ConfigAnalogFilter>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800096c:	f000 f946 	bl	8000bfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000970:	2100      	movs	r1, #0
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_I2C4_Init+0x74>)
 8000974:	f000 ff53 	bl	800181e <HAL_I2CEx_ConfigDigitalFilter>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800097e:	f000 f93d 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2400002c 	.word	0x2400002c
 800098c:	58001c00 	.word	0x58001c00
 8000990:	307075b1 	.word	0x307075b1

08000994 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	; 0x38
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
 80009c2:	615a      	str	r2, [r3, #20]
 80009c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c6:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <MX_TIM2_Init+0xe8>)
 80009c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240;
 80009ce:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <MX_TIM2_Init+0xe8>)
 80009d0:	22f0      	movs	r2, #240	; 0xf0
 80009d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d4:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <MX_TIM2_Init+0xe8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80009da:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_TIM2_Init+0xe8>)
 80009dc:	2264      	movs	r2, #100	; 0x64
 80009de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e0:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <MX_TIM2_Init+0xe8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <MX_TIM2_Init+0xe8>)
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ec:	4823      	ldr	r0, [pc, #140]	; (8000a7c <MX_TIM2_Init+0xe8>)
 80009ee:	f003 fadf 	bl	8003fb0 <HAL_TIM_Base_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009f8:	f000 f900 	bl	8000bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a06:	4619      	mov	r1, r3
 8000a08:	481c      	ldr	r0, [pc, #112]	; (8000a7c <MX_TIM2_Init+0xe8>)
 8000a0a:	f003 fdab 	bl	8004564 <HAL_TIM_ConfigClockSource>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a14:	f000 f8f2 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a18:	4818      	ldr	r0, [pc, #96]	; (8000a7c <MX_TIM2_Init+0xe8>)
 8000a1a:	f003 fb20 	bl	800405e <HAL_TIM_PWM_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a24:	f000 f8ea 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4811      	ldr	r0, [pc, #68]	; (8000a7c <MX_TIM2_Init+0xe8>)
 8000a38:	f004 fac0 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a42:	f000 f8db 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a46:	2360      	movs	r3, #96	; 0x60
 8000a48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4807      	ldr	r0, [pc, #28]	; (8000a7c <MX_TIM2_Init+0xe8>)
 8000a5e:	f003 fc6d 	bl	800433c <HAL_TIM_PWM_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a68:	f000 f8c8 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <MX_TIM2_Init+0xe8>)
 8000a6e:	f000 f96b 	bl	8000d48 <HAL_TIM_MspPostInit>

}
 8000a72:	bf00      	nop
 8000a74:	3738      	adds	r7, #56	; 0x38
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	24000078 	.word	0x24000078

08000a80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <MX_USART3_UART_Init+0x94>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aca:	f004 fb05 	bl	80050d8 <HAL_UART_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 f892 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000adc:	f005 faa2 	bl	8006024 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ae6:	f000 f889 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aee:	f005 fad7 	bl	80060a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000af8:	f000 f880 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000afe:	f005 fa58 	bl	8005fb2 <HAL_UARTEx_DisableFifoMode>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b08:	f000 f878 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	240000c4 	.word	0x240000c4
 8000b14:	40004800 	.word	0x40004800

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b31      	ldr	r3, [pc, #196]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	4a2f      	ldr	r2, [pc, #188]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4c:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	4a28      	ldr	r2, [pc, #160]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5c:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000b90:	f043 0320 	orr.w	r3, r3, #32
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	f003 0320 	and.w	r3, r3, #32
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000bae:	f043 0308 	orr.w	r3, r3, #8
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_GPIO_Init+0xdc>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	f003 0308 	and.w	r3, r3, #8
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2103      	movs	r1, #3
 8000bc8:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <MX_GPIO_Init+0xe0>)
 8000bca:	f000 fd05 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_GPIO_Init+0xe0>)
 8000be6:	f000 fb47 	bl	8001278 <HAL_GPIO_Init>

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	58024400 	.word	0x58024400
 8000bf8:	58020c00 	.word	0x58020c00

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_MspInit+0x30>)
 8000c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c14:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_MspInit+0x30>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_MspInit+0x30>)
 8000c20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	58024400 	.word	0x58024400

08000c3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0b8      	sub	sp, #224	; 0xe0
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	22bc      	movs	r2, #188	; 0xbc
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f005 facf 	bl	8006200 <memset>
  if(hi2c->Instance==I2C4)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a25      	ldr	r2, [pc, #148]	; (8000cfc <HAL_I2C_MspInit+0xc0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d142      	bne.n	8000cf2 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 fe30 	bl	80028e0 <HAL_RCCEx_PeriphCLKConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c86:	f7ff ffb9 	bl	8000bfc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_I2C_MspInit+0xc4>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <HAL_I2C_MspInit+0xc4>)
 8000c92:	f043 0320 	orr.w	r3, r3, #32
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_I2C_MspInit+0xc4>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	f003 0320 	and.w	r3, r3, #32
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ca8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000cac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb0:	2312      	movs	r3, #18
 8000cb2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <HAL_I2C_MspInit+0xc8>)
 8000cd0:	f000 fad2 	bl	8001278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_I2C_MspInit+0xc4>)
 8000cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <HAL_I2C_MspInit+0xc4>)
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_I2C_MspInit+0xc4>)
 8000ce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	37e0      	adds	r7, #224	; 0xe0
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	58001c00 	.word	0x58001c00
 8000d00:	58024400 	.word	0x58024400
 8000d04:	58021400 	.word	0x58021400

08000d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d18:	d10e      	bne.n	8000d38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_TIM_Base_MspInit+0x3c>)
 8000d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d20:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_TIM_Base_MspInit+0x3c>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_TIM_Base_MspInit+0x3c>)
 8000d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	58024400 	.word	0x58024400

08000d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d68:	d11e      	bne.n	8000da8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_TIM_MspPostInit+0x68>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <HAL_TIM_MspPostInit+0x68>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_TIM_MspPostInit+0x68>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	4619      	mov	r1, r3
 8000da2:	4804      	ldr	r0, [pc, #16]	; (8000db4 <HAL_TIM_MspPostInit+0x6c>)
 8000da4:	f000 fa68 	bl	8001278 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	58024400 	.word	0x58024400
 8000db4:	58020000 	.word	0x58020000

08000db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b0b8      	sub	sp, #224	; 0xe0
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	22bc      	movs	r2, #188	; 0xbc
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f005 fa11 	bl	8006200 <memset>
  if(huart->Instance==USART3)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a25      	ldr	r2, [pc, #148]	; (8000e78 <HAL_UART_MspInit+0xc0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d142      	bne.n	8000e6e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000de8:	2302      	movs	r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 fd72 	bl	80028e0 <HAL_RCCEx_PeriphCLKConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e02:	f7ff fefb 	bl	8000bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e5c:	2307      	movs	r3, #7
 8000e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <HAL_UART_MspInit+0xc8>)
 8000e6a:	f000 fa05 	bl	8001278 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	37e0      	adds	r7, #224	; 0xe0
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40004800 	.word	0x40004800
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	58020c00 	.word	0x58020c00

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 f89e 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000edc:	f7ff fb7e 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee2:	490d      	ldr	r1, [pc, #52]	; (8000f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	; (8000f24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f06:	f005 f957 	bl	80061b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fbfd 	bl	8000708 <main>
  bx  lr
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f14:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f18:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f1c:	08006270 	.word	0x08006270
  ldr r2, =_sbss
 8000f20:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000f24:	24000158 	.word	0x24000158

08000f28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC3_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f32:	2003      	movs	r0, #3
 8000f34:	f000 f96e 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f38:	f001 fafc 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_Init+0x68>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	0a1b      	lsrs	r3, r3, #8
 8000f44:	f003 030f 	and.w	r3, r3, #15
 8000f48:	4913      	ldr	r1, [pc, #76]	; (8000f98 <HAL_Init+0x6c>)
 8000f4a:	5ccb      	ldrb	r3, [r1, r3]
 8000f4c:	f003 031f 	and.w	r3, r3, #31
 8000f50:	fa22 f303 	lsr.w	r3, r2, r3
 8000f54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_Init+0x68>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_Init+0x6c>)
 8000f60:	5cd3      	ldrb	r3, [r2, r3]
 8000f62:	f003 031f 	and.w	r3, r3, #31
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <HAL_Init+0x70>)
 8000f6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f70:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <HAL_Init+0x74>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f814 	bl	8000fa4 <HAL_InitTick>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e002      	b.n	8000f8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f86:	f7ff fe3f 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	58024400 	.word	0x58024400
 8000f98:	08006228 	.word	0x08006228
 8000f9c:	24000004 	.word	0x24000004
 8000fa0:	24000000 	.word	0x24000000

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_InitTick+0x60>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e021      	b.n	8000ffc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x64>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_InitTick+0x60>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f945 	bl	800125e <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00e      	b.n	8000ffc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d80a      	bhi.n	8000ffa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f000 f91d 	bl	800122a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff0:	4a06      	ldr	r2, [pc, #24]	; (800100c <HAL_InitTick+0x68>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2400000c 	.word	0x2400000c
 8001008:	24000000 	.word	0x24000000
 800100c:	24000008 	.word	0x24000008

08001010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x20>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x24>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_IncTick+0x24>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	2400000c 	.word	0x2400000c
 8001034:	24000154 	.word	0x24000154

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	24000154 	.word	0x24000154

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d005      	beq.n	8001076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_Delay+0x44>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001076:	bf00      	nop
 8001078:	f7ff ffde 	bl	8001038 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8f7      	bhi.n	8001078 <HAL_Delay+0x28>
  {
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2400000c 	.word	0x2400000c

08001098 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetREVID+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	0c1b      	lsrs	r3, r3, #16
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	5c001000 	.word	0x5c001000

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <__NVIC_SetPriorityGrouping+0x40>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <__NVIC_SetPriorityGrouping+0x40>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00
 80010f4:	05fa0000 	.word	0x05fa0000

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff8e 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff47 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff5e 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff90 	bl	8001168 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5f 	bl	8001114 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffb2 	bl	80011d0 <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001286:	4b89      	ldr	r3, [pc, #548]	; (80014ac <HAL_GPIO_Init+0x234>)
 8001288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800128a:	e194      	b.n	80015b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 8186 	beq.w	80015b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d005      	beq.n	80012bc <HAL_GPIO_Init+0x44>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d130      	bne.n	800131e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f2:	2201      	movs	r2, #1
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	f003 0201 	and.w	r2, r3, #1
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b03      	cmp	r3, #3
 8001328:	d017      	beq.n	800135a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d123      	bne.n	80013ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	69b9      	ldr	r1, [r7, #24]
 80013aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0203 	and.w	r2, r3, #3
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 80e0 	beq.w	80015b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f0:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <HAL_GPIO_Init+0x238>)
 80013f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013f6:	4a2e      	ldr	r2, [pc, #184]	; (80014b0 <HAL_GPIO_Init+0x238>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <HAL_GPIO_Init+0x238>)
 8001402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140e:	4a29      	ldr	r2, [pc, #164]	; (80014b4 <HAL_GPIO_Init+0x23c>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a20      	ldr	r2, [pc, #128]	; (80014b8 <HAL_GPIO_Init+0x240>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d052      	beq.n	80014e0 <HAL_GPIO_Init+0x268>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <HAL_GPIO_Init+0x244>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d031      	beq.n	80014a6 <HAL_GPIO_Init+0x22e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <HAL_GPIO_Init+0x248>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d02b      	beq.n	80014a2 <HAL_GPIO_Init+0x22a>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_GPIO_Init+0x24c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d025      	beq.n	800149e <HAL_GPIO_Init+0x226>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <HAL_GPIO_Init+0x250>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d01f      	beq.n	800149a <HAL_GPIO_Init+0x222>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <HAL_GPIO_Init+0x254>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d019      	beq.n	8001496 <HAL_GPIO_Init+0x21e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a1a      	ldr	r2, [pc, #104]	; (80014d0 <HAL_GPIO_Init+0x258>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0x21a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <HAL_GPIO_Init+0x25c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00d      	beq.n	800148e <HAL_GPIO_Init+0x216>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <HAL_GPIO_Init+0x260>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d007      	beq.n	800148a <HAL_GPIO_Init+0x212>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a17      	ldr	r2, [pc, #92]	; (80014dc <HAL_GPIO_Init+0x264>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_GPIO_Init+0x20e>
 8001482:	2309      	movs	r3, #9
 8001484:	e02d      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 8001486:	230a      	movs	r3, #10
 8001488:	e02b      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 800148a:	2308      	movs	r3, #8
 800148c:	e029      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 800148e:	2307      	movs	r3, #7
 8001490:	e027      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 8001492:	2306      	movs	r3, #6
 8001494:	e025      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 8001496:	2305      	movs	r3, #5
 8001498:	e023      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 800149a:	2304      	movs	r3, #4
 800149c:	e021      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 800149e:	2303      	movs	r3, #3
 80014a0:	e01f      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e01d      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e01b      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 80014aa:	bf00      	nop
 80014ac:	58000080 	.word	0x58000080
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58000400 	.word	0x58000400
 80014b8:	58020000 	.word	0x58020000
 80014bc:	58020400 	.word	0x58020400
 80014c0:	58020800 	.word	0x58020800
 80014c4:	58020c00 	.word	0x58020c00
 80014c8:	58021000 	.word	0x58021000
 80014cc:	58021400 	.word	0x58021400
 80014d0:	58021800 	.word	0x58021800
 80014d4:	58021c00 	.word	0x58021c00
 80014d8:	58022000 	.word	0x58022000
 80014dc:	58022400 	.word	0x58022400
 80014e0:	2300      	movs	r3, #0
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	f002 0203 	and.w	r2, r2, #3
 80014e8:	0092      	lsls	r2, r2, #2
 80014ea:	4093      	lsls	r3, r2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f2:	4938      	ldr	r1, [pc, #224]	; (80015d4 <HAL_GPIO_Init+0x35c>)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800152e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	3301      	adds	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f47f ae63 	bne.w	800128c <HAL_GPIO_Init+0x14>
  }
}
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
 80015ca:	3724      	adds	r7, #36	; 0x24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	58000400 	.word	0x58000400

080015d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80015f4:	e003      	b.n	80015fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	041a      	lsls	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	619a      	str	r2, [r3, #24]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001614:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_HSEM_FastTake+0x2c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3320      	adds	r3, #32
 800161a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161e:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_HSEM_FastTake+0x30>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d101      	bne.n	8001628 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	e000      	b.n	800162a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	58026400 	.word	0x58026400
 800163c:	80000300 	.word	0x80000300

08001640 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800164a:	4906      	ldr	r1, [pc, #24]	; (8001664 <HAL_HSEM_Release+0x24>)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	58026400 	.word	0x58026400

08001668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e07f      	b.n	800177a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fad4 	bl	8000c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2224      	movs	r2, #36	; 0x24
 8001698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d107      	bne.n	80016e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	e006      	b.n	80016f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80016ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d104      	bne.n	8001702 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001700:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_I2C_Init+0x11c>)
 800170e:	430b      	orrs	r3, r1
 8001710:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001720:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69d9      	ldr	r1, [r3, #28]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1a      	ldr	r2, [r3, #32]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2220      	movs	r2, #32
 8001766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	02008000 	.word	0x02008000

08001788 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b20      	cmp	r3, #32
 800179c:	d138      	bne.n	8001810 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e032      	b.n	8001812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2224      	movs	r2, #36	; 0x24
 80017b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6819      	ldr	r1, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	e000      	b.n	8001812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001810:	2302      	movs	r3, #2
  }
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b20      	cmp	r3, #32
 8001832:	d139      	bne.n	80018a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800183e:	2302      	movs	r3, #2
 8001840:	e033      	b.n	80018aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2224      	movs	r2, #36	; 0x24
 800184e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0201 	bic.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001870:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4313      	orrs	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2220      	movs	r2, #32
 8001898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e000      	b.n	80018aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018a8:	2302      	movs	r3, #2
  }
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	2b06      	cmp	r3, #6
 80018ca:	d00a      	beq.n	80018e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d001      	beq.n	80018de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e040      	b.n	8001960 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e03e      	b.n	8001960 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80018ea:	491f      	ldr	r1, [pc, #124]	; (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018f2:	f7ff fba1 	bl	8001038 <HAL_GetTick>
 80018f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018f8:	e009      	b.n	800190e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018fa:	f7ff fb9d 	bl	8001038 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001908:	d901      	bls.n	800190e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e028      	b.n	8001960 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800191a:	d1ee      	bne.n	80018fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b1e      	cmp	r3, #30
 8001920:	d008      	beq.n	8001934 <HAL_PWREx_ConfigSupply+0x7c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b2e      	cmp	r3, #46	; 0x2e
 8001926:	d005      	beq.n	8001934 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b1d      	cmp	r3, #29
 800192c:	d002      	beq.n	8001934 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b2d      	cmp	r3, #45	; 0x2d
 8001932:	d114      	bne.n	800195e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001934:	f7ff fb80 	bl	8001038 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800193a:	e009      	b.n	8001950 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800193c:	f7ff fb7c 	bl	8001038 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800194a:	d901      	bls.n	8001950 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e007      	b.n	8001960 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195c:	d1ee      	bne.n	800193c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	58024800 	.word	0x58024800

0800196c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	; 0x30
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	f000 bc1d 	b.w	80021ba <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 8087 	beq.w	8001a9c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800198e:	4b99      	ldr	r3, [pc, #612]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001998:	4b96      	ldr	r3, [pc, #600]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a0:	2b10      	cmp	r3, #16
 80019a2:	d007      	beq.n	80019b4 <HAL_RCC_OscConfig+0x48>
 80019a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a6:	2b18      	cmp	r3, #24
 80019a8:	d110      	bne.n	80019cc <HAL_RCC_OscConfig+0x60>
 80019aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d10b      	bne.n	80019cc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	4b8f      	ldr	r3, [pc, #572]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d06c      	beq.n	8001a9a <HAL_RCC_OscConfig+0x12e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d168      	bne.n	8001a9a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e3f6      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d4:	d106      	bne.n	80019e4 <HAL_RCC_OscConfig+0x78>
 80019d6:	4b87      	ldr	r3, [pc, #540]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a86      	ldr	r2, [pc, #536]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e02e      	b.n	8001a42 <HAL_RCC_OscConfig+0xd6>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10c      	bne.n	8001a06 <HAL_RCC_OscConfig+0x9a>
 80019ec:	4b81      	ldr	r3, [pc, #516]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a80      	ldr	r2, [pc, #512]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b7e      	ldr	r3, [pc, #504]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a7d      	ldr	r2, [pc, #500]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e01d      	b.n	8001a42 <HAL_RCC_OscConfig+0xd6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a0e:	d10c      	bne.n	8001a2a <HAL_RCC_OscConfig+0xbe>
 8001a10:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b75      	ldr	r3, [pc, #468]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a74      	ldr	r2, [pc, #464]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	e00b      	b.n	8001a42 <HAL_RCC_OscConfig+0xd6>
 8001a2a:	4b72      	ldr	r3, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a71      	ldr	r2, [pc, #452]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6e      	ldr	r2, [pc, #440]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d013      	beq.n	8001a72 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff faf5 	bl	8001038 <HAL_GetTick>
 8001a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a52:	f7ff faf1 	bl	8001038 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b64      	cmp	r3, #100	; 0x64
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e3aa      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a64:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0xe6>
 8001a70:	e014      	b.n	8001a9c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff fae1 	bl	8001038 <HAL_GetTick>
 8001a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a7a:	f7ff fadd 	bl	8001038 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b64      	cmp	r3, #100	; 0x64
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e396      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a8c:	4b59      	ldr	r3, [pc, #356]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0x10e>
 8001a98:	e000      	b.n	8001a9c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80cb 	beq.w	8001c40 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aaa:	4b52      	ldr	r3, [pc, #328]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ab2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ab4:	4b4f      	ldr	r3, [pc, #316]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d007      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x164>
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	2b18      	cmp	r3, #24
 8001ac4:	d156      	bne.n	8001b74 <HAL_RCC_OscConfig+0x208>
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d151      	bne.n	8001b74 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad0:	4b48      	ldr	r3, [pc, #288]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x17c>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e368      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ae8:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 0219 	bic.w	r2, r3, #25
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	493f      	ldr	r1, [pc, #252]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001afa:	f7ff fa9d 	bl	8001038 <HAL_GetTick>
 8001afe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b02:	f7ff fa99 	bl	8001038 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e352      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b14:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	f7ff faba 	bl	8001098 <HAL_GetREVID>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d817      	bhi.n	8001b5e <HAL_RCC_OscConfig+0x1f2>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b40      	cmp	r3, #64	; 0x40
 8001b34:	d108      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1dc>
 8001b36:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b3e:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b44:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b46:	e07b      	b.n	8001c40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	031b      	lsls	r3, r3, #12
 8001b56:	4927      	ldr	r1, [pc, #156]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b5c:	e070      	b.n	8001c40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	061b      	lsls	r3, r3, #24
 8001b6c:	4921      	ldr	r1, [pc, #132]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b72:	e065      	b.n	8001c40 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d048      	beq.n	8001c0e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 0219 	bic.w	r2, r3, #25
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	491a      	ldr	r1, [pc, #104]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fa53 	bl	8001038 <HAL_GetTick>
 8001b92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b96:	f7ff fa4f 	bl	8001038 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e308      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb4:	f7ff fa70 	bl	8001098 <HAL_GetREVID>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d81a      	bhi.n	8001bf8 <HAL_RCC_OscConfig+0x28c>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b40      	cmp	r3, #64	; 0x40
 8001bc8:	d108      	bne.n	8001bdc <HAL_RCC_OscConfig+0x270>
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd8:	6053      	str	r3, [r2, #4]
 8001bda:	e031      	b.n	8001c40 <HAL_RCC_OscConfig+0x2d4>
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	031b      	lsls	r3, r3, #12
 8001bea:	4902      	ldr	r1, [pc, #8]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
 8001bf0:	e026      	b.n	8001c40 <HAL_RCC_OscConfig+0x2d4>
 8001bf2:	bf00      	nop
 8001bf4:	58024400 	.word	0x58024400
 8001bf8:	4b9a      	ldr	r3, [pc, #616]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	061b      	lsls	r3, r3, #24
 8001c06:	4997      	ldr	r1, [pc, #604]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
 8001c0c:	e018      	b.n	8001c40 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0e:	4b95      	ldr	r3, [pc, #596]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a94      	ldr	r2, [pc, #592]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fa0d 	bl	8001038 <HAL_GetTick>
 8001c1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c22:	f7ff fa09 	bl	8001038 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e2c2      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c34:	4b8b      	ldr	r3, [pc, #556]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80a9 	beq.w	8001da0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4e:	4b85      	ldr	r3, [pc, #532]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c58:	4b82      	ldr	r3, [pc, #520]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d007      	beq.n	8001c74 <HAL_RCC_OscConfig+0x308>
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b18      	cmp	r3, #24
 8001c68:	d13a      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x374>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d135      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c74:	4b7b      	ldr	r3, [pc, #492]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_OscConfig+0x320>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	2b80      	cmp	r3, #128	; 0x80
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e296      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c8c:	f7ff fa04 	bl	8001098 <HAL_GetREVID>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d817      	bhi.n	8001cca <HAL_RCC_OscConfig+0x35e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d108      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x348>
 8001ca2:	4b70      	ldr	r3, [pc, #448]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001caa:	4a6e      	ldr	r2, [pc, #440]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001cac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cb0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cb2:	e075      	b.n	8001da0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cb4:	4b6b      	ldr	r3, [pc, #428]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	069b      	lsls	r3, r3, #26
 8001cc2:	4968      	ldr	r1, [pc, #416]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cc8:	e06a      	b.n	8001da0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cca:	4b66      	ldr	r3, [pc, #408]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	061b      	lsls	r3, r3, #24
 8001cd8:	4962      	ldr	r1, [pc, #392]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cde:	e05f      	b.n	8001da0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d042      	beq.n	8001d6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ce8:	4b5e      	ldr	r3, [pc, #376]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a5d      	ldr	r2, [pc, #372]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f9a0 	bl	8001038 <HAL_GetTick>
 8001cf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001cfc:	f7ff f99c 	bl	8001038 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e255      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d0e:	4b55      	ldr	r3, [pc, #340]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d1a:	f7ff f9bd 	bl	8001098 <HAL_GetREVID>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d817      	bhi.n	8001d58 <HAL_RCC_OscConfig+0x3ec>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d108      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3d6>
 8001d30:	4b4c      	ldr	r3, [pc, #304]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d38:	4a4a      	ldr	r2, [pc, #296]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d3e:	6053      	str	r3, [r2, #4]
 8001d40:	e02e      	b.n	8001da0 <HAL_RCC_OscConfig+0x434>
 8001d42:	4b48      	ldr	r3, [pc, #288]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	069b      	lsls	r3, r3, #26
 8001d50:	4944      	ldr	r1, [pc, #272]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
 8001d56:	e023      	b.n	8001da0 <HAL_RCC_OscConfig+0x434>
 8001d58:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	061b      	lsls	r3, r3, #24
 8001d66:	493f      	ldr	r1, [pc, #252]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60cb      	str	r3, [r1, #12]
 8001d6c:	e018      	b.n	8001da0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d6e:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a3c      	ldr	r2, [pc, #240]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7ff f95d 	bl	8001038 <HAL_GetTick>
 8001d7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d82:	f7ff f959 	bl	8001038 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e212      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d94:	4b33      	ldr	r3, [pc, #204]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d036      	beq.n	8001e1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d019      	beq.n	8001de8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db4:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db8:	4a2a      	ldr	r2, [pc, #168]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff f93a 	bl	8001038 <HAL_GetTick>
 8001dc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f936 	bl	8001038 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1ef      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x45c>
 8001de6:	e018      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de8:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dec:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001dee:	f023 0301 	bic.w	r3, r3, #1
 8001df2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7ff f920 	bl	8001038 <HAL_GetTick>
 8001df8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7ff f91c 	bl	8001038 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e1d5      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d039      	beq.n	8001e9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d01c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a0c      	ldr	r2, [pc, #48]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff f8fd 	bl	8001038 <HAL_GetTick>
 8001e3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e42:	f7ff f8f9 	bl	8001038 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e1b2      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x4d6>
 8001e60:	e01b      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
 8001e62:	bf00      	nop
 8001e64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e68:	4b9b      	ldr	r3, [pc, #620]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a9a      	ldr	r2, [pc, #616]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001e6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e7c:	f7ff f8dc 	bl	8001038 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e195      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e8e:	4b92      	ldr	r3, [pc, #584]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8081 	beq.w	8001faa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ea8:	4b8c      	ldr	r3, [pc, #560]	; (80020dc <HAL_RCC_OscConfig+0x770>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a8b      	ldr	r2, [pc, #556]	; (80020dc <HAL_RCC_OscConfig+0x770>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eb4:	f7ff f8c0 	bl	8001038 <HAL_GetTick>
 8001eb8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e175      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ece:	4b83      	ldr	r3, [pc, #524]	; (80020dc <HAL_RCC_OscConfig+0x770>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d106      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x584>
 8001ee2:	4b7d      	ldr	r3, [pc, #500]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee6:	4a7c      	ldr	r2, [pc, #496]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6713      	str	r3, [r2, #112]	; 0x70
 8001eee:	e02d      	b.n	8001f4c <HAL_RCC_OscConfig+0x5e0>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x5a6>
 8001ef8:	4b77      	ldr	r3, [pc, #476]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	4a76      	ldr	r2, [pc, #472]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
 8001f04:	4b74      	ldr	r3, [pc, #464]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f08:	4a73      	ldr	r2, [pc, #460]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f0a:	f023 0304 	bic.w	r3, r3, #4
 8001f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f10:	e01c      	b.n	8001f4c <HAL_RCC_OscConfig+0x5e0>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b05      	cmp	r3, #5
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x5c8>
 8001f1a:	4b6f      	ldr	r3, [pc, #444]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	4a6e      	ldr	r2, [pc, #440]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	6713      	str	r3, [r2, #112]	; 0x70
 8001f26:	4b6c      	ldr	r3, [pc, #432]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	4a6b      	ldr	r2, [pc, #428]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6713      	str	r3, [r2, #112]	; 0x70
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0x5e0>
 8001f34:	4b68      	ldr	r3, [pc, #416]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f38:	4a67      	ldr	r2, [pc, #412]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f40:	4b65      	ldr	r3, [pc, #404]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	4a64      	ldr	r2, [pc, #400]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f46:	f023 0304 	bic.w	r3, r3, #4
 8001f4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d015      	beq.n	8001f80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7ff f870 	bl	8001038 <HAL_GetTick>
 8001f58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7ff f86c 	bl	8001038 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e123      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f72:	4b59      	ldr	r3, [pc, #356]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0ee      	beq.n	8001f5c <HAL_RCC_OscConfig+0x5f0>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7ff f85a 	bl	8001038 <HAL_GetTick>
 8001f84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7ff f856 	bl	8001038 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e10d      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f9e:	4b4e      	ldr	r3, [pc, #312]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1ee      	bne.n	8001f88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8102 	beq.w	80021b8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fb4:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fbc:	2b18      	cmp	r3, #24
 8001fbe:	f000 80bd 	beq.w	800213c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	f040 809e 	bne.w	8002108 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fcc:	4b42      	ldr	r3, [pc, #264]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a41      	ldr	r2, [pc, #260]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f82e 	bl	8001038 <HAL_GetTick>
 8001fdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7ff f82a 	bl	8001038 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e0e3      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ff2:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ffe:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002002:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <HAL_RCC_OscConfig+0x774>)
 8002004:	4013      	ands	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	430a      	orrs	r2, r1
 8002012:	4931      	ldr	r1, [pc, #196]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002014:	4313      	orrs	r3, r2
 8002016:	628b      	str	r3, [r1, #40]	; 0x28
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	3b01      	subs	r3, #1
 800201e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002026:	3b01      	subs	r3, #1
 8002028:	025b      	lsls	r3, r3, #9
 800202a:	b29b      	uxth	r3, r3
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002032:	3b01      	subs	r3, #1
 8002034:	041b      	lsls	r3, r3, #16
 8002036:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	3b01      	subs	r3, #1
 8002042:	061b      	lsls	r3, r3, #24
 8002044:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002048:	4923      	ldr	r1, [pc, #140]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 800204a:	4313      	orrs	r3, r2
 800204c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800204e:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 800205c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205e:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_RCC_OscConfig+0x778>)
 8002060:	4013      	ands	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002066:	00d2      	lsls	r2, r2, #3
 8002068:	491b      	ldr	r1, [pc, #108]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 800206a:	4313      	orrs	r3, r2
 800206c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	f023 020c 	bic.w	r2, r3, #12
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	4917      	ldr	r1, [pc, #92]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 800207c:	4313      	orrs	r3, r2
 800207e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002080:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	f023 0202 	bic.w	r2, r3, #2
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	4912      	ldr	r1, [pc, #72]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 800208e:	4313      	orrs	r3, r2
 8002090:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	4a0d      	ldr	r2, [pc, #52]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	4a07      	ldr	r2, [pc, #28]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ce:	f7fe ffb3 	bl	8001038 <HAL_GetTick>
 80020d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020d4:	e011      	b.n	80020fa <HAL_RCC_OscConfig+0x78e>
 80020d6:	bf00      	nop
 80020d8:	58024400 	.word	0x58024400
 80020dc:	58024800 	.word	0x58024800
 80020e0:	fffffc0c 	.word	0xfffffc0c
 80020e4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe ffa6 	bl	8001038 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e05f      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020fa:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <HAL_RCC_OscConfig+0x858>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x77c>
 8002106:	e057      	b.n	80021b8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002108:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <HAL_RCC_OscConfig+0x858>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a2d      	ldr	r2, [pc, #180]	; (80021c4 <HAL_RCC_OscConfig+0x858>)
 800210e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7fe ff90 	bl	8001038 <HAL_GetTick>
 8002118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211c:	f7fe ff8c 	bl	8001038 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e045      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_RCC_OscConfig+0x858>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x7b0>
 800213a:	e03d      	b.n	80021b8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <HAL_RCC_OscConfig+0x858>)
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_RCC_OscConfig+0x858>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	2b01      	cmp	r3, #1
 800214e:	d031      	beq.n	80021b4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f003 0203 	and.w	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d12a      	bne.n	80021b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d122      	bne.n	80021b4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d11a      	bne.n	80021b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	0a5b      	lsrs	r3, r3, #9
 8002182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800218c:	429a      	cmp	r2, r3
 800218e:	d111      	bne.n	80021b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	0c1b      	lsrs	r3, r3, #16
 8002194:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d108      	bne.n	80021b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	0e1b      	lsrs	r3, r3, #24
 80021a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3730      	adds	r7, #48	; 0x30
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	58024400 	.word	0x58024400

080021c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e19c      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b8a      	ldr	r3, [pc, #552]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d910      	bls.n	800220c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b87      	ldr	r3, [pc, #540]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 020f 	bic.w	r2, r3, #15
 80021f2:	4985      	ldr	r1, [pc, #532]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b83      	ldr	r3, [pc, #524]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e184      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d010      	beq.n	800223a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	4b7b      	ldr	r3, [pc, #492]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002224:	429a      	cmp	r2, r3
 8002226:	d908      	bls.n	800223a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002228:	4b78      	ldr	r3, [pc, #480]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	4975      	ldr	r1, [pc, #468]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002236:	4313      	orrs	r3, r2
 8002238:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d010      	beq.n	8002268 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	4b70      	ldr	r3, [pc, #448]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002252:	429a      	cmp	r2, r3
 8002254:	d908      	bls.n	8002268 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002256:	4b6d      	ldr	r3, [pc, #436]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	496a      	ldr	r1, [pc, #424]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002264:	4313      	orrs	r3, r2
 8002266:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b00      	cmp	r3, #0
 8002272:	d010      	beq.n	8002296 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	4b64      	ldr	r3, [pc, #400]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002280:	429a      	cmp	r2, r3
 8002282:	d908      	bls.n	8002296 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002284:	4b61      	ldr	r3, [pc, #388]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	495e      	ldr	r1, [pc, #376]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002292:	4313      	orrs	r3, r2
 8002294:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d010      	beq.n	80022c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69da      	ldr	r2, [r3, #28]
 80022a6:	4b59      	ldr	r3, [pc, #356]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d908      	bls.n	80022c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022b2:	4b56      	ldr	r3, [pc, #344]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4953      	ldr	r1, [pc, #332]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d010      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	4b4d      	ldr	r3, [pc, #308]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	429a      	cmp	r2, r3
 80022de:	d908      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e0:	4b4a      	ldr	r3, [pc, #296]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f023 020f 	bic.w	r2, r3, #15
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4947      	ldr	r1, [pc, #284]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d055      	beq.n	80023aa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80022fe:	4b43      	ldr	r3, [pc, #268]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	4940      	ldr	r1, [pc, #256]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800230c:	4313      	orrs	r3, r2
 800230e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d107      	bne.n	8002328 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002318:	4b3c      	ldr	r3, [pc, #240]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d121      	bne.n	8002368 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0f6      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d107      	bne.n	8002340 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002330:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d115      	bne.n	8002368 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0ea      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d107      	bne.n	8002358 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0de      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002358:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0d6      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002368:	4b28      	ldr	r3, [pc, #160]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f023 0207 	bic.w	r2, r3, #7
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4925      	ldr	r1, [pc, #148]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 8002376:	4313      	orrs	r3, r2
 8002378:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7fe fe5d 	bl	8001038 <HAL_GetTick>
 800237e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002380:	e00a      	b.n	8002398 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002382:	f7fe fe59 	bl	8001038 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0be      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002398:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d1eb      	bne.n	8002382 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d010      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d208      	bcs.n	80023d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f023 020f 	bic.w	r2, r3, #15
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	490e      	ldr	r1, [pc, #56]	; (800240c <HAL_RCC_ClockConfig+0x244>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d214      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 020f 	bic.w	r2, r3, #15
 80023ee:	4906      	ldr	r1, [pc, #24]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <HAL_RCC_ClockConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e086      	b.n	8002516 <HAL_RCC_ClockConfig+0x34e>
 8002408:	52002000 	.word	0x52002000
 800240c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d010      	beq.n	800243e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002428:	429a      	cmp	r2, r3
 800242a:	d208      	bcs.n	800243e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800242c:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	4939      	ldr	r1, [pc, #228]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 800243a:	4313      	orrs	r3, r2
 800243c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d010      	beq.n	800246c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002456:	429a      	cmp	r2, r3
 8002458:	d208      	bcs.n	800246c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	492e      	ldr	r1, [pc, #184]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 8002468:	4313      	orrs	r3, r2
 800246a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d010      	beq.n	800249a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002484:	429a      	cmp	r2, r3
 8002486:	d208      	bcs.n	800249a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4922      	ldr	r1, [pc, #136]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 8002496:	4313      	orrs	r3, r2
 8002498:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d010      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69da      	ldr	r2, [r3, #28]
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d208      	bcs.n	80024c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4917      	ldr	r1, [pc, #92]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024c8:	f000 f834 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	0a1b      	lsrs	r3, r3, #8
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	4912      	ldr	r1, [pc, #72]	; (8002524 <HAL_RCC_ClockConfig+0x35c>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <HAL_RCC_ClockConfig+0x358>)
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	4a0d      	ldr	r2, [pc, #52]	; (8002524 <HAL_RCC_ClockConfig+0x35c>)
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
 80024fc:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <HAL_RCC_ClockConfig+0x360>)
 80024fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002500:	4a0a      	ldr	r2, [pc, #40]	; (800252c <HAL_RCC_ClockConfig+0x364>)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x368>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fd4a 	bl	8000fa4 <HAL_InitTick>
 8002510:	4603      	mov	r3, r0
 8002512:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	58024400 	.word	0x58024400
 8002524:	08006228 	.word	0x08006228
 8002528:	24000004 	.word	0x24000004
 800252c:	24000000 	.word	0x24000000
 8002530:	24000008 	.word	0x24000008

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253a:	4bb3      	ldr	r3, [pc, #716]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002542:	2b18      	cmp	r3, #24
 8002544:	f200 8155 	bhi.w	80027f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002548:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <HAL_RCC_GetSysClockFreq+0x1c>)
 800254a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254e:	bf00      	nop
 8002550:	080025b5 	.word	0x080025b5
 8002554:	080027f3 	.word	0x080027f3
 8002558:	080027f3 	.word	0x080027f3
 800255c:	080027f3 	.word	0x080027f3
 8002560:	080027f3 	.word	0x080027f3
 8002564:	080027f3 	.word	0x080027f3
 8002568:	080027f3 	.word	0x080027f3
 800256c:	080027f3 	.word	0x080027f3
 8002570:	080025db 	.word	0x080025db
 8002574:	080027f3 	.word	0x080027f3
 8002578:	080027f3 	.word	0x080027f3
 800257c:	080027f3 	.word	0x080027f3
 8002580:	080027f3 	.word	0x080027f3
 8002584:	080027f3 	.word	0x080027f3
 8002588:	080027f3 	.word	0x080027f3
 800258c:	080027f3 	.word	0x080027f3
 8002590:	080025e1 	.word	0x080025e1
 8002594:	080027f3 	.word	0x080027f3
 8002598:	080027f3 	.word	0x080027f3
 800259c:	080027f3 	.word	0x080027f3
 80025a0:	080027f3 	.word	0x080027f3
 80025a4:	080027f3 	.word	0x080027f3
 80025a8:	080027f3 	.word	0x080027f3
 80025ac:	080027f3 	.word	0x080027f3
 80025b0:	080025e7 	.word	0x080025e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025b4:	4b94      	ldr	r3, [pc, #592]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025c0:	4b91      	ldr	r3, [pc, #580]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	08db      	lsrs	r3, r3, #3
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	4a90      	ldr	r2, [pc, #576]	; (800280c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80025d2:	e111      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80025d4:	4b8d      	ldr	r3, [pc, #564]	; (800280c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025d6:	61bb      	str	r3, [r7, #24]
    break;
 80025d8:	e10e      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80025da:	4b8d      	ldr	r3, [pc, #564]	; (8002810 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025dc:	61bb      	str	r3, [r7, #24]
    break;
 80025de:	e10b      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80025e0:	4b8c      	ldr	r3, [pc, #560]	; (8002814 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80025e2:	61bb      	str	r3, [r7, #24]
    break;
 80025e4:	e108      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025e6:	4b88      	ldr	r3, [pc, #544]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80025f0:	4b85      	ldr	r3, [pc, #532]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80025fc:	4b82      	ldr	r3, [pc, #520]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002606:	4b80      	ldr	r3, [pc, #512]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260a:	08db      	lsrs	r3, r3, #3
 800260c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800261e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80e1 	beq.w	80027ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b02      	cmp	r3, #2
 800262e:	f000 8083 	beq.w	8002738 <HAL_RCC_GetSysClockFreq+0x204>
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b02      	cmp	r3, #2
 8002636:	f200 80a1 	bhi.w	800277c <HAL_RCC_GetSysClockFreq+0x248>
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x114>
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d056      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002646:	e099      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002648:	4b6f      	ldr	r3, [pc, #444]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d02d      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002654:	4b6c      	ldr	r3, [pc, #432]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	08db      	lsrs	r3, r3, #3
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	4a6b      	ldr	r2, [pc, #428]	; (800280c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
 8002664:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	ee07 3a90 	vmov	s15, r3
 800266c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800267a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800267e:	4b62      	ldr	r3, [pc, #392]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002686:	ee07 3a90 	vmov	s15, r3
 800268a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800268e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002692:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002818 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800269a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800269e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80026ae:	e087      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	ee07 3a90 	vmov	s15, r3
 80026b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800281c <HAL_RCC_GetSysClockFreq+0x2e8>
 80026be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026c2:	4b51      	ldr	r3, [pc, #324]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80026d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002818 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026f2:	e065      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002820 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002706:	4b40      	ldr	r3, [pc, #256]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800270e:	ee07 3a90 	vmov	s15, r3
 8002712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002716:	ed97 6a02 	vldr	s12, [r7, #8]
 800271a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002818 <HAL_RCC_GetSysClockFreq+0x2e4>
 800271e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800272a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800272e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002736:	e043      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	ee07 3a90 	vmov	s15, r3
 800273e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002742:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002824 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800274a:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800275a:	ed97 6a02 	vldr	s12, [r7, #8]
 800275e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002818 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800276a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800276e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800277a:	e021      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002786:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002820 <HAL_RCC_GetSysClockFreq+0x2ec>
 800278a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800278e:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800279e:	ed97 6a02 	vldr	s12, [r7, #8]
 80027a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002818 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027be:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	0a5b      	lsrs	r3, r3, #9
 80027c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ca:	3301      	adds	r3, #1
 80027cc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	ee07 3a90 	vmov	s15, r3
 80027d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80027dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e4:	ee17 3a90 	vmov	r3, s15
 80027e8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80027ea:	e005      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
    break;
 80027f0:	e002      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80027f2:	4b07      	ldr	r3, [pc, #28]	; (8002810 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027f4:	61bb      	str	r3, [r7, #24]
    break;
 80027f6:	bf00      	nop
  }

  return sysclockfreq;
 80027f8:	69bb      	ldr	r3, [r7, #24]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3724      	adds	r7, #36	; 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	58024400 	.word	0x58024400
 800280c:	03d09000 	.word	0x03d09000
 8002810:	003d0900 	.word	0x003d0900
 8002814:	007a1200 	.word	0x007a1200
 8002818:	46000000 	.word	0x46000000
 800281c:	4c742400 	.word	0x4c742400
 8002820:	4a742400 	.word	0x4a742400
 8002824:	4af42400 	.word	0x4af42400

08002828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800282e:	f7ff fe81 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8002832:	4602      	mov	r2, r0
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_RCC_GetHCLKFreq+0x50>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	490f      	ldr	r1, [pc, #60]	; (800287c <HAL_RCC_GetHCLKFreq+0x54>)
 8002840:	5ccb      	ldrb	r3, [r1, r3]
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	fa22 f303 	lsr.w	r3, r2, r3
 800284a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_RCC_GetHCLKFreq+0x50>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_RCC_GetHCLKFreq+0x54>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	4a07      	ldr	r2, [pc, #28]	; (8002880 <HAL_RCC_GetHCLKFreq+0x58>)
 8002864:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002866:	4a07      	ldr	r2, [pc, #28]	; (8002884 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <HAL_RCC_GetHCLKFreq+0x58>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	58024400 	.word	0x58024400
 800287c:	08006228 	.word	0x08006228
 8002880:	24000004 	.word	0x24000004
 8002884:	24000000 	.word	0x24000000

08002888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800288c:	f7ff ffcc 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4904      	ldr	r1, [pc, #16]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	58024400 	.word	0x58024400
 80028b0:	08006228 	.word	0x08006228

080028b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80028b8:	f7ff ffb6 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4904      	ldr	r1, [pc, #16]	; (80028dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	58024400 	.word	0x58024400
 80028dc:	08006228 	.word	0x08006228

080028e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028e8:	2300      	movs	r3, #0
 80028ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028ec:	2300      	movs	r3, #0
 80028ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d03f      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002904:	d02a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002906:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800290a:	d824      	bhi.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800290c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002910:	d018      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002916:	d81e      	bhi.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800291c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002920:	d007      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002922:	e018      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002924:	4ba3      	ldr	r3, [pc, #652]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	4aa2      	ldr	r2, [pc, #648]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800292a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002930:	e015      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3304      	adds	r3, #4
 8002936:	2102      	movs	r1, #2
 8002938:	4618      	mov	r0, r3
 800293a:	f001 f9d5 	bl	8003ce8 <RCCEx_PLL2_Config>
 800293e:	4603      	mov	r3, r0
 8002940:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002942:	e00c      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3324      	adds	r3, #36	; 0x24
 8002948:	2102      	movs	r1, #2
 800294a:	4618      	mov	r0, r3
 800294c:	f001 fa7e 	bl	8003e4c <RCCEx_PLL3_Config>
 8002950:	4603      	mov	r3, r0
 8002952:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002954:	e003      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	75fb      	strb	r3, [r7, #23]
      break;
 800295a:	e000      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800295c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800295e:	7dfb      	ldrb	r3, [r7, #23]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d109      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002964:	4b93      	ldr	r3, [pc, #588]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002970:	4990      	ldr	r1, [pc, #576]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	650b      	str	r3, [r1, #80]	; 0x50
 8002976:	e001      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d03d      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	2b04      	cmp	r3, #4
 800298e:	d826      	bhi.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002990:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002996:	bf00      	nop
 8002998:	080029ad 	.word	0x080029ad
 800299c:	080029bb 	.word	0x080029bb
 80029a0:	080029cd 	.word	0x080029cd
 80029a4:	080029e5 	.word	0x080029e5
 80029a8:	080029e5 	.word	0x080029e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029ac:	4b81      	ldr	r3, [pc, #516]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	4a80      	ldr	r2, [pc, #512]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029b8:	e015      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 f991 	bl	8003ce8 <RCCEx_PLL2_Config>
 80029c6:	4603      	mov	r3, r0
 80029c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029ca:	e00c      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3324      	adds	r3, #36	; 0x24
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 fa3a 	bl	8003e4c <RCCEx_PLL3_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029dc:	e003      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	75fb      	strb	r3, [r7, #23]
      break;
 80029e2:	e000      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80029e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029ec:	4b71      	ldr	r3, [pc, #452]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f0:	f023 0207 	bic.w	r2, r3, #7
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	496e      	ldr	r1, [pc, #440]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	650b      	str	r3, [r1, #80]	; 0x50
 80029fe:	e001      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
 8002a02:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d042      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a18:	d02b      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1e:	d825      	bhi.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a20:	2bc0      	cmp	r3, #192	; 0xc0
 8002a22:	d028      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a24:	2bc0      	cmp	r3, #192	; 0xc0
 8002a26:	d821      	bhi.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d016      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002a2c:	2b80      	cmp	r3, #128	; 0x80
 8002a2e:	d81d      	bhi.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d007      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a38:	e018      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a3a:	4b5e      	ldr	r3, [pc, #376]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	4a5d      	ldr	r2, [pc, #372]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a46:	e017      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 f94a 	bl	8003ce8 <RCCEx_PLL2_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a58:	e00e      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3324      	adds	r3, #36	; 0x24
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 f9f3 	bl	8003e4c <RCCEx_PLL3_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a6a:	e005      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a70:	e002      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002a72:	bf00      	nop
 8002a74:	e000      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a7e:	4b4d      	ldr	r3, [pc, #308]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a82:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	494a      	ldr	r1, [pc, #296]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	650b      	str	r3, [r1, #80]	; 0x50
 8002a90:	e001      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
 8002a94:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d049      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002aa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aac:	d030      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002aae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ab2:	d82a      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ab4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ab8:	d02c      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002aba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002abe:	d824      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac4:	d018      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aca:	d81e      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002ad0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ad4:	d007      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002ad6:	e018      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ad8:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	4a35      	ldr	r2, [pc, #212]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ae4:	e017      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f001 f8fb 	bl	8003ce8 <RCCEx_PLL2_Config>
 8002af2:	4603      	mov	r3, r0
 8002af4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002af6:	e00e      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3324      	adds	r3, #36	; 0x24
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f001 f9a4 	bl	8003e4c <RCCEx_PLL3_Config>
 8002b04:	4603      	mov	r3, r0
 8002b06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b08:	e005      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b0e:	e002      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b10:	bf00      	nop
 8002b12:	e000      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b1c:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b2a:	4922      	ldr	r1, [pc, #136]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	658b      	str	r3, [r1, #88]	; 0x58
 8002b30:	e001      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
 8002b34:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d04b      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b4c:	d030      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b52:	d82a      	bhi.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b58:	d02e      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002b5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b5e:	d824      	bhi.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b64:	d018      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002b66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b6a:	d81e      	bhi.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b74:	d007      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002b76:	e018      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b84:	e019      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f001 f8ab 	bl	8003ce8 <RCCEx_PLL2_Config>
 8002b92:	4603      	mov	r3, r0
 8002b94:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b96:	e010      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3324      	adds	r3, #36	; 0x24
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 f954 	bl	8003e4c <RCCEx_PLL3_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ba8:	e007      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
      break;
 8002bae:	e004      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002bb0:	bf00      	nop
 8002bb2:	e002      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002bb4:	58024400 	.word	0x58024400
      break;
 8002bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bba:	7dfb      	ldrb	r3, [r7, #23]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bc0:	4b99      	ldr	r3, [pc, #612]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002bce:	4996      	ldr	r1, [pc, #600]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	658b      	str	r3, [r1, #88]	; 0x58
 8002bd4:	e001      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
 8002bd8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d032      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bea:	2b30      	cmp	r3, #48	; 0x30
 8002bec:	d01c      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002bee:	2b30      	cmp	r3, #48	; 0x30
 8002bf0:	d817      	bhi.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d00c      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d813      	bhi.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d016      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002bfe:	2b10      	cmp	r3, #16
 8002c00:	d10f      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c02:	4b89      	ldr	r3, [pc, #548]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	4a88      	ldr	r2, [pc, #544]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c0e:	e00e      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3304      	adds	r3, #4
 8002c14:	2102      	movs	r1, #2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 f866 	bl	8003ce8 <RCCEx_PLL2_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c20:	e005      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
      break;
 8002c26:	e002      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002c28:	bf00      	nop
 8002c2a:	e000      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c34:	4b7c      	ldr	r3, [pc, #496]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c40:	4979      	ldr	r1, [pc, #484]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c46:	e001      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
 8002c4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d047      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c60:	d030      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002c62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c66:	d82a      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002c68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c6c:	d02c      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002c6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c72:	d824      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c78:	d018      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c7e:	d81e      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c88:	d007      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002c8a:	e018      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c8c:	4b66      	ldr	r3, [pc, #408]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	4a65      	ldr	r2, [pc, #404]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c98:	e017      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 f821 	bl	8003ce8 <RCCEx_PLL2_Config>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002caa:	e00e      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3324      	adds	r3, #36	; 0x24
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f001 f8ca 	bl	8003e4c <RCCEx_PLL3_Config>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cbc:	e005      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc2:	e002      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002cc4:	bf00      	nop
 8002cc6:	e000      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002cd0:	4b55      	ldr	r3, [pc, #340]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	4952      	ldr	r1, [pc, #328]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	650b      	str	r3, [r1, #80]	; 0x50
 8002ce2:	e001      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d049      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cfc:	d02e      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002cfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d02:	d828      	bhi.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d08:	d02a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002d0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d0e:	d822      	bhi.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d14:	d026      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002d16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d1a:	d81c      	bhi.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d20:	d010      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002d22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d26:	d816      	bhi.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01d      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d30:	d111      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3304      	adds	r3, #4
 8002d36:	2101      	movs	r1, #1
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 ffd5 	bl	8003ce8 <RCCEx_PLL2_Config>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d42:	e012      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3324      	adds	r3, #36	; 0x24
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 f87e 	bl	8003e4c <RCCEx_PLL3_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d54:	e009      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	75fb      	strb	r3, [r7, #23]
      break;
 8002d5a:	e006      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002d5c:	bf00      	nop
 8002d5e:	e004      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002d60:	bf00      	nop
 8002d62:	e002      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002d64:	bf00      	nop
 8002d66:	e000      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d70:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d74:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7c:	492a      	ldr	r1, [pc, #168]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	650b      	str	r3, [r1, #80]	; 0x50
 8002d82:	e001      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d04d      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d9e:	d02e      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002da4:	d828      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002daa:	d02a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db0:	d822      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002db2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002db6:	d026      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002db8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002dbc:	d81c      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc8:	d816      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01d      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dd2:	d111      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	2101      	movs	r1, #1
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 ff84 	bl	8003ce8 <RCCEx_PLL2_Config>
 8002de0:	4603      	mov	r3, r0
 8002de2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002de4:	e012      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3324      	adds	r3, #36	; 0x24
 8002dea:	2101      	movs	r1, #1
 8002dec:	4618      	mov	r0, r3
 8002dee:	f001 f82d 	bl	8003e4c <RCCEx_PLL3_Config>
 8002df2:	4603      	mov	r3, r0
 8002df4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002df6:	e009      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8002dfc:	e006      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e004      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e02:	bf00      	nop
 8002e04:	e002      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e06:	bf00      	nop
 8002e08:	e000      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e12:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e16:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e20:	4901      	ldr	r1, [pc, #4]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	658b      	str	r3, [r1, #88]	; 0x58
 8002e26:	e003      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002e28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d02f      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e44:	d00e      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e4a:	d814      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d015      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e54:	d10f      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e56:	4baf      	ldr	r3, [pc, #700]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	4aae      	ldr	r2, [pc, #696]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e62:	e00c      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	2101      	movs	r1, #1
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 ff3c 	bl	8003ce8 <RCCEx_PLL2_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e74:	e003      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
      break;
 8002e7a:	e000      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e84:	4ba3      	ldr	r3, [pc, #652]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e90:	49a0      	ldr	r1, [pc, #640]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	650b      	str	r3, [r1, #80]	; 0x50
 8002e96:	e001      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d032      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d81b      	bhi.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002eb0:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002eef 	.word	0x08002eef
 8002ebc:	08002ec9 	.word	0x08002ec9
 8002ec0:	08002ed7 	.word	0x08002ed7
 8002ec4:	08002eef 	.word	0x08002eef
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec8:	4b92      	ldr	r3, [pc, #584]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	4a91      	ldr	r2, [pc, #580]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ed4:	e00c      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2102      	movs	r1, #2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 ff03 	bl	8003ce8 <RCCEx_PLL2_Config>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ee6:	e003      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	75fb      	strb	r3, [r7, #23]
      break;
 8002eec:	e000      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ef6:	4b87      	ldr	r3, [pc, #540]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efa:	f023 0203 	bic.w	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4984      	ldr	r1, [pc, #528]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f08:	e001      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
 8002f0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8086 	beq.w	8003028 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f1c:	4b7e      	ldr	r3, [pc, #504]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a7d      	ldr	r2, [pc, #500]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f28:	f7fe f886 	bl	8001038 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f2e:	e009      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f30:	f7fe f882 	bl	8001038 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d902      	bls.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	75fb      	strb	r3, [r7, #23]
        break;
 8002f42:	e005      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f44:	4b74      	ldr	r3, [pc, #464]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0ef      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d166      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f56:	4b6f      	ldr	r3, [pc, #444]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f60:	4053      	eors	r3, r2
 8002f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d013      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f6a:	4b6a      	ldr	r3, [pc, #424]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f72:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f74:	4b67      	ldr	r3, [pc, #412]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	4a66      	ldr	r2, [pc, #408]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f80:	4b64      	ldr	r3, [pc, #400]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	4a63      	ldr	r2, [pc, #396]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f8c:	4a61      	ldr	r2, [pc, #388]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f9c:	d115      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fe f84b 	bl	8001038 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fa4:	e00b      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa6:	f7fe f847 	bl	8001038 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d902      	bls.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	75fb      	strb	r3, [r7, #23]
            break;
 8002fbc:	e005      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fbe:	4b55      	ldr	r3, [pc, #340]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0ed      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d126      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fde:	d10d      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002fe0:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fee:	0919      	lsrs	r1, r3, #4
 8002ff0:	4b4a      	ldr	r3, [pc, #296]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002ff2:	400b      	ands	r3, r1
 8002ff4:	4947      	ldr	r1, [pc, #284]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	610b      	str	r3, [r1, #16]
 8002ffa:	e005      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002ffc:	4b45      	ldr	r3, [pc, #276]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	4a44      	ldr	r2, [pc, #272]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003002:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003006:	6113      	str	r3, [r2, #16]
 8003008:	4b42      	ldr	r3, [pc, #264]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800300a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003016:	493f      	ldr	r1, [pc, #252]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003018:	4313      	orrs	r3, r2
 800301a:	670b      	str	r3, [r1, #112]	; 0x70
 800301c:	e004      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	75bb      	strb	r3, [r7, #22]
 8003022:	e001      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003024:	7dfb      	ldrb	r3, [r7, #23]
 8003026:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8085 	beq.w	8003140 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800303a:	2b28      	cmp	r3, #40	; 0x28
 800303c:	d866      	bhi.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800303e:	a201      	add	r2, pc, #4	; (adr r2, 8003044 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	08003121 	.word	0x08003121
 8003048:	0800310d 	.word	0x0800310d
 800304c:	0800310d 	.word	0x0800310d
 8003050:	0800310d 	.word	0x0800310d
 8003054:	0800310d 	.word	0x0800310d
 8003058:	0800310d 	.word	0x0800310d
 800305c:	0800310d 	.word	0x0800310d
 8003060:	0800310d 	.word	0x0800310d
 8003064:	080030e9 	.word	0x080030e9
 8003068:	0800310d 	.word	0x0800310d
 800306c:	0800310d 	.word	0x0800310d
 8003070:	0800310d 	.word	0x0800310d
 8003074:	0800310d 	.word	0x0800310d
 8003078:	0800310d 	.word	0x0800310d
 800307c:	0800310d 	.word	0x0800310d
 8003080:	0800310d 	.word	0x0800310d
 8003084:	080030fb 	.word	0x080030fb
 8003088:	0800310d 	.word	0x0800310d
 800308c:	0800310d 	.word	0x0800310d
 8003090:	0800310d 	.word	0x0800310d
 8003094:	0800310d 	.word	0x0800310d
 8003098:	0800310d 	.word	0x0800310d
 800309c:	0800310d 	.word	0x0800310d
 80030a0:	0800310d 	.word	0x0800310d
 80030a4:	08003121 	.word	0x08003121
 80030a8:	0800310d 	.word	0x0800310d
 80030ac:	0800310d 	.word	0x0800310d
 80030b0:	0800310d 	.word	0x0800310d
 80030b4:	0800310d 	.word	0x0800310d
 80030b8:	0800310d 	.word	0x0800310d
 80030bc:	0800310d 	.word	0x0800310d
 80030c0:	0800310d 	.word	0x0800310d
 80030c4:	08003121 	.word	0x08003121
 80030c8:	0800310d 	.word	0x0800310d
 80030cc:	0800310d 	.word	0x0800310d
 80030d0:	0800310d 	.word	0x0800310d
 80030d4:	0800310d 	.word	0x0800310d
 80030d8:	0800310d 	.word	0x0800310d
 80030dc:	0800310d 	.word	0x0800310d
 80030e0:	0800310d 	.word	0x0800310d
 80030e4:	08003121 	.word	0x08003121
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	2101      	movs	r1, #1
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fdfa 	bl	8003ce8 <RCCEx_PLL2_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80030f8:	e013      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3324      	adds	r3, #36	; 0x24
 80030fe:	2101      	movs	r1, #1
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fea3 	bl	8003e4c <RCCEx_PLL3_Config>
 8003106:	4603      	mov	r3, r0
 8003108:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800310a:	e00a      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	75fb      	strb	r3, [r7, #23]
      break;
 8003110:	e007      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003112:	bf00      	nop
 8003114:	58024400 	.word	0x58024400
 8003118:	58024800 	.word	0x58024800
 800311c:	00ffffcf 	.word	0x00ffffcf
      break;
 8003120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003122:	7dfb      	ldrb	r3, [r7, #23]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d109      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003128:	4b96      	ldr	r3, [pc, #600]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003134:	4993      	ldr	r1, [pc, #588]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	654b      	str	r3, [r1, #84]	; 0x54
 800313a:	e001      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d038      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003150:	2b05      	cmp	r3, #5
 8003152:	d821      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003154:	a201      	add	r2, pc, #4	; (adr r2, 800315c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315a:	bf00      	nop
 800315c:	0800319f 	.word	0x0800319f
 8003160:	08003175 	.word	0x08003175
 8003164:	08003187 	.word	0x08003187
 8003168:	0800319f 	.word	0x0800319f
 800316c:	0800319f 	.word	0x0800319f
 8003170:	0800319f 	.word	0x0800319f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	2101      	movs	r1, #1
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fdb4 	bl	8003ce8 <RCCEx_PLL2_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003184:	e00c      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3324      	adds	r3, #36	; 0x24
 800318a:	2101      	movs	r1, #1
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fe5d 	bl	8003e4c <RCCEx_PLL3_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003196:	e003      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	75fb      	strb	r3, [r7, #23]
      break;
 800319c:	e000      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800319e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80031a6:	4b77      	ldr	r3, [pc, #476]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	f023 0207 	bic.w	r2, r3, #7
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b2:	4974      	ldr	r1, [pc, #464]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	654b      	str	r3, [r1, #84]	; 0x54
 80031b8:	e001      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d03a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d0:	2b05      	cmp	r3, #5
 80031d2:	d821      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	0800321f 	.word	0x0800321f
 80031e0:	080031f5 	.word	0x080031f5
 80031e4:	08003207 	.word	0x08003207
 80031e8:	0800321f 	.word	0x0800321f
 80031ec:	0800321f 	.word	0x0800321f
 80031f0:	0800321f 	.word	0x0800321f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3304      	adds	r3, #4
 80031f8:	2101      	movs	r1, #1
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fd74 	bl	8003ce8 <RCCEx_PLL2_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003204:	e00c      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3324      	adds	r3, #36	; 0x24
 800320a:	2101      	movs	r1, #1
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fe1d 	bl	8003e4c <RCCEx_PLL3_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003216:	e003      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	75fb      	strb	r3, [r7, #23]
      break;
 800321c:	e000      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800321e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003226:	4b57      	ldr	r3, [pc, #348]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	f023 0207 	bic.w	r2, r3, #7
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003234:	4953      	ldr	r1, [pc, #332]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	658b      	str	r3, [r1, #88]	; 0x58
 800323a:	e001      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d04b      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003256:	d02e      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800325c:	d828      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800325e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003262:	d02a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003268:	d822      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800326a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800326e:	d026      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003270:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003274:	d81c      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800327a:	d010      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800327c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003280:	d816      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01d      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800328a:	d111      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fd28 	bl	8003ce8 <RCCEx_PLL2_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800329c:	e012      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3324      	adds	r3, #36	; 0x24
 80032a2:	2102      	movs	r1, #2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fdd1 	bl	8003e4c <RCCEx_PLL3_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032ae:	e009      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	75fb      	strb	r3, [r7, #23]
      break;
 80032b4:	e006      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80032b6:	bf00      	nop
 80032b8:	e004      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80032ba:	bf00      	nop
 80032bc:	e002      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80032be:	bf00      	nop
 80032c0:	e000      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80032c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ca:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d8:	492a      	ldr	r1, [pc, #168]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	654b      	str	r3, [r1, #84]	; 0x54
 80032de:	e001      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d04d      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80032fa:	d02e      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80032fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003300:	d828      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003306:	d02a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800330c:	d822      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800330e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003312:	d026      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003314:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003318:	d81c      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800331a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800331e:	d010      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003324:	d816      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01d      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332e:	d111      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fcd6 	bl	8003ce8 <RCCEx_PLL2_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003340:	e012      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3324      	adds	r3, #36	; 0x24
 8003346:	2102      	movs	r1, #2
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fd7f 	bl	8003e4c <RCCEx_PLL3_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003352:	e009      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	75fb      	strb	r3, [r7, #23]
      break;
 8003358:	e006      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800335a:	bf00      	nop
 800335c:	e004      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800335e:	bf00      	nop
 8003360:	e002      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003362:	bf00      	nop
 8003364:	e000      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003372:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800337c:	4901      	ldr	r1, [pc, #4]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	658b      	str	r3, [r1, #88]	; 0x58
 8003382:	e003      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003394:	2b00      	cmp	r3, #0
 8003396:	d04b      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800339e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033a2:	d02e      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80033a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033a8:	d828      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ae:	d02a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80033b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b4:	d822      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033ba:	d026      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80033bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033c0:	d81c      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c6:	d010      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80033c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033cc:	d816      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01d      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80033d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d6:	d111      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fc82 	bl	8003ce8 <RCCEx_PLL2_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80033e8:	e012      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3324      	adds	r3, #36	; 0x24
 80033ee:	2102      	movs	r1, #2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fd2b 	bl	8003e4c <RCCEx_PLL3_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80033fa:	e009      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003400:	e006      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003402:	bf00      	nop
 8003404:	e004      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003406:	bf00      	nop
 8003408:	e002      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800340a:	bf00      	nop
 800340c:	e000      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800340e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003410:	7dfb      	ldrb	r3, [r7, #23]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003416:	4b9d      	ldr	r3, [pc, #628]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003424:	4999      	ldr	r1, [pc, #612]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003426:	4313      	orrs	r3, r2
 8003428:	658b      	str	r3, [r1, #88]	; 0x58
 800342a:	e001      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342c:	7dfb      	ldrb	r3, [r7, #23]
 800342e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003446:	d10a      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3324      	adds	r3, #36	; 0x24
 800344c:	2102      	movs	r1, #2
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fcfc 	bl	8003e4c <RCCEx_PLL3_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800345e:	4b8b      	ldr	r3, [pc, #556]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003462:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800346c:	4987      	ldr	r1, [pc, #540]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800346e:	4313      	orrs	r3, r2
 8003470:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003488:	d10a      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3324      	adds	r3, #36	; 0x24
 800348e:	2102      	movs	r1, #2
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fcdb 	bl	8003e4c <RCCEx_PLL3_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034a0:	4b7a      	ldr	r3, [pc, #488]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ae:	4977      	ldr	r1, [pc, #476]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d034      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034ca:	d01d      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80034cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034d0:	d817      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80034d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034da:	d009      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80034dc:	e011      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3304      	adds	r3, #4
 80034e2:	2100      	movs	r1, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fbff 	bl	8003ce8 <RCCEx_PLL2_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80034ee:	e00c      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3324      	adds	r3, #36	; 0x24
 80034f4:	2102      	movs	r1, #2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fca8 	bl	8003e4c <RCCEx_PLL3_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003500:	e003      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	75fb      	strb	r3, [r7, #23]
      break;
 8003506:	e000      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800350a:	7dfb      	ldrb	r3, [r7, #23]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003510:	4b5e      	ldr	r3, [pc, #376]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800351e:	495b      	ldr	r1, [pc, #364]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003520:	4313      	orrs	r3, r2
 8003522:	658b      	str	r3, [r1, #88]	; 0x58
 8003524:	e001      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d033      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800353c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003540:	d01c      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003542:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003546:	d816      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800354c:	d003      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800354e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003552:	d007      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003554:	e00f      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003556:	4b4d      	ldr	r3, [pc, #308]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	4a4c      	ldr	r2, [pc, #304]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800355c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003560:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003562:	e00c      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3324      	adds	r3, #36	; 0x24
 8003568:	2101      	movs	r1, #1
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fc6e 	bl	8003e4c <RCCEx_PLL3_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003574:	e003      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
      break;
 800357a:	e000      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800357c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003584:	4b41      	ldr	r3, [pc, #260]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003592:	493e      	ldr	r1, [pc, #248]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003594:	4313      	orrs	r3, r2
 8003596:	654b      	str	r3, [r1, #84]	; 0x54
 8003598:	e001      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359a:	7dfb      	ldrb	r3, [r7, #23]
 800359c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d029      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80035b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b6:	d007      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80035b8:	e00f      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ba:	4b34      	ldr	r3, [pc, #208]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	4a33      	ldr	r2, [pc, #204]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80035c6:	e00b      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	2102      	movs	r1, #2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fb8a 	bl	8003ce8 <RCCEx_PLL2_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80035d8:	e002      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
      break;
 80035de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035e6:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	4926      	ldr	r1, [pc, #152]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035f8:	e001      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3324      	adds	r3, #36	; 0x24
 800360e:	2102      	movs	r1, #2
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fc1b 	bl	8003e4c <RCCEx_PLL3_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d033      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003634:	d017      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800363a:	d811      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800363c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003640:	d013      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003646:	d80b      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d010      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800364c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003650:	d106      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003652:	4b0e      	ldr	r3, [pc, #56]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	4a0d      	ldr	r2, [pc, #52]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800365c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800365e:	e007      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	75fb      	strb	r3, [r7, #23]
      break;
 8003664:	e004      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003666:	bf00      	nop
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800366e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003682:	4902      	ldr	r1, [pc, #8]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003684:	4313      	orrs	r3, r2
 8003686:	654b      	str	r3, [r1, #84]	; 0x54
 8003688:	e004      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800368a:	bf00      	nop
 800368c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036a0:	4b31      	ldr	r3, [pc, #196]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	492e      	ldr	r1, [pc, #184]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80036be:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036cc:	4926      	ldr	r1, [pc, #152]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036de:	4b22      	ldr	r3, [pc, #136]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ea:	491f      	ldr	r1, [pc, #124]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00d      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036fc:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	4a19      	ldr	r2, [pc, #100]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003702:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003706:	6113      	str	r3, [r2, #16]
 8003708:	4b17      	ldr	r3, [pc, #92]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003712:	4915      	ldr	r1, [pc, #84]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003714:	4313      	orrs	r3, r2
 8003716:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	da08      	bge.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003724:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372c:	490e      	ldr	r1, [pc, #56]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800372e:	4313      	orrs	r3, r2
 8003730:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003742:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374c:	4906      	ldr	r1, [pc, #24]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800374e:	4313      	orrs	r3, r2
 8003750:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003752:	7dbb      	ldrb	r3, [r7, #22]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	58024400 	.word	0x58024400

0800376c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003770:	f7ff f85a 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4904      	ldr	r1, [pc, #16]	; (8003794 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	58024400 	.word	0x58024400
 8003794:	08006228 	.word	0x08006228

08003798 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003798:	b480      	push	{r7}
 800379a:	b089      	sub	sp, #36	; 0x24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037a0:	4ba1      	ldr	r3, [pc, #644]	; (8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80037aa:	4b9f      	ldr	r3, [pc, #636]	; (8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	0b1b      	lsrs	r3, r3, #12
 80037b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037b6:	4b9c      	ldr	r3, [pc, #624]	; (8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80037c2:	4b99      	ldr	r3, [pc, #612]	; (8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	08db      	lsrs	r3, r3, #3
 80037c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8111 	beq.w	8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	f000 8083 	beq.w	80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	f200 80a1 	bhi.w	8003938 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d056      	beq.n	80038b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003802:	e099      	b.n	8003938 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003804:	4b88      	ldr	r3, [pc, #544]	; (8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d02d      	beq.n	800386c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003810:	4b85      	ldr	r3, [pc, #532]	; (8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	08db      	lsrs	r3, r3, #3
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	4a84      	ldr	r2, [pc, #528]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
 8003820:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	ee07 3a90 	vmov	s15, r3
 8003828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800383a:	4b7b      	ldr	r3, [pc, #492]	; (8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800384a:	ed97 6a03 	vldr	s12, [r7, #12]
 800384e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800385a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800385e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003866:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800386a:	e087      	b.n	800397c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003876:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800387a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800387e:	4b6a      	ldr	r3, [pc, #424]	; (8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800388e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003892:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800389a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800389e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038ae:	e065      	b.n	800397c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038c2:	4b59      	ldr	r3, [pc, #356]	; (8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ca:	ee07 3a90 	vmov	s15, r3
 80038ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038f2:	e043      	b.n	800397c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003906:	4b48      	ldr	r3, [pc, #288]	; (8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003916:	ed97 6a03 	vldr	s12, [r7, #12]
 800391a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800391e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800392a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800392e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003932:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003936:	e021      	b.n	800397c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003942:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394a:	4b37      	ldr	r3, [pc, #220]	; (8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395a:	ed97 6a03 	vldr	s12, [r7, #12]
 800395e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800396e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003976:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800397a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800397c:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	0a5b      	lsrs	r3, r3, #9
 8003982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003986:	ee07 3a90 	vmov	s15, r3
 800398a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003992:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003996:	edd7 6a07 	vldr	s13, [r7, #28]
 800399a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800399e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039a2:	ee17 2a90 	vmov	r2, s15
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80039aa:	4b1f      	ldr	r3, [pc, #124]	; (8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	0c1b      	lsrs	r3, r3, #16
 80039b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b4:	ee07 3a90 	vmov	s15, r3
 80039b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80039c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d0:	ee17 2a90 	vmov	r2, s15
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80039d8:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	0e1b      	lsrs	r3, r3, #24
 80039de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80039f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039fe:	ee17 2a90 	vmov	r2, s15
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a06:	e008      	b.n	8003a1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	609a      	str	r2, [r3, #8]
}
 8003a1a:	bf00      	nop
 8003a1c:	3724      	adds	r7, #36	; 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	58024400 	.word	0x58024400
 8003a2c:	03d09000 	.word	0x03d09000
 8003a30:	46000000 	.word	0x46000000
 8003a34:	4c742400 	.word	0x4c742400
 8003a38:	4a742400 	.word	0x4a742400
 8003a3c:	4af42400 	.word	0x4af42400

08003a40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	; 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a48:	4ba1      	ldr	r3, [pc, #644]	; (8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003a52:	4b9f      	ldr	r3, [pc, #636]	; (8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	0d1b      	lsrs	r3, r3, #20
 8003a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a5e:	4b9c      	ldr	r3, [pc, #624]	; (8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003a6a:	4b99      	ldr	r3, [pc, #612]	; (8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	08db      	lsrs	r3, r3, #3
 8003a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8111 	beq.w	8003cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	f000 8083 	beq.w	8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	f200 80a1 	bhi.w	8003be0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d056      	beq.n	8003b58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003aaa:	e099      	b.n	8003be0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aac:	4b88      	ldr	r3, [pc, #544]	; (8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d02d      	beq.n	8003b14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ab8:	4b85      	ldr	r3, [pc, #532]	; (8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	08db      	lsrs	r3, r3, #3
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	4a84      	ldr	r2, [pc, #528]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	ee07 3a90 	vmov	s15, r3
 8003ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae2:	4b7b      	ldr	r3, [pc, #492]	; (8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003af6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b12:	e087      	b.n	8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003cdc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b26:	4b6a      	ldr	r3, [pc, #424]	; (8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b56:	e065      	b.n	8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b6a:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b9a:	e043      	b.n	8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bae:	4b48      	ldr	r3, [pc, #288]	; (8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bde:	e021      	b.n	8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf2:	4b37      	ldr	r3, [pc, #220]	; (8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003c24:	4b2a      	ldr	r3, [pc, #168]	; (8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	0a5b      	lsrs	r3, r3, #9
 8003c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c4a:	ee17 2a90 	vmov	r2, s15
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003c52:	4b1f      	ldr	r3, [pc, #124]	; (8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	0c1b      	lsrs	r3, r3, #16
 8003c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c5c:	ee07 3a90 	vmov	s15, r3
 8003c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c78:	ee17 2a90 	vmov	r2, s15
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003c80:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	0e1b      	lsrs	r3, r3, #24
 8003c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ca6:	ee17 2a90 	vmov	r2, s15
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003cae:	e008      	b.n	8003cc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
}
 8003cc2:	bf00      	nop
 8003cc4:	3724      	adds	r7, #36	; 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	58024400 	.word	0x58024400
 8003cd4:	03d09000 	.word	0x03d09000
 8003cd8:	46000000 	.word	0x46000000
 8003cdc:	4c742400 	.word	0x4c742400
 8003ce0:	4a742400 	.word	0x4a742400
 8003ce4:	4af42400 	.word	0x4af42400

08003ce8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cf6:	4b53      	ldr	r3, [pc, #332]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d101      	bne.n	8003d06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e099      	b.n	8003e3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d06:	4b4f      	ldr	r3, [pc, #316]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a4e      	ldr	r2, [pc, #312]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003d0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d12:	f7fd f991 	bl	8001038 <HAL_GetTick>
 8003d16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d1a:	f7fd f98d 	bl	8001038 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e086      	b.n	8003e3a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d2c:	4b45      	ldr	r3, [pc, #276]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d38:	4b42      	ldr	r3, [pc, #264]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	031b      	lsls	r3, r3, #12
 8003d46:	493f      	ldr	r1, [pc, #252]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	628b      	str	r3, [r1, #40]	; 0x28
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	025b      	lsls	r3, r3, #9
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	041b      	lsls	r3, r3, #16
 8003d6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	061b      	lsls	r3, r3, #24
 8003d78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d7c:	4931      	ldr	r1, [pc, #196]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d82:	4b30      	ldr	r3, [pc, #192]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	492d      	ldr	r1, [pc, #180]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d94:	4b2b      	ldr	r3, [pc, #172]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	f023 0220 	bic.w	r2, r3, #32
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	4928      	ldr	r1, [pc, #160]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003da6:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003dac:	f023 0310 	bic.w	r3, r3, #16
 8003db0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db6:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <RCCEx_PLL2_Config+0x160>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	69d2      	ldr	r2, [r2, #28]
 8003dbe:	00d2      	lsls	r2, r2, #3
 8003dc0:	4920      	ldr	r1, [pc, #128]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003dc6:	4b1f      	ldr	r3, [pc, #124]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003dcc:	f043 0310 	orr.w	r3, r3, #16
 8003dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d106      	bne.n	8003de6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003dd8:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003dde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003de2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003de4:	e00f      	b.n	8003e06 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d106      	bne.n	8003dfa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003dec:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003df6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003df8:	e005      	b.n	8003e06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003dfa:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	4a11      	ldr	r2, [pc, #68]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003e00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e06:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003e0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e12:	f7fd f911 	bl	8001038 <HAL_GetTick>
 8003e16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e18:	e008      	b.n	8003e2c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e1a:	f7fd f90d 	bl	8001038 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e006      	b.n	8003e3a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <RCCEx_PLL2_Config+0x15c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	58024400 	.word	0x58024400
 8003e48:	ffff0007 	.word	0xffff0007

08003e4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e5a:	4b53      	ldr	r3, [pc, #332]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d101      	bne.n	8003e6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e099      	b.n	8003f9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e6a:	4b4f      	ldr	r3, [pc, #316]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a4e      	ldr	r2, [pc, #312]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e76:	f7fd f8df 	bl	8001038 <HAL_GetTick>
 8003e7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e7c:	e008      	b.n	8003e90 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e7e:	f7fd f8db 	bl	8001038 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e086      	b.n	8003f9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e90:	4b45      	ldr	r3, [pc, #276]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f0      	bne.n	8003e7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e9c:	4b42      	ldr	r3, [pc, #264]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	051b      	lsls	r3, r3, #20
 8003eaa:	493f      	ldr	r1, [pc, #252]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	628b      	str	r3, [r1, #40]	; 0x28
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	025b      	lsls	r3, r3, #9
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	041b      	lsls	r3, r3, #16
 8003ece:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	061b      	lsls	r3, r3, #24
 8003edc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ee0:	4931      	ldr	r1, [pc, #196]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ee6:	4b30      	ldr	r3, [pc, #192]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	492d      	ldr	r1, [pc, #180]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	4928      	ldr	r1, [pc, #160]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f0a:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f16:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f1a:	4b24      	ldr	r3, [pc, #144]	; (8003fac <RCCEx_PLL3_Config+0x160>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	69d2      	ldr	r2, [r2, #28]
 8003f22:	00d2      	lsls	r2, r2, #3
 8003f24:	4920      	ldr	r1, [pc, #128]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f2a:	4b1f      	ldr	r3, [pc, #124]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	4a1e      	ldr	r2, [pc, #120]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d106      	bne.n	8003f4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f48:	e00f      	b.n	8003f6a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d106      	bne.n	8003f5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f50:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f5c:	e005      	b.n	8003f6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f5e:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	4a11      	ldr	r2, [pc, #68]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f6a:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a0e      	ldr	r2, [pc, #56]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f76:	f7fd f85f 	bl	8001038 <HAL_GetTick>
 8003f7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f7c:	e008      	b.n	8003f90 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f7e:	f7fd f85b 	bl	8001038 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e006      	b.n	8003f9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <RCCEx_PLL3_Config+0x15c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	58024400 	.word	0x58024400
 8003fac:	ffff0007 	.word	0xffff0007

08003fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e049      	b.n	8004056 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fc fe96 	bl	8000d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4619      	mov	r1, r3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	f000 fbb0 	bl	8004754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e049      	b.n	8004104 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d106      	bne.n	800408a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f841 	bl	800410c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2202      	movs	r2, #2
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	4619      	mov	r1, r3
 800409c:	4610      	mov	r0, r2
 800409e:	f000 fb59 	bl	8004754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d109      	bne.n	8004144 <HAL_TIM_PWM_Start+0x24>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e03c      	b.n	80041be <HAL_TIM_PWM_Start+0x9e>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b04      	cmp	r3, #4
 8004148:	d109      	bne.n	800415e <HAL_TIM_PWM_Start+0x3e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	bf14      	ite	ne
 8004156:	2301      	movne	r3, #1
 8004158:	2300      	moveq	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	e02f      	b.n	80041be <HAL_TIM_PWM_Start+0x9e>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b08      	cmp	r3, #8
 8004162:	d109      	bne.n	8004178 <HAL_TIM_PWM_Start+0x58>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	e022      	b.n	80041be <HAL_TIM_PWM_Start+0x9e>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d109      	bne.n	8004192 <HAL_TIM_PWM_Start+0x72>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b01      	cmp	r3, #1
 8004188:	bf14      	ite	ne
 800418a:	2301      	movne	r3, #1
 800418c:	2300      	moveq	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	e015      	b.n	80041be <HAL_TIM_PWM_Start+0x9e>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b10      	cmp	r3, #16
 8004196:	d109      	bne.n	80041ac <HAL_TIM_PWM_Start+0x8c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	bf14      	ite	ne
 80041a4:	2301      	movne	r3, #1
 80041a6:	2300      	moveq	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e008      	b.n	80041be <HAL_TIM_PWM_Start+0x9e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	bf14      	ite	ne
 80041b8:	2301      	movne	r3, #1
 80041ba:	2300      	moveq	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e0a1      	b.n	800430a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_PWM_Start+0xb6>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d4:	e023      	b.n	800421e <HAL_TIM_PWM_Start+0xfe>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_PWM_Start+0xc6>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041e4:	e01b      	b.n	800421e <HAL_TIM_PWM_Start+0xfe>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_PWM_Start+0xd6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f4:	e013      	b.n	800421e <HAL_TIM_PWM_Start+0xfe>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b0c      	cmp	r3, #12
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_PWM_Start+0xe6>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004204:	e00b      	b.n	800421e <HAL_TIM_PWM_Start+0xfe>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b10      	cmp	r3, #16
 800420a:	d104      	bne.n	8004216 <HAL_TIM_PWM_Start+0xf6>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004214:	e003      	b.n	800421e <HAL_TIM_PWM_Start+0xfe>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2201      	movs	r2, #1
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fea2 	bl	8004f70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a38      	ldr	r2, [pc, #224]	; (8004314 <HAL_TIM_PWM_Start+0x1f4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_TIM_PWM_Start+0x13e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a37      	ldr	r2, [pc, #220]	; (8004318 <HAL_TIM_PWM_Start+0x1f8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00e      	beq.n	800425e <HAL_TIM_PWM_Start+0x13e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a35      	ldr	r2, [pc, #212]	; (800431c <HAL_TIM_PWM_Start+0x1fc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d009      	beq.n	800425e <HAL_TIM_PWM_Start+0x13e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a34      	ldr	r2, [pc, #208]	; (8004320 <HAL_TIM_PWM_Start+0x200>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d004      	beq.n	800425e <HAL_TIM_PWM_Start+0x13e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a32      	ldr	r2, [pc, #200]	; (8004324 <HAL_TIM_PWM_Start+0x204>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <HAL_TIM_PWM_Start+0x142>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <HAL_TIM_PWM_Start+0x144>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d007      	beq.n	8004278 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004276:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a25      	ldr	r2, [pc, #148]	; (8004314 <HAL_TIM_PWM_Start+0x1f4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d022      	beq.n	80042c8 <HAL_TIM_PWM_Start+0x1a8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428a:	d01d      	beq.n	80042c8 <HAL_TIM_PWM_Start+0x1a8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a25      	ldr	r2, [pc, #148]	; (8004328 <HAL_TIM_PWM_Start+0x208>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d018      	beq.n	80042c8 <HAL_TIM_PWM_Start+0x1a8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a24      	ldr	r2, [pc, #144]	; (800432c <HAL_TIM_PWM_Start+0x20c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d013      	beq.n	80042c8 <HAL_TIM_PWM_Start+0x1a8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a22      	ldr	r2, [pc, #136]	; (8004330 <HAL_TIM_PWM_Start+0x210>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00e      	beq.n	80042c8 <HAL_TIM_PWM_Start+0x1a8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1a      	ldr	r2, [pc, #104]	; (8004318 <HAL_TIM_PWM_Start+0x1f8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d009      	beq.n	80042c8 <HAL_TIM_PWM_Start+0x1a8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1e      	ldr	r2, [pc, #120]	; (8004334 <HAL_TIM_PWM_Start+0x214>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d004      	beq.n	80042c8 <HAL_TIM_PWM_Start+0x1a8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a16      	ldr	r2, [pc, #88]	; (800431c <HAL_TIM_PWM_Start+0x1fc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d115      	bne.n	80042f4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <HAL_TIM_PWM_Start+0x218>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b06      	cmp	r3, #6
 80042d8:	d015      	beq.n	8004306 <HAL_TIM_PWM_Start+0x1e6>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e0:	d011      	beq.n	8004306 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f2:	e008      	b.n	8004306 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e000      	b.n	8004308 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004306:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40010000 	.word	0x40010000
 8004318:	40010400 	.word	0x40010400
 800431c:	40014000 	.word	0x40014000
 8004320:	40014400 	.word	0x40014400
 8004324:	40014800 	.word	0x40014800
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40001800 	.word	0x40001800
 8004338:	00010007 	.word	0x00010007

0800433c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004356:	2302      	movs	r3, #2
 8004358:	e0ff      	b.n	800455a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b14      	cmp	r3, #20
 8004366:	f200 80f0 	bhi.w	800454a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800436a:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	080043c5 	.word	0x080043c5
 8004374:	0800454b 	.word	0x0800454b
 8004378:	0800454b 	.word	0x0800454b
 800437c:	0800454b 	.word	0x0800454b
 8004380:	08004405 	.word	0x08004405
 8004384:	0800454b 	.word	0x0800454b
 8004388:	0800454b 	.word	0x0800454b
 800438c:	0800454b 	.word	0x0800454b
 8004390:	08004447 	.word	0x08004447
 8004394:	0800454b 	.word	0x0800454b
 8004398:	0800454b 	.word	0x0800454b
 800439c:	0800454b 	.word	0x0800454b
 80043a0:	08004487 	.word	0x08004487
 80043a4:	0800454b 	.word	0x0800454b
 80043a8:	0800454b 	.word	0x0800454b
 80043ac:	0800454b 	.word	0x0800454b
 80043b0:	080044c9 	.word	0x080044c9
 80043b4:	0800454b 	.word	0x0800454b
 80043b8:	0800454b 	.word	0x0800454b
 80043bc:	0800454b 	.word	0x0800454b
 80043c0:	08004509 	.word	0x08004509
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa5c 	bl	8004888 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0208 	orr.w	r2, r2, #8
 80043de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0204 	bic.w	r2, r2, #4
 80043ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6999      	ldr	r1, [r3, #24]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	619a      	str	r2, [r3, #24]
      break;
 8004402:	e0a5      	b.n	8004550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	4618      	mov	r0, r3
 800440c:	f000 facc 	bl	80049a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6999      	ldr	r1, [r3, #24]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	021a      	lsls	r2, r3, #8
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	619a      	str	r2, [r3, #24]
      break;
 8004444:	e084      	b.n	8004550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fb35 	bl	8004abc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0208 	orr.w	r2, r2, #8
 8004460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0204 	bic.w	r2, r2, #4
 8004470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69d9      	ldr	r1, [r3, #28]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	61da      	str	r2, [r3, #28]
      break;
 8004484:	e064      	b.n	8004550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fb9d 	bl	8004bcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69d9      	ldr	r1, [r3, #28]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	021a      	lsls	r2, r3, #8
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	61da      	str	r2, [r3, #28]
      break;
 80044c6:	e043      	b.n	8004550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fbe6 	bl	8004ca0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0208 	orr.w	r2, r2, #8
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0204 	bic.w	r2, r2, #4
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004506:	e023      	b.n	8004550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fc2a 	bl	8004d68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004522:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004532:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	021a      	lsls	r2, r3, #8
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004548:	e002      	b.n	8004550 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	75fb      	strb	r3, [r7, #23]
      break;
 800454e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004558:	7dfb      	ldrb	r3, [r7, #23]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop

08004564 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_TIM_ConfigClockSource+0x1c>
 800457c:	2302      	movs	r3, #2
 800457e:	e0dc      	b.n	800473a <HAL_TIM_ConfigClockSource+0x1d6>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	4b6a      	ldr	r3, [pc, #424]	; (8004744 <HAL_TIM_ConfigClockSource+0x1e0>)
 800459c:	4013      	ands	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a64      	ldr	r2, [pc, #400]	; (8004748 <HAL_TIM_ConfigClockSource+0x1e4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	f000 80a9 	beq.w	800470e <HAL_TIM_ConfigClockSource+0x1aa>
 80045bc:	4a62      	ldr	r2, [pc, #392]	; (8004748 <HAL_TIM_ConfigClockSource+0x1e4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	f200 80ae 	bhi.w	8004720 <HAL_TIM_ConfigClockSource+0x1bc>
 80045c4:	4a61      	ldr	r2, [pc, #388]	; (800474c <HAL_TIM_ConfigClockSource+0x1e8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	f000 80a1 	beq.w	800470e <HAL_TIM_ConfigClockSource+0x1aa>
 80045cc:	4a5f      	ldr	r2, [pc, #380]	; (800474c <HAL_TIM_ConfigClockSource+0x1e8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	f200 80a6 	bhi.w	8004720 <HAL_TIM_ConfigClockSource+0x1bc>
 80045d4:	4a5e      	ldr	r2, [pc, #376]	; (8004750 <HAL_TIM_ConfigClockSource+0x1ec>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	f000 8099 	beq.w	800470e <HAL_TIM_ConfigClockSource+0x1aa>
 80045dc:	4a5c      	ldr	r2, [pc, #368]	; (8004750 <HAL_TIM_ConfigClockSource+0x1ec>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	f200 809e 	bhi.w	8004720 <HAL_TIM_ConfigClockSource+0x1bc>
 80045e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045e8:	f000 8091 	beq.w	800470e <HAL_TIM_ConfigClockSource+0x1aa>
 80045ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045f0:	f200 8096 	bhi.w	8004720 <HAL_TIM_ConfigClockSource+0x1bc>
 80045f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045f8:	f000 8089 	beq.w	800470e <HAL_TIM_ConfigClockSource+0x1aa>
 80045fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004600:	f200 808e 	bhi.w	8004720 <HAL_TIM_ConfigClockSource+0x1bc>
 8004604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004608:	d03e      	beq.n	8004688 <HAL_TIM_ConfigClockSource+0x124>
 800460a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800460e:	f200 8087 	bhi.w	8004720 <HAL_TIM_ConfigClockSource+0x1bc>
 8004612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004616:	f000 8086 	beq.w	8004726 <HAL_TIM_ConfigClockSource+0x1c2>
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461e:	d87f      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x1bc>
 8004620:	2b70      	cmp	r3, #112	; 0x70
 8004622:	d01a      	beq.n	800465a <HAL_TIM_ConfigClockSource+0xf6>
 8004624:	2b70      	cmp	r3, #112	; 0x70
 8004626:	d87b      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x1bc>
 8004628:	2b60      	cmp	r3, #96	; 0x60
 800462a:	d050      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x16a>
 800462c:	2b60      	cmp	r3, #96	; 0x60
 800462e:	d877      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x1bc>
 8004630:	2b50      	cmp	r3, #80	; 0x50
 8004632:	d03c      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x14a>
 8004634:	2b50      	cmp	r3, #80	; 0x50
 8004636:	d873      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x1bc>
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d058      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x18a>
 800463c:	2b40      	cmp	r3, #64	; 0x40
 800463e:	d86f      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x1bc>
 8004640:	2b30      	cmp	r3, #48	; 0x30
 8004642:	d064      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x1aa>
 8004644:	2b30      	cmp	r3, #48	; 0x30
 8004646:	d86b      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x1bc>
 8004648:	2b20      	cmp	r3, #32
 800464a:	d060      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x1aa>
 800464c:	2b20      	cmp	r3, #32
 800464e:	d867      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x1bc>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d05c      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x1aa>
 8004654:	2b10      	cmp	r3, #16
 8004656:	d05a      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x1aa>
 8004658:	e062      	b.n	8004720 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6899      	ldr	r1, [r3, #8]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f000 fc61 	bl	8004f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800467c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	609a      	str	r2, [r3, #8]
      break;
 8004686:	e04f      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6899      	ldr	r1, [r3, #8]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f000 fc4a 	bl	8004f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046aa:	609a      	str	r2, [r3, #8]
      break;
 80046ac:	e03c      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6859      	ldr	r1, [r3, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f000 fbba 	bl	8004e34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2150      	movs	r1, #80	; 0x50
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fc14 	bl	8004ef4 <TIM_ITRx_SetConfig>
      break;
 80046cc:	e02c      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6859      	ldr	r1, [r3, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	461a      	mov	r2, r3
 80046dc:	f000 fbd9 	bl	8004e92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2160      	movs	r1, #96	; 0x60
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fc04 	bl	8004ef4 <TIM_ITRx_SetConfig>
      break;
 80046ec:	e01c      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	6859      	ldr	r1, [r3, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f000 fb9a 	bl	8004e34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2140      	movs	r1, #64	; 0x40
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fbf4 	bl	8004ef4 <TIM_ITRx_SetConfig>
      break;
 800470c:	e00c      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f000 fbeb 	bl	8004ef4 <TIM_ITRx_SetConfig>
      break;
 800471e:	e003      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	73fb      	strb	r3, [r7, #15]
      break;
 8004724:	e000      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004726:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004738:	7bfb      	ldrb	r3, [r7, #15]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	ffceff88 	.word	0xffceff88
 8004748:	00100040 	.word	0x00100040
 800474c:	00100030 	.word	0x00100030
 8004750:	00100020 	.word	0x00100020

08004754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a40      	ldr	r2, [pc, #256]	; (8004868 <TIM_Base_SetConfig+0x114>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004772:	d00f      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a3d      	ldr	r2, [pc, #244]	; (800486c <TIM_Base_SetConfig+0x118>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00b      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a3c      	ldr	r2, [pc, #240]	; (8004870 <TIM_Base_SetConfig+0x11c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d007      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a3b      	ldr	r2, [pc, #236]	; (8004874 <TIM_Base_SetConfig+0x120>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a3a      	ldr	r2, [pc, #232]	; (8004878 <TIM_Base_SetConfig+0x124>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d108      	bne.n	80047a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2f      	ldr	r2, [pc, #188]	; (8004868 <TIM_Base_SetConfig+0x114>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d01f      	beq.n	80047ee <TIM_Base_SetConfig+0x9a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b4:	d01b      	beq.n	80047ee <TIM_Base_SetConfig+0x9a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a2c      	ldr	r2, [pc, #176]	; (800486c <TIM_Base_SetConfig+0x118>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d017      	beq.n	80047ee <TIM_Base_SetConfig+0x9a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a2b      	ldr	r2, [pc, #172]	; (8004870 <TIM_Base_SetConfig+0x11c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <TIM_Base_SetConfig+0x9a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a2a      	ldr	r2, [pc, #168]	; (8004874 <TIM_Base_SetConfig+0x120>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00f      	beq.n	80047ee <TIM_Base_SetConfig+0x9a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a29      	ldr	r2, [pc, #164]	; (8004878 <TIM_Base_SetConfig+0x124>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00b      	beq.n	80047ee <TIM_Base_SetConfig+0x9a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a28      	ldr	r2, [pc, #160]	; (800487c <TIM_Base_SetConfig+0x128>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d007      	beq.n	80047ee <TIM_Base_SetConfig+0x9a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a27      	ldr	r2, [pc, #156]	; (8004880 <TIM_Base_SetConfig+0x12c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d003      	beq.n	80047ee <TIM_Base_SetConfig+0x9a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a26      	ldr	r2, [pc, #152]	; (8004884 <TIM_Base_SetConfig+0x130>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d108      	bne.n	8004800 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a10      	ldr	r2, [pc, #64]	; (8004868 <TIM_Base_SetConfig+0x114>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00f      	beq.n	800484c <TIM_Base_SetConfig+0xf8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a12      	ldr	r2, [pc, #72]	; (8004878 <TIM_Base_SetConfig+0x124>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00b      	beq.n	800484c <TIM_Base_SetConfig+0xf8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a11      	ldr	r2, [pc, #68]	; (800487c <TIM_Base_SetConfig+0x128>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d007      	beq.n	800484c <TIM_Base_SetConfig+0xf8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a10      	ldr	r2, [pc, #64]	; (8004880 <TIM_Base_SetConfig+0x12c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <TIM_Base_SetConfig+0xf8>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a0f      	ldr	r2, [pc, #60]	; (8004884 <TIM_Base_SetConfig+0x130>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d103      	bne.n	8004854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	615a      	str	r2, [r3, #20]
}
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40010000 	.word	0x40010000
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40000c00 	.word	0x40000c00
 8004878:	40010400 	.word	0x40010400
 800487c:	40014000 	.word	0x40014000
 8004880:	40014400 	.word	0x40014400
 8004884:	40014800 	.word	0x40014800

08004888 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0201 	bic.w	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4b37      	ldr	r3, [pc, #220]	; (8004990 <TIM_OC1_SetConfig+0x108>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0303 	bic.w	r3, r3, #3
 80048be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f023 0302 	bic.w	r3, r3, #2
 80048d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <TIM_OC1_SetConfig+0x10c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00f      	beq.n	8004904 <TIM_OC1_SetConfig+0x7c>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a2c      	ldr	r2, [pc, #176]	; (8004998 <TIM_OC1_SetConfig+0x110>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00b      	beq.n	8004904 <TIM_OC1_SetConfig+0x7c>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a2b      	ldr	r2, [pc, #172]	; (800499c <TIM_OC1_SetConfig+0x114>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d007      	beq.n	8004904 <TIM_OC1_SetConfig+0x7c>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <TIM_OC1_SetConfig+0x118>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_OC1_SetConfig+0x7c>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a29      	ldr	r2, [pc, #164]	; (80049a4 <TIM_OC1_SetConfig+0x11c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d10c      	bne.n	800491e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0308 	bic.w	r3, r3, #8
 800490a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 0304 	bic.w	r3, r3, #4
 800491c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a1c      	ldr	r2, [pc, #112]	; (8004994 <TIM_OC1_SetConfig+0x10c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00f      	beq.n	8004946 <TIM_OC1_SetConfig+0xbe>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a1b      	ldr	r2, [pc, #108]	; (8004998 <TIM_OC1_SetConfig+0x110>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00b      	beq.n	8004946 <TIM_OC1_SetConfig+0xbe>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a1a      	ldr	r2, [pc, #104]	; (800499c <TIM_OC1_SetConfig+0x114>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <TIM_OC1_SetConfig+0xbe>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a19      	ldr	r2, [pc, #100]	; (80049a0 <TIM_OC1_SetConfig+0x118>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_OC1_SetConfig+0xbe>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a18      	ldr	r2, [pc, #96]	; (80049a4 <TIM_OC1_SetConfig+0x11c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d111      	bne.n	800496a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800494c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	621a      	str	r2, [r3, #32]
}
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	fffeff8f 	.word	0xfffeff8f
 8004994:	40010000 	.word	0x40010000
 8004998:	40010400 	.word	0x40010400
 800499c:	40014000 	.word	0x40014000
 80049a0:	40014400 	.word	0x40014400
 80049a4:	40014800 	.word	0x40014800

080049a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	f023 0210 	bic.w	r2, r3, #16
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4b34      	ldr	r3, [pc, #208]	; (8004aa4 <TIM_OC2_SetConfig+0xfc>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0320 	bic.w	r3, r3, #32
 80049f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a29      	ldr	r2, [pc, #164]	; (8004aa8 <TIM_OC2_SetConfig+0x100>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_OC2_SetConfig+0x68>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a28      	ldr	r2, [pc, #160]	; (8004aac <TIM_OC2_SetConfig+0x104>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d10d      	bne.n	8004a2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a1e      	ldr	r2, [pc, #120]	; (8004aa8 <TIM_OC2_SetConfig+0x100>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00f      	beq.n	8004a54 <TIM_OC2_SetConfig+0xac>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a1d      	ldr	r2, [pc, #116]	; (8004aac <TIM_OC2_SetConfig+0x104>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00b      	beq.n	8004a54 <TIM_OC2_SetConfig+0xac>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a1c      	ldr	r2, [pc, #112]	; (8004ab0 <TIM_OC2_SetConfig+0x108>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d007      	beq.n	8004a54 <TIM_OC2_SetConfig+0xac>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a1b      	ldr	r2, [pc, #108]	; (8004ab4 <TIM_OC2_SetConfig+0x10c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_OC2_SetConfig+0xac>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a1a      	ldr	r2, [pc, #104]	; (8004ab8 <TIM_OC2_SetConfig+0x110>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d113      	bne.n	8004a7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	621a      	str	r2, [r3, #32]
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	feff8fff 	.word	0xfeff8fff
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	40010400 	.word	0x40010400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800

08004abc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4b33      	ldr	r3, [pc, #204]	; (8004bb4 <TIM_OC3_SetConfig+0xf8>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0303 	bic.w	r3, r3, #3
 8004af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a28      	ldr	r2, [pc, #160]	; (8004bb8 <TIM_OC3_SetConfig+0xfc>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d003      	beq.n	8004b22 <TIM_OC3_SetConfig+0x66>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a27      	ldr	r2, [pc, #156]	; (8004bbc <TIM_OC3_SetConfig+0x100>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d10d      	bne.n	8004b3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	021b      	lsls	r3, r3, #8
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a1d      	ldr	r2, [pc, #116]	; (8004bb8 <TIM_OC3_SetConfig+0xfc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00f      	beq.n	8004b66 <TIM_OC3_SetConfig+0xaa>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a1c      	ldr	r2, [pc, #112]	; (8004bbc <TIM_OC3_SetConfig+0x100>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00b      	beq.n	8004b66 <TIM_OC3_SetConfig+0xaa>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a1b      	ldr	r2, [pc, #108]	; (8004bc0 <TIM_OC3_SetConfig+0x104>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d007      	beq.n	8004b66 <TIM_OC3_SetConfig+0xaa>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a1a      	ldr	r2, [pc, #104]	; (8004bc4 <TIM_OC3_SetConfig+0x108>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d003      	beq.n	8004b66 <TIM_OC3_SetConfig+0xaa>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a19      	ldr	r2, [pc, #100]	; (8004bc8 <TIM_OC3_SetConfig+0x10c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d113      	bne.n	8004b8e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	621a      	str	r2, [r3, #32]
}
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	fffeff8f 	.word	0xfffeff8f
 8004bb8:	40010000 	.word	0x40010000
 8004bbc:	40010400 	.word	0x40010400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40014400 	.word	0x40014400
 8004bc8:	40014800 	.word	0x40014800

08004bcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <TIM_OC4_SetConfig+0xbc>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	021b      	lsls	r3, r3, #8
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	031b      	lsls	r3, r3, #12
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a19      	ldr	r2, [pc, #100]	; (8004c8c <TIM_OC4_SetConfig+0xc0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00f      	beq.n	8004c4c <TIM_OC4_SetConfig+0x80>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <TIM_OC4_SetConfig+0xc4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00b      	beq.n	8004c4c <TIM_OC4_SetConfig+0x80>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a17      	ldr	r2, [pc, #92]	; (8004c94 <TIM_OC4_SetConfig+0xc8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d007      	beq.n	8004c4c <TIM_OC4_SetConfig+0x80>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a16      	ldr	r2, [pc, #88]	; (8004c98 <TIM_OC4_SetConfig+0xcc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d003      	beq.n	8004c4c <TIM_OC4_SetConfig+0x80>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a15      	ldr	r2, [pc, #84]	; (8004c9c <TIM_OC4_SetConfig+0xd0>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d109      	bne.n	8004c60 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	feff8fff 	.word	0xfeff8fff
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	40010400 	.word	0x40010400
 8004c94:	40014000 	.word	0x40014000
 8004c98:	40014400 	.word	0x40014400
 8004c9c:	40014800 	.word	0x40014800

08004ca0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4b21      	ldr	r3, [pc, #132]	; (8004d50 <TIM_OC5_SetConfig+0xb0>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ce0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	041b      	lsls	r3, r3, #16
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a18      	ldr	r2, [pc, #96]	; (8004d54 <TIM_OC5_SetConfig+0xb4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00f      	beq.n	8004d16 <TIM_OC5_SetConfig+0x76>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <TIM_OC5_SetConfig+0xb8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00b      	beq.n	8004d16 <TIM_OC5_SetConfig+0x76>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <TIM_OC5_SetConfig+0xbc>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d007      	beq.n	8004d16 <TIM_OC5_SetConfig+0x76>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <TIM_OC5_SetConfig+0xc0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d003      	beq.n	8004d16 <TIM_OC5_SetConfig+0x76>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a14      	ldr	r2, [pc, #80]	; (8004d64 <TIM_OC5_SetConfig+0xc4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d109      	bne.n	8004d2a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	621a      	str	r2, [r3, #32]
}
 8004d44:	bf00      	nop
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	fffeff8f 	.word	0xfffeff8f
 8004d54:	40010000 	.word	0x40010000
 8004d58:	40010400 	.word	0x40010400
 8004d5c:	40014000 	.word	0x40014000
 8004d60:	40014400 	.word	0x40014400
 8004d64:	40014800 	.word	0x40014800

08004d68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4b22      	ldr	r3, [pc, #136]	; (8004e1c <TIM_OC6_SetConfig+0xb4>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	051b      	lsls	r3, r3, #20
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a19      	ldr	r2, [pc, #100]	; (8004e20 <TIM_OC6_SetConfig+0xb8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00f      	beq.n	8004de0 <TIM_OC6_SetConfig+0x78>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a18      	ldr	r2, [pc, #96]	; (8004e24 <TIM_OC6_SetConfig+0xbc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00b      	beq.n	8004de0 <TIM_OC6_SetConfig+0x78>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <TIM_OC6_SetConfig+0xc0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d007      	beq.n	8004de0 <TIM_OC6_SetConfig+0x78>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a16      	ldr	r2, [pc, #88]	; (8004e2c <TIM_OC6_SetConfig+0xc4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_OC6_SetConfig+0x78>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <TIM_OC6_SetConfig+0xc8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d109      	bne.n	8004df4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	029b      	lsls	r3, r3, #10
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	621a      	str	r2, [r3, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	feff8fff 	.word	0xfeff8fff
 8004e20:	40010000 	.word	0x40010000
 8004e24:	40010400 	.word	0x40010400
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800

08004e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f023 0201 	bic.w	r2, r3, #1
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f023 030a 	bic.w	r3, r3, #10
 8004e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b087      	sub	sp, #28
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	f023 0210 	bic.w	r2, r3, #16
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ebc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	031b      	lsls	r3, r3, #12
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ece:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
	...

08004ef4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <TIM_ITRx_SetConfig+0x38>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f043 0307 	orr.w	r3, r3, #7
 8004f16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	609a      	str	r2, [r3, #8]
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	ffcfff8f 	.word	0xffcfff8f

08004f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	021a      	lsls	r2, r3, #8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	bf00      	nop
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	2201      	movs	r2, #1
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a1a      	ldr	r2, [r3, #32]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	401a      	ands	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a1a      	ldr	r2, [r3, #32]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e06d      	b.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a30      	ldr	r2, [pc, #192]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a2f      	ldr	r2, [pc, #188]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d108      	bne.n	800501a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800500e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005020:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a20      	ldr	r2, [pc, #128]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d022      	beq.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005046:	d01d      	beq.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d018      	beq.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1c      	ldr	r2, [pc, #112]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1a      	ldr	r2, [pc, #104]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00e      	beq.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a15      	ldr	r2, [pc, #84]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d009      	beq.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a16      	ldr	r2, [pc, #88]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10c      	bne.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800508a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	4313      	orrs	r3, r2
 8005094:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	40010000 	.word	0x40010000
 80050c0:	40010400 	.word	0x40010400
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800
 80050cc:	40000c00 	.word	0x40000c00
 80050d0:	40001800 	.word	0x40001800
 80050d4:	40014000 	.word	0x40014000

080050d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e042      	b.n	8005170 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d106      	bne.n	8005102 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7fb fe5b 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2224      	movs	r2, #36	; 0x24
 8005106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f82c 	bl	8005178 <UART_SetConfig>
 8005120:	4603      	mov	r3, r0
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e022      	b.n	8005170 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fd88 	bl	8005c48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005146:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005156:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fe0f 	bl	8005d8c <UART_CheckIdleState>
 800516e:	4603      	mov	r3, r0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800517c:	b092      	sub	sp, #72	; 0x48
 800517e:	af00      	add	r7, sp, #0
 8005180:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	431a      	orrs	r2, r3
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	431a      	orrs	r2, r3
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	4313      	orrs	r3, r2
 800519e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	4bbe      	ldr	r3, [pc, #760]	; (80054a0 <UART_SetConfig+0x328>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051b0:	430b      	orrs	r3, r1
 80051b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4ab3      	ldr	r2, [pc, #716]	; (80054a4 <UART_SetConfig+0x32c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d004      	beq.n	80051e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051e0:	4313      	orrs	r3, r2
 80051e2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	4baf      	ldr	r3, [pc, #700]	; (80054a8 <UART_SetConfig+0x330>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	f023 010f 	bic.w	r1, r3, #15
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4aa6      	ldr	r2, [pc, #664]	; (80054ac <UART_SetConfig+0x334>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d177      	bne.n	8005308 <UART_SetConfig+0x190>
 8005218:	4ba5      	ldr	r3, [pc, #660]	; (80054b0 <UART_SetConfig+0x338>)
 800521a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005220:	2b28      	cmp	r3, #40	; 0x28
 8005222:	d86d      	bhi.n	8005300 <UART_SetConfig+0x188>
 8005224:	a201      	add	r2, pc, #4	; (adr r2, 800522c <UART_SetConfig+0xb4>)
 8005226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522a:	bf00      	nop
 800522c:	080052d1 	.word	0x080052d1
 8005230:	08005301 	.word	0x08005301
 8005234:	08005301 	.word	0x08005301
 8005238:	08005301 	.word	0x08005301
 800523c:	08005301 	.word	0x08005301
 8005240:	08005301 	.word	0x08005301
 8005244:	08005301 	.word	0x08005301
 8005248:	08005301 	.word	0x08005301
 800524c:	080052d9 	.word	0x080052d9
 8005250:	08005301 	.word	0x08005301
 8005254:	08005301 	.word	0x08005301
 8005258:	08005301 	.word	0x08005301
 800525c:	08005301 	.word	0x08005301
 8005260:	08005301 	.word	0x08005301
 8005264:	08005301 	.word	0x08005301
 8005268:	08005301 	.word	0x08005301
 800526c:	080052e1 	.word	0x080052e1
 8005270:	08005301 	.word	0x08005301
 8005274:	08005301 	.word	0x08005301
 8005278:	08005301 	.word	0x08005301
 800527c:	08005301 	.word	0x08005301
 8005280:	08005301 	.word	0x08005301
 8005284:	08005301 	.word	0x08005301
 8005288:	08005301 	.word	0x08005301
 800528c:	080052e9 	.word	0x080052e9
 8005290:	08005301 	.word	0x08005301
 8005294:	08005301 	.word	0x08005301
 8005298:	08005301 	.word	0x08005301
 800529c:	08005301 	.word	0x08005301
 80052a0:	08005301 	.word	0x08005301
 80052a4:	08005301 	.word	0x08005301
 80052a8:	08005301 	.word	0x08005301
 80052ac:	080052f1 	.word	0x080052f1
 80052b0:	08005301 	.word	0x08005301
 80052b4:	08005301 	.word	0x08005301
 80052b8:	08005301 	.word	0x08005301
 80052bc:	08005301 	.word	0x08005301
 80052c0:	08005301 	.word	0x08005301
 80052c4:	08005301 	.word	0x08005301
 80052c8:	08005301 	.word	0x08005301
 80052cc:	080052f9 	.word	0x080052f9
 80052d0:	2301      	movs	r3, #1
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d6:	e222      	b.n	800571e <UART_SetConfig+0x5a6>
 80052d8:	2304      	movs	r3, #4
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052de:	e21e      	b.n	800571e <UART_SetConfig+0x5a6>
 80052e0:	2308      	movs	r3, #8
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e6:	e21a      	b.n	800571e <UART_SetConfig+0x5a6>
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ee:	e216      	b.n	800571e <UART_SetConfig+0x5a6>
 80052f0:	2320      	movs	r3, #32
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f6:	e212      	b.n	800571e <UART_SetConfig+0x5a6>
 80052f8:	2340      	movs	r3, #64	; 0x40
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fe:	e20e      	b.n	800571e <UART_SetConfig+0x5a6>
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005306:	e20a      	b.n	800571e <UART_SetConfig+0x5a6>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a69      	ldr	r2, [pc, #420]	; (80054b4 <UART_SetConfig+0x33c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d130      	bne.n	8005374 <UART_SetConfig+0x1fc>
 8005312:	4b67      	ldr	r3, [pc, #412]	; (80054b0 <UART_SetConfig+0x338>)
 8005314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	2b05      	cmp	r3, #5
 800531c:	d826      	bhi.n	800536c <UART_SetConfig+0x1f4>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <UART_SetConfig+0x1ac>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	0800533d 	.word	0x0800533d
 8005328:	08005345 	.word	0x08005345
 800532c:	0800534d 	.word	0x0800534d
 8005330:	08005355 	.word	0x08005355
 8005334:	0800535d 	.word	0x0800535d
 8005338:	08005365 	.word	0x08005365
 800533c:	2300      	movs	r3, #0
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005342:	e1ec      	b.n	800571e <UART_SetConfig+0x5a6>
 8005344:	2304      	movs	r3, #4
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534a:	e1e8      	b.n	800571e <UART_SetConfig+0x5a6>
 800534c:	2308      	movs	r3, #8
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005352:	e1e4      	b.n	800571e <UART_SetConfig+0x5a6>
 8005354:	2310      	movs	r3, #16
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535a:	e1e0      	b.n	800571e <UART_SetConfig+0x5a6>
 800535c:	2320      	movs	r3, #32
 800535e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005362:	e1dc      	b.n	800571e <UART_SetConfig+0x5a6>
 8005364:	2340      	movs	r3, #64	; 0x40
 8005366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536a:	e1d8      	b.n	800571e <UART_SetConfig+0x5a6>
 800536c:	2380      	movs	r3, #128	; 0x80
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005372:	e1d4      	b.n	800571e <UART_SetConfig+0x5a6>
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a4f      	ldr	r2, [pc, #316]	; (80054b8 <UART_SetConfig+0x340>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d130      	bne.n	80053e0 <UART_SetConfig+0x268>
 800537e:	4b4c      	ldr	r3, [pc, #304]	; (80054b0 <UART_SetConfig+0x338>)
 8005380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	2b05      	cmp	r3, #5
 8005388:	d826      	bhi.n	80053d8 <UART_SetConfig+0x260>
 800538a:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <UART_SetConfig+0x218>)
 800538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005390:	080053a9 	.word	0x080053a9
 8005394:	080053b1 	.word	0x080053b1
 8005398:	080053b9 	.word	0x080053b9
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	080053c9 	.word	0x080053c9
 80053a4:	080053d1 	.word	0x080053d1
 80053a8:	2300      	movs	r3, #0
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ae:	e1b6      	b.n	800571e <UART_SetConfig+0x5a6>
 80053b0:	2304      	movs	r3, #4
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b6:	e1b2      	b.n	800571e <UART_SetConfig+0x5a6>
 80053b8:	2308      	movs	r3, #8
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053be:	e1ae      	b.n	800571e <UART_SetConfig+0x5a6>
 80053c0:	2310      	movs	r3, #16
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c6:	e1aa      	b.n	800571e <UART_SetConfig+0x5a6>
 80053c8:	2320      	movs	r3, #32
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ce:	e1a6      	b.n	800571e <UART_SetConfig+0x5a6>
 80053d0:	2340      	movs	r3, #64	; 0x40
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d6:	e1a2      	b.n	800571e <UART_SetConfig+0x5a6>
 80053d8:	2380      	movs	r3, #128	; 0x80
 80053da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053de:	e19e      	b.n	800571e <UART_SetConfig+0x5a6>
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a35      	ldr	r2, [pc, #212]	; (80054bc <UART_SetConfig+0x344>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d130      	bne.n	800544c <UART_SetConfig+0x2d4>
 80053ea:	4b31      	ldr	r3, [pc, #196]	; (80054b0 <UART_SetConfig+0x338>)
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	2b05      	cmp	r3, #5
 80053f4:	d826      	bhi.n	8005444 <UART_SetConfig+0x2cc>
 80053f6:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <UART_SetConfig+0x284>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	08005415 	.word	0x08005415
 8005400:	0800541d 	.word	0x0800541d
 8005404:	08005425 	.word	0x08005425
 8005408:	0800542d 	.word	0x0800542d
 800540c:	08005435 	.word	0x08005435
 8005410:	0800543d 	.word	0x0800543d
 8005414:	2300      	movs	r3, #0
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541a:	e180      	b.n	800571e <UART_SetConfig+0x5a6>
 800541c:	2304      	movs	r3, #4
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005422:	e17c      	b.n	800571e <UART_SetConfig+0x5a6>
 8005424:	2308      	movs	r3, #8
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542a:	e178      	b.n	800571e <UART_SetConfig+0x5a6>
 800542c:	2310      	movs	r3, #16
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005432:	e174      	b.n	800571e <UART_SetConfig+0x5a6>
 8005434:	2320      	movs	r3, #32
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543a:	e170      	b.n	800571e <UART_SetConfig+0x5a6>
 800543c:	2340      	movs	r3, #64	; 0x40
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005442:	e16c      	b.n	800571e <UART_SetConfig+0x5a6>
 8005444:	2380      	movs	r3, #128	; 0x80
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544a:	e168      	b.n	800571e <UART_SetConfig+0x5a6>
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <UART_SetConfig+0x348>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d142      	bne.n	80054dc <UART_SetConfig+0x364>
 8005456:	4b16      	ldr	r3, [pc, #88]	; (80054b0 <UART_SetConfig+0x338>)
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	2b05      	cmp	r3, #5
 8005460:	d838      	bhi.n	80054d4 <UART_SetConfig+0x35c>
 8005462:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <UART_SetConfig+0x2f0>)
 8005464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005468:	08005481 	.word	0x08005481
 800546c:	08005489 	.word	0x08005489
 8005470:	08005491 	.word	0x08005491
 8005474:	08005499 	.word	0x08005499
 8005478:	080054c5 	.word	0x080054c5
 800547c:	080054cd 	.word	0x080054cd
 8005480:	2300      	movs	r3, #0
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005486:	e14a      	b.n	800571e <UART_SetConfig+0x5a6>
 8005488:	2304      	movs	r3, #4
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548e:	e146      	b.n	800571e <UART_SetConfig+0x5a6>
 8005490:	2308      	movs	r3, #8
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005496:	e142      	b.n	800571e <UART_SetConfig+0x5a6>
 8005498:	2310      	movs	r3, #16
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549e:	e13e      	b.n	800571e <UART_SetConfig+0x5a6>
 80054a0:	cfff69f3 	.word	0xcfff69f3
 80054a4:	58000c00 	.word	0x58000c00
 80054a8:	11fff4ff 	.word	0x11fff4ff
 80054ac:	40011000 	.word	0x40011000
 80054b0:	58024400 	.word	0x58024400
 80054b4:	40004400 	.word	0x40004400
 80054b8:	40004800 	.word	0x40004800
 80054bc:	40004c00 	.word	0x40004c00
 80054c0:	40005000 	.word	0x40005000
 80054c4:	2320      	movs	r3, #32
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ca:	e128      	b.n	800571e <UART_SetConfig+0x5a6>
 80054cc:	2340      	movs	r3, #64	; 0x40
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d2:	e124      	b.n	800571e <UART_SetConfig+0x5a6>
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054da:	e120      	b.n	800571e <UART_SetConfig+0x5a6>
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4acb      	ldr	r2, [pc, #812]	; (8005810 <UART_SetConfig+0x698>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d176      	bne.n	80055d4 <UART_SetConfig+0x45c>
 80054e6:	4bcb      	ldr	r3, [pc, #812]	; (8005814 <UART_SetConfig+0x69c>)
 80054e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054ee:	2b28      	cmp	r3, #40	; 0x28
 80054f0:	d86c      	bhi.n	80055cc <UART_SetConfig+0x454>
 80054f2:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <UART_SetConfig+0x380>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	0800559d 	.word	0x0800559d
 80054fc:	080055cd 	.word	0x080055cd
 8005500:	080055cd 	.word	0x080055cd
 8005504:	080055cd 	.word	0x080055cd
 8005508:	080055cd 	.word	0x080055cd
 800550c:	080055cd 	.word	0x080055cd
 8005510:	080055cd 	.word	0x080055cd
 8005514:	080055cd 	.word	0x080055cd
 8005518:	080055a5 	.word	0x080055a5
 800551c:	080055cd 	.word	0x080055cd
 8005520:	080055cd 	.word	0x080055cd
 8005524:	080055cd 	.word	0x080055cd
 8005528:	080055cd 	.word	0x080055cd
 800552c:	080055cd 	.word	0x080055cd
 8005530:	080055cd 	.word	0x080055cd
 8005534:	080055cd 	.word	0x080055cd
 8005538:	080055ad 	.word	0x080055ad
 800553c:	080055cd 	.word	0x080055cd
 8005540:	080055cd 	.word	0x080055cd
 8005544:	080055cd 	.word	0x080055cd
 8005548:	080055cd 	.word	0x080055cd
 800554c:	080055cd 	.word	0x080055cd
 8005550:	080055cd 	.word	0x080055cd
 8005554:	080055cd 	.word	0x080055cd
 8005558:	080055b5 	.word	0x080055b5
 800555c:	080055cd 	.word	0x080055cd
 8005560:	080055cd 	.word	0x080055cd
 8005564:	080055cd 	.word	0x080055cd
 8005568:	080055cd 	.word	0x080055cd
 800556c:	080055cd 	.word	0x080055cd
 8005570:	080055cd 	.word	0x080055cd
 8005574:	080055cd 	.word	0x080055cd
 8005578:	080055bd 	.word	0x080055bd
 800557c:	080055cd 	.word	0x080055cd
 8005580:	080055cd 	.word	0x080055cd
 8005584:	080055cd 	.word	0x080055cd
 8005588:	080055cd 	.word	0x080055cd
 800558c:	080055cd 	.word	0x080055cd
 8005590:	080055cd 	.word	0x080055cd
 8005594:	080055cd 	.word	0x080055cd
 8005598:	080055c5 	.word	0x080055c5
 800559c:	2301      	movs	r3, #1
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a2:	e0bc      	b.n	800571e <UART_SetConfig+0x5a6>
 80055a4:	2304      	movs	r3, #4
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055aa:	e0b8      	b.n	800571e <UART_SetConfig+0x5a6>
 80055ac:	2308      	movs	r3, #8
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b2:	e0b4      	b.n	800571e <UART_SetConfig+0x5a6>
 80055b4:	2310      	movs	r3, #16
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ba:	e0b0      	b.n	800571e <UART_SetConfig+0x5a6>
 80055bc:	2320      	movs	r3, #32
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c2:	e0ac      	b.n	800571e <UART_SetConfig+0x5a6>
 80055c4:	2340      	movs	r3, #64	; 0x40
 80055c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ca:	e0a8      	b.n	800571e <UART_SetConfig+0x5a6>
 80055cc:	2380      	movs	r3, #128	; 0x80
 80055ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055d2:	e0a4      	b.n	800571e <UART_SetConfig+0x5a6>
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a8f      	ldr	r2, [pc, #572]	; (8005818 <UART_SetConfig+0x6a0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d130      	bne.n	8005640 <UART_SetConfig+0x4c8>
 80055de:	4b8d      	ldr	r3, [pc, #564]	; (8005814 <UART_SetConfig+0x69c>)
 80055e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	2b05      	cmp	r3, #5
 80055e8:	d826      	bhi.n	8005638 <UART_SetConfig+0x4c0>
 80055ea:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <UART_SetConfig+0x478>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005609 	.word	0x08005609
 80055f4:	08005611 	.word	0x08005611
 80055f8:	08005619 	.word	0x08005619
 80055fc:	08005621 	.word	0x08005621
 8005600:	08005629 	.word	0x08005629
 8005604:	08005631 	.word	0x08005631
 8005608:	2300      	movs	r3, #0
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560e:	e086      	b.n	800571e <UART_SetConfig+0x5a6>
 8005610:	2304      	movs	r3, #4
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005616:	e082      	b.n	800571e <UART_SetConfig+0x5a6>
 8005618:	2308      	movs	r3, #8
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561e:	e07e      	b.n	800571e <UART_SetConfig+0x5a6>
 8005620:	2310      	movs	r3, #16
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005626:	e07a      	b.n	800571e <UART_SetConfig+0x5a6>
 8005628:	2320      	movs	r3, #32
 800562a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562e:	e076      	b.n	800571e <UART_SetConfig+0x5a6>
 8005630:	2340      	movs	r3, #64	; 0x40
 8005632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005636:	e072      	b.n	800571e <UART_SetConfig+0x5a6>
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800563e:	e06e      	b.n	800571e <UART_SetConfig+0x5a6>
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a75      	ldr	r2, [pc, #468]	; (800581c <UART_SetConfig+0x6a4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d130      	bne.n	80056ac <UART_SetConfig+0x534>
 800564a:	4b72      	ldr	r3, [pc, #456]	; (8005814 <UART_SetConfig+0x69c>)
 800564c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	2b05      	cmp	r3, #5
 8005654:	d826      	bhi.n	80056a4 <UART_SetConfig+0x52c>
 8005656:	a201      	add	r2, pc, #4	; (adr r2, 800565c <UART_SetConfig+0x4e4>)
 8005658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565c:	08005675 	.word	0x08005675
 8005660:	0800567d 	.word	0x0800567d
 8005664:	08005685 	.word	0x08005685
 8005668:	0800568d 	.word	0x0800568d
 800566c:	08005695 	.word	0x08005695
 8005670:	0800569d 	.word	0x0800569d
 8005674:	2300      	movs	r3, #0
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567a:	e050      	b.n	800571e <UART_SetConfig+0x5a6>
 800567c:	2304      	movs	r3, #4
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005682:	e04c      	b.n	800571e <UART_SetConfig+0x5a6>
 8005684:	2308      	movs	r3, #8
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568a:	e048      	b.n	800571e <UART_SetConfig+0x5a6>
 800568c:	2310      	movs	r3, #16
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005692:	e044      	b.n	800571e <UART_SetConfig+0x5a6>
 8005694:	2320      	movs	r3, #32
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569a:	e040      	b.n	800571e <UART_SetConfig+0x5a6>
 800569c:	2340      	movs	r3, #64	; 0x40
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a2:	e03c      	b.n	800571e <UART_SetConfig+0x5a6>
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056aa:	e038      	b.n	800571e <UART_SetConfig+0x5a6>
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a5b      	ldr	r2, [pc, #364]	; (8005820 <UART_SetConfig+0x6a8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d130      	bne.n	8005718 <UART_SetConfig+0x5a0>
 80056b6:	4b57      	ldr	r3, [pc, #348]	; (8005814 <UART_SetConfig+0x69c>)
 80056b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	2b05      	cmp	r3, #5
 80056c0:	d826      	bhi.n	8005710 <UART_SetConfig+0x598>
 80056c2:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <UART_SetConfig+0x550>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	080056e1 	.word	0x080056e1
 80056cc:	080056e9 	.word	0x080056e9
 80056d0:	080056f1 	.word	0x080056f1
 80056d4:	080056f9 	.word	0x080056f9
 80056d8:	08005701 	.word	0x08005701
 80056dc:	08005709 	.word	0x08005709
 80056e0:	2302      	movs	r3, #2
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e6:	e01a      	b.n	800571e <UART_SetConfig+0x5a6>
 80056e8:	2304      	movs	r3, #4
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ee:	e016      	b.n	800571e <UART_SetConfig+0x5a6>
 80056f0:	2308      	movs	r3, #8
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f6:	e012      	b.n	800571e <UART_SetConfig+0x5a6>
 80056f8:	2310      	movs	r3, #16
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fe:	e00e      	b.n	800571e <UART_SetConfig+0x5a6>
 8005700:	2320      	movs	r3, #32
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005706:	e00a      	b.n	800571e <UART_SetConfig+0x5a6>
 8005708:	2340      	movs	r3, #64	; 0x40
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800570e:	e006      	b.n	800571e <UART_SetConfig+0x5a6>
 8005710:	2380      	movs	r3, #128	; 0x80
 8005712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005716:	e002      	b.n	800571e <UART_SetConfig+0x5a6>
 8005718:	2380      	movs	r3, #128	; 0x80
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a3f      	ldr	r2, [pc, #252]	; (8005820 <UART_SetConfig+0x6a8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	f040 80f8 	bne.w	800591a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800572a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800572e:	2b20      	cmp	r3, #32
 8005730:	dc46      	bgt.n	80057c0 <UART_SetConfig+0x648>
 8005732:	2b02      	cmp	r3, #2
 8005734:	f2c0 8082 	blt.w	800583c <UART_SetConfig+0x6c4>
 8005738:	3b02      	subs	r3, #2
 800573a:	2b1e      	cmp	r3, #30
 800573c:	d87e      	bhi.n	800583c <UART_SetConfig+0x6c4>
 800573e:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <UART_SetConfig+0x5cc>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	080057c7 	.word	0x080057c7
 8005748:	0800583d 	.word	0x0800583d
 800574c:	080057cf 	.word	0x080057cf
 8005750:	0800583d 	.word	0x0800583d
 8005754:	0800583d 	.word	0x0800583d
 8005758:	0800583d 	.word	0x0800583d
 800575c:	080057df 	.word	0x080057df
 8005760:	0800583d 	.word	0x0800583d
 8005764:	0800583d 	.word	0x0800583d
 8005768:	0800583d 	.word	0x0800583d
 800576c:	0800583d 	.word	0x0800583d
 8005770:	0800583d 	.word	0x0800583d
 8005774:	0800583d 	.word	0x0800583d
 8005778:	0800583d 	.word	0x0800583d
 800577c:	080057ef 	.word	0x080057ef
 8005780:	0800583d 	.word	0x0800583d
 8005784:	0800583d 	.word	0x0800583d
 8005788:	0800583d 	.word	0x0800583d
 800578c:	0800583d 	.word	0x0800583d
 8005790:	0800583d 	.word	0x0800583d
 8005794:	0800583d 	.word	0x0800583d
 8005798:	0800583d 	.word	0x0800583d
 800579c:	0800583d 	.word	0x0800583d
 80057a0:	0800583d 	.word	0x0800583d
 80057a4:	0800583d 	.word	0x0800583d
 80057a8:	0800583d 	.word	0x0800583d
 80057ac:	0800583d 	.word	0x0800583d
 80057b0:	0800583d 	.word	0x0800583d
 80057b4:	0800583d 	.word	0x0800583d
 80057b8:	0800583d 	.word	0x0800583d
 80057bc:	0800582f 	.word	0x0800582f
 80057c0:	2b40      	cmp	r3, #64	; 0x40
 80057c2:	d037      	beq.n	8005834 <UART_SetConfig+0x6bc>
 80057c4:	e03a      	b.n	800583c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80057c6:	f7fd ffd1 	bl	800376c <HAL_RCCEx_GetD3PCLK1Freq>
 80057ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057cc:	e03c      	b.n	8005848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fd ffe0 	bl	8003798 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057dc:	e034      	b.n	8005848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057de:	f107 0318 	add.w	r3, r7, #24
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe f92c 	bl	8003a40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057ec:	e02c      	b.n	8005848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ee:	4b09      	ldr	r3, [pc, #36]	; (8005814 <UART_SetConfig+0x69c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057fa:	4b06      	ldr	r3, [pc, #24]	; (8005814 <UART_SetConfig+0x69c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	08db      	lsrs	r3, r3, #3
 8005800:	f003 0303 	and.w	r3, r3, #3
 8005804:	4a07      	ldr	r2, [pc, #28]	; (8005824 <UART_SetConfig+0x6ac>)
 8005806:	fa22 f303 	lsr.w	r3, r2, r3
 800580a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800580c:	e01c      	b.n	8005848 <UART_SetConfig+0x6d0>
 800580e:	bf00      	nop
 8005810:	40011400 	.word	0x40011400
 8005814:	58024400 	.word	0x58024400
 8005818:	40007800 	.word	0x40007800
 800581c:	40007c00 	.word	0x40007c00
 8005820:	58000c00 	.word	0x58000c00
 8005824:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005828:	4b9d      	ldr	r3, [pc, #628]	; (8005aa0 <UART_SetConfig+0x928>)
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800582c:	e00c      	b.n	8005848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800582e:	4b9d      	ldr	r3, [pc, #628]	; (8005aa4 <UART_SetConfig+0x92c>)
 8005830:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005832:	e009      	b.n	8005848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005834:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800583a:	e005      	b.n	8005848 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005846:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 81de 	beq.w	8005c0c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	4a94      	ldr	r2, [pc, #592]	; (8005aa8 <UART_SetConfig+0x930>)
 8005856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800585a:	461a      	mov	r2, r3
 800585c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005862:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	4613      	mov	r3, r2
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	4413      	add	r3, r2
 800586e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005870:	429a      	cmp	r2, r3
 8005872:	d305      	bcc.n	8005880 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800587a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800587c:	429a      	cmp	r2, r3
 800587e:	d903      	bls.n	8005888 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005886:	e1c1      	b.n	8005c0c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588a:	2200      	movs	r2, #0
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	60fa      	str	r2, [r7, #12]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	4a84      	ldr	r2, [pc, #528]	; (8005aa8 <UART_SetConfig+0x930>)
 8005896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800589a:	b29b      	uxth	r3, r3
 800589c:	2200      	movs	r2, #0
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	607a      	str	r2, [r7, #4]
 80058a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058aa:	f7fa fd15 	bl	80002d8 <__aeabi_uldivmod>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	020b      	lsls	r3, r1, #8
 80058c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058c4:	0202      	lsls	r2, r0, #8
 80058c6:	6979      	ldr	r1, [r7, #20]
 80058c8:	6849      	ldr	r1, [r1, #4]
 80058ca:	0849      	lsrs	r1, r1, #1
 80058cc:	2000      	movs	r0, #0
 80058ce:	460c      	mov	r4, r1
 80058d0:	4605      	mov	r5, r0
 80058d2:	eb12 0804 	adds.w	r8, r2, r4
 80058d6:	eb43 0905 	adc.w	r9, r3, r5
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	469a      	mov	sl, r3
 80058e2:	4693      	mov	fp, r2
 80058e4:	4652      	mov	r2, sl
 80058e6:	465b      	mov	r3, fp
 80058e8:	4640      	mov	r0, r8
 80058ea:	4649      	mov	r1, r9
 80058ec:	f7fa fcf4 	bl	80002d8 <__aeabi_uldivmod>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4613      	mov	r3, r2
 80058f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058fe:	d308      	bcc.n	8005912 <UART_SetConfig+0x79a>
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005906:	d204      	bcs.n	8005912 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800590e:	60da      	str	r2, [r3, #12]
 8005910:	e17c      	b.n	8005c0c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005918:	e178      	b.n	8005c0c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005922:	f040 80c5 	bne.w	8005ab0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005926:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800592a:	2b20      	cmp	r3, #32
 800592c:	dc48      	bgt.n	80059c0 <UART_SetConfig+0x848>
 800592e:	2b00      	cmp	r3, #0
 8005930:	db7b      	blt.n	8005a2a <UART_SetConfig+0x8b2>
 8005932:	2b20      	cmp	r3, #32
 8005934:	d879      	bhi.n	8005a2a <UART_SetConfig+0x8b2>
 8005936:	a201      	add	r2, pc, #4	; (adr r2, 800593c <UART_SetConfig+0x7c4>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	080059c7 	.word	0x080059c7
 8005940:	080059cf 	.word	0x080059cf
 8005944:	08005a2b 	.word	0x08005a2b
 8005948:	08005a2b 	.word	0x08005a2b
 800594c:	080059d7 	.word	0x080059d7
 8005950:	08005a2b 	.word	0x08005a2b
 8005954:	08005a2b 	.word	0x08005a2b
 8005958:	08005a2b 	.word	0x08005a2b
 800595c:	080059e7 	.word	0x080059e7
 8005960:	08005a2b 	.word	0x08005a2b
 8005964:	08005a2b 	.word	0x08005a2b
 8005968:	08005a2b 	.word	0x08005a2b
 800596c:	08005a2b 	.word	0x08005a2b
 8005970:	08005a2b 	.word	0x08005a2b
 8005974:	08005a2b 	.word	0x08005a2b
 8005978:	08005a2b 	.word	0x08005a2b
 800597c:	080059f7 	.word	0x080059f7
 8005980:	08005a2b 	.word	0x08005a2b
 8005984:	08005a2b 	.word	0x08005a2b
 8005988:	08005a2b 	.word	0x08005a2b
 800598c:	08005a2b 	.word	0x08005a2b
 8005990:	08005a2b 	.word	0x08005a2b
 8005994:	08005a2b 	.word	0x08005a2b
 8005998:	08005a2b 	.word	0x08005a2b
 800599c:	08005a2b 	.word	0x08005a2b
 80059a0:	08005a2b 	.word	0x08005a2b
 80059a4:	08005a2b 	.word	0x08005a2b
 80059a8:	08005a2b 	.word	0x08005a2b
 80059ac:	08005a2b 	.word	0x08005a2b
 80059b0:	08005a2b 	.word	0x08005a2b
 80059b4:	08005a2b 	.word	0x08005a2b
 80059b8:	08005a2b 	.word	0x08005a2b
 80059bc:	08005a1d 	.word	0x08005a1d
 80059c0:	2b40      	cmp	r3, #64	; 0x40
 80059c2:	d02e      	beq.n	8005a22 <UART_SetConfig+0x8aa>
 80059c4:	e031      	b.n	8005a2a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c6:	f7fc ff5f 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 80059ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059cc:	e033      	b.n	8005a36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ce:	f7fc ff71 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 80059d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059d4:	e02f      	b.n	8005a36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fd fedc 	bl	8003798 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059e4:	e027      	b.n	8005a36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059e6:	f107 0318 	add.w	r3, r7, #24
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe f828 	bl	8003a40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059f4:	e01f      	b.n	8005a36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059f6:	4b2d      	ldr	r3, [pc, #180]	; (8005aac <UART_SetConfig+0x934>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a02:	4b2a      	ldr	r3, [pc, #168]	; (8005aac <UART_SetConfig+0x934>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	08db      	lsrs	r3, r3, #3
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	4a24      	ldr	r2, [pc, #144]	; (8005aa0 <UART_SetConfig+0x928>)
 8005a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a14:	e00f      	b.n	8005a36 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005a16:	4b22      	ldr	r3, [pc, #136]	; (8005aa0 <UART_SetConfig+0x928>)
 8005a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a1a:	e00c      	b.n	8005a36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a1c:	4b21      	ldr	r3, [pc, #132]	; (8005aa4 <UART_SetConfig+0x92c>)
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a20:	e009      	b.n	8005a36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a28:	e005      	b.n	8005a36 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 80e7 	beq.w	8005c0c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	4a19      	ldr	r2, [pc, #100]	; (8005aa8 <UART_SetConfig+0x930>)
 8005a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a50:	005a      	lsls	r2, r3, #1
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	085b      	lsrs	r3, r3, #1
 8005a58:	441a      	add	r2, r3
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a62:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	2b0f      	cmp	r3, #15
 8005a68:	d916      	bls.n	8005a98 <UART_SetConfig+0x920>
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a70:	d212      	bcs.n	8005a98 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f023 030f 	bic.w	r3, r3, #15
 8005a7a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7e:	085b      	lsrs	r3, r3, #1
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005a94:	60da      	str	r2, [r3, #12]
 8005a96:	e0b9      	b.n	8005c0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a9e:	e0b5      	b.n	8005c0c <UART_SetConfig+0xa94>
 8005aa0:	03d09000 	.word	0x03d09000
 8005aa4:	003d0900 	.word	0x003d0900
 8005aa8:	08006238 	.word	0x08006238
 8005aac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ab0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	dc49      	bgt.n	8005b4c <UART_SetConfig+0x9d4>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	db7c      	blt.n	8005bb6 <UART_SetConfig+0xa3e>
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d87a      	bhi.n	8005bb6 <UART_SetConfig+0xa3e>
 8005ac0:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <UART_SetConfig+0x950>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005b53 	.word	0x08005b53
 8005acc:	08005b5b 	.word	0x08005b5b
 8005ad0:	08005bb7 	.word	0x08005bb7
 8005ad4:	08005bb7 	.word	0x08005bb7
 8005ad8:	08005b63 	.word	0x08005b63
 8005adc:	08005bb7 	.word	0x08005bb7
 8005ae0:	08005bb7 	.word	0x08005bb7
 8005ae4:	08005bb7 	.word	0x08005bb7
 8005ae8:	08005b73 	.word	0x08005b73
 8005aec:	08005bb7 	.word	0x08005bb7
 8005af0:	08005bb7 	.word	0x08005bb7
 8005af4:	08005bb7 	.word	0x08005bb7
 8005af8:	08005bb7 	.word	0x08005bb7
 8005afc:	08005bb7 	.word	0x08005bb7
 8005b00:	08005bb7 	.word	0x08005bb7
 8005b04:	08005bb7 	.word	0x08005bb7
 8005b08:	08005b83 	.word	0x08005b83
 8005b0c:	08005bb7 	.word	0x08005bb7
 8005b10:	08005bb7 	.word	0x08005bb7
 8005b14:	08005bb7 	.word	0x08005bb7
 8005b18:	08005bb7 	.word	0x08005bb7
 8005b1c:	08005bb7 	.word	0x08005bb7
 8005b20:	08005bb7 	.word	0x08005bb7
 8005b24:	08005bb7 	.word	0x08005bb7
 8005b28:	08005bb7 	.word	0x08005bb7
 8005b2c:	08005bb7 	.word	0x08005bb7
 8005b30:	08005bb7 	.word	0x08005bb7
 8005b34:	08005bb7 	.word	0x08005bb7
 8005b38:	08005bb7 	.word	0x08005bb7
 8005b3c:	08005bb7 	.word	0x08005bb7
 8005b40:	08005bb7 	.word	0x08005bb7
 8005b44:	08005bb7 	.word	0x08005bb7
 8005b48:	08005ba9 	.word	0x08005ba9
 8005b4c:	2b40      	cmp	r3, #64	; 0x40
 8005b4e:	d02e      	beq.n	8005bae <UART_SetConfig+0xa36>
 8005b50:	e031      	b.n	8005bb6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b52:	f7fc fe99 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 8005b56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b58:	e033      	b.n	8005bc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b5a:	f7fc feab 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 8005b5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b60:	e02f      	b.n	8005bc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fd fe16 	bl	8003798 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b70:	e027      	b.n	8005bc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b72:	f107 0318 	add.w	r3, r7, #24
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fd ff62 	bl	8003a40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b80:	e01f      	b.n	8005bc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b82:	4b2d      	ldr	r3, [pc, #180]	; (8005c38 <UART_SetConfig+0xac0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d009      	beq.n	8005ba2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b8e:	4b2a      	ldr	r3, [pc, #168]	; (8005c38 <UART_SetConfig+0xac0>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	08db      	lsrs	r3, r3, #3
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	4a28      	ldr	r2, [pc, #160]	; (8005c3c <UART_SetConfig+0xac4>)
 8005b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ba0:	e00f      	b.n	8005bc2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005ba2:	4b26      	ldr	r3, [pc, #152]	; (8005c3c <UART_SetConfig+0xac4>)
 8005ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ba6:	e00c      	b.n	8005bc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ba8:	4b25      	ldr	r3, [pc, #148]	; (8005c40 <UART_SetConfig+0xac8>)
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bac:	e009      	b.n	8005bc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bb4:	e005      	b.n	8005bc2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005bc0:	bf00      	nop
    }

    if (pclk != 0U)
 8005bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d021      	beq.n	8005c0c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	4a1d      	ldr	r2, [pc, #116]	; (8005c44 <UART_SetConfig+0xacc>)
 8005bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	085b      	lsrs	r3, r3, #1
 8005be0:	441a      	add	r2, r3
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	2b0f      	cmp	r3, #15
 8005bf0:	d909      	bls.n	8005c06 <UART_SetConfig+0xa8e>
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf8:	d205      	bcs.n	8005c06 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	60da      	str	r2, [r3, #12]
 8005c04:	e002      	b.n	8005c0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2200      	movs	r2, #0
 8005c26:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c28:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3748      	adds	r7, #72	; 0x48
 8005c30:	46bd      	mov	sp, r7
 8005c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c36:	bf00      	nop
 8005c38:	58024400 	.word	0x58024400
 8005c3c:	03d09000 	.word	0x03d09000
 8005c40:	003d0900 	.word	0x003d0900
 8005c44:	08006238 	.word	0x08006238

08005c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01a      	beq.n	8005d5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d46:	d10a      	bne.n	8005d5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	605a      	str	r2, [r3, #4]
  }
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d9c:	f7fb f94c 	bl	8001038 <HAL_GetTick>
 8005da0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d10e      	bne.n	8005dce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005db0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f82f 	bl	8005e22 <UART_WaitOnFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e025      	b.n	8005e1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d10e      	bne.n	8005dfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ddc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f819 	bl	8005e22 <UART_WaitOnFlagUntilTimeout>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e00f      	b.n	8005e1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b09c      	sub	sp, #112	; 0x70
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	603b      	str	r3, [r7, #0]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e32:	e0a9      	b.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3a:	f000 80a5 	beq.w	8005f88 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e3e:	f7fb f8fb 	bl	8001038 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d302      	bcc.n	8005e54 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d140      	bne.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e68:	667b      	str	r3, [r7, #100]	; 0x64
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e6      	bne.n	8005e54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ea6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ea8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e5      	bne.n	8005e86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e069      	b.n	8005faa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d051      	beq.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef2:	d149      	bne.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005efc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e6      	bne.n	8005efe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3308      	adds	r3, #8
 8005f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f023 0301 	bic.w	r3, r3, #1
 8005f46:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f50:	623a      	str	r2, [r7, #32]
 8005f52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	69f9      	ldr	r1, [r7, #28]
 8005f56:	6a3a      	ldr	r2, [r7, #32]
 8005f58:	e841 2300 	strex	r3, r2, [r1]
 8005f5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e5      	bne.n	8005f30 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e010      	b.n	8005faa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69da      	ldr	r2, [r3, #28]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	4013      	ands	r3, r2
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	bf0c      	ite	eq
 8005f98:	2301      	moveq	r3, #1
 8005f9a:	2300      	movne	r3, #0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	79fb      	ldrb	r3, [r7, #7]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	f43f af46 	beq.w	8005e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3770      	adds	r7, #112	; 0x70
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e027      	b.n	8006018 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2224      	movs	r2, #36	; 0x24
 8005fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ff6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006038:	2302      	movs	r3, #2
 800603a:	e02d      	b.n	8006098 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2224      	movs	r2, #36	; 0x24
 8006048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f84f 	bl	800611c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2220      	movs	r2, #32
 800608a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e02d      	b.n	8006114 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2224      	movs	r2, #36	; 0x24
 80060c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0201 	bic.w	r2, r2, #1
 80060de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f811 	bl	800611c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2220      	movs	r2, #32
 8006106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006128:	2b00      	cmp	r3, #0
 800612a:	d108      	bne.n	800613e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800613c:	e031      	b.n	80061a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800613e:	2310      	movs	r3, #16
 8006140:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006142:	2310      	movs	r3, #16
 8006144:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	0e5b      	lsrs	r3, r3, #25
 800614e:	b2db      	uxtb	r3, r3
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	0f5b      	lsrs	r3, r3, #29
 800615e:	b2db      	uxtb	r3, r3
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006166:	7bbb      	ldrb	r3, [r7, #14]
 8006168:	7b3a      	ldrb	r2, [r7, #12]
 800616a:	4911      	ldr	r1, [pc, #68]	; (80061b0 <UARTEx_SetNbDataToProcess+0x94>)
 800616c:	5c8a      	ldrb	r2, [r1, r2]
 800616e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006172:	7b3a      	ldrb	r2, [r7, #12]
 8006174:	490f      	ldr	r1, [pc, #60]	; (80061b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006176:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006178:	fb93 f3f2 	sdiv	r3, r3, r2
 800617c:	b29a      	uxth	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	7b7a      	ldrb	r2, [r7, #13]
 8006188:	4909      	ldr	r1, [pc, #36]	; (80061b0 <UARTEx_SetNbDataToProcess+0x94>)
 800618a:	5c8a      	ldrb	r2, [r1, r2]
 800618c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006190:	7b7a      	ldrb	r2, [r7, #13]
 8006192:	4908      	ldr	r1, [pc, #32]	; (80061b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006194:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006196:	fb93 f3f2 	sdiv	r3, r3, r2
 800619a:	b29a      	uxth	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061a2:	bf00      	nop
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	08006250 	.word	0x08006250
 80061b4:	08006258 	.word	0x08006258

080061b8 <__libc_init_array>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	4d0d      	ldr	r5, [pc, #52]	; (80061f0 <__libc_init_array+0x38>)
 80061bc:	4c0d      	ldr	r4, [pc, #52]	; (80061f4 <__libc_init_array+0x3c>)
 80061be:	1b64      	subs	r4, r4, r5
 80061c0:	10a4      	asrs	r4, r4, #2
 80061c2:	2600      	movs	r6, #0
 80061c4:	42a6      	cmp	r6, r4
 80061c6:	d109      	bne.n	80061dc <__libc_init_array+0x24>
 80061c8:	4d0b      	ldr	r5, [pc, #44]	; (80061f8 <__libc_init_array+0x40>)
 80061ca:	4c0c      	ldr	r4, [pc, #48]	; (80061fc <__libc_init_array+0x44>)
 80061cc:	f000 f820 	bl	8006210 <_init>
 80061d0:	1b64      	subs	r4, r4, r5
 80061d2:	10a4      	asrs	r4, r4, #2
 80061d4:	2600      	movs	r6, #0
 80061d6:	42a6      	cmp	r6, r4
 80061d8:	d105      	bne.n	80061e6 <__libc_init_array+0x2e>
 80061da:	bd70      	pop	{r4, r5, r6, pc}
 80061dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e0:	4798      	blx	r3
 80061e2:	3601      	adds	r6, #1
 80061e4:	e7ee      	b.n	80061c4 <__libc_init_array+0xc>
 80061e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ea:	4798      	blx	r3
 80061ec:	3601      	adds	r6, #1
 80061ee:	e7f2      	b.n	80061d6 <__libc_init_array+0x1e>
 80061f0:	08006268 	.word	0x08006268
 80061f4:	08006268 	.word	0x08006268
 80061f8:	08006268 	.word	0x08006268
 80061fc:	0800626c 	.word	0x0800626c

08006200 <memset>:
 8006200:	4402      	add	r2, r0
 8006202:	4603      	mov	r3, r0
 8006204:	4293      	cmp	r3, r2
 8006206:	d100      	bne.n	800620a <memset+0xa>
 8006208:	4770      	bx	lr
 800620a:	f803 1b01 	strb.w	r1, [r3], #1
 800620e:	e7f9      	b.n	8006204 <memset+0x4>

08006210 <_init>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr

0800621c <_fini>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr
