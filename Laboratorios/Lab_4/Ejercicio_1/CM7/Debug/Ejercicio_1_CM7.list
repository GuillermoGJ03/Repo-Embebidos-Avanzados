
Ejercicio_1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c1c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eec  08005eec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ef4  08005ef4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef4  08005ef4  00015ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08005efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  24000010  08005f0c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400010c  08005f0c  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015264  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b9  00000000  00000000  000352a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00037560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  000385d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000398f9  00000000  00000000  00039578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145ee  00000000  00000000  00072e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00182fad  00000000  00000000  0008745f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020a40c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045fc  00000000  00000000  0020a45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005e9c 	.word	0x08005e9c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005e9c 	.word	0x08005e9c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b37      	ldr	r3, [pc, #220]	; (80007f4 <main+0xec>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	60fa      	str	r2, [r7, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 fa37 	bl	8000ba4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fb67 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f85f 	bl	80007fc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <main+0xec>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a2b      	ldr	r2, [pc, #172]	; (80007f4 <main+0xec>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <main+0xec>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fec3 	bl	80014e8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fed9 	bl	800151c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <main+0xec>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	60fa      	str	r2, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 fa09 	bl	8000ba4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f96f 	bl	8000a74 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f921 	bl	80009dc <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800079a:	f000 f8a9 	bl	80008f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim2);
 800079e:	4816      	ldr	r0, [pc, #88]	; (80007f8 <main+0xf0>)
 80007a0:	f003 faa3 	bl	8003cea <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007a4:	2100      	movs	r1, #0
 80007a6:	4814      	ldr	r0, [pc, #80]	; (80007f8 <main+0xf0>)
 80007a8:	f003 fb00 	bl	8003dac <HAL_TIM_PWM_Start>
  TIM2->CCR1 = 0;
 80007ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007b0:	2200      	movs	r2, #0
 80007b2:	635a      	str	r2, [r3, #52]	; 0x34
  int cond = 1;
 80007b4:	2301      	movs	r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TIM2->CCR1 += (5 * cond);
 80007b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	4613      	mov	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ca:	440b      	add	r3, r1
 80007cc:	6353      	str	r3, [r2, #52]	; 0x34
	  HAL_Delay(500);
 80007ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007d2:	f000 fbab 	bl	8000f2c <HAL_Delay>

	  if (TIM2->CCR1 == 100 || TIM2->CCR1 == 0){
 80007d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007dc:	2b64      	cmp	r3, #100	; 0x64
 80007de:	d004      	beq.n	80007ea <main+0xe2>
 80007e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1e6      	bne.n	80007b8 <main+0xb0>
		  cond = cond * -1;
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	425b      	negs	r3, r3
 80007ee:	60bb      	str	r3, [r7, #8]
	  TIM2->CCR1 += (5 * cond);
 80007f0:	e7e2      	b.n	80007b8 <main+0xb0>
 80007f2:	bf00      	nop
 80007f4:	58024400 	.word	0x58024400
 80007f8:	2400002c 	.word	0x2400002c

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b09c      	sub	sp, #112	; 0x70
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	224c      	movs	r2, #76	; 0x4c
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f005 fb3e 	bl	8005e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2220      	movs	r2, #32
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f005 fb38 	bl	8005e8c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800081c:	2004      	movs	r0, #4
 800081e:	f000 fe91 	bl	8001544 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b30      	ldr	r3, [pc, #192]	; (80008e8 <SystemClock_Config+0xec>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <SystemClock_Config+0xec>)
 800082c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000830:	6193      	str	r3, [r2, #24]
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <SystemClock_Config+0xec>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <SystemClock_Config+0xf0>)
 800083e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000840:	4a2a      	ldr	r2, [pc, #168]	; (80008ec <SystemClock_Config+0xf0>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000848:	4b28      	ldr	r3, [pc, #160]	; (80008ec <SystemClock_Config+0xf0>)
 800084a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000854:	bf00      	nop
 8000856:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <SystemClock_Config+0xec>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800085e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000862:	d1f8      	bne.n	8000856 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000864:	2301      	movs	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000868:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000872:	2302      	movs	r3, #2
 8000874:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800087a:	2378      	movs	r3, #120	; 0x78
 800087c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800087e:	2302      	movs	r3, #2
 8000880:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000882:	2302      	movs	r3, #2
 8000884:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800088a:	230c      	movs	r3, #12
 800088c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800088e:	2300      	movs	r3, #0
 8000890:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	4618      	mov	r0, r3
 800089c:	f000 feac 	bl	80015f8 <HAL_RCC_OscConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008a6:	f000 f97d 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008aa:	233f      	movs	r3, #63	; 0x3f
 80008ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ae:	2303      	movs	r3, #3
 80008b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008b6:	2308      	movs	r3, #8
 80008b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008be:	2340      	movs	r3, #64	; 0x40
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008c8:	2340      	movs	r3, #64	; 0x40
 80008ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2104      	movs	r1, #4
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 fabf 	bl	8001e54 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008dc:	f000 f962 	bl	8000ba4 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3770      	adds	r7, #112	; 0x70
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	58024800 	.word	0x58024800
 80008ec:	58000400 	.word	0x58000400

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	; 0x38
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240;
 800092a:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <MX_TIM2_Init+0xe8>)
 800092c:	22f0      	movs	r2, #240	; 0xf0
 800092e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000938:	2264      	movs	r2, #100	; 0x64
 800093a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_TIM2_Init+0xe8>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000948:	4823      	ldr	r0, [pc, #140]	; (80009d8 <MX_TIM2_Init+0xe8>)
 800094a:	f003 f977 	bl	8003c3c <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000954:	f000 f926 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800095e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000962:	4619      	mov	r1, r3
 8000964:	481c      	ldr	r0, [pc, #112]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000966:	f003 fc43 	bl	80041f0 <HAL_TIM_ConfigClockSource>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000970:	f000 f918 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000974:	4818      	ldr	r0, [pc, #96]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000976:	f003 f9b8 	bl	8003cea <HAL_TIM_PWM_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000980:	f000 f910 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000994:	f004 f958 	bl	8004c48 <HAL_TIMEx_MasterConfigSynchronization>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800099e:	f000 f901 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a2:	2360      	movs	r3, #96	; 0x60
 80009a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b2:	463b      	mov	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	4619      	mov	r1, r3
 80009b8:	4807      	ldr	r0, [pc, #28]	; (80009d8 <MX_TIM2_Init+0xe8>)
 80009ba:	f003 fb05 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80009c4:	f000 f8ee 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <MX_TIM2_Init+0xe8>)
 80009ca:	f000 f92b 	bl	8000c24 <HAL_TIM_MspPostInit>

}
 80009ce:	bf00      	nop
 80009d0:	3738      	adds	r7, #56	; 0x38
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2400002c 	.word	0x2400002c

080009dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009e2:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <MX_USART3_UART_Init+0x94>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a24:	4811      	ldr	r0, [pc, #68]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a26:	f004 f99d 	bl	8004d64 <HAL_UART_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a30:	f000 f8b8 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a38:	f005 f93a 	bl	8005cb0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a42:	f000 f8af 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a4a:	f005 f96f 	bl	8005d2c <HAL_UARTEx_SetRxFifoThreshold>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a54:	f000 f8a6 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a5a:	f005 f8f0 	bl	8005c3e <HAL_UARTEx_DisableFifoMode>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a64:	f000 f89e 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	24000078 	.word	0x24000078
 8000a70:	40004800 	.word	0x40004800

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	4b43      	ldr	r3, [pc, #268]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	4a41      	ldr	r2, [pc, #260]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9a:	4b3f      	ldr	r3, [pc, #252]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
 8000aa6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa8:	4b3b      	ldr	r3, [pc, #236]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	4a3a      	ldr	r2, [pc, #232]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab8:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4a32      	ldr	r2, [pc, #200]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4a2b      	ldr	r2, [pc, #172]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a23      	ldr	r2, [pc, #140]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000b0a:	f043 0308 	orr.w	r3, r3, #8
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0308 	and.w	r3, r3, #8
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000b28:	f043 0310 	orr.w	r3, r3, #16
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	f003 0310 	and.w	r3, r3, #16
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b44:	4815      	ldr	r0, [pc, #84]	; (8000b9c <MX_GPIO_Init+0x128>)
 8000b46:	f000 fcb5 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4814      	ldr	r0, [pc, #80]	; (8000ba0 <MX_GPIO_Init+0x12c>)
 8000b50:	f000 fcb0 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b54:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b62:	2302      	movs	r3, #2
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480b      	ldr	r0, [pc, #44]	; (8000b9c <MX_GPIO_Init+0x128>)
 8000b6e:	f000 faf1 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_GPIO_Init+0x12c>)
 8000b8a:	f000 fae3 	bl	8001154 <HAL_GPIO_Init>

}
 8000b8e:	bf00      	nop
 8000b90:	3730      	adds	r7, #48	; 0x30
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	58024400 	.word	0x58024400
 8000b9c:	58020400 	.word	0x58020400
 8000ba0:	58021000 	.word	0x58021000

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_MspInit+0x30>)
 8000bb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bbc:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_MspInit+0x30>)
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_MspInit+0x30>)
 8000bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	58024400 	.word	0x58024400

08000be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf4:	d10e      	bne.n	8000c14 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_TIM_Base_MspInit+0x3c>)
 8000bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_TIM_Base_MspInit+0x3c>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_TIM_Base_MspInit+0x3c>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	58024400 	.word	0x58024400

08000c24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c44:	d11e      	bne.n	8000c84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_TIM_MspPostInit+0x68>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <HAL_TIM_MspPostInit+0x68>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_TIM_MspPostInit+0x68>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c64:	2301      	movs	r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4804      	ldr	r0, [pc, #16]	; (8000c90 <HAL_TIM_MspPostInit+0x6c>)
 8000c80:	f000 fa68 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58020000 	.word	0x58020000

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0b8      	sub	sp, #224	; 0xe0
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	22bc      	movs	r2, #188	; 0xbc
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f005 f8e9 	bl	8005e8c <memset>
  if(huart->Instance==USART3)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a25      	ldr	r2, [pc, #148]	; (8000d54 <HAL_UART_MspInit+0xc0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d142      	bne.n	8000d4a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fc4a 	bl	800256c <HAL_RCCEx_PeriphCLKConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cde:	f7ff ff61 	bl	8000ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000ce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000cea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000cf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	f003 0308 	and.w	r3, r3, #8
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <HAL_UART_MspInit+0xc8>)
 8000d46:	f000 fa05 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	37e0      	adds	r7, #224	; 0xe0
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40004800 	.word	0x40004800
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	58020c00 	.word	0x58020c00

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 f89e 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000db8:	f7ff fc10 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dbe:	490d      	ldr	r1, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	; (8000e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de2:	f005 f82f 	bl	8005e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fc8f 	bl	8000708 <main>
  bx  lr
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000df0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000df4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000df8:	08005efc 	.word	0x08005efc
  ldr r2, =_sbss
 8000dfc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e00:	2400010c 	.word	0x2400010c

08000e04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC3_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f000 f96e 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e14:	f001 f9d4 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_Init+0x68>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	0a1b      	lsrs	r3, r3, #8
 8000e20:	f003 030f 	and.w	r3, r3, #15
 8000e24:	4913      	ldr	r1, [pc, #76]	; (8000e74 <HAL_Init+0x6c>)
 8000e26:	5ccb      	ldrb	r3, [r1, r3]
 8000e28:	f003 031f 	and.w	r3, r3, #31
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_Init+0x68>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <HAL_Init+0x6c>)
 8000e3c:	5cd3      	ldrb	r3, [r2, r3]
 8000e3e:	f003 031f 	and.w	r3, r3, #31
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	fa22 f303 	lsr.w	r3, r2, r3
 8000e48:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_Init+0x70>)
 8000e4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_Init+0x74>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 f814 	bl	8000e80 <HAL_InitTick>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e002      	b.n	8000e68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e62:	f7ff fea5 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	58024400 	.word	0x58024400
 8000e74:	08005eb4 	.word	0x08005eb4
 8000e78:	24000004 	.word	0x24000004
 8000e7c:	24000000 	.word	0x24000000

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_InitTick+0x60>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e021      	b.n	8000ed8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <HAL_InitTick+0x64>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_InitTick+0x60>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f945 	bl	800113a <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f000 f91d 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x68>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2400000c 	.word	0x2400000c
 8000ee4:	24000000 	.word	0x24000000
 8000ee8:	24000008 	.word	0x24000008

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2400000c 	.word	0x2400000c
 8000f10:	24000108 	.word	0x24000108

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	24000108 	.word	0x24000108

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2400000c 	.word	0x2400000c

08000f74 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetREVID+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	0c1b      	lsrs	r3, r3, #16
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	5c001000 	.word	0x5c001000

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <__NVIC_SetPriorityGrouping+0x40>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <__NVIC_SetPriorityGrouping+0x40>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	60d3      	str	r3, [r2, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00
 8000fd0:	05fa0000 	.word	0x05fa0000

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff8e 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff47 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff5e 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff90 	bl	8001044 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5f 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffb2 	bl	80010ac <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001162:	4b89      	ldr	r3, [pc, #548]	; (8001388 <HAL_GPIO_Init+0x234>)
 8001164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001166:	e194      	b.n	8001492 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8186 	beq.w	800148c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b01      	cmp	r3, #1
 800118a:	d005      	beq.n	8001198 <HAL_GPIO_Init+0x44>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d130      	bne.n	80011fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ce:	2201      	movs	r2, #1
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	f003 0201 	and.w	r2, r3, #1
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b03      	cmp	r3, #3
 8001204:	d017      	beq.n	8001236 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d123      	bne.n	800128a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	691a      	ldr	r2, [r3, #16]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	69b9      	ldr	r1, [r7, #24]
 8001286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0203 	and.w	r2, r3, #3
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 80e0 	beq.w	800148c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <HAL_GPIO_Init+0x238>)
 80012ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012d2:	4a2e      	ldr	r2, [pc, #184]	; (800138c <HAL_GPIO_Init+0x238>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012dc:	4b2b      	ldr	r3, [pc, #172]	; (800138c <HAL_GPIO_Init+0x238>)
 80012de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ea:	4a29      	ldr	r2, [pc, #164]	; (8001390 <HAL_GPIO_Init+0x23c>)
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	220f      	movs	r2, #15
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a20      	ldr	r2, [pc, #128]	; (8001394 <HAL_GPIO_Init+0x240>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d052      	beq.n	80013bc <HAL_GPIO_Init+0x268>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <HAL_GPIO_Init+0x244>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d031      	beq.n	8001382 <HAL_GPIO_Init+0x22e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a1e      	ldr	r2, [pc, #120]	; (800139c <HAL_GPIO_Init+0x248>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d02b      	beq.n	800137e <HAL_GPIO_Init+0x22a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <HAL_GPIO_Init+0x24c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d025      	beq.n	800137a <HAL_GPIO_Init+0x226>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <HAL_GPIO_Init+0x250>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01f      	beq.n	8001376 <HAL_GPIO_Init+0x222>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <HAL_GPIO_Init+0x254>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_GPIO_Init+0x21e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <HAL_GPIO_Init+0x258>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x21a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <HAL_GPIO_Init+0x25c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x216>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <HAL_GPIO_Init+0x260>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x212>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_GPIO_Init+0x264>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x20e>
 800135e:	2309      	movs	r3, #9
 8001360:	e02d      	b.n	80013be <HAL_GPIO_Init+0x26a>
 8001362:	230a      	movs	r3, #10
 8001364:	e02b      	b.n	80013be <HAL_GPIO_Init+0x26a>
 8001366:	2308      	movs	r3, #8
 8001368:	e029      	b.n	80013be <HAL_GPIO_Init+0x26a>
 800136a:	2307      	movs	r3, #7
 800136c:	e027      	b.n	80013be <HAL_GPIO_Init+0x26a>
 800136e:	2306      	movs	r3, #6
 8001370:	e025      	b.n	80013be <HAL_GPIO_Init+0x26a>
 8001372:	2305      	movs	r3, #5
 8001374:	e023      	b.n	80013be <HAL_GPIO_Init+0x26a>
 8001376:	2304      	movs	r3, #4
 8001378:	e021      	b.n	80013be <HAL_GPIO_Init+0x26a>
 800137a:	2303      	movs	r3, #3
 800137c:	e01f      	b.n	80013be <HAL_GPIO_Init+0x26a>
 800137e:	2302      	movs	r3, #2
 8001380:	e01d      	b.n	80013be <HAL_GPIO_Init+0x26a>
 8001382:	2301      	movs	r3, #1
 8001384:	e01b      	b.n	80013be <HAL_GPIO_Init+0x26a>
 8001386:	bf00      	nop
 8001388:	58000080 	.word	0x58000080
 800138c:	58024400 	.word	0x58024400
 8001390:	58000400 	.word	0x58000400
 8001394:	58020000 	.word	0x58020000
 8001398:	58020400 	.word	0x58020400
 800139c:	58020800 	.word	0x58020800
 80013a0:	58020c00 	.word	0x58020c00
 80013a4:	58021000 	.word	0x58021000
 80013a8:	58021400 	.word	0x58021400
 80013ac:	58021800 	.word	0x58021800
 80013b0:	58021c00 	.word	0x58021c00
 80013b4:	58022000 	.word	0x58022000
 80013b8:	58022400 	.word	0x58022400
 80013bc:	2300      	movs	r3, #0
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	f002 0203 	and.w	r2, r2, #3
 80013c4:	0092      	lsls	r2, r2, #2
 80013c6:	4093      	lsls	r3, r2
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ce:	4938      	ldr	r1, [pc, #224]	; (80014b0 <HAL_GPIO_Init+0x35c>)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	3302      	adds	r3, #2
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001402:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800140a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	3301      	adds	r3, #1
 8001490:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	f47f ae63 	bne.w	8001168 <HAL_GPIO_Init+0x14>
  }
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3724      	adds	r7, #36	; 0x24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	58000400 	.word	0x58000400

080014b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
 80014c0:	4613      	mov	r3, r2
 80014c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c4:	787b      	ldrb	r3, [r7, #1]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014d0:	e003      	b.n	80014da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	041a      	lsls	r2, r3, #16
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	619a      	str	r2, [r3, #24]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80014f0:	4a08      	ldr	r2, [pc, #32]	; (8001514 <HAL_HSEM_FastTake+0x2c>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3320      	adds	r3, #32
 80014f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fa:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_HSEM_FastTake+0x30>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d101      	bne.n	8001504 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	e000      	b.n	8001506 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	58026400 	.word	0x58026400
 8001518:	80000300 	.word	0x80000300

0800151c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001526:	4906      	ldr	r1, [pc, #24]	; (8001540 <HAL_HSEM_Release+0x24>)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	58026400 	.word	0x58026400

08001544 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800154c:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	2b06      	cmp	r3, #6
 8001556:	d00a      	beq.n	800156e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001558:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	429a      	cmp	r2, r3
 8001564:	d001      	beq.n	800156a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e040      	b.n	80015ec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e03e      	b.n	80015ec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001576:	491f      	ldr	r1, [pc, #124]	; (80015f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4313      	orrs	r3, r2
 800157c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800157e:	f7ff fcc9 	bl	8000f14 <HAL_GetTick>
 8001582:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001584:	e009      	b.n	800159a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001586:	f7ff fcc5 	bl	8000f14 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001594:	d901      	bls.n	800159a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e028      	b.n	80015ec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015a6:	d1ee      	bne.n	8001586 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b1e      	cmp	r3, #30
 80015ac:	d008      	beq.n	80015c0 <HAL_PWREx_ConfigSupply+0x7c>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b2e      	cmp	r3, #46	; 0x2e
 80015b2:	d005      	beq.n	80015c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b1d      	cmp	r3, #29
 80015b8:	d002      	beq.n	80015c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b2d      	cmp	r3, #45	; 0x2d
 80015be:	d114      	bne.n	80015ea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80015c0:	f7ff fca8 	bl	8000f14 <HAL_GetTick>
 80015c4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80015c6:	e009      	b.n	80015dc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015c8:	f7ff fca4 	bl	8000f14 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015d6:	d901      	bls.n	80015dc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e007      	b.n	80015ec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_PWREx_ConfigSupply+0xb0>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e8:	d1ee      	bne.n	80015c8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	58024800 	.word	0x58024800

080015f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08c      	sub	sp, #48	; 0x30
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	f000 bc1d 	b.w	8001e46 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 8087 	beq.w	8001728 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161a:	4b99      	ldr	r3, [pc, #612]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001624:	4b96      	ldr	r3, [pc, #600]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162c:	2b10      	cmp	r3, #16
 800162e:	d007      	beq.n	8001640 <HAL_RCC_OscConfig+0x48>
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	2b18      	cmp	r3, #24
 8001634:	d110      	bne.n	8001658 <HAL_RCC_OscConfig+0x60>
 8001636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d10b      	bne.n	8001658 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001640:	4b8f      	ldr	r3, [pc, #572]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d06c      	beq.n	8001726 <HAL_RCC_OscConfig+0x12e>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d168      	bne.n	8001726 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e3f6      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001660:	d106      	bne.n	8001670 <HAL_RCC_OscConfig+0x78>
 8001662:	4b87      	ldr	r3, [pc, #540]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a86      	ldr	r2, [pc, #536]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e02e      	b.n	80016ce <HAL_RCC_OscConfig+0xd6>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10c      	bne.n	8001692 <HAL_RCC_OscConfig+0x9a>
 8001678:	4b81      	ldr	r3, [pc, #516]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a80      	ldr	r2, [pc, #512]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b7e      	ldr	r3, [pc, #504]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a7d      	ldr	r2, [pc, #500]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	e01d      	b.n	80016ce <HAL_RCC_OscConfig+0xd6>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_OscConfig+0xbe>
 800169c:	4b78      	ldr	r3, [pc, #480]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a77      	ldr	r2, [pc, #476]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80016a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b75      	ldr	r3, [pc, #468]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a74      	ldr	r2, [pc, #464]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80016ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	e00b      	b.n	80016ce <HAL_RCC_OscConfig+0xd6>
 80016b6:	4b72      	ldr	r3, [pc, #456]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a71      	ldr	r2, [pc, #452]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80016bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a6e      	ldr	r2, [pc, #440]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80016c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d013      	beq.n	80016fe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7ff fc1d 	bl	8000f14 <HAL_GetTick>
 80016da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016de:	f7ff fc19 	bl	8000f14 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b64      	cmp	r3, #100	; 0x64
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e3aa      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016f0:	4b63      	ldr	r3, [pc, #396]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0xe6>
 80016fc:	e014      	b.n	8001728 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff fc09 	bl	8000f14 <HAL_GetTick>
 8001702:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001706:	f7ff fc05 	bl	8000f14 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b64      	cmp	r3, #100	; 0x64
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e396      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001718:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x10e>
 8001724:	e000      	b.n	8001728 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001726:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80cb 	beq.w	80018cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001736:	4b52      	ldr	r3, [pc, #328]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800173e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001740:	4b4f      	ldr	r3, [pc, #316]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d007      	beq.n	800175c <HAL_RCC_OscConfig+0x164>
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	2b18      	cmp	r3, #24
 8001750:	d156      	bne.n	8001800 <HAL_RCC_OscConfig+0x208>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d151      	bne.n	8001800 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800175c:	4b48      	ldr	r3, [pc, #288]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_OscConfig+0x17c>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e368      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001774:	4b42      	ldr	r3, [pc, #264]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 0219 	bic.w	r2, r3, #25
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	493f      	ldr	r1, [pc, #252]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001786:	f7ff fbc5 	bl	8000f14 <HAL_GetTick>
 800178a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fbc1 	bl	8000f14 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e352      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017a0:	4b37      	ldr	r3, [pc, #220]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	f7ff fbe2 	bl	8000f74 <HAL_GetREVID>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d817      	bhi.n	80017ea <HAL_RCC_OscConfig+0x1f2>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	2b40      	cmp	r3, #64	; 0x40
 80017c0:	d108      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1dc>
 80017c2:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80017ca:	4a2d      	ldr	r2, [pc, #180]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d2:	e07b      	b.n	80018cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	031b      	lsls	r3, r3, #12
 80017e2:	4927      	ldr	r1, [pc, #156]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e8:	e070      	b.n	80018cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	061b      	lsls	r3, r3, #24
 80017f8:	4921      	ldr	r1, [pc, #132]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017fe:	e065      	b.n	80018cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d048      	beq.n	800189a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f023 0219 	bic.w	r2, r3, #25
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	491a      	ldr	r1, [pc, #104]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff fb7b 	bl	8000f14 <HAL_GetTick>
 800181e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff fb77 	bl	8000f14 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e308      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	f7ff fb98 	bl	8000f74 <HAL_GetREVID>
 8001844:	4603      	mov	r3, r0
 8001846:	f241 0203 	movw	r2, #4099	; 0x1003
 800184a:	4293      	cmp	r3, r2
 800184c:	d81a      	bhi.n	8001884 <HAL_RCC_OscConfig+0x28c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b40      	cmp	r3, #64	; 0x40
 8001854:	d108      	bne.n	8001868 <HAL_RCC_OscConfig+0x270>
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 8001860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001864:	6053      	str	r3, [r2, #4]
 8001866:	e031      	b.n	80018cc <HAL_RCC_OscConfig+0x2d4>
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	031b      	lsls	r3, r3, #12
 8001876:	4902      	ldr	r1, [pc, #8]	; (8001880 <HAL_RCC_OscConfig+0x288>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
 800187c:	e026      	b.n	80018cc <HAL_RCC_OscConfig+0x2d4>
 800187e:	bf00      	nop
 8001880:	58024400 	.word	0x58024400
 8001884:	4b9a      	ldr	r3, [pc, #616]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	061b      	lsls	r3, r3, #24
 8001892:	4997      	ldr	r1, [pc, #604]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
 8001898:	e018      	b.n	80018cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189a:	4b95      	ldr	r3, [pc, #596]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a94      	ldr	r2, [pc, #592]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a6:	f7ff fb35 	bl	8000f14 <HAL_GetTick>
 80018aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ae:	f7ff fb31 	bl	8000f14 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e2c2      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018c0:	4b8b      	ldr	r3, [pc, #556]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80a9 	beq.w	8001a2c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018da:	4b85      	ldr	r3, [pc, #532]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018e4:	4b82      	ldr	r3, [pc, #520]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d007      	beq.n	8001900 <HAL_RCC_OscConfig+0x308>
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b18      	cmp	r3, #24
 80018f4:	d13a      	bne.n	800196c <HAL_RCC_OscConfig+0x374>
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d135      	bne.n	800196c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001900:	4b7b      	ldr	r3, [pc, #492]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_OscConfig+0x320>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b80      	cmp	r3, #128	; 0x80
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e296      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001918:	f7ff fb2c 	bl	8000f74 <HAL_GetREVID>
 800191c:	4603      	mov	r3, r0
 800191e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001922:	4293      	cmp	r3, r2
 8001924:	d817      	bhi.n	8001956 <HAL_RCC_OscConfig+0x35e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	2b20      	cmp	r3, #32
 800192c:	d108      	bne.n	8001940 <HAL_RCC_OscConfig+0x348>
 800192e:	4b70      	ldr	r3, [pc, #448]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001936:	4a6e      	ldr	r2, [pc, #440]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001938:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800193c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800193e:	e075      	b.n	8001a2c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001940:	4b6b      	ldr	r3, [pc, #428]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	069b      	lsls	r3, r3, #26
 800194e:	4968      	ldr	r1, [pc, #416]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001954:	e06a      	b.n	8001a2c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001956:	4b66      	ldr	r3, [pc, #408]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	061b      	lsls	r3, r3, #24
 8001964:	4962      	ldr	r1, [pc, #392]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001966:	4313      	orrs	r3, r2
 8001968:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800196a:	e05f      	b.n	8001a2c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d042      	beq.n	80019fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001974:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a5d      	ldr	r2, [pc, #372]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 800197a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800197e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff fac8 	bl	8000f14 <HAL_GetTick>
 8001984:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001988:	f7ff fac4 	bl	8000f14 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e255      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800199a:	4b55      	ldr	r3, [pc, #340]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019a6:	f7ff fae5 	bl	8000f74 <HAL_GetREVID>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d817      	bhi.n	80019e4 <HAL_RCC_OscConfig+0x3ec>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	2b20      	cmp	r3, #32
 80019ba:	d108      	bne.n	80019ce <HAL_RCC_OscConfig+0x3d6>
 80019bc:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80019c4:	4a4a      	ldr	r2, [pc, #296]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80019c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019ca:	6053      	str	r3, [r2, #4]
 80019cc:	e02e      	b.n	8001a2c <HAL_RCC_OscConfig+0x434>
 80019ce:	4b48      	ldr	r3, [pc, #288]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	069b      	lsls	r3, r3, #26
 80019dc:	4944      	ldr	r1, [pc, #272]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
 80019e2:	e023      	b.n	8001a2c <HAL_RCC_OscConfig+0x434>
 80019e4:	4b42      	ldr	r3, [pc, #264]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	493f      	ldr	r1, [pc, #252]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60cb      	str	r3, [r1, #12]
 80019f8:	e018      	b.n	8001a2c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a3c      	ldr	r2, [pc, #240]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a06:	f7ff fa85 	bl	8000f14 <HAL_GetTick>
 8001a0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fa81 	bl	8000f14 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e212      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f0      	bne.n	8001a0e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d036      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d019      	beq.n	8001a74 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a40:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a44:	4a2a      	ldr	r2, [pc, #168]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fa62 	bl	8000f14 <HAL_GetTick>
 8001a50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff fa5e 	bl	8000f14 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1ef      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a66:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x45c>
 8001a72:	e018      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a78:	4a1d      	ldr	r2, [pc, #116]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff fa48 	bl	8000f14 <HAL_GetTick>
 8001a84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff fa44 	bl	8000f14 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1d5      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0320 	and.w	r3, r3, #32
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d039      	beq.n	8001b26 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01c      	beq.n	8001af4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a0c      	ldr	r2, [pc, #48]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001ac0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fa25 	bl	8000f14 <HAL_GetTick>
 8001aca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ace:	f7ff fa21 	bl	8000f14 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e1b2      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x4d6>
 8001aec:	e01b      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
 8001aee:	bf00      	nop
 8001af0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001af4:	4b9b      	ldr	r3, [pc, #620]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a9a      	ldr	r2, [pc, #616]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001afa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001afe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b00:	f7ff fa08 	bl	8000f14 <HAL_GetTick>
 8001b04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b08:	f7ff fa04 	bl	8000f14 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e195      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b1a:	4b92      	ldr	r3, [pc, #584]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8081 	beq.w	8001c36 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b34:	4b8c      	ldr	r3, [pc, #560]	; (8001d68 <HAL_RCC_OscConfig+0x770>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a8b      	ldr	r2, [pc, #556]	; (8001d68 <HAL_RCC_OscConfig+0x770>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b40:	f7ff f9e8 	bl	8000f14 <HAL_GetTick>
 8001b44:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b48:	f7ff f9e4 	bl	8000f14 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e175      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b5a:	4b83      	ldr	r3, [pc, #524]	; (8001d68 <HAL_RCC_OscConfig+0x770>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d106      	bne.n	8001b7c <HAL_RCC_OscConfig+0x584>
 8001b6e:	4b7d      	ldr	r3, [pc, #500]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	4a7c      	ldr	r2, [pc, #496]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7a:	e02d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x5e0>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10c      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5a6>
 8001b84:	4b77      	ldr	r3, [pc, #476]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	4a76      	ldr	r2, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b90:	4b74      	ldr	r3, [pc, #464]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	4a73      	ldr	r2, [pc, #460]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001b96:	f023 0304 	bic.w	r3, r3, #4
 8001b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9c:	e01c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x5e0>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x5c8>
 8001ba6:	4b6f      	ldr	r3, [pc, #444]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	4a6e      	ldr	r2, [pc, #440]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb2:	4b6c      	ldr	r3, [pc, #432]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	4a6b      	ldr	r2, [pc, #428]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x5e0>
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4a67      	ldr	r2, [pc, #412]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6713      	str	r3, [r2, #112]	; 0x70
 8001bcc:	4b65      	ldr	r3, [pc, #404]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	4a64      	ldr	r2, [pc, #400]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001bd2:	f023 0304 	bic.w	r3, r3, #4
 8001bd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d015      	beq.n	8001c0c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff f998 	bl	8000f14 <HAL_GetTick>
 8001be4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	f7ff f994 	bl	8000f14 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e123      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bfe:	4b59      	ldr	r3, [pc, #356]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0ee      	beq.n	8001be8 <HAL_RCC_OscConfig+0x5f0>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0c:	f7ff f982 	bl	8000f14 <HAL_GetTick>
 8001c10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f7ff f97e 	bl	8000f14 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e10d      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c2a:	4b4e      	ldr	r3, [pc, #312]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1ee      	bne.n	8001c14 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8102 	beq.w	8001e44 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c40:	4b48      	ldr	r3, [pc, #288]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c48:	2b18      	cmp	r3, #24
 8001c4a:	f000 80bd 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	f040 809e 	bne.w	8001d94 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c58:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a41      	ldr	r2, [pc, #260]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f956 	bl	8000f14 <HAL_GetTick>
 8001c68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff f952 	bl	8000f14 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e0e3      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c8a:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <HAL_RCC_OscConfig+0x774>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	4931      	ldr	r1, [pc, #196]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	628b      	str	r3, [r1, #40]	; 0x28
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	025b      	lsls	r3, r3, #9
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	041b      	lsls	r3, r3, #16
 8001cc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	061b      	lsls	r3, r3, #24
 8001cd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001cd4:	4923      	ldr	r1, [pc, #140]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	4a21      	ldr	r2, [pc, #132]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <HAL_RCC_OscConfig+0x778>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cf2:	00d2      	lsls	r2, r2, #3
 8001cf4:	491b      	ldr	r1, [pc, #108]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	f023 020c 	bic.w	r2, r3, #12
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4917      	ldr	r1, [pc, #92]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	f023 0202 	bic.w	r2, r3, #2
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	4912      	ldr	r1, [pc, #72]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	4a0d      	ldr	r2, [pc, #52]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_RCC_OscConfig+0x76c>)
 8001d54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5a:	f7ff f8db 	bl	8000f14 <HAL_GetTick>
 8001d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d60:	e011      	b.n	8001d86 <HAL_RCC_OscConfig+0x78e>
 8001d62:	bf00      	nop
 8001d64:	58024400 	.word	0x58024400
 8001d68:	58024800 	.word	0x58024800
 8001d6c:	fffffc0c 	.word	0xfffffc0c
 8001d70:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff f8ce 	bl	8000f14 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e05f      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d86:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <HAL_RCC_OscConfig+0x858>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x77c>
 8001d92:	e057      	b.n	8001e44 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d94:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <HAL_RCC_OscConfig+0x858>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a2d      	ldr	r2, [pc, #180]	; (8001e50 <HAL_RCC_OscConfig+0x858>)
 8001d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f8b8 	bl	8000f14 <HAL_GetTick>
 8001da4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff f8b4 	bl	8000f14 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e045      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dba:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <HAL_RCC_OscConfig+0x858>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x7b0>
 8001dc6:	e03d      	b.n	8001e44 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_RCC_OscConfig+0x858>)
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <HAL_RCC_OscConfig+0x858>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d031      	beq.n	8001e40 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	f003 0203 	and.w	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d12a      	bne.n	8001e40 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d122      	bne.n	8001e40 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d11a      	bne.n	8001e40 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	0a5b      	lsrs	r3, r3, #9
 8001e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e16:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d111      	bne.n	8001e40 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	0c1b      	lsrs	r3, r3, #16
 8001e20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e28:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d108      	bne.n	8001e40 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	0e1b      	lsrs	r3, r3, #24
 8001e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3730      	adds	r7, #48	; 0x30
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	58024400 	.word	0x58024400

08001e54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e19c      	b.n	80021a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e68:	4b8a      	ldr	r3, [pc, #552]	; (8002094 <HAL_RCC_ClockConfig+0x240>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d910      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b87      	ldr	r3, [pc, #540]	; (8002094 <HAL_RCC_ClockConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 020f 	bic.w	r2, r3, #15
 8001e7e:	4985      	ldr	r1, [pc, #532]	; (8002094 <HAL_RCC_ClockConfig+0x240>)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b83      	ldr	r3, [pc, #524]	; (8002094 <HAL_RCC_ClockConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e184      	b.n	80021a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d010      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	4b7b      	ldr	r3, [pc, #492]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d908      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001eb4:	4b78      	ldr	r3, [pc, #480]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	4975      	ldr	r1, [pc, #468]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d010      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	4b70      	ldr	r3, [pc, #448]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d908      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ee2:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	496a      	ldr	r1, [pc, #424]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d010      	beq.n	8001f22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	4b64      	ldr	r3, [pc, #400]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d908      	bls.n	8001f22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f10:	4b61      	ldr	r3, [pc, #388]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	495e      	ldr	r1, [pc, #376]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d010      	beq.n	8001f50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	4b59      	ldr	r3, [pc, #356]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d908      	bls.n	8001f50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f3e:	4b56      	ldr	r3, [pc, #344]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4953      	ldr	r1, [pc, #332]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d010      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	4b4d      	ldr	r3, [pc, #308]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d908      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f023 020f 	bic.w	r2, r3, #15
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4947      	ldr	r1, [pc, #284]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d055      	beq.n	8002036 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f8a:	4b43      	ldr	r3, [pc, #268]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	4940      	ldr	r1, [pc, #256]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fa4:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d121      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0f6      	b.n	80021a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fbc:	4b36      	ldr	r3, [pc, #216]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d115      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0ea      	b.n	80021a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fd4:	4b30      	ldr	r3, [pc, #192]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0de      	b.n	80021a2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fe4:	4b2c      	ldr	r3, [pc, #176]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0d6      	b.n	80021a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	f023 0207 	bic.w	r2, r3, #7
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4925      	ldr	r1, [pc, #148]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8002002:	4313      	orrs	r3, r2
 8002004:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002006:	f7fe ff85 	bl	8000f14 <HAL_GetTick>
 800200a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200c:	e00a      	b.n	8002024 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200e:	f7fe ff81 	bl	8000f14 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f241 3288 	movw	r2, #5000	; 0x1388
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e0be      	b.n	80021a2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002024:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	429a      	cmp	r2, r3
 8002034:	d1eb      	bne.n	800200e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d010      	beq.n	8002064 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	4b14      	ldr	r3, [pc, #80]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	429a      	cmp	r2, r3
 8002050:	d208      	bcs.n	8002064 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f023 020f 	bic.w	r2, r3, #15
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	490e      	ldr	r1, [pc, #56]	; (8002098 <HAL_RCC_ClockConfig+0x244>)
 8002060:	4313      	orrs	r3, r2
 8002062:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_ClockConfig+0x240>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 030f 	and.w	r3, r3, #15
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d214      	bcs.n	800209c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_RCC_ClockConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 020f 	bic.w	r2, r3, #15
 800207a:	4906      	ldr	r1, [pc, #24]	; (8002094 <HAL_RCC_ClockConfig+0x240>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b04      	ldr	r3, [pc, #16]	; (8002094 <HAL_RCC_ClockConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d005      	beq.n	800209c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e086      	b.n	80021a2 <HAL_RCC_ClockConfig+0x34e>
 8002094:	52002000 	.word	0x52002000
 8002098:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d010      	beq.n	80020ca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_RCC_ClockConfig+0x358>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d208      	bcs.n	80020ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020b8:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <HAL_RCC_ClockConfig+0x358>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	4939      	ldr	r1, [pc, #228]	; (80021ac <HAL_RCC_ClockConfig+0x358>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d010      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_RCC_ClockConfig+0x358>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d208      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020e6:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_RCC_ClockConfig+0x358>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	492e      	ldr	r1, [pc, #184]	; (80021ac <HAL_RCC_ClockConfig+0x358>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d010      	beq.n	8002126 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699a      	ldr	r2, [r3, #24]
 8002108:	4b28      	ldr	r3, [pc, #160]	; (80021ac <HAL_RCC_ClockConfig+0x358>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002110:	429a      	cmp	r2, r3
 8002112:	d208      	bcs.n	8002126 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002114:	4b25      	ldr	r3, [pc, #148]	; (80021ac <HAL_RCC_ClockConfig+0x358>)
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4922      	ldr	r1, [pc, #136]	; (80021ac <HAL_RCC_ClockConfig+0x358>)
 8002122:	4313      	orrs	r3, r2
 8002124:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	d010      	beq.n	8002154 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_RCC_ClockConfig+0x358>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800213e:	429a      	cmp	r2, r3
 8002140:	d208      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002142:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_RCC_ClockConfig+0x358>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	4917      	ldr	r1, [pc, #92]	; (80021ac <HAL_RCC_ClockConfig+0x358>)
 8002150:	4313      	orrs	r3, r2
 8002152:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002154:	f000 f834 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 8002158:	4602      	mov	r2, r0
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <HAL_RCC_ClockConfig+0x358>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	4912      	ldr	r1, [pc, #72]	; (80021b0 <HAL_RCC_ClockConfig+0x35c>)
 8002166:	5ccb      	ldrb	r3, [r1, r3]
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <HAL_RCC_ClockConfig+0x358>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <HAL_RCC_ClockConfig+0x35c>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <HAL_RCC_ClockConfig+0x360>)
 800218a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_RCC_ClockConfig+0x364>)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_RCC_ClockConfig+0x368>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fe72 	bl	8000e80 <HAL_InitTick>
 800219c:	4603      	mov	r3, r0
 800219e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	58024400 	.word	0x58024400
 80021b0:	08005eb4 	.word	0x08005eb4
 80021b4:	24000004 	.word	0x24000004
 80021b8:	24000000 	.word	0x24000000
 80021bc:	24000008 	.word	0x24000008

080021c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c6:	4bb3      	ldr	r3, [pc, #716]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021ce:	2b18      	cmp	r3, #24
 80021d0:	f200 8155 	bhi.w	800247e <HAL_RCC_GetSysClockFreq+0x2be>
 80021d4:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80021d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021da:	bf00      	nop
 80021dc:	08002241 	.word	0x08002241
 80021e0:	0800247f 	.word	0x0800247f
 80021e4:	0800247f 	.word	0x0800247f
 80021e8:	0800247f 	.word	0x0800247f
 80021ec:	0800247f 	.word	0x0800247f
 80021f0:	0800247f 	.word	0x0800247f
 80021f4:	0800247f 	.word	0x0800247f
 80021f8:	0800247f 	.word	0x0800247f
 80021fc:	08002267 	.word	0x08002267
 8002200:	0800247f 	.word	0x0800247f
 8002204:	0800247f 	.word	0x0800247f
 8002208:	0800247f 	.word	0x0800247f
 800220c:	0800247f 	.word	0x0800247f
 8002210:	0800247f 	.word	0x0800247f
 8002214:	0800247f 	.word	0x0800247f
 8002218:	0800247f 	.word	0x0800247f
 800221c:	0800226d 	.word	0x0800226d
 8002220:	0800247f 	.word	0x0800247f
 8002224:	0800247f 	.word	0x0800247f
 8002228:	0800247f 	.word	0x0800247f
 800222c:	0800247f 	.word	0x0800247f
 8002230:	0800247f 	.word	0x0800247f
 8002234:	0800247f 	.word	0x0800247f
 8002238:	0800247f 	.word	0x0800247f
 800223c:	08002273 	.word	0x08002273
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002240:	4b94      	ldr	r3, [pc, #592]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800224c:	4b91      	ldr	r3, [pc, #580]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	08db      	lsrs	r3, r3, #3
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	4a90      	ldr	r2, [pc, #576]	; (8002498 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
 800225c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800225e:	e111      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002260:	4b8d      	ldr	r3, [pc, #564]	; (8002498 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002262:	61bb      	str	r3, [r7, #24]
    break;
 8002264:	e10e      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002266:	4b8d      	ldr	r3, [pc, #564]	; (800249c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002268:	61bb      	str	r3, [r7, #24]
    break;
 800226a:	e10b      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800226c:	4b8c      	ldr	r3, [pc, #560]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800226e:	61bb      	str	r3, [r7, #24]
    break;
 8002270:	e108      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002272:	4b88      	ldr	r3, [pc, #544]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800227c:	4b85      	ldr	r3, [pc, #532]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002286:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002288:	4b82      	ldr	r3, [pc, #520]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002292:	4b80      	ldr	r3, [pc, #512]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002296:	08db      	lsrs	r3, r3, #3
 8002298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	ee07 3a90 	vmov	s15, r3
 80022a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80e1 	beq.w	8002478 <HAL_RCC_GetSysClockFreq+0x2b8>
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	f000 8083 	beq.w	80023c4 <HAL_RCC_GetSysClockFreq+0x204>
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	f200 80a1 	bhi.w	8002408 <HAL_RCC_GetSysClockFreq+0x248>
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x114>
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d056      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x1c0>
 80022d2:	e099      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022d4:	4b6f      	ldr	r3, [pc, #444]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d02d      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022e0:	4b6c      	ldr	r3, [pc, #432]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	4a6b      	ldr	r2, [pc, #428]	; (8002498 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
 80022f0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	ee07 3a90 	vmov	s15, r3
 80022f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800230a:	4b62      	ldr	r3, [pc, #392]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800231a:	ed97 6a02 	vldr	s12, [r7, #8]
 800231e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80024a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800232a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800232e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002336:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800233a:	e087      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002346:	eddf 6a58 	vldr	s13, [pc, #352]	; 80024a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800234a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800234e:	4b51      	ldr	r3, [pc, #324]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002356:	ee07 3a90 	vmov	s15, r3
 800235a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800235e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002362:	eddf 5a50 	vldr	s11, [pc, #320]	; 80024a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800236a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800236e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800237e:	e065      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800238a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80024ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800238e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002392:	4b40      	ldr	r3, [pc, #256]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80024a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023c2:	e043      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	ee07 3a90 	vmov	s15, r3
 80023ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80024b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80023d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023d6:	4b2f      	ldr	r3, [pc, #188]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80024a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002406:	e021      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002412:	eddf 6a26 	vldr	s13, [pc, #152]	; 80024ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8002416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800241a:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800242a:	ed97 6a02 	vldr	s12, [r7, #8]
 800242e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80024a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800243a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800243e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800244a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	0a5b      	lsrs	r3, r3, #9
 8002452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002456:	3301      	adds	r3, #1
 8002458:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002464:	edd7 6a07 	vldr	s13, [r7, #28]
 8002468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800246c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002470:	ee17 3a90 	vmov	r3, s15
 8002474:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002476:	e005      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	61bb      	str	r3, [r7, #24]
    break;
 800247c:	e002      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800247e:	4b07      	ldr	r3, [pc, #28]	; (800249c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002480:	61bb      	str	r3, [r7, #24]
    break;
 8002482:	bf00      	nop
  }

  return sysclockfreq;
 8002484:	69bb      	ldr	r3, [r7, #24]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	58024400 	.word	0x58024400
 8002498:	03d09000 	.word	0x03d09000
 800249c:	003d0900 	.word	0x003d0900
 80024a0:	007a1200 	.word	0x007a1200
 80024a4:	46000000 	.word	0x46000000
 80024a8:	4c742400 	.word	0x4c742400
 80024ac:	4a742400 	.word	0x4a742400
 80024b0:	4af42400 	.word	0x4af42400

080024b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80024ba:	f7ff fe81 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 80024be:	4602      	mov	r2, r0
 80024c0:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_RCC_GetHCLKFreq+0x50>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	490f      	ldr	r1, [pc, #60]	; (8002508 <HAL_RCC_GetHCLKFreq+0x54>)
 80024cc:	5ccb      	ldrb	r3, [r1, r3]
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	fa22 f303 	lsr.w	r3, r2, r3
 80024d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_RCC_GetHCLKFreq+0x50>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	4a09      	ldr	r2, [pc, #36]	; (8002508 <HAL_RCC_GetHCLKFreq+0x54>)
 80024e2:	5cd3      	ldrb	r3, [r2, r3]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	fa22 f303 	lsr.w	r3, r2, r3
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_RCC_GetHCLKFreq+0x58>)
 80024f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024f2:	4a07      	ldr	r2, [pc, #28]	; (8002510 <HAL_RCC_GetHCLKFreq+0x5c>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <HAL_RCC_GetHCLKFreq+0x58>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	58024400 	.word	0x58024400
 8002508:	08005eb4 	.word	0x08005eb4
 800250c:	24000004 	.word	0x24000004
 8002510:	24000000 	.word	0x24000000

08002514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002518:	f7ff ffcc 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	4904      	ldr	r1, [pc, #16]	; (800253c <HAL_RCC_GetPCLK1Freq+0x28>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	58024400 	.word	0x58024400
 800253c:	08005eb4 	.word	0x08005eb4

08002540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002544:	f7ff ffb6 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 8002548:	4602      	mov	r2, r0
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_RCC_GetPCLK2Freq+0x24>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	0a1b      	lsrs	r3, r3, #8
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	4904      	ldr	r1, [pc, #16]	; (8002568 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}
 8002564:	58024400 	.word	0x58024400
 8002568:	08005eb4 	.word	0x08005eb4

0800256c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002574:	2300      	movs	r3, #0
 8002576:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002578:	2300      	movs	r3, #0
 800257a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d03f      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800258c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002590:	d02a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002592:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002596:	d824      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002598:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800259c:	d018      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800259e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025a2:	d81e      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ac:	d007      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025ae:	e018      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025b0:	4ba3      	ldr	r3, [pc, #652]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	4aa2      	ldr	r2, [pc, #648]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025bc:	e015      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2102      	movs	r1, #2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f001 f9d5 	bl	8003974 <RCCEx_PLL2_Config>
 80025ca:	4603      	mov	r3, r0
 80025cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025ce:	e00c      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3324      	adds	r3, #36	; 0x24
 80025d4:	2102      	movs	r1, #2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fa7e 	bl	8003ad8 <RCCEx_PLL3_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025e0:	e003      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	75fb      	strb	r3, [r7, #23]
      break;
 80025e6:	e000      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80025f0:	4b93      	ldr	r3, [pc, #588]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025fc:	4990      	ldr	r1, [pc, #576]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	650b      	str	r3, [r1, #80]	; 0x50
 8002602:	e001      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d03d      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002618:	2b04      	cmp	r3, #4
 800261a:	d826      	bhi.n	800266a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800261c:	a201      	add	r2, pc, #4	; (adr r2, 8002624 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800261e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002622:	bf00      	nop
 8002624:	08002639 	.word	0x08002639
 8002628:	08002647 	.word	0x08002647
 800262c:	08002659 	.word	0x08002659
 8002630:	08002671 	.word	0x08002671
 8002634:	08002671 	.word	0x08002671
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002638:	4b81      	ldr	r3, [pc, #516]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	4a80      	ldr	r2, [pc, #512]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800263e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002642:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002644:	e015      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f001 f991 	bl	8003974 <RCCEx_PLL2_Config>
 8002652:	4603      	mov	r3, r0
 8002654:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002656:	e00c      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3324      	adds	r3, #36	; 0x24
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f001 fa3a 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002664:	4603      	mov	r3, r0
 8002666:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002668:	e003      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
      break;
 800266e:	e000      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002672:	7dfb      	ldrb	r3, [r7, #23]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002678:	4b71      	ldr	r3, [pc, #452]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800267a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267c:	f023 0207 	bic.w	r2, r3, #7
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	496e      	ldr	r1, [pc, #440]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	650b      	str	r3, [r1, #80]	; 0x50
 800268a:	e001      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002698:	2b00      	cmp	r3, #0
 800269a:	d042      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a4:	d02b      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x192>
 80026a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026aa:	d825      	bhi.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80026ac:	2bc0      	cmp	r3, #192	; 0xc0
 80026ae:	d028      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80026b0:	2bc0      	cmp	r3, #192	; 0xc0
 80026b2:	d821      	bhi.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80026b4:	2b80      	cmp	r3, #128	; 0x80
 80026b6:	d016      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d81d      	bhi.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80026c0:	2b40      	cmp	r3, #64	; 0x40
 80026c2:	d007      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80026c4:	e018      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026c6:	4b5e      	ldr	r3, [pc, #376]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	4a5d      	ldr	r2, [pc, #372]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80026d2:	e017      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3304      	adds	r3, #4
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 f94a 	bl	8003974 <RCCEx_PLL2_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80026e4:	e00e      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3324      	adds	r3, #36	; 0x24
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f001 f9f3 	bl	8003ad8 <RCCEx_PLL3_Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80026f6:	e005      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	75fb      	strb	r3, [r7, #23]
      break;
 80026fc:	e002      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80026fe:	bf00      	nop
 8002700:	e000      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800270a:	4b4d      	ldr	r3, [pc, #308]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800270c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	494a      	ldr	r1, [pc, #296]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	650b      	str	r3, [r1, #80]	; 0x50
 800271c:	e001      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272a:	2b00      	cmp	r3, #0
 800272c:	d049      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002734:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002738:	d030      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800273a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800273e:	d82a      	bhi.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002740:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002744:	d02c      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002746:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800274a:	d824      	bhi.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800274c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002750:	d018      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002756:	d81e      	bhi.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800275c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002760:	d007      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002762:	e018      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	4a35      	ldr	r2, [pc, #212]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800276a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800276e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002770:	e017      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3304      	adds	r3, #4
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f001 f8fb 	bl	8003974 <RCCEx_PLL2_Config>
 800277e:	4603      	mov	r3, r0
 8002780:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002782:	e00e      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3324      	adds	r3, #36	; 0x24
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f001 f9a4 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002794:	e005      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
      break;
 800279a:	e002      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800279c:	bf00      	nop
 800279e:	e000      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80027a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80027a8:	4b25      	ldr	r3, [pc, #148]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027b6:	4922      	ldr	r1, [pc, #136]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	658b      	str	r3, [r1, #88]	; 0x58
 80027bc:	e001      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027be:	7dfb      	ldrb	r3, [r7, #23]
 80027c0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d04b      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027d8:	d030      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80027da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027de:	d82a      	bhi.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80027e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027e4:	d02e      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80027e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027ea:	d824      	bhi.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80027ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027f0:	d018      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80027f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027f6:	d81e      	bhi.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80027fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002800:	d007      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002802:	e018      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002804:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800280a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002810:	e019      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f001 f8ab 	bl	8003974 <RCCEx_PLL2_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002822:	e010      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3324      	adds	r3, #36	; 0x24
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f001 f954 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002834:	e007      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
      break;
 800283a:	e004      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800283c:	bf00      	nop
 800283e:	e002      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002840:	58024400 	.word	0x58024400
      break;
 8002844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002846:	7dfb      	ldrb	r3, [r7, #23]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800284c:	4b99      	ldr	r3, [pc, #612]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800285a:	4996      	ldr	r1, [pc, #600]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800285c:	4313      	orrs	r3, r2
 800285e:	658b      	str	r3, [r1, #88]	; 0x58
 8002860:	e001      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d032      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002876:	2b30      	cmp	r3, #48	; 0x30
 8002878:	d01c      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800287a:	2b30      	cmp	r3, #48	; 0x30
 800287c:	d817      	bhi.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 800287e:	2b20      	cmp	r3, #32
 8002880:	d00c      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002882:	2b20      	cmp	r3, #32
 8002884:	d813      	bhi.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d016      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800288a:	2b10      	cmp	r3, #16
 800288c:	d10f      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800288e:	4b89      	ldr	r3, [pc, #548]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	4a88      	ldr	r2, [pc, #544]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002898:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800289a:	e00e      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	2102      	movs	r1, #2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 f866 	bl	8003974 <RCCEx_PLL2_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80028ac:	e005      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
      break;
 80028b2:	e002      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80028b4:	bf00      	nop
 80028b6:	e000      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80028b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80028c0:	4b7c      	ldr	r3, [pc, #496]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80028c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028cc:	4979      	ldr	r1, [pc, #484]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80028d2:	e001      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d047      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ec:	d030      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80028ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028f2:	d82a      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80028f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028f8:	d02c      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80028fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028fe:	d824      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002904:	d018      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290a:	d81e      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002914:	d007      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002916:	e018      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002918:	4b66      	ldr	r3, [pc, #408]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	4a65      	ldr	r2, [pc, #404]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800291e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002922:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002924:	e017      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3304      	adds	r3, #4
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f001 f821 	bl	8003974 <RCCEx_PLL2_Config>
 8002932:	4603      	mov	r3, r0
 8002934:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002936:	e00e      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3324      	adds	r3, #36	; 0x24
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f001 f8ca 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002948:	e005      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	75fb      	strb	r3, [r7, #23]
      break;
 800294e:	e002      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002950:	bf00      	nop
 8002952:	e000      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d109      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800295c:	4b55      	ldr	r3, [pc, #340]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800295e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002960:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	4952      	ldr	r1, [pc, #328]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800296a:	4313      	orrs	r3, r2
 800296c:	650b      	str	r3, [r1, #80]	; 0x50
 800296e:	e001      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d049      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002988:	d02e      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800298a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800298e:	d828      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002990:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002994:	d02a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002996:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800299a:	d822      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800299c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029a0:	d026      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80029a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029a6:	d81c      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80029a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029ac:	d010      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80029ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029b2:	d816      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01d      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80029b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029bc:	d111      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2101      	movs	r1, #1
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 ffd5 	bl	8003974 <RCCEx_PLL2_Config>
 80029ca:	4603      	mov	r3, r0
 80029cc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80029ce:	e012      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3324      	adds	r3, #36	; 0x24
 80029d4:	2101      	movs	r1, #1
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 f87e 	bl	8003ad8 <RCCEx_PLL3_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80029e0:	e009      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	75fb      	strb	r3, [r7, #23]
      break;
 80029e6:	e006      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80029e8:	bf00      	nop
 80029ea:	e004      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80029ec:	bf00      	nop
 80029ee:	e002      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80029f0:	bf00      	nop
 80029f2:	e000      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80029f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80029fc:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a00:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a08:	492a      	ldr	r1, [pc, #168]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	650b      	str	r3, [r1, #80]	; 0x50
 8002a0e:	e001      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d04d      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a2a:	d02e      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a30:	d828      	bhi.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a36:	d02a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d822      	bhi.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002a3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a42:	d026      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002a44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a48:	d81c      	bhi.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a4e:	d010      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a54:	d816      	bhi.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01d      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002a5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a5e:	d111      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3304      	adds	r3, #4
 8002a64:	2101      	movs	r1, #1
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 ff84 	bl	8003974 <RCCEx_PLL2_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a70:	e012      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3324      	adds	r3, #36	; 0x24
 8002a76:	2101      	movs	r1, #1
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f001 f82d 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a82:	e009      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	75fb      	strb	r3, [r7, #23]
      break;
 8002a88:	e006      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e004      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002a8e:	bf00      	nop
 8002a90:	e002      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002a92:	bf00      	nop
 8002a94:	e000      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002aac:	4901      	ldr	r1, [pc, #4]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ab2:	e003      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002ab4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d02f      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad0:	d00e      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad6:	d814      	bhi.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d015      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ae0:	d10f      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae2:	4baf      	ldr	r3, [pc, #700]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	4aae      	ldr	r2, [pc, #696]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002aee:	e00c      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	2101      	movs	r1, #1
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 ff3c 	bl	8003974 <RCCEx_PLL2_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b00:	e003      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
      break;
 8002b06:	e000      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d109      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b10:	4ba3      	ldr	r3, [pc, #652]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1c:	49a0      	ldr	r1, [pc, #640]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	650b      	str	r3, [r1, #80]	; 0x50
 8002b22:	e001      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
 8002b26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d032      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d81b      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002b3c:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b7b 	.word	0x08002b7b
 8002b48:	08002b55 	.word	0x08002b55
 8002b4c:	08002b63 	.word	0x08002b63
 8002b50:	08002b7b 	.word	0x08002b7b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b54:	4b92      	ldr	r3, [pc, #584]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	4a91      	ldr	r2, [pc, #580]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b60:	e00c      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2102      	movs	r1, #2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 ff03 	bl	8003974 <RCCEx_PLL2_Config>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b72:	e003      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	75fb      	strb	r3, [r7, #23]
      break;
 8002b78:	e000      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b82:	4b87      	ldr	r3, [pc, #540]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b86:	f023 0203 	bic.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4984      	ldr	r1, [pc, #528]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b94:	e001      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8086 	beq.w	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba8:	4b7e      	ldr	r3, [pc, #504]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a7d      	ldr	r2, [pc, #500]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bb4:	f7fe f9ae 	bl	8000f14 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bba:	e009      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbc:	f7fe f9aa 	bl	8000f14 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	; 0x64
 8002bc8:	d902      	bls.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	75fb      	strb	r3, [r7, #23]
        break;
 8002bce:	e005      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bd0:	4b74      	ldr	r3, [pc, #464]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ef      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d166      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002be2:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002be4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bec:	4053      	eors	r3, r2
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d013      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bf6:	4b6a      	ldr	r3, [pc, #424]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bfe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c00:	4b67      	ldr	r3, [pc, #412]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a66      	ldr	r2, [pc, #408]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c0c:	4b64      	ldr	r3, [pc, #400]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	4a63      	ldr	r2, [pc, #396]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c18:	4a61      	ldr	r2, [pc, #388]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c28:	d115      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe f973 	bl	8000f14 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c30:	e00b      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c32:	f7fe f96f 	bl	8000f14 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d902      	bls.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	75fb      	strb	r3, [r7, #23]
            break;
 8002c48:	e005      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c4a:	4b55      	ldr	r3, [pc, #340]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0ed      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d126      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c6a:	d10d      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002c6c:	4b4c      	ldr	r3, [pc, #304]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c7a:	0919      	lsrs	r1, r3, #4
 8002c7c:	4b4a      	ldr	r3, [pc, #296]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002c7e:	400b      	ands	r3, r1
 8002c80:	4947      	ldr	r1, [pc, #284]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	610b      	str	r3, [r1, #16]
 8002c86:	e005      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002c88:	4b45      	ldr	r3, [pc, #276]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	4a44      	ldr	r2, [pc, #272]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c92:	6113      	str	r3, [r2, #16]
 8002c94:	4b42      	ldr	r3, [pc, #264]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca2:	493f      	ldr	r1, [pc, #252]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	670b      	str	r3, [r1, #112]	; 0x70
 8002ca8:	e004      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
 8002cac:	75bb      	strb	r3, [r7, #22]
 8002cae:	e001      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
 8002cb2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8085 	beq.w	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cc6:	2b28      	cmp	r3, #40	; 0x28
 8002cc8:	d866      	bhi.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002cca:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd0:	08002dad 	.word	0x08002dad
 8002cd4:	08002d99 	.word	0x08002d99
 8002cd8:	08002d99 	.word	0x08002d99
 8002cdc:	08002d99 	.word	0x08002d99
 8002ce0:	08002d99 	.word	0x08002d99
 8002ce4:	08002d99 	.word	0x08002d99
 8002ce8:	08002d99 	.word	0x08002d99
 8002cec:	08002d99 	.word	0x08002d99
 8002cf0:	08002d75 	.word	0x08002d75
 8002cf4:	08002d99 	.word	0x08002d99
 8002cf8:	08002d99 	.word	0x08002d99
 8002cfc:	08002d99 	.word	0x08002d99
 8002d00:	08002d99 	.word	0x08002d99
 8002d04:	08002d99 	.word	0x08002d99
 8002d08:	08002d99 	.word	0x08002d99
 8002d0c:	08002d99 	.word	0x08002d99
 8002d10:	08002d87 	.word	0x08002d87
 8002d14:	08002d99 	.word	0x08002d99
 8002d18:	08002d99 	.word	0x08002d99
 8002d1c:	08002d99 	.word	0x08002d99
 8002d20:	08002d99 	.word	0x08002d99
 8002d24:	08002d99 	.word	0x08002d99
 8002d28:	08002d99 	.word	0x08002d99
 8002d2c:	08002d99 	.word	0x08002d99
 8002d30:	08002dad 	.word	0x08002dad
 8002d34:	08002d99 	.word	0x08002d99
 8002d38:	08002d99 	.word	0x08002d99
 8002d3c:	08002d99 	.word	0x08002d99
 8002d40:	08002d99 	.word	0x08002d99
 8002d44:	08002d99 	.word	0x08002d99
 8002d48:	08002d99 	.word	0x08002d99
 8002d4c:	08002d99 	.word	0x08002d99
 8002d50:	08002dad 	.word	0x08002dad
 8002d54:	08002d99 	.word	0x08002d99
 8002d58:	08002d99 	.word	0x08002d99
 8002d5c:	08002d99 	.word	0x08002d99
 8002d60:	08002d99 	.word	0x08002d99
 8002d64:	08002d99 	.word	0x08002d99
 8002d68:	08002d99 	.word	0x08002d99
 8002d6c:	08002d99 	.word	0x08002d99
 8002d70:	08002dad 	.word	0x08002dad
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fdfa 	bl	8003974 <RCCEx_PLL2_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d84:	e013      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3324      	adds	r3, #36	; 0x24
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fea3 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d96:	e00a      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d9c:	e007      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d9e:	bf00      	nop
 8002da0:	58024400 	.word	0x58024400
 8002da4:	58024800 	.word	0x58024800
 8002da8:	00ffffcf 	.word	0x00ffffcf
      break;
 8002dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dae:	7dfb      	ldrb	r3, [r7, #23]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002db4:	4b96      	ldr	r3, [pc, #600]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dc0:	4993      	ldr	r1, [pc, #588]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	654b      	str	r3, [r1, #84]	; 0x54
 8002dc6:	e001      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d038      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d821      	bhi.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002de0:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de6:	bf00      	nop
 8002de8:	08002e2b 	.word	0x08002e2b
 8002dec:	08002e01 	.word	0x08002e01
 8002df0:	08002e13 	.word	0x08002e13
 8002df4:	08002e2b 	.word	0x08002e2b
 8002df8:	08002e2b 	.word	0x08002e2b
 8002dfc:	08002e2b 	.word	0x08002e2b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3304      	adds	r3, #4
 8002e04:	2101      	movs	r1, #1
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fdb4 	bl	8003974 <RCCEx_PLL2_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002e10:	e00c      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3324      	adds	r3, #36	; 0x24
 8002e16:	2101      	movs	r1, #1
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fe5d 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002e22:	e003      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	75fb      	strb	r3, [r7, #23]
      break;
 8002e28:	e000      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002e2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e32:	4b77      	ldr	r3, [pc, #476]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	f023 0207 	bic.w	r2, r3, #7
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3e:	4974      	ldr	r1, [pc, #464]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	654b      	str	r3, [r1, #84]	; 0x54
 8002e44:	e001      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
 8002e48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d03a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d821      	bhi.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002e60:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e66:	bf00      	nop
 8002e68:	08002eab 	.word	0x08002eab
 8002e6c:	08002e81 	.word	0x08002e81
 8002e70:	08002e93 	.word	0x08002e93
 8002e74:	08002eab 	.word	0x08002eab
 8002e78:	08002eab 	.word	0x08002eab
 8002e7c:	08002eab 	.word	0x08002eab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3304      	adds	r3, #4
 8002e84:	2101      	movs	r1, #1
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fd74 	bl	8003974 <RCCEx_PLL2_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e90:	e00c      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3324      	adds	r3, #36	; 0x24
 8002e96:	2101      	movs	r1, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fe1d 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002ea2:	e003      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ea8:	e000      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eb2:	4b57      	ldr	r3, [pc, #348]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	f023 0207 	bic.w	r2, r3, #7
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec0:	4953      	ldr	r1, [pc, #332]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	658b      	str	r3, [r1, #88]	; 0x58
 8002ec6:	e001      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d04b      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee2:	d02e      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee8:	d828      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eee:	d02a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef4:	d822      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002ef6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002efa:	d026      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002efc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f00:	d81c      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f06:	d010      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f0c:	d816      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01d      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002f12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f16:	d111      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fd28 	bl	8003974 <RCCEx_PLL2_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f28:	e012      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3324      	adds	r3, #36	; 0x24
 8002f2e:	2102      	movs	r1, #2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fdd1 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f3a:	e009      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f40:	e006      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002f42:	bf00      	nop
 8002f44:	e004      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002f46:	bf00      	nop
 8002f48:	e002      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e000      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f56:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f64:	492a      	ldr	r1, [pc, #168]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	654b      	str	r3, [r1, #84]	; 0x54
 8002f6a:	e001      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
 8002f6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d04d      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f86:	d02e      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002f88:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f8c:	d828      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f92:	d02a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f98:	d822      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002f9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f9e:	d026      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002fa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fa4:	d81c      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002faa:	d010      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb0:	d816      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01d      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fba:	d111      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fcd6 	bl	8003974 <RCCEx_PLL2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002fcc:	e012      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3324      	adds	r3, #36	; 0x24
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fd7f 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002fde:	e009      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe4:	e006      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e004      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002fea:	bf00      	nop
 8002fec:	e002      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e000      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003008:	4901      	ldr	r1, [pc, #4]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800300a:	4313      	orrs	r3, r2
 800300c:	658b      	str	r3, [r1, #88]	; 0x58
 800300e:	e003      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003010:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003020:	2b00      	cmp	r3, #0
 8003022:	d04b      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800302a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800302e:	d02e      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003030:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003034:	d828      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800303a:	d02a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800303c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003040:	d822      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003042:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003046:	d026      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003048:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800304c:	d81c      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800304e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003052:	d010      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003058:	d816      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d01d      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800305e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003062:	d111      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fc82 	bl	8003974 <RCCEx_PLL2_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003074:	e012      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3324      	adds	r3, #36	; 0x24
 800307a:	2102      	movs	r1, #2
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fd2b 	bl	8003ad8 <RCCEx_PLL3_Config>
 8003082:	4603      	mov	r3, r0
 8003084:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003086:	e009      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	75fb      	strb	r3, [r7, #23]
      break;
 800308c:	e006      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800308e:	bf00      	nop
 8003090:	e004      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003092:	bf00      	nop
 8003094:	e002      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003096:	bf00      	nop
 8003098:	e000      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800309a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80030a2:	4b9d      	ldr	r3, [pc, #628]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030b0:	4999      	ldr	r1, [pc, #612]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	658b      	str	r3, [r1, #88]	; 0x58
 80030b6:	e001      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01a      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d2:	d10a      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3324      	adds	r3, #36	; 0x24
 80030d8:	2102      	movs	r1, #2
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fcfc 	bl	8003ad8 <RCCEx_PLL3_Config>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80030ea:	4b8b      	ldr	r3, [pc, #556]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f8:	4987      	ldr	r1, [pc, #540]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01a      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003114:	d10a      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3324      	adds	r3, #36	; 0x24
 800311a:	2102      	movs	r1, #2
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fcdb 	bl	8003ad8 <RCCEx_PLL3_Config>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800312c:	4b7a      	ldr	r3, [pc, #488]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313a:	4977      	ldr	r1, [pc, #476]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800313c:	4313      	orrs	r3, r2
 800313e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d034      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003152:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003156:	d01d      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800315c:	d817      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003166:	d009      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003168:	e011      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3304      	adds	r3, #4
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fbff 	bl	8003974 <RCCEx_PLL2_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800317a:	e00c      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3324      	adds	r3, #36	; 0x24
 8003180:	2102      	movs	r1, #2
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fca8 	bl	8003ad8 <RCCEx_PLL3_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800318c:	e003      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
      break;
 8003192:	e000      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003196:	7dfb      	ldrb	r3, [r7, #23]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800319c:	4b5e      	ldr	r3, [pc, #376]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031aa:	495b      	ldr	r1, [pc, #364]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	658b      	str	r3, [r1, #88]	; 0x58
 80031b0:	e001      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d033      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031cc:	d01c      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80031ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031d2:	d816      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80031d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d8:	d003      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80031da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031de:	d007      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80031e0:	e00f      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e2:	4b4d      	ldr	r3, [pc, #308]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	4a4c      	ldr	r2, [pc, #304]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80031ee:	e00c      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3324      	adds	r3, #36	; 0x24
 80031f4:	2101      	movs	r1, #1
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fc6e 	bl	8003ad8 <RCCEx_PLL3_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003200:	e003      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	75fb      	strb	r3, [r7, #23]
      break;
 8003206:	e000      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800320a:	7dfb      	ldrb	r3, [r7, #23]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003210:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800321e:	493e      	ldr	r1, [pc, #248]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003220:	4313      	orrs	r3, r2
 8003222:	654b      	str	r3, [r1, #84]	; 0x54
 8003224:	e001      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003226:	7dfb      	ldrb	r3, [r7, #23]
 8003228:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d029      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800323e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003242:	d007      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003244:	e00f      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003246:	4b34      	ldr	r3, [pc, #208]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	4a33      	ldr	r2, [pc, #204]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800324c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003250:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003252:	e00b      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	2102      	movs	r1, #2
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fb8a 	bl	8003974 <RCCEx_PLL2_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003264:	e002      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
      break;
 800326a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003272:	4b29      	ldr	r3, [pc, #164]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003276:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327e:	4926      	ldr	r1, [pc, #152]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003280:	4313      	orrs	r3, r2
 8003282:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003284:	e001      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3324      	adds	r3, #36	; 0x24
 800329a:	2102      	movs	r1, #2
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fc1b 	bl	8003ad8 <RCCEx_PLL3_Config>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d033      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032c0:	d017      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80032c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032c6:	d811      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80032c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032cc:	d013      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80032ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d2:	d80b      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d010      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80032d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032dc:	d106      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032de:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	4a0d      	ldr	r2, [pc, #52]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80032ea:	e007      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	75fb      	strb	r3, [r7, #23]
      break;
 80032f0:	e004      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80032f2:	bf00      	nop
 80032f4:	e002      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80032f6:	bf00      	nop
 80032f8:	e000      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80032fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003302:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800330e:	4902      	ldr	r1, [pc, #8]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003310:	4313      	orrs	r3, r2
 8003312:	654b      	str	r3, [r1, #84]	; 0x54
 8003314:	e004      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003316:	bf00      	nop
 8003318:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331c:	7dfb      	ldrb	r3, [r7, #23]
 800331e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800332c:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800332e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003330:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	492e      	ldr	r1, [pc, #184]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800333a:	4313      	orrs	r3, r2
 800333c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800334a:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003358:	4926      	ldr	r1, [pc, #152]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800335a:	4313      	orrs	r3, r2
 800335c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800336a:	4b22      	ldr	r3, [pc, #136]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800336c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800336e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003376:	491f      	ldr	r1, [pc, #124]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003378:	4313      	orrs	r3, r2
 800337a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00d      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003388:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	4a19      	ldr	r2, [pc, #100]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800338e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003392:	6113      	str	r3, [r2, #16]
 8003394:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800339e:	4915      	ldr	r1, [pc, #84]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	da08      	bge.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80033ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b8:	490e      	ldr	r1, [pc, #56]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	4906      	ldr	r1, [pc, #24]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80033de:	7dbb      	ldrb	r3, [r7, #22]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e000      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	58024400 	.word	0x58024400

080033f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80033fc:	f7ff f85a 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 8003400:	4602      	mov	r2, r0
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4904      	ldr	r1, [pc, #16]	; (8003420 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800340e:	5ccb      	ldrb	r3, [r1, r3]
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	58024400 	.word	0x58024400
 8003420:	08005eb4 	.word	0x08005eb4

08003424 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003424:	b480      	push	{r7}
 8003426:	b089      	sub	sp, #36	; 0x24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800342c:	4ba1      	ldr	r3, [pc, #644]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003436:	4b9f      	ldr	r3, [pc, #636]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	0b1b      	lsrs	r3, r3, #12
 800343c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003440:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003442:	4b9c      	ldr	r3, [pc, #624]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800344e:	4b99      	ldr	r3, [pc, #612]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	08db      	lsrs	r3, r3, #3
 8003454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003466:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8111 	beq.w	8003694 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b02      	cmp	r3, #2
 8003476:	f000 8083 	beq.w	8003580 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b02      	cmp	r3, #2
 800347e:	f200 80a1 	bhi.w	80035c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d056      	beq.n	800353c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800348e:	e099      	b.n	80035c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003490:	4b88      	ldr	r3, [pc, #544]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d02d      	beq.n	80034f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800349c:	4b85      	ldr	r3, [pc, #532]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	08db      	lsrs	r3, r3, #3
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	4a84      	ldr	r2, [pc, #528]	; (80036b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c6:	4b7b      	ldr	r3, [pc, #492]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80034da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80036bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80034f6:	e087      	b.n	8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003502:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80036c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800350a:	4b6a      	ldr	r3, [pc, #424]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800351a:	ed97 6a03 	vldr	s12, [r7, #12]
 800351e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80036bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800352a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800352e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800353a:	e065      	b.n	8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003546:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80036c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800354a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800354e:	4b59      	ldr	r3, [pc, #356]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800355e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003562:	eddf 5a56 	vldr	s11, [pc, #344]	; 80036bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800356a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800356e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800357e:	e043      	b.n	8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80036c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800358e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003592:	4b48      	ldr	r3, [pc, #288]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80035a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80036bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035c2:	e021      	b.n	8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80036c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80035d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d6:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80035ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80036bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003602:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003606:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003608:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	0a5b      	lsrs	r3, r3, #9
 800360e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800361e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003622:	edd7 6a07 	vldr	s13, [r7, #28]
 8003626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800362a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800362e:	ee17 2a90 	vmov	r2, s15
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003636:	4b1f      	ldr	r3, [pc, #124]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	0c1b      	lsrs	r3, r3, #16
 800363c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003640:	ee07 3a90 	vmov	s15, r3
 8003644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800364c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003650:	edd7 6a07 	vldr	s13, [r7, #28]
 8003654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800365c:	ee17 2a90 	vmov	r2, s15
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003664:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	0e1b      	lsrs	r3, r3, #24
 800366a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800366e:	ee07 3a90 	vmov	s15, r3
 8003672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800367a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800367e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800368a:	ee17 2a90 	vmov	r2, s15
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003692:	e008      	b.n	80036a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
}
 80036a6:	bf00      	nop
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	58024400 	.word	0x58024400
 80036b8:	03d09000 	.word	0x03d09000
 80036bc:	46000000 	.word	0x46000000
 80036c0:	4c742400 	.word	0x4c742400
 80036c4:	4a742400 	.word	0x4a742400
 80036c8:	4af42400 	.word	0x4af42400

080036cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	; 0x24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036d4:	4ba1      	ldr	r3, [pc, #644]	; (800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80036de:	4b9f      	ldr	r3, [pc, #636]	; (800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	0d1b      	lsrs	r3, r3, #20
 80036e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80036ea:	4b9c      	ldr	r3, [pc, #624]	; (800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80036f6:	4b99      	ldr	r3, [pc, #612]	; (800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	08db      	lsrs	r3, r3, #3
 80036fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	fb02 f303 	mul.w	r3, r2, r3
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 8111 	beq.w	800393c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b02      	cmp	r3, #2
 800371e:	f000 8083 	beq.w	8003828 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	2b02      	cmp	r3, #2
 8003726:	f200 80a1 	bhi.w	800386c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d056      	beq.n	80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003736:	e099      	b.n	800386c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003738:	4b88      	ldr	r3, [pc, #544]	; (800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d02d      	beq.n	80037a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003744:	4b85      	ldr	r3, [pc, #532]	; (800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	08db      	lsrs	r3, r3, #3
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	4a84      	ldr	r2, [pc, #528]	; (8003960 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003750:	fa22 f303 	lsr.w	r3, r2, r3
 8003754:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	ee07 3a90 	vmov	s15, r3
 800375c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376e:	4b7b      	ldr	r3, [pc, #492]	; (800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003782:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800378a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800379e:	e087      	b.n	80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003968 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80037ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037b2:	4b6a      	ldr	r3, [pc, #424]	; (800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80037c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037e2:	e065      	b.n	80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800396c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80037f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037f6:	4b59      	ldr	r3, [pc, #356]	; (800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003806:	ed97 6a03 	vldr	s12, [r7, #12]
 800380a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800380e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800381a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800381e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003822:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003826:	e043      	b.n	80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003832:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003970 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800383a:	4b48      	ldr	r3, [pc, #288]	; (800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800384a:	ed97 6a03 	vldr	s12, [r7, #12]
 800384e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800385a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800385e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003866:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800386a:	e021      	b.n	80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003876:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800396c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800387a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800387e:	4b37      	ldr	r3, [pc, #220]	; (800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800388e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003892:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800389a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800389e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80038b0:	4b2a      	ldr	r3, [pc, #168]	; (800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	0a5b      	lsrs	r3, r3, #9
 80038b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80038ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038d6:	ee17 2a90 	vmov	r2, s15
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80038de:	4b1f      	ldr	r3, [pc, #124]	; (800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	0c1b      	lsrs	r3, r3, #16
 80038e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e8:	ee07 3a90 	vmov	s15, r3
 80038ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80038fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003904:	ee17 2a90 	vmov	r2, s15
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800390c:	4b13      	ldr	r3, [pc, #76]	; (800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	0e1b      	lsrs	r3, r3, #24
 8003912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003926:	edd7 6a07 	vldr	s13, [r7, #28]
 800392a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800392e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003932:	ee17 2a90 	vmov	r2, s15
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800393a:	e008      	b.n	800394e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]
}
 800394e:	bf00      	nop
 8003950:	3724      	adds	r7, #36	; 0x24
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	58024400 	.word	0x58024400
 8003960:	03d09000 	.word	0x03d09000
 8003964:	46000000 	.word	0x46000000
 8003968:	4c742400 	.word	0x4c742400
 800396c:	4a742400 	.word	0x4a742400
 8003970:	4af42400 	.word	0x4af42400

08003974 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003982:	4b53      	ldr	r3, [pc, #332]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b03      	cmp	r3, #3
 800398c:	d101      	bne.n	8003992 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e099      	b.n	8003ac6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003992:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a4e      	ldr	r2, [pc, #312]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003998:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800399c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399e:	f7fd fab9 	bl	8000f14 <HAL_GetTick>
 80039a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80039a4:	e008      	b.n	80039b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80039a6:	f7fd fab5 	bl	8000f14 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e086      	b.n	8003ac6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80039b8:	4b45      	ldr	r3, [pc, #276]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f0      	bne.n	80039a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80039c4:	4b42      	ldr	r3, [pc, #264]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	031b      	lsls	r3, r3, #12
 80039d2:	493f      	ldr	r1, [pc, #252]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	628b      	str	r3, [r1, #40]	; 0x28
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	3b01      	subs	r3, #1
 80039de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	025b      	lsls	r3, r3, #9
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	041b      	lsls	r3, r3, #16
 80039f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	061b      	lsls	r3, r3, #24
 8003a04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a08:	4931      	ldr	r1, [pc, #196]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003a0e:	4b30      	ldr	r3, [pc, #192]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	492d      	ldr	r1, [pc, #180]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003a20:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	f023 0220 	bic.w	r2, r3, #32
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	4928      	ldr	r1, [pc, #160]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003a32:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	4a26      	ldr	r2, [pc, #152]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a38:	f023 0310 	bic.w	r3, r3, #16
 8003a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <RCCEx_PLL2_Config+0x160>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	69d2      	ldr	r2, [r2, #28]
 8003a4a:	00d2      	lsls	r2, r2, #3
 8003a4c:	4920      	ldr	r1, [pc, #128]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a52:	4b1f      	ldr	r3, [pc, #124]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a58:	f043 0310 	orr.w	r3, r3, #16
 8003a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a64:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	4a19      	ldr	r2, [pc, #100]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a70:	e00f      	b.n	8003a92 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d106      	bne.n	8003a86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	4a14      	ldr	r2, [pc, #80]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a84:	e005      	b.n	8003a92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003a92:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a0e      	ldr	r2, [pc, #56]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9e:	f7fd fa39 	bl	8000f14 <HAL_GetTick>
 8003aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003aa4:	e008      	b.n	8003ab8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003aa6:	f7fd fa35 	bl	8000f14 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e006      	b.n	8003ac6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	ffff0007 	.word	0xffff0007

08003ad8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ae6:	4b53      	ldr	r3, [pc, #332]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d101      	bne.n	8003af6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e099      	b.n	8003c2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003af6:	4b4f      	ldr	r3, [pc, #316]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a4e      	ldr	r2, [pc, #312]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b02:	f7fd fa07 	bl	8000f14 <HAL_GetTick>
 8003b06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b08:	e008      	b.n	8003b1c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b0a:	f7fd fa03 	bl	8000f14 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e086      	b.n	8003c2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b1c:	4b45      	ldr	r3, [pc, #276]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003b28:	4b42      	ldr	r3, [pc, #264]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	051b      	lsls	r3, r3, #20
 8003b36:	493f      	ldr	r1, [pc, #252]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	628b      	str	r3, [r1, #40]	; 0x28
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	025b      	lsls	r3, r3, #9
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	041b      	lsls	r3, r3, #16
 8003b5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	061b      	lsls	r3, r3, #24
 8003b68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b6c:	4931      	ldr	r1, [pc, #196]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b72:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	492d      	ldr	r1, [pc, #180]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003b84:	4b2b      	ldr	r3, [pc, #172]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	4928      	ldr	r1, [pc, #160]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b96:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	4a26      	ldr	r2, [pc, #152]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003ba2:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba6:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <RCCEx_PLL3_Config+0x160>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	69d2      	ldr	r2, [r2, #28]
 8003bae:	00d2      	lsls	r2, r2, #3
 8003bb0:	4920      	ldr	r1, [pc, #128]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003bb6:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	4a1e      	ldr	r2, [pc, #120]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d106      	bne.n	8003bd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bd4:	e00f      	b.n	8003bf6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d106      	bne.n	8003bea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003bdc:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	4a14      	ldr	r2, [pc, #80]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003be2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003be6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003be8:	e005      	b.n	8003bf6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003bea:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003bf6:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a0e      	ldr	r2, [pc, #56]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c02:	f7fd f987 	bl	8000f14 <HAL_GetTick>
 8003c06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c08:	e008      	b.n	8003c1c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003c0a:	f7fd f983 	bl	8000f14 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e006      	b.n	8003c2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	58024400 	.word	0x58024400
 8003c38:	ffff0007 	.word	0xffff0007

08003c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e049      	b.n	8003ce2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fc ffbe 	bl	8000be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f000 fbb0 	bl	80043e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e049      	b.n	8003d90 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d106      	bne.n	8003d16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f841 	bl	8003d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2202      	movs	r2, #2
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3304      	adds	r3, #4
 8003d26:	4619      	mov	r1, r3
 8003d28:	4610      	mov	r0, r2
 8003d2a:	f000 fb59 	bl	80043e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d109      	bne.n	8003dd0 <HAL_TIM_PWM_Start+0x24>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e03c      	b.n	8003e4a <HAL_TIM_PWM_Start+0x9e>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d109      	bne.n	8003dea <HAL_TIM_PWM_Start+0x3e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	bf14      	ite	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	2300      	moveq	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	e02f      	b.n	8003e4a <HAL_TIM_PWM_Start+0x9e>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d109      	bne.n	8003e04 <HAL_TIM_PWM_Start+0x58>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	bf14      	ite	ne
 8003dfc:	2301      	movne	r3, #1
 8003dfe:	2300      	moveq	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e022      	b.n	8003e4a <HAL_TIM_PWM_Start+0x9e>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b0c      	cmp	r3, #12
 8003e08:	d109      	bne.n	8003e1e <HAL_TIM_PWM_Start+0x72>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	bf14      	ite	ne
 8003e16:	2301      	movne	r3, #1
 8003e18:	2300      	moveq	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	e015      	b.n	8003e4a <HAL_TIM_PWM_Start+0x9e>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d109      	bne.n	8003e38 <HAL_TIM_PWM_Start+0x8c>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	bf14      	ite	ne
 8003e30:	2301      	movne	r3, #1
 8003e32:	2300      	moveq	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	e008      	b.n	8003e4a <HAL_TIM_PWM_Start+0x9e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e0a1      	b.n	8003f96 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_PWM_Start+0xb6>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e60:	e023      	b.n	8003eaa <HAL_TIM_PWM_Start+0xfe>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_PWM_Start+0xc6>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e70:	e01b      	b.n	8003eaa <HAL_TIM_PWM_Start+0xfe>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d104      	bne.n	8003e82 <HAL_TIM_PWM_Start+0xd6>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e80:	e013      	b.n	8003eaa <HAL_TIM_PWM_Start+0xfe>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b0c      	cmp	r3, #12
 8003e86:	d104      	bne.n	8003e92 <HAL_TIM_PWM_Start+0xe6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e90:	e00b      	b.n	8003eaa <HAL_TIM_PWM_Start+0xfe>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d104      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0xf6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea0:	e003      	b.n	8003eaa <HAL_TIM_PWM_Start+0xfe>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	6839      	ldr	r1, [r7, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fea2 	bl	8004bfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a38      	ldr	r2, [pc, #224]	; (8003fa0 <HAL_TIM_PWM_Start+0x1f4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <HAL_TIM_PWM_Start+0x13e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a37      	ldr	r2, [pc, #220]	; (8003fa4 <HAL_TIM_PWM_Start+0x1f8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00e      	beq.n	8003eea <HAL_TIM_PWM_Start+0x13e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a35      	ldr	r2, [pc, #212]	; (8003fa8 <HAL_TIM_PWM_Start+0x1fc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d009      	beq.n	8003eea <HAL_TIM_PWM_Start+0x13e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a34      	ldr	r2, [pc, #208]	; (8003fac <HAL_TIM_PWM_Start+0x200>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d004      	beq.n	8003eea <HAL_TIM_PWM_Start+0x13e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a32      	ldr	r2, [pc, #200]	; (8003fb0 <HAL_TIM_PWM_Start+0x204>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d101      	bne.n	8003eee <HAL_TIM_PWM_Start+0x142>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <HAL_TIM_PWM_Start+0x144>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <HAL_TIM_PWM_Start+0x1f4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d022      	beq.n	8003f54 <HAL_TIM_PWM_Start+0x1a8>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f16:	d01d      	beq.n	8003f54 <HAL_TIM_PWM_Start+0x1a8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a25      	ldr	r2, [pc, #148]	; (8003fb4 <HAL_TIM_PWM_Start+0x208>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d018      	beq.n	8003f54 <HAL_TIM_PWM_Start+0x1a8>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a24      	ldr	r2, [pc, #144]	; (8003fb8 <HAL_TIM_PWM_Start+0x20c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d013      	beq.n	8003f54 <HAL_TIM_PWM_Start+0x1a8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a22      	ldr	r2, [pc, #136]	; (8003fbc <HAL_TIM_PWM_Start+0x210>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00e      	beq.n	8003f54 <HAL_TIM_PWM_Start+0x1a8>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1a      	ldr	r2, [pc, #104]	; (8003fa4 <HAL_TIM_PWM_Start+0x1f8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d009      	beq.n	8003f54 <HAL_TIM_PWM_Start+0x1a8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <HAL_TIM_PWM_Start+0x214>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <HAL_TIM_PWM_Start+0x1a8>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <HAL_TIM_PWM_Start+0x1fc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d115      	bne.n	8003f80 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <HAL_TIM_PWM_Start+0x218>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b06      	cmp	r3, #6
 8003f64:	d015      	beq.n	8003f92 <HAL_TIM_PWM_Start+0x1e6>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6c:	d011      	beq.n	8003f92 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7e:	e008      	b.n	8003f92 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e000      	b.n	8003f94 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	40010400 	.word	0x40010400
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	40014400 	.word	0x40014400
 8003fb0:	40014800 	.word	0x40014800
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40001800 	.word	0x40001800
 8003fc4:	00010007 	.word	0x00010007

08003fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e0ff      	b.n	80041e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b14      	cmp	r3, #20
 8003ff2:	f200 80f0 	bhi.w	80041d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ff6:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	08004051 	.word	0x08004051
 8004000:	080041d7 	.word	0x080041d7
 8004004:	080041d7 	.word	0x080041d7
 8004008:	080041d7 	.word	0x080041d7
 800400c:	08004091 	.word	0x08004091
 8004010:	080041d7 	.word	0x080041d7
 8004014:	080041d7 	.word	0x080041d7
 8004018:	080041d7 	.word	0x080041d7
 800401c:	080040d3 	.word	0x080040d3
 8004020:	080041d7 	.word	0x080041d7
 8004024:	080041d7 	.word	0x080041d7
 8004028:	080041d7 	.word	0x080041d7
 800402c:	08004113 	.word	0x08004113
 8004030:	080041d7 	.word	0x080041d7
 8004034:	080041d7 	.word	0x080041d7
 8004038:	080041d7 	.word	0x080041d7
 800403c:	08004155 	.word	0x08004155
 8004040:	080041d7 	.word	0x080041d7
 8004044:	080041d7 	.word	0x080041d7
 8004048:	080041d7 	.word	0x080041d7
 800404c:	08004195 	.word	0x08004195
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fa5c 	bl	8004514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0208 	orr.w	r2, r2, #8
 800406a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0204 	bic.w	r2, r2, #4
 800407a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6999      	ldr	r1, [r3, #24]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	619a      	str	r2, [r3, #24]
      break;
 800408e:	e0a5      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	4618      	mov	r0, r3
 8004098:	f000 facc 	bl	8004634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6999      	ldr	r1, [r3, #24]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	021a      	lsls	r2, r3, #8
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	619a      	str	r2, [r3, #24]
      break;
 80040d0:	e084      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fb35 	bl	8004748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0208 	orr.w	r2, r2, #8
 80040ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0204 	bic.w	r2, r2, #4
 80040fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69d9      	ldr	r1, [r3, #28]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	61da      	str	r2, [r3, #28]
      break;
 8004110:	e064      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fb9d 	bl	8004858 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800412c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69d9      	ldr	r1, [r3, #28]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	021a      	lsls	r2, r3, #8
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	61da      	str	r2, [r3, #28]
      break;
 8004152:	e043      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fbe6 	bl	800492c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0208 	orr.w	r2, r2, #8
 800416e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0204 	bic.w	r2, r2, #4
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004192:	e023      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fc2a 	bl	80049f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	021a      	lsls	r2, r3, #8
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041d4:	e002      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
      break;
 80041da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop

080041f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_TIM_ConfigClockSource+0x1c>
 8004208:	2302      	movs	r3, #2
 800420a:	e0dc      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x1d6>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	4b6a      	ldr	r3, [pc, #424]	; (80043d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004228:	4013      	ands	r3, r2
 800422a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a64      	ldr	r2, [pc, #400]	; (80043d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	f000 80a9 	beq.w	800439a <HAL_TIM_ConfigClockSource+0x1aa>
 8004248:	4a62      	ldr	r2, [pc, #392]	; (80043d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	f200 80ae 	bhi.w	80043ac <HAL_TIM_ConfigClockSource+0x1bc>
 8004250:	4a61      	ldr	r2, [pc, #388]	; (80043d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	f000 80a1 	beq.w	800439a <HAL_TIM_ConfigClockSource+0x1aa>
 8004258:	4a5f      	ldr	r2, [pc, #380]	; (80043d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	f200 80a6 	bhi.w	80043ac <HAL_TIM_ConfigClockSource+0x1bc>
 8004260:	4a5e      	ldr	r2, [pc, #376]	; (80043dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004262:	4293      	cmp	r3, r2
 8004264:	f000 8099 	beq.w	800439a <HAL_TIM_ConfigClockSource+0x1aa>
 8004268:	4a5c      	ldr	r2, [pc, #368]	; (80043dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800426a:	4293      	cmp	r3, r2
 800426c:	f200 809e 	bhi.w	80043ac <HAL_TIM_ConfigClockSource+0x1bc>
 8004270:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004274:	f000 8091 	beq.w	800439a <HAL_TIM_ConfigClockSource+0x1aa>
 8004278:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800427c:	f200 8096 	bhi.w	80043ac <HAL_TIM_ConfigClockSource+0x1bc>
 8004280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004284:	f000 8089 	beq.w	800439a <HAL_TIM_ConfigClockSource+0x1aa>
 8004288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800428c:	f200 808e 	bhi.w	80043ac <HAL_TIM_ConfigClockSource+0x1bc>
 8004290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004294:	d03e      	beq.n	8004314 <HAL_TIM_ConfigClockSource+0x124>
 8004296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429a:	f200 8087 	bhi.w	80043ac <HAL_TIM_ConfigClockSource+0x1bc>
 800429e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a2:	f000 8086 	beq.w	80043b2 <HAL_TIM_ConfigClockSource+0x1c2>
 80042a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042aa:	d87f      	bhi.n	80043ac <HAL_TIM_ConfigClockSource+0x1bc>
 80042ac:	2b70      	cmp	r3, #112	; 0x70
 80042ae:	d01a      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0xf6>
 80042b0:	2b70      	cmp	r3, #112	; 0x70
 80042b2:	d87b      	bhi.n	80043ac <HAL_TIM_ConfigClockSource+0x1bc>
 80042b4:	2b60      	cmp	r3, #96	; 0x60
 80042b6:	d050      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x16a>
 80042b8:	2b60      	cmp	r3, #96	; 0x60
 80042ba:	d877      	bhi.n	80043ac <HAL_TIM_ConfigClockSource+0x1bc>
 80042bc:	2b50      	cmp	r3, #80	; 0x50
 80042be:	d03c      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x14a>
 80042c0:	2b50      	cmp	r3, #80	; 0x50
 80042c2:	d873      	bhi.n	80043ac <HAL_TIM_ConfigClockSource+0x1bc>
 80042c4:	2b40      	cmp	r3, #64	; 0x40
 80042c6:	d058      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x18a>
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	d86f      	bhi.n	80043ac <HAL_TIM_ConfigClockSource+0x1bc>
 80042cc:	2b30      	cmp	r3, #48	; 0x30
 80042ce:	d064      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x1aa>
 80042d0:	2b30      	cmp	r3, #48	; 0x30
 80042d2:	d86b      	bhi.n	80043ac <HAL_TIM_ConfigClockSource+0x1bc>
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d060      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x1aa>
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d867      	bhi.n	80043ac <HAL_TIM_ConfigClockSource+0x1bc>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d05c      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x1aa>
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d05a      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x1aa>
 80042e4:	e062      	b.n	80043ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6899      	ldr	r1, [r3, #8]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f000 fc61 	bl	8004bbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	609a      	str	r2, [r3, #8]
      break;
 8004312:	e04f      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6899      	ldr	r1, [r3, #8]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f000 fc4a 	bl	8004bbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004336:	609a      	str	r2, [r3, #8]
      break;
 8004338:	e03c      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	461a      	mov	r2, r3
 8004348:	f000 fbba 	bl	8004ac0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2150      	movs	r1, #80	; 0x50
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fc14 	bl	8004b80 <TIM_ITRx_SetConfig>
      break;
 8004358:	e02c      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	461a      	mov	r2, r3
 8004368:	f000 fbd9 	bl	8004b1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2160      	movs	r1, #96	; 0x60
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fc04 	bl	8004b80 <TIM_ITRx_SetConfig>
      break;
 8004378:	e01c      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6859      	ldr	r1, [r3, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	461a      	mov	r2, r3
 8004388:	f000 fb9a 	bl	8004ac0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2140      	movs	r1, #64	; 0x40
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fbf4 	bl	8004b80 <TIM_ITRx_SetConfig>
      break;
 8004398:	e00c      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4619      	mov	r1, r3
 80043a4:	4610      	mov	r0, r2
 80043a6:	f000 fbeb 	bl	8004b80 <TIM_ITRx_SetConfig>
      break;
 80043aa:	e003      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
      break;
 80043b0:	e000      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80043b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	ffceff88 	.word	0xffceff88
 80043d4:	00100040 	.word	0x00100040
 80043d8:	00100030 	.word	0x00100030
 80043dc:	00100020 	.word	0x00100020

080043e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a40      	ldr	r2, [pc, #256]	; (80044f4 <TIM_Base_SetConfig+0x114>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d013      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fe:	d00f      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a3d      	ldr	r2, [pc, #244]	; (80044f8 <TIM_Base_SetConfig+0x118>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00b      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a3c      	ldr	r2, [pc, #240]	; (80044fc <TIM_Base_SetConfig+0x11c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d007      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a3b      	ldr	r2, [pc, #236]	; (8004500 <TIM_Base_SetConfig+0x120>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d003      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a3a      	ldr	r2, [pc, #232]	; (8004504 <TIM_Base_SetConfig+0x124>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d108      	bne.n	8004432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a2f      	ldr	r2, [pc, #188]	; (80044f4 <TIM_Base_SetConfig+0x114>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d01f      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004440:	d01b      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a2c      	ldr	r2, [pc, #176]	; (80044f8 <TIM_Base_SetConfig+0x118>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d017      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a2b      	ldr	r2, [pc, #172]	; (80044fc <TIM_Base_SetConfig+0x11c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a2a      	ldr	r2, [pc, #168]	; (8004500 <TIM_Base_SetConfig+0x120>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00f      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a29      	ldr	r2, [pc, #164]	; (8004504 <TIM_Base_SetConfig+0x124>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00b      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a28      	ldr	r2, [pc, #160]	; (8004508 <TIM_Base_SetConfig+0x128>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d007      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a27      	ldr	r2, [pc, #156]	; (800450c <TIM_Base_SetConfig+0x12c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d003      	beq.n	800447a <TIM_Base_SetConfig+0x9a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a26      	ldr	r2, [pc, #152]	; (8004510 <TIM_Base_SetConfig+0x130>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d108      	bne.n	800448c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a10      	ldr	r2, [pc, #64]	; (80044f4 <TIM_Base_SetConfig+0x114>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00f      	beq.n	80044d8 <TIM_Base_SetConfig+0xf8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a12      	ldr	r2, [pc, #72]	; (8004504 <TIM_Base_SetConfig+0x124>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00b      	beq.n	80044d8 <TIM_Base_SetConfig+0xf8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a11      	ldr	r2, [pc, #68]	; (8004508 <TIM_Base_SetConfig+0x128>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <TIM_Base_SetConfig+0xf8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a10      	ldr	r2, [pc, #64]	; (800450c <TIM_Base_SetConfig+0x12c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_Base_SetConfig+0xf8>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a0f      	ldr	r2, [pc, #60]	; (8004510 <TIM_Base_SetConfig+0x130>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d103      	bne.n	80044e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	615a      	str	r2, [r3, #20]
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40010000 	.word	0x40010000
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40000800 	.word	0x40000800
 8004500:	40000c00 	.word	0x40000c00
 8004504:	40010400 	.word	0x40010400
 8004508:	40014000 	.word	0x40014000
 800450c:	40014400 	.word	0x40014400
 8004510:	40014800 	.word	0x40014800

08004514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0201 	bic.w	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4b37      	ldr	r3, [pc, #220]	; (800461c <TIM_OC1_SetConfig+0x108>)
 8004540:	4013      	ands	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f023 0302 	bic.w	r3, r3, #2
 800455c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a2d      	ldr	r2, [pc, #180]	; (8004620 <TIM_OC1_SetConfig+0x10c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00f      	beq.n	8004590 <TIM_OC1_SetConfig+0x7c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a2c      	ldr	r2, [pc, #176]	; (8004624 <TIM_OC1_SetConfig+0x110>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00b      	beq.n	8004590 <TIM_OC1_SetConfig+0x7c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a2b      	ldr	r2, [pc, #172]	; (8004628 <TIM_OC1_SetConfig+0x114>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d007      	beq.n	8004590 <TIM_OC1_SetConfig+0x7c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a2a      	ldr	r2, [pc, #168]	; (800462c <TIM_OC1_SetConfig+0x118>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d003      	beq.n	8004590 <TIM_OC1_SetConfig+0x7c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a29      	ldr	r2, [pc, #164]	; (8004630 <TIM_OC1_SetConfig+0x11c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d10c      	bne.n	80045aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0308 	bic.w	r3, r3, #8
 8004596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <TIM_OC1_SetConfig+0x10c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00f      	beq.n	80045d2 <TIM_OC1_SetConfig+0xbe>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1b      	ldr	r2, [pc, #108]	; (8004624 <TIM_OC1_SetConfig+0x110>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00b      	beq.n	80045d2 <TIM_OC1_SetConfig+0xbe>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a1a      	ldr	r2, [pc, #104]	; (8004628 <TIM_OC1_SetConfig+0x114>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d007      	beq.n	80045d2 <TIM_OC1_SetConfig+0xbe>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a19      	ldr	r2, [pc, #100]	; (800462c <TIM_OC1_SetConfig+0x118>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d003      	beq.n	80045d2 <TIM_OC1_SetConfig+0xbe>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a18      	ldr	r2, [pc, #96]	; (8004630 <TIM_OC1_SetConfig+0x11c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d111      	bne.n	80045f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	621a      	str	r2, [r3, #32]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	fffeff8f 	.word	0xfffeff8f
 8004620:	40010000 	.word	0x40010000
 8004624:	40010400 	.word	0x40010400
 8004628:	40014000 	.word	0x40014000
 800462c:	40014400 	.word	0x40014400
 8004630:	40014800 	.word	0x40014800

08004634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f023 0210 	bic.w	r2, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4b34      	ldr	r3, [pc, #208]	; (8004730 <TIM_OC2_SetConfig+0xfc>)
 8004660:	4013      	ands	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0320 	bic.w	r3, r3, #32
 800467e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a29      	ldr	r2, [pc, #164]	; (8004734 <TIM_OC2_SetConfig+0x100>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <TIM_OC2_SetConfig+0x68>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a28      	ldr	r2, [pc, #160]	; (8004738 <TIM_OC2_SetConfig+0x104>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d10d      	bne.n	80046b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <TIM_OC2_SetConfig+0x100>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00f      	beq.n	80046e0 <TIM_OC2_SetConfig+0xac>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a1d      	ldr	r2, [pc, #116]	; (8004738 <TIM_OC2_SetConfig+0x104>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00b      	beq.n	80046e0 <TIM_OC2_SetConfig+0xac>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a1c      	ldr	r2, [pc, #112]	; (800473c <TIM_OC2_SetConfig+0x108>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <TIM_OC2_SetConfig+0xac>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <TIM_OC2_SetConfig+0x10c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_OC2_SetConfig+0xac>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a1a      	ldr	r2, [pc, #104]	; (8004744 <TIM_OC2_SetConfig+0x110>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d113      	bne.n	8004708 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	feff8fff 	.word	0xfeff8fff
 8004734:	40010000 	.word	0x40010000
 8004738:	40010400 	.word	0x40010400
 800473c:	40014000 	.word	0x40014000
 8004740:	40014400 	.word	0x40014400
 8004744:	40014800 	.word	0x40014800

08004748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4b33      	ldr	r3, [pc, #204]	; (8004840 <TIM_OC3_SetConfig+0xf8>)
 8004774:	4013      	ands	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0303 	bic.w	r3, r3, #3
 800477e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a28      	ldr	r2, [pc, #160]	; (8004844 <TIM_OC3_SetConfig+0xfc>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d003      	beq.n	80047ae <TIM_OC3_SetConfig+0x66>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a27      	ldr	r2, [pc, #156]	; (8004848 <TIM_OC3_SetConfig+0x100>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d10d      	bne.n	80047ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	021b      	lsls	r3, r3, #8
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <TIM_OC3_SetConfig+0xfc>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00f      	beq.n	80047f2 <TIM_OC3_SetConfig+0xaa>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <TIM_OC3_SetConfig+0x100>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00b      	beq.n	80047f2 <TIM_OC3_SetConfig+0xaa>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a1b      	ldr	r2, [pc, #108]	; (800484c <TIM_OC3_SetConfig+0x104>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <TIM_OC3_SetConfig+0xaa>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <TIM_OC3_SetConfig+0x108>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d003      	beq.n	80047f2 <TIM_OC3_SetConfig+0xaa>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a19      	ldr	r2, [pc, #100]	; (8004854 <TIM_OC3_SetConfig+0x10c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d113      	bne.n	800481a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	621a      	str	r2, [r3, #32]
}
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	fffeff8f 	.word	0xfffeff8f
 8004844:	40010000 	.word	0x40010000
 8004848:	40010400 	.word	0x40010400
 800484c:	40014000 	.word	0x40014000
 8004850:	40014400 	.word	0x40014400
 8004854:	40014800 	.word	0x40014800

08004858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4b24      	ldr	r3, [pc, #144]	; (8004914 <TIM_OC4_SetConfig+0xbc>)
 8004884:	4013      	ands	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	031b      	lsls	r3, r3, #12
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a19      	ldr	r2, [pc, #100]	; (8004918 <TIM_OC4_SetConfig+0xc0>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00f      	beq.n	80048d8 <TIM_OC4_SetConfig+0x80>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a18      	ldr	r2, [pc, #96]	; (800491c <TIM_OC4_SetConfig+0xc4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00b      	beq.n	80048d8 <TIM_OC4_SetConfig+0x80>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a17      	ldr	r2, [pc, #92]	; (8004920 <TIM_OC4_SetConfig+0xc8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d007      	beq.n	80048d8 <TIM_OC4_SetConfig+0x80>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a16      	ldr	r2, [pc, #88]	; (8004924 <TIM_OC4_SetConfig+0xcc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <TIM_OC4_SetConfig+0x80>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a15      	ldr	r2, [pc, #84]	; (8004928 <TIM_OC4_SetConfig+0xd0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d109      	bne.n	80048ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	019b      	lsls	r3, r3, #6
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	621a      	str	r2, [r3, #32]
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	feff8fff 	.word	0xfeff8fff
 8004918:	40010000 	.word	0x40010000
 800491c:	40010400 	.word	0x40010400
 8004920:	40014000 	.word	0x40014000
 8004924:	40014400 	.word	0x40014400
 8004928:	40014800 	.word	0x40014800

0800492c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4b21      	ldr	r3, [pc, #132]	; (80049dc <TIM_OC5_SetConfig+0xb0>)
 8004958:	4013      	ands	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800496c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	041b      	lsls	r3, r3, #16
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <TIM_OC5_SetConfig+0xb4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00f      	beq.n	80049a2 <TIM_OC5_SetConfig+0x76>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <TIM_OC5_SetConfig+0xb8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00b      	beq.n	80049a2 <TIM_OC5_SetConfig+0x76>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <TIM_OC5_SetConfig+0xbc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d007      	beq.n	80049a2 <TIM_OC5_SetConfig+0x76>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a15      	ldr	r2, [pc, #84]	; (80049ec <TIM_OC5_SetConfig+0xc0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d003      	beq.n	80049a2 <TIM_OC5_SetConfig+0x76>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a14      	ldr	r2, [pc, #80]	; (80049f0 <TIM_OC5_SetConfig+0xc4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d109      	bne.n	80049b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	021b      	lsls	r3, r3, #8
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	621a      	str	r2, [r3, #32]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	fffeff8f 	.word	0xfffeff8f
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40010400 	.word	0x40010400
 80049e8:	40014000 	.word	0x40014000
 80049ec:	40014400 	.word	0x40014400
 80049f0:	40014800 	.word	0x40014800

080049f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4b22      	ldr	r3, [pc, #136]	; (8004aa8 <TIM_OC6_SetConfig+0xb4>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	051b      	lsls	r3, r3, #20
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a19      	ldr	r2, [pc, #100]	; (8004aac <TIM_OC6_SetConfig+0xb8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00f      	beq.n	8004a6c <TIM_OC6_SetConfig+0x78>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a18      	ldr	r2, [pc, #96]	; (8004ab0 <TIM_OC6_SetConfig+0xbc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <TIM_OC6_SetConfig+0x78>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <TIM_OC6_SetConfig+0xc0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <TIM_OC6_SetConfig+0x78>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <TIM_OC6_SetConfig+0xc4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_OC6_SetConfig+0x78>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a15      	ldr	r2, [pc, #84]	; (8004abc <TIM_OC6_SetConfig+0xc8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d109      	bne.n	8004a80 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	029b      	lsls	r3, r3, #10
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	feff8fff 	.word	0xfeff8fff
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40010400 	.word	0x40010400
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	40014400 	.word	0x40014400
 8004abc:	40014800 	.word	0x40014800

08004ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f023 0201 	bic.w	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f023 030a 	bic.w	r3, r3, #10
 8004afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	621a      	str	r2, [r3, #32]
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b087      	sub	sp, #28
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0210 	bic.w	r2, r3, #16
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	031b      	lsls	r3, r3, #12
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	621a      	str	r2, [r3, #32]
}
 8004b72:	bf00      	nop
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <TIM_ITRx_SetConfig+0x38>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f043 0307 	orr.w	r3, r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	609a      	str	r2, [r3, #8]
}
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	ffcfff8f 	.word	0xffcfff8f

08004bbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	021a      	lsls	r2, r3, #8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	609a      	str	r2, [r3, #8]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	2201      	movs	r2, #1
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a1a      	ldr	r2, [r3, #32]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	401a      	ands	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a1a      	ldr	r2, [r3, #32]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	fa01 f303 	lsl.w	r3, r1, r3
 8004c34:	431a      	orrs	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e06d      	b.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a30      	ldr	r2, [pc, #192]	; (8004d48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d004      	beq.n	8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a2f      	ldr	r2, [pc, #188]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d108      	bne.n	8004ca6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a20      	ldr	r2, [pc, #128]	; (8004d48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d022      	beq.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd2:	d01d      	beq.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1d      	ldr	r2, [pc, #116]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d018      	beq.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1c      	ldr	r2, [pc, #112]	; (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1a      	ldr	r2, [pc, #104]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00e      	beq.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a15      	ldr	r2, [pc, #84]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d009      	beq.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d10c      	bne.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	40010400 	.word	0x40010400
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40000800 	.word	0x40000800
 8004d58:	40000c00 	.word	0x40000c00
 8004d5c:	40001800 	.word	0x40001800
 8004d60:	40014000 	.word	0x40014000

08004d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e042      	b.n	8004dfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d106      	bne.n	8004d8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fb ff83 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2224      	movs	r2, #36	; 0x24
 8004d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f82c 	bl	8004e04 <UART_SetConfig>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e022      	b.n	8004dfc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fd88 	bl	80058d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fe0f 	bl	8005a18 <UART_CheckIdleState>
 8004dfa:	4603      	mov	r3, r0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e08:	b092      	sub	sp, #72	; 0x48
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4bbe      	ldr	r3, [pc, #760]	; (800512c <UART_SetConfig+0x328>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4ab3      	ldr	r2, [pc, #716]	; (8005130 <UART_SetConfig+0x32c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d004      	beq.n	8004e70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	4baf      	ldr	r3, [pc, #700]	; (8005134 <UART_SetConfig+0x330>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e80:	430b      	orrs	r3, r1
 8004e82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	f023 010f 	bic.w	r1, r3, #15
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4aa6      	ldr	r2, [pc, #664]	; (8005138 <UART_SetConfig+0x334>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d177      	bne.n	8004f94 <UART_SetConfig+0x190>
 8004ea4:	4ba5      	ldr	r3, [pc, #660]	; (800513c <UART_SetConfig+0x338>)
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eac:	2b28      	cmp	r3, #40	; 0x28
 8004eae:	d86d      	bhi.n	8004f8c <UART_SetConfig+0x188>
 8004eb0:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0xb4>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004f5d 	.word	0x08004f5d
 8004ebc:	08004f8d 	.word	0x08004f8d
 8004ec0:	08004f8d 	.word	0x08004f8d
 8004ec4:	08004f8d 	.word	0x08004f8d
 8004ec8:	08004f8d 	.word	0x08004f8d
 8004ecc:	08004f8d 	.word	0x08004f8d
 8004ed0:	08004f8d 	.word	0x08004f8d
 8004ed4:	08004f8d 	.word	0x08004f8d
 8004ed8:	08004f65 	.word	0x08004f65
 8004edc:	08004f8d 	.word	0x08004f8d
 8004ee0:	08004f8d 	.word	0x08004f8d
 8004ee4:	08004f8d 	.word	0x08004f8d
 8004ee8:	08004f8d 	.word	0x08004f8d
 8004eec:	08004f8d 	.word	0x08004f8d
 8004ef0:	08004f8d 	.word	0x08004f8d
 8004ef4:	08004f8d 	.word	0x08004f8d
 8004ef8:	08004f6d 	.word	0x08004f6d
 8004efc:	08004f8d 	.word	0x08004f8d
 8004f00:	08004f8d 	.word	0x08004f8d
 8004f04:	08004f8d 	.word	0x08004f8d
 8004f08:	08004f8d 	.word	0x08004f8d
 8004f0c:	08004f8d 	.word	0x08004f8d
 8004f10:	08004f8d 	.word	0x08004f8d
 8004f14:	08004f8d 	.word	0x08004f8d
 8004f18:	08004f75 	.word	0x08004f75
 8004f1c:	08004f8d 	.word	0x08004f8d
 8004f20:	08004f8d 	.word	0x08004f8d
 8004f24:	08004f8d 	.word	0x08004f8d
 8004f28:	08004f8d 	.word	0x08004f8d
 8004f2c:	08004f8d 	.word	0x08004f8d
 8004f30:	08004f8d 	.word	0x08004f8d
 8004f34:	08004f8d 	.word	0x08004f8d
 8004f38:	08004f7d 	.word	0x08004f7d
 8004f3c:	08004f8d 	.word	0x08004f8d
 8004f40:	08004f8d 	.word	0x08004f8d
 8004f44:	08004f8d 	.word	0x08004f8d
 8004f48:	08004f8d 	.word	0x08004f8d
 8004f4c:	08004f8d 	.word	0x08004f8d
 8004f50:	08004f8d 	.word	0x08004f8d
 8004f54:	08004f8d 	.word	0x08004f8d
 8004f58:	08004f85 	.word	0x08004f85
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f62:	e222      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004f64:	2304      	movs	r3, #4
 8004f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6a:	e21e      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f72:	e21a      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004f74:	2310      	movs	r3, #16
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7a:	e216      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004f7c:	2320      	movs	r3, #32
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f82:	e212      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004f84:	2340      	movs	r3, #64	; 0x40
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f8a:	e20e      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f92:	e20a      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a69      	ldr	r2, [pc, #420]	; (8005140 <UART_SetConfig+0x33c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d130      	bne.n	8005000 <UART_SetConfig+0x1fc>
 8004f9e:	4b67      	ldr	r3, [pc, #412]	; (800513c <UART_SetConfig+0x338>)
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	2b05      	cmp	r3, #5
 8004fa8:	d826      	bhi.n	8004ff8 <UART_SetConfig+0x1f4>
 8004faa:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <UART_SetConfig+0x1ac>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08004fc9 	.word	0x08004fc9
 8004fb4:	08004fd1 	.word	0x08004fd1
 8004fb8:	08004fd9 	.word	0x08004fd9
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	08004fe9 	.word	0x08004fe9
 8004fc4:	08004ff1 	.word	0x08004ff1
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fce:	e1ec      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd6:	e1e8      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004fd8:	2308      	movs	r3, #8
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fde:	e1e4      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fe6:	e1e0      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004fe8:	2320      	movs	r3, #32
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fee:	e1dc      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004ff0:	2340      	movs	r3, #64	; 0x40
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff6:	e1d8      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004ff8:	2380      	movs	r3, #128	; 0x80
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffe:	e1d4      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a4f      	ldr	r2, [pc, #316]	; (8005144 <UART_SetConfig+0x340>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d130      	bne.n	800506c <UART_SetConfig+0x268>
 800500a:	4b4c      	ldr	r3, [pc, #304]	; (800513c <UART_SetConfig+0x338>)
 800500c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	2b05      	cmp	r3, #5
 8005014:	d826      	bhi.n	8005064 <UART_SetConfig+0x260>
 8005016:	a201      	add	r2, pc, #4	; (adr r2, 800501c <UART_SetConfig+0x218>)
 8005018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501c:	08005035 	.word	0x08005035
 8005020:	0800503d 	.word	0x0800503d
 8005024:	08005045 	.word	0x08005045
 8005028:	0800504d 	.word	0x0800504d
 800502c:	08005055 	.word	0x08005055
 8005030:	0800505d 	.word	0x0800505d
 8005034:	2300      	movs	r3, #0
 8005036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503a:	e1b6      	b.n	80053aa <UART_SetConfig+0x5a6>
 800503c:	2304      	movs	r3, #4
 800503e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005042:	e1b2      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005044:	2308      	movs	r3, #8
 8005046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504a:	e1ae      	b.n	80053aa <UART_SetConfig+0x5a6>
 800504c:	2310      	movs	r3, #16
 800504e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005052:	e1aa      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005054:	2320      	movs	r3, #32
 8005056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800505a:	e1a6      	b.n	80053aa <UART_SetConfig+0x5a6>
 800505c:	2340      	movs	r3, #64	; 0x40
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005062:	e1a2      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005064:	2380      	movs	r3, #128	; 0x80
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506a:	e19e      	b.n	80053aa <UART_SetConfig+0x5a6>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a35      	ldr	r2, [pc, #212]	; (8005148 <UART_SetConfig+0x344>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d130      	bne.n	80050d8 <UART_SetConfig+0x2d4>
 8005076:	4b31      	ldr	r3, [pc, #196]	; (800513c <UART_SetConfig+0x338>)
 8005078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	2b05      	cmp	r3, #5
 8005080:	d826      	bhi.n	80050d0 <UART_SetConfig+0x2cc>
 8005082:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <UART_SetConfig+0x284>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	080050a1 	.word	0x080050a1
 800508c:	080050a9 	.word	0x080050a9
 8005090:	080050b1 	.word	0x080050b1
 8005094:	080050b9 	.word	0x080050b9
 8005098:	080050c1 	.word	0x080050c1
 800509c:	080050c9 	.word	0x080050c9
 80050a0:	2300      	movs	r3, #0
 80050a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a6:	e180      	b.n	80053aa <UART_SetConfig+0x5a6>
 80050a8:	2304      	movs	r3, #4
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ae:	e17c      	b.n	80053aa <UART_SetConfig+0x5a6>
 80050b0:	2308      	movs	r3, #8
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b6:	e178      	b.n	80053aa <UART_SetConfig+0x5a6>
 80050b8:	2310      	movs	r3, #16
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050be:	e174      	b.n	80053aa <UART_SetConfig+0x5a6>
 80050c0:	2320      	movs	r3, #32
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c6:	e170      	b.n	80053aa <UART_SetConfig+0x5a6>
 80050c8:	2340      	movs	r3, #64	; 0x40
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ce:	e16c      	b.n	80053aa <UART_SetConfig+0x5a6>
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d6:	e168      	b.n	80053aa <UART_SetConfig+0x5a6>
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1b      	ldr	r2, [pc, #108]	; (800514c <UART_SetConfig+0x348>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d142      	bne.n	8005168 <UART_SetConfig+0x364>
 80050e2:	4b16      	ldr	r3, [pc, #88]	; (800513c <UART_SetConfig+0x338>)
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	2b05      	cmp	r3, #5
 80050ec:	d838      	bhi.n	8005160 <UART_SetConfig+0x35c>
 80050ee:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <UART_SetConfig+0x2f0>)
 80050f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f4:	0800510d 	.word	0x0800510d
 80050f8:	08005115 	.word	0x08005115
 80050fc:	0800511d 	.word	0x0800511d
 8005100:	08005125 	.word	0x08005125
 8005104:	08005151 	.word	0x08005151
 8005108:	08005159 	.word	0x08005159
 800510c:	2300      	movs	r3, #0
 800510e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005112:	e14a      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005114:	2304      	movs	r3, #4
 8005116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511a:	e146      	b.n	80053aa <UART_SetConfig+0x5a6>
 800511c:	2308      	movs	r3, #8
 800511e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005122:	e142      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005124:	2310      	movs	r3, #16
 8005126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512a:	e13e      	b.n	80053aa <UART_SetConfig+0x5a6>
 800512c:	cfff69f3 	.word	0xcfff69f3
 8005130:	58000c00 	.word	0x58000c00
 8005134:	11fff4ff 	.word	0x11fff4ff
 8005138:	40011000 	.word	0x40011000
 800513c:	58024400 	.word	0x58024400
 8005140:	40004400 	.word	0x40004400
 8005144:	40004800 	.word	0x40004800
 8005148:	40004c00 	.word	0x40004c00
 800514c:	40005000 	.word	0x40005000
 8005150:	2320      	movs	r3, #32
 8005152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005156:	e128      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005158:	2340      	movs	r3, #64	; 0x40
 800515a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515e:	e124      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005160:	2380      	movs	r3, #128	; 0x80
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005166:	e120      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4acb      	ldr	r2, [pc, #812]	; (800549c <UART_SetConfig+0x698>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d176      	bne.n	8005260 <UART_SetConfig+0x45c>
 8005172:	4bcb      	ldr	r3, [pc, #812]	; (80054a0 <UART_SetConfig+0x69c>)
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800517a:	2b28      	cmp	r3, #40	; 0x28
 800517c:	d86c      	bhi.n	8005258 <UART_SetConfig+0x454>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0x380>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	08005229 	.word	0x08005229
 8005188:	08005259 	.word	0x08005259
 800518c:	08005259 	.word	0x08005259
 8005190:	08005259 	.word	0x08005259
 8005194:	08005259 	.word	0x08005259
 8005198:	08005259 	.word	0x08005259
 800519c:	08005259 	.word	0x08005259
 80051a0:	08005259 	.word	0x08005259
 80051a4:	08005231 	.word	0x08005231
 80051a8:	08005259 	.word	0x08005259
 80051ac:	08005259 	.word	0x08005259
 80051b0:	08005259 	.word	0x08005259
 80051b4:	08005259 	.word	0x08005259
 80051b8:	08005259 	.word	0x08005259
 80051bc:	08005259 	.word	0x08005259
 80051c0:	08005259 	.word	0x08005259
 80051c4:	08005239 	.word	0x08005239
 80051c8:	08005259 	.word	0x08005259
 80051cc:	08005259 	.word	0x08005259
 80051d0:	08005259 	.word	0x08005259
 80051d4:	08005259 	.word	0x08005259
 80051d8:	08005259 	.word	0x08005259
 80051dc:	08005259 	.word	0x08005259
 80051e0:	08005259 	.word	0x08005259
 80051e4:	08005241 	.word	0x08005241
 80051e8:	08005259 	.word	0x08005259
 80051ec:	08005259 	.word	0x08005259
 80051f0:	08005259 	.word	0x08005259
 80051f4:	08005259 	.word	0x08005259
 80051f8:	08005259 	.word	0x08005259
 80051fc:	08005259 	.word	0x08005259
 8005200:	08005259 	.word	0x08005259
 8005204:	08005249 	.word	0x08005249
 8005208:	08005259 	.word	0x08005259
 800520c:	08005259 	.word	0x08005259
 8005210:	08005259 	.word	0x08005259
 8005214:	08005259 	.word	0x08005259
 8005218:	08005259 	.word	0x08005259
 800521c:	08005259 	.word	0x08005259
 8005220:	08005259 	.word	0x08005259
 8005224:	08005251 	.word	0x08005251
 8005228:	2301      	movs	r3, #1
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522e:	e0bc      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005230:	2304      	movs	r3, #4
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005236:	e0b8      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005238:	2308      	movs	r3, #8
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523e:	e0b4      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005240:	2310      	movs	r3, #16
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005246:	e0b0      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005248:	2320      	movs	r3, #32
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524e:	e0ac      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005250:	2340      	movs	r3, #64	; 0x40
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005256:	e0a8      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e0a4      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a8f      	ldr	r2, [pc, #572]	; (80054a4 <UART_SetConfig+0x6a0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d130      	bne.n	80052cc <UART_SetConfig+0x4c8>
 800526a:	4b8d      	ldr	r3, [pc, #564]	; (80054a0 <UART_SetConfig+0x69c>)
 800526c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	2b05      	cmp	r3, #5
 8005274:	d826      	bhi.n	80052c4 <UART_SetConfig+0x4c0>
 8005276:	a201      	add	r2, pc, #4	; (adr r2, 800527c <UART_SetConfig+0x478>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	08005295 	.word	0x08005295
 8005280:	0800529d 	.word	0x0800529d
 8005284:	080052a5 	.word	0x080052a5
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529a:	e086      	b.n	80053aa <UART_SetConfig+0x5a6>
 800529c:	2304      	movs	r3, #4
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a2:	e082      	b.n	80053aa <UART_SetConfig+0x5a6>
 80052a4:	2308      	movs	r3, #8
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e07e      	b.n	80053aa <UART_SetConfig+0x5a6>
 80052ac:	2310      	movs	r3, #16
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b2:	e07a      	b.n	80053aa <UART_SetConfig+0x5a6>
 80052b4:	2320      	movs	r3, #32
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ba:	e076      	b.n	80053aa <UART_SetConfig+0x5a6>
 80052bc:	2340      	movs	r3, #64	; 0x40
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c2:	e072      	b.n	80053aa <UART_SetConfig+0x5a6>
 80052c4:	2380      	movs	r3, #128	; 0x80
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ca:	e06e      	b.n	80053aa <UART_SetConfig+0x5a6>
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a75      	ldr	r2, [pc, #468]	; (80054a8 <UART_SetConfig+0x6a4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d130      	bne.n	8005338 <UART_SetConfig+0x534>
 80052d6:	4b72      	ldr	r3, [pc, #456]	; (80054a0 <UART_SetConfig+0x69c>)
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	2b05      	cmp	r3, #5
 80052e0:	d826      	bhi.n	8005330 <UART_SetConfig+0x52c>
 80052e2:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <UART_SetConfig+0x4e4>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	08005301 	.word	0x08005301
 80052ec:	08005309 	.word	0x08005309
 80052f0:	08005311 	.word	0x08005311
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005321 	.word	0x08005321
 80052fc:	08005329 	.word	0x08005329
 8005300:	2300      	movs	r3, #0
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005306:	e050      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005308:	2304      	movs	r3, #4
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530e:	e04c      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005310:	2308      	movs	r3, #8
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005316:	e048      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005318:	2310      	movs	r3, #16
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531e:	e044      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005320:	2320      	movs	r3, #32
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005326:	e040      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005328:	2340      	movs	r3, #64	; 0x40
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532e:	e03c      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005336:	e038      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a5b      	ldr	r2, [pc, #364]	; (80054ac <UART_SetConfig+0x6a8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d130      	bne.n	80053a4 <UART_SetConfig+0x5a0>
 8005342:	4b57      	ldr	r3, [pc, #348]	; (80054a0 <UART_SetConfig+0x69c>)
 8005344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b05      	cmp	r3, #5
 800534c:	d826      	bhi.n	800539c <UART_SetConfig+0x598>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <UART_SetConfig+0x550>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	0800536d 	.word	0x0800536d
 8005358:	08005375 	.word	0x08005375
 800535c:	0800537d 	.word	0x0800537d
 8005360:	08005385 	.word	0x08005385
 8005364:	0800538d 	.word	0x0800538d
 8005368:	08005395 	.word	0x08005395
 800536c:	2302      	movs	r3, #2
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005372:	e01a      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005374:	2304      	movs	r3, #4
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537a:	e016      	b.n	80053aa <UART_SetConfig+0x5a6>
 800537c:	2308      	movs	r3, #8
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005382:	e012      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005384:	2310      	movs	r3, #16
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538a:	e00e      	b.n	80053aa <UART_SetConfig+0x5a6>
 800538c:	2320      	movs	r3, #32
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005392:	e00a      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005394:	2340      	movs	r3, #64	; 0x40
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539a:	e006      	b.n	80053aa <UART_SetConfig+0x5a6>
 800539c:	2380      	movs	r3, #128	; 0x80
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053a2:	e002      	b.n	80053aa <UART_SetConfig+0x5a6>
 80053a4:	2380      	movs	r3, #128	; 0x80
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a3f      	ldr	r2, [pc, #252]	; (80054ac <UART_SetConfig+0x6a8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	f040 80f8 	bne.w	80055a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	dc46      	bgt.n	800544c <UART_SetConfig+0x648>
 80053be:	2b02      	cmp	r3, #2
 80053c0:	f2c0 8082 	blt.w	80054c8 <UART_SetConfig+0x6c4>
 80053c4:	3b02      	subs	r3, #2
 80053c6:	2b1e      	cmp	r3, #30
 80053c8:	d87e      	bhi.n	80054c8 <UART_SetConfig+0x6c4>
 80053ca:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <UART_SetConfig+0x5cc>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	08005453 	.word	0x08005453
 80053d4:	080054c9 	.word	0x080054c9
 80053d8:	0800545b 	.word	0x0800545b
 80053dc:	080054c9 	.word	0x080054c9
 80053e0:	080054c9 	.word	0x080054c9
 80053e4:	080054c9 	.word	0x080054c9
 80053e8:	0800546b 	.word	0x0800546b
 80053ec:	080054c9 	.word	0x080054c9
 80053f0:	080054c9 	.word	0x080054c9
 80053f4:	080054c9 	.word	0x080054c9
 80053f8:	080054c9 	.word	0x080054c9
 80053fc:	080054c9 	.word	0x080054c9
 8005400:	080054c9 	.word	0x080054c9
 8005404:	080054c9 	.word	0x080054c9
 8005408:	0800547b 	.word	0x0800547b
 800540c:	080054c9 	.word	0x080054c9
 8005410:	080054c9 	.word	0x080054c9
 8005414:	080054c9 	.word	0x080054c9
 8005418:	080054c9 	.word	0x080054c9
 800541c:	080054c9 	.word	0x080054c9
 8005420:	080054c9 	.word	0x080054c9
 8005424:	080054c9 	.word	0x080054c9
 8005428:	080054c9 	.word	0x080054c9
 800542c:	080054c9 	.word	0x080054c9
 8005430:	080054c9 	.word	0x080054c9
 8005434:	080054c9 	.word	0x080054c9
 8005438:	080054c9 	.word	0x080054c9
 800543c:	080054c9 	.word	0x080054c9
 8005440:	080054c9 	.word	0x080054c9
 8005444:	080054c9 	.word	0x080054c9
 8005448:	080054bb 	.word	0x080054bb
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d037      	beq.n	80054c0 <UART_SetConfig+0x6bc>
 8005450:	e03a      	b.n	80054c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005452:	f7fd ffd1 	bl	80033f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005456:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005458:	e03c      	b.n	80054d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800545a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800545e:	4618      	mov	r0, r3
 8005460:	f7fd ffe0 	bl	8003424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005468:	e034      	b.n	80054d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800546a:	f107 0318 	add.w	r3, r7, #24
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe f92c 	bl	80036cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005478:	e02c      	b.n	80054d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <UART_SetConfig+0x69c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d016      	beq.n	80054b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <UART_SetConfig+0x69c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	08db      	lsrs	r3, r3, #3
 800548c:	f003 0303 	and.w	r3, r3, #3
 8005490:	4a07      	ldr	r2, [pc, #28]	; (80054b0 <UART_SetConfig+0x6ac>)
 8005492:	fa22 f303 	lsr.w	r3, r2, r3
 8005496:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005498:	e01c      	b.n	80054d4 <UART_SetConfig+0x6d0>
 800549a:	bf00      	nop
 800549c:	40011400 	.word	0x40011400
 80054a0:	58024400 	.word	0x58024400
 80054a4:	40007800 	.word	0x40007800
 80054a8:	40007c00 	.word	0x40007c00
 80054ac:	58000c00 	.word	0x58000c00
 80054b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80054b4:	4b9d      	ldr	r3, [pc, #628]	; (800572c <UART_SetConfig+0x928>)
 80054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054b8:	e00c      	b.n	80054d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054ba:	4b9d      	ldr	r3, [pc, #628]	; (8005730 <UART_SetConfig+0x92c>)
 80054bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054be:	e009      	b.n	80054d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054c6:	e005      	b.n	80054d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80054d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 81de 	beq.w	8005898 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	4a94      	ldr	r2, [pc, #592]	; (8005734 <UART_SetConfig+0x930>)
 80054e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054e6:	461a      	mov	r2, r3
 80054e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80054ee:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	4613      	mov	r3, r2
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	4413      	add	r3, r2
 80054fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d305      	bcc.n	800550c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005508:	429a      	cmp	r2, r3
 800550a:	d903      	bls.n	8005514 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005512:	e1c1      	b.n	8005898 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005516:	2200      	movs	r2, #0
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	60fa      	str	r2, [r7, #12]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	4a84      	ldr	r2, [pc, #528]	; (8005734 <UART_SetConfig+0x930>)
 8005522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005526:	b29b      	uxth	r3, r3
 8005528:	2200      	movs	r2, #0
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005532:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005536:	f7fa fecf 	bl	80002d8 <__aeabi_uldivmod>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4610      	mov	r0, r2
 8005540:	4619      	mov	r1, r3
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	020b      	lsls	r3, r1, #8
 800554c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005550:	0202      	lsls	r2, r0, #8
 8005552:	6979      	ldr	r1, [r7, #20]
 8005554:	6849      	ldr	r1, [r1, #4]
 8005556:	0849      	lsrs	r1, r1, #1
 8005558:	2000      	movs	r0, #0
 800555a:	460c      	mov	r4, r1
 800555c:	4605      	mov	r5, r0
 800555e:	eb12 0804 	adds.w	r8, r2, r4
 8005562:	eb43 0905 	adc.w	r9, r3, r5
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	469a      	mov	sl, r3
 800556e:	4693      	mov	fp, r2
 8005570:	4652      	mov	r2, sl
 8005572:	465b      	mov	r3, fp
 8005574:	4640      	mov	r0, r8
 8005576:	4649      	mov	r1, r9
 8005578:	f7fa feae 	bl	80002d8 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4613      	mov	r3, r2
 8005582:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558a:	d308      	bcc.n	800559e <UART_SetConfig+0x79a>
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005592:	d204      	bcs.n	800559e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800559a:	60da      	str	r2, [r3, #12]
 800559c:	e17c      	b.n	8005898 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80055a4:	e178      	b.n	8005898 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ae:	f040 80c5 	bne.w	800573c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80055b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	dc48      	bgt.n	800564c <UART_SetConfig+0x848>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	db7b      	blt.n	80056b6 <UART_SetConfig+0x8b2>
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d879      	bhi.n	80056b6 <UART_SetConfig+0x8b2>
 80055c2:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <UART_SetConfig+0x7c4>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	08005653 	.word	0x08005653
 80055cc:	0800565b 	.word	0x0800565b
 80055d0:	080056b7 	.word	0x080056b7
 80055d4:	080056b7 	.word	0x080056b7
 80055d8:	08005663 	.word	0x08005663
 80055dc:	080056b7 	.word	0x080056b7
 80055e0:	080056b7 	.word	0x080056b7
 80055e4:	080056b7 	.word	0x080056b7
 80055e8:	08005673 	.word	0x08005673
 80055ec:	080056b7 	.word	0x080056b7
 80055f0:	080056b7 	.word	0x080056b7
 80055f4:	080056b7 	.word	0x080056b7
 80055f8:	080056b7 	.word	0x080056b7
 80055fc:	080056b7 	.word	0x080056b7
 8005600:	080056b7 	.word	0x080056b7
 8005604:	080056b7 	.word	0x080056b7
 8005608:	08005683 	.word	0x08005683
 800560c:	080056b7 	.word	0x080056b7
 8005610:	080056b7 	.word	0x080056b7
 8005614:	080056b7 	.word	0x080056b7
 8005618:	080056b7 	.word	0x080056b7
 800561c:	080056b7 	.word	0x080056b7
 8005620:	080056b7 	.word	0x080056b7
 8005624:	080056b7 	.word	0x080056b7
 8005628:	080056b7 	.word	0x080056b7
 800562c:	080056b7 	.word	0x080056b7
 8005630:	080056b7 	.word	0x080056b7
 8005634:	080056b7 	.word	0x080056b7
 8005638:	080056b7 	.word	0x080056b7
 800563c:	080056b7 	.word	0x080056b7
 8005640:	080056b7 	.word	0x080056b7
 8005644:	080056b7 	.word	0x080056b7
 8005648:	080056a9 	.word	0x080056a9
 800564c:	2b40      	cmp	r3, #64	; 0x40
 800564e:	d02e      	beq.n	80056ae <UART_SetConfig+0x8aa>
 8005650:	e031      	b.n	80056b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005652:	f7fc ff5f 	bl	8002514 <HAL_RCC_GetPCLK1Freq>
 8005656:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005658:	e033      	b.n	80056c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800565a:	f7fc ff71 	bl	8002540 <HAL_RCC_GetPCLK2Freq>
 800565e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005660:	e02f      	b.n	80056c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005666:	4618      	mov	r0, r3
 8005668:	f7fd fedc 	bl	8003424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005670:	e027      	b.n	80056c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005672:	f107 0318 	add.w	r3, r7, #24
 8005676:	4618      	mov	r0, r3
 8005678:	f7fe f828 	bl	80036cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005680:	e01f      	b.n	80056c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005682:	4b2d      	ldr	r3, [pc, #180]	; (8005738 <UART_SetConfig+0x934>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800568e:	4b2a      	ldr	r3, [pc, #168]	; (8005738 <UART_SetConfig+0x934>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	08db      	lsrs	r3, r3, #3
 8005694:	f003 0303 	and.w	r3, r3, #3
 8005698:	4a24      	ldr	r2, [pc, #144]	; (800572c <UART_SetConfig+0x928>)
 800569a:	fa22 f303 	lsr.w	r3, r2, r3
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056a0:	e00f      	b.n	80056c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80056a2:	4b22      	ldr	r3, [pc, #136]	; (800572c <UART_SetConfig+0x928>)
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056a6:	e00c      	b.n	80056c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056a8:	4b21      	ldr	r3, [pc, #132]	; (8005730 <UART_SetConfig+0x92c>)
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ac:	e009      	b.n	80056c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056b4:	e005      	b.n	80056c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80056c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 80e7 	beq.w	8005898 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	4a19      	ldr	r2, [pc, #100]	; (8005734 <UART_SetConfig+0x930>)
 80056d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056d4:	461a      	mov	r2, r3
 80056d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056dc:	005a      	lsls	r2, r3, #1
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	085b      	lsrs	r3, r3, #1
 80056e4:	441a      	add	r2, r3
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	2b0f      	cmp	r3, #15
 80056f4:	d916      	bls.n	8005724 <UART_SetConfig+0x920>
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fc:	d212      	bcs.n	8005724 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	b29b      	uxth	r3, r3
 8005702:	f023 030f 	bic.w	r3, r3, #15
 8005706:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570a:	085b      	lsrs	r3, r3, #1
 800570c:	b29b      	uxth	r3, r3
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	b29a      	uxth	r2, r3
 8005714:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005716:	4313      	orrs	r3, r2
 8005718:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005720:	60da      	str	r2, [r3, #12]
 8005722:	e0b9      	b.n	8005898 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800572a:	e0b5      	b.n	8005898 <UART_SetConfig+0xa94>
 800572c:	03d09000 	.word	0x03d09000
 8005730:	003d0900 	.word	0x003d0900
 8005734:	08005ec4 	.word	0x08005ec4
 8005738:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800573c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005740:	2b20      	cmp	r3, #32
 8005742:	dc49      	bgt.n	80057d8 <UART_SetConfig+0x9d4>
 8005744:	2b00      	cmp	r3, #0
 8005746:	db7c      	blt.n	8005842 <UART_SetConfig+0xa3e>
 8005748:	2b20      	cmp	r3, #32
 800574a:	d87a      	bhi.n	8005842 <UART_SetConfig+0xa3e>
 800574c:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <UART_SetConfig+0x950>)
 800574e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005752:	bf00      	nop
 8005754:	080057df 	.word	0x080057df
 8005758:	080057e7 	.word	0x080057e7
 800575c:	08005843 	.word	0x08005843
 8005760:	08005843 	.word	0x08005843
 8005764:	080057ef 	.word	0x080057ef
 8005768:	08005843 	.word	0x08005843
 800576c:	08005843 	.word	0x08005843
 8005770:	08005843 	.word	0x08005843
 8005774:	080057ff 	.word	0x080057ff
 8005778:	08005843 	.word	0x08005843
 800577c:	08005843 	.word	0x08005843
 8005780:	08005843 	.word	0x08005843
 8005784:	08005843 	.word	0x08005843
 8005788:	08005843 	.word	0x08005843
 800578c:	08005843 	.word	0x08005843
 8005790:	08005843 	.word	0x08005843
 8005794:	0800580f 	.word	0x0800580f
 8005798:	08005843 	.word	0x08005843
 800579c:	08005843 	.word	0x08005843
 80057a0:	08005843 	.word	0x08005843
 80057a4:	08005843 	.word	0x08005843
 80057a8:	08005843 	.word	0x08005843
 80057ac:	08005843 	.word	0x08005843
 80057b0:	08005843 	.word	0x08005843
 80057b4:	08005843 	.word	0x08005843
 80057b8:	08005843 	.word	0x08005843
 80057bc:	08005843 	.word	0x08005843
 80057c0:	08005843 	.word	0x08005843
 80057c4:	08005843 	.word	0x08005843
 80057c8:	08005843 	.word	0x08005843
 80057cc:	08005843 	.word	0x08005843
 80057d0:	08005843 	.word	0x08005843
 80057d4:	08005835 	.word	0x08005835
 80057d8:	2b40      	cmp	r3, #64	; 0x40
 80057da:	d02e      	beq.n	800583a <UART_SetConfig+0xa36>
 80057dc:	e031      	b.n	8005842 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057de:	f7fc fe99 	bl	8002514 <HAL_RCC_GetPCLK1Freq>
 80057e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057e4:	e033      	b.n	800584e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e6:	f7fc feab 	bl	8002540 <HAL_RCC_GetPCLK2Freq>
 80057ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057ec:	e02f      	b.n	800584e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fd fe16 	bl	8003424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057fc:	e027      	b.n	800584e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057fe:	f107 0318 	add.w	r3, r7, #24
 8005802:	4618      	mov	r0, r3
 8005804:	f7fd ff62 	bl	80036cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800580c:	e01f      	b.n	800584e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800580e:	4b2d      	ldr	r3, [pc, #180]	; (80058c4 <UART_SetConfig+0xac0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d009      	beq.n	800582e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800581a:	4b2a      	ldr	r3, [pc, #168]	; (80058c4 <UART_SetConfig+0xac0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	08db      	lsrs	r3, r3, #3
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	4a28      	ldr	r2, [pc, #160]	; (80058c8 <UART_SetConfig+0xac4>)
 8005826:	fa22 f303 	lsr.w	r3, r2, r3
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800582c:	e00f      	b.n	800584e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800582e:	4b26      	ldr	r3, [pc, #152]	; (80058c8 <UART_SetConfig+0xac4>)
 8005830:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005832:	e00c      	b.n	800584e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005834:	4b25      	ldr	r3, [pc, #148]	; (80058cc <UART_SetConfig+0xac8>)
 8005836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005838:	e009      	b.n	800584e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005840:	e005      	b.n	800584e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800584c:	bf00      	nop
    }

    if (pclk != 0U)
 800584e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d021      	beq.n	8005898 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	4a1d      	ldr	r2, [pc, #116]	; (80058d0 <UART_SetConfig+0xacc>)
 800585a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800585e:	461a      	mov	r2, r3
 8005860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005862:	fbb3 f2f2 	udiv	r2, r3, r2
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	441a      	add	r2, r3
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	fbb2 f3f3 	udiv	r3, r2, r3
 8005876:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	2b0f      	cmp	r3, #15
 800587c:	d909      	bls.n	8005892 <UART_SetConfig+0xa8e>
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005884:	d205      	bcs.n	8005892 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005888:	b29a      	uxth	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60da      	str	r2, [r3, #12]
 8005890:	e002      	b.n	8005898 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2201      	movs	r2, #1
 800589c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2200      	movs	r2, #0
 80058ac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2200      	movs	r2, #0
 80058b2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80058b4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3748      	adds	r7, #72	; 0x48
 80058bc:	46bd      	mov	sp, r7
 80058be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058c2:	bf00      	nop
 80058c4:	58024400 	.word	0x58024400
 80058c8:	03d09000 	.word	0x03d09000
 80058cc:	003d0900 	.word	0x003d0900
 80058d0:	08005ec4 	.word	0x08005ec4

080058d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d01a      	beq.n	80059ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059d2:	d10a      	bne.n	80059ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	605a      	str	r2, [r3, #4]
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a28:	f7fb fa74 	bl	8000f14 <HAL_GetTick>
 8005a2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d10e      	bne.n	8005a5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f82f 	bl	8005aae <UART_WaitOnFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e025      	b.n	8005aa6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d10e      	bne.n	8005a86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f819 	bl	8005aae <UART_WaitOnFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e00f      	b.n	8005aa6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b09c      	sub	sp, #112	; 0x70
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	4613      	mov	r3, r2
 8005abc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005abe:	e0a9      	b.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac6:	f000 80a5 	beq.w	8005c14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aca:	f7fb fa23 	bl	8000f14 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d302      	bcc.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d140      	bne.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005af4:	667b      	str	r3, [r7, #100]	; 0x64
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005afe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e6      	bne.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3308      	adds	r3, #8
 8005b18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	f023 0301 	bic.w	r3, r3, #1
 8005b28:	663b      	str	r3, [r7, #96]	; 0x60
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3308      	adds	r3, #8
 8005b30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b32:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e5      	bne.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e069      	b.n	8005c36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d051      	beq.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b7e:	d149      	bne.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8005baa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e6      	bne.n	8005b8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	613b      	str	r3, [r7, #16]
   return(result);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f023 0301 	bic.w	r3, r3, #1
 8005bd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3308      	adds	r3, #8
 8005bda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bdc:	623a      	str	r2, [r7, #32]
 8005bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	69f9      	ldr	r1, [r7, #28]
 8005be2:	6a3a      	ldr	r2, [r7, #32]
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e5      	bne.n	8005bbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e010      	b.n	8005c36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69da      	ldr	r2, [r3, #28]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	bf0c      	ite	eq
 8005c24:	2301      	moveq	r3, #1
 8005c26:	2300      	movne	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	f43f af46 	beq.w	8005ac0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3770      	adds	r7, #112	; 0x70
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b085      	sub	sp, #20
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e027      	b.n	8005ca4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2224      	movs	r2, #36	; 0x24
 8005c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e02d      	b.n	8005d24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2224      	movs	r2, #36	; 0x24
 8005cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f84f 	bl	8005da8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e02d      	b.n	8005da0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2224      	movs	r2, #36	; 0x24
 8005d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0201 	bic.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f811 	bl	8005da8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d108      	bne.n	8005dca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005dc8:	e031      	b.n	8005e2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005dca:	2310      	movs	r3, #16
 8005dcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dce:	2310      	movs	r3, #16
 8005dd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	0e5b      	lsrs	r3, r3, #25
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	0f5b      	lsrs	r3, r3, #29
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005df2:	7bbb      	ldrb	r3, [r7, #14]
 8005df4:	7b3a      	ldrb	r2, [r7, #12]
 8005df6:	4911      	ldr	r1, [pc, #68]	; (8005e3c <UARTEx_SetNbDataToProcess+0x94>)
 8005df8:	5c8a      	ldrb	r2, [r1, r2]
 8005dfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005dfe:	7b3a      	ldrb	r2, [r7, #12]
 8005e00:	490f      	ldr	r1, [pc, #60]	; (8005e40 <UARTEx_SetNbDataToProcess+0x98>)
 8005e02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e04:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	7b7a      	ldrb	r2, [r7, #13]
 8005e14:	4909      	ldr	r1, [pc, #36]	; (8005e3c <UARTEx_SetNbDataToProcess+0x94>)
 8005e16:	5c8a      	ldrb	r2, [r1, r2]
 8005e18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e1c:	7b7a      	ldrb	r2, [r7, #13]
 8005e1e:	4908      	ldr	r1, [pc, #32]	; (8005e40 <UARTEx_SetNbDataToProcess+0x98>)
 8005e20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e22:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e2e:	bf00      	nop
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	08005edc 	.word	0x08005edc
 8005e40:	08005ee4 	.word	0x08005ee4

08005e44 <__libc_init_array>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	4d0d      	ldr	r5, [pc, #52]	; (8005e7c <__libc_init_array+0x38>)
 8005e48:	4c0d      	ldr	r4, [pc, #52]	; (8005e80 <__libc_init_array+0x3c>)
 8005e4a:	1b64      	subs	r4, r4, r5
 8005e4c:	10a4      	asrs	r4, r4, #2
 8005e4e:	2600      	movs	r6, #0
 8005e50:	42a6      	cmp	r6, r4
 8005e52:	d109      	bne.n	8005e68 <__libc_init_array+0x24>
 8005e54:	4d0b      	ldr	r5, [pc, #44]	; (8005e84 <__libc_init_array+0x40>)
 8005e56:	4c0c      	ldr	r4, [pc, #48]	; (8005e88 <__libc_init_array+0x44>)
 8005e58:	f000 f820 	bl	8005e9c <_init>
 8005e5c:	1b64      	subs	r4, r4, r5
 8005e5e:	10a4      	asrs	r4, r4, #2
 8005e60:	2600      	movs	r6, #0
 8005e62:	42a6      	cmp	r6, r4
 8005e64:	d105      	bne.n	8005e72 <__libc_init_array+0x2e>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6c:	4798      	blx	r3
 8005e6e:	3601      	adds	r6, #1
 8005e70:	e7ee      	b.n	8005e50 <__libc_init_array+0xc>
 8005e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e76:	4798      	blx	r3
 8005e78:	3601      	adds	r6, #1
 8005e7a:	e7f2      	b.n	8005e62 <__libc_init_array+0x1e>
 8005e7c:	08005ef4 	.word	0x08005ef4
 8005e80:	08005ef4 	.word	0x08005ef4
 8005e84:	08005ef4 	.word	0x08005ef4
 8005e88:	08005ef8 	.word	0x08005ef8

08005e8c <memset>:
 8005e8c:	4402      	add	r2, r0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d100      	bne.n	8005e96 <memset+0xa>
 8005e94:	4770      	bx	lr
 8005e96:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9a:	e7f9      	b.n	8005e90 <memset+0x4>

08005e9c <_init>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	bf00      	nop
 8005ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea2:	bc08      	pop	{r3}
 8005ea4:	469e      	mov	lr, r3
 8005ea6:	4770      	bx	lr

08005ea8 <_fini>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	bf00      	nop
 8005eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eae:	bc08      	pop	{r3}
 8005eb0:	469e      	mov	lr, r3
 8005eb2:	4770      	bx	lr
