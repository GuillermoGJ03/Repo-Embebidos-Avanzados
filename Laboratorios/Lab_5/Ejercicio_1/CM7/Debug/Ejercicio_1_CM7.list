
Ejercicio_1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3a4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028b8  0800e648  0800e648  0001e648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f00  08010f00  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08010f00  08010f00  00020f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f08  08010f08  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f08  08010f08  00020f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f0c  08010f0c  00020f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  08010f10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  240001e8  080110f8  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000720  080110f8  00030720  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6e8  00000000  00000000  00030216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0c  00000000  00000000  0004a8fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0004d510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  0004e9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b4cf  00000000  00000000  0004fd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a424  00000000  00000000  0008b1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00186a88  00000000  00000000  000a561b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022c0a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007168  00000000  00000000  0022c0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e62c 	.word	0x0800e62c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800e62c 	.word	0x0800e62c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 baf8 	b.w	8000d10 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f98a 	bl	8000a40 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__mulsc3>:
 8000738:	ee60 6a01 	vmul.f32	s13, s0, s2
 800073c:	ee20 6aa1 	vmul.f32	s12, s1, s3
 8000740:	ee20 5a21 	vmul.f32	s10, s0, s3
 8000744:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8000748:	ee61 5a20 	vmul.f32	s11, s2, s1
 800074c:	eef4 7a67 	vcmp.f32	s15, s15
 8000750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000754:	ee35 7a25 	vadd.f32	s14, s10, s11
 8000758:	d604      	bvs.n	8000764 <__mulsc3+0x2c>
 800075a:	eeb0 0a67 	vmov.f32	s0, s15
 800075e:	eef0 0a47 	vmov.f32	s1, s14
 8000762:	4770      	bx	lr
 8000764:	eeb4 7a47 	vcmp.f32	s14, s14
 8000768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076c:	d7f5      	bvc.n	800075a <__mulsc3+0x22>
 800076e:	eddf 4a93 	vldr	s9, [pc, #588]	; 80009bc <__mulsc3+0x284>
 8000772:	eeb0 4ac0 	vabs.f32	s8, s0
 8000776:	eeb4 4a64 	vcmp.f32	s8, s9
 800077a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077e:	bfcc      	ite	gt
 8000780:	2301      	movgt	r3, #1
 8000782:	2300      	movle	r3, #0
 8000784:	eeb0 4ae0 	vabs.f32	s8, s1
 8000788:	f300 809d 	bgt.w	80008c6 <__mulsc3+0x18e>
 800078c:	eeb4 4a64 	vcmp.f32	s8, s9
 8000790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000794:	f300 8097 	bgt.w	80008c6 <__mulsc3+0x18e>
 8000798:	2300      	movs	r3, #0
 800079a:	eddf 4a88 	vldr	s9, [pc, #544]	; 80009bc <__mulsc3+0x284>
 800079e:	eeb0 4ac1 	vabs.f32	s8, s2
 80007a2:	eeb4 4a64 	vcmp.f32	s8, s9
 80007a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007aa:	eef0 3ae1 	vabs.f32	s7, s3
 80007ae:	dc48      	bgt.n	8000842 <__mulsc3+0x10a>
 80007b0:	eef4 3a64 	vcmp.f32	s7, s9
 80007b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b8:	dc43      	bgt.n	8000842 <__mulsc3+0x10a>
 80007ba:	bb9b      	cbnz	r3, 8000824 <__mulsc3+0xec>
 80007bc:	eef0 6ae6 	vabs.f32	s13, s13
 80007c0:	eef4 6a64 	vcmp.f32	s13, s9
 80007c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c8:	dc14      	bgt.n	80007f4 <__mulsc3+0xbc>
 80007ca:	eeb0 6ac6 	vabs.f32	s12, s12
 80007ce:	eeb4 6a64 	vcmp.f32	s12, s9
 80007d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d6:	dc0d      	bgt.n	80007f4 <__mulsc3+0xbc>
 80007d8:	eeb0 5ac5 	vabs.f32	s10, s10
 80007dc:	eeb4 5a64 	vcmp.f32	s10, s9
 80007e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e4:	dc06      	bgt.n	80007f4 <__mulsc3+0xbc>
 80007e6:	eef0 5ae5 	vabs.f32	s11, s11
 80007ea:	eef4 5a64 	vcmp.f32	s11, s9
 80007ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f2:	ddb2      	ble.n	800075a <__mulsc3+0x22>
 80007f4:	eeb4 0a40 	vcmp.f32	s0, s0
 80007f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fc:	f180 80d3 	bvs.w	80009a6 <__mulsc3+0x26e>
 8000800:	eef4 0a60 	vcmp.f32	s1, s1
 8000804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000808:	f180 80c3 	bvs.w	8000992 <__mulsc3+0x25a>
 800080c:	eeb4 1a41 	vcmp.f32	s2, s2
 8000810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000814:	f180 80b3 	bvs.w	800097e <__mulsc3+0x246>
 8000818:	eef4 1a61 	vcmp.f32	s3, s3
 800081c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000820:	f180 80a3 	bvs.w	800096a <__mulsc3+0x232>
 8000824:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8000828:	ee60 0a81 	vmul.f32	s1, s1, s2
 800082c:	eee0 7a01 	vfma.f32	s15, s0, s2
 8000830:	eee0 0a21 	vfma.f32	s1, s0, s3
 8000834:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80009c0 <__mulsc3+0x288>
 8000838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800083c:	ee20 7a87 	vmul.f32	s14, s1, s14
 8000840:	e78b      	b.n	800075a <__mulsc3+0x22>
 8000842:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80009bc <__mulsc3+0x284>
 8000846:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80009bc <__mulsc3+0x284>
 800084a:	eeb4 4a67 	vcmp.f32	s8, s15
 800084e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000852:	bfcc      	ite	gt
 8000854:	2301      	movgt	r3, #1
 8000856:	2300      	movle	r3, #0
 8000858:	ee07 3a90 	vmov	s15, r3
 800085c:	ee11 3a10 	vmov	r3, s2
 8000860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000864:	2b00      	cmp	r3, #0
 8000866:	eef0 7ae7 	vabs.f32	s15, s15
 800086a:	eef4 3a47 	vcmp.f32	s7, s14
 800086e:	bfb8      	it	lt
 8000870:	eef1 7a67 	vneglt.f32	s15, s15
 8000874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000878:	bfcc      	ite	gt
 800087a:	2301      	movgt	r3, #1
 800087c:	2300      	movle	r3, #0
 800087e:	eeb0 1a67 	vmov.f32	s2, s15
 8000882:	ee07 3a90 	vmov	s15, r3
 8000886:	ee11 3a90 	vmov	r3, s3
 800088a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800088e:	2b00      	cmp	r3, #0
 8000890:	eef0 7ae7 	vabs.f32	s15, s15
 8000894:	eeb4 0a40 	vcmp.f32	s0, s0
 8000898:	bfb8      	it	lt
 800089a:	eef1 7a67 	vneglt.f32	s15, s15
 800089e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a2:	eef0 1a67 	vmov.f32	s3, s15
 80008a6:	d64c      	bvs.n	8000942 <__mulsc3+0x20a>
 80008a8:	eef4 0a60 	vcmp.f32	s1, s1
 80008ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b0:	d7b8      	bvc.n	8000824 <__mulsc3+0xec>
 80008b2:	ee10 3a90 	vmov	r3, s1
 80008b6:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80009c4 <__mulsc3+0x28c>
 80008ba:	eddf 7a43 	vldr	s15, [pc, #268]	; 80009c8 <__mulsc3+0x290>
 80008be:	2b00      	cmp	r3, #0
 80008c0:	fe67 0a27 	vselge.f32	s1, s14, s15
 80008c4:	e7ae      	b.n	8000824 <__mulsc3+0xec>
 80008c6:	ee04 3a90 	vmov	s9, r3
 80008ca:	eddf 3a3c 	vldr	s7, [pc, #240]	; 80009bc <__mulsc3+0x284>
 80008ce:	ee10 3a10 	vmov	r3, s0
 80008d2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	eef0 4ae4 	vabs.f32	s9, s9
 80008dc:	eeb4 4a63 	vcmp.f32	s8, s7
 80008e0:	bfb8      	it	lt
 80008e2:	eef1 4a64 	vneglt.f32	s9, s9
 80008e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ea:	bfcc      	ite	gt
 80008ec:	2301      	movgt	r3, #1
 80008ee:	2300      	movle	r3, #0
 80008f0:	eeb0 0a64 	vmov.f32	s0, s9
 80008f4:	ee04 3a90 	vmov	s9, r3
 80008f8:	ee10 3a90 	vmov	r3, s1
 80008fc:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000900:	2b00      	cmp	r3, #0
 8000902:	eef0 4ae4 	vabs.f32	s9, s9
 8000906:	eeb4 1a41 	vcmp.f32	s2, s2
 800090a:	bfb8      	it	lt
 800090c:	eef1 4a64 	vneglt.f32	s9, s9
 8000910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000914:	eef0 0a64 	vmov.f32	s1, s9
 8000918:	d61d      	bvs.n	8000956 <__mulsc3+0x21e>
 800091a:	eef4 1a61 	vcmp.f32	s3, s3
 800091e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000922:	bf78      	it	vc
 8000924:	2301      	movvc	r3, #1
 8000926:	f5ff af38 	bvc.w	800079a <__mulsc3+0x62>
 800092a:	ee11 3a90 	vmov	r3, s3
 800092e:	ed9f 4a25 	vldr	s8, [pc, #148]	; 80009c4 <__mulsc3+0x28c>
 8000932:	eddf 4a25 	vldr	s9, [pc, #148]	; 80009c8 <__mulsc3+0x290>
 8000936:	2b00      	cmp	r3, #0
 8000938:	f04f 0301 	mov.w	r3, #1
 800093c:	fe64 1a24 	vselge.f32	s3, s8, s9
 8000940:	e72b      	b.n	800079a <__mulsc3+0x62>
 8000942:	ee10 3a10 	vmov	r3, s0
 8000946:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80009c4 <__mulsc3+0x28c>
 800094a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80009c8 <__mulsc3+0x290>
 800094e:	2b00      	cmp	r3, #0
 8000950:	fe27 0a27 	vselge.f32	s0, s14, s15
 8000954:	e7a8      	b.n	80008a8 <__mulsc3+0x170>
 8000956:	ee11 3a10 	vmov	r3, s2
 800095a:	ed9f 4a1a 	vldr	s8, [pc, #104]	; 80009c4 <__mulsc3+0x28c>
 800095e:	eddf 4a1a 	vldr	s9, [pc, #104]	; 80009c8 <__mulsc3+0x290>
 8000962:	2b00      	cmp	r3, #0
 8000964:	fe24 1a24 	vselge.f32	s2, s8, s9
 8000968:	e7d7      	b.n	800091a <__mulsc3+0x1e2>
 800096a:	ee11 3a90 	vmov	r3, s3
 800096e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80009c4 <__mulsc3+0x28c>
 8000972:	eddf 7a15 	vldr	s15, [pc, #84]	; 80009c8 <__mulsc3+0x290>
 8000976:	2b00      	cmp	r3, #0
 8000978:	fe67 1a27 	vselge.f32	s3, s14, s15
 800097c:	e752      	b.n	8000824 <__mulsc3+0xec>
 800097e:	ee11 3a10 	vmov	r3, s2
 8000982:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80009c4 <__mulsc3+0x28c>
 8000986:	eddf 7a10 	vldr	s15, [pc, #64]	; 80009c8 <__mulsc3+0x290>
 800098a:	2b00      	cmp	r3, #0
 800098c:	fe27 1a27 	vselge.f32	s2, s14, s15
 8000990:	e742      	b.n	8000818 <__mulsc3+0xe0>
 8000992:	ee10 3a90 	vmov	r3, s1
 8000996:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80009c4 <__mulsc3+0x28c>
 800099a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80009c8 <__mulsc3+0x290>
 800099e:	2b00      	cmp	r3, #0
 80009a0:	fe67 0a27 	vselge.f32	s1, s14, s15
 80009a4:	e732      	b.n	800080c <__mulsc3+0xd4>
 80009a6:	ee10 3a10 	vmov	r3, s0
 80009aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80009c4 <__mulsc3+0x28c>
 80009ae:	eddf 7a06 	vldr	s15, [pc, #24]	; 80009c8 <__mulsc3+0x290>
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	fe27 0a27 	vselge.f32	s0, s14, s15
 80009b8:	e722      	b.n	8000800 <__mulsc3+0xc8>
 80009ba:	bf00      	nop
 80009bc:	7f7fffff 	.word	0x7f7fffff
 80009c0:	7f800000 	.word	0x7f800000
 80009c4:	00000000 	.word	0x00000000
 80009c8:	80000000 	.word	0x80000000

080009cc <__aeabi_d2lz>:
 80009cc:	b508      	push	{r3, lr}
 80009ce:	4602      	mov	r2, r0
 80009d0:	460b      	mov	r3, r1
 80009d2:	ec43 2b17 	vmov	d7, r2, r3
 80009d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80009da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009de:	d403      	bmi.n	80009e8 <__aeabi_d2lz+0x1c>
 80009e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80009e4:	f000 b80c 	b.w	8000a00 <__aeabi_d2ulz>
 80009e8:	eeb1 7b47 	vneg.f64	d7, d7
 80009ec:	ec51 0b17 	vmov	r0, r1, d7
 80009f0:	f000 f806 	bl	8000a00 <__aeabi_d2ulz>
 80009f4:	4240      	negs	r0, r0
 80009f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009fa:	bd08      	pop	{r3, pc}
 80009fc:	0000      	movs	r0, r0
	...

08000a00 <__aeabi_d2ulz>:
 8000a00:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000a30 <__aeabi_d2ulz+0x30>
 8000a04:	ec41 0b17 	vmov	d7, r0, r1
 8000a08:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000a38 <__aeabi_d2ulz+0x38>
 8000a0c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a10:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000a14:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000a18:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000a1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a20:	ee16 1a10 	vmov	r1, s12
 8000a24:	ee17 0a90 	vmov	r0, s15
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	f3af 8000 	nop.w
 8000a30:	00000000 	.word	0x00000000
 8000a34:	3df00000 	.word	0x3df00000
 8000a38:	00000000 	.word	0x00000000
 8000a3c:	41f00000 	.word	0x41f00000

08000a40 <__udivmoddi4>:
 8000a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a44:	9d08      	ldr	r5, [sp, #32]
 8000a46:	4604      	mov	r4, r0
 8000a48:	468e      	mov	lr, r1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d14d      	bne.n	8000aea <__udivmoddi4+0xaa>
 8000a4e:	428a      	cmp	r2, r1
 8000a50:	4694      	mov	ip, r2
 8000a52:	d969      	bls.n	8000b28 <__udivmoddi4+0xe8>
 8000a54:	fab2 f282 	clz	r2, r2
 8000a58:	b152      	cbz	r2, 8000a70 <__udivmoddi4+0x30>
 8000a5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5e:	f1c2 0120 	rsb	r1, r2, #32
 8000a62:	fa20 f101 	lsr.w	r1, r0, r1
 8000a66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000a6e:	4094      	lsls	r4, r2
 8000a70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a74:	0c21      	lsrs	r1, r4, #16
 8000a76:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7a:	fa1f f78c 	uxth.w	r7, ip
 8000a7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000a82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a86:	fb06 f107 	mul.w	r1, r6, r7
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	d90a      	bls.n	8000aa4 <__udivmoddi4+0x64>
 8000a8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a96:	f080 811f 	bcs.w	8000cd8 <__udivmoddi4+0x298>
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	f240 811c 	bls.w	8000cd8 <__udivmoddi4+0x298>
 8000aa0:	3e02      	subs	r6, #2
 8000aa2:	4463      	add	r3, ip
 8000aa4:	1a5b      	subs	r3, r3, r1
 8000aa6:	b2a4      	uxth	r4, r4
 8000aa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aac:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab4:	fb00 f707 	mul.w	r7, r0, r7
 8000ab8:	42a7      	cmp	r7, r4
 8000aba:	d90a      	bls.n	8000ad2 <__udivmoddi4+0x92>
 8000abc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac4:	f080 810a 	bcs.w	8000cdc <__udivmoddi4+0x29c>
 8000ac8:	42a7      	cmp	r7, r4
 8000aca:	f240 8107 	bls.w	8000cdc <__udivmoddi4+0x29c>
 8000ace:	4464      	add	r4, ip
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad6:	1be4      	subs	r4, r4, r7
 8000ad8:	2600      	movs	r6, #0
 8000ada:	b11d      	cbz	r5, 8000ae4 <__udivmoddi4+0xa4>
 8000adc:	40d4      	lsrs	r4, r2
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae4:	4631      	mov	r1, r6
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0xc2>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	f000 80ef 	beq.w	8000cd2 <__udivmoddi4+0x292>
 8000af4:	2600      	movs	r6, #0
 8000af6:	e9c5 0100 	strd	r0, r1, [r5]
 8000afa:	4630      	mov	r0, r6
 8000afc:	4631      	mov	r1, r6
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f683 	clz	r6, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d14a      	bne.n	8000ba0 <__udivmoddi4+0x160>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0xd4>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80f9 	bhi.w	8000d06 <__udivmoddi4+0x2c6>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	469e      	mov	lr, r3
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d0e0      	beq.n	8000ae4 <__udivmoddi4+0xa4>
 8000b22:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b26:	e7dd      	b.n	8000ae4 <__udivmoddi4+0xa4>
 8000b28:	b902      	cbnz	r2, 8000b2c <__udivmoddi4+0xec>
 8000b2a:	deff      	udf	#255	; 0xff
 8000b2c:	fab2 f282 	clz	r2, r2
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	f040 8092 	bne.w	8000c5a <__udivmoddi4+0x21a>
 8000b36:	eba1 010c 	sub.w	r1, r1, ip
 8000b3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3e:	fa1f fe8c 	uxth.w	lr, ip
 8000b42:	2601      	movs	r6, #1
 8000b44:	0c20      	lsrs	r0, r4, #16
 8000b46:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4a:	fb07 1113 	mls	r1, r7, r3, r1
 8000b4e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b52:	fb0e f003 	mul.w	r0, lr, r3
 8000b56:	4288      	cmp	r0, r1
 8000b58:	d908      	bls.n	8000b6c <__udivmoddi4+0x12c>
 8000b5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000b5e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b62:	d202      	bcs.n	8000b6a <__udivmoddi4+0x12a>
 8000b64:	4288      	cmp	r0, r1
 8000b66:	f200 80cb 	bhi.w	8000d00 <__udivmoddi4+0x2c0>
 8000b6a:	4643      	mov	r3, r8
 8000b6c:	1a09      	subs	r1, r1, r0
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b74:	fb07 1110 	mls	r1, r7, r0, r1
 8000b78:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000b80:	45a6      	cmp	lr, r4
 8000b82:	d908      	bls.n	8000b96 <__udivmoddi4+0x156>
 8000b84:	eb1c 0404 	adds.w	r4, ip, r4
 8000b88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b8c:	d202      	bcs.n	8000b94 <__udivmoddi4+0x154>
 8000b8e:	45a6      	cmp	lr, r4
 8000b90:	f200 80bb 	bhi.w	8000d0a <__udivmoddi4+0x2ca>
 8000b94:	4608      	mov	r0, r1
 8000b96:	eba4 040e 	sub.w	r4, r4, lr
 8000b9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b9e:	e79c      	b.n	8000ada <__udivmoddi4+0x9a>
 8000ba0:	f1c6 0720 	rsb	r7, r6, #32
 8000ba4:	40b3      	lsls	r3, r6
 8000ba6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000baa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bae:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb6:	431c      	orrs	r4, r3
 8000bb8:	40f9      	lsrs	r1, r7
 8000bba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bbe:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bc6:	0c20      	lsrs	r0, r4, #16
 8000bc8:	fa1f fe8c 	uxth.w	lr, ip
 8000bcc:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd4:	fb08 f00e 	mul.w	r0, r8, lr
 8000bd8:	4288      	cmp	r0, r1
 8000bda:	fa02 f206 	lsl.w	r2, r2, r6
 8000bde:	d90b      	bls.n	8000bf8 <__udivmoddi4+0x1b8>
 8000be0:	eb1c 0101 	adds.w	r1, ip, r1
 8000be4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000be8:	f080 8088 	bcs.w	8000cfc <__udivmoddi4+0x2bc>
 8000bec:	4288      	cmp	r0, r1
 8000bee:	f240 8085 	bls.w	8000cfc <__udivmoddi4+0x2bc>
 8000bf2:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf6:	4461      	add	r1, ip
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c00:	fb09 1110 	mls	r1, r9, r0, r1
 8000c04:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c0c:	458e      	cmp	lr, r1
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x1e2>
 8000c10:	eb1c 0101 	adds.w	r1, ip, r1
 8000c14:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c18:	d26c      	bcs.n	8000cf4 <__udivmoddi4+0x2b4>
 8000c1a:	458e      	cmp	lr, r1
 8000c1c:	d96a      	bls.n	8000cf4 <__udivmoddi4+0x2b4>
 8000c1e:	3802      	subs	r0, #2
 8000c20:	4461      	add	r1, ip
 8000c22:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c26:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2a:	eba1 010e 	sub.w	r1, r1, lr
 8000c2e:	42a1      	cmp	r1, r4
 8000c30:	46c8      	mov	r8, r9
 8000c32:	46a6      	mov	lr, r4
 8000c34:	d356      	bcc.n	8000ce4 <__udivmoddi4+0x2a4>
 8000c36:	d053      	beq.n	8000ce0 <__udivmoddi4+0x2a0>
 8000c38:	b15d      	cbz	r5, 8000c52 <__udivmoddi4+0x212>
 8000c3a:	ebb3 0208 	subs.w	r2, r3, r8
 8000c3e:	eb61 010e 	sbc.w	r1, r1, lr
 8000c42:	fa01 f707 	lsl.w	r7, r1, r7
 8000c46:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4a:	40f1      	lsrs	r1, r6
 8000c4c:	431f      	orrs	r7, r3
 8000c4e:	e9c5 7100 	strd	r7, r1, [r5]
 8000c52:	2600      	movs	r6, #0
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	f1c2 0320 	rsb	r3, r2, #32
 8000c5e:	40d8      	lsrs	r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	fa21 f303 	lsr.w	r3, r1, r3
 8000c68:	4091      	lsls	r1, r2
 8000c6a:	4301      	orrs	r1, r0
 8000c6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c70:	fa1f fe8c 	uxth.w	lr, ip
 8000c74:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c78:	fb07 3610 	mls	r6, r7, r0, r3
 8000c7c:	0c0b      	lsrs	r3, r1, #16
 8000c7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c82:	fb00 f60e 	mul.w	r6, r0, lr
 8000c86:	429e      	cmp	r6, r3
 8000c88:	fa04 f402 	lsl.w	r4, r4, r2
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x260>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c96:	d22f      	bcs.n	8000cf8 <__udivmoddi4+0x2b8>
 8000c98:	429e      	cmp	r6, r3
 8000c9a:	d92d      	bls.n	8000cf8 <__udivmoddi4+0x2b8>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1b9b      	subs	r3, r3, r6
 8000ca2:	b289      	uxth	r1, r1
 8000ca4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ca8:	fb07 3316 	mls	r3, r7, r6, r3
 8000cac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb0:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x28a>
 8000cb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cbc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc0:	d216      	bcs.n	8000cf0 <__udivmoddi4+0x2b0>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d914      	bls.n	8000cf0 <__udivmoddi4+0x2b0>
 8000cc6:	3e02      	subs	r6, #2
 8000cc8:	4461      	add	r1, ip
 8000cca:	1ac9      	subs	r1, r1, r3
 8000ccc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd0:	e738      	b.n	8000b44 <__udivmoddi4+0x104>
 8000cd2:	462e      	mov	r6, r5
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	e705      	b.n	8000ae4 <__udivmoddi4+0xa4>
 8000cd8:	4606      	mov	r6, r0
 8000cda:	e6e3      	b.n	8000aa4 <__udivmoddi4+0x64>
 8000cdc:	4618      	mov	r0, r3
 8000cde:	e6f8      	b.n	8000ad2 <__udivmoddi4+0x92>
 8000ce0:	454b      	cmp	r3, r9
 8000ce2:	d2a9      	bcs.n	8000c38 <__udivmoddi4+0x1f8>
 8000ce4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cec:	3801      	subs	r0, #1
 8000cee:	e7a3      	b.n	8000c38 <__udivmoddi4+0x1f8>
 8000cf0:	4646      	mov	r6, r8
 8000cf2:	e7ea      	b.n	8000cca <__udivmoddi4+0x28a>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	e794      	b.n	8000c22 <__udivmoddi4+0x1e2>
 8000cf8:	4640      	mov	r0, r8
 8000cfa:	e7d1      	b.n	8000ca0 <__udivmoddi4+0x260>
 8000cfc:	46d0      	mov	r8, sl
 8000cfe:	e77b      	b.n	8000bf8 <__udivmoddi4+0x1b8>
 8000d00:	3b02      	subs	r3, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	e732      	b.n	8000b6c <__udivmoddi4+0x12c>
 8000d06:	4630      	mov	r0, r6
 8000d08:	e709      	b.n	8000b1e <__udivmoddi4+0xde>
 8000d0a:	4464      	add	r4, ip
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	e742      	b.n	8000b96 <__udivmoddi4+0x156>

08000d10 <__aeabi_idiv0>:
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d18:	4b3d      	ldr	r3, [pc, #244]	; (8000e10 <SystemInit+0xfc>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a3c      	ldr	r2, [pc, #240]	; (8000e10 <SystemInit+0xfc>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000d28:	4b39      	ldr	r3, [pc, #228]	; (8000e10 <SystemInit+0xfc>)
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	4a38      	ldr	r2, [pc, #224]	; (8000e10 <SystemInit+0xfc>)
 8000d2e:	f043 0310 	orr.w	r3, r3, #16
 8000d32:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d34:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <SystemInit+0x100>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 030f 	and.w	r3, r3, #15
 8000d3c:	2b06      	cmp	r3, #6
 8000d3e:	d807      	bhi.n	8000d50 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d40:	4b34      	ldr	r3, [pc, #208]	; (8000e14 <SystemInit+0x100>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f023 030f 	bic.w	r3, r3, #15
 8000d48:	4a32      	ldr	r2, [pc, #200]	; (8000e14 <SystemInit+0x100>)
 8000d4a:	f043 0307 	orr.w	r3, r3, #7
 8000d4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d50:	4b31      	ldr	r3, [pc, #196]	; (8000e18 <SystemInit+0x104>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a30      	ldr	r2, [pc, #192]	; (8000e18 <SystemInit+0x104>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d5c:	4b2e      	ldr	r3, [pc, #184]	; (8000e18 <SystemInit+0x104>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <SystemInit+0x104>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	492c      	ldr	r1, [pc, #176]	; (8000e18 <SystemInit+0x104>)
 8000d68:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <SystemInit+0x108>)
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d6e:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <SystemInit+0x100>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d007      	beq.n	8000d8a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d7a:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <SystemInit+0x100>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f023 030f 	bic.w	r3, r3, #15
 8000d82:	4a24      	ldr	r2, [pc, #144]	; (8000e14 <SystemInit+0x100>)
 8000d84:	f043 0307 	orr.w	r3, r3, #7
 8000d88:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d8a:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <SystemInit+0x104>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d90:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <SystemInit+0x104>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <SystemInit+0x104>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <SystemInit+0x104>)
 8000d9e:	4a20      	ldr	r2, [pc, #128]	; (8000e20 <SystemInit+0x10c>)
 8000da0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <SystemInit+0x104>)
 8000da4:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <SystemInit+0x110>)
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <SystemInit+0x104>)
 8000daa:	4a1f      	ldr	r2, [pc, #124]	; (8000e28 <SystemInit+0x114>)
 8000dac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <SystemInit+0x104>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <SystemInit+0x104>)
 8000db6:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <SystemInit+0x114>)
 8000db8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <SystemInit+0x104>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <SystemInit+0x104>)
 8000dc2:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <SystemInit+0x114>)
 8000dc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <SystemInit+0x104>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <SystemInit+0x104>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a11      	ldr	r2, [pc, #68]	; (8000e18 <SystemInit+0x104>)
 8000dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <SystemInit+0x104>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <SystemInit+0x118>)
 8000de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <SystemInit+0x118>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <SystemInit+0x11c>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <SystemInit+0x120>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000df6:	d202      	bcs.n	8000dfe <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <SystemInit+0x124>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <SystemInit+0x128>)
 8000e00:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e04:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	52002000 	.word	0x52002000
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e20:	02020200 	.word	0x02020200
 8000e24:	01ff0000 	.word	0x01ff0000
 8000e28:	01010280 	.word	0x01010280
 8000e2c:	580000c0 	.word	0x580000c0
 8000e30:	5c001000 	.word	0x5c001000
 8000e34:	ffff0000 	.word	0xffff0000
 8000e38:	51008108 	.word	0x51008108
 8000e3c:	52004000 	.word	0x52004000

08000e40 <reverse_bit>:
#include <complex.h>
#include <math.h>

typedef float complex cplx;

int reverse_bit(int n, int length){
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
    int reverse = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < length; i++){
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	e00c      	b.n	8000e6e <reverse_bit+0x2e>
        reverse = (reverse << 1) | (n & 1);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	005a      	lsls	r2, r3, #1
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
        n = n >> 1;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	105b      	asrs	r3, r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
    for(int i = 0; i < length; i++){
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dbee      	blt.n	8000e54 <reverse_bit+0x14>
    }
    return reverse;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	0000      	movs	r0, r0
	...

08000e88 <fft>:

void fft(float *arr, int size, cplx *xFFT){
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b09d      	sub	sp, #116	; 0x74
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
    int num_bit = log2(size);
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e9e:	eeb0 0b47 	vmov.f64	d0, d7
 8000ea2:	f00c f949 	bl	800d138 <log>
 8000ea6:	eeb0 6b40 	vmov.f64	d6, d0
 8000eaa:	ed9f 5b93 	vldr	d5, [pc, #588]	; 80010f8 <fft+0x270>
 8000eae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000eb2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000eb6:	ee17 3a90 	vmov	r3, s15
 8000eba:	657b      	str	r3, [r7, #84]	; 0x54
    for(int i = 0; i < size; i++){
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	667b      	str	r3, [r7, #100]	; 0x64
 8000ec0:	e013      	b.n	8000eea <fft+0x62>
        xFFT[reverse_bit(i, num_bit)] =  arr[i];
 8000ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	4413      	add	r3, r2
 8000eca:	681c      	ldr	r4, [r3, #0]
 8000ecc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000ece:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000ed0:	f7ff ffb6 	bl	8000e40 <reverse_bit>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	601c      	str	r4, [r3, #0]
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
    for(int i = 0; i < size; i++){
 8000ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8000eea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	dbe7      	blt.n	8000ec2 <fft+0x3a>
    }

    int q = round(log(size)/log(2));
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	ee07 3a90 	vmov	s15, r3
 8000ef8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000efc:	eeb0 0b47 	vmov.f64	d0, d7
 8000f00:	f00c f91a 	bl	800d138 <log>
 8000f04:	eeb0 6b40 	vmov.f64	d6, d0
 8000f08:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 80010f8 <fft+0x270>
 8000f0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f10:	eeb0 0b47 	vmov.f64	d0, d7
 8000f14:	f00c fd4c 	bl	800d9b0 <round>
 8000f18:	eeb0 7b40 	vmov.f64	d7, d0
 8000f1c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f20:	ee17 3a90 	vmov	r3, s15
 8000f24:	653b      	str	r3, [r7, #80]	; 0x50
    for(int s = 1; s < q+1; s++){
 8000f26:	2301      	movs	r3, #1
 8000f28:	663b      	str	r3, [r7, #96]	; 0x60
 8000f2a:	e0d9      	b.n	80010e0 <fft+0x258>
        int m = pow(2,s);
 8000f2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f36:	eeb0 1b47 	vmov.f64	d1, d7
 8000f3a:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000f3e:	f00c fa97 	bl	800d470 <pow>
 8000f42:	eeb0 7b40 	vmov.f64	d7, d0
 8000f46:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f4a:	ee17 3a90 	vmov	r3, s15
 8000f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
        int m2 = m/2;
 8000f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	da00      	bge.n	8000f58 <fft+0xd0>
 8000f56:	3301      	adds	r3, #1
 8000f58:	105b      	asrs	r3, r3, #1
 8000f5a:	64bb      	str	r3, [r7, #72]	; 0x48
        cplx w = 1;
 8000f5c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f60:	643b      	str	r3, [r7, #64]	; 0x40
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	647b      	str	r3, [r7, #68]	; 0x44
        cplx wm = cexp(I*(M_PI/m2));
 8000f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f72:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8001100 <fft+0x278>
 8000f76:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f7a:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8001108 <fft+0x280>
 8000f7e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f82:	ec51 0b16 	vmov	r0, r1, d6
 8000f86:	ec53 2b17 	vmov	r2, r3, d7
 8000f8a:	ec41 0b16 	vmov	d6, r0, r1
 8000f8e:	ec43 2b17 	vmov	d7, r2, r3
 8000f92:	eeb0 0b46 	vmov.f64	d0, d6
 8000f96:	eeb0 1b47 	vmov.f64	d1, d7
 8000f9a:	f00b ffbd 	bl	800cf18 <cexp>
 8000f9e:	eeb0 6b40 	vmov.f64	d6, d0
 8000fa2:	eeb0 7b41 	vmov.f64	d7, d1
 8000fa6:	eef7 6bc6 	vcvt.f32.f64	s13, d6
 8000faa:	edc7 6a1b 	vstr	s13, [r7, #108]	; 0x6c
 8000fae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fb2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8000fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000fba:	63ba      	str	r2, [r7, #56]	; 0x38
 8000fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(int j = 1; j < m2+1; j++){
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
 8000fc8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8000fce:	e07f      	b.n	80010d0 <fft+0x248>
            for(int k = j; k < size+1; k+=m){
 8000fd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8000fd4:	e063      	b.n	800109e <fft+0x216>
                cplx t = w * xFFT[k+m2-1];
 8000fd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fda:	4413      	add	r3, r2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	edd3 7a00 	vldr	s15, [r3]
 8000fee:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ff2:	eef0 1a47 	vmov.f32	s3, s14
 8000ff6:	eeb0 1a67 	vmov.f32	s2, s15
 8000ffa:	edd7 0a08 	vldr	s1, [r7, #32]
 8000ffe:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001002:	f7ff fb99 	bl	8000738 <__mulsc3>
 8001006:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 800100a:	edc7 0a0d 	vstr	s1, [r7, #52]	; 0x34
 800100e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001010:	61fb      	str	r3, [r7, #28]
 8001012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001014:	61bb      	str	r3, [r7, #24]
                cplx u = xFFT[k-1];
 8001016:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001018:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	617a      	str	r2, [r7, #20]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	62ba      	str	r2, [r7, #40]	; 0x28
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
                xFFT[k-1] = u + t;
 8001034:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001036:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	ed97 7a07 	vldr	s14, [r7, #28]
 8001046:	edd7 7a05 	vldr	s15, [r7, #20]
 800104a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800104e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001052:	edd7 7a04 	vldr	s15, [r7, #16]
 8001056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800105a:	ed83 7a00 	vstr	s14, [r3]
 800105e:	edc3 7a01 	vstr	s15, [r3, #4]
                xFFT[k+m2-1] = u - t;
 8001062:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001066:	4413      	add	r3, r2
 8001068:	461a      	mov	r2, r3
 800106a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	ed97 7a05 	vldr	s14, [r7, #20]
 800107a:	edd7 7a07 	vldr	s15, [r7, #28]
 800107e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001082:	edd7 6a04 	vldr	s13, [r7, #16]
 8001086:	edd7 7a06 	vldr	s15, [r7, #24]
 800108a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800108e:	ed83 7a00 	vstr	s14, [r3]
 8001092:	edc3 7a01 	vstr	s15, [r3, #4]
            for(int k = j; k < size+1; k+=m){
 8001096:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800109a:	4413      	add	r3, r2
 800109c:	65bb      	str	r3, [r7, #88]	; 0x58
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010a2:	429a      	cmp	r2, r3
 80010a4:	da97      	bge.n	8000fd6 <fft+0x14e>
            }
            w = w * wm;
 80010a6:	edd7 1a1a 	vldr	s3, [r7, #104]	; 0x68
 80010aa:	ed97 1a1b 	vldr	s2, [r7, #108]	; 0x6c
 80010ae:	edd7 0a08 	vldr	s1, [r7, #32]
 80010b2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80010b6:	f7ff fb3f 	bl	8000738 <__mulsc3>
 80010ba:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 80010be:	edc7 0a11 	vstr	s1, [r7, #68]	; 0x44
 80010c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
 80010c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010c8:	623b      	str	r3, [r7, #32]
        for(int j = 1; j < m2+1; j++){
 80010ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010cc:	3301      	adds	r3, #1
 80010ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010d4:	429a      	cmp	r2, r3
 80010d6:	f6bf af7b 	bge.w	8000fd0 <fft+0x148>
    for(int s = 1; s < q+1; s++){
 80010da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010dc:	3301      	adds	r3, #1
 80010de:	663b      	str	r3, [r7, #96]	; 0x60
 80010e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80010e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f6bf af21 	bge.w	8000f2c <fft+0xa4>
        }

    }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3774      	adds	r7, #116	; 0x74
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd90      	pop	{r4, r7, pc}
 80010f4:	f3af 8000 	nop.w
 80010f8:	fefa39ef 	.word	0xfefa39ef
 80010fc:	3fe62e42 	.word	0x3fe62e42
 8001100:	54442d18 	.word	0x54442d18
 8001104:	400921fb 	.word	0x400921fb
	...

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800111a:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800111c:	bf00      	nop
 800111e:	4b6d      	ldr	r3, [pc, #436]	; (80012d4 <main+0x1c4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d004      	beq.n	8001134 <main+0x24>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	1e5a      	subs	r2, r3, #1
 800112e:	60fa      	str	r2, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	dcf4      	bgt.n	800111e <main+0xe>
  if ( timeout < 0 )
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	da01      	bge.n	800113e <main+0x2e>
  {
  Error_Handler();
 800113a:	f000 fdb7 	bl	8001cac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113e:	f001 f855 	bl	80021ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001142:	f000 f8ed 	bl	8001320 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001146:	4b63      	ldr	r3, [pc, #396]	; (80012d4 <main+0x1c4>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	4a61      	ldr	r2, [pc, #388]	; (80012d4 <main+0x1c4>)
 800114e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001156:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <main+0x1c4>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001164:	2000      	movs	r0, #0
 8001166:	f001 fbf7 	bl	8002958 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800116a:	2100      	movs	r1, #0
 800116c:	2000      	movs	r0, #0
 800116e:	f001 fc0d 	bl	800298c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001176:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001178:	bf00      	nop
 800117a:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <main+0x1c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d104      	bne.n	8001190 <main+0x80>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	1e5a      	subs	r2, r3, #1
 800118a:	60fa      	str	r2, [r7, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	dcf4      	bgt.n	800117a <main+0x6a>
if ( timeout < 0 )
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	da01      	bge.n	800119a <main+0x8a>
{
Error_Handler();
 8001196:	f000 fd89 	bl	8001cac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119a:	f000 fb0f 	bl	80017bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800119e:	f000 fac1 	bl	8001724 <MX_USART3_UART_Init>
  MX_I2C4_Init();
 80011a2:	f000 f937 	bl	8001414 <MX_I2C4_Init>
  MX_TIM1_Init();
 80011a6:	f000 f975 	bl	8001494 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011aa:	f000 fa1f 	bl	80015ec <MX_TIM2_Init>
  MX_TIM5_Init();
 80011ae:	f000 fa6b 	bl	8001688 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  // Revisión de conexión del MPU6050
  HAL_StatusTypeDef status;
  status = HAL_I2C_IsDeviceReady(&hi2c4, MPU6050_ADDR, 1, 3000);
 80011b2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80011b6:	2201      	movs	r2, #1
 80011b8:	21d0      	movs	r1, #208	; 0xd0
 80011ba:	4847      	ldr	r0, [pc, #284]	; (80012d8 <main+0x1c8>)
 80011bc:	f001 feb8 	bl	8002f30 <HAL_I2C_IsDeviceReady>
 80011c0:	4603      	mov	r3, r0
 80011c2:	72fb      	strb	r3, [r7, #11]
  if (status == HAL_OK) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 80011c4:	7afb      	ldrb	r3, [r7, #11]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d105      	bne.n	80011d6 <main+0xc6>
 80011ca:	2201      	movs	r2, #1
 80011cc:	2101      	movs	r1, #1
 80011ce:	4843      	ldr	r0, [pc, #268]	; (80012dc <main+0x1cc>)
 80011d0:	f001 fb8e 	bl	80028f0 <HAL_GPIO_WritePin>
 80011d4:	e005      	b.n	80011e2 <main+0xd2>
  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011dc:	483f      	ldr	r0, [pc, #252]	; (80012dc <main+0x1cc>)
 80011de:	f001 fb87 	bl	80028f0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80011e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e6:	f001 f893 	bl	8002310 <HAL_Delay>
  MPU6050_init();								/* Inicialización  de configuración
 80011ea:	f000 fb93 	bl	8001914 <MPU6050_init>
    	  	  	  	  	  	  	  	  	  	  	  	   del MPU6050 */

  // Inicialización del contador
  HAL_TIM_Base_Start(&htim5); 					// Incialización del timer 5
 80011ee:	483c      	ldr	r0, [pc, #240]	; (80012e0 <main+0x1d0>)
 80011f0:	f004 feb8 	bl	8005f64 <HAL_TIM_Base_Start>

  // Inicialización del PWM
  HAL_TIM_PWM_Init(&htim1);
 80011f4:	483b      	ldr	r0, [pc, #236]	; (80012e4 <main+0x1d4>)
 80011f6:	f004 ffcc 	bl	8006192 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011fa:	2100      	movs	r1, #0
 80011fc:	4839      	ldr	r0, [pc, #228]	; (80012e4 <main+0x1d4>)
 80011fe:	f005 f829 	bl	8006254 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 70;								// 70% de ciclo útil
 8001202:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <main+0x1d8>)
 8001204:	2246      	movs	r2, #70	; 0x46
 8001206:	635a      	str	r2, [r3, #52]	; 0x34

  // Entradas de polaridad del L298N
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);	// In 1
 8001208:	2201      	movs	r2, #1
 800120a:	2101      	movs	r1, #1
 800120c:	4837      	ldr	r0, [pc, #220]	; (80012ec <main+0x1dc>)
 800120e:	f001 fb6f 	bl	80028f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET);	// In 2
 8001212:	2200      	movs	r2, #0
 8001214:	2102      	movs	r1, #2
 8001216:	4835      	ldr	r0, [pc, #212]	; (80012ec <main+0x1dc>)
 8001218:	f001 fb6a 	bl	80028f0 <HAL_GPIO_WritePin>

  // Prueba de comunicación UART
  printUART_int("MPU6050 test\r\n", 0);
 800121c:	2100      	movs	r1, #0
 800121e:	4834      	ldr	r0, [pc, #208]	; (80012f0 <main+0x1e0>)
 8001220:	f000 fc46 	bl	8001ab0 <printUART_int>

  // Inicialización de la interrupción por timer
  HAL_TIM_Base_Start_IT(&htim2);				// Inicialización del timer 2
 8001224:	4833      	ldr	r0, [pc, #204]	; (80012f4 <main+0x1e4>)
 8001226:	f004 ff0d 	bl	8006044 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(n_muestras == limite_muestras){
 800122a:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <main+0x1e8>)
 800122c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001230:	4b32      	ldr	r3, [pc, #200]	; (80012fc <main+0x1ec>)
 8001232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001236:	429a      	cmp	r2, r3
 8001238:	d1f7      	bne.n	800122a <main+0x11a>
		  printUART_int("Muestras: %u \r\n", n_muestras);	// Comprobación del número de muestras
 800123a:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <main+0x1e8>)
 800123c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001240:	4619      	mov	r1, r3
 8001242:	482f      	ldr	r0, [pc, #188]	; (8001300 <main+0x1f0>)
 8001244:	f000 fc34 	bl	8001ab0 <printUART_int>
		  HAL_TIM_Base_Stop_IT(&htim2);					  	// Desactivación de la interrupción
 8001248:	482a      	ldr	r0, [pc, #168]	; (80012f4 <main+0x1e4>)
 800124a:	f004 ff73 	bl	8006134 <HAL_TIM_Base_Stop_IT>
		  HAL_Delay(50);
 800124e:	2032      	movs	r0, #50	; 0x32
 8001250:	f001 f85e 	bl	8002310 <HAL_Delay>

		  // Comprobación del tiempo de muestreo
		  timer_val = __HAL_TIM_GET_COUNTER(&htim5) - timer_val;
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <main+0x1d0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <main+0x1f4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	4a28      	ldr	r2, [pc, #160]	; (8001304 <main+0x1f4>)
 8001262:	6013      	str	r3, [r2, #0]
		  printUART_int("Tiempo de muestreo: %u us \r\n", timer_val);
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <main+0x1f4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	4827      	ldr	r0, [pc, #156]	; (8001308 <main+0x1f8>)
 800126c:	f000 fc20 	bl	8001ab0 <printUART_int>

		  // Impresión de las muestras originales
		  printUART_int("Eje X: ", 0);
 8001270:	2100      	movs	r1, #0
 8001272:	4826      	ldr	r0, [pc, #152]	; (800130c <main+0x1fc>)
 8001274:	f000 fc1c 	bl	8001ab0 <printUART_int>
		  printUART_array(muestras_x, sizeof(muestras_x)/sizeof(muestras_x[0]));
 8001278:	2140      	movs	r1, #64	; 0x40
 800127a:	4825      	ldr	r0, [pc, #148]	; (8001310 <main+0x200>)
 800127c:	f000 fc38 	bl	8001af0 <printUART_array>

		  // Cálculo de la transformada rápida de Fourier
		  timer_val = __HAL_TIM_GET_COUNTER(&htim5);
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <main+0x1d0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <main+0x1f4>)
 8001288:	6013      	str	r3, [r2, #0]
		  fft(muestras_x, sizeof(muestras_x)/sizeof(muestras_x[0]), xFFT);
 800128a:	4a22      	ldr	r2, [pc, #136]	; (8001314 <main+0x204>)
 800128c:	2140      	movs	r1, #64	; 0x40
 800128e:	4820      	ldr	r0, [pc, #128]	; (8001310 <main+0x200>)
 8001290:	f7ff fdfa 	bl	8000e88 <fft>
		  timer_val = __HAL_TIM_GET_COUNTER(&htim5) - timer_val;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <main+0x1d0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <main+0x1f4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	4a18      	ldr	r2, [pc, #96]	; (8001304 <main+0x1f4>)
 80012a2:	6013      	str	r3, [r2, #0]
		  printUART_int("Tiempo de procesamiento: %u us \r\n", timer_val);
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <main+0x1f4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	481b      	ldr	r0, [pc, #108]	; (8001318 <main+0x208>)
 80012ac:	f000 fc00 	bl	8001ab0 <printUART_int>

		  // Impresión de las transformadas de Fourier
		  printUART_int("FFT X: ", 0);
 80012b0:	2100      	movs	r1, #0
 80012b2:	481a      	ldr	r0, [pc, #104]	; (800131c <main+0x20c>)
 80012b4:	f000 fbfc 	bl	8001ab0 <printUART_int>
		  printUART_arrayCplx(xFFT, sizeof(xFFT)/sizeof(xFFT[0]));
 80012b8:	2140      	movs	r1, #64	; 0x40
 80012ba:	4816      	ldr	r0, [pc, #88]	; (8001314 <main+0x204>)
 80012bc:	f000 fc52 	bl	8001b64 <printUART_arrayCplx>
		  HAL_Delay(50);
 80012c0:	2032      	movs	r0, #50	; 0x32
 80012c2:	f001 f825 	bl	8002310 <HAL_Delay>

		  n_muestras = 0;									// Reinicio del contador de muestras
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <main+0x1e8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	801a      	strh	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim2);					// Reinicio de la interrupción
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <main+0x1e4>)
 80012ce:	f004 feb9 	bl	8006044 <HAL_TIM_Base_Start_IT>
	  if(n_muestras == limite_muestras){
 80012d2:	e7aa      	b.n	800122a <main+0x11a>
 80012d4:	58024400 	.word	0x58024400
 80012d8:	24000204 	.word	0x24000204
 80012dc:	58020400 	.word	0x58020400
 80012e0:	240002e8 	.word	0x240002e8
 80012e4:	24000250 	.word	0x24000250
 80012e8:	40010000 	.word	0x40010000
 80012ec:	58020c00 	.word	0x58020c00
 80012f0:	0800e648 	.word	0x0800e648
 80012f4:	2400029c 	.word	0x2400029c
 80012f8:	240005cc 	.word	0x240005cc
 80012fc:	24000008 	.word	0x24000008
 8001300:	0800e658 	.word	0x0800e658
 8001304:	24000704 	.word	0x24000704
 8001308:	0800e668 	.word	0x0800e668
 800130c:	0800e688 	.word	0x0800e688
 8001310:	240005d0 	.word	0x240005d0
 8001314:	240003c4 	.word	0x240003c4
 8001318:	0800e690 	.word	0x0800e690
 800131c:	0800e6b4 	.word	0x0800e6b4

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b09c      	sub	sp, #112	; 0x70
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	224c      	movs	r2, #76	; 0x4c
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f007 fa80 	bl	8008834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2220      	movs	r2, #32
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f007 fa7a 	bl	8008834 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001340:	2004      	movs	r0, #4
 8001342:	f002 fa3b 	bl	80037bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b30      	ldr	r3, [pc, #192]	; (800140c <SystemClock_Config+0xec>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	4a2f      	ldr	r2, [pc, #188]	; (800140c <SystemClock_Config+0xec>)
 8001350:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001354:	6193      	str	r3, [r2, #24]
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <SystemClock_Config+0xec>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <SystemClock_Config+0xf0>)
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	4a2a      	ldr	r2, [pc, #168]	; (8001410 <SystemClock_Config+0xf0>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <SystemClock_Config+0xf0>)
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001378:	bf00      	nop
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <SystemClock_Config+0xec>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001386:	d1f8      	bne.n	800137a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001388:	2301      	movs	r3, #1
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800138c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001392:	2302      	movs	r3, #2
 8001394:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001396:	2302      	movs	r3, #2
 8001398:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800139a:	2301      	movs	r3, #1
 800139c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800139e:	2378      	movs	r3, #120	; 0x78
 80013a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013a6:	2302      	movs	r3, #2
 80013a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013ae:	230c      	movs	r3, #12
 80013b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 fa56 	bl	8003870 <HAL_RCC_OscConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013ca:	f000 fc6f 	bl	8001cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ce:	233f      	movs	r3, #63	; 0x3f
 80013d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d2:	2303      	movs	r3, #3
 80013d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013da:	2308      	movs	r3, #8
 80013dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013de:	2340      	movs	r3, #64	; 0x40
 80013e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013e2:	2340      	movs	r3, #64	; 0x40
 80013e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013ec:	2340      	movs	r3, #64	; 0x40
 80013ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2104      	movs	r1, #4
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 fe69 	bl	80040cc <HAL_RCC_ClockConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001400:	f000 fc54 	bl	8001cac <Error_Handler>
  }
}
 8001404:	bf00      	nop
 8001406:	3770      	adds	r7, #112	; 0x70
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	58024800 	.word	0x58024800
 8001410:	58000400 	.word	0x58000400

08001414 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_I2C4_Init+0x74>)
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <MX_I2C4_Init+0x78>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_I2C4_Init+0x74>)
 8001420:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <MX_I2C4_Init+0x7c>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_I2C4_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_I2C4_Init+0x74>)
 800142c:	2201      	movs	r2, #1
 800142e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_I2C4_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_I2C4_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_I2C4_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_I2C4_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_I2C4_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800144e:	480e      	ldr	r0, [pc, #56]	; (8001488 <MX_I2C4_Init+0x74>)
 8001450:	f001 fab0 	bl	80029b4 <HAL_I2C_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800145a:	f000 fc27 	bl	8001cac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800145e:	2100      	movs	r1, #0
 8001460:	4809      	ldr	r0, [pc, #36]	; (8001488 <MX_I2C4_Init+0x74>)
 8001462:	f002 f913 	bl	800368c <HAL_I2CEx_ConfigAnalogFilter>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800146c:	f000 fc1e 	bl	8001cac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001470:	2100      	movs	r1, #0
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_I2C4_Init+0x74>)
 8001474:	f002 f955 	bl	8003722 <HAL_I2CEx_ConfigDigitalFilter>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800147e:	f000 fc15 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	24000204 	.word	0x24000204
 800148c:	58001c00 	.word	0x58001c00
 8001490:	307075b1 	.word	0x307075b1

08001494 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b09a      	sub	sp, #104	; 0x68
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	615a      	str	r2, [r3, #20]
 80014c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	222c      	movs	r2, #44	; 0x2c
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f007 f9b0 	bl	8008834 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014d4:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <MX_TIM1_Init+0x150>)
 80014d6:	4a44      	ldr	r2, [pc, #272]	; (80015e8 <MX_TIM1_Init+0x154>)
 80014d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240;
 80014da:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <MX_TIM1_Init+0x150>)
 80014dc:	22f0      	movs	r2, #240	; 0xf0
 80014de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b40      	ldr	r3, [pc, #256]	; (80015e4 <MX_TIM1_Init+0x150>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80014e6:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <MX_TIM1_Init+0x150>)
 80014e8:	2264      	movs	r2, #100	; 0x64
 80014ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <MX_TIM1_Init+0x150>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014f2:	4b3c      	ldr	r3, [pc, #240]	; (80015e4 <MX_TIM1_Init+0x150>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <MX_TIM1_Init+0x150>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014fe:	4839      	ldr	r0, [pc, #228]	; (80015e4 <MX_TIM1_Init+0x150>)
 8001500:	f004 fcd8 	bl	8005eb4 <HAL_TIM_Base_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800150a:	f000 fbcf 	bl	8001cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001512:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001514:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001518:	4619      	mov	r1, r3
 800151a:	4832      	ldr	r0, [pc, #200]	; (80015e4 <MX_TIM1_Init+0x150>)
 800151c:	f005 f9dc 	bl	80068d8 <HAL_TIM_ConfigClockSource>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001526:	f000 fbc1 	bl	8001cac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800152a:	482e      	ldr	r0, [pc, #184]	; (80015e4 <MX_TIM1_Init+0x150>)
 800152c:	f004 fe31 	bl	8006192 <HAL_TIM_PWM_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001536:	f000 fbb9 	bl	8001cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001546:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800154a:	4619      	mov	r1, r3
 800154c:	4825      	ldr	r0, [pc, #148]	; (80015e4 <MX_TIM1_Init+0x150>)
 800154e:	f005 ff17 	bl	8007380 <HAL_TIMEx_MasterConfigSynchronization>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001558:	f000 fba8 	bl	8001cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155c:	2360      	movs	r3, #96	; 0x60
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001564:	2300      	movs	r3, #0
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001568:	2300      	movs	r3, #0
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001578:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800157c:	2200      	movs	r2, #0
 800157e:	4619      	mov	r1, r3
 8001580:	4818      	ldr	r0, [pc, #96]	; (80015e4 <MX_TIM1_Init+0x150>)
 8001582:	f005 f895 	bl	80066b0 <HAL_TIM_PWM_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800158c:	f000 fb8e 	bl	8001cac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	4807      	ldr	r0, [pc, #28]	; (80015e4 <MX_TIM1_Init+0x150>)
 80015c6:	f005 ff69 	bl	800749c <HAL_TIMEx_ConfigBreakDeadTime>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80015d0:	f000 fb6c 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015d4:	4803      	ldr	r0, [pc, #12]	; (80015e4 <MX_TIM1_Init+0x150>)
 80015d6:	f000 fc43 	bl	8001e60 <HAL_TIM_MspPostInit>

}
 80015da:	bf00      	nop
 80015dc:	3768      	adds	r7, #104	; 0x68
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	24000250 	.word	0x24000250
 80015e8:	40010000 	.word	0x40010000

080015ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_TIM2_Init+0x98>)
 800160c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001610:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <MX_TIM2_Init+0x98>)
 8001614:	22ef      	movs	r2, #239	; 0xef
 8001616:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_TIM2_Init+0x98>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15624;
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MX_TIM2_Init+0x98>)
 8001620:	f643 5208 	movw	r2, #15624	; 0x3d08
 8001624:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <MX_TIM2_Init+0x98>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_TIM2_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001632:	4814      	ldr	r0, [pc, #80]	; (8001684 <MX_TIM2_Init+0x98>)
 8001634:	f004 fc3e 	bl	8005eb4 <HAL_TIM_Base_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800163e:	f000 fb35 	bl	8001cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	4619      	mov	r1, r3
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <MX_TIM2_Init+0x98>)
 8001650:	f005 f942 	bl	80068d8 <HAL_TIM_ConfigClockSource>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800165a:	f000 fb27 	bl	8001cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_TIM2_Init+0x98>)
 800166c:	f005 fe88 	bl	8007380 <HAL_TIMEx_MasterConfigSynchronization>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001676:	f000 fb19 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2400029c 	.word	0x2400029c

08001688 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <MX_TIM5_Init+0x94>)
 80016a8:	4a1d      	ldr	r2, [pc, #116]	; (8001720 <MX_TIM5_Init+0x98>)
 80016aa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 239;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <MX_TIM5_Init+0x94>)
 80016ae:	22ef      	movs	r2, #239	; 0xef
 80016b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_TIM5_Init+0x94>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <MX_TIM5_Init+0x94>)
 80016ba:	f04f 32ff 	mov.w	r2, #4294967295
 80016be:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_TIM5_Init+0x94>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_TIM5_Init+0x94>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80016cc:	4813      	ldr	r0, [pc, #76]	; (800171c <MX_TIM5_Init+0x94>)
 80016ce:	f004 fbf1 	bl	8005eb4 <HAL_TIM_Base_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80016d8:	f000 fae8 	bl	8001cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80016e2:	f107 0310 	add.w	r3, r7, #16
 80016e6:	4619      	mov	r1, r3
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <MX_TIM5_Init+0x94>)
 80016ea:	f005 f8f5 	bl	80068d8 <HAL_TIM_ConfigClockSource>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80016f4:	f000 fada 	bl	8001cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_TIM5_Init+0x94>)
 8001706:	f005 fe3b 	bl	8007380 <HAL_TIMEx_MasterConfigSynchronization>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001710:	f000 facc 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	3720      	adds	r7, #32
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	240002e8 	.word	0x240002e8
 8001720:	40000c00 	.word	0x40000c00

08001724 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 800172a:	4a23      	ldr	r2, [pc, #140]	; (80017b8 <MX_USART3_UART_Init+0x94>)
 800172c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800172e:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 8001730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800176c:	4811      	ldr	r0, [pc, #68]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 800176e:	f005 ff31 	bl	80075d4 <HAL_UART_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001778:	f000 fa98 	bl	8001cac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800177c:	2100      	movs	r1, #0
 800177e:	480d      	ldr	r0, [pc, #52]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 8001780:	f006 ff64 	bl	800864c <HAL_UARTEx_SetTxFifoThreshold>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800178a:	f000 fa8f 	bl	8001cac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800178e:	2100      	movs	r1, #0
 8001790:	4808      	ldr	r0, [pc, #32]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 8001792:	f006 ff99 	bl	80086c8 <HAL_UARTEx_SetRxFifoThreshold>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800179c:	f000 fa86 	bl	8001cac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_USART3_UART_Init+0x90>)
 80017a2:	f006 ff1a 	bl	80085da <HAL_UARTEx_DisableFifoMode>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017ac:	f000 fa7e 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	24000334 	.word	0x24000334
 80017b8:	40004800 	.word	0x40004800

080017bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08c      	sub	sp, #48	; 0x30
 80017c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	4b4c      	ldr	r3, [pc, #304]	; (8001904 <MX_GPIO_Init+0x148>)
 80017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d8:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <MX_GPIO_Init+0x148>)
 80017da:	f043 0304 	orr.w	r3, r3, #4
 80017de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e2:	4b48      	ldr	r3, [pc, #288]	; (8001904 <MX_GPIO_Init+0x148>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f0:	4b44      	ldr	r3, [pc, #272]	; (8001904 <MX_GPIO_Init+0x148>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f6:	4a43      	ldr	r2, [pc, #268]	; (8001904 <MX_GPIO_Init+0x148>)
 80017f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001800:	4b40      	ldr	r3, [pc, #256]	; (8001904 <MX_GPIO_Init+0x148>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	4b3d      	ldr	r3, [pc, #244]	; (8001904 <MX_GPIO_Init+0x148>)
 8001810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001814:	4a3b      	ldr	r2, [pc, #236]	; (8001904 <MX_GPIO_Init+0x148>)
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800181e:	4b39      	ldr	r3, [pc, #228]	; (8001904 <MX_GPIO_Init+0x148>)
 8001820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800182c:	4b35      	ldr	r3, [pc, #212]	; (8001904 <MX_GPIO_Init+0x148>)
 800182e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001832:	4a34      	ldr	r2, [pc, #208]	; (8001904 <MX_GPIO_Init+0x148>)
 8001834:	f043 0320 	orr.w	r3, r3, #32
 8001838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800183c:	4b31      	ldr	r3, [pc, #196]	; (8001904 <MX_GPIO_Init+0x148>)
 800183e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800184a:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <MX_GPIO_Init+0x148>)
 800184c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001850:	4a2c      	ldr	r2, [pc, #176]	; (8001904 <MX_GPIO_Init+0x148>)
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800185a:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <MX_GPIO_Init+0x148>)
 800185c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <MX_GPIO_Init+0x148>)
 800186a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186e:	4a25      	ldr	r2, [pc, #148]	; (8001904 <MX_GPIO_Init+0x148>)
 8001870:	f043 0308 	orr.w	r3, r3, #8
 8001874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <MX_GPIO_Init+0x148>)
 800187a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	f244 0101 	movw	r1, #16385	; 0x4001
 800188c:	481e      	ldr	r0, [pc, #120]	; (8001908 <MX_GPIO_Init+0x14c>)
 800188e:	f001 f82f 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2103      	movs	r1, #3
 8001896:	481d      	ldr	r0, [pc, #116]	; (800190c <MX_GPIO_Init+0x150>)
 8001898:	f001 f82a 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2102      	movs	r1, #2
 80018a0:	481b      	ldr	r0, [pc, #108]	; (8001910 <MX_GPIO_Init+0x154>)
 80018a2:	f001 f825 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80018a6:	f244 0301 	movw	r3, #16385	; 0x4001
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b0:	2302      	movs	r3, #2
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b4:	2302      	movs	r3, #2
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	4812      	ldr	r0, [pc, #72]	; (8001908 <MX_GPIO_Init+0x14c>)
 80018c0:	f000 fe66 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018c4:	2303      	movs	r3, #3
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018cc:	2302      	movs	r3, #2
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d0:	2302      	movs	r3, #2
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	480c      	ldr	r0, [pc, #48]	; (800190c <MX_GPIO_Init+0x150>)
 80018dc:	f000 fe58 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018e0:	2302      	movs	r3, #2
 80018e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018e8:	2302      	movs	r3, #2
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ec:	2302      	movs	r3, #2
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <MX_GPIO_Init+0x154>)
 80018f8:	f000 fe4a 	bl	8002590 <HAL_GPIO_Init>

}
 80018fc:	bf00      	nop
 80018fe:	3730      	adds	r7, #48	; 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	58024400 	.word	0x58024400
 8001908:	58020400 	.word	0x58020400
 800190c:	58020c00 	.word	0x58020c00
 8001910:	58021000 	.word	0x58021000

08001914 <MPU6050_init>:

/* USER CODE BEGIN 4 */
/*
 * Inicialización de configuración del MPU6050
 */
void MPU6050_init(void){
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 3000);
 800191a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2301      	movs	r3, #1
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <MPU6050_init+0x9c>)
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2301      	movs	r3, #1
 800192a:	2275      	movs	r2, #117	; 0x75
 800192c:	21d0      	movs	r1, #208	; 0xd0
 800192e:	4821      	ldr	r0, [pc, #132]	; (80019b4 <MPU6050_init+0xa0>)
 8001930:	f001 f9e4 	bl	8002cfc <HAL_I2C_Mem_Read>
	printUART_int("Dirección: %u \r\n", check);
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <MPU6050_init+0x9c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	481f      	ldr	r0, [pc, #124]	; (80019b8 <MPU6050_init+0xa4>)
 800193c:	f000 f8b8 	bl	8001ab0 <printUART_int>
	HAL_Delay(1000);
 8001940:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001944:	f000 fce4 	bl	8002310 <HAL_Delay>

	data = 0x00;
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <MPU6050_init+0xa8>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 3000);
 800194e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	2301      	movs	r3, #1
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <MPU6050_init+0xa8>)
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2301      	movs	r3, #1
 800195e:	226b      	movs	r2, #107	; 0x6b
 8001960:	21d0      	movs	r1, #208	; 0xd0
 8001962:	4814      	ldr	r0, [pc, #80]	; (80019b4 <MPU6050_init+0xa0>)
 8001964:	f001 f8b6 	bl	8002ad4 <HAL_I2C_Mem_Write>
	data = 0b10000011;
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MPU6050_init+0xa8>)
 800196a:	2283      	movs	r2, #131	; 0x83
 800196c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, SMPLRT_DIV, 1, &data, 1, 3000);
 800196e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001972:	9302      	str	r3, [sp, #8]
 8001974:	2301      	movs	r3, #1
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <MPU6050_init+0xa8>)
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2301      	movs	r3, #1
 800197e:	2219      	movs	r2, #25
 8001980:	21d0      	movs	r1, #208	; 0xd0
 8001982:	480c      	ldr	r0, [pc, #48]	; (80019b4 <MPU6050_init+0xa0>)
 8001984:	f001 f8a6 	bl	8002ad4 <HAL_I2C_Mem_Write>
	data = 0x00;
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <MPU6050_init+0xa8>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, GYRO_CONFIG, 1, &data, 1, 3000);
 800198e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001992:	9302      	str	r3, [sp, #8]
 8001994:	2301      	movs	r3, #1
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <MPU6050_init+0xa8>)
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2301      	movs	r3, #1
 800199e:	221b      	movs	r2, #27
 80019a0:	21d0      	movs	r1, #208	; 0xd0
 80019a2:	4804      	ldr	r0, [pc, #16]	; (80019b4 <MPU6050_init+0xa0>)
 80019a4:	f001 f896 	bl	8002ad4 <HAL_I2C_Mem_Write>
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	240005c4 	.word	0x240005c4
 80019b4:	24000204 	.word	0x24000204
 80019b8:	0800e6bc 	.word	0x0800e6bc
 80019bc:	240005c5 	.word	0x240005c5

080019c0 <MPU6050_read_gyro>:

/*
 * Lectura de los registros del giroscopio del MPU6050
 */
void MPU6050_read_gyro(void){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af04      	add	r7, sp, #16
	uint8_t read_gyro[6];

	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, GYRO_XOUT_H, 1, read_gyro, 6, 3000);
 80019c6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80019ca:	9302      	str	r3, [sp, #8]
 80019cc:	2306      	movs	r3, #6
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	463b      	mov	r3, r7
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2301      	movs	r3, #1
 80019d6:	2243      	movs	r2, #67	; 0x43
 80019d8:	21d0      	movs	r1, #208	; 0xd0
 80019da:	4813      	ldr	r0, [pc, #76]	; (8001a28 <MPU6050_read_gyro+0x68>)
 80019dc:	f001 f98e 	bl	8002cfc <HAL_I2C_Mem_Read>

	gyr_X_read = (int16_t)(read_gyro[0] << 8 | read_gyro[1]);
 80019e0:	783b      	ldrb	r3, [r7, #0]
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	b21a      	sxth	r2, r3
 80019e6:	787b      	ldrb	r3, [r7, #1]
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <MPU6050_read_gyro+0x6c>)
 80019f0:	801a      	strh	r2, [r3, #0]

	gyr_X = gyr_X_read/131.0;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MPU6050_read_gyro+0x6c>)
 80019f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a00:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8001a20 <MPU6050_read_gyro+0x60>
 8001a04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <MPU6050_read_gyro+0x70>)
 8001a0e:	edc3 7a00 	vstr	s15, [r3]
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	f3af 8000 	nop.w
 8001a20:	00000000 	.word	0x00000000
 8001a24:	40606000 	.word	0x40606000
 8001a28:	24000204 	.word	0x24000204
 8001a2c:	240005c6 	.word	0x240005c6
 8001a30:	240005c8 	.word	0x240005c8

08001a34 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Interrupción TIM2, 64 por segundo
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d123      	bne.n	8001a8c <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		if(n_muestras == 0) timer_val = __HAL_TIM_GET_COUNTER(&htim5);
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d104      	bne.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0x24>
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a56:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001a58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a5c:	4811      	ldr	r0, [pc, #68]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001a5e:	f000 ff60 	bl	8002922 <HAL_GPIO_TogglePin>
		MPU6050_read_gyro();
 8001a62:	f7ff ffad 	bl	80019c0 <MPU6050_read_gyro>

		// Guardado de muestras en los arreglos
		muestras_x[n_muestras] = gyr_X;
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	490e      	ldr	r1, [pc, #56]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001a74:	0083      	lsls	r3, r0, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	601a      	str	r2, [r3, #0]

		n_muestras++;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b21a      	sxth	r2, r3
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a8a:	801a      	strh	r2, [r3, #0]
	}
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2400029c 	.word	0x2400029c
 8001a98:	240005cc 	.word	0x240005cc
 8001a9c:	240002e8 	.word	0x240002e8
 8001aa0:	24000704 	.word	0x24000704
 8001aa4:	58020400 	.word	0x58020400
 8001aa8:	240005c8 	.word	0x240005c8
 8001aac:	240005d0 	.word	0x240005d0

08001ab0 <printUART_int>:
 */

/*
 * Función de impresión por UART
 */
void printUART_int(char *string, int var){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
	uart_buf_len = sprintf(uart_buf, string, var);
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <printUART_int+0x34>)
 8001ac0:	f007 fd10 	bl	80094e4 <siprintf>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <printUART_int+0x38>)
 8001aca:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <printUART_int+0x38>)
 8001ace:	881a      	ldrh	r2, [r3, #0]
 8001ad0:	2364      	movs	r3, #100	; 0x64
 8001ad2:	4904      	ldr	r1, [pc, #16]	; (8001ae4 <printUART_int+0x34>)
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <printUART_int+0x3c>)
 8001ad6:	f005 fdcd 	bl	8007674 <HAL_UART_Transmit>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	240006d0 	.word	0x240006d0
 8001ae8:	24000702 	.word	0x24000702
 8001aec:	24000334 	.word	0x24000334

08001af0 <printUART_array>:
void printUART_array(float *arr, int size){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < size; i++){
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	e01b      	b.n	8001b38 <printUART_array+0x48>
		uart_buf_len = sprintf(uart_buf, "%.5f, ", arr[i]);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b10:	ec53 2b17 	vmov	r2, r3, d7
 8001b14:	490e      	ldr	r1, [pc, #56]	; (8001b50 <printUART_array+0x60>)
 8001b16:	480f      	ldr	r0, [pc, #60]	; (8001b54 <printUART_array+0x64>)
 8001b18:	f007 fce4 	bl	80094e4 <siprintf>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <printUART_array+0x68>)
 8001b22:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <printUART_array+0x68>)
 8001b26:	881a      	ldrh	r2, [r3, #0]
 8001b28:	2364      	movs	r3, #100	; 0x64
 8001b2a:	490a      	ldr	r1, [pc, #40]	; (8001b54 <printUART_array+0x64>)
 8001b2c:	480b      	ldr	r0, [pc, #44]	; (8001b5c <printUART_array+0x6c>)
 8001b2e:	f005 fda1 	bl	8007674 <HAL_UART_Transmit>
	for(int i = 0; i < size; i++){
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3301      	adds	r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbdf      	blt.n	8001b00 <printUART_array+0x10>
	}
	printUART_int("\r\n", 0);
 8001b40:	2100      	movs	r1, #0
 8001b42:	4807      	ldr	r0, [pc, #28]	; (8001b60 <printUART_array+0x70>)
 8001b44:	f7ff ffb4 	bl	8001ab0 <printUART_int>
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	0800e6d0 	.word	0x0800e6d0
 8001b54:	240006d0 	.word	0x240006d0
 8001b58:	24000702 	.word	0x24000702
 8001b5c:	24000334 	.word	0x24000334
 8001b60:	0800e6d8 	.word	0x0800e6d8

08001b64 <printUART_arrayCplx>:
void printUART_arrayCplx(cplx *arr, int size){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < size; i++){
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e027      	b.n	8001bc4 <printUART_arrayCplx+0x60>
		uart_buf_len = sprintf(uart_buf, "%.5f + %.5fj, ", creal(arr[i]), cimag(arr[i]));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	ee07 3a90 	vmov	s15, r3
 8001b94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b98:	ed8d 7b00 	vstr	d7, [sp]
 8001b9c:	ec53 2b16 	vmov	r2, r3, d6
 8001ba0:	493a      	ldr	r1, [pc, #232]	; (8001c8c <printUART_arrayCplx+0x128>)
 8001ba2:	483b      	ldr	r0, [pc, #236]	; (8001c90 <printUART_arrayCplx+0x12c>)
 8001ba4:	f007 fc9e 	bl	80094e4 <siprintf>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <printUART_arrayCplx+0x130>)
 8001bae:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001bb0:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <printUART_arrayCplx+0x130>)
 8001bb2:	881a      	ldrh	r2, [r3, #0]
 8001bb4:	2364      	movs	r3, #100	; 0x64
 8001bb6:	4936      	ldr	r1, [pc, #216]	; (8001c90 <printUART_arrayCplx+0x12c>)
 8001bb8:	4837      	ldr	r0, [pc, #220]	; (8001c98 <printUART_arrayCplx+0x134>)
 8001bba:	f005 fd5b 	bl	8007674 <HAL_UART_Transmit>
	for(int i = 0; i < size; i++){
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbd3      	blt.n	8001b74 <printUART_arrayCplx+0x10>
	}

	printUART_int("\r\n", 0);
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4833      	ldr	r0, [pc, #204]	; (8001c9c <printUART_arrayCplx+0x138>)
 8001bd0:	f7ff ff6e 	bl	8001ab0 <printUART_int>
	printUART_int("Real: ", 0);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4832      	ldr	r0, [pc, #200]	; (8001ca0 <printUART_arrayCplx+0x13c>)
 8001bd8:	f7ff ff6a 	bl	8001ab0 <printUART_int>
	for(int o = 0; o < size; o++){
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	e01c      	b.n	8001c1c <printUART_arrayCplx+0xb8>
		uart_buf_len = sprintf(uart_buf, "%.5f, ", creal(arr[o]));
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bf4:	ec53 2b17 	vmov	r2, r3, d7
 8001bf8:	492a      	ldr	r1, [pc, #168]	; (8001ca4 <printUART_arrayCplx+0x140>)
 8001bfa:	4825      	ldr	r0, [pc, #148]	; (8001c90 <printUART_arrayCplx+0x12c>)
 8001bfc:	f007 fc72 	bl	80094e4 <siprintf>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <printUART_arrayCplx+0x130>)
 8001c06:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <printUART_arrayCplx+0x130>)
 8001c0a:	881a      	ldrh	r2, [r3, #0]
 8001c0c:	2364      	movs	r3, #100	; 0x64
 8001c0e:	4920      	ldr	r1, [pc, #128]	; (8001c90 <printUART_arrayCplx+0x12c>)
 8001c10:	4821      	ldr	r0, [pc, #132]	; (8001c98 <printUART_arrayCplx+0x134>)
 8001c12:	f005 fd2f 	bl	8007674 <HAL_UART_Transmit>
	for(int o = 0; o < size; o++){
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	dbde      	blt.n	8001be2 <printUART_arrayCplx+0x7e>
	}

	printUART_int("\r\n", 0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	481d      	ldr	r0, [pc, #116]	; (8001c9c <printUART_arrayCplx+0x138>)
 8001c28:	f7ff ff42 	bl	8001ab0 <printUART_int>
	printUART_int("Imag: ", 0);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	481e      	ldr	r0, [pc, #120]	; (8001ca8 <printUART_arrayCplx+0x144>)
 8001c30:	f7ff ff3e 	bl	8001ab0 <printUART_int>
	for(int o = 0; o < size; o++){
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	e01c      	b.n	8001c74 <printUART_arrayCplx+0x110>
		uart_buf_len = sprintf(uart_buf, "%.5f, ", cimag(arr[o]));
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c4c:	ec53 2b17 	vmov	r2, r3, d7
 8001c50:	4914      	ldr	r1, [pc, #80]	; (8001ca4 <printUART_arrayCplx+0x140>)
 8001c52:	480f      	ldr	r0, [pc, #60]	; (8001c90 <printUART_arrayCplx+0x12c>)
 8001c54:	f007 fc46 	bl	80094e4 <siprintf>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <printUART_arrayCplx+0x130>)
 8001c5e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <printUART_arrayCplx+0x130>)
 8001c62:	881a      	ldrh	r2, [r3, #0]
 8001c64:	2364      	movs	r3, #100	; 0x64
 8001c66:	490a      	ldr	r1, [pc, #40]	; (8001c90 <printUART_arrayCplx+0x12c>)
 8001c68:	480b      	ldr	r0, [pc, #44]	; (8001c98 <printUART_arrayCplx+0x134>)
 8001c6a:	f005 fd03 	bl	8007674 <HAL_UART_Transmit>
	for(int o = 0; o < size; o++){
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3301      	adds	r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	dbde      	blt.n	8001c3a <printUART_arrayCplx+0xd6>
	}
	printUART_int("\r\n", 0);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4807      	ldr	r0, [pc, #28]	; (8001c9c <printUART_arrayCplx+0x138>)
 8001c80:	f7ff ff16 	bl	8001ab0 <printUART_int>
}
 8001c84:	bf00      	nop
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	0800e6dc 	.word	0x0800e6dc
 8001c90:	240006d0 	.word	0x240006d0
 8001c94:	24000702 	.word	0x24000702
 8001c98:	24000334 	.word	0x24000334
 8001c9c:	0800e6d8 	.word	0x0800e6d8
 8001ca0:	0800e6ec 	.word	0x0800e6ec
 8001ca4:	0800e6d0 	.word	0x0800e6d0
 8001ca8:	0800e6f4 	.word	0x0800e6f4

08001cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb0:	b672      	cpsid	i
}
 8001cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <Error_Handler+0x8>
	...

08001cb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_MspInit+0x30>)
 8001cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cc4:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <HAL_MspInit+0x30>)
 8001cc6:	f043 0302 	orr.w	r3, r3, #2
 8001cca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_MspInit+0x30>)
 8001cd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	58024400 	.word	0x58024400

08001cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0b8      	sub	sp, #224	; 0xe0
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	22bc      	movs	r2, #188	; 0xbc
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f006 fd91 	bl	8008834 <memset>
  if(hi2c->Instance==I2C4)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a25      	ldr	r2, [pc, #148]	; (8001dac <HAL_I2C_MspInit+0xc0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d142      	bne.n	8001da2 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 fd5a 	bl	80047e4 <HAL_RCCEx_PeriphCLKConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d36:	f7ff ffb9 	bl	8001cac <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_I2C_MspInit+0xc4>)
 8001d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d40:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <HAL_I2C_MspInit+0xc4>)
 8001d42:	f043 0320 	orr.w	r3, r3, #32
 8001d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_I2C_MspInit+0xc4>)
 8001d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d58:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d60:	2312      	movs	r3, #18
 8001d62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001d72:	2304      	movs	r3, #4
 8001d74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480d      	ldr	r0, [pc, #52]	; (8001db4 <HAL_I2C_MspInit+0xc8>)
 8001d80:	f000 fc06 	bl	8002590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_I2C_MspInit+0xc4>)
 8001d86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <HAL_I2C_MspInit+0xc4>)
 8001d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_I2C_MspInit+0xc4>)
 8001d96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001da2:	bf00      	nop
 8001da4:	37e0      	adds	r7, #224	; 0xe0
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	58001c00 	.word	0x58001c00
 8001db0:	58024400 	.word	0x58024400
 8001db4:	58021400 	.word	0x58021400

08001db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <HAL_TIM_Base_MspInit+0x9c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10f      	bne.n	8001dea <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_TIM_Base_MspInit+0xa0>)
 8001dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dd0:	4a21      	ldr	r2, [pc, #132]	; (8001e58 <HAL_TIM_Base_MspInit+0xa0>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <HAL_TIM_Base_MspInit+0xa0>)
 8001ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001de8:	e030      	b.n	8001e4c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df2:	d117      	bne.n	8001e24 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_TIM_Base_MspInit+0xa0>)
 8001df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_TIM_Base_MspInit+0xa0>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_TIM_Base_MspInit+0xa0>)
 8001e06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	201c      	movs	r0, #28
 8001e18:	f000 fb85 	bl	8002526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e1c:	201c      	movs	r0, #28
 8001e1e:	f000 fb9c 	bl	800255a <HAL_NVIC_EnableIRQ>
}
 8001e22:	e013      	b.n	8001e4c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM5)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <HAL_TIM_Base_MspInit+0xa4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_TIM_Base_MspInit+0xa0>)
 8001e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e34:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <HAL_TIM_Base_MspInit+0xa0>)
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_TIM_Base_MspInit+0xa0>)
 8001e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40010000 	.word	0x40010000
 8001e58:	58024400 	.word	0x58024400
 8001e5c:	40000c00 	.word	0x40000c00

08001e60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_TIM_MspPostInit+0x6c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d11f      	bne.n	8001ec2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_TIM_MspPostInit+0x70>)
 8001e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e88:	4a11      	ldr	r2, [pc, #68]	; (8001ed0 <HAL_TIM_MspPostInit+0x70>)
 8001e8a:	f043 0310 	orr.w	r3, r3, #16
 8001e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_TIM_MspPostInit+0x70>)
 8001e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <HAL_TIM_MspPostInit+0x74>)
 8001ebe:	f000 fb67 	bl	8002590 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40010000 	.word	0x40010000
 8001ed0:	58024400 	.word	0x58024400
 8001ed4:	58021000 	.word	0x58021000

08001ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b0b8      	sub	sp, #224	; 0xe0
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	22bc      	movs	r2, #188	; 0xbc
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f006 fc9b 	bl	8008834 <memset>
  if(huart->Instance==USART3)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a25      	ldr	r2, [pc, #148]	; (8001f98 <HAL_UART_MspInit+0xc0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d142      	bne.n	8001f8e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f12:	f107 0310 	add.w	r3, r7, #16
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 fc64 	bl	80047e4 <HAL_RCCEx_PeriphCLKConfig>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f22:	f7ff fec3 	bl	8001cac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_UART_MspInit+0xc4>)
 8001f28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HAL_UART_MspInit+0xc4>)
 8001f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_UART_MspInit+0xc4>)
 8001f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_UART_MspInit+0xc4>)
 8001f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4a:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <HAL_UART_MspInit+0xc4>)
 8001f4c:	f043 0308 	orr.w	r3, r3, #8
 8001f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_UART_MspInit+0xc4>)
 8001f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001f62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f82:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <HAL_UART_MspInit+0xc8>)
 8001f8a:	f000 fb01 	bl	8002590 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f8e:	bf00      	nop
 8001f90:	37e0      	adds	r7, #224	; 0xe0
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40004800 	.word	0x40004800
 8001f9c:	58024400 	.word	0x58024400
 8001fa0:	58020c00 	.word	0x58020c00

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <NMI_Handler+0x4>

08001faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <HardFault_Handler+0x4>

08001fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <MemManage_Handler+0x4>

08001fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fba:	e7fe      	b.n	8001fba <BusFault_Handler+0x4>

08001fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <UsageFault_Handler+0x4>

08001fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff0:	f000 f96e 	bl	80022d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <TIM2_IRQHandler+0x10>)
 8001ffe:	f004 fa37 	bl	8006470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2400029c 	.word	0x2400029c

0800200c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
	return 1;
 8002010:	2301      	movs	r3, #1
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_kill>:

int _kill(int pid, int sig)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002026:	f006 fbdb 	bl	80087e0 <__errno>
 800202a:	4603      	mov	r3, r0
 800202c:	2216      	movs	r2, #22
 800202e:	601a      	str	r2, [r3, #0]
	return -1;
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <_exit>:

void _exit (int status)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ffe7 	bl	800201c <_kill>
	while (1) {}		/* Make sure we hang here */
 800204e:	e7fe      	b.n	800204e <_exit+0x12>

08002050 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	e00a      	b.n	8002078 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002062:	f3af 8000 	nop.w
 8002066:	4601      	mov	r1, r0
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	60ba      	str	r2, [r7, #8]
 800206e:	b2ca      	uxtb	r2, r1
 8002070:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3301      	adds	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	dbf0      	blt.n	8002062 <_read+0x12>
	}

return len;
 8002080:	687b      	ldr	r3, [r7, #4]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e009      	b.n	80020b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	60ba      	str	r2, [r7, #8]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dbf1      	blt.n	800209c <_write+0x12>
	}
	return len;
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_close>:

int _close(int file)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
	return -1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ea:	605a      	str	r2, [r3, #4]
	return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_isatty>:

int _isatty(int file)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
	return 1;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
	return 0;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <_sbrk+0x5c>)
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <_sbrk+0x60>)
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <_sbrk+0x64>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <_sbrk+0x64>)
 800214a:	4a12      	ldr	r2, [pc, #72]	; (8002194 <_sbrk+0x68>)
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	429a      	cmp	r2, r3
 800215a:	d207      	bcs.n	800216c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800215c:	f006 fb40 	bl	80087e0 <__errno>
 8002160:	4603      	mov	r3, r0
 8002162:	220c      	movs	r2, #12
 8002164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	e009      	b.n	8002180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <_sbrk+0x64>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002172:	4b07      	ldr	r3, [pc, #28]	; (8002190 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	4a05      	ldr	r2, [pc, #20]	; (8002190 <_sbrk+0x64>)
 800217c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800217e:	68fb      	ldr	r3, [r7, #12]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	24080000 	.word	0x24080000
 800218c:	00000400 	.word	0x00000400
 8002190:	24000708 	.word	0x24000708
 8002194:	24000720 	.word	0x24000720

08002198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800219c:	f7fe fdba 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a0:	480c      	ldr	r0, [pc, #48]	; (80021d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021a2:	490d      	ldr	r1, [pc, #52]	; (80021d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021b8:	4c0a      	ldr	r4, [pc, #40]	; (80021e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021c6:	f006 fb11 	bl	80087ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ca:	f7fe ffa1 	bl	8001110 <main>
  bx  lr
 80021ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021d8:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 80021dc:	08010f10 	.word	0x08010f10
  ldr r2, =_sbss
 80021e0:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 80021e4:	24000720 	.word	0x24000720

080021e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC3_IRQHandler>
	...

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f2:	2003      	movs	r0, #3
 80021f4:	f000 f98c 	bl	8002510 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021f8:	f002 f91e 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_Init+0x68>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	4913      	ldr	r1, [pc, #76]	; (8002258 <HAL_Init+0x6c>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
 8002214:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <HAL_Init+0x68>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <HAL_Init+0x6c>)
 8002220:	5cd3      	ldrb	r3, [r2, r3]
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
 800222c:	4a0b      	ldr	r2, [pc, #44]	; (800225c <HAL_Init+0x70>)
 800222e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002230:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <HAL_Init+0x74>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002236:	2000      	movs	r0, #0
 8002238:	f000 f814 	bl	8002264 <HAL_InitTick>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e002      	b.n	800224c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002246:	f7ff fd37 	bl	8001cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	58024400 	.word	0x58024400
 8002258:	0800e6fc 	.word	0x0800e6fc
 800225c:	24000004 	.word	0x24000004
 8002260:	24000000 	.word	0x24000000

08002264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800226c:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_InitTick+0x60>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e021      	b.n	80022bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_InitTick+0x64>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_InitTick+0x60>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002286:	fbb3 f3f1 	udiv	r3, r3, r1
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f971 	bl	8002576 <HAL_SYSTICK_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e00e      	b.n	80022bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0f      	cmp	r3, #15
 80022a2:	d80a      	bhi.n	80022ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a4:	2200      	movs	r2, #0
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f000 f93b 	bl	8002526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b0:	4a06      	ldr	r2, [pc, #24]	; (80022cc <HAL_InitTick+0x68>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	24000010 	.word	0x24000010
 80022c8:	24000000 	.word	0x24000000
 80022cc:	2400000c 	.word	0x2400000c

080022d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_IncTick+0x20>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_IncTick+0x24>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <HAL_IncTick+0x24>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	24000010 	.word	0x24000010
 80022f4:	2400070c 	.word	0x2400070c

080022f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_GetTick+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	2400070c 	.word	0x2400070c

08002310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff ffee 	bl	80022f8 <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_Delay+0x44>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002336:	bf00      	nop
 8002338:	f7ff ffde 	bl	80022f8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	24000010 	.word	0x24000010

08002358 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_GetREVID+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0c1b      	lsrs	r3, r3, #16
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	5c001000 	.word	0x5c001000

08002370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <__NVIC_SetPriorityGrouping+0x40>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	4313      	orrs	r3, r2
 800239c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239e:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <__NVIC_SetPriorityGrouping+0x40>)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60d3      	str	r3, [r2, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00
 80023b4:	05fa0000 	.word	0x05fa0000

080023b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db0b      	blt.n	80023fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	4907      	ldr	r1, [pc, #28]	; (800240c <__NVIC_EnableIRQ+0x38>)
 80023ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2001      	movs	r0, #1
 80023f6:	fa00 f202 	lsl.w	r2, r0, r2
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100

08002410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800241c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db0a      	blt.n	800243a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	490c      	ldr	r1, [pc, #48]	; (800245c <__NVIC_SetPriority+0x4c>)
 800242a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002438:	e00a      	b.n	8002450 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <__NVIC_SetPriority+0x50>)
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3b04      	subs	r3, #4
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	440b      	add	r3, r1
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f1c3 0307 	rsb	r3, r3, #7
 800247e:	2b04      	cmp	r3, #4
 8002480:	bf28      	it	cs
 8002482:	2304      	movcs	r3, #4
 8002484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3304      	adds	r3, #4
 800248a:	2b06      	cmp	r3, #6
 800248c:	d902      	bls.n	8002494 <NVIC_EncodePriority+0x30>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3b03      	subs	r3, #3
 8002492:	e000      	b.n	8002496 <NVIC_EncodePriority+0x32>
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	f04f 32ff 	mov.w	r2, #4294967295
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	401a      	ands	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	4313      	orrs	r3, r2
         );
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024dc:	d301      	bcc.n	80024e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024de:	2301      	movs	r3, #1
 80024e0:	e00f      	b.n	8002502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <SysTick_Config+0x40>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ea:	210f      	movs	r1, #15
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	f7ff ff8e 	bl	8002410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <SysTick_Config+0x40>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fa:	4b04      	ldr	r3, [pc, #16]	; (800250c <SysTick_Config+0x40>)
 80024fc:	2207      	movs	r2, #7
 80024fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	e000e010 	.word	0xe000e010

08002510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ff29 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff40 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff90 	bl	8002464 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5f 	bl	8002410 <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002564:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff33 	bl	80023d4 <__NVIC_EnableIRQ>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ffa4 	bl	80024cc <SysTick_Config>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800259e:	4b89      	ldr	r3, [pc, #548]	; (80027c4 <HAL_GPIO_Init+0x234>)
 80025a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025a2:	e194      	b.n	80028ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	2101      	movs	r1, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa01 f303 	lsl.w	r3, r1, r3
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8186 	beq.w	80028c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d005      	beq.n	80025d4 <HAL_GPIO_Init+0x44>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d130      	bne.n	8002636 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800260a:	2201      	movs	r2, #1
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	f003 0201 	and.w	r2, r3, #1
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b03      	cmp	r3, #3
 8002640:	d017      	beq.n	8002672 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	2203      	movs	r2, #3
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d123      	bne.n	80026c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	08da      	lsrs	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3208      	adds	r2, #8
 8002686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	08da      	lsrs	r2, r3, #3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3208      	adds	r2, #8
 80026c0:	69b9      	ldr	r1, [r7, #24]
 80026c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	2203      	movs	r2, #3
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0203 	and.w	r2, r3, #3
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 80e0 	beq.w	80028c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002708:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <HAL_GPIO_Init+0x238>)
 800270a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800270e:	4a2e      	ldr	r2, [pc, #184]	; (80027c8 <HAL_GPIO_Init+0x238>)
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002718:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <HAL_GPIO_Init+0x238>)
 800271a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002726:	4a29      	ldr	r2, [pc, #164]	; (80027cc <HAL_GPIO_Init+0x23c>)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	089b      	lsrs	r3, r3, #2
 800272c:	3302      	adds	r3, #2
 800272e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	220f      	movs	r2, #15
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a20      	ldr	r2, [pc, #128]	; (80027d0 <HAL_GPIO_Init+0x240>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d052      	beq.n	80027f8 <HAL_GPIO_Init+0x268>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1f      	ldr	r2, [pc, #124]	; (80027d4 <HAL_GPIO_Init+0x244>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d031      	beq.n	80027be <HAL_GPIO_Init+0x22e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a1e      	ldr	r2, [pc, #120]	; (80027d8 <HAL_GPIO_Init+0x248>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d02b      	beq.n	80027ba <HAL_GPIO_Init+0x22a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <HAL_GPIO_Init+0x24c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d025      	beq.n	80027b6 <HAL_GPIO_Init+0x226>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <HAL_GPIO_Init+0x250>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01f      	beq.n	80027b2 <HAL_GPIO_Init+0x222>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <HAL_GPIO_Init+0x254>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d019      	beq.n	80027ae <HAL_GPIO_Init+0x21e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a1a      	ldr	r2, [pc, #104]	; (80027e8 <HAL_GPIO_Init+0x258>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <HAL_GPIO_Init+0x21a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a19      	ldr	r2, [pc, #100]	; (80027ec <HAL_GPIO_Init+0x25c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00d      	beq.n	80027a6 <HAL_GPIO_Init+0x216>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <HAL_GPIO_Init+0x260>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d007      	beq.n	80027a2 <HAL_GPIO_Init+0x212>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <HAL_GPIO_Init+0x264>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d101      	bne.n	800279e <HAL_GPIO_Init+0x20e>
 800279a:	2309      	movs	r3, #9
 800279c:	e02d      	b.n	80027fa <HAL_GPIO_Init+0x26a>
 800279e:	230a      	movs	r3, #10
 80027a0:	e02b      	b.n	80027fa <HAL_GPIO_Init+0x26a>
 80027a2:	2308      	movs	r3, #8
 80027a4:	e029      	b.n	80027fa <HAL_GPIO_Init+0x26a>
 80027a6:	2307      	movs	r3, #7
 80027a8:	e027      	b.n	80027fa <HAL_GPIO_Init+0x26a>
 80027aa:	2306      	movs	r3, #6
 80027ac:	e025      	b.n	80027fa <HAL_GPIO_Init+0x26a>
 80027ae:	2305      	movs	r3, #5
 80027b0:	e023      	b.n	80027fa <HAL_GPIO_Init+0x26a>
 80027b2:	2304      	movs	r3, #4
 80027b4:	e021      	b.n	80027fa <HAL_GPIO_Init+0x26a>
 80027b6:	2303      	movs	r3, #3
 80027b8:	e01f      	b.n	80027fa <HAL_GPIO_Init+0x26a>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e01d      	b.n	80027fa <HAL_GPIO_Init+0x26a>
 80027be:	2301      	movs	r3, #1
 80027c0:	e01b      	b.n	80027fa <HAL_GPIO_Init+0x26a>
 80027c2:	bf00      	nop
 80027c4:	58000080 	.word	0x58000080
 80027c8:	58024400 	.word	0x58024400
 80027cc:	58000400 	.word	0x58000400
 80027d0:	58020000 	.word	0x58020000
 80027d4:	58020400 	.word	0x58020400
 80027d8:	58020800 	.word	0x58020800
 80027dc:	58020c00 	.word	0x58020c00
 80027e0:	58021000 	.word	0x58021000
 80027e4:	58021400 	.word	0x58021400
 80027e8:	58021800 	.word	0x58021800
 80027ec:	58021c00 	.word	0x58021c00
 80027f0:	58022000 	.word	0x58022000
 80027f4:	58022400 	.word	0x58022400
 80027f8:	2300      	movs	r3, #0
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	f002 0203 	and.w	r2, r2, #3
 8002800:	0092      	lsls	r2, r2, #2
 8002802:	4093      	lsls	r3, r2
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800280a:	4938      	ldr	r1, [pc, #224]	; (80028ec <HAL_GPIO_Init+0x35c>)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	3302      	adds	r3, #2
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800283e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800286c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	3301      	adds	r3, #1
 80028cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f47f ae63 	bne.w	80025a4 <HAL_GPIO_Init+0x14>
  }
}
 80028de:	bf00      	nop
 80028e0:	bf00      	nop
 80028e2:	3724      	adds	r7, #36	; 0x24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	58000400 	.word	0x58000400

080028f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
 80028fc:	4613      	mov	r3, r2
 80028fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002900:	787b      	ldrb	r3, [r7, #1]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800290c:	e003      	b.n	8002916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	041a      	lsls	r2, r3, #16
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	619a      	str	r2, [r3, #24]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002934:	887a      	ldrh	r2, [r7, #2]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4013      	ands	r3, r2
 800293a:	041a      	lsls	r2, r3, #16
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	43d9      	mvns	r1, r3
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	400b      	ands	r3, r1
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	619a      	str	r2, [r3, #24]
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002960:	4a08      	ldr	r2, [pc, #32]	; (8002984 <HAL_HSEM_FastTake+0x2c>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3320      	adds	r3, #32
 8002966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296a:	4a07      	ldr	r2, [pc, #28]	; (8002988 <HAL_HSEM_FastTake+0x30>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d101      	bne.n	8002974 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e000      	b.n	8002976 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	58026400 	.word	0x58026400
 8002988:	80000300 	.word	0x80000300

0800298c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002996:	4906      	ldr	r1, [pc, #24]	; (80029b0 <HAL_HSEM_Release+0x24>)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	58026400 	.word	0x58026400

080029b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e07f      	b.n	8002ac6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff f986 	bl	8001cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2224      	movs	r2, #36	; 0x24
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d107      	bne.n	8002a2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	e006      	b.n	8002a3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d104      	bne.n	8002a4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_I2C_Init+0x11c>)
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69d9      	ldr	r1, [r3, #28]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1a      	ldr	r2, [r3, #32]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	02008000 	.word	0x02008000

08002ad4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	4608      	mov	r0, r1
 8002ade:	4611      	mov	r1, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	817b      	strh	r3, [r7, #10]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	813b      	strh	r3, [r7, #8]
 8002aea:	4613      	mov	r3, r2
 8002aec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	f040 80f9 	bne.w	8002cee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_I2C_Mem_Write+0x34>
 8002b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0ed      	b.n	8002cf0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_I2C_Mem_Write+0x4e>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e0e6      	b.n	8002cf0 <HAL_I2C_Mem_Write+0x21c>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b2a:	f7ff fbe5 	bl	80022f8 <HAL_GetTick>
 8002b2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	2319      	movs	r3, #25
 8002b36:	2201      	movs	r2, #1
 8002b38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fbcb 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0d1      	b.n	8002cf0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2221      	movs	r2, #33	; 0x21
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2240      	movs	r2, #64	; 0x40
 8002b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a3a      	ldr	r2, [r7, #32]
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b74:	88f8      	ldrh	r0, [r7, #6]
 8002b76:	893a      	ldrh	r2, [r7, #8]
 8002b78:	8979      	ldrh	r1, [r7, #10]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4603      	mov	r3, r0
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fadb 	bl	8003140 <I2C_RequestMemoryWrite>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0a9      	b.n	8002cf0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2bff      	cmp	r3, #255	; 0xff
 8002ba4:	d90e      	bls.n	8002bc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	22ff      	movs	r2, #255	; 0xff
 8002baa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	8979      	ldrh	r1, [r7, #10]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fd33 	bl	8003628 <I2C_TransferConfig>
 8002bc2:	e00f      	b.n	8002be4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	8979      	ldrh	r1, [r7, #10]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fd22 	bl	8003628 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 fbb5 	bl	8003358 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e07b      	b.n	8002cf0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d034      	beq.n	8002c9c <HAL_I2C_Mem_Write+0x1c8>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d130      	bne.n	8002c9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	2200      	movs	r2, #0
 8002c42:	2180      	movs	r1, #128	; 0x80
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fb47 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e04d      	b.n	8002cf0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2bff      	cmp	r3, #255	; 0xff
 8002c5c:	d90e      	bls.n	8002c7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	22ff      	movs	r2, #255	; 0xff
 8002c62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	8979      	ldrh	r1, [r7, #10]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fcd7 	bl	8003628 <I2C_TransferConfig>
 8002c7a:	e00f      	b.n	8002c9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	8979      	ldrh	r1, [r7, #10]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fcc6 	bl	8003628 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d19e      	bne.n	8002be4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fb94 	bl	80033d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e01a      	b.n	8002cf0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_I2C_Mem_Write+0x224>)
 8002cce:	400b      	ands	r3, r1
 8002cd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e000      	b.n	8002cf0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002cee:	2302      	movs	r3, #2
  }
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	fe00e800 	.word	0xfe00e800

08002cfc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	4608      	mov	r0, r1
 8002d06:	4611      	mov	r1, r2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	817b      	strh	r3, [r7, #10]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	813b      	strh	r3, [r7, #8]
 8002d12:	4613      	mov	r3, r2
 8002d14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	f040 80fd 	bne.w	8002f1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_I2C_Mem_Read+0x34>
 8002d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d105      	bne.n	8002d3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0f1      	b.n	8002f20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_I2C_Mem_Read+0x4e>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e0ea      	b.n	8002f20 <HAL_I2C_Mem_Read+0x224>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d52:	f7ff fad1 	bl	80022f8 <HAL_GetTick>
 8002d56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	2319      	movs	r3, #25
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fab7 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0d5      	b.n	8002f20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2222      	movs	r2, #34	; 0x22
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2240      	movs	r2, #64	; 0x40
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a3a      	ldr	r2, [r7, #32]
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d9c:	88f8      	ldrh	r0, [r7, #6]
 8002d9e:	893a      	ldrh	r2, [r7, #8]
 8002da0:	8979      	ldrh	r1, [r7, #10]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	4603      	mov	r3, r0
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fa1b 	bl	80031e8 <I2C_RequestMemoryRead>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0ad      	b.n	8002f20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2bff      	cmp	r3, #255	; 0xff
 8002dcc:	d90e      	bls.n	8002dec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	22ff      	movs	r2, #255	; 0xff
 8002dd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	8979      	ldrh	r1, [r7, #10]
 8002ddc:	4b52      	ldr	r3, [pc, #328]	; (8002f28 <HAL_I2C_Mem_Read+0x22c>)
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 fc1f 	bl	8003628 <I2C_TransferConfig>
 8002dea:	e00f      	b.n	8002e0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	8979      	ldrh	r1, [r7, #10]
 8002dfe:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <HAL_I2C_Mem_Read+0x22c>)
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fc0e 	bl	8003628 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	2200      	movs	r2, #0
 8002e14:	2104      	movs	r1, #4
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fa5e 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e07c      	b.n	8002f20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d034      	beq.n	8002ecc <HAL_I2C_Mem_Read+0x1d0>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d130      	bne.n	8002ecc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	2200      	movs	r2, #0
 8002e72:	2180      	movs	r1, #128	; 0x80
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fa2f 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e04d      	b.n	8002f20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2bff      	cmp	r3, #255	; 0xff
 8002e8c:	d90e      	bls.n	8002eac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	22ff      	movs	r2, #255	; 0xff
 8002e92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	8979      	ldrh	r1, [r7, #10]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fbbf 	bl	8003628 <I2C_TransferConfig>
 8002eaa:	e00f      	b.n	8002ecc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	8979      	ldrh	r1, [r7, #10]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fbae 	bl	8003628 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d19a      	bne.n	8002e0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 fa7c 	bl	80033d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e01a      	b.n	8002f20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_I2C_Mem_Read+0x230>)
 8002efe:	400b      	ands	r3, r1
 8002f00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e000      	b.n	8002f20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f1e:	2302      	movs	r3, #2
  }
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	80002400 	.word	0x80002400
 8002f2c:	fe00e800 	.word	0xfe00e800

08002f30 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	f040 80ef 	bne.w	8003130 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f60:	d101      	bne.n	8002f66 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
 8002f64:	e0e5      	b.n	8003132 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_I2C_IsDeviceReady+0x44>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e0de      	b.n	8003132 <HAL_I2C_IsDeviceReady+0x202>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2224      	movs	r2, #36	; 0x24
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d105      	bne.n	8002f9e <HAL_I2C_IsDeviceReady+0x6e>
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f98:	4b68      	ldr	r3, [pc, #416]	; (800313c <HAL_I2C_IsDeviceReady+0x20c>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	e004      	b.n	8002fa8 <HAL_I2C_IsDeviceReady+0x78>
 8002f9e:	897b      	ldrh	r3, [r7, #10]
 8002fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002fae:	f7ff f9a3 	bl	80022f8 <HAL_GetTick>
 8002fb2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002fe0:	e034      	b.n	800304c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d01a      	beq.n	8003020 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fea:	f7ff f985 	bl	80022f8 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d302      	bcc.n	8003000 <HAL_I2C_IsDeviceReady+0xd0>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10f      	bne.n	8003020 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	f043 0220 	orr.w	r2, r3, #32
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e088      	b.n	8003132 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b20      	cmp	r3, #32
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b10      	cmp	r3, #16
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800304c:	7ffb      	ldrb	r3, [r7, #31]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <HAL_I2C_IsDeviceReady+0x128>
 8003052:	7fbb      	ldrb	r3, [r7, #30]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0c4      	beq.n	8002fe2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b10      	cmp	r3, #16
 8003064:	d01a      	beq.n	800309c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2200      	movs	r2, #0
 800306e:	2120      	movs	r1, #32
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f931 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e058      	b.n	8003132 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2220      	movs	r2, #32
 8003086:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	e04a      	b.n	8003132 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2200      	movs	r2, #0
 80030a4:	2120      	movs	r1, #32
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f916 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e03d      	b.n	8003132 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2210      	movs	r2, #16
 80030bc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2220      	movs	r2, #32
 80030c4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d118      	bne.n	8003100 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030dc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2120      	movs	r1, #32
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f8f5 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e01c      	b.n	8003132 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2220      	movs	r2, #32
 80030fe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	3301      	adds	r3, #1
 8003104:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	f63f af3d 	bhi.w	8002f8a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	02002000 	.word	0x02002000

08003140 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	461a      	mov	r2, r3
 800314e:	4603      	mov	r3, r0
 8003150:	817b      	strh	r3, [r7, #10]
 8003152:	460b      	mov	r3, r1
 8003154:	813b      	strh	r3, [r7, #8]
 8003156:	4613      	mov	r3, r2
 8003158:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	8979      	ldrh	r1, [r7, #10]
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <I2C_RequestMemoryWrite+0xa4>)
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fa5d 	bl	8003628 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	69b9      	ldr	r1, [r7, #24]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f8f0 	bl	8003358 <I2C_WaitOnTXISFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e02c      	b.n	80031dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d105      	bne.n	8003194 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003188:	893b      	ldrh	r3, [r7, #8]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
 8003192:	e015      	b.n	80031c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003194:	893b      	ldrh	r3, [r7, #8]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	b29b      	uxth	r3, r3
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	69b9      	ldr	r1, [r7, #24]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f8d6 	bl	8003358 <I2C_WaitOnTXISFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e012      	b.n	80031dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031b6:	893b      	ldrh	r3, [r7, #8]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2200      	movs	r2, #0
 80031c8:	2180      	movs	r1, #128	; 0x80
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f884 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	80002000 	.word	0x80002000

080031e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	4608      	mov	r0, r1
 80031f2:	4611      	mov	r1, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	460b      	mov	r3, r1
 80031fc:	813b      	strh	r3, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	8979      	ldrh	r1, [r7, #10]
 8003208:	4b20      	ldr	r3, [pc, #128]	; (800328c <I2C_RequestMemoryRead+0xa4>)
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2300      	movs	r3, #0
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fa0a 	bl	8003628 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	69b9      	ldr	r1, [r7, #24]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f89d 	bl	8003358 <I2C_WaitOnTXISFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e02c      	b.n	8003282 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d105      	bne.n	800323a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800322e:	893b      	ldrh	r3, [r7, #8]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
 8003238:	e015      	b.n	8003266 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800323a:	893b      	ldrh	r3, [r7, #8]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	b29b      	uxth	r3, r3
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	69b9      	ldr	r1, [r7, #24]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f883 	bl	8003358 <I2C_WaitOnTXISFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e012      	b.n	8003282 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800325c:	893b      	ldrh	r3, [r7, #8]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2200      	movs	r2, #0
 800326e:	2140      	movs	r1, #64	; 0x40
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f831 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	80002000 	.word	0x80002000

08003290 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d103      	bne.n	80032ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2200      	movs	r2, #0
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d007      	beq.n	80032cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	619a      	str	r2, [r3, #24]
  }
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032e8:	e022      	b.n	8003330 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d01e      	beq.n	8003330 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	f7ff f801 	bl	80022f8 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d113      	bne.n	8003330 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e00f      	b.n	8003350 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4013      	ands	r3, r2
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	429a      	cmp	r2, r3
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	429a      	cmp	r2, r3
 800334c:	d0cd      	beq.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003364:	e02c      	b.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f870 	bl	8003450 <I2C_IsErrorOccurred>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e02a      	b.n	80033d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d01e      	beq.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003382:	f7fe ffb9 	bl	80022f8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	429a      	cmp	r2, r3
 8003390:	d302      	bcc.n	8003398 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d113      	bne.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e007      	b.n	80033d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d1cb      	bne.n	8003366 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e4:	e028      	b.n	8003438 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f830 	bl	8003450 <I2C_IsErrorOccurred>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e026      	b.n	8003448 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fa:	f7fe ff7d 	bl	80022f8 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	d302      	bcc.n	8003410 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d113      	bne.n	8003438 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e007      	b.n	8003448 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b20      	cmp	r3, #32
 8003444:	d1cf      	bne.n	80033e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d075      	beq.n	8003568 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2210      	movs	r2, #16
 8003482:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003484:	e056      	b.n	8003534 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d052      	beq.n	8003534 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800348e:	f7fe ff33 	bl	80022f8 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	429a      	cmp	r2, r3
 800349c:	d302      	bcc.n	80034a4 <I2C_IsErrorOccurred+0x54>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d147      	bne.n	8003534 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c6:	d12e      	bne.n	8003526 <I2C_IsErrorOccurred+0xd6>
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034ce:	d02a      	beq.n	8003526 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d027      	beq.n	8003526 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034e6:	f7fe ff07 	bl	80022f8 <HAL_GetTick>
 80034ea:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ec:	e01b      	b.n	8003526 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034ee:	f7fe ff03 	bl	80022f8 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b19      	cmp	r3, #25
 80034fa:	d914      	bls.n	8003526 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	f043 0220 	orr.w	r2, r3, #32
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b20      	cmp	r3, #32
 8003532:	d1dc      	bne.n	80034ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b20      	cmp	r3, #32
 8003540:	d003      	beq.n	800354a <I2C_IsErrorOccurred+0xfa>
 8003542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003546:	2b00      	cmp	r3, #0
 8003548:	d09d      	beq.n	8003486 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800354a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2220      	movs	r2, #32
 8003558:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800358a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	f043 0308 	orr.w	r3, r3, #8
 80035a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	f043 0302 	orr.w	r3, r3, #2
 80035c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80035d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01c      	beq.n	8003618 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f7ff fe56 	bl	8003290 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6859      	ldr	r1, [r3, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <I2C_IsErrorOccurred+0x1d4>)
 80035f0:	400b      	ands	r3, r1
 80035f2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800361c:	4618      	mov	r0, r3
 800361e:	3728      	adds	r7, #40	; 0x28
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	fe00e800 	.word	0xfe00e800

08003628 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	817b      	strh	r3, [r7, #10]
 8003636:	4613      	mov	r3, r2
 8003638:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800363a:	897b      	ldrh	r3, [r7, #10]
 800363c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003640:	7a7b      	ldrb	r3, [r7, #9]
 8003642:	041b      	lsls	r3, r3, #16
 8003644:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003648:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	4313      	orrs	r3, r2
 8003652:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003656:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	0d5b      	lsrs	r3, r3, #21
 8003662:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <I2C_TransferConfig+0x60>)
 8003668:	430b      	orrs	r3, r1
 800366a:	43db      	mvns	r3, r3
 800366c:	ea02 0103 	and.w	r1, r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	03ff63ff 	.word	0x03ff63ff

0800368c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d138      	bne.n	8003714 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e032      	b.n	8003716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2224      	movs	r2, #36	; 0x24
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	e000      	b.n	8003716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003714:	2302      	movs	r3, #2
  }
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b20      	cmp	r3, #32
 8003736:	d139      	bne.n	80037ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003742:	2302      	movs	r3, #2
 8003744:	e033      	b.n	80037ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2224      	movs	r2, #36	; 0x24
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003774:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e000      	b.n	80037ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80037c4:	4b29      	ldr	r3, [pc, #164]	; (800386c <HAL_PWREx_ConfigSupply+0xb0>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	2b06      	cmp	r3, #6
 80037ce:	d00a      	beq.n	80037e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037d0:	4b26      	ldr	r3, [pc, #152]	; (800386c <HAL_PWREx_ConfigSupply+0xb0>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d001      	beq.n	80037e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e040      	b.n	8003864 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e03e      	b.n	8003864 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037e6:	4b21      	ldr	r3, [pc, #132]	; (800386c <HAL_PWREx_ConfigSupply+0xb0>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80037ee:	491f      	ldr	r1, [pc, #124]	; (800386c <HAL_PWREx_ConfigSupply+0xb0>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037f6:	f7fe fd7f 	bl	80022f8 <HAL_GetTick>
 80037fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037fc:	e009      	b.n	8003812 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037fe:	f7fe fd7b 	bl	80022f8 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800380c:	d901      	bls.n	8003812 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e028      	b.n	8003864 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003812:	4b16      	ldr	r3, [pc, #88]	; (800386c <HAL_PWREx_ConfigSupply+0xb0>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800381a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381e:	d1ee      	bne.n	80037fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b1e      	cmp	r3, #30
 8003824:	d008      	beq.n	8003838 <HAL_PWREx_ConfigSupply+0x7c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b2e      	cmp	r3, #46	; 0x2e
 800382a:	d005      	beq.n	8003838 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b1d      	cmp	r3, #29
 8003830:	d002      	beq.n	8003838 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b2d      	cmp	r3, #45	; 0x2d
 8003836:	d114      	bne.n	8003862 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003838:	f7fe fd5e 	bl	80022f8 <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800383e:	e009      	b.n	8003854 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003840:	f7fe fd5a 	bl	80022f8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800384e:	d901      	bls.n	8003854 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e007      	b.n	8003864 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_PWREx_ConfigSupply+0xb0>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003860:	d1ee      	bne.n	8003840 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	58024800 	.word	0x58024800

08003870 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08c      	sub	sp, #48	; 0x30
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f000 bc1d 	b.w	80040be <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8087 	beq.w	80039a0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003892:	4b99      	ldr	r3, [pc, #612]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800389c:	4b96      	ldr	r3, [pc, #600]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d007      	beq.n	80038b8 <HAL_RCC_OscConfig+0x48>
 80038a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038aa:	2b18      	cmp	r3, #24
 80038ac:	d110      	bne.n	80038d0 <HAL_RCC_OscConfig+0x60>
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	4b8f      	ldr	r3, [pc, #572]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d06c      	beq.n	800399e <HAL_RCC_OscConfig+0x12e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d168      	bne.n	800399e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e3f6      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d8:	d106      	bne.n	80038e8 <HAL_RCC_OscConfig+0x78>
 80038da:	4b87      	ldr	r3, [pc, #540]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a86      	ldr	r2, [pc, #536]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e02e      	b.n	8003946 <HAL_RCC_OscConfig+0xd6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10c      	bne.n	800390a <HAL_RCC_OscConfig+0x9a>
 80038f0:	4b81      	ldr	r3, [pc, #516]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a80      	ldr	r2, [pc, #512]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 80038f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b7e      	ldr	r3, [pc, #504]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a7d      	ldr	r2, [pc, #500]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	e01d      	b.n	8003946 <HAL_RCC_OscConfig+0xd6>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003912:	d10c      	bne.n	800392e <HAL_RCC_OscConfig+0xbe>
 8003914:	4b78      	ldr	r3, [pc, #480]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a77      	ldr	r2, [pc, #476]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 800391a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	4b75      	ldr	r3, [pc, #468]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a74      	ldr	r2, [pc, #464]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	e00b      	b.n	8003946 <HAL_RCC_OscConfig+0xd6>
 800392e:	4b72      	ldr	r3, [pc, #456]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a71      	ldr	r2, [pc, #452]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b6f      	ldr	r3, [pc, #444]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6e      	ldr	r2, [pc, #440]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003944:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d013      	beq.n	8003976 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394e:	f7fe fcd3 	bl	80022f8 <HAL_GetTick>
 8003952:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003956:	f7fe fccf 	bl	80022f8 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b64      	cmp	r3, #100	; 0x64
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e3aa      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003968:	4b63      	ldr	r3, [pc, #396]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0xe6>
 8003974:	e014      	b.n	80039a0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003976:	f7fe fcbf 	bl	80022f8 <HAL_GetTick>
 800397a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800397e:	f7fe fcbb 	bl	80022f8 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b64      	cmp	r3, #100	; 0x64
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e396      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003990:	4b59      	ldr	r3, [pc, #356]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f0      	bne.n	800397e <HAL_RCC_OscConfig+0x10e>
 800399c:	e000      	b.n	80039a0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80cb 	beq.w	8003b44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ae:	4b52      	ldr	r3, [pc, #328]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039b8:	4b4f      	ldr	r3, [pc, #316]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <HAL_RCC_OscConfig+0x164>
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	2b18      	cmp	r3, #24
 80039c8:	d156      	bne.n	8003a78 <HAL_RCC_OscConfig+0x208>
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d151      	bne.n	8003a78 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d4:	4b48      	ldr	r3, [pc, #288]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_OscConfig+0x17c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e368      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039ec:	4b42      	ldr	r3, [pc, #264]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f023 0219 	bic.w	r2, r3, #25
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	493f      	ldr	r1, [pc, #252]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039fe:	f7fe fc7b 	bl	80022f8 <HAL_GetTick>
 8003a02:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a06:	f7fe fc77 	bl	80022f8 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e352      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a18:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	f7fe fc98 	bl	8002358 <HAL_GetREVID>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d817      	bhi.n	8003a62 <HAL_RCC_OscConfig+0x1f2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	d108      	bne.n	8003a4c <HAL_RCC_OscConfig+0x1dc>
 8003a3a:	4b2f      	ldr	r3, [pc, #188]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a42:	4a2d      	ldr	r2, [pc, #180]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a48:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a4a:	e07b      	b.n	8003b44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	031b      	lsls	r3, r3, #12
 8003a5a:	4927      	ldr	r1, [pc, #156]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a60:	e070      	b.n	8003b44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	4b25      	ldr	r3, [pc, #148]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	061b      	lsls	r3, r3, #24
 8003a70:	4921      	ldr	r1, [pc, #132]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a76:	e065      	b.n	8003b44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d048      	beq.n	8003b12 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a80:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 0219 	bic.w	r2, r3, #25
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	491a      	ldr	r1, [pc, #104]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a92:	f7fe fc31 	bl	80022f8 <HAL_GetTick>
 8003a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9a:	f7fe fc2d 	bl	80022f8 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e308      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aac:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab8:	f7fe fc4e 	bl	8002358 <HAL_GetREVID>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d81a      	bhi.n	8003afc <HAL_RCC_OscConfig+0x28c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d108      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x270>
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ad6:	4a08      	ldr	r2, [pc, #32]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003adc:	6053      	str	r3, [r2, #4]
 8003ade:	e031      	b.n	8003b44 <HAL_RCC_OscConfig+0x2d4>
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	031b      	lsls	r3, r3, #12
 8003aee:	4902      	ldr	r1, [pc, #8]	; (8003af8 <HAL_RCC_OscConfig+0x288>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
 8003af4:	e026      	b.n	8003b44 <HAL_RCC_OscConfig+0x2d4>
 8003af6:	bf00      	nop
 8003af8:	58024400 	.word	0x58024400
 8003afc:	4b9a      	ldr	r3, [pc, #616]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	4997      	ldr	r1, [pc, #604]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
 8003b10:	e018      	b.n	8003b44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b12:	4b95      	ldr	r3, [pc, #596]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a94      	ldr	r2, [pc, #592]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1e:	f7fe fbeb 	bl	80022f8 <HAL_GetTick>
 8003b22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b26:	f7fe fbe7 	bl	80022f8 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e2c2      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b38:	4b8b      	ldr	r3, [pc, #556]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80a9 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b52:	4b85      	ldr	r3, [pc, #532]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b5c:	4b82      	ldr	r3, [pc, #520]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d007      	beq.n	8003b78 <HAL_RCC_OscConfig+0x308>
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b18      	cmp	r3, #24
 8003b6c:	d13a      	bne.n	8003be4 <HAL_RCC_OscConfig+0x374>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d135      	bne.n	8003be4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b78:	4b7b      	ldr	r3, [pc, #492]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_OscConfig+0x320>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	2b80      	cmp	r3, #128	; 0x80
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e296      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b90:	f7fe fbe2 	bl	8002358 <HAL_GetREVID>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d817      	bhi.n	8003bce <HAL_RCC_OscConfig+0x35e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d108      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x348>
 8003ba6:	4b70      	ldr	r3, [pc, #448]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003bae:	4a6e      	ldr	r2, [pc, #440]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003bb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bb4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bb6:	e075      	b.n	8003ca4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bb8:	4b6b      	ldr	r3, [pc, #428]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	069b      	lsls	r3, r3, #26
 8003bc6:	4968      	ldr	r1, [pc, #416]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bcc:	e06a      	b.n	8003ca4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bce:	4b66      	ldr	r3, [pc, #408]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	061b      	lsls	r3, r3, #24
 8003bdc:	4962      	ldr	r1, [pc, #392]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003be2:	e05f      	b.n	8003ca4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d042      	beq.n	8003c72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003bec:	4b5e      	ldr	r3, [pc, #376]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a5d      	ldr	r2, [pc, #372]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fb7e 	bl	80022f8 <HAL_GetTick>
 8003bfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c00:	f7fe fb7a 	bl	80022f8 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e255      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c12:	4b55      	ldr	r3, [pc, #340]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c1e:	f7fe fb9b 	bl	8002358 <HAL_GetREVID>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d817      	bhi.n	8003c5c <HAL_RCC_OscConfig+0x3ec>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d108      	bne.n	8003c46 <HAL_RCC_OscConfig+0x3d6>
 8003c34:	4b4c      	ldr	r3, [pc, #304]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c3c:	4a4a      	ldr	r2, [pc, #296]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003c3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c42:	6053      	str	r3, [r2, #4]
 8003c44:	e02e      	b.n	8003ca4 <HAL_RCC_OscConfig+0x434>
 8003c46:	4b48      	ldr	r3, [pc, #288]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	069b      	lsls	r3, r3, #26
 8003c54:	4944      	ldr	r1, [pc, #272]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]
 8003c5a:	e023      	b.n	8003ca4 <HAL_RCC_OscConfig+0x434>
 8003c5c:	4b42      	ldr	r3, [pc, #264]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	061b      	lsls	r3, r3, #24
 8003c6a:	493f      	ldr	r1, [pc, #252]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60cb      	str	r3, [r1, #12]
 8003c70:	e018      	b.n	8003ca4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c72:	4b3d      	ldr	r3, [pc, #244]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a3c      	ldr	r2, [pc, #240]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7e:	f7fe fb3b 	bl	80022f8 <HAL_GetTick>
 8003c82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c86:	f7fe fb37 	bl	80022f8 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e212      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c98:	4b33      	ldr	r3, [pc, #204]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f0      	bne.n	8003c86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d036      	beq.n	8003d1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d019      	beq.n	8003cec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cbc:	4a2a      	ldr	r2, [pc, #168]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7fe fb18 	bl	80022f8 <HAL_GetTick>
 8003cc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ccc:	f7fe fb14 	bl	80022f8 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e1ef      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x45c>
 8003cea:	e018      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cec:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fe fafe 	bl	80022f8 <HAL_GetTick>
 8003cfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d00:	f7fe fafa 	bl	80022f8 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e1d5      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d039      	beq.n	8003d9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01c      	beq.n	8003d6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d32:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a0c      	ldr	r2, [pc, #48]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003d38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d3e:	f7fe fadb 	bl	80022f8 <HAL_GetTick>
 8003d42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d46:	f7fe fad7 	bl	80022f8 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e1b2      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d58:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <HAL_RCC_OscConfig+0x4f8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x4d6>
 8003d64:	e01b      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
 8003d66:	bf00      	nop
 8003d68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d6c:	4b9b      	ldr	r3, [pc, #620]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a9a      	ldr	r2, [pc, #616]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d78:	f7fe fabe 	bl	80022f8 <HAL_GetTick>
 8003d7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d80:	f7fe faba 	bl	80022f8 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e195      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d92:	4b92      	ldr	r3, [pc, #584]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 8081 	beq.w	8003eae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dac:	4b8c      	ldr	r3, [pc, #560]	; (8003fe0 <HAL_RCC_OscConfig+0x770>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a8b      	ldr	r2, [pc, #556]	; (8003fe0 <HAL_RCC_OscConfig+0x770>)
 8003db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003db8:	f7fe fa9e 	bl	80022f8 <HAL_GetTick>
 8003dbc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dc0:	f7fe fa9a 	bl	80022f8 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	; 0x64
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e175      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dd2:	4b83      	ldr	r3, [pc, #524]	; (8003fe0 <HAL_RCC_OscConfig+0x770>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d106      	bne.n	8003df4 <HAL_RCC_OscConfig+0x584>
 8003de6:	4b7d      	ldr	r3, [pc, #500]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	4a7c      	ldr	r2, [pc, #496]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	6713      	str	r3, [r2, #112]	; 0x70
 8003df2:	e02d      	b.n	8003e50 <HAL_RCC_OscConfig+0x5e0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10c      	bne.n	8003e16 <HAL_RCC_OscConfig+0x5a6>
 8003dfc:	4b77      	ldr	r3, [pc, #476]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4a76      	ldr	r2, [pc, #472]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003e02:	f023 0301 	bic.w	r3, r3, #1
 8003e06:	6713      	str	r3, [r2, #112]	; 0x70
 8003e08:	4b74      	ldr	r3, [pc, #464]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	4a73      	ldr	r2, [pc, #460]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003e0e:	f023 0304 	bic.w	r3, r3, #4
 8003e12:	6713      	str	r3, [r2, #112]	; 0x70
 8003e14:	e01c      	b.n	8003e50 <HAL_RCC_OscConfig+0x5e0>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x5c8>
 8003e1e:	4b6f      	ldr	r3, [pc, #444]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a6e      	ldr	r2, [pc, #440]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003e24:	f043 0304 	orr.w	r3, r3, #4
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	4b6c      	ldr	r3, [pc, #432]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a6b      	ldr	r2, [pc, #428]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70
 8003e36:	e00b      	b.n	8003e50 <HAL_RCC_OscConfig+0x5e0>
 8003e38:	4b68      	ldr	r3, [pc, #416]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a67      	ldr	r2, [pc, #412]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
 8003e44:	4b65      	ldr	r3, [pc, #404]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	4a64      	ldr	r2, [pc, #400]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003e4a:	f023 0304 	bic.w	r3, r3, #4
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d015      	beq.n	8003e84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fe fa4e 	bl	80022f8 <HAL_GetTick>
 8003e5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e60:	f7fe fa4a 	bl	80022f8 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e123      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e76:	4b59      	ldr	r3, [pc, #356]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0ee      	beq.n	8003e60 <HAL_RCC_OscConfig+0x5f0>
 8003e82:	e014      	b.n	8003eae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e84:	f7fe fa38 	bl	80022f8 <HAL_GetTick>
 8003e88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e8c:	f7fe fa34 	bl	80022f8 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e10d      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ea2:	4b4e      	ldr	r3, [pc, #312]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1ee      	bne.n	8003e8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 8102 	beq.w	80040bc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003eb8:	4b48      	ldr	r3, [pc, #288]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ec0:	2b18      	cmp	r3, #24
 8003ec2:	f000 80bd 	beq.w	8004040 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	f040 809e 	bne.w	800400c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed0:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a41      	ldr	r2, [pc, #260]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fe fa0c 	bl	80022f8 <HAL_GetTick>
 8003ee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fe fa08 	bl	80022f8 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e0e3      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f02:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f06:	4b37      	ldr	r3, [pc, #220]	; (8003fe4 <HAL_RCC_OscConfig+0x774>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f12:	0112      	lsls	r2, r2, #4
 8003f14:	430a      	orrs	r2, r1
 8003f16:	4931      	ldr	r1, [pc, #196]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	628b      	str	r3, [r1, #40]	; 0x28
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	3b01      	subs	r3, #1
 8003f22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	025b      	lsls	r3, r3, #9
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	3b01      	subs	r3, #1
 8003f38:	041b      	lsls	r3, r3, #16
 8003f3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	3b01      	subs	r3, #1
 8003f46:	061b      	lsls	r3, r3, #24
 8003f48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f4c:	4923      	ldr	r1, [pc, #140]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003f52:	4b22      	ldr	r3, [pc, #136]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f5e:	4b1f      	ldr	r3, [pc, #124]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f62:	4b21      	ldr	r3, [pc, #132]	; (8003fe8 <HAL_RCC_OscConfig+0x778>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f6a:	00d2      	lsls	r2, r2, #3
 8003f6c:	491b      	ldr	r1, [pc, #108]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f72:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	f023 020c 	bic.w	r2, r3, #12
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	4917      	ldr	r1, [pc, #92]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f84:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	f023 0202 	bic.w	r2, r3, #2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f90:	4912      	ldr	r1, [pc, #72]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	4a10      	ldr	r2, [pc, #64]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	4a0d      	ldr	r2, [pc, #52]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	4a07      	ldr	r2, [pc, #28]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <HAL_RCC_OscConfig+0x76c>)
 8003fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fe f991 	bl	80022f8 <HAL_GetTick>
 8003fd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fd8:	e011      	b.n	8003ffe <HAL_RCC_OscConfig+0x78e>
 8003fda:	bf00      	nop
 8003fdc:	58024400 	.word	0x58024400
 8003fe0:	58024800 	.word	0x58024800
 8003fe4:	fffffc0c 	.word	0xfffffc0c
 8003fe8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fe f984 	bl	80022f8 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e05f      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ffe:	4b32      	ldr	r3, [pc, #200]	; (80040c8 <HAL_RCC_OscConfig+0x858>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x77c>
 800400a:	e057      	b.n	80040bc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400c:	4b2e      	ldr	r3, [pc, #184]	; (80040c8 <HAL_RCC_OscConfig+0x858>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a2d      	ldr	r2, [pc, #180]	; (80040c8 <HAL_RCC_OscConfig+0x858>)
 8004012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fe f96e 	bl	80022f8 <HAL_GetTick>
 800401c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004020:	f7fe f96a 	bl	80022f8 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e045      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004032:	4b25      	ldr	r3, [pc, #148]	; (80040c8 <HAL_RCC_OscConfig+0x858>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x7b0>
 800403e:	e03d      	b.n	80040bc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004040:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <HAL_RCC_OscConfig+0x858>)
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004046:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <HAL_RCC_OscConfig+0x858>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	2b01      	cmp	r3, #1
 8004052:	d031      	beq.n	80040b8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f003 0203 	and.w	r2, r3, #3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d12a      	bne.n	80040b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d122      	bne.n	80040b8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d11a      	bne.n	80040b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	0a5b      	lsrs	r3, r3, #9
 8004086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d111      	bne.n	80040b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	0c1b      	lsrs	r3, r3, #16
 8004098:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d108      	bne.n	80040b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	0e1b      	lsrs	r3, r3, #24
 80040aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3730      	adds	r7, #48	; 0x30
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	58024400 	.word	0x58024400

080040cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e19c      	b.n	800441a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e0:	4b8a      	ldr	r3, [pc, #552]	; (800430c <HAL_RCC_ClockConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d910      	bls.n	8004110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b87      	ldr	r3, [pc, #540]	; (800430c <HAL_RCC_ClockConfig+0x240>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 020f 	bic.w	r2, r3, #15
 80040f6:	4985      	ldr	r1, [pc, #532]	; (800430c <HAL_RCC_ClockConfig+0x240>)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fe:	4b83      	ldr	r3, [pc, #524]	; (800430c <HAL_RCC_ClockConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e184      	b.n	800441a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d010      	beq.n	800413e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	4b7b      	ldr	r3, [pc, #492]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004128:	429a      	cmp	r2, r3
 800412a:	d908      	bls.n	800413e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800412c:	4b78      	ldr	r3, [pc, #480]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	4975      	ldr	r1, [pc, #468]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 800413a:	4313      	orrs	r3, r2
 800413c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d010      	beq.n	800416c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	4b70      	ldr	r3, [pc, #448]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004156:	429a      	cmp	r2, r3
 8004158:	d908      	bls.n	800416c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800415a:	4b6d      	ldr	r3, [pc, #436]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	496a      	ldr	r1, [pc, #424]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 8004168:	4313      	orrs	r3, r2
 800416a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b00      	cmp	r3, #0
 8004176:	d010      	beq.n	800419a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699a      	ldr	r2, [r3, #24]
 800417c:	4b64      	ldr	r3, [pc, #400]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004184:	429a      	cmp	r2, r3
 8004186:	d908      	bls.n	800419a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004188:	4b61      	ldr	r3, [pc, #388]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	495e      	ldr	r1, [pc, #376]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 8004196:	4313      	orrs	r3, r2
 8004198:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d010      	beq.n	80041c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69da      	ldr	r2, [r3, #28]
 80041aa:	4b59      	ldr	r3, [pc, #356]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d908      	bls.n	80041c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80041b6:	4b56      	ldr	r3, [pc, #344]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	4953      	ldr	r1, [pc, #332]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	4b4d      	ldr	r3, [pc, #308]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d908      	bls.n	80041f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e4:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f023 020f 	bic.w	r2, r3, #15
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4947      	ldr	r1, [pc, #284]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d055      	beq.n	80042ae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004202:	4b43      	ldr	r3, [pc, #268]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	4940      	ldr	r1, [pc, #256]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 8004210:	4313      	orrs	r3, r2
 8004212:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d107      	bne.n	800422c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800421c:	4b3c      	ldr	r3, [pc, #240]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d121      	bne.n	800426c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0f6      	b.n	800441a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d107      	bne.n	8004244 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004234:	4b36      	ldr	r3, [pc, #216]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d115      	bne.n	800426c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0ea      	b.n	800441a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d107      	bne.n	800425c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800424c:	4b30      	ldr	r3, [pc, #192]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d109      	bne.n	800426c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0de      	b.n	800441a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800425c:	4b2c      	ldr	r3, [pc, #176]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0d6      	b.n	800441a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800426c:	4b28      	ldr	r3, [pc, #160]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f023 0207 	bic.w	r2, r3, #7
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4925      	ldr	r1, [pc, #148]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 800427a:	4313      	orrs	r3, r2
 800427c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427e:	f7fe f83b 	bl	80022f8 <HAL_GetTick>
 8004282:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004284:	e00a      	b.n	800429c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004286:	f7fe f837 	bl	80022f8 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	; 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d901      	bls.n	800429c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e0be      	b.n	800441a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429c:	4b1c      	ldr	r3, [pc, #112]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d1eb      	bne.n	8004286 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d010      	beq.n	80042dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	4b14      	ldr	r3, [pc, #80]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d208      	bcs.n	80042dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f023 020f 	bic.w	r2, r3, #15
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	490e      	ldr	r1, [pc, #56]	; (8004310 <HAL_RCC_ClockConfig+0x244>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_RCC_ClockConfig+0x240>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d214      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_RCC_ClockConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 020f 	bic.w	r2, r3, #15
 80042f2:	4906      	ldr	r1, [pc, #24]	; (800430c <HAL_RCC_ClockConfig+0x240>)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_RCC_ClockConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d005      	beq.n	8004314 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e086      	b.n	800441a <HAL_RCC_ClockConfig+0x34e>
 800430c:	52002000 	.word	0x52002000
 8004310:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d010      	beq.n	8004342 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	4b3f      	ldr	r3, [pc, #252]	; (8004424 <HAL_RCC_ClockConfig+0x358>)
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800432c:	429a      	cmp	r2, r3
 800432e:	d208      	bcs.n	8004342 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004330:	4b3c      	ldr	r3, [pc, #240]	; (8004424 <HAL_RCC_ClockConfig+0x358>)
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	4939      	ldr	r1, [pc, #228]	; (8004424 <HAL_RCC_ClockConfig+0x358>)
 800433e:	4313      	orrs	r3, r2
 8004340:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d010      	beq.n	8004370 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	4b34      	ldr	r3, [pc, #208]	; (8004424 <HAL_RCC_ClockConfig+0x358>)
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800435a:	429a      	cmp	r2, r3
 800435c:	d208      	bcs.n	8004370 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800435e:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCC_ClockConfig+0x358>)
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	492e      	ldr	r1, [pc, #184]	; (8004424 <HAL_RCC_ClockConfig+0x358>)
 800436c:	4313      	orrs	r3, r2
 800436e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	d010      	beq.n	800439e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699a      	ldr	r2, [r3, #24]
 8004380:	4b28      	ldr	r3, [pc, #160]	; (8004424 <HAL_RCC_ClockConfig+0x358>)
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004388:	429a      	cmp	r2, r3
 800438a:	d208      	bcs.n	800439e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800438c:	4b25      	ldr	r3, [pc, #148]	; (8004424 <HAL_RCC_ClockConfig+0x358>)
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	4922      	ldr	r1, [pc, #136]	; (8004424 <HAL_RCC_ClockConfig+0x358>)
 800439a:	4313      	orrs	r3, r2
 800439c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d010      	beq.n	80043cc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69da      	ldr	r2, [r3, #28]
 80043ae:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <HAL_RCC_ClockConfig+0x358>)
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d208      	bcs.n	80043cc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80043ba:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <HAL_RCC_ClockConfig+0x358>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	4917      	ldr	r1, [pc, #92]	; (8004424 <HAL_RCC_ClockConfig+0x358>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043cc:	f000 f834 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 80043d0:	4602      	mov	r2, r0
 80043d2:	4b14      	ldr	r3, [pc, #80]	; (8004424 <HAL_RCC_ClockConfig+0x358>)
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	4912      	ldr	r1, [pc, #72]	; (8004428 <HAL_RCC_ClockConfig+0x35c>)
 80043de:	5ccb      	ldrb	r3, [r1, r3]
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	fa22 f303 	lsr.w	r3, r2, r3
 80043e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043ea:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <HAL_RCC_ClockConfig+0x358>)
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	4a0d      	ldr	r2, [pc, #52]	; (8004428 <HAL_RCC_ClockConfig+0x35c>)
 80043f4:	5cd3      	ldrb	r3, [r2, r3]
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004400:	4a0a      	ldr	r2, [pc, #40]	; (800442c <HAL_RCC_ClockConfig+0x360>)
 8004402:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004404:	4a0a      	ldr	r2, [pc, #40]	; (8004430 <HAL_RCC_ClockConfig+0x364>)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800440a:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <HAL_RCC_ClockConfig+0x368>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7fd ff28 	bl	8002264 <HAL_InitTick>
 8004414:	4603      	mov	r3, r0
 8004416:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	58024400 	.word	0x58024400
 8004428:	0800e6fc 	.word	0x0800e6fc
 800442c:	24000004 	.word	0x24000004
 8004430:	24000000 	.word	0x24000000
 8004434:	2400000c 	.word	0x2400000c

08004438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004438:	b480      	push	{r7}
 800443a:	b089      	sub	sp, #36	; 0x24
 800443c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800443e:	4bb3      	ldr	r3, [pc, #716]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004446:	2b18      	cmp	r3, #24
 8004448:	f200 8155 	bhi.w	80046f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <HAL_RCC_GetSysClockFreq+0x1c>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	080044b9 	.word	0x080044b9
 8004458:	080046f7 	.word	0x080046f7
 800445c:	080046f7 	.word	0x080046f7
 8004460:	080046f7 	.word	0x080046f7
 8004464:	080046f7 	.word	0x080046f7
 8004468:	080046f7 	.word	0x080046f7
 800446c:	080046f7 	.word	0x080046f7
 8004470:	080046f7 	.word	0x080046f7
 8004474:	080044df 	.word	0x080044df
 8004478:	080046f7 	.word	0x080046f7
 800447c:	080046f7 	.word	0x080046f7
 8004480:	080046f7 	.word	0x080046f7
 8004484:	080046f7 	.word	0x080046f7
 8004488:	080046f7 	.word	0x080046f7
 800448c:	080046f7 	.word	0x080046f7
 8004490:	080046f7 	.word	0x080046f7
 8004494:	080044e5 	.word	0x080044e5
 8004498:	080046f7 	.word	0x080046f7
 800449c:	080046f7 	.word	0x080046f7
 80044a0:	080046f7 	.word	0x080046f7
 80044a4:	080046f7 	.word	0x080046f7
 80044a8:	080046f7 	.word	0x080046f7
 80044ac:	080046f7 	.word	0x080046f7
 80044b0:	080046f7 	.word	0x080046f7
 80044b4:	080044eb 	.word	0x080044eb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044b8:	4b94      	ldr	r3, [pc, #592]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044c4:	4b91      	ldr	r3, [pc, #580]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	08db      	lsrs	r3, r3, #3
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	4a90      	ldr	r2, [pc, #576]	; (8004710 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
 80044d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80044d6:	e111      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044d8:	4b8d      	ldr	r3, [pc, #564]	; (8004710 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044da:	61bb      	str	r3, [r7, #24]
    break;
 80044dc:	e10e      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80044de:	4b8d      	ldr	r3, [pc, #564]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044e0:	61bb      	str	r3, [r7, #24]
    break;
 80044e2:	e10b      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80044e4:	4b8c      	ldr	r3, [pc, #560]	; (8004718 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044e6:	61bb      	str	r3, [r7, #24]
    break;
 80044e8:	e108      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044ea:	4b88      	ldr	r3, [pc, #544]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80044f4:	4b85      	ldr	r3, [pc, #532]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	091b      	lsrs	r3, r3, #4
 80044fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044fe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004500:	4b82      	ldr	r3, [pc, #520]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800450a:	4b80      	ldr	r3, [pc, #512]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	08db      	lsrs	r3, r3, #3
 8004510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80e1 	beq.w	80046f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b02      	cmp	r3, #2
 8004532:	f000 8083 	beq.w	800463c <HAL_RCC_GetSysClockFreq+0x204>
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b02      	cmp	r3, #2
 800453a:	f200 80a1 	bhi.w	8004680 <HAL_RCC_GetSysClockFreq+0x248>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x114>
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d056      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800454a:	e099      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800454c:	4b6f      	ldr	r3, [pc, #444]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d02d      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004558:	4b6c      	ldr	r3, [pc, #432]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	08db      	lsrs	r3, r3, #3
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	4a6b      	ldr	r2, [pc, #428]	; (8004710 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
 8004568:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	ee07 3a90 	vmov	s15, r3
 8004570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004582:	4b62      	ldr	r3, [pc, #392]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004592:	ed97 6a02 	vldr	s12, [r7, #8]
 8004596:	eddf 5a61 	vldr	s11, [pc, #388]	; 800471c <HAL_RCC_GetSysClockFreq+0x2e4>
 800459a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80045b2:	e087      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004720 <HAL_RCC_GetSysClockFreq+0x2e8>
 80045c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c6:	4b51      	ldr	r3, [pc, #324]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800471c <HAL_RCC_GetSysClockFreq+0x2e4>
 80045de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045f6:	e065      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	ee07 3a90 	vmov	s15, r3
 80045fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004602:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004724 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460a:	4b40      	ldr	r3, [pc, #256]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461a:	ed97 6a02 	vldr	s12, [r7, #8]
 800461e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800471c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800462e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800463a:	e043      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004646:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004728 <HAL_RCC_GetSysClockFreq+0x2f0>
 800464a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464e:	4b2f      	ldr	r3, [pc, #188]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004662:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800471c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800467e:	e021      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004724 <HAL_RCC_GetSysClockFreq+0x2ec>
 800468e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004692:	4b1e      	ldr	r3, [pc, #120]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800471c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80046c4:	4b11      	ldr	r3, [pc, #68]	; (800470c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	0a5b      	lsrs	r3, r3, #9
 80046ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ce:	3301      	adds	r3, #1
 80046d0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	ee07 3a90 	vmov	s15, r3
 80046d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80046e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e8:	ee17 3a90 	vmov	r3, s15
 80046ec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80046ee:	e005      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61bb      	str	r3, [r7, #24]
    break;
 80046f4:	e002      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80046f6:	4b07      	ldr	r3, [pc, #28]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046f8:	61bb      	str	r3, [r7, #24]
    break;
 80046fa:	bf00      	nop
  }

  return sysclockfreq;
 80046fc:	69bb      	ldr	r3, [r7, #24]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3724      	adds	r7, #36	; 0x24
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	58024400 	.word	0x58024400
 8004710:	03d09000 	.word	0x03d09000
 8004714:	003d0900 	.word	0x003d0900
 8004718:	007a1200 	.word	0x007a1200
 800471c:	46000000 	.word	0x46000000
 8004720:	4c742400 	.word	0x4c742400
 8004724:	4a742400 	.word	0x4a742400
 8004728:	4af42400 	.word	0x4af42400

0800472c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004732:	f7ff fe81 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 8004736:	4602      	mov	r2, r0
 8004738:	4b10      	ldr	r3, [pc, #64]	; (800477c <HAL_RCC_GetHCLKFreq+0x50>)
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	0a1b      	lsrs	r3, r3, #8
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	490f      	ldr	r1, [pc, #60]	; (8004780 <HAL_RCC_GetHCLKFreq+0x54>)
 8004744:	5ccb      	ldrb	r3, [r1, r3]
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	fa22 f303 	lsr.w	r3, r2, r3
 800474e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <HAL_RCC_GetHCLKFreq+0x50>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	4a09      	ldr	r2, [pc, #36]	; (8004780 <HAL_RCC_GetHCLKFreq+0x54>)
 800475a:	5cd3      	ldrb	r3, [r2, r3]
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	fa22 f303 	lsr.w	r3, r2, r3
 8004766:	4a07      	ldr	r2, [pc, #28]	; (8004784 <HAL_RCC_GetHCLKFreq+0x58>)
 8004768:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800476a:	4a07      	ldr	r2, [pc, #28]	; (8004788 <HAL_RCC_GetHCLKFreq+0x5c>)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <HAL_RCC_GetHCLKFreq+0x58>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	58024400 	.word	0x58024400
 8004780:	0800e6fc 	.word	0x0800e6fc
 8004784:	24000004 	.word	0x24000004
 8004788:	24000000 	.word	0x24000000

0800478c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004790:	f7ff ffcc 	bl	800472c <HAL_RCC_GetHCLKFreq>
 8004794:	4602      	mov	r2, r0
 8004796:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	091b      	lsrs	r3, r3, #4
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	4904      	ldr	r1, [pc, #16]	; (80047b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047a2:	5ccb      	ldrb	r3, [r1, r3]
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	58024400 	.word	0x58024400
 80047b4:	0800e6fc 	.word	0x0800e6fc

080047b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80047bc:	f7ff ffb6 	bl	800472c <HAL_RCC_GetHCLKFreq>
 80047c0:	4602      	mov	r2, r0
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	4904      	ldr	r1, [pc, #16]	; (80047e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047ce:	5ccb      	ldrb	r3, [r1, r3]
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80047d8:	4618      	mov	r0, r3
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	58024400 	.word	0x58024400
 80047e0:	0800e6fc 	.word	0x0800e6fc

080047e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047ec:	2300      	movs	r3, #0
 80047ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047f0:	2300      	movs	r3, #0
 80047f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d03f      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004804:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004808:	d02a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800480a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800480e:	d824      	bhi.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004810:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004814:	d018      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800481a:	d81e      	bhi.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004824:	d007      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004826:	e018      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004828:	4ba3      	ldr	r3, [pc, #652]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	4aa2      	ldr	r2, [pc, #648]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800482e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004832:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004834:	e015      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3304      	adds	r3, #4
 800483a:	2102      	movs	r1, #2
 800483c:	4618      	mov	r0, r3
 800483e:	f001 f9d5 	bl	8005bec <RCCEx_PLL2_Config>
 8004842:	4603      	mov	r3, r0
 8004844:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004846:	e00c      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3324      	adds	r3, #36	; 0x24
 800484c:	2102      	movs	r1, #2
 800484e:	4618      	mov	r0, r3
 8004850:	f001 fa7e 	bl	8005d50 <RCCEx_PLL3_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004858:	e003      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	75fb      	strb	r3, [r7, #23]
      break;
 800485e:	e000      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004862:	7dfb      	ldrb	r3, [r7, #23]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004868:	4b93      	ldr	r3, [pc, #588]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800486a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800486c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004874:	4990      	ldr	r1, [pc, #576]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004876:	4313      	orrs	r3, r2
 8004878:	650b      	str	r3, [r1, #80]	; 0x50
 800487a:	e001      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d03d      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004890:	2b04      	cmp	r3, #4
 8004892:	d826      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004894:	a201      	add	r2, pc, #4	; (adr r2, 800489c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048b1 	.word	0x080048b1
 80048a0:	080048bf 	.word	0x080048bf
 80048a4:	080048d1 	.word	0x080048d1
 80048a8:	080048e9 	.word	0x080048e9
 80048ac:	080048e9 	.word	0x080048e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b0:	4b81      	ldr	r3, [pc, #516]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	4a80      	ldr	r2, [pc, #512]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048bc:	e015      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f001 f991 	bl	8005bec <RCCEx_PLL2_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048ce:	e00c      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3324      	adds	r3, #36	; 0x24
 80048d4:	2100      	movs	r1, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f001 fa3a 	bl	8005d50 <RCCEx_PLL3_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048e0:	e003      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	75fb      	strb	r3, [r7, #23]
      break;
 80048e6:	e000      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80048e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ea:	7dfb      	ldrb	r3, [r7, #23]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d109      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048f0:	4b71      	ldr	r3, [pc, #452]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f4:	f023 0207 	bic.w	r2, r3, #7
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fc:	496e      	ldr	r1, [pc, #440]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	650b      	str	r3, [r1, #80]	; 0x50
 8004902:	e001      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004910:	2b00      	cmp	r3, #0
 8004912:	d042      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800491c:	d02b      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800491e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004922:	d825      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004924:	2bc0      	cmp	r3, #192	; 0xc0
 8004926:	d028      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004928:	2bc0      	cmp	r3, #192	; 0xc0
 800492a:	d821      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800492c:	2b80      	cmp	r3, #128	; 0x80
 800492e:	d016      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004930:	2b80      	cmp	r3, #128	; 0x80
 8004932:	d81d      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d007      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800493c:	e018      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800493e:	4b5e      	ldr	r3, [pc, #376]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	4a5d      	ldr	r2, [pc, #372]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004948:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800494a:	e017      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f001 f94a 	bl	8005bec <RCCEx_PLL2_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800495c:	e00e      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3324      	adds	r3, #36	; 0x24
 8004962:	2100      	movs	r1, #0
 8004964:	4618      	mov	r0, r3
 8004966:	f001 f9f3 	bl	8005d50 <RCCEx_PLL3_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800496e:	e005      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	75fb      	strb	r3, [r7, #23]
      break;
 8004974:	e002      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004976:	bf00      	nop
 8004978:	e000      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800497a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800497c:	7dfb      	ldrb	r3, [r7, #23]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004982:	4b4d      	ldr	r3, [pc, #308]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004986:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498e:	494a      	ldr	r1, [pc, #296]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004990:	4313      	orrs	r3, r2
 8004992:	650b      	str	r3, [r1, #80]	; 0x50
 8004994:	e001      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004996:	7dfb      	ldrb	r3, [r7, #23]
 8004998:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d049      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049b0:	d030      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80049b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049b6:	d82a      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80049b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049bc:	d02c      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80049be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049c2:	d824      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80049c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c8:	d018      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80049ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ce:	d81e      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80049d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049d8:	d007      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 80049da:	e018      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049dc:	4b36      	ldr	r3, [pc, #216]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e0:	4a35      	ldr	r2, [pc, #212]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049e8:	e017      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3304      	adds	r3, #4
 80049ee:	2100      	movs	r1, #0
 80049f0:	4618      	mov	r0, r3
 80049f2:	f001 f8fb 	bl	8005bec <RCCEx_PLL2_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80049fa:	e00e      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3324      	adds	r3, #36	; 0x24
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f001 f9a4 	bl	8005d50 <RCCEx_PLL3_Config>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a0c:	e005      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
      break;
 8004a12:	e002      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a14:	bf00      	nop
 8004a16:	e000      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10a      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a20:	4b25      	ldr	r3, [pc, #148]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a24:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a2e:	4922      	ldr	r1, [pc, #136]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	658b      	str	r3, [r1, #88]	; 0x58
 8004a34:	e001      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d04b      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a50:	d030      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004a52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a56:	d82a      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a5c:	d02e      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004a5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a62:	d824      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a68:	d018      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004a6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a6e:	d81e      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a78:	d007      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004a7a:	e018      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a7c:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	4a0d      	ldr	r2, [pc, #52]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a88:	e019      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f001 f8ab 	bl	8005bec <RCCEx_PLL2_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a9a:	e010      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3324      	adds	r3, #36	; 0x24
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 f954 	bl	8005d50 <RCCEx_PLL3_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004aac:	e007      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab2:	e004      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004ab4:	bf00      	nop
 8004ab6:	e002      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004ab8:	58024400 	.word	0x58024400
      break;
 8004abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004abe:	7dfb      	ldrb	r3, [r7, #23]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ac4:	4b99      	ldr	r3, [pc, #612]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ad2:	4996      	ldr	r1, [pc, #600]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	658b      	str	r3, [r1, #88]	; 0x58
 8004ad8:	e001      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
 8004adc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d032      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aee:	2b30      	cmp	r3, #48	; 0x30
 8004af0:	d01c      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004af2:	2b30      	cmp	r3, #48	; 0x30
 8004af4:	d817      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004af6:	2b20      	cmp	r3, #32
 8004af8:	d00c      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	d813      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d016      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004b02:	2b10      	cmp	r3, #16
 8004b04:	d10f      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b06:	4b89      	ldr	r3, [pc, #548]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	4a88      	ldr	r2, [pc, #544]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b12:	e00e      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3304      	adds	r3, #4
 8004b18:	2102      	movs	r1, #2
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f001 f866 	bl	8005bec <RCCEx_PLL2_Config>
 8004b20:	4603      	mov	r3, r0
 8004b22:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b24:	e005      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
      break;
 8004b2a:	e002      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004b2c:	bf00      	nop
 8004b2e:	e000      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b38:	4b7c      	ldr	r3, [pc, #496]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b44:	4979      	ldr	r1, [pc, #484]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b4a:	e001      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
 8004b4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d047      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b64:	d030      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004b66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b6a:	d82a      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004b6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b70:	d02c      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004b72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b76:	d824      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b7c:	d018      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b82:	d81e      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8c:	d007      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004b8e:	e018      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b90:	4b66      	ldr	r3, [pc, #408]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	4a65      	ldr	r2, [pc, #404]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b9c:	e017      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 f821 	bl	8005bec <RCCEx_PLL2_Config>
 8004baa:	4603      	mov	r3, r0
 8004bac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bae:	e00e      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3324      	adds	r3, #36	; 0x24
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f001 f8ca 	bl	8005d50 <RCCEx_PLL3_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bc0:	e005      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc6:	e002      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004bc8:	bf00      	nop
 8004bca:	e000      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bce:	7dfb      	ldrb	r3, [r7, #23]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d109      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004bd4:	4b55      	ldr	r3, [pc, #340]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be0:	4952      	ldr	r1, [pc, #328]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	650b      	str	r3, [r1, #80]	; 0x50
 8004be6:	e001      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
 8004bea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d049      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c00:	d02e      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004c02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c06:	d828      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c0c:	d02a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004c0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c12:	d822      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c18:	d026      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004c1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c1e:	d81c      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c24:	d010      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c2a:	d816      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01d      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d111      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 ffd5 	bl	8005bec <RCCEx_PLL2_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c46:	e012      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3324      	adds	r3, #36	; 0x24
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f001 f87e 	bl	8005d50 <RCCEx_PLL3_Config>
 8004c54:	4603      	mov	r3, r0
 8004c56:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c58:	e009      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c5e:	e006      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004c60:	bf00      	nop
 8004c62:	e004      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004c64:	bf00      	nop
 8004c66:	e002      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004c68:	bf00      	nop
 8004c6a:	e000      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d109      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c74:	4b2d      	ldr	r3, [pc, #180]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c78:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c80:	492a      	ldr	r1, [pc, #168]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	650b      	str	r3, [r1, #80]	; 0x50
 8004c86:	e001      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c88:	7dfb      	ldrb	r3, [r7, #23]
 8004c8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d04d      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ca2:	d02e      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ca8:	d828      	bhi.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cae:	d02a      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb4:	d822      	bhi.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004cb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cba:	d026      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004cbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cc0:	d81c      	bhi.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004cc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cc6:	d010      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ccc:	d816      	bhi.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01d      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004cd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cd6:	d111      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	2101      	movs	r1, #1
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 ff84 	bl	8005bec <RCCEx_PLL2_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ce8:	e012      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	3324      	adds	r3, #36	; 0x24
 8004cee:	2101      	movs	r1, #1
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f001 f82d 	bl	8005d50 <RCCEx_PLL3_Config>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004cfa:	e009      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8004d00:	e006      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d02:	bf00      	nop
 8004d04:	e004      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d06:	bf00      	nop
 8004d08:	e002      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d0a:	bf00      	nop
 8004d0c:	e000      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d16:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d24:	4901      	ldr	r1, [pc, #4]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	658b      	str	r3, [r1, #88]	; 0x58
 8004d2a:	e003      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004d2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
 8004d32:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d02f      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d48:	d00e      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d4e:	d814      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d015      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004d54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d58:	d10f      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d5a:	4baf      	ldr	r3, [pc, #700]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	4aae      	ldr	r2, [pc, #696]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d66:	e00c      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 ff3c 	bl	8005bec <RCCEx_PLL2_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d78:	e003      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d88:	4ba3      	ldr	r3, [pc, #652]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d94:	49a0      	ldr	r1, [pc, #640]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	650b      	str	r3, [r1, #80]	; 0x50
 8004d9a:	e001      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d032      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d81b      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004db4:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004df3 	.word	0x08004df3
 8004dc0:	08004dcd 	.word	0x08004dcd
 8004dc4:	08004ddb 	.word	0x08004ddb
 8004dc8:	08004df3 	.word	0x08004df3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dcc:	4b92      	ldr	r3, [pc, #584]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	4a91      	ldr	r2, [pc, #580]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004dd8:	e00c      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	2102      	movs	r1, #2
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 ff03 	bl	8005bec <RCCEx_PLL2_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004dea:	e003      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
      break;
 8004df0:	e000      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004dfa:	4b87      	ldr	r3, [pc, #540]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfe:	f023 0203 	bic.w	r2, r3, #3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	4984      	ldr	r1, [pc, #528]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e0c:	e001      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
 8004e10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8086 	beq.w	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e20:	4b7e      	ldr	r3, [pc, #504]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a7d      	ldr	r2, [pc, #500]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e2c:	f7fd fa64 	bl	80022f8 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e32:	e009      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e34:	f7fd fa60 	bl	80022f8 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	; 0x64
 8004e40:	d902      	bls.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	75fb      	strb	r3, [r7, #23]
        break;
 8004e46:	e005      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e48:	4b74      	ldr	r3, [pc, #464]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ef      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d166      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e5a:	4b6f      	ldr	r3, [pc, #444]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e64:	4053      	eors	r3, r2
 8004e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d013      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e6e:	4b6a      	ldr	r3, [pc, #424]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e76:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e78:	4b67      	ldr	r3, [pc, #412]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7c:	4a66      	ldr	r2, [pc, #408]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e82:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e84:	4b64      	ldr	r3, [pc, #400]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e88:	4a63      	ldr	r2, [pc, #396]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e8e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e90:	4a61      	ldr	r2, [pc, #388]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea0:	d115      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea2:	f7fd fa29 	bl	80022f8 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ea8:	e00b      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eaa:	f7fd fa25 	bl	80022f8 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d902      	bls.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	75fb      	strb	r3, [r7, #23]
            break;
 8004ec0:	e005      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ec2:	4b55      	ldr	r3, [pc, #340]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0ed      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004ece:	7dfb      	ldrb	r3, [r7, #23]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d126      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ee2:	d10d      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004ee4:	4b4c      	ldr	r3, [pc, #304]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ef2:	0919      	lsrs	r1, r3, #4
 8004ef4:	4b4a      	ldr	r3, [pc, #296]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004ef6:	400b      	ands	r3, r1
 8004ef8:	4947      	ldr	r1, [pc, #284]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	610b      	str	r3, [r1, #16]
 8004efe:	e005      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004f00:	4b45      	ldr	r3, [pc, #276]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	4a44      	ldr	r2, [pc, #272]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f0a:	6113      	str	r3, [r2, #16]
 8004f0c:	4b42      	ldr	r3, [pc, #264]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1a:	493f      	ldr	r1, [pc, #252]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	670b      	str	r3, [r1, #112]	; 0x70
 8004f20:	e004      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
 8004f24:	75bb      	strb	r3, [r7, #22]
 8004f26:	e001      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8085 	beq.w	8005044 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f3e:	2b28      	cmp	r3, #40	; 0x28
 8004f40:	d866      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08005025 	.word	0x08005025
 8004f4c:	08005011 	.word	0x08005011
 8004f50:	08005011 	.word	0x08005011
 8004f54:	08005011 	.word	0x08005011
 8004f58:	08005011 	.word	0x08005011
 8004f5c:	08005011 	.word	0x08005011
 8004f60:	08005011 	.word	0x08005011
 8004f64:	08005011 	.word	0x08005011
 8004f68:	08004fed 	.word	0x08004fed
 8004f6c:	08005011 	.word	0x08005011
 8004f70:	08005011 	.word	0x08005011
 8004f74:	08005011 	.word	0x08005011
 8004f78:	08005011 	.word	0x08005011
 8004f7c:	08005011 	.word	0x08005011
 8004f80:	08005011 	.word	0x08005011
 8004f84:	08005011 	.word	0x08005011
 8004f88:	08004fff 	.word	0x08004fff
 8004f8c:	08005011 	.word	0x08005011
 8004f90:	08005011 	.word	0x08005011
 8004f94:	08005011 	.word	0x08005011
 8004f98:	08005011 	.word	0x08005011
 8004f9c:	08005011 	.word	0x08005011
 8004fa0:	08005011 	.word	0x08005011
 8004fa4:	08005011 	.word	0x08005011
 8004fa8:	08005025 	.word	0x08005025
 8004fac:	08005011 	.word	0x08005011
 8004fb0:	08005011 	.word	0x08005011
 8004fb4:	08005011 	.word	0x08005011
 8004fb8:	08005011 	.word	0x08005011
 8004fbc:	08005011 	.word	0x08005011
 8004fc0:	08005011 	.word	0x08005011
 8004fc4:	08005011 	.word	0x08005011
 8004fc8:	08005025 	.word	0x08005025
 8004fcc:	08005011 	.word	0x08005011
 8004fd0:	08005011 	.word	0x08005011
 8004fd4:	08005011 	.word	0x08005011
 8004fd8:	08005011 	.word	0x08005011
 8004fdc:	08005011 	.word	0x08005011
 8004fe0:	08005011 	.word	0x08005011
 8004fe4:	08005011 	.word	0x08005011
 8004fe8:	08005025 	.word	0x08005025
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fdfa 	bl	8005bec <RCCEx_PLL2_Config>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004ffc:	e013      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3324      	adds	r3, #36	; 0x24
 8005002:	2101      	movs	r1, #1
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fea3 	bl	8005d50 <RCCEx_PLL3_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800500e:	e00a      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	75fb      	strb	r3, [r7, #23]
      break;
 8005014:	e007      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005016:	bf00      	nop
 8005018:	58024400 	.word	0x58024400
 800501c:	58024800 	.word	0x58024800
 8005020:	00ffffcf 	.word	0x00ffffcf
      break;
 8005024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005026:	7dfb      	ldrb	r3, [r7, #23]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800502c:	4b96      	ldr	r3, [pc, #600]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005030:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005038:	4993      	ldr	r1, [pc, #588]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800503a:	4313      	orrs	r3, r2
 800503c:	654b      	str	r3, [r1, #84]	; 0x54
 800503e:	e001      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d038      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005054:	2b05      	cmp	r3, #5
 8005056:	d821      	bhi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	080050a3 	.word	0x080050a3
 8005064:	08005079 	.word	0x08005079
 8005068:	0800508b 	.word	0x0800508b
 800506c:	080050a3 	.word	0x080050a3
 8005070:	080050a3 	.word	0x080050a3
 8005074:	080050a3 	.word	0x080050a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	2101      	movs	r1, #1
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fdb4 	bl	8005bec <RCCEx_PLL2_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005088:	e00c      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3324      	adds	r3, #36	; 0x24
 800508e:	2101      	movs	r1, #1
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fe5d 	bl	8005d50 <RCCEx_PLL3_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800509a:	e003      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	75fb      	strb	r3, [r7, #23]
      break;
 80050a0:	e000      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80050a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d109      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050aa:	4b77      	ldr	r3, [pc, #476]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ae:	f023 0207 	bic.w	r2, r3, #7
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b6:	4974      	ldr	r1, [pc, #464]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	654b      	str	r3, [r1, #84]	; 0x54
 80050bc:	e001      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050be:	7dfb      	ldrb	r3, [r7, #23]
 80050c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d03a      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	d821      	bhi.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80050d8:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80050da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050de:	bf00      	nop
 80050e0:	08005123 	.word	0x08005123
 80050e4:	080050f9 	.word	0x080050f9
 80050e8:	0800510b 	.word	0x0800510b
 80050ec:	08005123 	.word	0x08005123
 80050f0:	08005123 	.word	0x08005123
 80050f4:	08005123 	.word	0x08005123
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3304      	adds	r3, #4
 80050fc:	2101      	movs	r1, #1
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fd74 	bl	8005bec <RCCEx_PLL2_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005108:	e00c      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3324      	adds	r3, #36	; 0x24
 800510e:	2101      	movs	r1, #1
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fe1d 	bl	8005d50 <RCCEx_PLL3_Config>
 8005116:	4603      	mov	r3, r0
 8005118:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800511a:	e003      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	75fb      	strb	r3, [r7, #23]
      break;
 8005120:	e000      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005124:	7dfb      	ldrb	r3, [r7, #23]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10a      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800512a:	4b57      	ldr	r3, [pc, #348]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800512c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512e:	f023 0207 	bic.w	r2, r3, #7
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005138:	4953      	ldr	r1, [pc, #332]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800513a:	4313      	orrs	r3, r2
 800513c:	658b      	str	r3, [r1, #88]	; 0x58
 800513e:	e001      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005140:	7dfb      	ldrb	r3, [r7, #23]
 8005142:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b00      	cmp	r3, #0
 800514e:	d04b      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005156:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800515a:	d02e      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800515c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005160:	d828      	bhi.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005166:	d02a      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516c:	d822      	bhi.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800516e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005172:	d026      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005174:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005178:	d81c      	bhi.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800517a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800517e:	d010      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005184:	d816      	bhi.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01d      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800518a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800518e:	d111      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3304      	adds	r3, #4
 8005194:	2100      	movs	r1, #0
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fd28 	bl	8005bec <RCCEx_PLL2_Config>
 800519c:	4603      	mov	r3, r0
 800519e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051a0:	e012      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3324      	adds	r3, #36	; 0x24
 80051a6:	2102      	movs	r1, #2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fdd1 	bl	8005d50 <RCCEx_PLL3_Config>
 80051ae:	4603      	mov	r3, r0
 80051b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051b2:	e009      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	75fb      	strb	r3, [r7, #23]
      break;
 80051b8:	e006      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80051ba:	bf00      	nop
 80051bc:	e004      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80051be:	bf00      	nop
 80051c0:	e002      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80051c2:	bf00      	nop
 80051c4:	e000      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80051c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10a      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ce:	4b2e      	ldr	r3, [pc, #184]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80051d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051dc:	492a      	ldr	r1, [pc, #168]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	654b      	str	r3, [r1, #84]	; 0x54
 80051e2:	e001      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
 80051e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d04d      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051fe:	d02e      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005200:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005204:	d828      	bhi.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520a:	d02a      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800520c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005210:	d822      	bhi.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005212:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005216:	d026      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005218:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800521c:	d81c      	bhi.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800521e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005222:	d010      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005228:	d816      	bhi.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01d      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800522e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005232:	d111      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3304      	adds	r3, #4
 8005238:	2100      	movs	r1, #0
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fcd6 	bl	8005bec <RCCEx_PLL2_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005244:	e012      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3324      	adds	r3, #36	; 0x24
 800524a:	2102      	movs	r1, #2
 800524c:	4618      	mov	r0, r3
 800524e:	f000 fd7f 	bl	8005d50 <RCCEx_PLL3_Config>
 8005252:	4603      	mov	r3, r0
 8005254:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005256:	e009      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	75fb      	strb	r3, [r7, #23]
      break;
 800525c:	e006      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800525e:	bf00      	nop
 8005260:	e004      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005262:	bf00      	nop
 8005264:	e002      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005266:	bf00      	nop
 8005268:	e000      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800526a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800526c:	7dfb      	ldrb	r3, [r7, #23]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10c      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005272:	4b05      	ldr	r3, [pc, #20]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005276:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005280:	4901      	ldr	r1, [pc, #4]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005282:	4313      	orrs	r3, r2
 8005284:	658b      	str	r3, [r1, #88]	; 0x58
 8005286:	e003      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005288:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005298:	2b00      	cmp	r3, #0
 800529a:	d04b      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052a6:	d02e      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80052a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052ac:	d828      	bhi.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80052ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b2:	d02a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80052b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b8:	d822      	bhi.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80052ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052be:	d026      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80052c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052c4:	d81c      	bhi.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80052c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052ca:	d010      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80052cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052d0:	d816      	bhi.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01d      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80052d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052da:	d111      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3304      	adds	r3, #4
 80052e0:	2100      	movs	r1, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fc82 	bl	8005bec <RCCEx_PLL2_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80052ec:	e012      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3324      	adds	r3, #36	; 0x24
 80052f2:	2102      	movs	r1, #2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fd2b 	bl	8005d50 <RCCEx_PLL3_Config>
 80052fa:	4603      	mov	r3, r0
 80052fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80052fe:	e009      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	75fb      	strb	r3, [r7, #23]
      break;
 8005304:	e006      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005306:	bf00      	nop
 8005308:	e004      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800530a:	bf00      	nop
 800530c:	e002      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800530e:	bf00      	nop
 8005310:	e000      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10a      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800531a:	4b9d      	ldr	r3, [pc, #628]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800531c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005328:	4999      	ldr	r1, [pc, #612]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800532a:	4313      	orrs	r3, r2
 800532c:	658b      	str	r3, [r1, #88]	; 0x58
 800532e:	e001      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534a:	d10a      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3324      	adds	r3, #36	; 0x24
 8005350:	2102      	movs	r1, #2
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fcfc 	bl	8005d50 <RCCEx_PLL3_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005362:	4b8b      	ldr	r3, [pc, #556]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005370:	4987      	ldr	r1, [pc, #540]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005372:	4313      	orrs	r3, r2
 8005374:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0310 	and.w	r3, r3, #16
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800538c:	d10a      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3324      	adds	r3, #36	; 0x24
 8005392:	2102      	movs	r1, #2
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fcdb 	bl	8005d50 <RCCEx_PLL3_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053a4:	4b7a      	ldr	r3, [pc, #488]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b2:	4977      	ldr	r1, [pc, #476]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d034      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ce:	d01d      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80053d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053d4:	d817      	bhi.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80053da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053de:	d009      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80053e0:	e011      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3304      	adds	r3, #4
 80053e6:	2100      	movs	r1, #0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fbff 	bl	8005bec <RCCEx_PLL2_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80053f2:	e00c      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3324      	adds	r3, #36	; 0x24
 80053f8:	2102      	movs	r1, #2
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fca8 	bl	8005d50 <RCCEx_PLL3_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005404:	e003      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	75fb      	strb	r3, [r7, #23]
      break;
 800540a:	e000      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800540c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800540e:	7dfb      	ldrb	r3, [r7, #23]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005414:	4b5e      	ldr	r3, [pc, #376]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005418:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005422:	495b      	ldr	r1, [pc, #364]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005424:	4313      	orrs	r3, r2
 8005426:	658b      	str	r3, [r1, #88]	; 0x58
 8005428:	e001      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542a:	7dfb      	ldrb	r3, [r7, #23]
 800542c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d033      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005440:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005444:	d01c      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005446:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800544a:	d816      	bhi.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800544c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005450:	d003      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005456:	d007      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005458:	e00f      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800545a:	4b4d      	ldr	r3, [pc, #308]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	4a4c      	ldr	r2, [pc, #304]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005464:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005466:	e00c      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3324      	adds	r3, #36	; 0x24
 800546c:	2101      	movs	r1, #1
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fc6e 	bl	8005d50 <RCCEx_PLL3_Config>
 8005474:	4603      	mov	r3, r0
 8005476:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005478:	e003      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	75fb      	strb	r3, [r7, #23]
      break;
 800547e:	e000      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005482:	7dfb      	ldrb	r3, [r7, #23]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10a      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005488:	4b41      	ldr	r3, [pc, #260]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005496:	493e      	ldr	r1, [pc, #248]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005498:	4313      	orrs	r3, r2
 800549a:	654b      	str	r3, [r1, #84]	; 0x54
 800549c:	e001      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549e:	7dfb      	ldrb	r3, [r7, #23]
 80054a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d029      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80054b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ba:	d007      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80054bc:	e00f      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054be:	4b34      	ldr	r3, [pc, #208]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	4a33      	ldr	r2, [pc, #204]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80054ca:	e00b      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	2102      	movs	r1, #2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fb8a 	bl	8005bec <RCCEx_PLL2_Config>
 80054d8:	4603      	mov	r3, r0
 80054da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80054dc:	e002      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	75fb      	strb	r3, [r7, #23]
      break;
 80054e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054e4:	7dfb      	ldrb	r3, [r7, #23]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d109      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80054ea:	4b29      	ldr	r3, [pc, #164]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f6:	4926      	ldr	r1, [pc, #152]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80054fc:	e001      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
 8005500:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3324      	adds	r3, #36	; 0x24
 8005512:	2102      	movs	r1, #2
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fc1b 	bl	8005d50 <RCCEx_PLL3_Config>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d033      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005534:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005538:	d017      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800553a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800553e:	d811      	bhi.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005544:	d013      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800554a:	d80b      	bhi.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800554c:	2b00      	cmp	r3, #0
 800554e:	d010      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005554:	d106      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005556:	4b0e      	ldr	r3, [pc, #56]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	4a0d      	ldr	r2, [pc, #52]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800555c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005560:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005562:	e007      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	75fb      	strb	r3, [r7, #23]
      break;
 8005568:	e004      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800556a:	bf00      	nop
 800556c:	e002      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800556e:	bf00      	nop
 8005570:	e000      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005572:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005574:	7dfb      	ldrb	r3, [r7, #23]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10c      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005586:	4902      	ldr	r1, [pc, #8]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005588:	4313      	orrs	r3, r2
 800558a:	654b      	str	r3, [r1, #84]	; 0x54
 800558c:	e004      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800558e:	bf00      	nop
 8005590:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055a4:	4b31      	ldr	r3, [pc, #196]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b0:	492e      	ldr	r1, [pc, #184]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d009      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80055c2:	4b2a      	ldr	r3, [pc, #168]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80055d0:	4926      	ldr	r1, [pc, #152]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d008      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055e2:	4b22      	ldr	r3, [pc, #136]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ee:	491f      	ldr	r1, [pc, #124]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00d      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005600:	4b1a      	ldr	r3, [pc, #104]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	4a19      	ldr	r2, [pc, #100]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005606:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800560a:	6113      	str	r3, [r2, #16]
 800560c:	4b17      	ldr	r3, [pc, #92]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005616:	4915      	ldr	r1, [pc, #84]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005618:	4313      	orrs	r3, r2
 800561a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	da08      	bge.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005624:	4b11      	ldr	r3, [pc, #68]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005628:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005630:	490e      	ldr	r1, [pc, #56]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005632:	4313      	orrs	r3, r2
 8005634:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005642:	4b0a      	ldr	r3, [pc, #40]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005646:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005650:	4906      	ldr	r1, [pc, #24]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005652:	4313      	orrs	r3, r2
 8005654:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005656:	7dbb      	ldrb	r3, [r7, #22]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e000      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	58024400 	.word	0x58024400

08005670 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005674:	f7ff f85a 	bl	800472c <HAL_RCC_GetHCLKFreq>
 8005678:	4602      	mov	r2, r0
 800567a:	4b06      	ldr	r3, [pc, #24]	; (8005694 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	4904      	ldr	r1, [pc, #16]	; (8005698 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005686:	5ccb      	ldrb	r3, [r1, r3]
 8005688:	f003 031f 	and.w	r3, r3, #31
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005690:	4618      	mov	r0, r3
 8005692:	bd80      	pop	{r7, pc}
 8005694:	58024400 	.word	0x58024400
 8005698:	0800e6fc 	.word	0x0800e6fc

0800569c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800569c:	b480      	push	{r7}
 800569e:	b089      	sub	sp, #36	; 0x24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056a4:	4ba1      	ldr	r3, [pc, #644]	; (800592c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80056ae:	4b9f      	ldr	r3, [pc, #636]	; (800592c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	0b1b      	lsrs	r3, r3, #12
 80056b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80056ba:	4b9c      	ldr	r3, [pc, #624]	; (800592c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	091b      	lsrs	r3, r3, #4
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80056c6:	4b99      	ldr	r3, [pc, #612]	; (800592c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ca:	08db      	lsrs	r3, r3, #3
 80056cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	fb02 f303 	mul.w	r3, r2, r3
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8111 	beq.w	800590c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	f000 8083 	beq.w	80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	f200 80a1 	bhi.w	800583c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d056      	beq.n	80057b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005706:	e099      	b.n	800583c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005708:	4b88      	ldr	r3, [pc, #544]	; (800592c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d02d      	beq.n	8005770 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005714:	4b85      	ldr	r3, [pc, #532]	; (800592c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	08db      	lsrs	r3, r3, #3
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	4a84      	ldr	r2, [pc, #528]	; (8005930 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
 8005724:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	ee07 3a90 	vmov	s15, r3
 800572c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573e:	4b7b      	ldr	r3, [pc, #492]	; (800592c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005752:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800576e:	e087      	b.n	8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800577e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005782:	4b6a      	ldr	r3, [pc, #424]	; (800592c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005792:	ed97 6a03 	vldr	s12, [r7, #12]
 8005796:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800579a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057b2:	e065      	b.n	8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800593c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80057c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c6:	4b59      	ldr	r3, [pc, #356]	; (800592c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057f6:	e043      	b.n	8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005802:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005940 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580a:	4b48      	ldr	r3, [pc, #288]	; (800592c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581a:	ed97 6a03 	vldr	s12, [r7, #12]
 800581e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800582e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005836:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800583a:	e021      	b.n	8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005846:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800593c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800584a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584e:	4b37      	ldr	r3, [pc, #220]	; (800592c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005862:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800587e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005880:	4b2a      	ldr	r3, [pc, #168]	; (800592c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	0a5b      	lsrs	r3, r3, #9
 8005886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800589a:	edd7 6a07 	vldr	s13, [r7, #28]
 800589e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a6:	ee17 2a90 	vmov	r2, s15
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80058ae:	4b1f      	ldr	r3, [pc, #124]	; (800592c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	0c1b      	lsrs	r3, r3, #16
 80058b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058b8:	ee07 3a90 	vmov	s15, r3
 80058bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80058cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d4:	ee17 2a90 	vmov	r2, s15
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80058dc:	4b13      	ldr	r3, [pc, #76]	; (800592c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	0e1b      	lsrs	r3, r3, #24
 80058e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005902:	ee17 2a90 	vmov	r2, s15
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800590a:	e008      	b.n	800591e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	609a      	str	r2, [r3, #8]
}
 800591e:	bf00      	nop
 8005920:	3724      	adds	r7, #36	; 0x24
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	58024400 	.word	0x58024400
 8005930:	03d09000 	.word	0x03d09000
 8005934:	46000000 	.word	0x46000000
 8005938:	4c742400 	.word	0x4c742400
 800593c:	4a742400 	.word	0x4a742400
 8005940:	4af42400 	.word	0x4af42400

08005944 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005944:	b480      	push	{r7}
 8005946:	b089      	sub	sp, #36	; 0x24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800594c:	4ba1      	ldr	r3, [pc, #644]	; (8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005956:	4b9f      	ldr	r3, [pc, #636]	; (8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	0d1b      	lsrs	r3, r3, #20
 800595c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005960:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005962:	4b9c      	ldr	r3, [pc, #624]	; (8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005966:	0a1b      	lsrs	r3, r3, #8
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800596e:	4b99      	ldr	r3, [pc, #612]	; (8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005972:	08db      	lsrs	r3, r3, #3
 8005974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	fb02 f303 	mul.w	r3, r2, r3
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005986:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8111 	beq.w	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b02      	cmp	r3, #2
 8005996:	f000 8083 	beq.w	8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	2b02      	cmp	r3, #2
 800599e:	f200 80a1 	bhi.w	8005ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d056      	beq.n	8005a5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80059ae:	e099      	b.n	8005ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059b0:	4b88      	ldr	r3, [pc, #544]	; (8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d02d      	beq.n	8005a18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059bc:	4b85      	ldr	r3, [pc, #532]	; (8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	08db      	lsrs	r3, r3, #3
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	4a84      	ldr	r2, [pc, #528]	; (8005bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
 80059cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	ee07 3a90 	vmov	s15, r3
 80059d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e6:	4b7b      	ldr	r3, [pc, #492]	; (8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a16:	e087      	b.n	8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005be0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2a:	4b6a      	ldr	r3, [pc, #424]	; (8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a5a:	e065      	b.n	8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a6e:	4b59      	ldr	r3, [pc, #356]	; (8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a9e:	e043      	b.n	8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab2:	4b48      	ldr	r3, [pc, #288]	; (8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ac6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ade:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ae2:	e021      	b.n	8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af6:	4b37      	ldr	r3, [pc, #220]	; (8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005b28:	4b2a      	ldr	r3, [pc, #168]	; (8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	0a5b      	lsrs	r3, r3, #9
 8005b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b4e:	ee17 2a90 	vmov	r2, s15
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005b56:	4b1f      	ldr	r3, [pc, #124]	; (8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	0c1b      	lsrs	r3, r3, #16
 8005b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b60:	ee07 3a90 	vmov	s15, r3
 8005b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b7c:	ee17 2a90 	vmov	r2, s15
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005b84:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	0e1b      	lsrs	r3, r3, #24
 8005b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005baa:	ee17 2a90 	vmov	r2, s15
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	609a      	str	r2, [r3, #8]
}
 8005bc6:	bf00      	nop
 8005bc8:	3724      	adds	r7, #36	; 0x24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	03d09000 	.word	0x03d09000
 8005bdc:	46000000 	.word	0x46000000
 8005be0:	4c742400 	.word	0x4c742400
 8005be4:	4a742400 	.word	0x4a742400
 8005be8:	4af42400 	.word	0x4af42400

08005bec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bfa:	4b53      	ldr	r3, [pc, #332]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d101      	bne.n	8005c0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e099      	b.n	8005d3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c0a:	4b4f      	ldr	r3, [pc, #316]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a4e      	ldr	r2, [pc, #312]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c16:	f7fc fb6f 	bl	80022f8 <HAL_GetTick>
 8005c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c1c:	e008      	b.n	8005c30 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c1e:	f7fc fb6b 	bl	80022f8 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e086      	b.n	8005d3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c30:	4b45      	ldr	r3, [pc, #276]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f0      	bne.n	8005c1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005c3c:	4b42      	ldr	r3, [pc, #264]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	031b      	lsls	r3, r3, #12
 8005c4a:	493f      	ldr	r1, [pc, #252]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	628b      	str	r3, [r1, #40]	; 0x28
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	025b      	lsls	r3, r3, #9
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	041b      	lsls	r3, r3, #16
 8005c6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	061b      	lsls	r3, r3, #24
 8005c7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c80:	4931      	ldr	r1, [pc, #196]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005c86:	4b30      	ldr	r3, [pc, #192]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	492d      	ldr	r1, [pc, #180]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005c98:	4b2b      	ldr	r3, [pc, #172]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	f023 0220 	bic.w	r2, r3, #32
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	4928      	ldr	r1, [pc, #160]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005caa:	4b27      	ldr	r3, [pc, #156]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	4a26      	ldr	r2, [pc, #152]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cb0:	f023 0310 	bic.w	r3, r3, #16
 8005cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005cb6:	4b24      	ldr	r3, [pc, #144]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cba:	4b24      	ldr	r3, [pc, #144]	; (8005d4c <RCCEx_PLL2_Config+0x160>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	69d2      	ldr	r2, [r2, #28]
 8005cc2:	00d2      	lsls	r2, r2, #3
 8005cc4:	4920      	ldr	r1, [pc, #128]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005cca:	4b1f      	ldr	r3, [pc, #124]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	4a1e      	ldr	r2, [pc, #120]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cd0:	f043 0310 	orr.w	r3, r3, #16
 8005cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d106      	bne.n	8005cea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005cdc:	4b1a      	ldr	r3, [pc, #104]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	4a19      	ldr	r2, [pc, #100]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005ce2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ce6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ce8:	e00f      	b.n	8005d0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d106      	bne.n	8005cfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005cf0:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	4a14      	ldr	r2, [pc, #80]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cfc:	e005      	b.n	8005d0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005cfe:	4b12      	ldr	r3, [pc, #72]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	4a11      	ldr	r2, [pc, #68]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d0a:	4b0f      	ldr	r3, [pc, #60]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a0e      	ldr	r2, [pc, #56]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005d10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d16:	f7fc faef 	bl	80022f8 <HAL_GetTick>
 8005d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d1c:	e008      	b.n	8005d30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d1e:	f7fc faeb 	bl	80022f8 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e006      	b.n	8005d3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d30:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0f0      	beq.n	8005d1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	58024400 	.word	0x58024400
 8005d4c:	ffff0007 	.word	0xffff0007

08005d50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d5e:	4b53      	ldr	r3, [pc, #332]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d101      	bne.n	8005d6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e099      	b.n	8005ea2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005d6e:	4b4f      	ldr	r3, [pc, #316]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a4e      	ldr	r2, [pc, #312]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d7a:	f7fc fabd 	bl	80022f8 <HAL_GetTick>
 8005d7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d80:	e008      	b.n	8005d94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d82:	f7fc fab9 	bl	80022f8 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e086      	b.n	8005ea2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d94:	4b45      	ldr	r3, [pc, #276]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f0      	bne.n	8005d82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005da0:	4b42      	ldr	r3, [pc, #264]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	051b      	lsls	r3, r3, #20
 8005dae:	493f      	ldr	r1, [pc, #252]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	628b      	str	r3, [r1, #40]	; 0x28
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	025b      	lsls	r3, r3, #9
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	041b      	lsls	r3, r3, #16
 8005dd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	061b      	lsls	r3, r3, #24
 8005de0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005de4:	4931      	ldr	r1, [pc, #196]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005dea:	4b30      	ldr	r3, [pc, #192]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	492d      	ldr	r1, [pc, #180]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005dfc:	4b2b      	ldr	r3, [pc, #172]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	4928      	ldr	r1, [pc, #160]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e0e:	4b27      	ldr	r3, [pc, #156]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	4a26      	ldr	r2, [pc, #152]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e1a:	4b24      	ldr	r3, [pc, #144]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e1e:	4b24      	ldr	r3, [pc, #144]	; (8005eb0 <RCCEx_PLL3_Config+0x160>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	69d2      	ldr	r2, [r2, #28]
 8005e26:	00d2      	lsls	r2, r2, #3
 8005e28:	4920      	ldr	r1, [pc, #128]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005e2e:	4b1f      	ldr	r3, [pc, #124]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	4a1e      	ldr	r2, [pc, #120]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d106      	bne.n	8005e4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e40:	4b1a      	ldr	r3, [pc, #104]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	4a19      	ldr	r2, [pc, #100]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e4c:	e00f      	b.n	8005e6e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d106      	bne.n	8005e62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005e54:	4b15      	ldr	r3, [pc, #84]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	4a14      	ldr	r2, [pc, #80]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e60:	e005      	b.n	8005e6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e62:	4b12      	ldr	r3, [pc, #72]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	4a11      	ldr	r2, [pc, #68]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005e6e:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a0e      	ldr	r2, [pc, #56]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e7a:	f7fc fa3d 	bl	80022f8 <HAL_GetTick>
 8005e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e80:	e008      	b.n	8005e94 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005e82:	f7fc fa39 	bl	80022f8 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e006      	b.n	8005ea2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0f0      	beq.n	8005e82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	58024400 	.word	0x58024400
 8005eb0:	ffff0007 	.word	0xffff0007

08005eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e049      	b.n	8005f5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fb ff6c 	bl	8001db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f000 fe10 	bl	8006b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d001      	beq.n	8005f7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e04c      	b.n	8006016 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a26      	ldr	r2, [pc, #152]	; (8006024 <HAL_TIM_Base_Start+0xc0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d022      	beq.n	8005fd4 <HAL_TIM_Base_Start+0x70>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f96:	d01d      	beq.n	8005fd4 <HAL_TIM_Base_Start+0x70>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a22      	ldr	r2, [pc, #136]	; (8006028 <HAL_TIM_Base_Start+0xc4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d018      	beq.n	8005fd4 <HAL_TIM_Base_Start+0x70>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a21      	ldr	r2, [pc, #132]	; (800602c <HAL_TIM_Base_Start+0xc8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d013      	beq.n	8005fd4 <HAL_TIM_Base_Start+0x70>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1f      	ldr	r2, [pc, #124]	; (8006030 <HAL_TIM_Base_Start+0xcc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00e      	beq.n	8005fd4 <HAL_TIM_Base_Start+0x70>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1e      	ldr	r2, [pc, #120]	; (8006034 <HAL_TIM_Base_Start+0xd0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d009      	beq.n	8005fd4 <HAL_TIM_Base_Start+0x70>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1c      	ldr	r2, [pc, #112]	; (8006038 <HAL_TIM_Base_Start+0xd4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d004      	beq.n	8005fd4 <HAL_TIM_Base_Start+0x70>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1b      	ldr	r2, [pc, #108]	; (800603c <HAL_TIM_Base_Start+0xd8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d115      	bne.n	8006000 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	4b19      	ldr	r3, [pc, #100]	; (8006040 <HAL_TIM_Base_Start+0xdc>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b06      	cmp	r3, #6
 8005fe4:	d015      	beq.n	8006012 <HAL_TIM_Base_Start+0xae>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fec:	d011      	beq.n	8006012 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0201 	orr.w	r2, r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ffe:	e008      	b.n	8006012 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e000      	b.n	8006014 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006012:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40010000 	.word	0x40010000
 8006028:	40000400 	.word	0x40000400
 800602c:	40000800 	.word	0x40000800
 8006030:	40000c00 	.word	0x40000c00
 8006034:	40010400 	.word	0x40010400
 8006038:	40001800 	.word	0x40001800
 800603c:	40014000 	.word	0x40014000
 8006040:	00010007 	.word	0x00010007

08006044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d001      	beq.n	800605c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e054      	b.n	8006106 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a26      	ldr	r2, [pc, #152]	; (8006114 <HAL_TIM_Base_Start_IT+0xd0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d022      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x80>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006086:	d01d      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x80>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a22      	ldr	r2, [pc, #136]	; (8006118 <HAL_TIM_Base_Start_IT+0xd4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d018      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x80>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a21      	ldr	r2, [pc, #132]	; (800611c <HAL_TIM_Base_Start_IT+0xd8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d013      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x80>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1f      	ldr	r2, [pc, #124]	; (8006120 <HAL_TIM_Base_Start_IT+0xdc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00e      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x80>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1e      	ldr	r2, [pc, #120]	; (8006124 <HAL_TIM_Base_Start_IT+0xe0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x80>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1c      	ldr	r2, [pc, #112]	; (8006128 <HAL_TIM_Base_Start_IT+0xe4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x80>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1b      	ldr	r2, [pc, #108]	; (800612c <HAL_TIM_Base_Start_IT+0xe8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d115      	bne.n	80060f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	4b19      	ldr	r3, [pc, #100]	; (8006130 <HAL_TIM_Base_Start_IT+0xec>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b06      	cmp	r3, #6
 80060d4:	d015      	beq.n	8006102 <HAL_TIM_Base_Start_IT+0xbe>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060dc:	d011      	beq.n	8006102 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0201 	orr.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ee:	e008      	b.n	8006102 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	e000      	b.n	8006104 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006102:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40010000 	.word	0x40010000
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	40000c00 	.word	0x40000c00
 8006124:	40010400 	.word	0x40010400
 8006128:	40001800 	.word	0x40001800
 800612c:	40014000 	.word	0x40014000
 8006130:	00010007 	.word	0x00010007

08006134 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0201 	bic.w	r2, r2, #1
 800614a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a1a      	ldr	r2, [r3, #32]
 8006152:	f241 1311 	movw	r3, #4369	; 0x1111
 8006156:	4013      	ands	r3, r2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10f      	bne.n	800617c <HAL_TIM_Base_Stop_IT+0x48>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6a1a      	ldr	r2, [r3, #32]
 8006162:	f240 4344 	movw	r3, #1092	; 0x444
 8006166:	4013      	ands	r3, r2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d107      	bne.n	800617c <HAL_TIM_Base_Stop_IT+0x48>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0201 	bic.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e049      	b.n	8006238 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d106      	bne.n	80061be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f841 	bl	8006240 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2202      	movs	r2, #2
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3304      	adds	r3, #4
 80061ce:	4619      	mov	r1, r3
 80061d0:	4610      	mov	r0, r2
 80061d2:	f000 fca1 	bl	8006b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d109      	bne.n	8006278 <HAL_TIM_PWM_Start+0x24>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b01      	cmp	r3, #1
 800626e:	bf14      	ite	ne
 8006270:	2301      	movne	r3, #1
 8006272:	2300      	moveq	r3, #0
 8006274:	b2db      	uxtb	r3, r3
 8006276:	e03c      	b.n	80062f2 <HAL_TIM_PWM_Start+0x9e>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b04      	cmp	r3, #4
 800627c:	d109      	bne.n	8006292 <HAL_TIM_PWM_Start+0x3e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b01      	cmp	r3, #1
 8006288:	bf14      	ite	ne
 800628a:	2301      	movne	r3, #1
 800628c:	2300      	moveq	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	e02f      	b.n	80062f2 <HAL_TIM_PWM_Start+0x9e>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d109      	bne.n	80062ac <HAL_TIM_PWM_Start+0x58>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	bf14      	ite	ne
 80062a4:	2301      	movne	r3, #1
 80062a6:	2300      	moveq	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	e022      	b.n	80062f2 <HAL_TIM_PWM_Start+0x9e>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b0c      	cmp	r3, #12
 80062b0:	d109      	bne.n	80062c6 <HAL_TIM_PWM_Start+0x72>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	bf14      	ite	ne
 80062be:	2301      	movne	r3, #1
 80062c0:	2300      	moveq	r3, #0
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	e015      	b.n	80062f2 <HAL_TIM_PWM_Start+0x9e>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d109      	bne.n	80062e0 <HAL_TIM_PWM_Start+0x8c>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	bf14      	ite	ne
 80062d8:	2301      	movne	r3, #1
 80062da:	2300      	moveq	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	e008      	b.n	80062f2 <HAL_TIM_PWM_Start+0x9e>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	bf14      	ite	ne
 80062ec:	2301      	movne	r3, #1
 80062ee:	2300      	moveq	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e0a1      	b.n	800643e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d104      	bne.n	800630a <HAL_TIM_PWM_Start+0xb6>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006308:	e023      	b.n	8006352 <HAL_TIM_PWM_Start+0xfe>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b04      	cmp	r3, #4
 800630e:	d104      	bne.n	800631a <HAL_TIM_PWM_Start+0xc6>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006318:	e01b      	b.n	8006352 <HAL_TIM_PWM_Start+0xfe>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b08      	cmp	r3, #8
 800631e:	d104      	bne.n	800632a <HAL_TIM_PWM_Start+0xd6>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006328:	e013      	b.n	8006352 <HAL_TIM_PWM_Start+0xfe>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b0c      	cmp	r3, #12
 800632e:	d104      	bne.n	800633a <HAL_TIM_PWM_Start+0xe6>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006338:	e00b      	b.n	8006352 <HAL_TIM_PWM_Start+0xfe>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b10      	cmp	r3, #16
 800633e:	d104      	bne.n	800634a <HAL_TIM_PWM_Start+0xf6>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006348:	e003      	b.n	8006352 <HAL_TIM_PWM_Start+0xfe>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2202      	movs	r2, #2
 800634e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2201      	movs	r2, #1
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 ffea 	bl	8007334 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a38      	ldr	r2, [pc, #224]	; (8006448 <HAL_TIM_PWM_Start+0x1f4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d013      	beq.n	8006392 <HAL_TIM_PWM_Start+0x13e>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a37      	ldr	r2, [pc, #220]	; (800644c <HAL_TIM_PWM_Start+0x1f8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00e      	beq.n	8006392 <HAL_TIM_PWM_Start+0x13e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a35      	ldr	r2, [pc, #212]	; (8006450 <HAL_TIM_PWM_Start+0x1fc>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d009      	beq.n	8006392 <HAL_TIM_PWM_Start+0x13e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a34      	ldr	r2, [pc, #208]	; (8006454 <HAL_TIM_PWM_Start+0x200>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d004      	beq.n	8006392 <HAL_TIM_PWM_Start+0x13e>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a32      	ldr	r2, [pc, #200]	; (8006458 <HAL_TIM_PWM_Start+0x204>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d101      	bne.n	8006396 <HAL_TIM_PWM_Start+0x142>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <HAL_TIM_PWM_Start+0x144>
 8006396:	2300      	movs	r3, #0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d007      	beq.n	80063ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a25      	ldr	r2, [pc, #148]	; (8006448 <HAL_TIM_PWM_Start+0x1f4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d022      	beq.n	80063fc <HAL_TIM_PWM_Start+0x1a8>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063be:	d01d      	beq.n	80063fc <HAL_TIM_PWM_Start+0x1a8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a25      	ldr	r2, [pc, #148]	; (800645c <HAL_TIM_PWM_Start+0x208>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d018      	beq.n	80063fc <HAL_TIM_PWM_Start+0x1a8>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a24      	ldr	r2, [pc, #144]	; (8006460 <HAL_TIM_PWM_Start+0x20c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d013      	beq.n	80063fc <HAL_TIM_PWM_Start+0x1a8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a22      	ldr	r2, [pc, #136]	; (8006464 <HAL_TIM_PWM_Start+0x210>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00e      	beq.n	80063fc <HAL_TIM_PWM_Start+0x1a8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a1a      	ldr	r2, [pc, #104]	; (800644c <HAL_TIM_PWM_Start+0x1f8>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d009      	beq.n	80063fc <HAL_TIM_PWM_Start+0x1a8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1e      	ldr	r2, [pc, #120]	; (8006468 <HAL_TIM_PWM_Start+0x214>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d004      	beq.n	80063fc <HAL_TIM_PWM_Start+0x1a8>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a16      	ldr	r2, [pc, #88]	; (8006450 <HAL_TIM_PWM_Start+0x1fc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d115      	bne.n	8006428 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	4b1a      	ldr	r3, [pc, #104]	; (800646c <HAL_TIM_PWM_Start+0x218>)
 8006404:	4013      	ands	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b06      	cmp	r3, #6
 800640c:	d015      	beq.n	800643a <HAL_TIM_PWM_Start+0x1e6>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006414:	d011      	beq.n	800643a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f042 0201 	orr.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006426:	e008      	b.n	800643a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0201 	orr.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	e000      	b.n	800643c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	40010000 	.word	0x40010000
 800644c:	40010400 	.word	0x40010400
 8006450:	40014000 	.word	0x40014000
 8006454:	40014400 	.word	0x40014400
 8006458:	40014800 	.word	0x40014800
 800645c:	40000400 	.word	0x40000400
 8006460:	40000800 	.word	0x40000800
 8006464:	40000c00 	.word	0x40000c00
 8006468:	40001800 	.word	0x40001800
 800646c:	00010007 	.word	0x00010007

08006470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b02      	cmp	r3, #2
 8006484:	d122      	bne.n	80064cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b02      	cmp	r3, #2
 8006492:	d11b      	bne.n	80064cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0202 	mvn.w	r2, #2
 800649c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fb12 	bl	8006adc <HAL_TIM_IC_CaptureCallback>
 80064b8:	e005      	b.n	80064c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fb04 	bl	8006ac8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fb15 	bl	8006af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0304 	and.w	r3, r3, #4
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d122      	bne.n	8006520 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d11b      	bne.n	8006520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0204 	mvn.w	r2, #4
 80064f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2202      	movs	r2, #2
 80064f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fae8 	bl	8006adc <HAL_TIM_IC_CaptureCallback>
 800650c:	e005      	b.n	800651a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fada 	bl	8006ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 faeb 	bl	8006af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b08      	cmp	r3, #8
 800652c:	d122      	bne.n	8006574 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b08      	cmp	r3, #8
 800653a:	d11b      	bne.n	8006574 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0208 	mvn.w	r2, #8
 8006544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2204      	movs	r2, #4
 800654a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fabe 	bl	8006adc <HAL_TIM_IC_CaptureCallback>
 8006560:	e005      	b.n	800656e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fab0 	bl	8006ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fac1 	bl	8006af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	2b10      	cmp	r3, #16
 8006580:	d122      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b10      	cmp	r3, #16
 800658e:	d11b      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0210 	mvn.w	r2, #16
 8006598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2208      	movs	r2, #8
 800659e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fa94 	bl	8006adc <HAL_TIM_IC_CaptureCallback>
 80065b4:	e005      	b.n	80065c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fa86 	bl	8006ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fa97 	bl	8006af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d10e      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d107      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0201 	mvn.w	r2, #1
 80065ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fb fa20 	bl	8001a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fe:	2b80      	cmp	r3, #128	; 0x80
 8006600:	d10e      	bne.n	8006620 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660c:	2b80      	cmp	r3, #128	; 0x80
 800660e:	d107      	bne.n	8006620 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 ffc6 	bl	80075ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662e:	d10e      	bne.n	800664e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663a:	2b80      	cmp	r3, #128	; 0x80
 800663c:	d107      	bne.n	800664e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 ffb9 	bl	80075c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006658:	2b40      	cmp	r3, #64	; 0x40
 800665a:	d10e      	bne.n	800667a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006666:	2b40      	cmp	r3, #64	; 0x40
 8006668:	d107      	bne.n	800667a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fa45 	bl	8006b04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b20      	cmp	r3, #32
 8006686:	d10e      	bne.n	80066a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b20      	cmp	r3, #32
 8006694:	d107      	bne.n	80066a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f06f 0220 	mvn.w	r2, #32
 800669e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 ff79 	bl	8007598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066a6:	bf00      	nop
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e0ff      	b.n	80068ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b14      	cmp	r3, #20
 80066da:	f200 80f0 	bhi.w	80068be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066de:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e4:	08006739 	.word	0x08006739
 80066e8:	080068bf 	.word	0x080068bf
 80066ec:	080068bf 	.word	0x080068bf
 80066f0:	080068bf 	.word	0x080068bf
 80066f4:	08006779 	.word	0x08006779
 80066f8:	080068bf 	.word	0x080068bf
 80066fc:	080068bf 	.word	0x080068bf
 8006700:	080068bf 	.word	0x080068bf
 8006704:	080067bb 	.word	0x080067bb
 8006708:	080068bf 	.word	0x080068bf
 800670c:	080068bf 	.word	0x080068bf
 8006710:	080068bf 	.word	0x080068bf
 8006714:	080067fb 	.word	0x080067fb
 8006718:	080068bf 	.word	0x080068bf
 800671c:	080068bf 	.word	0x080068bf
 8006720:	080068bf 	.word	0x080068bf
 8006724:	0800683d 	.word	0x0800683d
 8006728:	080068bf 	.word	0x080068bf
 800672c:	080068bf 	.word	0x080068bf
 8006730:	080068bf 	.word	0x080068bf
 8006734:	0800687d 	.word	0x0800687d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fa84 	bl	8006c4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0208 	orr.w	r2, r2, #8
 8006752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0204 	bic.w	r2, r2, #4
 8006762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6999      	ldr	r1, [r3, #24]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	691a      	ldr	r2, [r3, #16]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	619a      	str	r2, [r3, #24]
      break;
 8006776:	e0a5      	b.n	80068c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	4618      	mov	r0, r3
 8006780:	f000 faf4 	bl	8006d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6999      	ldr	r1, [r3, #24]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	021a      	lsls	r2, r3, #8
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	619a      	str	r2, [r3, #24]
      break;
 80067b8:	e084      	b.n	80068c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fb5d 	bl	8006e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69da      	ldr	r2, [r3, #28]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0208 	orr.w	r2, r2, #8
 80067d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69da      	ldr	r2, [r3, #28]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0204 	bic.w	r2, r2, #4
 80067e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69d9      	ldr	r1, [r3, #28]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	691a      	ldr	r2, [r3, #16]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	61da      	str	r2, [r3, #28]
      break;
 80067f8:	e064      	b.n	80068c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fbc5 	bl	8006f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69d9      	ldr	r1, [r3, #28]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	021a      	lsls	r2, r3, #8
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	61da      	str	r2, [r3, #28]
      break;
 800683a:	e043      	b.n	80068c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fc0e 	bl	8007064 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0208 	orr.w	r2, r2, #8
 8006856:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0204 	bic.w	r2, r2, #4
 8006866:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	691a      	ldr	r2, [r3, #16]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800687a:	e023      	b.n	80068c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fc52 	bl	800712c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006896:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	021a      	lsls	r2, r3, #8
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068bc:	e002      	b.n	80068c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	75fb      	strb	r3, [r7, #23]
      break;
 80068c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop

080068d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_TIM_ConfigClockSource+0x1c>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e0dc      	b.n	8006aae <HAL_TIM_ConfigClockSource+0x1d6>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	4b6a      	ldr	r3, [pc, #424]	; (8006ab8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006910:	4013      	ands	r3, r2
 8006912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800691a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a64      	ldr	r2, [pc, #400]	; (8006abc <HAL_TIM_ConfigClockSource+0x1e4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	f000 80a9 	beq.w	8006a82 <HAL_TIM_ConfigClockSource+0x1aa>
 8006930:	4a62      	ldr	r2, [pc, #392]	; (8006abc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	f200 80ae 	bhi.w	8006a94 <HAL_TIM_ConfigClockSource+0x1bc>
 8006938:	4a61      	ldr	r2, [pc, #388]	; (8006ac0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	f000 80a1 	beq.w	8006a82 <HAL_TIM_ConfigClockSource+0x1aa>
 8006940:	4a5f      	ldr	r2, [pc, #380]	; (8006ac0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	f200 80a6 	bhi.w	8006a94 <HAL_TIM_ConfigClockSource+0x1bc>
 8006948:	4a5e      	ldr	r2, [pc, #376]	; (8006ac4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800694a:	4293      	cmp	r3, r2
 800694c:	f000 8099 	beq.w	8006a82 <HAL_TIM_ConfigClockSource+0x1aa>
 8006950:	4a5c      	ldr	r2, [pc, #368]	; (8006ac4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006952:	4293      	cmp	r3, r2
 8006954:	f200 809e 	bhi.w	8006a94 <HAL_TIM_ConfigClockSource+0x1bc>
 8006958:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800695c:	f000 8091 	beq.w	8006a82 <HAL_TIM_ConfigClockSource+0x1aa>
 8006960:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006964:	f200 8096 	bhi.w	8006a94 <HAL_TIM_ConfigClockSource+0x1bc>
 8006968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800696c:	f000 8089 	beq.w	8006a82 <HAL_TIM_ConfigClockSource+0x1aa>
 8006970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006974:	f200 808e 	bhi.w	8006a94 <HAL_TIM_ConfigClockSource+0x1bc>
 8006978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800697c:	d03e      	beq.n	80069fc <HAL_TIM_ConfigClockSource+0x124>
 800697e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006982:	f200 8087 	bhi.w	8006a94 <HAL_TIM_ConfigClockSource+0x1bc>
 8006986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800698a:	f000 8086 	beq.w	8006a9a <HAL_TIM_ConfigClockSource+0x1c2>
 800698e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006992:	d87f      	bhi.n	8006a94 <HAL_TIM_ConfigClockSource+0x1bc>
 8006994:	2b70      	cmp	r3, #112	; 0x70
 8006996:	d01a      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0xf6>
 8006998:	2b70      	cmp	r3, #112	; 0x70
 800699a:	d87b      	bhi.n	8006a94 <HAL_TIM_ConfigClockSource+0x1bc>
 800699c:	2b60      	cmp	r3, #96	; 0x60
 800699e:	d050      	beq.n	8006a42 <HAL_TIM_ConfigClockSource+0x16a>
 80069a0:	2b60      	cmp	r3, #96	; 0x60
 80069a2:	d877      	bhi.n	8006a94 <HAL_TIM_ConfigClockSource+0x1bc>
 80069a4:	2b50      	cmp	r3, #80	; 0x50
 80069a6:	d03c      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x14a>
 80069a8:	2b50      	cmp	r3, #80	; 0x50
 80069aa:	d873      	bhi.n	8006a94 <HAL_TIM_ConfigClockSource+0x1bc>
 80069ac:	2b40      	cmp	r3, #64	; 0x40
 80069ae:	d058      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x18a>
 80069b0:	2b40      	cmp	r3, #64	; 0x40
 80069b2:	d86f      	bhi.n	8006a94 <HAL_TIM_ConfigClockSource+0x1bc>
 80069b4:	2b30      	cmp	r3, #48	; 0x30
 80069b6:	d064      	beq.n	8006a82 <HAL_TIM_ConfigClockSource+0x1aa>
 80069b8:	2b30      	cmp	r3, #48	; 0x30
 80069ba:	d86b      	bhi.n	8006a94 <HAL_TIM_ConfigClockSource+0x1bc>
 80069bc:	2b20      	cmp	r3, #32
 80069be:	d060      	beq.n	8006a82 <HAL_TIM_ConfigClockSource+0x1aa>
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d867      	bhi.n	8006a94 <HAL_TIM_ConfigClockSource+0x1bc>
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d05c      	beq.n	8006a82 <HAL_TIM_ConfigClockSource+0x1aa>
 80069c8:	2b10      	cmp	r3, #16
 80069ca:	d05a      	beq.n	8006a82 <HAL_TIM_ConfigClockSource+0x1aa>
 80069cc:	e062      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	6899      	ldr	r1, [r3, #8]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f000 fc89 	bl	80072f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	609a      	str	r2, [r3, #8]
      break;
 80069fa:	e04f      	b.n	8006a9c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	6899      	ldr	r1, [r3, #8]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f000 fc72 	bl	80072f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a1e:	609a      	str	r2, [r3, #8]
      break;
 8006a20:	e03c      	b.n	8006a9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	6859      	ldr	r1, [r3, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f000 fbe2 	bl	80071f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2150      	movs	r1, #80	; 0x50
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fc3c 	bl	80072b8 <TIM_ITRx_SetConfig>
      break;
 8006a40:	e02c      	b.n	8006a9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	6859      	ldr	r1, [r3, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f000 fc01 	bl	8007256 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2160      	movs	r1, #96	; 0x60
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fc2c 	bl	80072b8 <TIM_ITRx_SetConfig>
      break;
 8006a60:	e01c      	b.n	8006a9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	6859      	ldr	r1, [r3, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f000 fbc2 	bl	80071f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2140      	movs	r1, #64	; 0x40
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 fc1c 	bl	80072b8 <TIM_ITRx_SetConfig>
      break;
 8006a80:	e00c      	b.n	8006a9c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	f000 fc13 	bl	80072b8 <TIM_ITRx_SetConfig>
      break;
 8006a92:	e003      	b.n	8006a9c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	73fb      	strb	r3, [r7, #15]
      break;
 8006a98:	e000      	b.n	8006a9c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006a9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	ffceff88 	.word	0xffceff88
 8006abc:	00100040 	.word	0x00100040
 8006ac0:	00100030 	.word	0x00100030
 8006ac4:	00100020 	.word	0x00100020

08006ac8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a40      	ldr	r2, [pc, #256]	; (8006c2c <TIM_Base_SetConfig+0x114>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d013      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b36:	d00f      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a3d      	ldr	r2, [pc, #244]	; (8006c30 <TIM_Base_SetConfig+0x118>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00b      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a3c      	ldr	r2, [pc, #240]	; (8006c34 <TIM_Base_SetConfig+0x11c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d007      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a3b      	ldr	r2, [pc, #236]	; (8006c38 <TIM_Base_SetConfig+0x120>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d003      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a3a      	ldr	r2, [pc, #232]	; (8006c3c <TIM_Base_SetConfig+0x124>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d108      	bne.n	8006b6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a2f      	ldr	r2, [pc, #188]	; (8006c2c <TIM_Base_SetConfig+0x114>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d01f      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b78:	d01b      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a2c      	ldr	r2, [pc, #176]	; (8006c30 <TIM_Base_SetConfig+0x118>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d017      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a2b      	ldr	r2, [pc, #172]	; (8006c34 <TIM_Base_SetConfig+0x11c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d013      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a2a      	ldr	r2, [pc, #168]	; (8006c38 <TIM_Base_SetConfig+0x120>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00f      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a29      	ldr	r2, [pc, #164]	; (8006c3c <TIM_Base_SetConfig+0x124>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00b      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a28      	ldr	r2, [pc, #160]	; (8006c40 <TIM_Base_SetConfig+0x128>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d007      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a27      	ldr	r2, [pc, #156]	; (8006c44 <TIM_Base_SetConfig+0x12c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d003      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a26      	ldr	r2, [pc, #152]	; (8006c48 <TIM_Base_SetConfig+0x130>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d108      	bne.n	8006bc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a10      	ldr	r2, [pc, #64]	; (8006c2c <TIM_Base_SetConfig+0x114>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00f      	beq.n	8006c10 <TIM_Base_SetConfig+0xf8>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a12      	ldr	r2, [pc, #72]	; (8006c3c <TIM_Base_SetConfig+0x124>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00b      	beq.n	8006c10 <TIM_Base_SetConfig+0xf8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a11      	ldr	r2, [pc, #68]	; (8006c40 <TIM_Base_SetConfig+0x128>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d007      	beq.n	8006c10 <TIM_Base_SetConfig+0xf8>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a10      	ldr	r2, [pc, #64]	; (8006c44 <TIM_Base_SetConfig+0x12c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d003      	beq.n	8006c10 <TIM_Base_SetConfig+0xf8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a0f      	ldr	r2, [pc, #60]	; (8006c48 <TIM_Base_SetConfig+0x130>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d103      	bne.n	8006c18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	615a      	str	r2, [r3, #20]
}
 8006c1e:	bf00      	nop
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	40010000 	.word	0x40010000
 8006c30:	40000400 	.word	0x40000400
 8006c34:	40000800 	.word	0x40000800
 8006c38:	40000c00 	.word	0x40000c00
 8006c3c:	40010400 	.word	0x40010400
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40014400 	.word	0x40014400
 8006c48:	40014800 	.word	0x40014800

08006c4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f023 0201 	bic.w	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4b37      	ldr	r3, [pc, #220]	; (8006d54 <TIM_OC1_SetConfig+0x108>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0303 	bic.w	r3, r3, #3
 8006c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f023 0302 	bic.w	r3, r3, #2
 8006c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a2d      	ldr	r2, [pc, #180]	; (8006d58 <TIM_OC1_SetConfig+0x10c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00f      	beq.n	8006cc8 <TIM_OC1_SetConfig+0x7c>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a2c      	ldr	r2, [pc, #176]	; (8006d5c <TIM_OC1_SetConfig+0x110>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00b      	beq.n	8006cc8 <TIM_OC1_SetConfig+0x7c>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a2b      	ldr	r2, [pc, #172]	; (8006d60 <TIM_OC1_SetConfig+0x114>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d007      	beq.n	8006cc8 <TIM_OC1_SetConfig+0x7c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a2a      	ldr	r2, [pc, #168]	; (8006d64 <TIM_OC1_SetConfig+0x118>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_OC1_SetConfig+0x7c>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a29      	ldr	r2, [pc, #164]	; (8006d68 <TIM_OC1_SetConfig+0x11c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d10c      	bne.n	8006ce2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f023 0308 	bic.w	r3, r3, #8
 8006cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f023 0304 	bic.w	r3, r3, #4
 8006ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a1c      	ldr	r2, [pc, #112]	; (8006d58 <TIM_OC1_SetConfig+0x10c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00f      	beq.n	8006d0a <TIM_OC1_SetConfig+0xbe>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a1b      	ldr	r2, [pc, #108]	; (8006d5c <TIM_OC1_SetConfig+0x110>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00b      	beq.n	8006d0a <TIM_OC1_SetConfig+0xbe>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a1a      	ldr	r2, [pc, #104]	; (8006d60 <TIM_OC1_SetConfig+0x114>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d007      	beq.n	8006d0a <TIM_OC1_SetConfig+0xbe>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a19      	ldr	r2, [pc, #100]	; (8006d64 <TIM_OC1_SetConfig+0x118>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_OC1_SetConfig+0xbe>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <TIM_OC1_SetConfig+0x11c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d111      	bne.n	8006d2e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	621a      	str	r2, [r3, #32]
}
 8006d48:	bf00      	nop
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	fffeff8f 	.word	0xfffeff8f
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40010400 	.word	0x40010400
 8006d60:	40014000 	.word	0x40014000
 8006d64:	40014400 	.word	0x40014400
 8006d68:	40014800 	.word	0x40014800

08006d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	f023 0210 	bic.w	r2, r3, #16
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4b34      	ldr	r3, [pc, #208]	; (8006e68 <TIM_OC2_SetConfig+0xfc>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f023 0320 	bic.w	r3, r3, #32
 8006db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a29      	ldr	r2, [pc, #164]	; (8006e6c <TIM_OC2_SetConfig+0x100>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d003      	beq.n	8006dd4 <TIM_OC2_SetConfig+0x68>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a28      	ldr	r2, [pc, #160]	; (8006e70 <TIM_OC2_SetConfig+0x104>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d10d      	bne.n	8006df0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a1e      	ldr	r2, [pc, #120]	; (8006e6c <TIM_OC2_SetConfig+0x100>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00f      	beq.n	8006e18 <TIM_OC2_SetConfig+0xac>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a1d      	ldr	r2, [pc, #116]	; (8006e70 <TIM_OC2_SetConfig+0x104>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00b      	beq.n	8006e18 <TIM_OC2_SetConfig+0xac>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a1c      	ldr	r2, [pc, #112]	; (8006e74 <TIM_OC2_SetConfig+0x108>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d007      	beq.n	8006e18 <TIM_OC2_SetConfig+0xac>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a1b      	ldr	r2, [pc, #108]	; (8006e78 <TIM_OC2_SetConfig+0x10c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d003      	beq.n	8006e18 <TIM_OC2_SetConfig+0xac>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a1a      	ldr	r2, [pc, #104]	; (8006e7c <TIM_OC2_SetConfig+0x110>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d113      	bne.n	8006e40 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	feff8fff 	.word	0xfeff8fff
 8006e6c:	40010000 	.word	0x40010000
 8006e70:	40010400 	.word	0x40010400
 8006e74:	40014000 	.word	0x40014000
 8006e78:	40014400 	.word	0x40014400
 8006e7c:	40014800 	.word	0x40014800

08006e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4b33      	ldr	r3, [pc, #204]	; (8006f78 <TIM_OC3_SetConfig+0xf8>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	021b      	lsls	r3, r3, #8
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a28      	ldr	r2, [pc, #160]	; (8006f7c <TIM_OC3_SetConfig+0xfc>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d003      	beq.n	8006ee6 <TIM_OC3_SetConfig+0x66>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a27      	ldr	r2, [pc, #156]	; (8006f80 <TIM_OC3_SetConfig+0x100>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d10d      	bne.n	8006f02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	021b      	lsls	r3, r3, #8
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a1d      	ldr	r2, [pc, #116]	; (8006f7c <TIM_OC3_SetConfig+0xfc>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d00f      	beq.n	8006f2a <TIM_OC3_SetConfig+0xaa>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a1c      	ldr	r2, [pc, #112]	; (8006f80 <TIM_OC3_SetConfig+0x100>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00b      	beq.n	8006f2a <TIM_OC3_SetConfig+0xaa>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a1b      	ldr	r2, [pc, #108]	; (8006f84 <TIM_OC3_SetConfig+0x104>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d007      	beq.n	8006f2a <TIM_OC3_SetConfig+0xaa>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a1a      	ldr	r2, [pc, #104]	; (8006f88 <TIM_OC3_SetConfig+0x108>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d003      	beq.n	8006f2a <TIM_OC3_SetConfig+0xaa>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a19      	ldr	r2, [pc, #100]	; (8006f8c <TIM_OC3_SetConfig+0x10c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d113      	bne.n	8006f52 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	621a      	str	r2, [r3, #32]
}
 8006f6c:	bf00      	nop
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	fffeff8f 	.word	0xfffeff8f
 8006f7c:	40010000 	.word	0x40010000
 8006f80:	40010400 	.word	0x40010400
 8006f84:	40014000 	.word	0x40014000
 8006f88:	40014400 	.word	0x40014400
 8006f8c:	40014800 	.word	0x40014800

08006f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	4b24      	ldr	r3, [pc, #144]	; (800704c <TIM_OC4_SetConfig+0xbc>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	021b      	lsls	r3, r3, #8
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	031b      	lsls	r3, r3, #12
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a19      	ldr	r2, [pc, #100]	; (8007050 <TIM_OC4_SetConfig+0xc0>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d00f      	beq.n	8007010 <TIM_OC4_SetConfig+0x80>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a18      	ldr	r2, [pc, #96]	; (8007054 <TIM_OC4_SetConfig+0xc4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00b      	beq.n	8007010 <TIM_OC4_SetConfig+0x80>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a17      	ldr	r2, [pc, #92]	; (8007058 <TIM_OC4_SetConfig+0xc8>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d007      	beq.n	8007010 <TIM_OC4_SetConfig+0x80>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a16      	ldr	r2, [pc, #88]	; (800705c <TIM_OC4_SetConfig+0xcc>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_OC4_SetConfig+0x80>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a15      	ldr	r2, [pc, #84]	; (8007060 <TIM_OC4_SetConfig+0xd0>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d109      	bne.n	8007024 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007016:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	019b      	lsls	r3, r3, #6
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	621a      	str	r2, [r3, #32]
}
 800703e:	bf00      	nop
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	feff8fff 	.word	0xfeff8fff
 8007050:	40010000 	.word	0x40010000
 8007054:	40010400 	.word	0x40010400
 8007058:	40014000 	.word	0x40014000
 800705c:	40014400 	.word	0x40014400
 8007060:	40014800 	.word	0x40014800

08007064 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4b21      	ldr	r3, [pc, #132]	; (8007114 <TIM_OC5_SetConfig+0xb0>)
 8007090:	4013      	ands	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	041b      	lsls	r3, r3, #16
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a18      	ldr	r2, [pc, #96]	; (8007118 <TIM_OC5_SetConfig+0xb4>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00f      	beq.n	80070da <TIM_OC5_SetConfig+0x76>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a17      	ldr	r2, [pc, #92]	; (800711c <TIM_OC5_SetConfig+0xb8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00b      	beq.n	80070da <TIM_OC5_SetConfig+0x76>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a16      	ldr	r2, [pc, #88]	; (8007120 <TIM_OC5_SetConfig+0xbc>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d007      	beq.n	80070da <TIM_OC5_SetConfig+0x76>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a15      	ldr	r2, [pc, #84]	; (8007124 <TIM_OC5_SetConfig+0xc0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d003      	beq.n	80070da <TIM_OC5_SetConfig+0x76>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a14      	ldr	r2, [pc, #80]	; (8007128 <TIM_OC5_SetConfig+0xc4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d109      	bne.n	80070ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	621a      	str	r2, [r3, #32]
}
 8007108:	bf00      	nop
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	fffeff8f 	.word	0xfffeff8f
 8007118:	40010000 	.word	0x40010000
 800711c:	40010400 	.word	0x40010400
 8007120:	40014000 	.word	0x40014000
 8007124:	40014400 	.word	0x40014400
 8007128:	40014800 	.word	0x40014800

0800712c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4b22      	ldr	r3, [pc, #136]	; (80071e0 <TIM_OC6_SetConfig+0xb4>)
 8007158:	4013      	ands	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	4313      	orrs	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800716e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	051b      	lsls	r3, r3, #20
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a19      	ldr	r2, [pc, #100]	; (80071e4 <TIM_OC6_SetConfig+0xb8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d00f      	beq.n	80071a4 <TIM_OC6_SetConfig+0x78>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a18      	ldr	r2, [pc, #96]	; (80071e8 <TIM_OC6_SetConfig+0xbc>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00b      	beq.n	80071a4 <TIM_OC6_SetConfig+0x78>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a17      	ldr	r2, [pc, #92]	; (80071ec <TIM_OC6_SetConfig+0xc0>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d007      	beq.n	80071a4 <TIM_OC6_SetConfig+0x78>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a16      	ldr	r2, [pc, #88]	; (80071f0 <TIM_OC6_SetConfig+0xc4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d003      	beq.n	80071a4 <TIM_OC6_SetConfig+0x78>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a15      	ldr	r2, [pc, #84]	; (80071f4 <TIM_OC6_SetConfig+0xc8>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d109      	bne.n	80071b8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	029b      	lsls	r3, r3, #10
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	621a      	str	r2, [r3, #32]
}
 80071d2:	bf00      	nop
 80071d4:	371c      	adds	r7, #28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	feff8fff 	.word	0xfeff8fff
 80071e4:	40010000 	.word	0x40010000
 80071e8:	40010400 	.word	0x40010400
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400
 80071f4:	40014800 	.word	0x40014800

080071f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	f023 0201 	bic.w	r2, r3, #1
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f023 030a 	bic.w	r3, r3, #10
 8007234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4313      	orrs	r3, r2
 800723c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	621a      	str	r2, [r3, #32]
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007256:	b480      	push	{r7}
 8007258:	b087      	sub	sp, #28
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	f023 0210 	bic.w	r2, r3, #16
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	031b      	lsls	r3, r3, #12
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	4313      	orrs	r3, r2
 800728a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007292:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4313      	orrs	r3, r2
 800729c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	621a      	str	r2, [r3, #32]
}
 80072aa:	bf00      	nop
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
	...

080072b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <TIM_ITRx_SetConfig+0x38>)
 80072cc:	4013      	ands	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f043 0307 	orr.w	r3, r3, #7
 80072da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	609a      	str	r2, [r3, #8]
}
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	ffcfff8f 	.word	0xffcfff8f

080072f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800730e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	021a      	lsls	r2, r3, #8
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	431a      	orrs	r2, r3
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4313      	orrs	r3, r2
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	4313      	orrs	r3, r2
 8007320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	609a      	str	r2, [r3, #8]
}
 8007328:	bf00      	nop
 800732a:	371c      	adds	r7, #28
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	2201      	movs	r2, #1
 8007348:	fa02 f303 	lsl.w	r3, r2, r3
 800734c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6a1a      	ldr	r2, [r3, #32]
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	43db      	mvns	r3, r3
 8007356:	401a      	ands	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a1a      	ldr	r2, [r3, #32]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f003 031f 	and.w	r3, r3, #31
 8007366:	6879      	ldr	r1, [r7, #4]
 8007368:	fa01 f303 	lsl.w	r3, r1, r3
 800736c:	431a      	orrs	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
	...

08007380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007390:	2b01      	cmp	r3, #1
 8007392:	d101      	bne.n	8007398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007394:	2302      	movs	r3, #2
 8007396:	e06d      	b.n	8007474 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a30      	ldr	r2, [pc, #192]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d004      	beq.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a2f      	ldr	r2, [pc, #188]	; (8007484 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d108      	bne.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a20      	ldr	r2, [pc, #128]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d022      	beq.n	8007448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800740a:	d01d      	beq.n	8007448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1d      	ldr	r2, [pc, #116]	; (8007488 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d018      	beq.n	8007448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1c      	ldr	r2, [pc, #112]	; (800748c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d013      	beq.n	8007448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1a      	ldr	r2, [pc, #104]	; (8007490 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00e      	beq.n	8007448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a15      	ldr	r2, [pc, #84]	; (8007484 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d009      	beq.n	8007448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a16      	ldr	r2, [pc, #88]	; (8007494 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d004      	beq.n	8007448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a15      	ldr	r2, [pc, #84]	; (8007498 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d10c      	bne.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800744e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	4313      	orrs	r3, r2
 8007458:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	40010000 	.word	0x40010000
 8007484:	40010400 	.word	0x40010400
 8007488:	40000400 	.word	0x40000400
 800748c:	40000800 	.word	0x40000800
 8007490:	40000c00 	.word	0x40000c00
 8007494:	40001800 	.word	0x40001800
 8007498:	40014000 	.word	0x40014000

0800749c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d101      	bne.n	80074b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e065      	b.n	8007584 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	4313      	orrs	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	041b      	lsls	r3, r3, #16
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a16      	ldr	r2, [pc, #88]	; (8007590 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d004      	beq.n	8007546 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a14      	ldr	r2, [pc, #80]	; (8007594 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d115      	bne.n	8007572 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	051b      	lsls	r3, r3, #20
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	40010000 	.word	0x40010000
 8007594:	40010400 	.word	0x40010400

08007598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e042      	b.n	800766c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7fa fc6d 	bl	8001ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2224      	movs	r2, #36	; 0x24
 8007602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f8c2 	bl	80077a0 <UART_SetConfig>
 800761c:	4603      	mov	r3, r0
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e022      	b.n	800766c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fe1e 	bl	8008270 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689a      	ldr	r2, [r3, #8]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fea5 	bl	80083b4 <UART_CheckIdleState>
 800766a:	4603      	mov	r3, r0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	; 0x28
 8007678:	af02      	add	r7, sp, #8
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	4613      	mov	r3, r2
 8007682:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800768a:	2b20      	cmp	r3, #32
 800768c:	f040 8083 	bne.w	8007796 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <HAL_UART_Transmit+0x28>
 8007696:	88fb      	ldrh	r3, [r7, #6]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e07b      	b.n	8007798 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d101      	bne.n	80076ae <HAL_UART_Transmit+0x3a>
 80076aa:	2302      	movs	r3, #2
 80076ac:	e074      	b.n	8007798 <HAL_UART_Transmit+0x124>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2221      	movs	r2, #33	; 0x21
 80076c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076c6:	f7fa fe17 	bl	80022f8 <HAL_GetTick>
 80076ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	88fa      	ldrh	r2, [r7, #6]
 80076d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	88fa      	ldrh	r2, [r7, #6]
 80076d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e4:	d108      	bne.n	80076f8 <HAL_UART_Transmit+0x84>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d104      	bne.n	80076f8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	61bb      	str	r3, [r7, #24]
 80076f6:	e003      	b.n	8007700 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007708:	e02c      	b.n	8007764 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2200      	movs	r2, #0
 8007712:	2180      	movs	r1, #128	; 0x80
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fe98 	bl	800844a <UART_WaitOnFlagUntilTimeout>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e039      	b.n	8007798 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10b      	bne.n	8007742 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007738:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	3302      	adds	r3, #2
 800773e:	61bb      	str	r3, [r7, #24]
 8007740:	e007      	b.n	8007752 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	781a      	ldrb	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	3301      	adds	r3, #1
 8007750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800776a:	b29b      	uxth	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1cc      	bne.n	800770a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2200      	movs	r2, #0
 8007778:	2140      	movs	r1, #64	; 0x40
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 fe65 	bl	800844a <UART_WaitOnFlagUntilTimeout>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e006      	b.n	8007798 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2220      	movs	r2, #32
 800778e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	e000      	b.n	8007798 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007796:	2302      	movs	r3, #2
  }
}
 8007798:	4618      	mov	r0, r3
 800779a:	3720      	adds	r7, #32
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077a4:	b092      	sub	sp, #72	; 0x48
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	431a      	orrs	r2, r3
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	431a      	orrs	r2, r3
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	4bbe      	ldr	r3, [pc, #760]	; (8007ac8 <UART_SetConfig+0x328>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	6812      	ldr	r2, [r2, #0]
 80077d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077d8:	430b      	orrs	r3, r1
 80077da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4ab3      	ldr	r2, [pc, #716]	; (8007acc <UART_SetConfig+0x32c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d004      	beq.n	800780c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007808:	4313      	orrs	r3, r2
 800780a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	4baf      	ldr	r3, [pc, #700]	; (8007ad0 <UART_SetConfig+0x330>)
 8007814:	4013      	ands	r3, r2
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800781c:	430b      	orrs	r3, r1
 800781e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	f023 010f 	bic.w	r1, r3, #15
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4aa6      	ldr	r2, [pc, #664]	; (8007ad4 <UART_SetConfig+0x334>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d177      	bne.n	8007930 <UART_SetConfig+0x190>
 8007840:	4ba5      	ldr	r3, [pc, #660]	; (8007ad8 <UART_SetConfig+0x338>)
 8007842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007844:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007848:	2b28      	cmp	r3, #40	; 0x28
 800784a:	d86d      	bhi.n	8007928 <UART_SetConfig+0x188>
 800784c:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <UART_SetConfig+0xb4>)
 800784e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007852:	bf00      	nop
 8007854:	080078f9 	.word	0x080078f9
 8007858:	08007929 	.word	0x08007929
 800785c:	08007929 	.word	0x08007929
 8007860:	08007929 	.word	0x08007929
 8007864:	08007929 	.word	0x08007929
 8007868:	08007929 	.word	0x08007929
 800786c:	08007929 	.word	0x08007929
 8007870:	08007929 	.word	0x08007929
 8007874:	08007901 	.word	0x08007901
 8007878:	08007929 	.word	0x08007929
 800787c:	08007929 	.word	0x08007929
 8007880:	08007929 	.word	0x08007929
 8007884:	08007929 	.word	0x08007929
 8007888:	08007929 	.word	0x08007929
 800788c:	08007929 	.word	0x08007929
 8007890:	08007929 	.word	0x08007929
 8007894:	08007909 	.word	0x08007909
 8007898:	08007929 	.word	0x08007929
 800789c:	08007929 	.word	0x08007929
 80078a0:	08007929 	.word	0x08007929
 80078a4:	08007929 	.word	0x08007929
 80078a8:	08007929 	.word	0x08007929
 80078ac:	08007929 	.word	0x08007929
 80078b0:	08007929 	.word	0x08007929
 80078b4:	08007911 	.word	0x08007911
 80078b8:	08007929 	.word	0x08007929
 80078bc:	08007929 	.word	0x08007929
 80078c0:	08007929 	.word	0x08007929
 80078c4:	08007929 	.word	0x08007929
 80078c8:	08007929 	.word	0x08007929
 80078cc:	08007929 	.word	0x08007929
 80078d0:	08007929 	.word	0x08007929
 80078d4:	08007919 	.word	0x08007919
 80078d8:	08007929 	.word	0x08007929
 80078dc:	08007929 	.word	0x08007929
 80078e0:	08007929 	.word	0x08007929
 80078e4:	08007929 	.word	0x08007929
 80078e8:	08007929 	.word	0x08007929
 80078ec:	08007929 	.word	0x08007929
 80078f0:	08007929 	.word	0x08007929
 80078f4:	08007921 	.word	0x08007921
 80078f8:	2301      	movs	r3, #1
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fe:	e222      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007900:	2304      	movs	r3, #4
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007906:	e21e      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007908:	2308      	movs	r3, #8
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800790e:	e21a      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007910:	2310      	movs	r3, #16
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007916:	e216      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007918:	2320      	movs	r3, #32
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791e:	e212      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007920:	2340      	movs	r3, #64	; 0x40
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007926:	e20e      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007928:	2380      	movs	r3, #128	; 0x80
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800792e:	e20a      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a69      	ldr	r2, [pc, #420]	; (8007adc <UART_SetConfig+0x33c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d130      	bne.n	800799c <UART_SetConfig+0x1fc>
 800793a:	4b67      	ldr	r3, [pc, #412]	; (8007ad8 <UART_SetConfig+0x338>)
 800793c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793e:	f003 0307 	and.w	r3, r3, #7
 8007942:	2b05      	cmp	r3, #5
 8007944:	d826      	bhi.n	8007994 <UART_SetConfig+0x1f4>
 8007946:	a201      	add	r2, pc, #4	; (adr r2, 800794c <UART_SetConfig+0x1ac>)
 8007948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794c:	08007965 	.word	0x08007965
 8007950:	0800796d 	.word	0x0800796d
 8007954:	08007975 	.word	0x08007975
 8007958:	0800797d 	.word	0x0800797d
 800795c:	08007985 	.word	0x08007985
 8007960:	0800798d 	.word	0x0800798d
 8007964:	2300      	movs	r3, #0
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800796a:	e1ec      	b.n	8007d46 <UART_SetConfig+0x5a6>
 800796c:	2304      	movs	r3, #4
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007972:	e1e8      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007974:	2308      	movs	r3, #8
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800797a:	e1e4      	b.n	8007d46 <UART_SetConfig+0x5a6>
 800797c:	2310      	movs	r3, #16
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007982:	e1e0      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007984:	2320      	movs	r3, #32
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800798a:	e1dc      	b.n	8007d46 <UART_SetConfig+0x5a6>
 800798c:	2340      	movs	r3, #64	; 0x40
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007992:	e1d8      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007994:	2380      	movs	r3, #128	; 0x80
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800799a:	e1d4      	b.n	8007d46 <UART_SetConfig+0x5a6>
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a4f      	ldr	r2, [pc, #316]	; (8007ae0 <UART_SetConfig+0x340>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d130      	bne.n	8007a08 <UART_SetConfig+0x268>
 80079a6:	4b4c      	ldr	r3, [pc, #304]	; (8007ad8 <UART_SetConfig+0x338>)
 80079a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	2b05      	cmp	r3, #5
 80079b0:	d826      	bhi.n	8007a00 <UART_SetConfig+0x260>
 80079b2:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <UART_SetConfig+0x218>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079d1 	.word	0x080079d1
 80079bc:	080079d9 	.word	0x080079d9
 80079c0:	080079e1 	.word	0x080079e1
 80079c4:	080079e9 	.word	0x080079e9
 80079c8:	080079f1 	.word	0x080079f1
 80079cc:	080079f9 	.word	0x080079f9
 80079d0:	2300      	movs	r3, #0
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d6:	e1b6      	b.n	8007d46 <UART_SetConfig+0x5a6>
 80079d8:	2304      	movs	r3, #4
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079de:	e1b2      	b.n	8007d46 <UART_SetConfig+0x5a6>
 80079e0:	2308      	movs	r3, #8
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e6:	e1ae      	b.n	8007d46 <UART_SetConfig+0x5a6>
 80079e8:	2310      	movs	r3, #16
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ee:	e1aa      	b.n	8007d46 <UART_SetConfig+0x5a6>
 80079f0:	2320      	movs	r3, #32
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079f6:	e1a6      	b.n	8007d46 <UART_SetConfig+0x5a6>
 80079f8:	2340      	movs	r3, #64	; 0x40
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079fe:	e1a2      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007a00:	2380      	movs	r3, #128	; 0x80
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a06:	e19e      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a35      	ldr	r2, [pc, #212]	; (8007ae4 <UART_SetConfig+0x344>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d130      	bne.n	8007a74 <UART_SetConfig+0x2d4>
 8007a12:	4b31      	ldr	r3, [pc, #196]	; (8007ad8 <UART_SetConfig+0x338>)
 8007a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	2b05      	cmp	r3, #5
 8007a1c:	d826      	bhi.n	8007a6c <UART_SetConfig+0x2cc>
 8007a1e:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <UART_SetConfig+0x284>)
 8007a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a24:	08007a3d 	.word	0x08007a3d
 8007a28:	08007a45 	.word	0x08007a45
 8007a2c:	08007a4d 	.word	0x08007a4d
 8007a30:	08007a55 	.word	0x08007a55
 8007a34:	08007a5d 	.word	0x08007a5d
 8007a38:	08007a65 	.word	0x08007a65
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a42:	e180      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007a44:	2304      	movs	r3, #4
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4a:	e17c      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007a4c:	2308      	movs	r3, #8
 8007a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a52:	e178      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007a54:	2310      	movs	r3, #16
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5a:	e174      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007a5c:	2320      	movs	r3, #32
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a62:	e170      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007a64:	2340      	movs	r3, #64	; 0x40
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a6a:	e16c      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007a6c:	2380      	movs	r3, #128	; 0x80
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a72:	e168      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1b      	ldr	r2, [pc, #108]	; (8007ae8 <UART_SetConfig+0x348>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d142      	bne.n	8007b04 <UART_SetConfig+0x364>
 8007a7e:	4b16      	ldr	r3, [pc, #88]	; (8007ad8 <UART_SetConfig+0x338>)
 8007a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	2b05      	cmp	r3, #5
 8007a88:	d838      	bhi.n	8007afc <UART_SetConfig+0x35c>
 8007a8a:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <UART_SetConfig+0x2f0>)
 8007a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a90:	08007aa9 	.word	0x08007aa9
 8007a94:	08007ab1 	.word	0x08007ab1
 8007a98:	08007ab9 	.word	0x08007ab9
 8007a9c:	08007ac1 	.word	0x08007ac1
 8007aa0:	08007aed 	.word	0x08007aed
 8007aa4:	08007af5 	.word	0x08007af5
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aae:	e14a      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007ab0:	2304      	movs	r3, #4
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab6:	e146      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007ab8:	2308      	movs	r3, #8
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007abe:	e142      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ac6:	e13e      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007ac8:	cfff69f3 	.word	0xcfff69f3
 8007acc:	58000c00 	.word	0x58000c00
 8007ad0:	11fff4ff 	.word	0x11fff4ff
 8007ad4:	40011000 	.word	0x40011000
 8007ad8:	58024400 	.word	0x58024400
 8007adc:	40004400 	.word	0x40004400
 8007ae0:	40004800 	.word	0x40004800
 8007ae4:	40004c00 	.word	0x40004c00
 8007ae8:	40005000 	.word	0x40005000
 8007aec:	2320      	movs	r3, #32
 8007aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007af2:	e128      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007af4:	2340      	movs	r3, #64	; 0x40
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afa:	e124      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007afc:	2380      	movs	r3, #128	; 0x80
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b02:	e120      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4acb      	ldr	r2, [pc, #812]	; (8007e38 <UART_SetConfig+0x698>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d176      	bne.n	8007bfc <UART_SetConfig+0x45c>
 8007b0e:	4bcb      	ldr	r3, [pc, #812]	; (8007e3c <UART_SetConfig+0x69c>)
 8007b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b16:	2b28      	cmp	r3, #40	; 0x28
 8007b18:	d86c      	bhi.n	8007bf4 <UART_SetConfig+0x454>
 8007b1a:	a201      	add	r2, pc, #4	; (adr r2, 8007b20 <UART_SetConfig+0x380>)
 8007b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b20:	08007bc5 	.word	0x08007bc5
 8007b24:	08007bf5 	.word	0x08007bf5
 8007b28:	08007bf5 	.word	0x08007bf5
 8007b2c:	08007bf5 	.word	0x08007bf5
 8007b30:	08007bf5 	.word	0x08007bf5
 8007b34:	08007bf5 	.word	0x08007bf5
 8007b38:	08007bf5 	.word	0x08007bf5
 8007b3c:	08007bf5 	.word	0x08007bf5
 8007b40:	08007bcd 	.word	0x08007bcd
 8007b44:	08007bf5 	.word	0x08007bf5
 8007b48:	08007bf5 	.word	0x08007bf5
 8007b4c:	08007bf5 	.word	0x08007bf5
 8007b50:	08007bf5 	.word	0x08007bf5
 8007b54:	08007bf5 	.word	0x08007bf5
 8007b58:	08007bf5 	.word	0x08007bf5
 8007b5c:	08007bf5 	.word	0x08007bf5
 8007b60:	08007bd5 	.word	0x08007bd5
 8007b64:	08007bf5 	.word	0x08007bf5
 8007b68:	08007bf5 	.word	0x08007bf5
 8007b6c:	08007bf5 	.word	0x08007bf5
 8007b70:	08007bf5 	.word	0x08007bf5
 8007b74:	08007bf5 	.word	0x08007bf5
 8007b78:	08007bf5 	.word	0x08007bf5
 8007b7c:	08007bf5 	.word	0x08007bf5
 8007b80:	08007bdd 	.word	0x08007bdd
 8007b84:	08007bf5 	.word	0x08007bf5
 8007b88:	08007bf5 	.word	0x08007bf5
 8007b8c:	08007bf5 	.word	0x08007bf5
 8007b90:	08007bf5 	.word	0x08007bf5
 8007b94:	08007bf5 	.word	0x08007bf5
 8007b98:	08007bf5 	.word	0x08007bf5
 8007b9c:	08007bf5 	.word	0x08007bf5
 8007ba0:	08007be5 	.word	0x08007be5
 8007ba4:	08007bf5 	.word	0x08007bf5
 8007ba8:	08007bf5 	.word	0x08007bf5
 8007bac:	08007bf5 	.word	0x08007bf5
 8007bb0:	08007bf5 	.word	0x08007bf5
 8007bb4:	08007bf5 	.word	0x08007bf5
 8007bb8:	08007bf5 	.word	0x08007bf5
 8007bbc:	08007bf5 	.word	0x08007bf5
 8007bc0:	08007bed 	.word	0x08007bed
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bca:	e0bc      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007bcc:	2304      	movs	r3, #4
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bd2:	e0b8      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007bd4:	2308      	movs	r3, #8
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bda:	e0b4      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007bdc:	2310      	movs	r3, #16
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be2:	e0b0      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007be4:	2320      	movs	r3, #32
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bea:	e0ac      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007bec:	2340      	movs	r3, #64	; 0x40
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf2:	e0a8      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007bf4:	2380      	movs	r3, #128	; 0x80
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfa:	e0a4      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a8f      	ldr	r2, [pc, #572]	; (8007e40 <UART_SetConfig+0x6a0>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d130      	bne.n	8007c68 <UART_SetConfig+0x4c8>
 8007c06:	4b8d      	ldr	r3, [pc, #564]	; (8007e3c <UART_SetConfig+0x69c>)
 8007c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0a:	f003 0307 	and.w	r3, r3, #7
 8007c0e:	2b05      	cmp	r3, #5
 8007c10:	d826      	bhi.n	8007c60 <UART_SetConfig+0x4c0>
 8007c12:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <UART_SetConfig+0x478>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c31 	.word	0x08007c31
 8007c1c:	08007c39 	.word	0x08007c39
 8007c20:	08007c41 	.word	0x08007c41
 8007c24:	08007c49 	.word	0x08007c49
 8007c28:	08007c51 	.word	0x08007c51
 8007c2c:	08007c59 	.word	0x08007c59
 8007c30:	2300      	movs	r3, #0
 8007c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c36:	e086      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007c38:	2304      	movs	r3, #4
 8007c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c3e:	e082      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007c40:	2308      	movs	r3, #8
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c46:	e07e      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007c48:	2310      	movs	r3, #16
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c4e:	e07a      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007c50:	2320      	movs	r3, #32
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c56:	e076      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007c58:	2340      	movs	r3, #64	; 0x40
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c5e:	e072      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007c60:	2380      	movs	r3, #128	; 0x80
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c66:	e06e      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a75      	ldr	r2, [pc, #468]	; (8007e44 <UART_SetConfig+0x6a4>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d130      	bne.n	8007cd4 <UART_SetConfig+0x534>
 8007c72:	4b72      	ldr	r3, [pc, #456]	; (8007e3c <UART_SetConfig+0x69c>)
 8007c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c76:	f003 0307 	and.w	r3, r3, #7
 8007c7a:	2b05      	cmp	r3, #5
 8007c7c:	d826      	bhi.n	8007ccc <UART_SetConfig+0x52c>
 8007c7e:	a201      	add	r2, pc, #4	; (adr r2, 8007c84 <UART_SetConfig+0x4e4>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007c9d 	.word	0x08007c9d
 8007c88:	08007ca5 	.word	0x08007ca5
 8007c8c:	08007cad 	.word	0x08007cad
 8007c90:	08007cb5 	.word	0x08007cb5
 8007c94:	08007cbd 	.word	0x08007cbd
 8007c98:	08007cc5 	.word	0x08007cc5
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ca2:	e050      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007ca4:	2304      	movs	r3, #4
 8007ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007caa:	e04c      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007cac:	2308      	movs	r3, #8
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cb2:	e048      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007cb4:	2310      	movs	r3, #16
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cba:	e044      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007cbc:	2320      	movs	r3, #32
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cc2:	e040      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007cc4:	2340      	movs	r3, #64	; 0x40
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cca:	e03c      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007ccc:	2380      	movs	r3, #128	; 0x80
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cd2:	e038      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a5b      	ldr	r2, [pc, #364]	; (8007e48 <UART_SetConfig+0x6a8>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d130      	bne.n	8007d40 <UART_SetConfig+0x5a0>
 8007cde:	4b57      	ldr	r3, [pc, #348]	; (8007e3c <UART_SetConfig+0x69c>)
 8007ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	2b05      	cmp	r3, #5
 8007ce8:	d826      	bhi.n	8007d38 <UART_SetConfig+0x598>
 8007cea:	a201      	add	r2, pc, #4	; (adr r2, 8007cf0 <UART_SetConfig+0x550>)
 8007cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf0:	08007d09 	.word	0x08007d09
 8007cf4:	08007d11 	.word	0x08007d11
 8007cf8:	08007d19 	.word	0x08007d19
 8007cfc:	08007d21 	.word	0x08007d21
 8007d00:	08007d29 	.word	0x08007d29
 8007d04:	08007d31 	.word	0x08007d31
 8007d08:	2302      	movs	r3, #2
 8007d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0e:	e01a      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007d10:	2304      	movs	r3, #4
 8007d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d16:	e016      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007d18:	2308      	movs	r3, #8
 8007d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1e:	e012      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007d20:	2310      	movs	r3, #16
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d26:	e00e      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007d28:	2320      	movs	r3, #32
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2e:	e00a      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007d30:	2340      	movs	r3, #64	; 0x40
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d36:	e006      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007d38:	2380      	movs	r3, #128	; 0x80
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3e:	e002      	b.n	8007d46 <UART_SetConfig+0x5a6>
 8007d40:	2380      	movs	r3, #128	; 0x80
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a3f      	ldr	r2, [pc, #252]	; (8007e48 <UART_SetConfig+0x6a8>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	f040 80f8 	bne.w	8007f42 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d56:	2b20      	cmp	r3, #32
 8007d58:	dc46      	bgt.n	8007de8 <UART_SetConfig+0x648>
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	f2c0 8082 	blt.w	8007e64 <UART_SetConfig+0x6c4>
 8007d60:	3b02      	subs	r3, #2
 8007d62:	2b1e      	cmp	r3, #30
 8007d64:	d87e      	bhi.n	8007e64 <UART_SetConfig+0x6c4>
 8007d66:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <UART_SetConfig+0x5cc>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007def 	.word	0x08007def
 8007d70:	08007e65 	.word	0x08007e65
 8007d74:	08007df7 	.word	0x08007df7
 8007d78:	08007e65 	.word	0x08007e65
 8007d7c:	08007e65 	.word	0x08007e65
 8007d80:	08007e65 	.word	0x08007e65
 8007d84:	08007e07 	.word	0x08007e07
 8007d88:	08007e65 	.word	0x08007e65
 8007d8c:	08007e65 	.word	0x08007e65
 8007d90:	08007e65 	.word	0x08007e65
 8007d94:	08007e65 	.word	0x08007e65
 8007d98:	08007e65 	.word	0x08007e65
 8007d9c:	08007e65 	.word	0x08007e65
 8007da0:	08007e65 	.word	0x08007e65
 8007da4:	08007e17 	.word	0x08007e17
 8007da8:	08007e65 	.word	0x08007e65
 8007dac:	08007e65 	.word	0x08007e65
 8007db0:	08007e65 	.word	0x08007e65
 8007db4:	08007e65 	.word	0x08007e65
 8007db8:	08007e65 	.word	0x08007e65
 8007dbc:	08007e65 	.word	0x08007e65
 8007dc0:	08007e65 	.word	0x08007e65
 8007dc4:	08007e65 	.word	0x08007e65
 8007dc8:	08007e65 	.word	0x08007e65
 8007dcc:	08007e65 	.word	0x08007e65
 8007dd0:	08007e65 	.word	0x08007e65
 8007dd4:	08007e65 	.word	0x08007e65
 8007dd8:	08007e65 	.word	0x08007e65
 8007ddc:	08007e65 	.word	0x08007e65
 8007de0:	08007e65 	.word	0x08007e65
 8007de4:	08007e57 	.word	0x08007e57
 8007de8:	2b40      	cmp	r3, #64	; 0x40
 8007dea:	d037      	beq.n	8007e5c <UART_SetConfig+0x6bc>
 8007dec:	e03a      	b.n	8007e64 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007dee:	f7fd fc3f 	bl	8005670 <HAL_RCCEx_GetD3PCLK1Freq>
 8007df2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007df4:	e03c      	b.n	8007e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fd fc4e 	bl	800569c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e04:	e034      	b.n	8007e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e06:	f107 0318 	add.w	r3, r7, #24
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fd fd9a 	bl	8005944 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e14:	e02c      	b.n	8007e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e16:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <UART_SetConfig+0x69c>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d016      	beq.n	8007e50 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e22:	4b06      	ldr	r3, [pc, #24]	; (8007e3c <UART_SetConfig+0x69c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	08db      	lsrs	r3, r3, #3
 8007e28:	f003 0303 	and.w	r3, r3, #3
 8007e2c:	4a07      	ldr	r2, [pc, #28]	; (8007e4c <UART_SetConfig+0x6ac>)
 8007e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e34:	e01c      	b.n	8007e70 <UART_SetConfig+0x6d0>
 8007e36:	bf00      	nop
 8007e38:	40011400 	.word	0x40011400
 8007e3c:	58024400 	.word	0x58024400
 8007e40:	40007800 	.word	0x40007800
 8007e44:	40007c00 	.word	0x40007c00
 8007e48:	58000c00 	.word	0x58000c00
 8007e4c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007e50:	4b9d      	ldr	r3, [pc, #628]	; (80080c8 <UART_SetConfig+0x928>)
 8007e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e54:	e00c      	b.n	8007e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e56:	4b9d      	ldr	r3, [pc, #628]	; (80080cc <UART_SetConfig+0x92c>)
 8007e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e5a:	e009      	b.n	8007e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e62:	e005      	b.n	8007e70 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007e64:	2300      	movs	r3, #0
 8007e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007e6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 81de 	beq.w	8008234 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7c:	4a94      	ldr	r2, [pc, #592]	; (80080d0 <UART_SetConfig+0x930>)
 8007e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e82:	461a      	mov	r2, r3
 8007e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e8a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	4613      	mov	r3, r2
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	4413      	add	r3, r2
 8007e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d305      	bcc.n	8007ea8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d903      	bls.n	8007eb0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007eae:	e1c1      	b.n	8008234 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	60bb      	str	r3, [r7, #8]
 8007eb6:	60fa      	str	r2, [r7, #12]
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebc:	4a84      	ldr	r2, [pc, #528]	; (80080d0 <UART_SetConfig+0x930>)
 8007ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	607a      	str	r2, [r7, #4]
 8007eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ece:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ed2:	f7f8 fc19 	bl	8000708 <__aeabi_uldivmod>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4610      	mov	r0, r2
 8007edc:	4619      	mov	r1, r3
 8007ede:	f04f 0200 	mov.w	r2, #0
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	020b      	lsls	r3, r1, #8
 8007ee8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007eec:	0202      	lsls	r2, r0, #8
 8007eee:	6979      	ldr	r1, [r7, #20]
 8007ef0:	6849      	ldr	r1, [r1, #4]
 8007ef2:	0849      	lsrs	r1, r1, #1
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	4605      	mov	r5, r0
 8007efa:	eb12 0804 	adds.w	r8, r2, r4
 8007efe:	eb43 0905 	adc.w	r9, r3, r5
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	469a      	mov	sl, r3
 8007f0a:	4693      	mov	fp, r2
 8007f0c:	4652      	mov	r2, sl
 8007f0e:	465b      	mov	r3, fp
 8007f10:	4640      	mov	r0, r8
 8007f12:	4649      	mov	r1, r9
 8007f14:	f7f8 fbf8 	bl	8000708 <__aeabi_uldivmod>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f26:	d308      	bcc.n	8007f3a <UART_SetConfig+0x79a>
 8007f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f2e:	d204      	bcs.n	8007f3a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f36:	60da      	str	r2, [r3, #12]
 8007f38:	e17c      	b.n	8008234 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007f40:	e178      	b.n	8008234 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f4a:	f040 80c5 	bne.w	80080d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007f4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	dc48      	bgt.n	8007fe8 <UART_SetConfig+0x848>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	db7b      	blt.n	8008052 <UART_SetConfig+0x8b2>
 8007f5a:	2b20      	cmp	r3, #32
 8007f5c:	d879      	bhi.n	8008052 <UART_SetConfig+0x8b2>
 8007f5e:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <UART_SetConfig+0x7c4>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007fef 	.word	0x08007fef
 8007f68:	08007ff7 	.word	0x08007ff7
 8007f6c:	08008053 	.word	0x08008053
 8007f70:	08008053 	.word	0x08008053
 8007f74:	08007fff 	.word	0x08007fff
 8007f78:	08008053 	.word	0x08008053
 8007f7c:	08008053 	.word	0x08008053
 8007f80:	08008053 	.word	0x08008053
 8007f84:	0800800f 	.word	0x0800800f
 8007f88:	08008053 	.word	0x08008053
 8007f8c:	08008053 	.word	0x08008053
 8007f90:	08008053 	.word	0x08008053
 8007f94:	08008053 	.word	0x08008053
 8007f98:	08008053 	.word	0x08008053
 8007f9c:	08008053 	.word	0x08008053
 8007fa0:	08008053 	.word	0x08008053
 8007fa4:	0800801f 	.word	0x0800801f
 8007fa8:	08008053 	.word	0x08008053
 8007fac:	08008053 	.word	0x08008053
 8007fb0:	08008053 	.word	0x08008053
 8007fb4:	08008053 	.word	0x08008053
 8007fb8:	08008053 	.word	0x08008053
 8007fbc:	08008053 	.word	0x08008053
 8007fc0:	08008053 	.word	0x08008053
 8007fc4:	08008053 	.word	0x08008053
 8007fc8:	08008053 	.word	0x08008053
 8007fcc:	08008053 	.word	0x08008053
 8007fd0:	08008053 	.word	0x08008053
 8007fd4:	08008053 	.word	0x08008053
 8007fd8:	08008053 	.word	0x08008053
 8007fdc:	08008053 	.word	0x08008053
 8007fe0:	08008053 	.word	0x08008053
 8007fe4:	08008045 	.word	0x08008045
 8007fe8:	2b40      	cmp	r3, #64	; 0x40
 8007fea:	d02e      	beq.n	800804a <UART_SetConfig+0x8aa>
 8007fec:	e031      	b.n	8008052 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fee:	f7fc fbcd 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 8007ff2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ff4:	e033      	b.n	800805e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ff6:	f7fc fbdf 	bl	80047b8 <HAL_RCC_GetPCLK2Freq>
 8007ffa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ffc:	e02f      	b.n	800805e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008002:	4618      	mov	r0, r3
 8008004:	f7fd fb4a 	bl	800569c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800800c:	e027      	b.n	800805e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800800e:	f107 0318 	add.w	r3, r7, #24
 8008012:	4618      	mov	r0, r3
 8008014:	f7fd fc96 	bl	8005944 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800801c:	e01f      	b.n	800805e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800801e:	4b2d      	ldr	r3, [pc, #180]	; (80080d4 <UART_SetConfig+0x934>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0320 	and.w	r3, r3, #32
 8008026:	2b00      	cmp	r3, #0
 8008028:	d009      	beq.n	800803e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800802a:	4b2a      	ldr	r3, [pc, #168]	; (80080d4 <UART_SetConfig+0x934>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	08db      	lsrs	r3, r3, #3
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	4a24      	ldr	r2, [pc, #144]	; (80080c8 <UART_SetConfig+0x928>)
 8008036:	fa22 f303 	lsr.w	r3, r2, r3
 800803a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800803c:	e00f      	b.n	800805e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800803e:	4b22      	ldr	r3, [pc, #136]	; (80080c8 <UART_SetConfig+0x928>)
 8008040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008042:	e00c      	b.n	800805e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008044:	4b21      	ldr	r3, [pc, #132]	; (80080cc <UART_SetConfig+0x92c>)
 8008046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008048:	e009      	b.n	800805e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800804a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800804e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008050:	e005      	b.n	800805e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800805c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800805e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 80e7 	beq.w	8008234 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	4a19      	ldr	r2, [pc, #100]	; (80080d0 <UART_SetConfig+0x930>)
 800806c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008070:	461a      	mov	r2, r3
 8008072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008074:	fbb3 f3f2 	udiv	r3, r3, r2
 8008078:	005a      	lsls	r2, r3, #1
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	085b      	lsrs	r3, r3, #1
 8008080:	441a      	add	r2, r3
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	fbb2 f3f3 	udiv	r3, r2, r3
 800808a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	2b0f      	cmp	r3, #15
 8008090:	d916      	bls.n	80080c0 <UART_SetConfig+0x920>
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008098:	d212      	bcs.n	80080c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	b29b      	uxth	r3, r3
 800809e:	f023 030f 	bic.w	r3, r3, #15
 80080a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a6:	085b      	lsrs	r3, r3, #1
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	f003 0307 	and.w	r3, r3, #7
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80080b2:	4313      	orrs	r3, r2
 80080b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80080bc:	60da      	str	r2, [r3, #12]
 80080be:	e0b9      	b.n	8008234 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80080c6:	e0b5      	b.n	8008234 <UART_SetConfig+0xa94>
 80080c8:	03d09000 	.word	0x03d09000
 80080cc:	003d0900 	.word	0x003d0900
 80080d0:	0800e70c 	.word	0x0800e70c
 80080d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80080d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80080dc:	2b20      	cmp	r3, #32
 80080de:	dc49      	bgt.n	8008174 <UART_SetConfig+0x9d4>
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	db7c      	blt.n	80081de <UART_SetConfig+0xa3e>
 80080e4:	2b20      	cmp	r3, #32
 80080e6:	d87a      	bhi.n	80081de <UART_SetConfig+0xa3e>
 80080e8:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <UART_SetConfig+0x950>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	0800817b 	.word	0x0800817b
 80080f4:	08008183 	.word	0x08008183
 80080f8:	080081df 	.word	0x080081df
 80080fc:	080081df 	.word	0x080081df
 8008100:	0800818b 	.word	0x0800818b
 8008104:	080081df 	.word	0x080081df
 8008108:	080081df 	.word	0x080081df
 800810c:	080081df 	.word	0x080081df
 8008110:	0800819b 	.word	0x0800819b
 8008114:	080081df 	.word	0x080081df
 8008118:	080081df 	.word	0x080081df
 800811c:	080081df 	.word	0x080081df
 8008120:	080081df 	.word	0x080081df
 8008124:	080081df 	.word	0x080081df
 8008128:	080081df 	.word	0x080081df
 800812c:	080081df 	.word	0x080081df
 8008130:	080081ab 	.word	0x080081ab
 8008134:	080081df 	.word	0x080081df
 8008138:	080081df 	.word	0x080081df
 800813c:	080081df 	.word	0x080081df
 8008140:	080081df 	.word	0x080081df
 8008144:	080081df 	.word	0x080081df
 8008148:	080081df 	.word	0x080081df
 800814c:	080081df 	.word	0x080081df
 8008150:	080081df 	.word	0x080081df
 8008154:	080081df 	.word	0x080081df
 8008158:	080081df 	.word	0x080081df
 800815c:	080081df 	.word	0x080081df
 8008160:	080081df 	.word	0x080081df
 8008164:	080081df 	.word	0x080081df
 8008168:	080081df 	.word	0x080081df
 800816c:	080081df 	.word	0x080081df
 8008170:	080081d1 	.word	0x080081d1
 8008174:	2b40      	cmp	r3, #64	; 0x40
 8008176:	d02e      	beq.n	80081d6 <UART_SetConfig+0xa36>
 8008178:	e031      	b.n	80081de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800817a:	f7fc fb07 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 800817e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008180:	e033      	b.n	80081ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008182:	f7fc fb19 	bl	80047b8 <HAL_RCC_GetPCLK2Freq>
 8008186:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008188:	e02f      	b.n	80081ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800818a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800818e:	4618      	mov	r0, r3
 8008190:	f7fd fa84 	bl	800569c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008198:	e027      	b.n	80081ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800819a:	f107 0318 	add.w	r3, r7, #24
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fd fbd0 	bl	8005944 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081a8:	e01f      	b.n	80081ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081aa:	4b2d      	ldr	r3, [pc, #180]	; (8008260 <UART_SetConfig+0xac0>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081b6:	4b2a      	ldr	r3, [pc, #168]	; (8008260 <UART_SetConfig+0xac0>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	08db      	lsrs	r3, r3, #3
 80081bc:	f003 0303 	and.w	r3, r3, #3
 80081c0:	4a28      	ldr	r2, [pc, #160]	; (8008264 <UART_SetConfig+0xac4>)
 80081c2:	fa22 f303 	lsr.w	r3, r2, r3
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081c8:	e00f      	b.n	80081ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80081ca:	4b26      	ldr	r3, [pc, #152]	; (8008264 <UART_SetConfig+0xac4>)
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ce:	e00c      	b.n	80081ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081d0:	4b25      	ldr	r3, [pc, #148]	; (8008268 <UART_SetConfig+0xac8>)
 80081d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081d4:	e009      	b.n	80081ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081dc:	e005      	b.n	80081ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80081e8:	bf00      	nop
    }

    if (pclk != 0U)
 80081ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d021      	beq.n	8008234 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	4a1d      	ldr	r2, [pc, #116]	; (800826c <UART_SetConfig+0xacc>)
 80081f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081fa:	461a      	mov	r2, r3
 80081fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	085b      	lsrs	r3, r3, #1
 8008208:	441a      	add	r2, r3
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008212:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008216:	2b0f      	cmp	r3, #15
 8008218:	d909      	bls.n	800822e <UART_SetConfig+0xa8e>
 800821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008220:	d205      	bcs.n	800822e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008224:	b29a      	uxth	r2, r3
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60da      	str	r2, [r3, #12]
 800822c:	e002      	b.n	8008234 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2201      	movs	r2, #1
 8008238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2201      	movs	r2, #1
 8008240:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	2200      	movs	r2, #0
 8008248:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2200      	movs	r2, #0
 800824e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008250:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008254:	4618      	mov	r0, r3
 8008256:	3748      	adds	r7, #72	; 0x48
 8008258:	46bd      	mov	sp, r7
 800825a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800825e:	bf00      	nop
 8008260:	58024400 	.word	0x58024400
 8008264:	03d09000 	.word	0x03d09000
 8008268:	003d0900 	.word	0x003d0900
 800826c:	0800e70c 	.word	0x0800e70c

08008270 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00a      	beq.n	80082de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	430a      	orrs	r2, r1
 80082dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e2:	f003 0308 	and.w	r3, r3, #8
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	f003 0310 	and.w	r3, r3, #16
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00a      	beq.n	8008322 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	f003 0320 	and.w	r3, r3, #32
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834c:	2b00      	cmp	r3, #0
 800834e:	d01a      	beq.n	8008386 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800836a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800836e:	d10a      	bne.n	8008386 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	605a      	str	r2, [r3, #4]
  }
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af02      	add	r7, sp, #8
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083c4:	f7f9 ff98 	bl	80022f8 <HAL_GetTick>
 80083c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0308 	and.w	r3, r3, #8
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d10e      	bne.n	80083f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f82f 	bl	800844a <UART_WaitOnFlagUntilTimeout>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e025      	b.n	8008442 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0304 	and.w	r3, r3, #4
 8008400:	2b04      	cmp	r3, #4
 8008402:	d10e      	bne.n	8008422 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f819 	bl	800844a <UART_WaitOnFlagUntilTimeout>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e00f      	b.n	8008442 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2220      	movs	r2, #32
 8008426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2220      	movs	r2, #32
 800842e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b09c      	sub	sp, #112	; 0x70
 800844e:	af00      	add	r7, sp, #0
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	603b      	str	r3, [r7, #0]
 8008456:	4613      	mov	r3, r2
 8008458:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800845a:	e0a9      	b.n	80085b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800845c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800845e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008462:	f000 80a5 	beq.w	80085b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008466:	f7f9 ff47 	bl	80022f8 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008472:	429a      	cmp	r2, r3
 8008474:	d302      	bcc.n	800847c <UART_WaitOnFlagUntilTimeout+0x32>
 8008476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008478:	2b00      	cmp	r3, #0
 800847a:	d140      	bne.n	80084fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800848a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008490:	667b      	str	r3, [r7, #100]	; 0x64
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800849a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800849c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80084a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e6      	bne.n	800847c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3308      	adds	r3, #8
 80084b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b8:	e853 3f00 	ldrex	r3, [r3]
 80084bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	f023 0301 	bic.w	r3, r3, #1
 80084c4:	663b      	str	r3, [r7, #96]	; 0x60
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3308      	adds	r3, #8
 80084cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80084d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084d6:	e841 2300 	strex	r3, r2, [r1]
 80084da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1e5      	bne.n	80084ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2220      	movs	r2, #32
 80084e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2220      	movs	r2, #32
 80084ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e069      	b.n	80085d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0304 	and.w	r3, r3, #4
 8008508:	2b00      	cmp	r3, #0
 800850a:	d051      	beq.n	80085b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800851a:	d149      	bne.n	80085b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008524:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	e853 3f00 	ldrex	r3, [r3]
 8008532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800853a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008544:	637b      	str	r3, [r7, #52]	; 0x34
 8008546:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008548:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800854a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800854c:	e841 2300 	strex	r3, r2, [r1]
 8008550:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e6      	bne.n	8008526 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3308      	adds	r3, #8
 800855e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	e853 3f00 	ldrex	r3, [r3]
 8008566:	613b      	str	r3, [r7, #16]
   return(result);
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f023 0301 	bic.w	r3, r3, #1
 800856e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3308      	adds	r3, #8
 8008576:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008578:	623a      	str	r2, [r7, #32]
 800857a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857c:	69f9      	ldr	r1, [r7, #28]
 800857e:	6a3a      	ldr	r2, [r7, #32]
 8008580:	e841 2300 	strex	r3, r2, [r1]
 8008584:	61bb      	str	r3, [r7, #24]
   return(result);
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1e5      	bne.n	8008558 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2220      	movs	r2, #32
 8008590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2220      	movs	r2, #32
 8008598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2220      	movs	r2, #32
 80085a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e010      	b.n	80085d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69da      	ldr	r2, [r3, #28]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	4013      	ands	r3, r2
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	429a      	cmp	r2, r3
 80085be:	bf0c      	ite	eq
 80085c0:	2301      	moveq	r3, #1
 80085c2:	2300      	movne	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	461a      	mov	r2, r3
 80085c8:	79fb      	ldrb	r3, [r7, #7]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	f43f af46 	beq.w	800845c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3770      	adds	r7, #112	; 0x70
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80085da:	b480      	push	{r7}
 80085dc:	b085      	sub	sp, #20
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d101      	bne.n	80085f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80085ec:	2302      	movs	r3, #2
 80085ee:	e027      	b.n	8008640 <HAL_UARTEx_DisableFifoMode+0x66>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2224      	movs	r2, #36	; 0x24
 80085fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f022 0201 	bic.w	r2, r2, #1
 8008616:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800861e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2220      	movs	r2, #32
 8008632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800865c:	2b01      	cmp	r3, #1
 800865e:	d101      	bne.n	8008664 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008660:	2302      	movs	r3, #2
 8008662:	e02d      	b.n	80086c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2224      	movs	r2, #36	; 0x24
 8008670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 0201 	bic.w	r2, r2, #1
 800868a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	430a      	orrs	r2, r1
 800869e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f84f 	bl	8008744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d101      	bne.n	80086e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80086dc:	2302      	movs	r3, #2
 80086de:	e02d      	b.n	800873c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2224      	movs	r2, #36	; 0x24
 80086ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 0201 	bic.w	r2, r2, #1
 8008706:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f811 	bl	8008744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2220      	movs	r2, #32
 800872e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008750:	2b00      	cmp	r3, #0
 8008752:	d108      	bne.n	8008766 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008764:	e031      	b.n	80087ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008766:	2310      	movs	r3, #16
 8008768:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800876a:	2310      	movs	r3, #16
 800876c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	0e5b      	lsrs	r3, r3, #25
 8008776:	b2db      	uxtb	r3, r3
 8008778:	f003 0307 	and.w	r3, r3, #7
 800877c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	0f5b      	lsrs	r3, r3, #29
 8008786:	b2db      	uxtb	r3, r3
 8008788:	f003 0307 	and.w	r3, r3, #7
 800878c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800878e:	7bbb      	ldrb	r3, [r7, #14]
 8008790:	7b3a      	ldrb	r2, [r7, #12]
 8008792:	4911      	ldr	r1, [pc, #68]	; (80087d8 <UARTEx_SetNbDataToProcess+0x94>)
 8008794:	5c8a      	ldrb	r2, [r1, r2]
 8008796:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800879a:	7b3a      	ldrb	r2, [r7, #12]
 800879c:	490f      	ldr	r1, [pc, #60]	; (80087dc <UARTEx_SetNbDataToProcess+0x98>)
 800879e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	7b7a      	ldrb	r2, [r7, #13]
 80087b0:	4909      	ldr	r1, [pc, #36]	; (80087d8 <UARTEx_SetNbDataToProcess+0x94>)
 80087b2:	5c8a      	ldrb	r2, [r1, r2]
 80087b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80087b8:	7b7a      	ldrb	r2, [r7, #13]
 80087ba:	4908      	ldr	r1, [pc, #32]	; (80087dc <UARTEx_SetNbDataToProcess+0x98>)
 80087bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087be:	fb93 f3f2 	sdiv	r3, r3, r2
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80087ca:	bf00      	nop
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	0800e724 	.word	0x0800e724
 80087dc:	0800e72c 	.word	0x0800e72c

080087e0 <__errno>:
 80087e0:	4b01      	ldr	r3, [pc, #4]	; (80087e8 <__errno+0x8>)
 80087e2:	6818      	ldr	r0, [r3, #0]
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	24000014 	.word	0x24000014

080087ec <__libc_init_array>:
 80087ec:	b570      	push	{r4, r5, r6, lr}
 80087ee:	4d0d      	ldr	r5, [pc, #52]	; (8008824 <__libc_init_array+0x38>)
 80087f0:	4c0d      	ldr	r4, [pc, #52]	; (8008828 <__libc_init_array+0x3c>)
 80087f2:	1b64      	subs	r4, r4, r5
 80087f4:	10a4      	asrs	r4, r4, #2
 80087f6:	2600      	movs	r6, #0
 80087f8:	42a6      	cmp	r6, r4
 80087fa:	d109      	bne.n	8008810 <__libc_init_array+0x24>
 80087fc:	4d0b      	ldr	r5, [pc, #44]	; (800882c <__libc_init_array+0x40>)
 80087fe:	4c0c      	ldr	r4, [pc, #48]	; (8008830 <__libc_init_array+0x44>)
 8008800:	f005 ff14 	bl	800e62c <_init>
 8008804:	1b64      	subs	r4, r4, r5
 8008806:	10a4      	asrs	r4, r4, #2
 8008808:	2600      	movs	r6, #0
 800880a:	42a6      	cmp	r6, r4
 800880c:	d105      	bne.n	800881a <__libc_init_array+0x2e>
 800880e:	bd70      	pop	{r4, r5, r6, pc}
 8008810:	f855 3b04 	ldr.w	r3, [r5], #4
 8008814:	4798      	blx	r3
 8008816:	3601      	adds	r6, #1
 8008818:	e7ee      	b.n	80087f8 <__libc_init_array+0xc>
 800881a:	f855 3b04 	ldr.w	r3, [r5], #4
 800881e:	4798      	blx	r3
 8008820:	3601      	adds	r6, #1
 8008822:	e7f2      	b.n	800880a <__libc_init_array+0x1e>
 8008824:	08010f08 	.word	0x08010f08
 8008828:	08010f08 	.word	0x08010f08
 800882c:	08010f08 	.word	0x08010f08
 8008830:	08010f0c 	.word	0x08010f0c

08008834 <memset>:
 8008834:	4402      	add	r2, r0
 8008836:	4603      	mov	r3, r0
 8008838:	4293      	cmp	r3, r2
 800883a:	d100      	bne.n	800883e <memset+0xa>
 800883c:	4770      	bx	lr
 800883e:	f803 1b01 	strb.w	r1, [r3], #1
 8008842:	e7f9      	b.n	8008838 <memset+0x4>

08008844 <__cvt>:
 8008844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008846:	ed2d 8b02 	vpush	{d8}
 800884a:	eeb0 8b40 	vmov.f64	d8, d0
 800884e:	b085      	sub	sp, #20
 8008850:	4617      	mov	r7, r2
 8008852:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008854:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008856:	ee18 2a90 	vmov	r2, s17
 800885a:	f025 0520 	bic.w	r5, r5, #32
 800885e:	2a00      	cmp	r2, #0
 8008860:	bfb6      	itet	lt
 8008862:	222d      	movlt	r2, #45	; 0x2d
 8008864:	2200      	movge	r2, #0
 8008866:	eeb1 8b40 	vneglt.f64	d8, d0
 800886a:	2d46      	cmp	r5, #70	; 0x46
 800886c:	460c      	mov	r4, r1
 800886e:	701a      	strb	r2, [r3, #0]
 8008870:	d004      	beq.n	800887c <__cvt+0x38>
 8008872:	2d45      	cmp	r5, #69	; 0x45
 8008874:	d100      	bne.n	8008878 <__cvt+0x34>
 8008876:	3401      	adds	r4, #1
 8008878:	2102      	movs	r1, #2
 800887a:	e000      	b.n	800887e <__cvt+0x3a>
 800887c:	2103      	movs	r1, #3
 800887e:	ab03      	add	r3, sp, #12
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	ab02      	add	r3, sp, #8
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	4622      	mov	r2, r4
 8008888:	4633      	mov	r3, r6
 800888a:	eeb0 0b48 	vmov.f64	d0, d8
 800888e:	f001 fd2f 	bl	800a2f0 <_dtoa_r>
 8008892:	2d47      	cmp	r5, #71	; 0x47
 8008894:	d101      	bne.n	800889a <__cvt+0x56>
 8008896:	07fb      	lsls	r3, r7, #31
 8008898:	d51a      	bpl.n	80088d0 <__cvt+0x8c>
 800889a:	2d46      	cmp	r5, #70	; 0x46
 800889c:	eb00 0204 	add.w	r2, r0, r4
 80088a0:	d10c      	bne.n	80088bc <__cvt+0x78>
 80088a2:	7803      	ldrb	r3, [r0, #0]
 80088a4:	2b30      	cmp	r3, #48	; 0x30
 80088a6:	d107      	bne.n	80088b8 <__cvt+0x74>
 80088a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80088ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b0:	bf1c      	itt	ne
 80088b2:	f1c4 0401 	rsbne	r4, r4, #1
 80088b6:	6034      	strne	r4, [r6, #0]
 80088b8:	6833      	ldr	r3, [r6, #0]
 80088ba:	441a      	add	r2, r3
 80088bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80088c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088c4:	bf08      	it	eq
 80088c6:	9203      	streq	r2, [sp, #12]
 80088c8:	2130      	movs	r1, #48	; 0x30
 80088ca:	9b03      	ldr	r3, [sp, #12]
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d307      	bcc.n	80088e0 <__cvt+0x9c>
 80088d0:	9b03      	ldr	r3, [sp, #12]
 80088d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088d4:	1a1b      	subs	r3, r3, r0
 80088d6:	6013      	str	r3, [r2, #0]
 80088d8:	b005      	add	sp, #20
 80088da:	ecbd 8b02 	vpop	{d8}
 80088de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088e0:	1c5c      	adds	r4, r3, #1
 80088e2:	9403      	str	r4, [sp, #12]
 80088e4:	7019      	strb	r1, [r3, #0]
 80088e6:	e7f0      	b.n	80088ca <__cvt+0x86>

080088e8 <__exponent>:
 80088e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088ea:	4603      	mov	r3, r0
 80088ec:	2900      	cmp	r1, #0
 80088ee:	bfb8      	it	lt
 80088f0:	4249      	neglt	r1, r1
 80088f2:	f803 2b02 	strb.w	r2, [r3], #2
 80088f6:	bfb4      	ite	lt
 80088f8:	222d      	movlt	r2, #45	; 0x2d
 80088fa:	222b      	movge	r2, #43	; 0x2b
 80088fc:	2909      	cmp	r1, #9
 80088fe:	7042      	strb	r2, [r0, #1]
 8008900:	dd2a      	ble.n	8008958 <__exponent+0x70>
 8008902:	f10d 0407 	add.w	r4, sp, #7
 8008906:	46a4      	mov	ip, r4
 8008908:	270a      	movs	r7, #10
 800890a:	46a6      	mov	lr, r4
 800890c:	460a      	mov	r2, r1
 800890e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008912:	fb07 1516 	mls	r5, r7, r6, r1
 8008916:	3530      	adds	r5, #48	; 0x30
 8008918:	2a63      	cmp	r2, #99	; 0x63
 800891a:	f104 34ff 	add.w	r4, r4, #4294967295
 800891e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008922:	4631      	mov	r1, r6
 8008924:	dcf1      	bgt.n	800890a <__exponent+0x22>
 8008926:	3130      	adds	r1, #48	; 0x30
 8008928:	f1ae 0502 	sub.w	r5, lr, #2
 800892c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008930:	1c44      	adds	r4, r0, #1
 8008932:	4629      	mov	r1, r5
 8008934:	4561      	cmp	r1, ip
 8008936:	d30a      	bcc.n	800894e <__exponent+0x66>
 8008938:	f10d 0209 	add.w	r2, sp, #9
 800893c:	eba2 020e 	sub.w	r2, r2, lr
 8008940:	4565      	cmp	r5, ip
 8008942:	bf88      	it	hi
 8008944:	2200      	movhi	r2, #0
 8008946:	4413      	add	r3, r2
 8008948:	1a18      	subs	r0, r3, r0
 800894a:	b003      	add	sp, #12
 800894c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800894e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008952:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008956:	e7ed      	b.n	8008934 <__exponent+0x4c>
 8008958:	2330      	movs	r3, #48	; 0x30
 800895a:	3130      	adds	r1, #48	; 0x30
 800895c:	7083      	strb	r3, [r0, #2]
 800895e:	70c1      	strb	r1, [r0, #3]
 8008960:	1d03      	adds	r3, r0, #4
 8008962:	e7f1      	b.n	8008948 <__exponent+0x60>
 8008964:	0000      	movs	r0, r0
	...

08008968 <_printf_float>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	b08b      	sub	sp, #44	; 0x2c
 800896e:	460c      	mov	r4, r1
 8008970:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008974:	4616      	mov	r6, r2
 8008976:	461f      	mov	r7, r3
 8008978:	4605      	mov	r5, r0
 800897a:	f002 fd97 	bl	800b4ac <_localeconv_r>
 800897e:	f8d0 b000 	ldr.w	fp, [r0]
 8008982:	4658      	mov	r0, fp
 8008984:	f7f7 fcac 	bl	80002e0 <strlen>
 8008988:	2300      	movs	r3, #0
 800898a:	9308      	str	r3, [sp, #32]
 800898c:	f8d8 3000 	ldr.w	r3, [r8]
 8008990:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008994:	6822      	ldr	r2, [r4, #0]
 8008996:	3307      	adds	r3, #7
 8008998:	f023 0307 	bic.w	r3, r3, #7
 800899c:	f103 0108 	add.w	r1, r3, #8
 80089a0:	f8c8 1000 	str.w	r1, [r8]
 80089a4:	4682      	mov	sl, r0
 80089a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089aa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80089ae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008c10 <_printf_float+0x2a8>
 80089b2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80089b6:	eeb0 6bc0 	vabs.f64	d6, d0
 80089ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80089be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c2:	dd24      	ble.n	8008a0e <_printf_float+0xa6>
 80089c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80089c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089cc:	d502      	bpl.n	80089d4 <_printf_float+0x6c>
 80089ce:	232d      	movs	r3, #45	; 0x2d
 80089d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089d4:	4b90      	ldr	r3, [pc, #576]	; (8008c18 <_printf_float+0x2b0>)
 80089d6:	4891      	ldr	r0, [pc, #580]	; (8008c1c <_printf_float+0x2b4>)
 80089d8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80089dc:	bf94      	ite	ls
 80089de:	4698      	movls	r8, r3
 80089e0:	4680      	movhi	r8, r0
 80089e2:	2303      	movs	r3, #3
 80089e4:	6123      	str	r3, [r4, #16]
 80089e6:	f022 0204 	bic.w	r2, r2, #4
 80089ea:	2300      	movs	r3, #0
 80089ec:	6022      	str	r2, [r4, #0]
 80089ee:	9304      	str	r3, [sp, #16]
 80089f0:	9700      	str	r7, [sp, #0]
 80089f2:	4633      	mov	r3, r6
 80089f4:	aa09      	add	r2, sp, #36	; 0x24
 80089f6:	4621      	mov	r1, r4
 80089f8:	4628      	mov	r0, r5
 80089fa:	f000 f9d3 	bl	8008da4 <_printf_common>
 80089fe:	3001      	adds	r0, #1
 8008a00:	f040 808a 	bne.w	8008b18 <_printf_float+0x1b0>
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295
 8008a08:	b00b      	add	sp, #44	; 0x2c
 8008a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0e:	eeb4 0b40 	vcmp.f64	d0, d0
 8008a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a16:	d709      	bvc.n	8008a2c <_printf_float+0xc4>
 8008a18:	ee10 3a90 	vmov	r3, s1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	bfbc      	itt	lt
 8008a20:	232d      	movlt	r3, #45	; 0x2d
 8008a22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a26:	487e      	ldr	r0, [pc, #504]	; (8008c20 <_printf_float+0x2b8>)
 8008a28:	4b7e      	ldr	r3, [pc, #504]	; (8008c24 <_printf_float+0x2bc>)
 8008a2a:	e7d5      	b.n	80089d8 <_printf_float+0x70>
 8008a2c:	6863      	ldr	r3, [r4, #4]
 8008a2e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008a32:	9104      	str	r1, [sp, #16]
 8008a34:	1c59      	adds	r1, r3, #1
 8008a36:	d13c      	bne.n	8008ab2 <_printf_float+0x14a>
 8008a38:	2306      	movs	r3, #6
 8008a3a:	6063      	str	r3, [r4, #4]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	9303      	str	r3, [sp, #12]
 8008a40:	ab08      	add	r3, sp, #32
 8008a42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008a46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a4a:	ab07      	add	r3, sp, #28
 8008a4c:	6861      	ldr	r1, [r4, #4]
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	6022      	str	r2, [r4, #0]
 8008a52:	f10d 031b 	add.w	r3, sp, #27
 8008a56:	4628      	mov	r0, r5
 8008a58:	f7ff fef4 	bl	8008844 <__cvt>
 8008a5c:	9b04      	ldr	r3, [sp, #16]
 8008a5e:	9907      	ldr	r1, [sp, #28]
 8008a60:	2b47      	cmp	r3, #71	; 0x47
 8008a62:	4680      	mov	r8, r0
 8008a64:	d108      	bne.n	8008a78 <_printf_float+0x110>
 8008a66:	1cc8      	adds	r0, r1, #3
 8008a68:	db02      	blt.n	8008a70 <_printf_float+0x108>
 8008a6a:	6863      	ldr	r3, [r4, #4]
 8008a6c:	4299      	cmp	r1, r3
 8008a6e:	dd41      	ble.n	8008af4 <_printf_float+0x18c>
 8008a70:	f1a9 0902 	sub.w	r9, r9, #2
 8008a74:	fa5f f989 	uxtb.w	r9, r9
 8008a78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008a7c:	d820      	bhi.n	8008ac0 <_printf_float+0x158>
 8008a7e:	3901      	subs	r1, #1
 8008a80:	464a      	mov	r2, r9
 8008a82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a86:	9107      	str	r1, [sp, #28]
 8008a88:	f7ff ff2e 	bl	80088e8 <__exponent>
 8008a8c:	9a08      	ldr	r2, [sp, #32]
 8008a8e:	9004      	str	r0, [sp, #16]
 8008a90:	1813      	adds	r3, r2, r0
 8008a92:	2a01      	cmp	r2, #1
 8008a94:	6123      	str	r3, [r4, #16]
 8008a96:	dc02      	bgt.n	8008a9e <_printf_float+0x136>
 8008a98:	6822      	ldr	r2, [r4, #0]
 8008a9a:	07d2      	lsls	r2, r2, #31
 8008a9c:	d501      	bpl.n	8008aa2 <_printf_float+0x13a>
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	6123      	str	r3, [r4, #16]
 8008aa2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d0a2      	beq.n	80089f0 <_printf_float+0x88>
 8008aaa:	232d      	movs	r3, #45	; 0x2d
 8008aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ab0:	e79e      	b.n	80089f0 <_printf_float+0x88>
 8008ab2:	9904      	ldr	r1, [sp, #16]
 8008ab4:	2947      	cmp	r1, #71	; 0x47
 8008ab6:	d1c1      	bne.n	8008a3c <_printf_float+0xd4>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1bf      	bne.n	8008a3c <_printf_float+0xd4>
 8008abc:	2301      	movs	r3, #1
 8008abe:	e7bc      	b.n	8008a3a <_printf_float+0xd2>
 8008ac0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008ac4:	d118      	bne.n	8008af8 <_printf_float+0x190>
 8008ac6:	2900      	cmp	r1, #0
 8008ac8:	6863      	ldr	r3, [r4, #4]
 8008aca:	dd0b      	ble.n	8008ae4 <_printf_float+0x17c>
 8008acc:	6121      	str	r1, [r4, #16]
 8008ace:	b913      	cbnz	r3, 8008ad6 <_printf_float+0x16e>
 8008ad0:	6822      	ldr	r2, [r4, #0]
 8008ad2:	07d0      	lsls	r0, r2, #31
 8008ad4:	d502      	bpl.n	8008adc <_printf_float+0x174>
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	440b      	add	r3, r1
 8008ada:	6123      	str	r3, [r4, #16]
 8008adc:	2300      	movs	r3, #0
 8008ade:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ae0:	9304      	str	r3, [sp, #16]
 8008ae2:	e7de      	b.n	8008aa2 <_printf_float+0x13a>
 8008ae4:	b913      	cbnz	r3, 8008aec <_printf_float+0x184>
 8008ae6:	6822      	ldr	r2, [r4, #0]
 8008ae8:	07d2      	lsls	r2, r2, #31
 8008aea:	d501      	bpl.n	8008af0 <_printf_float+0x188>
 8008aec:	3302      	adds	r3, #2
 8008aee:	e7f4      	b.n	8008ada <_printf_float+0x172>
 8008af0:	2301      	movs	r3, #1
 8008af2:	e7f2      	b.n	8008ada <_printf_float+0x172>
 8008af4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008af8:	9b08      	ldr	r3, [sp, #32]
 8008afa:	4299      	cmp	r1, r3
 8008afc:	db05      	blt.n	8008b0a <_printf_float+0x1a2>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	6121      	str	r1, [r4, #16]
 8008b02:	07d8      	lsls	r0, r3, #31
 8008b04:	d5ea      	bpl.n	8008adc <_printf_float+0x174>
 8008b06:	1c4b      	adds	r3, r1, #1
 8008b08:	e7e7      	b.n	8008ada <_printf_float+0x172>
 8008b0a:	2900      	cmp	r1, #0
 8008b0c:	bfd4      	ite	le
 8008b0e:	f1c1 0202 	rsble	r2, r1, #2
 8008b12:	2201      	movgt	r2, #1
 8008b14:	4413      	add	r3, r2
 8008b16:	e7e0      	b.n	8008ada <_printf_float+0x172>
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	055a      	lsls	r2, r3, #21
 8008b1c:	d407      	bmi.n	8008b2e <_printf_float+0x1c6>
 8008b1e:	6923      	ldr	r3, [r4, #16]
 8008b20:	4642      	mov	r2, r8
 8008b22:	4631      	mov	r1, r6
 8008b24:	4628      	mov	r0, r5
 8008b26:	47b8      	blx	r7
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d12a      	bne.n	8008b82 <_printf_float+0x21a>
 8008b2c:	e76a      	b.n	8008a04 <_printf_float+0x9c>
 8008b2e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b32:	f240 80e2 	bls.w	8008cfa <_printf_float+0x392>
 8008b36:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008b3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b42:	d133      	bne.n	8008bac <_printf_float+0x244>
 8008b44:	4a38      	ldr	r2, [pc, #224]	; (8008c28 <_printf_float+0x2c0>)
 8008b46:	2301      	movs	r3, #1
 8008b48:	4631      	mov	r1, r6
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	47b8      	blx	r7
 8008b4e:	3001      	adds	r0, #1
 8008b50:	f43f af58 	beq.w	8008a04 <_printf_float+0x9c>
 8008b54:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	db02      	blt.n	8008b62 <_printf_float+0x1fa>
 8008b5c:	6823      	ldr	r3, [r4, #0]
 8008b5e:	07d8      	lsls	r0, r3, #31
 8008b60:	d50f      	bpl.n	8008b82 <_printf_float+0x21a>
 8008b62:	4653      	mov	r3, sl
 8008b64:	465a      	mov	r2, fp
 8008b66:	4631      	mov	r1, r6
 8008b68:	4628      	mov	r0, r5
 8008b6a:	47b8      	blx	r7
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	f43f af49 	beq.w	8008a04 <_printf_float+0x9c>
 8008b72:	f04f 0800 	mov.w	r8, #0
 8008b76:	f104 091a 	add.w	r9, r4, #26
 8008b7a:	9b08      	ldr	r3, [sp, #32]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	4543      	cmp	r3, r8
 8008b80:	dc09      	bgt.n	8008b96 <_printf_float+0x22e>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	079b      	lsls	r3, r3, #30
 8008b86:	f100 8108 	bmi.w	8008d9a <_printf_float+0x432>
 8008b8a:	68e0      	ldr	r0, [r4, #12]
 8008b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8e:	4298      	cmp	r0, r3
 8008b90:	bfb8      	it	lt
 8008b92:	4618      	movlt	r0, r3
 8008b94:	e738      	b.n	8008a08 <_printf_float+0xa0>
 8008b96:	2301      	movs	r3, #1
 8008b98:	464a      	mov	r2, r9
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	47b8      	blx	r7
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	f43f af2f 	beq.w	8008a04 <_printf_float+0x9c>
 8008ba6:	f108 0801 	add.w	r8, r8, #1
 8008baa:	e7e6      	b.n	8008b7a <_printf_float+0x212>
 8008bac:	9b07      	ldr	r3, [sp, #28]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	dc3c      	bgt.n	8008c2c <_printf_float+0x2c4>
 8008bb2:	4a1d      	ldr	r2, [pc, #116]	; (8008c28 <_printf_float+0x2c0>)
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	f43f af21 	beq.w	8008a04 <_printf_float+0x9c>
 8008bc2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	d102      	bne.n	8008bd0 <_printf_float+0x268>
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	07d9      	lsls	r1, r3, #31
 8008bce:	d5d8      	bpl.n	8008b82 <_printf_float+0x21a>
 8008bd0:	4653      	mov	r3, sl
 8008bd2:	465a      	mov	r2, fp
 8008bd4:	4631      	mov	r1, r6
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	47b8      	blx	r7
 8008bda:	3001      	adds	r0, #1
 8008bdc:	f43f af12 	beq.w	8008a04 <_printf_float+0x9c>
 8008be0:	f04f 0900 	mov.w	r9, #0
 8008be4:	f104 0a1a 	add.w	sl, r4, #26
 8008be8:	9b07      	ldr	r3, [sp, #28]
 8008bea:	425b      	negs	r3, r3
 8008bec:	454b      	cmp	r3, r9
 8008bee:	dc01      	bgt.n	8008bf4 <_printf_float+0x28c>
 8008bf0:	9b08      	ldr	r3, [sp, #32]
 8008bf2:	e795      	b.n	8008b20 <_printf_float+0x1b8>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	4652      	mov	r2, sl
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	f43f af00 	beq.w	8008a04 <_printf_float+0x9c>
 8008c04:	f109 0901 	add.w	r9, r9, #1
 8008c08:	e7ee      	b.n	8008be8 <_printf_float+0x280>
 8008c0a:	bf00      	nop
 8008c0c:	f3af 8000 	nop.w
 8008c10:	ffffffff 	.word	0xffffffff
 8008c14:	7fefffff 	.word	0x7fefffff
 8008c18:	0800e738 	.word	0x0800e738
 8008c1c:	0800e73c 	.word	0x0800e73c
 8008c20:	0800e744 	.word	0x0800e744
 8008c24:	0800e740 	.word	0x0800e740
 8008c28:	0800e748 	.word	0x0800e748
 8008c2c:	9a08      	ldr	r2, [sp, #32]
 8008c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c30:	429a      	cmp	r2, r3
 8008c32:	bfa8      	it	ge
 8008c34:	461a      	movge	r2, r3
 8008c36:	2a00      	cmp	r2, #0
 8008c38:	4691      	mov	r9, r2
 8008c3a:	dc38      	bgt.n	8008cae <_printf_float+0x346>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9305      	str	r3, [sp, #20]
 8008c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c44:	f104 021a 	add.w	r2, r4, #26
 8008c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c4a:	9905      	ldr	r1, [sp, #20]
 8008c4c:	9304      	str	r3, [sp, #16]
 8008c4e:	eba3 0309 	sub.w	r3, r3, r9
 8008c52:	428b      	cmp	r3, r1
 8008c54:	dc33      	bgt.n	8008cbe <_printf_float+0x356>
 8008c56:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	db3c      	blt.n	8008cd8 <_printf_float+0x370>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	07da      	lsls	r2, r3, #31
 8008c62:	d439      	bmi.n	8008cd8 <_printf_float+0x370>
 8008c64:	9b08      	ldr	r3, [sp, #32]
 8008c66:	9a04      	ldr	r2, [sp, #16]
 8008c68:	9907      	ldr	r1, [sp, #28]
 8008c6a:	1a9a      	subs	r2, r3, r2
 8008c6c:	eba3 0901 	sub.w	r9, r3, r1
 8008c70:	4591      	cmp	r9, r2
 8008c72:	bfa8      	it	ge
 8008c74:	4691      	movge	r9, r2
 8008c76:	f1b9 0f00 	cmp.w	r9, #0
 8008c7a:	dc35      	bgt.n	8008ce8 <_printf_float+0x380>
 8008c7c:	f04f 0800 	mov.w	r8, #0
 8008c80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c84:	f104 0a1a 	add.w	sl, r4, #26
 8008c88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008c8c:	1a9b      	subs	r3, r3, r2
 8008c8e:	eba3 0309 	sub.w	r3, r3, r9
 8008c92:	4543      	cmp	r3, r8
 8008c94:	f77f af75 	ble.w	8008b82 <_printf_float+0x21a>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	4652      	mov	r2, sl
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	47b8      	blx	r7
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	f43f aeae 	beq.w	8008a04 <_printf_float+0x9c>
 8008ca8:	f108 0801 	add.w	r8, r8, #1
 8008cac:	e7ec      	b.n	8008c88 <_printf_float+0x320>
 8008cae:	4613      	mov	r3, r2
 8008cb0:	4631      	mov	r1, r6
 8008cb2:	4642      	mov	r2, r8
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	47b8      	blx	r7
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d1bf      	bne.n	8008c3c <_printf_float+0x2d4>
 8008cbc:	e6a2      	b.n	8008a04 <_printf_float+0x9c>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	9204      	str	r2, [sp, #16]
 8008cc6:	47b8      	blx	r7
 8008cc8:	3001      	adds	r0, #1
 8008cca:	f43f ae9b 	beq.w	8008a04 <_printf_float+0x9c>
 8008cce:	9b05      	ldr	r3, [sp, #20]
 8008cd0:	9a04      	ldr	r2, [sp, #16]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	9305      	str	r3, [sp, #20]
 8008cd6:	e7b7      	b.n	8008c48 <_printf_float+0x2e0>
 8008cd8:	4653      	mov	r3, sl
 8008cda:	465a      	mov	r2, fp
 8008cdc:	4631      	mov	r1, r6
 8008cde:	4628      	mov	r0, r5
 8008ce0:	47b8      	blx	r7
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d1be      	bne.n	8008c64 <_printf_float+0x2fc>
 8008ce6:	e68d      	b.n	8008a04 <_printf_float+0x9c>
 8008ce8:	9a04      	ldr	r2, [sp, #16]
 8008cea:	464b      	mov	r3, r9
 8008cec:	4442      	add	r2, r8
 8008cee:	4631      	mov	r1, r6
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	47b8      	blx	r7
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d1c1      	bne.n	8008c7c <_printf_float+0x314>
 8008cf8:	e684      	b.n	8008a04 <_printf_float+0x9c>
 8008cfa:	9a08      	ldr	r2, [sp, #32]
 8008cfc:	2a01      	cmp	r2, #1
 8008cfe:	dc01      	bgt.n	8008d04 <_printf_float+0x39c>
 8008d00:	07db      	lsls	r3, r3, #31
 8008d02:	d537      	bpl.n	8008d74 <_printf_float+0x40c>
 8008d04:	2301      	movs	r3, #1
 8008d06:	4642      	mov	r2, r8
 8008d08:	4631      	mov	r1, r6
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	47b8      	blx	r7
 8008d0e:	3001      	adds	r0, #1
 8008d10:	f43f ae78 	beq.w	8008a04 <_printf_float+0x9c>
 8008d14:	4653      	mov	r3, sl
 8008d16:	465a      	mov	r2, fp
 8008d18:	4631      	mov	r1, r6
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	47b8      	blx	r7
 8008d1e:	3001      	adds	r0, #1
 8008d20:	f43f ae70 	beq.w	8008a04 <_printf_float+0x9c>
 8008d24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008d28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d30:	d01b      	beq.n	8008d6a <_printf_float+0x402>
 8008d32:	9b08      	ldr	r3, [sp, #32]
 8008d34:	f108 0201 	add.w	r2, r8, #1
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	47b8      	blx	r7
 8008d40:	3001      	adds	r0, #1
 8008d42:	d10e      	bne.n	8008d62 <_printf_float+0x3fa>
 8008d44:	e65e      	b.n	8008a04 <_printf_float+0x9c>
 8008d46:	2301      	movs	r3, #1
 8008d48:	464a      	mov	r2, r9
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	47b8      	blx	r7
 8008d50:	3001      	adds	r0, #1
 8008d52:	f43f ae57 	beq.w	8008a04 <_printf_float+0x9c>
 8008d56:	f108 0801 	add.w	r8, r8, #1
 8008d5a:	9b08      	ldr	r3, [sp, #32]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	4543      	cmp	r3, r8
 8008d60:	dcf1      	bgt.n	8008d46 <_printf_float+0x3de>
 8008d62:	9b04      	ldr	r3, [sp, #16]
 8008d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d68:	e6db      	b.n	8008b22 <_printf_float+0x1ba>
 8008d6a:	f04f 0800 	mov.w	r8, #0
 8008d6e:	f104 091a 	add.w	r9, r4, #26
 8008d72:	e7f2      	b.n	8008d5a <_printf_float+0x3f2>
 8008d74:	2301      	movs	r3, #1
 8008d76:	4642      	mov	r2, r8
 8008d78:	e7df      	b.n	8008d3a <_printf_float+0x3d2>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	464a      	mov	r2, r9
 8008d7e:	4631      	mov	r1, r6
 8008d80:	4628      	mov	r0, r5
 8008d82:	47b8      	blx	r7
 8008d84:	3001      	adds	r0, #1
 8008d86:	f43f ae3d 	beq.w	8008a04 <_printf_float+0x9c>
 8008d8a:	f108 0801 	add.w	r8, r8, #1
 8008d8e:	68e3      	ldr	r3, [r4, #12]
 8008d90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d92:	1a5b      	subs	r3, r3, r1
 8008d94:	4543      	cmp	r3, r8
 8008d96:	dcf0      	bgt.n	8008d7a <_printf_float+0x412>
 8008d98:	e6f7      	b.n	8008b8a <_printf_float+0x222>
 8008d9a:	f04f 0800 	mov.w	r8, #0
 8008d9e:	f104 0919 	add.w	r9, r4, #25
 8008da2:	e7f4      	b.n	8008d8e <_printf_float+0x426>

08008da4 <_printf_common>:
 8008da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da8:	4616      	mov	r6, r2
 8008daa:	4699      	mov	r9, r3
 8008dac:	688a      	ldr	r2, [r1, #8]
 8008dae:	690b      	ldr	r3, [r1, #16]
 8008db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008db4:	4293      	cmp	r3, r2
 8008db6:	bfb8      	it	lt
 8008db8:	4613      	movlt	r3, r2
 8008dba:	6033      	str	r3, [r6, #0]
 8008dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dc0:	4607      	mov	r7, r0
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	b10a      	cbz	r2, 8008dca <_printf_common+0x26>
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	6033      	str	r3, [r6, #0]
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	0699      	lsls	r1, r3, #26
 8008dce:	bf42      	ittt	mi
 8008dd0:	6833      	ldrmi	r3, [r6, #0]
 8008dd2:	3302      	addmi	r3, #2
 8008dd4:	6033      	strmi	r3, [r6, #0]
 8008dd6:	6825      	ldr	r5, [r4, #0]
 8008dd8:	f015 0506 	ands.w	r5, r5, #6
 8008ddc:	d106      	bne.n	8008dec <_printf_common+0x48>
 8008dde:	f104 0a19 	add.w	sl, r4, #25
 8008de2:	68e3      	ldr	r3, [r4, #12]
 8008de4:	6832      	ldr	r2, [r6, #0]
 8008de6:	1a9b      	subs	r3, r3, r2
 8008de8:	42ab      	cmp	r3, r5
 8008dea:	dc26      	bgt.n	8008e3a <_printf_common+0x96>
 8008dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008df0:	1e13      	subs	r3, r2, #0
 8008df2:	6822      	ldr	r2, [r4, #0]
 8008df4:	bf18      	it	ne
 8008df6:	2301      	movne	r3, #1
 8008df8:	0692      	lsls	r2, r2, #26
 8008dfa:	d42b      	bmi.n	8008e54 <_printf_common+0xb0>
 8008dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e00:	4649      	mov	r1, r9
 8008e02:	4638      	mov	r0, r7
 8008e04:	47c0      	blx	r8
 8008e06:	3001      	adds	r0, #1
 8008e08:	d01e      	beq.n	8008e48 <_printf_common+0xa4>
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	68e5      	ldr	r5, [r4, #12]
 8008e0e:	6832      	ldr	r2, [r6, #0]
 8008e10:	f003 0306 	and.w	r3, r3, #6
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	bf08      	it	eq
 8008e18:	1aad      	subeq	r5, r5, r2
 8008e1a:	68a3      	ldr	r3, [r4, #8]
 8008e1c:	6922      	ldr	r2, [r4, #16]
 8008e1e:	bf0c      	ite	eq
 8008e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e24:	2500      	movne	r5, #0
 8008e26:	4293      	cmp	r3, r2
 8008e28:	bfc4      	itt	gt
 8008e2a:	1a9b      	subgt	r3, r3, r2
 8008e2c:	18ed      	addgt	r5, r5, r3
 8008e2e:	2600      	movs	r6, #0
 8008e30:	341a      	adds	r4, #26
 8008e32:	42b5      	cmp	r5, r6
 8008e34:	d11a      	bne.n	8008e6c <_printf_common+0xc8>
 8008e36:	2000      	movs	r0, #0
 8008e38:	e008      	b.n	8008e4c <_printf_common+0xa8>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4652      	mov	r2, sl
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4638      	mov	r0, r7
 8008e42:	47c0      	blx	r8
 8008e44:	3001      	adds	r0, #1
 8008e46:	d103      	bne.n	8008e50 <_printf_common+0xac>
 8008e48:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e50:	3501      	adds	r5, #1
 8008e52:	e7c6      	b.n	8008de2 <_printf_common+0x3e>
 8008e54:	18e1      	adds	r1, r4, r3
 8008e56:	1c5a      	adds	r2, r3, #1
 8008e58:	2030      	movs	r0, #48	; 0x30
 8008e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e5e:	4422      	add	r2, r4
 8008e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e68:	3302      	adds	r3, #2
 8008e6a:	e7c7      	b.n	8008dfc <_printf_common+0x58>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	4622      	mov	r2, r4
 8008e70:	4649      	mov	r1, r9
 8008e72:	4638      	mov	r0, r7
 8008e74:	47c0      	blx	r8
 8008e76:	3001      	adds	r0, #1
 8008e78:	d0e6      	beq.n	8008e48 <_printf_common+0xa4>
 8008e7a:	3601      	adds	r6, #1
 8008e7c:	e7d9      	b.n	8008e32 <_printf_common+0x8e>
	...

08008e80 <_printf_i>:
 8008e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e84:	7e0f      	ldrb	r7, [r1, #24]
 8008e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e88:	2f78      	cmp	r7, #120	; 0x78
 8008e8a:	4691      	mov	r9, r2
 8008e8c:	4680      	mov	r8, r0
 8008e8e:	460c      	mov	r4, r1
 8008e90:	469a      	mov	sl, r3
 8008e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e96:	d807      	bhi.n	8008ea8 <_printf_i+0x28>
 8008e98:	2f62      	cmp	r7, #98	; 0x62
 8008e9a:	d80a      	bhi.n	8008eb2 <_printf_i+0x32>
 8008e9c:	2f00      	cmp	r7, #0
 8008e9e:	f000 80d8 	beq.w	8009052 <_printf_i+0x1d2>
 8008ea2:	2f58      	cmp	r7, #88	; 0x58
 8008ea4:	f000 80a3 	beq.w	8008fee <_printf_i+0x16e>
 8008ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008eb0:	e03a      	b.n	8008f28 <_printf_i+0xa8>
 8008eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eb6:	2b15      	cmp	r3, #21
 8008eb8:	d8f6      	bhi.n	8008ea8 <_printf_i+0x28>
 8008eba:	a101      	add	r1, pc, #4	; (adr r1, 8008ec0 <_printf_i+0x40>)
 8008ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ec0:	08008f19 	.word	0x08008f19
 8008ec4:	08008f2d 	.word	0x08008f2d
 8008ec8:	08008ea9 	.word	0x08008ea9
 8008ecc:	08008ea9 	.word	0x08008ea9
 8008ed0:	08008ea9 	.word	0x08008ea9
 8008ed4:	08008ea9 	.word	0x08008ea9
 8008ed8:	08008f2d 	.word	0x08008f2d
 8008edc:	08008ea9 	.word	0x08008ea9
 8008ee0:	08008ea9 	.word	0x08008ea9
 8008ee4:	08008ea9 	.word	0x08008ea9
 8008ee8:	08008ea9 	.word	0x08008ea9
 8008eec:	08009039 	.word	0x08009039
 8008ef0:	08008f5d 	.word	0x08008f5d
 8008ef4:	0800901b 	.word	0x0800901b
 8008ef8:	08008ea9 	.word	0x08008ea9
 8008efc:	08008ea9 	.word	0x08008ea9
 8008f00:	0800905b 	.word	0x0800905b
 8008f04:	08008ea9 	.word	0x08008ea9
 8008f08:	08008f5d 	.word	0x08008f5d
 8008f0c:	08008ea9 	.word	0x08008ea9
 8008f10:	08008ea9 	.word	0x08008ea9
 8008f14:	08009023 	.word	0x08009023
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	1d1a      	adds	r2, r3, #4
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	602a      	str	r2, [r5, #0]
 8008f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e0a3      	b.n	8009074 <_printf_i+0x1f4>
 8008f2c:	6820      	ldr	r0, [r4, #0]
 8008f2e:	6829      	ldr	r1, [r5, #0]
 8008f30:	0606      	lsls	r6, r0, #24
 8008f32:	f101 0304 	add.w	r3, r1, #4
 8008f36:	d50a      	bpl.n	8008f4e <_printf_i+0xce>
 8008f38:	680e      	ldr	r6, [r1, #0]
 8008f3a:	602b      	str	r3, [r5, #0]
 8008f3c:	2e00      	cmp	r6, #0
 8008f3e:	da03      	bge.n	8008f48 <_printf_i+0xc8>
 8008f40:	232d      	movs	r3, #45	; 0x2d
 8008f42:	4276      	negs	r6, r6
 8008f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f48:	485e      	ldr	r0, [pc, #376]	; (80090c4 <_printf_i+0x244>)
 8008f4a:	230a      	movs	r3, #10
 8008f4c:	e019      	b.n	8008f82 <_printf_i+0x102>
 8008f4e:	680e      	ldr	r6, [r1, #0]
 8008f50:	602b      	str	r3, [r5, #0]
 8008f52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f56:	bf18      	it	ne
 8008f58:	b236      	sxthne	r6, r6
 8008f5a:	e7ef      	b.n	8008f3c <_printf_i+0xbc>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	6820      	ldr	r0, [r4, #0]
 8008f60:	1d19      	adds	r1, r3, #4
 8008f62:	6029      	str	r1, [r5, #0]
 8008f64:	0601      	lsls	r1, r0, #24
 8008f66:	d501      	bpl.n	8008f6c <_printf_i+0xec>
 8008f68:	681e      	ldr	r6, [r3, #0]
 8008f6a:	e002      	b.n	8008f72 <_printf_i+0xf2>
 8008f6c:	0646      	lsls	r6, r0, #25
 8008f6e:	d5fb      	bpl.n	8008f68 <_printf_i+0xe8>
 8008f70:	881e      	ldrh	r6, [r3, #0]
 8008f72:	4854      	ldr	r0, [pc, #336]	; (80090c4 <_printf_i+0x244>)
 8008f74:	2f6f      	cmp	r7, #111	; 0x6f
 8008f76:	bf0c      	ite	eq
 8008f78:	2308      	moveq	r3, #8
 8008f7a:	230a      	movne	r3, #10
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f82:	6865      	ldr	r5, [r4, #4]
 8008f84:	60a5      	str	r5, [r4, #8]
 8008f86:	2d00      	cmp	r5, #0
 8008f88:	bfa2      	ittt	ge
 8008f8a:	6821      	ldrge	r1, [r4, #0]
 8008f8c:	f021 0104 	bicge.w	r1, r1, #4
 8008f90:	6021      	strge	r1, [r4, #0]
 8008f92:	b90e      	cbnz	r6, 8008f98 <_printf_i+0x118>
 8008f94:	2d00      	cmp	r5, #0
 8008f96:	d04d      	beq.n	8009034 <_printf_i+0x1b4>
 8008f98:	4615      	mov	r5, r2
 8008f9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f9e:	fb03 6711 	mls	r7, r3, r1, r6
 8008fa2:	5dc7      	ldrb	r7, [r0, r7]
 8008fa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fa8:	4637      	mov	r7, r6
 8008faa:	42bb      	cmp	r3, r7
 8008fac:	460e      	mov	r6, r1
 8008fae:	d9f4      	bls.n	8008f9a <_printf_i+0x11a>
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d10b      	bne.n	8008fcc <_printf_i+0x14c>
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	07de      	lsls	r6, r3, #31
 8008fb8:	d508      	bpl.n	8008fcc <_printf_i+0x14c>
 8008fba:	6923      	ldr	r3, [r4, #16]
 8008fbc:	6861      	ldr	r1, [r4, #4]
 8008fbe:	4299      	cmp	r1, r3
 8008fc0:	bfde      	ittt	le
 8008fc2:	2330      	movle	r3, #48	; 0x30
 8008fc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fcc:	1b52      	subs	r2, r2, r5
 8008fce:	6122      	str	r2, [r4, #16]
 8008fd0:	f8cd a000 	str.w	sl, [sp]
 8008fd4:	464b      	mov	r3, r9
 8008fd6:	aa03      	add	r2, sp, #12
 8008fd8:	4621      	mov	r1, r4
 8008fda:	4640      	mov	r0, r8
 8008fdc:	f7ff fee2 	bl	8008da4 <_printf_common>
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d14c      	bne.n	800907e <_printf_i+0x1fe>
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe8:	b004      	add	sp, #16
 8008fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fee:	4835      	ldr	r0, [pc, #212]	; (80090c4 <_printf_i+0x244>)
 8008ff0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ff4:	6829      	ldr	r1, [r5, #0]
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ffc:	6029      	str	r1, [r5, #0]
 8008ffe:	061d      	lsls	r5, r3, #24
 8009000:	d514      	bpl.n	800902c <_printf_i+0x1ac>
 8009002:	07df      	lsls	r7, r3, #31
 8009004:	bf44      	itt	mi
 8009006:	f043 0320 	orrmi.w	r3, r3, #32
 800900a:	6023      	strmi	r3, [r4, #0]
 800900c:	b91e      	cbnz	r6, 8009016 <_printf_i+0x196>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	f023 0320 	bic.w	r3, r3, #32
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	2310      	movs	r3, #16
 8009018:	e7b0      	b.n	8008f7c <_printf_i+0xfc>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	f043 0320 	orr.w	r3, r3, #32
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	2378      	movs	r3, #120	; 0x78
 8009024:	4828      	ldr	r0, [pc, #160]	; (80090c8 <_printf_i+0x248>)
 8009026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800902a:	e7e3      	b.n	8008ff4 <_printf_i+0x174>
 800902c:	0659      	lsls	r1, r3, #25
 800902e:	bf48      	it	mi
 8009030:	b2b6      	uxthmi	r6, r6
 8009032:	e7e6      	b.n	8009002 <_printf_i+0x182>
 8009034:	4615      	mov	r5, r2
 8009036:	e7bb      	b.n	8008fb0 <_printf_i+0x130>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	6826      	ldr	r6, [r4, #0]
 800903c:	6961      	ldr	r1, [r4, #20]
 800903e:	1d18      	adds	r0, r3, #4
 8009040:	6028      	str	r0, [r5, #0]
 8009042:	0635      	lsls	r5, r6, #24
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	d501      	bpl.n	800904c <_printf_i+0x1cc>
 8009048:	6019      	str	r1, [r3, #0]
 800904a:	e002      	b.n	8009052 <_printf_i+0x1d2>
 800904c:	0670      	lsls	r0, r6, #25
 800904e:	d5fb      	bpl.n	8009048 <_printf_i+0x1c8>
 8009050:	8019      	strh	r1, [r3, #0]
 8009052:	2300      	movs	r3, #0
 8009054:	6123      	str	r3, [r4, #16]
 8009056:	4615      	mov	r5, r2
 8009058:	e7ba      	b.n	8008fd0 <_printf_i+0x150>
 800905a:	682b      	ldr	r3, [r5, #0]
 800905c:	1d1a      	adds	r2, r3, #4
 800905e:	602a      	str	r2, [r5, #0]
 8009060:	681d      	ldr	r5, [r3, #0]
 8009062:	6862      	ldr	r2, [r4, #4]
 8009064:	2100      	movs	r1, #0
 8009066:	4628      	mov	r0, r5
 8009068:	f7f7 f942 	bl	80002f0 <memchr>
 800906c:	b108      	cbz	r0, 8009072 <_printf_i+0x1f2>
 800906e:	1b40      	subs	r0, r0, r5
 8009070:	6060      	str	r0, [r4, #4]
 8009072:	6863      	ldr	r3, [r4, #4]
 8009074:	6123      	str	r3, [r4, #16]
 8009076:	2300      	movs	r3, #0
 8009078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800907c:	e7a8      	b.n	8008fd0 <_printf_i+0x150>
 800907e:	6923      	ldr	r3, [r4, #16]
 8009080:	462a      	mov	r2, r5
 8009082:	4649      	mov	r1, r9
 8009084:	4640      	mov	r0, r8
 8009086:	47d0      	blx	sl
 8009088:	3001      	adds	r0, #1
 800908a:	d0ab      	beq.n	8008fe4 <_printf_i+0x164>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	079b      	lsls	r3, r3, #30
 8009090:	d413      	bmi.n	80090ba <_printf_i+0x23a>
 8009092:	68e0      	ldr	r0, [r4, #12]
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	4298      	cmp	r0, r3
 8009098:	bfb8      	it	lt
 800909a:	4618      	movlt	r0, r3
 800909c:	e7a4      	b.n	8008fe8 <_printf_i+0x168>
 800909e:	2301      	movs	r3, #1
 80090a0:	4632      	mov	r2, r6
 80090a2:	4649      	mov	r1, r9
 80090a4:	4640      	mov	r0, r8
 80090a6:	47d0      	blx	sl
 80090a8:	3001      	adds	r0, #1
 80090aa:	d09b      	beq.n	8008fe4 <_printf_i+0x164>
 80090ac:	3501      	adds	r5, #1
 80090ae:	68e3      	ldr	r3, [r4, #12]
 80090b0:	9903      	ldr	r1, [sp, #12]
 80090b2:	1a5b      	subs	r3, r3, r1
 80090b4:	42ab      	cmp	r3, r5
 80090b6:	dcf2      	bgt.n	800909e <_printf_i+0x21e>
 80090b8:	e7eb      	b.n	8009092 <_printf_i+0x212>
 80090ba:	2500      	movs	r5, #0
 80090bc:	f104 0619 	add.w	r6, r4, #25
 80090c0:	e7f5      	b.n	80090ae <_printf_i+0x22e>
 80090c2:	bf00      	nop
 80090c4:	0800e74a 	.word	0x0800e74a
 80090c8:	0800e75b 	.word	0x0800e75b

080090cc <_scanf_float>:
 80090cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d0:	b087      	sub	sp, #28
 80090d2:	4617      	mov	r7, r2
 80090d4:	9303      	str	r3, [sp, #12]
 80090d6:	688b      	ldr	r3, [r1, #8]
 80090d8:	1e5a      	subs	r2, r3, #1
 80090da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80090de:	bf83      	ittte	hi
 80090e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80090e4:	195b      	addhi	r3, r3, r5
 80090e6:	9302      	strhi	r3, [sp, #8]
 80090e8:	2300      	movls	r3, #0
 80090ea:	bf86      	itte	hi
 80090ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80090f0:	608b      	strhi	r3, [r1, #8]
 80090f2:	9302      	strls	r3, [sp, #8]
 80090f4:	680b      	ldr	r3, [r1, #0]
 80090f6:	468b      	mov	fp, r1
 80090f8:	2500      	movs	r5, #0
 80090fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80090fe:	f84b 3b1c 	str.w	r3, [fp], #28
 8009102:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009106:	4680      	mov	r8, r0
 8009108:	460c      	mov	r4, r1
 800910a:	465e      	mov	r6, fp
 800910c:	46aa      	mov	sl, r5
 800910e:	46a9      	mov	r9, r5
 8009110:	9501      	str	r5, [sp, #4]
 8009112:	68a2      	ldr	r2, [r4, #8]
 8009114:	b152      	cbz	r2, 800912c <_scanf_float+0x60>
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	2b4e      	cmp	r3, #78	; 0x4e
 800911c:	d864      	bhi.n	80091e8 <_scanf_float+0x11c>
 800911e:	2b40      	cmp	r3, #64	; 0x40
 8009120:	d83c      	bhi.n	800919c <_scanf_float+0xd0>
 8009122:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009126:	b2c8      	uxtb	r0, r1
 8009128:	280e      	cmp	r0, #14
 800912a:	d93a      	bls.n	80091a2 <_scanf_float+0xd6>
 800912c:	f1b9 0f00 	cmp.w	r9, #0
 8009130:	d003      	beq.n	800913a <_scanf_float+0x6e>
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800913e:	f1ba 0f01 	cmp.w	sl, #1
 8009142:	f200 8113 	bhi.w	800936c <_scanf_float+0x2a0>
 8009146:	455e      	cmp	r6, fp
 8009148:	f200 8105 	bhi.w	8009356 <_scanf_float+0x28a>
 800914c:	2501      	movs	r5, #1
 800914e:	4628      	mov	r0, r5
 8009150:	b007      	add	sp, #28
 8009152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009156:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800915a:	2a0d      	cmp	r2, #13
 800915c:	d8e6      	bhi.n	800912c <_scanf_float+0x60>
 800915e:	a101      	add	r1, pc, #4	; (adr r1, 8009164 <_scanf_float+0x98>)
 8009160:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009164:	080092a3 	.word	0x080092a3
 8009168:	0800912d 	.word	0x0800912d
 800916c:	0800912d 	.word	0x0800912d
 8009170:	0800912d 	.word	0x0800912d
 8009174:	08009303 	.word	0x08009303
 8009178:	080092db 	.word	0x080092db
 800917c:	0800912d 	.word	0x0800912d
 8009180:	0800912d 	.word	0x0800912d
 8009184:	080092b1 	.word	0x080092b1
 8009188:	0800912d 	.word	0x0800912d
 800918c:	0800912d 	.word	0x0800912d
 8009190:	0800912d 	.word	0x0800912d
 8009194:	0800912d 	.word	0x0800912d
 8009198:	08009269 	.word	0x08009269
 800919c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80091a0:	e7db      	b.n	800915a <_scanf_float+0x8e>
 80091a2:	290e      	cmp	r1, #14
 80091a4:	d8c2      	bhi.n	800912c <_scanf_float+0x60>
 80091a6:	a001      	add	r0, pc, #4	; (adr r0, 80091ac <_scanf_float+0xe0>)
 80091a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80091ac:	0800925b 	.word	0x0800925b
 80091b0:	0800912d 	.word	0x0800912d
 80091b4:	0800925b 	.word	0x0800925b
 80091b8:	080092ef 	.word	0x080092ef
 80091bc:	0800912d 	.word	0x0800912d
 80091c0:	08009209 	.word	0x08009209
 80091c4:	08009245 	.word	0x08009245
 80091c8:	08009245 	.word	0x08009245
 80091cc:	08009245 	.word	0x08009245
 80091d0:	08009245 	.word	0x08009245
 80091d4:	08009245 	.word	0x08009245
 80091d8:	08009245 	.word	0x08009245
 80091dc:	08009245 	.word	0x08009245
 80091e0:	08009245 	.word	0x08009245
 80091e4:	08009245 	.word	0x08009245
 80091e8:	2b6e      	cmp	r3, #110	; 0x6e
 80091ea:	d809      	bhi.n	8009200 <_scanf_float+0x134>
 80091ec:	2b60      	cmp	r3, #96	; 0x60
 80091ee:	d8b2      	bhi.n	8009156 <_scanf_float+0x8a>
 80091f0:	2b54      	cmp	r3, #84	; 0x54
 80091f2:	d077      	beq.n	80092e4 <_scanf_float+0x218>
 80091f4:	2b59      	cmp	r3, #89	; 0x59
 80091f6:	d199      	bne.n	800912c <_scanf_float+0x60>
 80091f8:	2d07      	cmp	r5, #7
 80091fa:	d197      	bne.n	800912c <_scanf_float+0x60>
 80091fc:	2508      	movs	r5, #8
 80091fe:	e029      	b.n	8009254 <_scanf_float+0x188>
 8009200:	2b74      	cmp	r3, #116	; 0x74
 8009202:	d06f      	beq.n	80092e4 <_scanf_float+0x218>
 8009204:	2b79      	cmp	r3, #121	; 0x79
 8009206:	e7f6      	b.n	80091f6 <_scanf_float+0x12a>
 8009208:	6821      	ldr	r1, [r4, #0]
 800920a:	05c8      	lsls	r0, r1, #23
 800920c:	d51a      	bpl.n	8009244 <_scanf_float+0x178>
 800920e:	9b02      	ldr	r3, [sp, #8]
 8009210:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009214:	6021      	str	r1, [r4, #0]
 8009216:	f109 0901 	add.w	r9, r9, #1
 800921a:	b11b      	cbz	r3, 8009224 <_scanf_float+0x158>
 800921c:	3b01      	subs	r3, #1
 800921e:	3201      	adds	r2, #1
 8009220:	9302      	str	r3, [sp, #8]
 8009222:	60a2      	str	r2, [r4, #8]
 8009224:	68a3      	ldr	r3, [r4, #8]
 8009226:	3b01      	subs	r3, #1
 8009228:	60a3      	str	r3, [r4, #8]
 800922a:	6923      	ldr	r3, [r4, #16]
 800922c:	3301      	adds	r3, #1
 800922e:	6123      	str	r3, [r4, #16]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3b01      	subs	r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	607b      	str	r3, [r7, #4]
 8009238:	f340 8084 	ble.w	8009344 <_scanf_float+0x278>
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	3301      	adds	r3, #1
 8009240:	603b      	str	r3, [r7, #0]
 8009242:	e766      	b.n	8009112 <_scanf_float+0x46>
 8009244:	eb1a 0f05 	cmn.w	sl, r5
 8009248:	f47f af70 	bne.w	800912c <_scanf_float+0x60>
 800924c:	6822      	ldr	r2, [r4, #0]
 800924e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009252:	6022      	str	r2, [r4, #0]
 8009254:	f806 3b01 	strb.w	r3, [r6], #1
 8009258:	e7e4      	b.n	8009224 <_scanf_float+0x158>
 800925a:	6822      	ldr	r2, [r4, #0]
 800925c:	0610      	lsls	r0, r2, #24
 800925e:	f57f af65 	bpl.w	800912c <_scanf_float+0x60>
 8009262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009266:	e7f4      	b.n	8009252 <_scanf_float+0x186>
 8009268:	f1ba 0f00 	cmp.w	sl, #0
 800926c:	d10e      	bne.n	800928c <_scanf_float+0x1c0>
 800926e:	f1b9 0f00 	cmp.w	r9, #0
 8009272:	d10e      	bne.n	8009292 <_scanf_float+0x1c6>
 8009274:	6822      	ldr	r2, [r4, #0]
 8009276:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800927a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800927e:	d108      	bne.n	8009292 <_scanf_float+0x1c6>
 8009280:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009284:	6022      	str	r2, [r4, #0]
 8009286:	f04f 0a01 	mov.w	sl, #1
 800928a:	e7e3      	b.n	8009254 <_scanf_float+0x188>
 800928c:	f1ba 0f02 	cmp.w	sl, #2
 8009290:	d055      	beq.n	800933e <_scanf_float+0x272>
 8009292:	2d01      	cmp	r5, #1
 8009294:	d002      	beq.n	800929c <_scanf_float+0x1d0>
 8009296:	2d04      	cmp	r5, #4
 8009298:	f47f af48 	bne.w	800912c <_scanf_float+0x60>
 800929c:	3501      	adds	r5, #1
 800929e:	b2ed      	uxtb	r5, r5
 80092a0:	e7d8      	b.n	8009254 <_scanf_float+0x188>
 80092a2:	f1ba 0f01 	cmp.w	sl, #1
 80092a6:	f47f af41 	bne.w	800912c <_scanf_float+0x60>
 80092aa:	f04f 0a02 	mov.w	sl, #2
 80092ae:	e7d1      	b.n	8009254 <_scanf_float+0x188>
 80092b0:	b97d      	cbnz	r5, 80092d2 <_scanf_float+0x206>
 80092b2:	f1b9 0f00 	cmp.w	r9, #0
 80092b6:	f47f af3c 	bne.w	8009132 <_scanf_float+0x66>
 80092ba:	6822      	ldr	r2, [r4, #0]
 80092bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80092c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80092c4:	f47f af39 	bne.w	800913a <_scanf_float+0x6e>
 80092c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092cc:	6022      	str	r2, [r4, #0]
 80092ce:	2501      	movs	r5, #1
 80092d0:	e7c0      	b.n	8009254 <_scanf_float+0x188>
 80092d2:	2d03      	cmp	r5, #3
 80092d4:	d0e2      	beq.n	800929c <_scanf_float+0x1d0>
 80092d6:	2d05      	cmp	r5, #5
 80092d8:	e7de      	b.n	8009298 <_scanf_float+0x1cc>
 80092da:	2d02      	cmp	r5, #2
 80092dc:	f47f af26 	bne.w	800912c <_scanf_float+0x60>
 80092e0:	2503      	movs	r5, #3
 80092e2:	e7b7      	b.n	8009254 <_scanf_float+0x188>
 80092e4:	2d06      	cmp	r5, #6
 80092e6:	f47f af21 	bne.w	800912c <_scanf_float+0x60>
 80092ea:	2507      	movs	r5, #7
 80092ec:	e7b2      	b.n	8009254 <_scanf_float+0x188>
 80092ee:	6822      	ldr	r2, [r4, #0]
 80092f0:	0591      	lsls	r1, r2, #22
 80092f2:	f57f af1b 	bpl.w	800912c <_scanf_float+0x60>
 80092f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80092fa:	6022      	str	r2, [r4, #0]
 80092fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009300:	e7a8      	b.n	8009254 <_scanf_float+0x188>
 8009302:	6822      	ldr	r2, [r4, #0]
 8009304:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009308:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800930c:	d006      	beq.n	800931c <_scanf_float+0x250>
 800930e:	0550      	lsls	r0, r2, #21
 8009310:	f57f af0c 	bpl.w	800912c <_scanf_float+0x60>
 8009314:	f1b9 0f00 	cmp.w	r9, #0
 8009318:	f43f af0f 	beq.w	800913a <_scanf_float+0x6e>
 800931c:	0591      	lsls	r1, r2, #22
 800931e:	bf58      	it	pl
 8009320:	9901      	ldrpl	r1, [sp, #4]
 8009322:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009326:	bf58      	it	pl
 8009328:	eba9 0101 	subpl.w	r1, r9, r1
 800932c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009330:	bf58      	it	pl
 8009332:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009336:	6022      	str	r2, [r4, #0]
 8009338:	f04f 0900 	mov.w	r9, #0
 800933c:	e78a      	b.n	8009254 <_scanf_float+0x188>
 800933e:	f04f 0a03 	mov.w	sl, #3
 8009342:	e787      	b.n	8009254 <_scanf_float+0x188>
 8009344:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009348:	4639      	mov	r1, r7
 800934a:	4640      	mov	r0, r8
 800934c:	4798      	blx	r3
 800934e:	2800      	cmp	r0, #0
 8009350:	f43f aedf 	beq.w	8009112 <_scanf_float+0x46>
 8009354:	e6ea      	b.n	800912c <_scanf_float+0x60>
 8009356:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800935a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800935e:	463a      	mov	r2, r7
 8009360:	4640      	mov	r0, r8
 8009362:	4798      	blx	r3
 8009364:	6923      	ldr	r3, [r4, #16]
 8009366:	3b01      	subs	r3, #1
 8009368:	6123      	str	r3, [r4, #16]
 800936a:	e6ec      	b.n	8009146 <_scanf_float+0x7a>
 800936c:	1e6b      	subs	r3, r5, #1
 800936e:	2b06      	cmp	r3, #6
 8009370:	d825      	bhi.n	80093be <_scanf_float+0x2f2>
 8009372:	2d02      	cmp	r5, #2
 8009374:	d836      	bhi.n	80093e4 <_scanf_float+0x318>
 8009376:	455e      	cmp	r6, fp
 8009378:	f67f aee8 	bls.w	800914c <_scanf_float+0x80>
 800937c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009380:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009384:	463a      	mov	r2, r7
 8009386:	4640      	mov	r0, r8
 8009388:	4798      	blx	r3
 800938a:	6923      	ldr	r3, [r4, #16]
 800938c:	3b01      	subs	r3, #1
 800938e:	6123      	str	r3, [r4, #16]
 8009390:	e7f1      	b.n	8009376 <_scanf_float+0x2aa>
 8009392:	9802      	ldr	r0, [sp, #8]
 8009394:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009398:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800939c:	9002      	str	r0, [sp, #8]
 800939e:	463a      	mov	r2, r7
 80093a0:	4640      	mov	r0, r8
 80093a2:	4798      	blx	r3
 80093a4:	6923      	ldr	r3, [r4, #16]
 80093a6:	3b01      	subs	r3, #1
 80093a8:	6123      	str	r3, [r4, #16]
 80093aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093ae:	fa5f fa8a 	uxtb.w	sl, sl
 80093b2:	f1ba 0f02 	cmp.w	sl, #2
 80093b6:	d1ec      	bne.n	8009392 <_scanf_float+0x2c6>
 80093b8:	3d03      	subs	r5, #3
 80093ba:	b2ed      	uxtb	r5, r5
 80093bc:	1b76      	subs	r6, r6, r5
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	05da      	lsls	r2, r3, #23
 80093c2:	d52f      	bpl.n	8009424 <_scanf_float+0x358>
 80093c4:	055b      	lsls	r3, r3, #21
 80093c6:	d510      	bpl.n	80093ea <_scanf_float+0x31e>
 80093c8:	455e      	cmp	r6, fp
 80093ca:	f67f aebf 	bls.w	800914c <_scanf_float+0x80>
 80093ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093d6:	463a      	mov	r2, r7
 80093d8:	4640      	mov	r0, r8
 80093da:	4798      	blx	r3
 80093dc:	6923      	ldr	r3, [r4, #16]
 80093de:	3b01      	subs	r3, #1
 80093e0:	6123      	str	r3, [r4, #16]
 80093e2:	e7f1      	b.n	80093c8 <_scanf_float+0x2fc>
 80093e4:	46aa      	mov	sl, r5
 80093e6:	9602      	str	r6, [sp, #8]
 80093e8:	e7df      	b.n	80093aa <_scanf_float+0x2de>
 80093ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80093ee:	6923      	ldr	r3, [r4, #16]
 80093f0:	2965      	cmp	r1, #101	; 0x65
 80093f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80093f6:	f106 35ff 	add.w	r5, r6, #4294967295
 80093fa:	6123      	str	r3, [r4, #16]
 80093fc:	d00c      	beq.n	8009418 <_scanf_float+0x34c>
 80093fe:	2945      	cmp	r1, #69	; 0x45
 8009400:	d00a      	beq.n	8009418 <_scanf_float+0x34c>
 8009402:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009406:	463a      	mov	r2, r7
 8009408:	4640      	mov	r0, r8
 800940a:	4798      	blx	r3
 800940c:	6923      	ldr	r3, [r4, #16]
 800940e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009412:	3b01      	subs	r3, #1
 8009414:	1eb5      	subs	r5, r6, #2
 8009416:	6123      	str	r3, [r4, #16]
 8009418:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800941c:	463a      	mov	r2, r7
 800941e:	4640      	mov	r0, r8
 8009420:	4798      	blx	r3
 8009422:	462e      	mov	r6, r5
 8009424:	6825      	ldr	r5, [r4, #0]
 8009426:	f015 0510 	ands.w	r5, r5, #16
 800942a:	d14e      	bne.n	80094ca <_scanf_float+0x3fe>
 800942c:	7035      	strb	r5, [r6, #0]
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009438:	d119      	bne.n	800946e <_scanf_float+0x3a2>
 800943a:	9b01      	ldr	r3, [sp, #4]
 800943c:	454b      	cmp	r3, r9
 800943e:	eba3 0209 	sub.w	r2, r3, r9
 8009442:	d121      	bne.n	8009488 <_scanf_float+0x3bc>
 8009444:	2200      	movs	r2, #0
 8009446:	4659      	mov	r1, fp
 8009448:	4640      	mov	r0, r8
 800944a:	f000 fe3b 	bl	800a0c4 <_strtod_r>
 800944e:	6822      	ldr	r2, [r4, #0]
 8009450:	9b03      	ldr	r3, [sp, #12]
 8009452:	f012 0f02 	tst.w	r2, #2
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	d021      	beq.n	800949e <_scanf_float+0x3d2>
 800945a:	9903      	ldr	r1, [sp, #12]
 800945c:	1d1a      	adds	r2, r3, #4
 800945e:	600a      	str	r2, [r1, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	ed83 0b00 	vstr	d0, [r3]
 8009466:	68e3      	ldr	r3, [r4, #12]
 8009468:	3301      	adds	r3, #1
 800946a:	60e3      	str	r3, [r4, #12]
 800946c:	e66f      	b.n	800914e <_scanf_float+0x82>
 800946e:	9b04      	ldr	r3, [sp, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d0e7      	beq.n	8009444 <_scanf_float+0x378>
 8009474:	9905      	ldr	r1, [sp, #20]
 8009476:	230a      	movs	r3, #10
 8009478:	462a      	mov	r2, r5
 800947a:	3101      	adds	r1, #1
 800947c:	4640      	mov	r0, r8
 800947e:	f000 fea9 	bl	800a1d4 <_strtol_r>
 8009482:	9b04      	ldr	r3, [sp, #16]
 8009484:	9e05      	ldr	r6, [sp, #20]
 8009486:	1ac2      	subs	r2, r0, r3
 8009488:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800948c:	429e      	cmp	r6, r3
 800948e:	bf28      	it	cs
 8009490:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009494:	490e      	ldr	r1, [pc, #56]	; (80094d0 <_scanf_float+0x404>)
 8009496:	4630      	mov	r0, r6
 8009498:	f000 f824 	bl	80094e4 <siprintf>
 800949c:	e7d2      	b.n	8009444 <_scanf_float+0x378>
 800949e:	9903      	ldr	r1, [sp, #12]
 80094a0:	f012 0f04 	tst.w	r2, #4
 80094a4:	f103 0204 	add.w	r2, r3, #4
 80094a8:	600a      	str	r2, [r1, #0]
 80094aa:	d1d9      	bne.n	8009460 <_scanf_float+0x394>
 80094ac:	eeb4 0b40 	vcmp.f64	d0, d0
 80094b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b4:	681e      	ldr	r6, [r3, #0]
 80094b6:	d705      	bvc.n	80094c4 <_scanf_float+0x3f8>
 80094b8:	4806      	ldr	r0, [pc, #24]	; (80094d4 <_scanf_float+0x408>)
 80094ba:	f000 f80d 	bl	80094d8 <nanf>
 80094be:	ed86 0a00 	vstr	s0, [r6]
 80094c2:	e7d0      	b.n	8009466 <_scanf_float+0x39a>
 80094c4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80094c8:	e7f9      	b.n	80094be <_scanf_float+0x3f2>
 80094ca:	2500      	movs	r5, #0
 80094cc:	e63f      	b.n	800914e <_scanf_float+0x82>
 80094ce:	bf00      	nop
 80094d0:	0800e76c 	.word	0x0800e76c
 80094d4:	0800eb78 	.word	0x0800eb78

080094d8 <nanf>:
 80094d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80094e0 <nanf+0x8>
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	7fc00000 	.word	0x7fc00000

080094e4 <siprintf>:
 80094e4:	b40e      	push	{r1, r2, r3}
 80094e6:	b500      	push	{lr}
 80094e8:	b09c      	sub	sp, #112	; 0x70
 80094ea:	ab1d      	add	r3, sp, #116	; 0x74
 80094ec:	9002      	str	r0, [sp, #8]
 80094ee:	9006      	str	r0, [sp, #24]
 80094f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094f4:	4809      	ldr	r0, [pc, #36]	; (800951c <siprintf+0x38>)
 80094f6:	9107      	str	r1, [sp, #28]
 80094f8:	9104      	str	r1, [sp, #16]
 80094fa:	4909      	ldr	r1, [pc, #36]	; (8009520 <siprintf+0x3c>)
 80094fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009500:	9105      	str	r1, [sp, #20]
 8009502:	6800      	ldr	r0, [r0, #0]
 8009504:	9301      	str	r3, [sp, #4]
 8009506:	a902      	add	r1, sp, #8
 8009508:	f002 fe0c 	bl	800c124 <_svfiprintf_r>
 800950c:	9b02      	ldr	r3, [sp, #8]
 800950e:	2200      	movs	r2, #0
 8009510:	701a      	strb	r2, [r3, #0]
 8009512:	b01c      	add	sp, #112	; 0x70
 8009514:	f85d eb04 	ldr.w	lr, [sp], #4
 8009518:	b003      	add	sp, #12
 800951a:	4770      	bx	lr
 800951c:	24000014 	.word	0x24000014
 8009520:	ffff0208 	.word	0xffff0208

08009524 <sulp>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	4604      	mov	r4, r0
 8009528:	460d      	mov	r5, r1
 800952a:	4616      	mov	r6, r2
 800952c:	ec45 4b10 	vmov	d0, r4, r5
 8009530:	f002 fb5a 	bl	800bbe8 <__ulp>
 8009534:	b17e      	cbz	r6, 8009556 <sulp+0x32>
 8009536:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800953a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800953e:	2b00      	cmp	r3, #0
 8009540:	dd09      	ble.n	8009556 <sulp+0x32>
 8009542:	051b      	lsls	r3, r3, #20
 8009544:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009548:	2000      	movs	r0, #0
 800954a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800954e:	ec41 0b17 	vmov	d7, r0, r1
 8009552:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009556:	bd70      	pop	{r4, r5, r6, pc}

08009558 <_strtod_l>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	ed2d 8b0e 	vpush	{d8-d14}
 8009560:	b097      	sub	sp, #92	; 0x5c
 8009562:	461f      	mov	r7, r3
 8009564:	2300      	movs	r3, #0
 8009566:	9312      	str	r3, [sp, #72]	; 0x48
 8009568:	4ba1      	ldr	r3, [pc, #644]	; (80097f0 <_strtod_l+0x298>)
 800956a:	920d      	str	r2, [sp, #52]	; 0x34
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	9307      	str	r3, [sp, #28]
 8009570:	4604      	mov	r4, r0
 8009572:	4618      	mov	r0, r3
 8009574:	468b      	mov	fp, r1
 8009576:	f7f6 feb3 	bl	80002e0 <strlen>
 800957a:	f04f 0800 	mov.w	r8, #0
 800957e:	4605      	mov	r5, r0
 8009580:	f04f 0900 	mov.w	r9, #0
 8009584:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009588:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800958a:	7813      	ldrb	r3, [r2, #0]
 800958c:	2b2b      	cmp	r3, #43	; 0x2b
 800958e:	d04d      	beq.n	800962c <_strtod_l+0xd4>
 8009590:	d83a      	bhi.n	8009608 <_strtod_l+0xb0>
 8009592:	2b0d      	cmp	r3, #13
 8009594:	d833      	bhi.n	80095fe <_strtod_l+0xa6>
 8009596:	2b08      	cmp	r3, #8
 8009598:	d833      	bhi.n	8009602 <_strtod_l+0xaa>
 800959a:	2b00      	cmp	r3, #0
 800959c:	d03d      	beq.n	800961a <_strtod_l+0xc2>
 800959e:	2300      	movs	r3, #0
 80095a0:	9308      	str	r3, [sp, #32]
 80095a2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80095a4:	7833      	ldrb	r3, [r6, #0]
 80095a6:	2b30      	cmp	r3, #48	; 0x30
 80095a8:	f040 80b0 	bne.w	800970c <_strtod_l+0x1b4>
 80095ac:	7873      	ldrb	r3, [r6, #1]
 80095ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095b2:	2b58      	cmp	r3, #88	; 0x58
 80095b4:	d167      	bne.n	8009686 <_strtod_l+0x12e>
 80095b6:	9b08      	ldr	r3, [sp, #32]
 80095b8:	9301      	str	r3, [sp, #4]
 80095ba:	ab12      	add	r3, sp, #72	; 0x48
 80095bc:	9702      	str	r7, [sp, #8]
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	4a8c      	ldr	r2, [pc, #560]	; (80097f4 <_strtod_l+0x29c>)
 80095c2:	ab13      	add	r3, sp, #76	; 0x4c
 80095c4:	a911      	add	r1, sp, #68	; 0x44
 80095c6:	4620      	mov	r0, r4
 80095c8:	f001 fc68 	bl	800ae9c <__gethex>
 80095cc:	f010 0507 	ands.w	r5, r0, #7
 80095d0:	4607      	mov	r7, r0
 80095d2:	d005      	beq.n	80095e0 <_strtod_l+0x88>
 80095d4:	2d06      	cmp	r5, #6
 80095d6:	d12b      	bne.n	8009630 <_strtod_l+0xd8>
 80095d8:	3601      	adds	r6, #1
 80095da:	2300      	movs	r3, #0
 80095dc:	9611      	str	r6, [sp, #68]	; 0x44
 80095de:	9308      	str	r3, [sp, #32]
 80095e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f040 854e 	bne.w	800a084 <_strtod_l+0xb2c>
 80095e8:	9b08      	ldr	r3, [sp, #32]
 80095ea:	b1e3      	cbz	r3, 8009626 <_strtod_l+0xce>
 80095ec:	ec49 8b17 	vmov	d7, r8, r9
 80095f0:	eeb1 0b47 	vneg.f64	d0, d7
 80095f4:	b017      	add	sp, #92	; 0x5c
 80095f6:	ecbd 8b0e 	vpop	{d8-d14}
 80095fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fe:	2b20      	cmp	r3, #32
 8009600:	d1cd      	bne.n	800959e <_strtod_l+0x46>
 8009602:	3201      	adds	r2, #1
 8009604:	9211      	str	r2, [sp, #68]	; 0x44
 8009606:	e7bf      	b.n	8009588 <_strtod_l+0x30>
 8009608:	2b2d      	cmp	r3, #45	; 0x2d
 800960a:	d1c8      	bne.n	800959e <_strtod_l+0x46>
 800960c:	2301      	movs	r3, #1
 800960e:	9308      	str	r3, [sp, #32]
 8009610:	1c53      	adds	r3, r2, #1
 8009612:	9311      	str	r3, [sp, #68]	; 0x44
 8009614:	7853      	ldrb	r3, [r2, #1]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1c3      	bne.n	80095a2 <_strtod_l+0x4a>
 800961a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800961c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009620:	2b00      	cmp	r3, #0
 8009622:	f040 852d 	bne.w	800a080 <_strtod_l+0xb28>
 8009626:	ec49 8b10 	vmov	d0, r8, r9
 800962a:	e7e3      	b.n	80095f4 <_strtod_l+0x9c>
 800962c:	2300      	movs	r3, #0
 800962e:	e7ee      	b.n	800960e <_strtod_l+0xb6>
 8009630:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009632:	b13a      	cbz	r2, 8009644 <_strtod_l+0xec>
 8009634:	2135      	movs	r1, #53	; 0x35
 8009636:	a814      	add	r0, sp, #80	; 0x50
 8009638:	f002 fbde 	bl	800bdf8 <__copybits>
 800963c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800963e:	4620      	mov	r0, r4
 8009640:	f001 ffa0 	bl	800b584 <_Bfree>
 8009644:	3d01      	subs	r5, #1
 8009646:	2d04      	cmp	r5, #4
 8009648:	d806      	bhi.n	8009658 <_strtod_l+0x100>
 800964a:	e8df f005 	tbb	[pc, r5]
 800964e:	030a      	.short	0x030a
 8009650:	1714      	.short	0x1714
 8009652:	0a          	.byte	0x0a
 8009653:	00          	.byte	0x00
 8009654:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8009658:	073f      	lsls	r7, r7, #28
 800965a:	d5c1      	bpl.n	80095e0 <_strtod_l+0x88>
 800965c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009660:	e7be      	b.n	80095e0 <_strtod_l+0x88>
 8009662:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8009666:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009668:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800966c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009670:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009674:	e7f0      	b.n	8009658 <_strtod_l+0x100>
 8009676:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80097f8 <_strtod_l+0x2a0>
 800967a:	e7ed      	b.n	8009658 <_strtod_l+0x100>
 800967c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009680:	f04f 38ff 	mov.w	r8, #4294967295
 8009684:	e7e8      	b.n	8009658 <_strtod_l+0x100>
 8009686:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009688:	1c5a      	adds	r2, r3, #1
 800968a:	9211      	str	r2, [sp, #68]	; 0x44
 800968c:	785b      	ldrb	r3, [r3, #1]
 800968e:	2b30      	cmp	r3, #48	; 0x30
 8009690:	d0f9      	beq.n	8009686 <_strtod_l+0x12e>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d0a4      	beq.n	80095e0 <_strtod_l+0x88>
 8009696:	2301      	movs	r3, #1
 8009698:	f04f 0a00 	mov.w	sl, #0
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096a0:	930a      	str	r3, [sp, #40]	; 0x28
 80096a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80096a6:	f8cd a018 	str.w	sl, [sp, #24]
 80096aa:	220a      	movs	r2, #10
 80096ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 80096ae:	7807      	ldrb	r7, [r0, #0]
 80096b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80096b4:	b2d9      	uxtb	r1, r3
 80096b6:	2909      	cmp	r1, #9
 80096b8:	d92a      	bls.n	8009710 <_strtod_l+0x1b8>
 80096ba:	9907      	ldr	r1, [sp, #28]
 80096bc:	462a      	mov	r2, r5
 80096be:	f002 fe4b 	bl	800c358 <strncmp>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d033      	beq.n	800972e <_strtod_l+0x1d6>
 80096c6:	2000      	movs	r0, #0
 80096c8:	9b06      	ldr	r3, [sp, #24]
 80096ca:	463a      	mov	r2, r7
 80096cc:	4601      	mov	r1, r0
 80096ce:	4607      	mov	r7, r0
 80096d0:	2a65      	cmp	r2, #101	; 0x65
 80096d2:	d001      	beq.n	80096d8 <_strtod_l+0x180>
 80096d4:	2a45      	cmp	r2, #69	; 0x45
 80096d6:	d117      	bne.n	8009708 <_strtod_l+0x1b0>
 80096d8:	b91b      	cbnz	r3, 80096e2 <_strtod_l+0x18a>
 80096da:	9b04      	ldr	r3, [sp, #16]
 80096dc:	4303      	orrs	r3, r0
 80096de:	d09c      	beq.n	800961a <_strtod_l+0xc2>
 80096e0:	2300      	movs	r3, #0
 80096e2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80096e6:	f10b 0201 	add.w	r2, fp, #1
 80096ea:	9211      	str	r2, [sp, #68]	; 0x44
 80096ec:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80096f0:	2a2b      	cmp	r2, #43	; 0x2b
 80096f2:	d071      	beq.n	80097d8 <_strtod_l+0x280>
 80096f4:	2a2d      	cmp	r2, #45	; 0x2d
 80096f6:	d077      	beq.n	80097e8 <_strtod_l+0x290>
 80096f8:	f04f 0e00 	mov.w	lr, #0
 80096fc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009700:	2d09      	cmp	r5, #9
 8009702:	d97f      	bls.n	8009804 <_strtod_l+0x2ac>
 8009704:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009708:	2500      	movs	r5, #0
 800970a:	e09b      	b.n	8009844 <_strtod_l+0x2ec>
 800970c:	2300      	movs	r3, #0
 800970e:	e7c3      	b.n	8009698 <_strtod_l+0x140>
 8009710:	9906      	ldr	r1, [sp, #24]
 8009712:	2908      	cmp	r1, #8
 8009714:	bfdd      	ittte	le
 8009716:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009718:	fb02 3301 	mlale	r3, r2, r1, r3
 800971c:	9309      	strle	r3, [sp, #36]	; 0x24
 800971e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009722:	9b06      	ldr	r3, [sp, #24]
 8009724:	3001      	adds	r0, #1
 8009726:	3301      	adds	r3, #1
 8009728:	9306      	str	r3, [sp, #24]
 800972a:	9011      	str	r0, [sp, #68]	; 0x44
 800972c:	e7be      	b.n	80096ac <_strtod_l+0x154>
 800972e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009730:	195a      	adds	r2, r3, r5
 8009732:	9211      	str	r2, [sp, #68]	; 0x44
 8009734:	5d5a      	ldrb	r2, [r3, r5]
 8009736:	9b06      	ldr	r3, [sp, #24]
 8009738:	b3a3      	cbz	r3, 80097a4 <_strtod_l+0x24c>
 800973a:	4607      	mov	r7, r0
 800973c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009740:	2909      	cmp	r1, #9
 8009742:	d912      	bls.n	800976a <_strtod_l+0x212>
 8009744:	2101      	movs	r1, #1
 8009746:	e7c3      	b.n	80096d0 <_strtod_l+0x178>
 8009748:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800974a:	1c5a      	adds	r2, r3, #1
 800974c:	9211      	str	r2, [sp, #68]	; 0x44
 800974e:	785a      	ldrb	r2, [r3, #1]
 8009750:	3001      	adds	r0, #1
 8009752:	2a30      	cmp	r2, #48	; 0x30
 8009754:	d0f8      	beq.n	8009748 <_strtod_l+0x1f0>
 8009756:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800975a:	2b08      	cmp	r3, #8
 800975c:	f200 8497 	bhi.w	800a08e <_strtod_l+0xb36>
 8009760:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009762:	930a      	str	r3, [sp, #40]	; 0x28
 8009764:	4607      	mov	r7, r0
 8009766:	2000      	movs	r0, #0
 8009768:	4603      	mov	r3, r0
 800976a:	3a30      	subs	r2, #48	; 0x30
 800976c:	f100 0101 	add.w	r1, r0, #1
 8009770:	d012      	beq.n	8009798 <_strtod_l+0x240>
 8009772:	440f      	add	r7, r1
 8009774:	eb00 0c03 	add.w	ip, r0, r3
 8009778:	4619      	mov	r1, r3
 800977a:	250a      	movs	r5, #10
 800977c:	4561      	cmp	r1, ip
 800977e:	d113      	bne.n	80097a8 <_strtod_l+0x250>
 8009780:	1819      	adds	r1, r3, r0
 8009782:	2908      	cmp	r1, #8
 8009784:	f103 0301 	add.w	r3, r3, #1
 8009788:	4403      	add	r3, r0
 800978a:	dc1c      	bgt.n	80097c6 <_strtod_l+0x26e>
 800978c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800978e:	210a      	movs	r1, #10
 8009790:	fb01 2200 	mla	r2, r1, r0, r2
 8009794:	9209      	str	r2, [sp, #36]	; 0x24
 8009796:	2100      	movs	r1, #0
 8009798:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800979a:	1c50      	adds	r0, r2, #1
 800979c:	9011      	str	r0, [sp, #68]	; 0x44
 800979e:	7852      	ldrb	r2, [r2, #1]
 80097a0:	4608      	mov	r0, r1
 80097a2:	e7cb      	b.n	800973c <_strtod_l+0x1e4>
 80097a4:	9806      	ldr	r0, [sp, #24]
 80097a6:	e7d4      	b.n	8009752 <_strtod_l+0x1fa>
 80097a8:	2908      	cmp	r1, #8
 80097aa:	dc04      	bgt.n	80097b6 <_strtod_l+0x25e>
 80097ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80097ae:	436e      	muls	r6, r5
 80097b0:	9609      	str	r6, [sp, #36]	; 0x24
 80097b2:	3101      	adds	r1, #1
 80097b4:	e7e2      	b.n	800977c <_strtod_l+0x224>
 80097b6:	f101 0e01 	add.w	lr, r1, #1
 80097ba:	f1be 0f10 	cmp.w	lr, #16
 80097be:	bfd8      	it	le
 80097c0:	fb05 fa0a 	mulle.w	sl, r5, sl
 80097c4:	e7f5      	b.n	80097b2 <_strtod_l+0x25a>
 80097c6:	2b10      	cmp	r3, #16
 80097c8:	bfdc      	itt	le
 80097ca:	210a      	movle	r1, #10
 80097cc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80097d0:	e7e1      	b.n	8009796 <_strtod_l+0x23e>
 80097d2:	2700      	movs	r7, #0
 80097d4:	2101      	movs	r1, #1
 80097d6:	e780      	b.n	80096da <_strtod_l+0x182>
 80097d8:	f04f 0e00 	mov.w	lr, #0
 80097dc:	f10b 0202 	add.w	r2, fp, #2
 80097e0:	9211      	str	r2, [sp, #68]	; 0x44
 80097e2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80097e6:	e789      	b.n	80096fc <_strtod_l+0x1a4>
 80097e8:	f04f 0e01 	mov.w	lr, #1
 80097ec:	e7f6      	b.n	80097dc <_strtod_l+0x284>
 80097ee:	bf00      	nop
 80097f0:	0800e9c0 	.word	0x0800e9c0
 80097f4:	0800e774 	.word	0x0800e774
 80097f8:	7ff00000 	.word	0x7ff00000
 80097fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097fe:	1c55      	adds	r5, r2, #1
 8009800:	9511      	str	r5, [sp, #68]	; 0x44
 8009802:	7852      	ldrb	r2, [r2, #1]
 8009804:	2a30      	cmp	r2, #48	; 0x30
 8009806:	d0f9      	beq.n	80097fc <_strtod_l+0x2a4>
 8009808:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800980c:	2d08      	cmp	r5, #8
 800980e:	f63f af7b 	bhi.w	8009708 <_strtod_l+0x1b0>
 8009812:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009816:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009818:	9207      	str	r2, [sp, #28]
 800981a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800981c:	1c55      	adds	r5, r2, #1
 800981e:	9511      	str	r5, [sp, #68]	; 0x44
 8009820:	7852      	ldrb	r2, [r2, #1]
 8009822:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009826:	2e09      	cmp	r6, #9
 8009828:	d937      	bls.n	800989a <_strtod_l+0x342>
 800982a:	9e07      	ldr	r6, [sp, #28]
 800982c:	1bad      	subs	r5, r5, r6
 800982e:	2d08      	cmp	r5, #8
 8009830:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009834:	dc02      	bgt.n	800983c <_strtod_l+0x2e4>
 8009836:	4565      	cmp	r5, ip
 8009838:	bfa8      	it	ge
 800983a:	4665      	movge	r5, ip
 800983c:	f1be 0f00 	cmp.w	lr, #0
 8009840:	d000      	beq.n	8009844 <_strtod_l+0x2ec>
 8009842:	426d      	negs	r5, r5
 8009844:	2b00      	cmp	r3, #0
 8009846:	d14d      	bne.n	80098e4 <_strtod_l+0x38c>
 8009848:	9b04      	ldr	r3, [sp, #16]
 800984a:	4303      	orrs	r3, r0
 800984c:	f47f aec8 	bne.w	80095e0 <_strtod_l+0x88>
 8009850:	2900      	cmp	r1, #0
 8009852:	f47f aee2 	bne.w	800961a <_strtod_l+0xc2>
 8009856:	2a69      	cmp	r2, #105	; 0x69
 8009858:	d027      	beq.n	80098aa <_strtod_l+0x352>
 800985a:	dc24      	bgt.n	80098a6 <_strtod_l+0x34e>
 800985c:	2a49      	cmp	r2, #73	; 0x49
 800985e:	d024      	beq.n	80098aa <_strtod_l+0x352>
 8009860:	2a4e      	cmp	r2, #78	; 0x4e
 8009862:	f47f aeda 	bne.w	800961a <_strtod_l+0xc2>
 8009866:	4996      	ldr	r1, [pc, #600]	; (8009ac0 <_strtod_l+0x568>)
 8009868:	a811      	add	r0, sp, #68	; 0x44
 800986a:	f001 fd6f 	bl	800b34c <__match>
 800986e:	2800      	cmp	r0, #0
 8009870:	f43f aed3 	beq.w	800961a <_strtod_l+0xc2>
 8009874:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	2b28      	cmp	r3, #40	; 0x28
 800987a:	d12d      	bne.n	80098d8 <_strtod_l+0x380>
 800987c:	4991      	ldr	r1, [pc, #580]	; (8009ac4 <_strtod_l+0x56c>)
 800987e:	aa14      	add	r2, sp, #80	; 0x50
 8009880:	a811      	add	r0, sp, #68	; 0x44
 8009882:	f001 fd77 	bl	800b374 <__hexnan>
 8009886:	2805      	cmp	r0, #5
 8009888:	d126      	bne.n	80098d8 <_strtod_l+0x380>
 800988a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800988c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009890:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009894:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009898:	e6a2      	b.n	80095e0 <_strtod_l+0x88>
 800989a:	250a      	movs	r5, #10
 800989c:	fb05 250c 	mla	r5, r5, ip, r2
 80098a0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80098a4:	e7b9      	b.n	800981a <_strtod_l+0x2c2>
 80098a6:	2a6e      	cmp	r2, #110	; 0x6e
 80098a8:	e7db      	b.n	8009862 <_strtod_l+0x30a>
 80098aa:	4987      	ldr	r1, [pc, #540]	; (8009ac8 <_strtod_l+0x570>)
 80098ac:	a811      	add	r0, sp, #68	; 0x44
 80098ae:	f001 fd4d 	bl	800b34c <__match>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	f43f aeb1 	beq.w	800961a <_strtod_l+0xc2>
 80098b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098ba:	4984      	ldr	r1, [pc, #528]	; (8009acc <_strtod_l+0x574>)
 80098bc:	3b01      	subs	r3, #1
 80098be:	a811      	add	r0, sp, #68	; 0x44
 80098c0:	9311      	str	r3, [sp, #68]	; 0x44
 80098c2:	f001 fd43 	bl	800b34c <__match>
 80098c6:	b910      	cbnz	r0, 80098ce <_strtod_l+0x376>
 80098c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098ca:	3301      	adds	r3, #1
 80098cc:	9311      	str	r3, [sp, #68]	; 0x44
 80098ce:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8009ae0 <_strtod_l+0x588>
 80098d2:	f04f 0800 	mov.w	r8, #0
 80098d6:	e683      	b.n	80095e0 <_strtod_l+0x88>
 80098d8:	487d      	ldr	r0, [pc, #500]	; (8009ad0 <_strtod_l+0x578>)
 80098da:	f002 fd25 	bl	800c328 <nan>
 80098de:	ec59 8b10 	vmov	r8, r9, d0
 80098e2:	e67d      	b.n	80095e0 <_strtod_l+0x88>
 80098e4:	1bea      	subs	r2, r5, r7
 80098e6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80098ea:	9207      	str	r2, [sp, #28]
 80098ec:	9a06      	ldr	r2, [sp, #24]
 80098ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80098f2:	2a00      	cmp	r2, #0
 80098f4:	bf08      	it	eq
 80098f6:	461a      	moveq	r2, r3
 80098f8:	2b10      	cmp	r3, #16
 80098fa:	9206      	str	r2, [sp, #24]
 80098fc:	461a      	mov	r2, r3
 80098fe:	bfa8      	it	ge
 8009900:	2210      	movge	r2, #16
 8009902:	2b09      	cmp	r3, #9
 8009904:	ec59 8b17 	vmov	r8, r9, d7
 8009908:	dd0c      	ble.n	8009924 <_strtod_l+0x3cc>
 800990a:	4972      	ldr	r1, [pc, #456]	; (8009ad4 <_strtod_l+0x57c>)
 800990c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009910:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8009914:	ee06 aa90 	vmov	s13, sl
 8009918:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800991c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009920:	ec59 8b16 	vmov	r8, r9, d6
 8009924:	2b0f      	cmp	r3, #15
 8009926:	dc36      	bgt.n	8009996 <_strtod_l+0x43e>
 8009928:	9907      	ldr	r1, [sp, #28]
 800992a:	2900      	cmp	r1, #0
 800992c:	f43f ae58 	beq.w	80095e0 <_strtod_l+0x88>
 8009930:	dd23      	ble.n	800997a <_strtod_l+0x422>
 8009932:	2916      	cmp	r1, #22
 8009934:	dc0b      	bgt.n	800994e <_strtod_l+0x3f6>
 8009936:	4b67      	ldr	r3, [pc, #412]	; (8009ad4 <_strtod_l+0x57c>)
 8009938:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800993c:	ed93 7b00 	vldr	d7, [r3]
 8009940:	ec49 8b16 	vmov	d6, r8, r9
 8009944:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009948:	ec59 8b17 	vmov	r8, r9, d7
 800994c:	e648      	b.n	80095e0 <_strtod_l+0x88>
 800994e:	9807      	ldr	r0, [sp, #28]
 8009950:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8009954:	4281      	cmp	r1, r0
 8009956:	db1e      	blt.n	8009996 <_strtod_l+0x43e>
 8009958:	4a5e      	ldr	r2, [pc, #376]	; (8009ad4 <_strtod_l+0x57c>)
 800995a:	f1c3 030f 	rsb	r3, r3, #15
 800995e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009962:	ed91 7b00 	vldr	d7, [r1]
 8009966:	ec49 8b16 	vmov	d6, r8, r9
 800996a:	1ac3      	subs	r3, r0, r3
 800996c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009970:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009974:	ed92 6b00 	vldr	d6, [r2]
 8009978:	e7e4      	b.n	8009944 <_strtod_l+0x3ec>
 800997a:	9907      	ldr	r1, [sp, #28]
 800997c:	3116      	adds	r1, #22
 800997e:	db0a      	blt.n	8009996 <_strtod_l+0x43e>
 8009980:	4b54      	ldr	r3, [pc, #336]	; (8009ad4 <_strtod_l+0x57c>)
 8009982:	1b7d      	subs	r5, r7, r5
 8009984:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009988:	ed95 7b00 	vldr	d7, [r5]
 800998c:	ec49 8b16 	vmov	d6, r8, r9
 8009990:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009994:	e7d8      	b.n	8009948 <_strtod_l+0x3f0>
 8009996:	9907      	ldr	r1, [sp, #28]
 8009998:	1a9a      	subs	r2, r3, r2
 800999a:	440a      	add	r2, r1
 800999c:	2a00      	cmp	r2, #0
 800999e:	dd6f      	ble.n	8009a80 <_strtod_l+0x528>
 80099a0:	f012 000f 	ands.w	r0, r2, #15
 80099a4:	d00a      	beq.n	80099bc <_strtod_l+0x464>
 80099a6:	494b      	ldr	r1, [pc, #300]	; (8009ad4 <_strtod_l+0x57c>)
 80099a8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80099ac:	ed91 7b00 	vldr	d7, [r1]
 80099b0:	ec49 8b16 	vmov	d6, r8, r9
 80099b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80099b8:	ec59 8b17 	vmov	r8, r9, d7
 80099bc:	f032 020f 	bics.w	r2, r2, #15
 80099c0:	d04f      	beq.n	8009a62 <_strtod_l+0x50a>
 80099c2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80099c6:	dd22      	ble.n	8009a0e <_strtod_l+0x4b6>
 80099c8:	2500      	movs	r5, #0
 80099ca:	462e      	mov	r6, r5
 80099cc:	9506      	str	r5, [sp, #24]
 80099ce:	462f      	mov	r7, r5
 80099d0:	2322      	movs	r3, #34	; 0x22
 80099d2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8009ae0 <_strtod_l+0x588>
 80099d6:	6023      	str	r3, [r4, #0]
 80099d8:	f04f 0800 	mov.w	r8, #0
 80099dc:	9b06      	ldr	r3, [sp, #24]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f43f adfe 	beq.w	80095e0 <_strtod_l+0x88>
 80099e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80099e6:	4620      	mov	r0, r4
 80099e8:	f001 fdcc 	bl	800b584 <_Bfree>
 80099ec:	4639      	mov	r1, r7
 80099ee:	4620      	mov	r0, r4
 80099f0:	f001 fdc8 	bl	800b584 <_Bfree>
 80099f4:	4631      	mov	r1, r6
 80099f6:	4620      	mov	r0, r4
 80099f8:	f001 fdc4 	bl	800b584 <_Bfree>
 80099fc:	9906      	ldr	r1, [sp, #24]
 80099fe:	4620      	mov	r0, r4
 8009a00:	f001 fdc0 	bl	800b584 <_Bfree>
 8009a04:	4629      	mov	r1, r5
 8009a06:	4620      	mov	r0, r4
 8009a08:	f001 fdbc 	bl	800b584 <_Bfree>
 8009a0c:	e5e8      	b.n	80095e0 <_strtod_l+0x88>
 8009a0e:	2000      	movs	r0, #0
 8009a10:	ec49 8b17 	vmov	d7, r8, r9
 8009a14:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8009ad8 <_strtod_l+0x580>
 8009a18:	1112      	asrs	r2, r2, #4
 8009a1a:	4601      	mov	r1, r0
 8009a1c:	2a01      	cmp	r2, #1
 8009a1e:	dc23      	bgt.n	8009a68 <_strtod_l+0x510>
 8009a20:	b108      	cbz	r0, 8009a26 <_strtod_l+0x4ce>
 8009a22:	ec59 8b17 	vmov	r8, r9, d7
 8009a26:	4a2c      	ldr	r2, [pc, #176]	; (8009ad8 <_strtod_l+0x580>)
 8009a28:	482c      	ldr	r0, [pc, #176]	; (8009adc <_strtod_l+0x584>)
 8009a2a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009a2e:	ed92 7b00 	vldr	d7, [r2]
 8009a32:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009a36:	ec49 8b16 	vmov	d6, r8, r9
 8009a3a:	4a29      	ldr	r2, [pc, #164]	; (8009ae0 <_strtod_l+0x588>)
 8009a3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a40:	ee17 1a90 	vmov	r1, s15
 8009a44:	400a      	ands	r2, r1
 8009a46:	4282      	cmp	r2, r0
 8009a48:	ec59 8b17 	vmov	r8, r9, d7
 8009a4c:	d8bc      	bhi.n	80099c8 <_strtod_l+0x470>
 8009a4e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009a52:	4282      	cmp	r2, r0
 8009a54:	bf86      	itte	hi
 8009a56:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009ae4 <_strtod_l+0x58c>
 8009a5a:	f04f 38ff 	movhi.w	r8, #4294967295
 8009a5e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009a62:	2200      	movs	r2, #0
 8009a64:	9204      	str	r2, [sp, #16]
 8009a66:	e078      	b.n	8009b5a <_strtod_l+0x602>
 8009a68:	07d6      	lsls	r6, r2, #31
 8009a6a:	d504      	bpl.n	8009a76 <_strtod_l+0x51e>
 8009a6c:	ed9c 6b00 	vldr	d6, [ip]
 8009a70:	2001      	movs	r0, #1
 8009a72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a76:	3101      	adds	r1, #1
 8009a78:	1052      	asrs	r2, r2, #1
 8009a7a:	f10c 0c08 	add.w	ip, ip, #8
 8009a7e:	e7cd      	b.n	8009a1c <_strtod_l+0x4c4>
 8009a80:	d0ef      	beq.n	8009a62 <_strtod_l+0x50a>
 8009a82:	4252      	negs	r2, r2
 8009a84:	f012 000f 	ands.w	r0, r2, #15
 8009a88:	d00a      	beq.n	8009aa0 <_strtod_l+0x548>
 8009a8a:	4912      	ldr	r1, [pc, #72]	; (8009ad4 <_strtod_l+0x57c>)
 8009a8c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009a90:	ed91 7b00 	vldr	d7, [r1]
 8009a94:	ec49 8b16 	vmov	d6, r8, r9
 8009a98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a9c:	ec59 8b17 	vmov	r8, r9, d7
 8009aa0:	1112      	asrs	r2, r2, #4
 8009aa2:	d0de      	beq.n	8009a62 <_strtod_l+0x50a>
 8009aa4:	2a1f      	cmp	r2, #31
 8009aa6:	dd1f      	ble.n	8009ae8 <_strtod_l+0x590>
 8009aa8:	2500      	movs	r5, #0
 8009aaa:	462e      	mov	r6, r5
 8009aac:	9506      	str	r5, [sp, #24]
 8009aae:	462f      	mov	r7, r5
 8009ab0:	2322      	movs	r3, #34	; 0x22
 8009ab2:	f04f 0800 	mov.w	r8, #0
 8009ab6:	f04f 0900 	mov.w	r9, #0
 8009aba:	6023      	str	r3, [r4, #0]
 8009abc:	e78e      	b.n	80099dc <_strtod_l+0x484>
 8009abe:	bf00      	nop
 8009ac0:	0800e745 	.word	0x0800e745
 8009ac4:	0800e788 	.word	0x0800e788
 8009ac8:	0800e73d 	.word	0x0800e73d
 8009acc:	0800e8cc 	.word	0x0800e8cc
 8009ad0:	0800eb78 	.word	0x0800eb78
 8009ad4:	0800ea58 	.word	0x0800ea58
 8009ad8:	0800ea30 	.word	0x0800ea30
 8009adc:	7ca00000 	.word	0x7ca00000
 8009ae0:	7ff00000 	.word	0x7ff00000
 8009ae4:	7fefffff 	.word	0x7fefffff
 8009ae8:	f012 0110 	ands.w	r1, r2, #16
 8009aec:	bf18      	it	ne
 8009aee:	216a      	movne	r1, #106	; 0x6a
 8009af0:	9104      	str	r1, [sp, #16]
 8009af2:	ec49 8b17 	vmov	d7, r8, r9
 8009af6:	49be      	ldr	r1, [pc, #760]	; (8009df0 <_strtod_l+0x898>)
 8009af8:	2000      	movs	r0, #0
 8009afa:	07d6      	lsls	r6, r2, #31
 8009afc:	d504      	bpl.n	8009b08 <_strtod_l+0x5b0>
 8009afe:	ed91 6b00 	vldr	d6, [r1]
 8009b02:	2001      	movs	r0, #1
 8009b04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b08:	1052      	asrs	r2, r2, #1
 8009b0a:	f101 0108 	add.w	r1, r1, #8
 8009b0e:	d1f4      	bne.n	8009afa <_strtod_l+0x5a2>
 8009b10:	b108      	cbz	r0, 8009b16 <_strtod_l+0x5be>
 8009b12:	ec59 8b17 	vmov	r8, r9, d7
 8009b16:	9a04      	ldr	r2, [sp, #16]
 8009b18:	b1c2      	cbz	r2, 8009b4c <_strtod_l+0x5f4>
 8009b1a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8009b1e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8009b22:	2a00      	cmp	r2, #0
 8009b24:	4648      	mov	r0, r9
 8009b26:	dd11      	ble.n	8009b4c <_strtod_l+0x5f4>
 8009b28:	2a1f      	cmp	r2, #31
 8009b2a:	f340 812e 	ble.w	8009d8a <_strtod_l+0x832>
 8009b2e:	2a34      	cmp	r2, #52	; 0x34
 8009b30:	bfde      	ittt	le
 8009b32:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8009b36:	f04f 32ff 	movle.w	r2, #4294967295
 8009b3a:	fa02 f101 	lslle.w	r1, r2, r1
 8009b3e:	f04f 0800 	mov.w	r8, #0
 8009b42:	bfcc      	ite	gt
 8009b44:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009b48:	ea01 0900 	andle.w	r9, r1, r0
 8009b4c:	ec49 8b17 	vmov	d7, r8, r9
 8009b50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b58:	d0a6      	beq.n	8009aa8 <_strtod_l+0x550>
 8009b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b5c:	9200      	str	r2, [sp, #0]
 8009b5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009b60:	9a06      	ldr	r2, [sp, #24]
 8009b62:	4620      	mov	r0, r4
 8009b64:	f001 fd76 	bl	800b654 <__s2b>
 8009b68:	9006      	str	r0, [sp, #24]
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	f43f af2c 	beq.w	80099c8 <_strtod_l+0x470>
 8009b70:	9b07      	ldr	r3, [sp, #28]
 8009b72:	1b7d      	subs	r5, r7, r5
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bfb4      	ite	lt
 8009b78:	462b      	movlt	r3, r5
 8009b7a:	2300      	movge	r3, #0
 8009b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7e:	9b07      	ldr	r3, [sp, #28]
 8009b80:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8009dd0 <_strtod_l+0x878>
 8009b84:	ed9f ab94 	vldr	d10, [pc, #592]	; 8009dd8 <_strtod_l+0x880>
 8009b88:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009de0 <_strtod_l+0x888>
 8009b8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009b90:	2500      	movs	r5, #0
 8009b92:	930c      	str	r3, [sp, #48]	; 0x30
 8009b94:	462e      	mov	r6, r5
 8009b96:	9b06      	ldr	r3, [sp, #24]
 8009b98:	4620      	mov	r0, r4
 8009b9a:	6859      	ldr	r1, [r3, #4]
 8009b9c:	f001 fcb2 	bl	800b504 <_Balloc>
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	f43f af14 	beq.w	80099d0 <_strtod_l+0x478>
 8009ba8:	9b06      	ldr	r3, [sp, #24]
 8009baa:	691a      	ldr	r2, [r3, #16]
 8009bac:	3202      	adds	r2, #2
 8009bae:	f103 010c 	add.w	r1, r3, #12
 8009bb2:	0092      	lsls	r2, r2, #2
 8009bb4:	300c      	adds	r0, #12
 8009bb6:	f001 fc97 	bl	800b4e8 <memcpy>
 8009bba:	ec49 8b10 	vmov	d0, r8, r9
 8009bbe:	aa14      	add	r2, sp, #80	; 0x50
 8009bc0:	a913      	add	r1, sp, #76	; 0x4c
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f002 f88c 	bl	800bce0 <__d2b>
 8009bc8:	ec49 8b18 	vmov	d8, r8, r9
 8009bcc:	9012      	str	r0, [sp, #72]	; 0x48
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	f43f aefe 	beq.w	80099d0 <_strtod_l+0x478>
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f001 fdd6 	bl	800b788 <__i2b>
 8009bdc:	4606      	mov	r6, r0
 8009bde:	2800      	cmp	r0, #0
 8009be0:	f43f aef6 	beq.w	80099d0 <_strtod_l+0x478>
 8009be4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009be6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	bfab      	itete	ge
 8009bec:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8009bee:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009bf0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8009bf4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8009bf8:	bfac      	ite	ge
 8009bfa:	eb03 0b02 	addge.w	fp, r3, r2
 8009bfe:	eba2 0a03 	sublt.w	sl, r2, r3
 8009c02:	9a04      	ldr	r2, [sp, #16]
 8009c04:	1a9b      	subs	r3, r3, r2
 8009c06:	440b      	add	r3, r1
 8009c08:	4a7a      	ldr	r2, [pc, #488]	; (8009df4 <_strtod_l+0x89c>)
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009c12:	f280 80cd 	bge.w	8009db0 <_strtod_l+0x858>
 8009c16:	1ad2      	subs	r2, r2, r3
 8009c18:	2a1f      	cmp	r2, #31
 8009c1a:	eba1 0102 	sub.w	r1, r1, r2
 8009c1e:	f04f 0001 	mov.w	r0, #1
 8009c22:	f300 80b9 	bgt.w	8009d98 <_strtod_l+0x840>
 8009c26:	fa00 f302 	lsl.w	r3, r0, r2
 8009c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c30:	eb0b 0301 	add.w	r3, fp, r1
 8009c34:	9a04      	ldr	r2, [sp, #16]
 8009c36:	459b      	cmp	fp, r3
 8009c38:	448a      	add	sl, r1
 8009c3a:	4492      	add	sl, r2
 8009c3c:	465a      	mov	r2, fp
 8009c3e:	bfa8      	it	ge
 8009c40:	461a      	movge	r2, r3
 8009c42:	4552      	cmp	r2, sl
 8009c44:	bfa8      	it	ge
 8009c46:	4652      	movge	r2, sl
 8009c48:	2a00      	cmp	r2, #0
 8009c4a:	bfc2      	ittt	gt
 8009c4c:	1a9b      	subgt	r3, r3, r2
 8009c4e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8009c52:	ebab 0b02 	subgt.w	fp, fp, r2
 8009c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c58:	2a00      	cmp	r2, #0
 8009c5a:	dd18      	ble.n	8009c8e <_strtod_l+0x736>
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4620      	mov	r0, r4
 8009c60:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c62:	f001 fe51 	bl	800b908 <__pow5mult>
 8009c66:	4606      	mov	r6, r0
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	f43f aeb1 	beq.w	80099d0 <_strtod_l+0x478>
 8009c6e:	4601      	mov	r1, r0
 8009c70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c72:	4620      	mov	r0, r4
 8009c74:	f001 fd9e 	bl	800b7b4 <__multiply>
 8009c78:	900e      	str	r0, [sp, #56]	; 0x38
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	f43f aea8 	beq.w	80099d0 <_strtod_l+0x478>
 8009c80:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009c82:	4620      	mov	r0, r4
 8009c84:	f001 fc7e 	bl	800b584 <_Bfree>
 8009c88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c8c:	9212      	str	r2, [sp, #72]	; 0x48
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f300 8093 	bgt.w	8009dba <_strtod_l+0x862>
 8009c94:	9b07      	ldr	r3, [sp, #28]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	dd08      	ble.n	8009cac <_strtod_l+0x754>
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f001 fe32 	bl	800b908 <__pow5mult>
 8009ca4:	4607      	mov	r7, r0
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	f43f ae92 	beq.w	80099d0 <_strtod_l+0x478>
 8009cac:	f1ba 0f00 	cmp.w	sl, #0
 8009cb0:	dd08      	ble.n	8009cc4 <_strtod_l+0x76c>
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	4652      	mov	r2, sl
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f001 fe80 	bl	800b9bc <__lshift>
 8009cbc:	4607      	mov	r7, r0
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	f43f ae86 	beq.w	80099d0 <_strtod_l+0x478>
 8009cc4:	f1bb 0f00 	cmp.w	fp, #0
 8009cc8:	dd08      	ble.n	8009cdc <_strtod_l+0x784>
 8009cca:	4631      	mov	r1, r6
 8009ccc:	465a      	mov	r2, fp
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f001 fe74 	bl	800b9bc <__lshift>
 8009cd4:	4606      	mov	r6, r0
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	f43f ae7a 	beq.w	80099d0 <_strtod_l+0x478>
 8009cdc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009cde:	463a      	mov	r2, r7
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f001 fef7 	bl	800bad4 <__mdiff>
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	f43f ae71 	beq.w	80099d0 <_strtod_l+0x478>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009cf4:	60c3      	str	r3, [r0, #12]
 8009cf6:	4631      	mov	r1, r6
 8009cf8:	f001 fed0 	bl	800ba9c <__mcmp>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	da7d      	bge.n	8009dfc <_strtod_l+0x8a4>
 8009d00:	ea5a 0308 	orrs.w	r3, sl, r8
 8009d04:	f040 80a3 	bne.w	8009e4e <_strtod_l+0x8f6>
 8009d08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f040 809e 	bne.w	8009e4e <_strtod_l+0x8f6>
 8009d12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d16:	0d1b      	lsrs	r3, r3, #20
 8009d18:	051b      	lsls	r3, r3, #20
 8009d1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009d1e:	f240 8096 	bls.w	8009e4e <_strtod_l+0x8f6>
 8009d22:	696b      	ldr	r3, [r5, #20]
 8009d24:	b91b      	cbnz	r3, 8009d2e <_strtod_l+0x7d6>
 8009d26:	692b      	ldr	r3, [r5, #16]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	f340 8090 	ble.w	8009e4e <_strtod_l+0x8f6>
 8009d2e:	4629      	mov	r1, r5
 8009d30:	2201      	movs	r2, #1
 8009d32:	4620      	mov	r0, r4
 8009d34:	f001 fe42 	bl	800b9bc <__lshift>
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4605      	mov	r5, r0
 8009d3c:	f001 feae 	bl	800ba9c <__mcmp>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	f340 8084 	ble.w	8009e4e <_strtod_l+0x8f6>
 8009d46:	9904      	ldr	r1, [sp, #16]
 8009d48:	4a2b      	ldr	r2, [pc, #172]	; (8009df8 <_strtod_l+0x8a0>)
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	2900      	cmp	r1, #0
 8009d4e:	f000 809d 	beq.w	8009e8c <_strtod_l+0x934>
 8009d52:	ea02 0109 	and.w	r1, r2, r9
 8009d56:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009d5a:	f300 8097 	bgt.w	8009e8c <_strtod_l+0x934>
 8009d5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009d62:	f77f aea5 	ble.w	8009ab0 <_strtod_l+0x558>
 8009d66:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009de8 <_strtod_l+0x890>
 8009d6a:	ec49 8b16 	vmov	d6, r8, r9
 8009d6e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009d72:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009d76:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	bf08      	it	eq
 8009d7e:	2322      	moveq	r3, #34	; 0x22
 8009d80:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009d84:	bf08      	it	eq
 8009d86:	6023      	streq	r3, [r4, #0]
 8009d88:	e62c      	b.n	80099e4 <_strtod_l+0x48c>
 8009d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8009d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8009d92:	ea02 0808 	and.w	r8, r2, r8
 8009d96:	e6d9      	b.n	8009b4c <_strtod_l+0x5f4>
 8009d98:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009d9c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009da0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009da4:	33e2      	adds	r3, #226	; 0xe2
 8009da6:	fa00 f303 	lsl.w	r3, r0, r3
 8009daa:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8009dae:	e73f      	b.n	8009c30 <_strtod_l+0x6d8>
 8009db0:	2200      	movs	r2, #0
 8009db2:	2301      	movs	r3, #1
 8009db4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009db8:	e73a      	b.n	8009c30 <_strtod_l+0x6d8>
 8009dba:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f001 fdfc 	bl	800b9bc <__lshift>
 8009dc4:	9012      	str	r0, [sp, #72]	; 0x48
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f47f af64 	bne.w	8009c94 <_strtod_l+0x73c>
 8009dcc:	e600      	b.n	80099d0 <_strtod_l+0x478>
 8009dce:	bf00      	nop
 8009dd0:	94a03595 	.word	0x94a03595
 8009dd4:	3fcfffff 	.word	0x3fcfffff
 8009dd8:	94a03595 	.word	0x94a03595
 8009ddc:	3fdfffff 	.word	0x3fdfffff
 8009de0:	35afe535 	.word	0x35afe535
 8009de4:	3fe00000 	.word	0x3fe00000
 8009de8:	00000000 	.word	0x00000000
 8009dec:	39500000 	.word	0x39500000
 8009df0:	0800e7a0 	.word	0x0800e7a0
 8009df4:	fffffc02 	.word	0xfffffc02
 8009df8:	7ff00000 	.word	0x7ff00000
 8009dfc:	46cb      	mov	fp, r9
 8009dfe:	d15f      	bne.n	8009ec0 <_strtod_l+0x968>
 8009e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e04:	f1ba 0f00 	cmp.w	sl, #0
 8009e08:	d02a      	beq.n	8009e60 <_strtod_l+0x908>
 8009e0a:	4aa7      	ldr	r2, [pc, #668]	; (800a0a8 <_strtod_l+0xb50>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d12b      	bne.n	8009e68 <_strtod_l+0x910>
 8009e10:	9b04      	ldr	r3, [sp, #16]
 8009e12:	4642      	mov	r2, r8
 8009e14:	b1fb      	cbz	r3, 8009e56 <_strtod_l+0x8fe>
 8009e16:	4ba5      	ldr	r3, [pc, #660]	; (800a0ac <_strtod_l+0xb54>)
 8009e18:	ea09 0303 	and.w	r3, r9, r3
 8009e1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e20:	f04f 31ff 	mov.w	r1, #4294967295
 8009e24:	d81a      	bhi.n	8009e5c <_strtod_l+0x904>
 8009e26:	0d1b      	lsrs	r3, r3, #20
 8009e28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d119      	bne.n	8009e68 <_strtod_l+0x910>
 8009e34:	4b9e      	ldr	r3, [pc, #632]	; (800a0b0 <_strtod_l+0xb58>)
 8009e36:	459b      	cmp	fp, r3
 8009e38:	d102      	bne.n	8009e40 <_strtod_l+0x8e8>
 8009e3a:	3201      	adds	r2, #1
 8009e3c:	f43f adc8 	beq.w	80099d0 <_strtod_l+0x478>
 8009e40:	4b9a      	ldr	r3, [pc, #616]	; (800a0ac <_strtod_l+0xb54>)
 8009e42:	ea0b 0303 	and.w	r3, fp, r3
 8009e46:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009e4a:	f04f 0800 	mov.w	r8, #0
 8009e4e:	9b04      	ldr	r3, [sp, #16]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d188      	bne.n	8009d66 <_strtod_l+0x80e>
 8009e54:	e5c6      	b.n	80099e4 <_strtod_l+0x48c>
 8009e56:	f04f 33ff 	mov.w	r3, #4294967295
 8009e5a:	e7e9      	b.n	8009e30 <_strtod_l+0x8d8>
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	e7e7      	b.n	8009e30 <_strtod_l+0x8d8>
 8009e60:	ea53 0308 	orrs.w	r3, r3, r8
 8009e64:	f43f af6f 	beq.w	8009d46 <_strtod_l+0x7ee>
 8009e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e6a:	b1cb      	cbz	r3, 8009ea0 <_strtod_l+0x948>
 8009e6c:	ea13 0f0b 	tst.w	r3, fp
 8009e70:	d0ed      	beq.n	8009e4e <_strtod_l+0x8f6>
 8009e72:	9a04      	ldr	r2, [sp, #16]
 8009e74:	4640      	mov	r0, r8
 8009e76:	4649      	mov	r1, r9
 8009e78:	f1ba 0f00 	cmp.w	sl, #0
 8009e7c:	d014      	beq.n	8009ea8 <_strtod_l+0x950>
 8009e7e:	f7ff fb51 	bl	8009524 <sulp>
 8009e82:	ee38 7b00 	vadd.f64	d7, d8, d0
 8009e86:	ec59 8b17 	vmov	r8, r9, d7
 8009e8a:	e7e0      	b.n	8009e4e <_strtod_l+0x8f6>
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009e92:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009e96:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009e9a:	f04f 38ff 	mov.w	r8, #4294967295
 8009e9e:	e7d6      	b.n	8009e4e <_strtod_l+0x8f6>
 8009ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ea2:	ea13 0f08 	tst.w	r3, r8
 8009ea6:	e7e3      	b.n	8009e70 <_strtod_l+0x918>
 8009ea8:	f7ff fb3c 	bl	8009524 <sulp>
 8009eac:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009eb0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eb8:	ec59 8b10 	vmov	r8, r9, d0
 8009ebc:	d1c7      	bne.n	8009e4e <_strtod_l+0x8f6>
 8009ebe:	e5f7      	b.n	8009ab0 <_strtod_l+0x558>
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	f001 ff68 	bl	800bd98 <__ratio>
 8009ec8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009ecc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed4:	d865      	bhi.n	8009fa2 <_strtod_l+0xa4a>
 8009ed6:	f1ba 0f00 	cmp.w	sl, #0
 8009eda:	d042      	beq.n	8009f62 <_strtod_l+0xa0a>
 8009edc:	4b75      	ldr	r3, [pc, #468]	; (800a0b4 <_strtod_l+0xb5c>)
 8009ede:	2200      	movs	r2, #0
 8009ee0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009ee4:	4871      	ldr	r0, [pc, #452]	; (800a0ac <_strtod_l+0xb54>)
 8009ee6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800a0c0 <_strtod_l+0xb68>
 8009eea:	ea0b 0100 	and.w	r1, fp, r0
 8009eee:	4561      	cmp	r1, ip
 8009ef0:	f040 808e 	bne.w	800a010 <_strtod_l+0xab8>
 8009ef4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009ef8:	ec49 8b10 	vmov	d0, r8, r9
 8009efc:	ec43 2b1c 	vmov	d12, r2, r3
 8009f00:	910a      	str	r1, [sp, #40]	; 0x28
 8009f02:	f001 fe71 	bl	800bbe8 <__ulp>
 8009f06:	ec49 8b1e 	vmov	d14, r8, r9
 8009f0a:	4868      	ldr	r0, [pc, #416]	; (800a0ac <_strtod_l+0xb54>)
 8009f0c:	eeac eb00 	vfma.f64	d14, d12, d0
 8009f10:	ee1e 3a90 	vmov	r3, s29
 8009f14:	4a68      	ldr	r2, [pc, #416]	; (800a0b8 <_strtod_l+0xb60>)
 8009f16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f18:	4018      	ands	r0, r3
 8009f1a:	4290      	cmp	r0, r2
 8009f1c:	ec59 8b1e 	vmov	r8, r9, d14
 8009f20:	d94e      	bls.n	8009fc0 <_strtod_l+0xa68>
 8009f22:	ee18 3a90 	vmov	r3, s17
 8009f26:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d104      	bne.n	8009f38 <_strtod_l+0x9e0>
 8009f2e:	ee18 3a10 	vmov	r3, s16
 8009f32:	3301      	adds	r3, #1
 8009f34:	f43f ad4c 	beq.w	80099d0 <_strtod_l+0x478>
 8009f38:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800a0b0 <_strtod_l+0xb58>
 8009f3c:	f04f 38ff 	mov.w	r8, #4294967295
 8009f40:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009f42:	4620      	mov	r0, r4
 8009f44:	f001 fb1e 	bl	800b584 <_Bfree>
 8009f48:	4639      	mov	r1, r7
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f001 fb1a 	bl	800b584 <_Bfree>
 8009f50:	4631      	mov	r1, r6
 8009f52:	4620      	mov	r0, r4
 8009f54:	f001 fb16 	bl	800b584 <_Bfree>
 8009f58:	4629      	mov	r1, r5
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f001 fb12 	bl	800b584 <_Bfree>
 8009f60:	e619      	b.n	8009b96 <_strtod_l+0x63e>
 8009f62:	f1b8 0f00 	cmp.w	r8, #0
 8009f66:	d112      	bne.n	8009f8e <_strtod_l+0xa36>
 8009f68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f6c:	b9b3      	cbnz	r3, 8009f9c <_strtod_l+0xa44>
 8009f6e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009f72:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f7a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009f7e:	bf58      	it	pl
 8009f80:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8009f84:	eeb1 7b4d 	vneg.f64	d7, d13
 8009f88:	ec53 2b17 	vmov	r2, r3, d7
 8009f8c:	e7aa      	b.n	8009ee4 <_strtod_l+0x98c>
 8009f8e:	f1b8 0f01 	cmp.w	r8, #1
 8009f92:	d103      	bne.n	8009f9c <_strtod_l+0xa44>
 8009f94:	f1b9 0f00 	cmp.w	r9, #0
 8009f98:	f43f ad8a 	beq.w	8009ab0 <_strtod_l+0x558>
 8009f9c:	4b47      	ldr	r3, [pc, #284]	; (800a0bc <_strtod_l+0xb64>)
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	e79e      	b.n	8009ee0 <_strtod_l+0x988>
 8009fa2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009fa6:	ee20 db0d 	vmul.f64	d13, d0, d13
 8009faa:	f1ba 0f00 	cmp.w	sl, #0
 8009fae:	d104      	bne.n	8009fba <_strtod_l+0xa62>
 8009fb0:	eeb1 7b4d 	vneg.f64	d7, d13
 8009fb4:	ec53 2b17 	vmov	r2, r3, d7
 8009fb8:	e794      	b.n	8009ee4 <_strtod_l+0x98c>
 8009fba:	eeb0 7b4d 	vmov.f64	d7, d13
 8009fbe:	e7f9      	b.n	8009fb4 <_strtod_l+0xa5c>
 8009fc0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009fc4:	9b04      	ldr	r3, [sp, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1ba      	bne.n	8009f40 <_strtod_l+0x9e8>
 8009fca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009fce:	0d1b      	lsrs	r3, r3, #20
 8009fd0:	051b      	lsls	r3, r3, #20
 8009fd2:	4299      	cmp	r1, r3
 8009fd4:	d1b4      	bne.n	8009f40 <_strtod_l+0x9e8>
 8009fd6:	ec51 0b1d 	vmov	r0, r1, d13
 8009fda:	f7f6 fcf7 	bl	80009cc <__aeabi_d2lz>
 8009fde:	f7f6 fb65 	bl	80006ac <__aeabi_l2d>
 8009fe2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fe6:	ec41 0b17 	vmov	d7, r0, r1
 8009fea:	ea43 0308 	orr.w	r3, r3, r8
 8009fee:	ea53 030a 	orrs.w	r3, r3, sl
 8009ff2:	ee3d db47 	vsub.f64	d13, d13, d7
 8009ff6:	d03c      	beq.n	800a072 <_strtod_l+0xb1a>
 8009ff8:	eeb4 dbca 	vcmpe.f64	d13, d10
 8009ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a000:	f53f acf0 	bmi.w	80099e4 <_strtod_l+0x48c>
 800a004:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800a008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a00c:	dd98      	ble.n	8009f40 <_strtod_l+0x9e8>
 800a00e:	e4e9      	b.n	80099e4 <_strtod_l+0x48c>
 800a010:	9804      	ldr	r0, [sp, #16]
 800a012:	b1f0      	cbz	r0, 800a052 <_strtod_l+0xafa>
 800a014:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800a018:	d81b      	bhi.n	800a052 <_strtod_l+0xafa>
 800a01a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a0a0 <_strtod_l+0xb48>
 800a01e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800a022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a026:	d811      	bhi.n	800a04c <_strtod_l+0xaf4>
 800a028:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800a02c:	ee1d 3a10 	vmov	r3, s26
 800a030:	2b01      	cmp	r3, #1
 800a032:	bf38      	it	cc
 800a034:	2301      	movcc	r3, #1
 800a036:	ee0d 3a10 	vmov	s26, r3
 800a03a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800a03e:	f1ba 0f00 	cmp.w	sl, #0
 800a042:	d113      	bne.n	800a06c <_strtod_l+0xb14>
 800a044:	eeb1 7b4d 	vneg.f64	d7, d13
 800a048:	ec53 2b17 	vmov	r2, r3, d7
 800a04c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800a050:	1a43      	subs	r3, r0, r1
 800a052:	eeb0 0b48 	vmov.f64	d0, d8
 800a056:	ec43 2b1c 	vmov	d12, r2, r3
 800a05a:	910a      	str	r1, [sp, #40]	; 0x28
 800a05c:	f001 fdc4 	bl	800bbe8 <__ulp>
 800a060:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a062:	eeac 8b00 	vfma.f64	d8, d12, d0
 800a066:	ec59 8b18 	vmov	r8, r9, d8
 800a06a:	e7ab      	b.n	8009fc4 <_strtod_l+0xa6c>
 800a06c:	eeb0 7b4d 	vmov.f64	d7, d13
 800a070:	e7ea      	b.n	800a048 <_strtod_l+0xaf0>
 800a072:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800a076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a07a:	f57f af61 	bpl.w	8009f40 <_strtod_l+0x9e8>
 800a07e:	e4b1      	b.n	80099e4 <_strtod_l+0x48c>
 800a080:	2300      	movs	r3, #0
 800a082:	9308      	str	r3, [sp, #32]
 800a084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a086:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	f7ff baad 	b.w	80095e8 <_strtod_l+0x90>
 800a08e:	2a65      	cmp	r2, #101	; 0x65
 800a090:	f43f ab9f 	beq.w	80097d2 <_strtod_l+0x27a>
 800a094:	2a45      	cmp	r2, #69	; 0x45
 800a096:	f43f ab9c 	beq.w	80097d2 <_strtod_l+0x27a>
 800a09a:	2101      	movs	r1, #1
 800a09c:	f7ff bbd4 	b.w	8009848 <_strtod_l+0x2f0>
 800a0a0:	ffc00000 	.word	0xffc00000
 800a0a4:	41dfffff 	.word	0x41dfffff
 800a0a8:	000fffff 	.word	0x000fffff
 800a0ac:	7ff00000 	.word	0x7ff00000
 800a0b0:	7fefffff 	.word	0x7fefffff
 800a0b4:	3ff00000 	.word	0x3ff00000
 800a0b8:	7c9fffff 	.word	0x7c9fffff
 800a0bc:	bff00000 	.word	0xbff00000
 800a0c0:	7fe00000 	.word	0x7fe00000

0800a0c4 <_strtod_r>:
 800a0c4:	4b01      	ldr	r3, [pc, #4]	; (800a0cc <_strtod_r+0x8>)
 800a0c6:	f7ff ba47 	b.w	8009558 <_strtod_l>
 800a0ca:	bf00      	nop
 800a0cc:	2400007c 	.word	0x2400007c

0800a0d0 <_strtol_l.constprop.0>:
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d6:	d001      	beq.n	800a0dc <_strtol_l.constprop.0+0xc>
 800a0d8:	2b24      	cmp	r3, #36	; 0x24
 800a0da:	d906      	bls.n	800a0ea <_strtol_l.constprop.0+0x1a>
 800a0dc:	f7fe fb80 	bl	80087e0 <__errno>
 800a0e0:	2316      	movs	r3, #22
 800a0e2:	6003      	str	r3, [r0, #0]
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a1d0 <_strtol_l.constprop.0+0x100>
 800a0ee:	460d      	mov	r5, r1
 800a0f0:	462e      	mov	r6, r5
 800a0f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a0fa:	f017 0708 	ands.w	r7, r7, #8
 800a0fe:	d1f7      	bne.n	800a0f0 <_strtol_l.constprop.0+0x20>
 800a100:	2c2d      	cmp	r4, #45	; 0x2d
 800a102:	d132      	bne.n	800a16a <_strtol_l.constprop.0+0x9a>
 800a104:	782c      	ldrb	r4, [r5, #0]
 800a106:	2701      	movs	r7, #1
 800a108:	1cb5      	adds	r5, r6, #2
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d05b      	beq.n	800a1c6 <_strtol_l.constprop.0+0xf6>
 800a10e:	2b10      	cmp	r3, #16
 800a110:	d109      	bne.n	800a126 <_strtol_l.constprop.0+0x56>
 800a112:	2c30      	cmp	r4, #48	; 0x30
 800a114:	d107      	bne.n	800a126 <_strtol_l.constprop.0+0x56>
 800a116:	782c      	ldrb	r4, [r5, #0]
 800a118:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a11c:	2c58      	cmp	r4, #88	; 0x58
 800a11e:	d14d      	bne.n	800a1bc <_strtol_l.constprop.0+0xec>
 800a120:	786c      	ldrb	r4, [r5, #1]
 800a122:	2310      	movs	r3, #16
 800a124:	3502      	adds	r5, #2
 800a126:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a12a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a12e:	f04f 0c00 	mov.w	ip, #0
 800a132:	fbb8 f9f3 	udiv	r9, r8, r3
 800a136:	4666      	mov	r6, ip
 800a138:	fb03 8a19 	mls	sl, r3, r9, r8
 800a13c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a140:	f1be 0f09 	cmp.w	lr, #9
 800a144:	d816      	bhi.n	800a174 <_strtol_l.constprop.0+0xa4>
 800a146:	4674      	mov	r4, lr
 800a148:	42a3      	cmp	r3, r4
 800a14a:	dd24      	ble.n	800a196 <_strtol_l.constprop.0+0xc6>
 800a14c:	f1bc 0f00 	cmp.w	ip, #0
 800a150:	db1e      	blt.n	800a190 <_strtol_l.constprop.0+0xc0>
 800a152:	45b1      	cmp	r9, r6
 800a154:	d31c      	bcc.n	800a190 <_strtol_l.constprop.0+0xc0>
 800a156:	d101      	bne.n	800a15c <_strtol_l.constprop.0+0x8c>
 800a158:	45a2      	cmp	sl, r4
 800a15a:	db19      	blt.n	800a190 <_strtol_l.constprop.0+0xc0>
 800a15c:	fb06 4603 	mla	r6, r6, r3, r4
 800a160:	f04f 0c01 	mov.w	ip, #1
 800a164:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a168:	e7e8      	b.n	800a13c <_strtol_l.constprop.0+0x6c>
 800a16a:	2c2b      	cmp	r4, #43	; 0x2b
 800a16c:	bf04      	itt	eq
 800a16e:	782c      	ldrbeq	r4, [r5, #0]
 800a170:	1cb5      	addeq	r5, r6, #2
 800a172:	e7ca      	b.n	800a10a <_strtol_l.constprop.0+0x3a>
 800a174:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a178:	f1be 0f19 	cmp.w	lr, #25
 800a17c:	d801      	bhi.n	800a182 <_strtol_l.constprop.0+0xb2>
 800a17e:	3c37      	subs	r4, #55	; 0x37
 800a180:	e7e2      	b.n	800a148 <_strtol_l.constprop.0+0x78>
 800a182:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a186:	f1be 0f19 	cmp.w	lr, #25
 800a18a:	d804      	bhi.n	800a196 <_strtol_l.constprop.0+0xc6>
 800a18c:	3c57      	subs	r4, #87	; 0x57
 800a18e:	e7db      	b.n	800a148 <_strtol_l.constprop.0+0x78>
 800a190:	f04f 3cff 	mov.w	ip, #4294967295
 800a194:	e7e6      	b.n	800a164 <_strtol_l.constprop.0+0x94>
 800a196:	f1bc 0f00 	cmp.w	ip, #0
 800a19a:	da05      	bge.n	800a1a8 <_strtol_l.constprop.0+0xd8>
 800a19c:	2322      	movs	r3, #34	; 0x22
 800a19e:	6003      	str	r3, [r0, #0]
 800a1a0:	4646      	mov	r6, r8
 800a1a2:	b942      	cbnz	r2, 800a1b6 <_strtol_l.constprop.0+0xe6>
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	e79e      	b.n	800a0e6 <_strtol_l.constprop.0+0x16>
 800a1a8:	b107      	cbz	r7, 800a1ac <_strtol_l.constprop.0+0xdc>
 800a1aa:	4276      	negs	r6, r6
 800a1ac:	2a00      	cmp	r2, #0
 800a1ae:	d0f9      	beq.n	800a1a4 <_strtol_l.constprop.0+0xd4>
 800a1b0:	f1bc 0f00 	cmp.w	ip, #0
 800a1b4:	d000      	beq.n	800a1b8 <_strtol_l.constprop.0+0xe8>
 800a1b6:	1e69      	subs	r1, r5, #1
 800a1b8:	6011      	str	r1, [r2, #0]
 800a1ba:	e7f3      	b.n	800a1a4 <_strtol_l.constprop.0+0xd4>
 800a1bc:	2430      	movs	r4, #48	; 0x30
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1b1      	bne.n	800a126 <_strtol_l.constprop.0+0x56>
 800a1c2:	2308      	movs	r3, #8
 800a1c4:	e7af      	b.n	800a126 <_strtol_l.constprop.0+0x56>
 800a1c6:	2c30      	cmp	r4, #48	; 0x30
 800a1c8:	d0a5      	beq.n	800a116 <_strtol_l.constprop.0+0x46>
 800a1ca:	230a      	movs	r3, #10
 800a1cc:	e7ab      	b.n	800a126 <_strtol_l.constprop.0+0x56>
 800a1ce:	bf00      	nop
 800a1d0:	0800e7c9 	.word	0x0800e7c9

0800a1d4 <_strtol_r>:
 800a1d4:	f7ff bf7c 	b.w	800a0d0 <_strtol_l.constprop.0>

0800a1d8 <quorem>:
 800a1d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1dc:	6903      	ldr	r3, [r0, #16]
 800a1de:	690c      	ldr	r4, [r1, #16]
 800a1e0:	42a3      	cmp	r3, r4
 800a1e2:	4607      	mov	r7, r0
 800a1e4:	f2c0 8081 	blt.w	800a2ea <quorem+0x112>
 800a1e8:	3c01      	subs	r4, #1
 800a1ea:	f101 0814 	add.w	r8, r1, #20
 800a1ee:	f100 0514 	add.w	r5, r0, #20
 800a1f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1f6:	9301      	str	r3, [sp, #4]
 800a1f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a200:	3301      	adds	r3, #1
 800a202:	429a      	cmp	r2, r3
 800a204:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a208:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a20c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a210:	d331      	bcc.n	800a276 <quorem+0x9e>
 800a212:	f04f 0e00 	mov.w	lr, #0
 800a216:	4640      	mov	r0, r8
 800a218:	46ac      	mov	ip, r5
 800a21a:	46f2      	mov	sl, lr
 800a21c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a220:	b293      	uxth	r3, r2
 800a222:	fb06 e303 	mla	r3, r6, r3, lr
 800a226:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	ebaa 0303 	sub.w	r3, sl, r3
 800a230:	f8dc a000 	ldr.w	sl, [ip]
 800a234:	0c12      	lsrs	r2, r2, #16
 800a236:	fa13 f38a 	uxtah	r3, r3, sl
 800a23a:	fb06 e202 	mla	r2, r6, r2, lr
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	9b00      	ldr	r3, [sp, #0]
 800a242:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a246:	b292      	uxth	r2, r2
 800a248:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a24c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a250:	f8bd 3000 	ldrh.w	r3, [sp]
 800a254:	4581      	cmp	r9, r0
 800a256:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a25a:	f84c 3b04 	str.w	r3, [ip], #4
 800a25e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a262:	d2db      	bcs.n	800a21c <quorem+0x44>
 800a264:	f855 300b 	ldr.w	r3, [r5, fp]
 800a268:	b92b      	cbnz	r3, 800a276 <quorem+0x9e>
 800a26a:	9b01      	ldr	r3, [sp, #4]
 800a26c:	3b04      	subs	r3, #4
 800a26e:	429d      	cmp	r5, r3
 800a270:	461a      	mov	r2, r3
 800a272:	d32e      	bcc.n	800a2d2 <quorem+0xfa>
 800a274:	613c      	str	r4, [r7, #16]
 800a276:	4638      	mov	r0, r7
 800a278:	f001 fc10 	bl	800ba9c <__mcmp>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	db24      	blt.n	800a2ca <quorem+0xf2>
 800a280:	3601      	adds	r6, #1
 800a282:	4628      	mov	r0, r5
 800a284:	f04f 0c00 	mov.w	ip, #0
 800a288:	f858 2b04 	ldr.w	r2, [r8], #4
 800a28c:	f8d0 e000 	ldr.w	lr, [r0]
 800a290:	b293      	uxth	r3, r2
 800a292:	ebac 0303 	sub.w	r3, ip, r3
 800a296:	0c12      	lsrs	r2, r2, #16
 800a298:	fa13 f38e 	uxtah	r3, r3, lr
 800a29c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a2a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2aa:	45c1      	cmp	r9, r8
 800a2ac:	f840 3b04 	str.w	r3, [r0], #4
 800a2b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a2b4:	d2e8      	bcs.n	800a288 <quorem+0xb0>
 800a2b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2be:	b922      	cbnz	r2, 800a2ca <quorem+0xf2>
 800a2c0:	3b04      	subs	r3, #4
 800a2c2:	429d      	cmp	r5, r3
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	d30a      	bcc.n	800a2de <quorem+0x106>
 800a2c8:	613c      	str	r4, [r7, #16]
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	b003      	add	sp, #12
 800a2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d2:	6812      	ldr	r2, [r2, #0]
 800a2d4:	3b04      	subs	r3, #4
 800a2d6:	2a00      	cmp	r2, #0
 800a2d8:	d1cc      	bne.n	800a274 <quorem+0x9c>
 800a2da:	3c01      	subs	r4, #1
 800a2dc:	e7c7      	b.n	800a26e <quorem+0x96>
 800a2de:	6812      	ldr	r2, [r2, #0]
 800a2e0:	3b04      	subs	r3, #4
 800a2e2:	2a00      	cmp	r2, #0
 800a2e4:	d1f0      	bne.n	800a2c8 <quorem+0xf0>
 800a2e6:	3c01      	subs	r4, #1
 800a2e8:	e7eb      	b.n	800a2c2 <quorem+0xea>
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	e7ee      	b.n	800a2cc <quorem+0xf4>
	...

0800a2f0 <_dtoa_r>:
 800a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	ed2d 8b02 	vpush	{d8}
 800a2f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2fa:	b091      	sub	sp, #68	; 0x44
 800a2fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a300:	ec59 8b10 	vmov	r8, r9, d0
 800a304:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a306:	9106      	str	r1, [sp, #24]
 800a308:	4606      	mov	r6, r0
 800a30a:	9208      	str	r2, [sp, #32]
 800a30c:	930c      	str	r3, [sp, #48]	; 0x30
 800a30e:	b975      	cbnz	r5, 800a32e <_dtoa_r+0x3e>
 800a310:	2010      	movs	r0, #16
 800a312:	f001 f8cf 	bl	800b4b4 <malloc>
 800a316:	4602      	mov	r2, r0
 800a318:	6270      	str	r0, [r6, #36]	; 0x24
 800a31a:	b920      	cbnz	r0, 800a326 <_dtoa_r+0x36>
 800a31c:	4baa      	ldr	r3, [pc, #680]	; (800a5c8 <_dtoa_r+0x2d8>)
 800a31e:	21ea      	movs	r1, #234	; 0xea
 800a320:	48aa      	ldr	r0, [pc, #680]	; (800a5cc <_dtoa_r+0x2dc>)
 800a322:	f002 f83b 	bl	800c39c <__assert_func>
 800a326:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a32a:	6005      	str	r5, [r0, #0]
 800a32c:	60c5      	str	r5, [r0, #12]
 800a32e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a330:	6819      	ldr	r1, [r3, #0]
 800a332:	b151      	cbz	r1, 800a34a <_dtoa_r+0x5a>
 800a334:	685a      	ldr	r2, [r3, #4]
 800a336:	604a      	str	r2, [r1, #4]
 800a338:	2301      	movs	r3, #1
 800a33a:	4093      	lsls	r3, r2
 800a33c:	608b      	str	r3, [r1, #8]
 800a33e:	4630      	mov	r0, r6
 800a340:	f001 f920 	bl	800b584 <_Bfree>
 800a344:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a346:	2200      	movs	r2, #0
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	f1b9 0300 	subs.w	r3, r9, #0
 800a34e:	bfbb      	ittet	lt
 800a350:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a354:	9303      	strlt	r3, [sp, #12]
 800a356:	2300      	movge	r3, #0
 800a358:	2201      	movlt	r2, #1
 800a35a:	bfac      	ite	ge
 800a35c:	6023      	strge	r3, [r4, #0]
 800a35e:	6022      	strlt	r2, [r4, #0]
 800a360:	4b9b      	ldr	r3, [pc, #620]	; (800a5d0 <_dtoa_r+0x2e0>)
 800a362:	9c03      	ldr	r4, [sp, #12]
 800a364:	43a3      	bics	r3, r4
 800a366:	d11c      	bne.n	800a3a2 <_dtoa_r+0xb2>
 800a368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a36a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a36e:	6013      	str	r3, [r2, #0]
 800a370:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a374:	ea53 0308 	orrs.w	r3, r3, r8
 800a378:	f000 84fd 	beq.w	800ad76 <_dtoa_r+0xa86>
 800a37c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a37e:	b963      	cbnz	r3, 800a39a <_dtoa_r+0xaa>
 800a380:	4b94      	ldr	r3, [pc, #592]	; (800a5d4 <_dtoa_r+0x2e4>)
 800a382:	e01f      	b.n	800a3c4 <_dtoa_r+0xd4>
 800a384:	4b94      	ldr	r3, [pc, #592]	; (800a5d8 <_dtoa_r+0x2e8>)
 800a386:	9301      	str	r3, [sp, #4]
 800a388:	3308      	adds	r3, #8
 800a38a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a38c:	6013      	str	r3, [r2, #0]
 800a38e:	9801      	ldr	r0, [sp, #4]
 800a390:	b011      	add	sp, #68	; 0x44
 800a392:	ecbd 8b02 	vpop	{d8}
 800a396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39a:	4b8e      	ldr	r3, [pc, #568]	; (800a5d4 <_dtoa_r+0x2e4>)
 800a39c:	9301      	str	r3, [sp, #4]
 800a39e:	3303      	adds	r3, #3
 800a3a0:	e7f3      	b.n	800a38a <_dtoa_r+0x9a>
 800a3a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a3a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ae:	d10b      	bne.n	800a3c8 <_dtoa_r+0xd8>
 800a3b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	6013      	str	r3, [r2, #0]
 800a3b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 84d9 	beq.w	800ad70 <_dtoa_r+0xa80>
 800a3be:	4887      	ldr	r0, [pc, #540]	; (800a5dc <_dtoa_r+0x2ec>)
 800a3c0:	6018      	str	r0, [r3, #0]
 800a3c2:	1e43      	subs	r3, r0, #1
 800a3c4:	9301      	str	r3, [sp, #4]
 800a3c6:	e7e2      	b.n	800a38e <_dtoa_r+0x9e>
 800a3c8:	a90f      	add	r1, sp, #60	; 0x3c
 800a3ca:	aa0e      	add	r2, sp, #56	; 0x38
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	eeb0 0b48 	vmov.f64	d0, d8
 800a3d2:	f001 fc85 	bl	800bce0 <__d2b>
 800a3d6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a3da:	4605      	mov	r5, r0
 800a3dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a3de:	2900      	cmp	r1, #0
 800a3e0:	d046      	beq.n	800a470 <_dtoa_r+0x180>
 800a3e2:	ee18 4a90 	vmov	r4, s17
 800a3e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a3ea:	ec53 2b18 	vmov	r2, r3, d8
 800a3ee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a3f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a3f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a3fa:	2400      	movs	r4, #0
 800a3fc:	ec43 2b16 	vmov	d6, r2, r3
 800a400:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a404:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a5b0 <_dtoa_r+0x2c0>
 800a408:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a40c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a5b8 <_dtoa_r+0x2c8>
 800a410:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a414:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a5c0 <_dtoa_r+0x2d0>
 800a418:	ee07 1a90 	vmov	s15, r1
 800a41c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a420:	eeb0 7b46 	vmov.f64	d7, d6
 800a424:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a428:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a42c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a434:	ee16 ba90 	vmov	fp, s13
 800a438:	940a      	str	r4, [sp, #40]	; 0x28
 800a43a:	d508      	bpl.n	800a44e <_dtoa_r+0x15e>
 800a43c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a440:	eeb4 6b47 	vcmp.f64	d6, d7
 800a444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a448:	bf18      	it	ne
 800a44a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a44e:	f1bb 0f16 	cmp.w	fp, #22
 800a452:	d82f      	bhi.n	800a4b4 <_dtoa_r+0x1c4>
 800a454:	4b62      	ldr	r3, [pc, #392]	; (800a5e0 <_dtoa_r+0x2f0>)
 800a456:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a45a:	ed93 7b00 	vldr	d7, [r3]
 800a45e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a466:	d501      	bpl.n	800a46c <_dtoa_r+0x17c>
 800a468:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a46c:	2300      	movs	r3, #0
 800a46e:	e022      	b.n	800a4b6 <_dtoa_r+0x1c6>
 800a470:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a472:	4401      	add	r1, r0
 800a474:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a478:	2b20      	cmp	r3, #32
 800a47a:	bfc1      	itttt	gt
 800a47c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a480:	fa04 f303 	lslgt.w	r3, r4, r3
 800a484:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a488:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a48c:	bfd6      	itet	le
 800a48e:	f1c3 0320 	rsble	r3, r3, #32
 800a492:	ea43 0808 	orrgt.w	r8, r3, r8
 800a496:	fa08 f803 	lslle.w	r8, r8, r3
 800a49a:	ee07 8a90 	vmov	s15, r8
 800a49e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a4a2:	3901      	subs	r1, #1
 800a4a4:	ee17 4a90 	vmov	r4, s15
 800a4a8:	ec53 2b17 	vmov	r2, r3, d7
 800a4ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a4b0:	2401      	movs	r4, #1
 800a4b2:	e7a3      	b.n	800a3fc <_dtoa_r+0x10c>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4b8:	1a43      	subs	r3, r0, r1
 800a4ba:	1e5a      	subs	r2, r3, #1
 800a4bc:	bf45      	ittet	mi
 800a4be:	f1c3 0301 	rsbmi	r3, r3, #1
 800a4c2:	9304      	strmi	r3, [sp, #16]
 800a4c4:	2300      	movpl	r3, #0
 800a4c6:	2300      	movmi	r3, #0
 800a4c8:	9205      	str	r2, [sp, #20]
 800a4ca:	bf54      	ite	pl
 800a4cc:	9304      	strpl	r3, [sp, #16]
 800a4ce:	9305      	strmi	r3, [sp, #20]
 800a4d0:	f1bb 0f00 	cmp.w	fp, #0
 800a4d4:	db18      	blt.n	800a508 <_dtoa_r+0x218>
 800a4d6:	9b05      	ldr	r3, [sp, #20]
 800a4d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a4dc:	445b      	add	r3, fp
 800a4de:	9305      	str	r3, [sp, #20]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	9a06      	ldr	r2, [sp, #24]
 800a4e4:	2a09      	cmp	r2, #9
 800a4e6:	d849      	bhi.n	800a57c <_dtoa_r+0x28c>
 800a4e8:	2a05      	cmp	r2, #5
 800a4ea:	bfc4      	itt	gt
 800a4ec:	3a04      	subgt	r2, #4
 800a4ee:	9206      	strgt	r2, [sp, #24]
 800a4f0:	9a06      	ldr	r2, [sp, #24]
 800a4f2:	f1a2 0202 	sub.w	r2, r2, #2
 800a4f6:	bfcc      	ite	gt
 800a4f8:	2400      	movgt	r4, #0
 800a4fa:	2401      	movle	r4, #1
 800a4fc:	2a03      	cmp	r2, #3
 800a4fe:	d848      	bhi.n	800a592 <_dtoa_r+0x2a2>
 800a500:	e8df f002 	tbb	[pc, r2]
 800a504:	3a2c2e0b 	.word	0x3a2c2e0b
 800a508:	9b04      	ldr	r3, [sp, #16]
 800a50a:	2200      	movs	r2, #0
 800a50c:	eba3 030b 	sub.w	r3, r3, fp
 800a510:	9304      	str	r3, [sp, #16]
 800a512:	9209      	str	r2, [sp, #36]	; 0x24
 800a514:	f1cb 0300 	rsb	r3, fp, #0
 800a518:	e7e3      	b.n	800a4e2 <_dtoa_r+0x1f2>
 800a51a:	2200      	movs	r2, #0
 800a51c:	9207      	str	r2, [sp, #28]
 800a51e:	9a08      	ldr	r2, [sp, #32]
 800a520:	2a00      	cmp	r2, #0
 800a522:	dc39      	bgt.n	800a598 <_dtoa_r+0x2a8>
 800a524:	f04f 0a01 	mov.w	sl, #1
 800a528:	46d1      	mov	r9, sl
 800a52a:	4652      	mov	r2, sl
 800a52c:	f8cd a020 	str.w	sl, [sp, #32]
 800a530:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a532:	2100      	movs	r1, #0
 800a534:	6079      	str	r1, [r7, #4]
 800a536:	2004      	movs	r0, #4
 800a538:	f100 0c14 	add.w	ip, r0, #20
 800a53c:	4594      	cmp	ip, r2
 800a53e:	6879      	ldr	r1, [r7, #4]
 800a540:	d92f      	bls.n	800a5a2 <_dtoa_r+0x2b2>
 800a542:	4630      	mov	r0, r6
 800a544:	930d      	str	r3, [sp, #52]	; 0x34
 800a546:	f000 ffdd 	bl	800b504 <_Balloc>
 800a54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a54c:	9001      	str	r0, [sp, #4]
 800a54e:	4602      	mov	r2, r0
 800a550:	2800      	cmp	r0, #0
 800a552:	d149      	bne.n	800a5e8 <_dtoa_r+0x2f8>
 800a554:	4b23      	ldr	r3, [pc, #140]	; (800a5e4 <_dtoa_r+0x2f4>)
 800a556:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a55a:	e6e1      	b.n	800a320 <_dtoa_r+0x30>
 800a55c:	2201      	movs	r2, #1
 800a55e:	e7dd      	b.n	800a51c <_dtoa_r+0x22c>
 800a560:	2200      	movs	r2, #0
 800a562:	9207      	str	r2, [sp, #28]
 800a564:	9a08      	ldr	r2, [sp, #32]
 800a566:	eb0b 0a02 	add.w	sl, fp, r2
 800a56a:	f10a 0901 	add.w	r9, sl, #1
 800a56e:	464a      	mov	r2, r9
 800a570:	2a01      	cmp	r2, #1
 800a572:	bfb8      	it	lt
 800a574:	2201      	movlt	r2, #1
 800a576:	e7db      	b.n	800a530 <_dtoa_r+0x240>
 800a578:	2201      	movs	r2, #1
 800a57a:	e7f2      	b.n	800a562 <_dtoa_r+0x272>
 800a57c:	2401      	movs	r4, #1
 800a57e:	2200      	movs	r2, #0
 800a580:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a584:	f04f 3aff 	mov.w	sl, #4294967295
 800a588:	2100      	movs	r1, #0
 800a58a:	46d1      	mov	r9, sl
 800a58c:	2212      	movs	r2, #18
 800a58e:	9108      	str	r1, [sp, #32]
 800a590:	e7ce      	b.n	800a530 <_dtoa_r+0x240>
 800a592:	2201      	movs	r2, #1
 800a594:	9207      	str	r2, [sp, #28]
 800a596:	e7f5      	b.n	800a584 <_dtoa_r+0x294>
 800a598:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a59c:	46d1      	mov	r9, sl
 800a59e:	4652      	mov	r2, sl
 800a5a0:	e7c6      	b.n	800a530 <_dtoa_r+0x240>
 800a5a2:	3101      	adds	r1, #1
 800a5a4:	6079      	str	r1, [r7, #4]
 800a5a6:	0040      	lsls	r0, r0, #1
 800a5a8:	e7c6      	b.n	800a538 <_dtoa_r+0x248>
 800a5aa:	bf00      	nop
 800a5ac:	f3af 8000 	nop.w
 800a5b0:	636f4361 	.word	0x636f4361
 800a5b4:	3fd287a7 	.word	0x3fd287a7
 800a5b8:	8b60c8b3 	.word	0x8b60c8b3
 800a5bc:	3fc68a28 	.word	0x3fc68a28
 800a5c0:	509f79fb 	.word	0x509f79fb
 800a5c4:	3fd34413 	.word	0x3fd34413
 800a5c8:	0800e8d6 	.word	0x0800e8d6
 800a5cc:	0800e8ed 	.word	0x0800e8ed
 800a5d0:	7ff00000 	.word	0x7ff00000
 800a5d4:	0800e8d2 	.word	0x0800e8d2
 800a5d8:	0800e8c9 	.word	0x0800e8c9
 800a5dc:	0800e749 	.word	0x0800e749
 800a5e0:	0800ea58 	.word	0x0800ea58
 800a5e4:	0800e948 	.word	0x0800e948
 800a5e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a5ea:	9901      	ldr	r1, [sp, #4]
 800a5ec:	6011      	str	r1, [r2, #0]
 800a5ee:	f1b9 0f0e 	cmp.w	r9, #14
 800a5f2:	d86c      	bhi.n	800a6ce <_dtoa_r+0x3de>
 800a5f4:	2c00      	cmp	r4, #0
 800a5f6:	d06a      	beq.n	800a6ce <_dtoa_r+0x3de>
 800a5f8:	f1bb 0f00 	cmp.w	fp, #0
 800a5fc:	f340 80a0 	ble.w	800a740 <_dtoa_r+0x450>
 800a600:	49c1      	ldr	r1, [pc, #772]	; (800a908 <_dtoa_r+0x618>)
 800a602:	f00b 020f 	and.w	r2, fp, #15
 800a606:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a60a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a60e:	ed92 7b00 	vldr	d7, [r2]
 800a612:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a616:	f000 8087 	beq.w	800a728 <_dtoa_r+0x438>
 800a61a:	4abc      	ldr	r2, [pc, #752]	; (800a90c <_dtoa_r+0x61c>)
 800a61c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a620:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a624:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a628:	f001 010f 	and.w	r1, r1, #15
 800a62c:	2203      	movs	r2, #3
 800a62e:	48b7      	ldr	r0, [pc, #732]	; (800a90c <_dtoa_r+0x61c>)
 800a630:	2900      	cmp	r1, #0
 800a632:	d17b      	bne.n	800a72c <_dtoa_r+0x43c>
 800a634:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a638:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a63c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a640:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a642:	2900      	cmp	r1, #0
 800a644:	f000 80a2 	beq.w	800a78c <_dtoa_r+0x49c>
 800a648:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a64c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a650:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a658:	f140 8098 	bpl.w	800a78c <_dtoa_r+0x49c>
 800a65c:	f1b9 0f00 	cmp.w	r9, #0
 800a660:	f000 8094 	beq.w	800a78c <_dtoa_r+0x49c>
 800a664:	f1ba 0f00 	cmp.w	sl, #0
 800a668:	dd2f      	ble.n	800a6ca <_dtoa_r+0x3da>
 800a66a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a66e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a672:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a676:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a67a:	3201      	adds	r2, #1
 800a67c:	4650      	mov	r0, sl
 800a67e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a682:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a686:	ee07 2a90 	vmov	s15, r2
 800a68a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a68e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a692:	ee15 4a90 	vmov	r4, s11
 800a696:	ec52 1b15 	vmov	r1, r2, d5
 800a69a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d177      	bne.n	800a792 <_dtoa_r+0x4a2>
 800a6a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a6a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a6aa:	ec42 1b17 	vmov	d7, r1, r2
 800a6ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6b6:	f300 8263 	bgt.w	800ab80 <_dtoa_r+0x890>
 800a6ba:	eeb1 7b47 	vneg.f64	d7, d7
 800a6be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c6:	f100 8258 	bmi.w	800ab7a <_dtoa_r+0x88a>
 800a6ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a6ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a6d0:	2a00      	cmp	r2, #0
 800a6d2:	f2c0 811d 	blt.w	800a910 <_dtoa_r+0x620>
 800a6d6:	f1bb 0f0e 	cmp.w	fp, #14
 800a6da:	f300 8119 	bgt.w	800a910 <_dtoa_r+0x620>
 800a6de:	4b8a      	ldr	r3, [pc, #552]	; (800a908 <_dtoa_r+0x618>)
 800a6e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a6e4:	ed93 6b00 	vldr	d6, [r3]
 800a6e8:	9b08      	ldr	r3, [sp, #32]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f280 80b7 	bge.w	800a85e <_dtoa_r+0x56e>
 800a6f0:	f1b9 0f00 	cmp.w	r9, #0
 800a6f4:	f300 80b3 	bgt.w	800a85e <_dtoa_r+0x56e>
 800a6f8:	f040 823f 	bne.w	800ab7a <_dtoa_r+0x88a>
 800a6fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a700:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a704:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a708:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a710:	464c      	mov	r4, r9
 800a712:	464f      	mov	r7, r9
 800a714:	f280 8215 	bge.w	800ab42 <_dtoa_r+0x852>
 800a718:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a71c:	2331      	movs	r3, #49	; 0x31
 800a71e:	f808 3b01 	strb.w	r3, [r8], #1
 800a722:	f10b 0b01 	add.w	fp, fp, #1
 800a726:	e211      	b.n	800ab4c <_dtoa_r+0x85c>
 800a728:	2202      	movs	r2, #2
 800a72a:	e780      	b.n	800a62e <_dtoa_r+0x33e>
 800a72c:	07cc      	lsls	r4, r1, #31
 800a72e:	d504      	bpl.n	800a73a <_dtoa_r+0x44a>
 800a730:	ed90 6b00 	vldr	d6, [r0]
 800a734:	3201      	adds	r2, #1
 800a736:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a73a:	1049      	asrs	r1, r1, #1
 800a73c:	3008      	adds	r0, #8
 800a73e:	e777      	b.n	800a630 <_dtoa_r+0x340>
 800a740:	d022      	beq.n	800a788 <_dtoa_r+0x498>
 800a742:	f1cb 0100 	rsb	r1, fp, #0
 800a746:	4a70      	ldr	r2, [pc, #448]	; (800a908 <_dtoa_r+0x618>)
 800a748:	f001 000f 	and.w	r0, r1, #15
 800a74c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a750:	ed92 7b00 	vldr	d7, [r2]
 800a754:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a758:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a75c:	486b      	ldr	r0, [pc, #428]	; (800a90c <_dtoa_r+0x61c>)
 800a75e:	1109      	asrs	r1, r1, #4
 800a760:	2400      	movs	r4, #0
 800a762:	2202      	movs	r2, #2
 800a764:	b929      	cbnz	r1, 800a772 <_dtoa_r+0x482>
 800a766:	2c00      	cmp	r4, #0
 800a768:	f43f af6a 	beq.w	800a640 <_dtoa_r+0x350>
 800a76c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a770:	e766      	b.n	800a640 <_dtoa_r+0x350>
 800a772:	07cf      	lsls	r7, r1, #31
 800a774:	d505      	bpl.n	800a782 <_dtoa_r+0x492>
 800a776:	ed90 6b00 	vldr	d6, [r0]
 800a77a:	3201      	adds	r2, #1
 800a77c:	2401      	movs	r4, #1
 800a77e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a782:	1049      	asrs	r1, r1, #1
 800a784:	3008      	adds	r0, #8
 800a786:	e7ed      	b.n	800a764 <_dtoa_r+0x474>
 800a788:	2202      	movs	r2, #2
 800a78a:	e759      	b.n	800a640 <_dtoa_r+0x350>
 800a78c:	465f      	mov	r7, fp
 800a78e:	4648      	mov	r0, r9
 800a790:	e775      	b.n	800a67e <_dtoa_r+0x38e>
 800a792:	ec42 1b17 	vmov	d7, r1, r2
 800a796:	4a5c      	ldr	r2, [pc, #368]	; (800a908 <_dtoa_r+0x618>)
 800a798:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a79c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a7a0:	9a01      	ldr	r2, [sp, #4]
 800a7a2:	1814      	adds	r4, r2, r0
 800a7a4:	9a07      	ldr	r2, [sp, #28]
 800a7a6:	b352      	cbz	r2, 800a7fe <_dtoa_r+0x50e>
 800a7a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a7ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a7b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a7b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a7b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a7bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a7c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a7c4:	ee14 2a90 	vmov	r2, s9
 800a7c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a7cc:	3230      	adds	r2, #48	; 0x30
 800a7ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a7d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7da:	f808 2b01 	strb.w	r2, [r8], #1
 800a7de:	d439      	bmi.n	800a854 <_dtoa_r+0x564>
 800a7e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a7e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ec:	d472      	bmi.n	800a8d4 <_dtoa_r+0x5e4>
 800a7ee:	45a0      	cmp	r8, r4
 800a7f0:	f43f af6b 	beq.w	800a6ca <_dtoa_r+0x3da>
 800a7f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a7f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a7fc:	e7e0      	b.n	800a7c0 <_dtoa_r+0x4d0>
 800a7fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a802:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a806:	4621      	mov	r1, r4
 800a808:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a80c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a810:	ee14 2a90 	vmov	r2, s9
 800a814:	3230      	adds	r2, #48	; 0x30
 800a816:	f808 2b01 	strb.w	r2, [r8], #1
 800a81a:	45a0      	cmp	r8, r4
 800a81c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a820:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a824:	d118      	bne.n	800a858 <_dtoa_r+0x568>
 800a826:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a82a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a82e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a836:	dc4d      	bgt.n	800a8d4 <_dtoa_r+0x5e4>
 800a838:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a83c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a844:	f57f af41 	bpl.w	800a6ca <_dtoa_r+0x3da>
 800a848:	4688      	mov	r8, r1
 800a84a:	3901      	subs	r1, #1
 800a84c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a850:	2b30      	cmp	r3, #48	; 0x30
 800a852:	d0f9      	beq.n	800a848 <_dtoa_r+0x558>
 800a854:	46bb      	mov	fp, r7
 800a856:	e02a      	b.n	800a8ae <_dtoa_r+0x5be>
 800a858:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a85c:	e7d6      	b.n	800a80c <_dtoa_r+0x51c>
 800a85e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a862:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a866:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a86a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a86e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a872:	ee15 3a10 	vmov	r3, s10
 800a876:	3330      	adds	r3, #48	; 0x30
 800a878:	f808 3b01 	strb.w	r3, [r8], #1
 800a87c:	9b01      	ldr	r3, [sp, #4]
 800a87e:	eba8 0303 	sub.w	r3, r8, r3
 800a882:	4599      	cmp	r9, r3
 800a884:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a888:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a88c:	d133      	bne.n	800a8f6 <_dtoa_r+0x606>
 800a88e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a892:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a89a:	dc1a      	bgt.n	800a8d2 <_dtoa_r+0x5e2>
 800a89c:	eeb4 7b46 	vcmp.f64	d7, d6
 800a8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a4:	d103      	bne.n	800a8ae <_dtoa_r+0x5be>
 800a8a6:	ee15 3a10 	vmov	r3, s10
 800a8aa:	07d9      	lsls	r1, r3, #31
 800a8ac:	d411      	bmi.n	800a8d2 <_dtoa_r+0x5e2>
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	f000 fe67 	bl	800b584 <_Bfree>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8ba:	f888 3000 	strb.w	r3, [r8]
 800a8be:	f10b 0301 	add.w	r3, fp, #1
 800a8c2:	6013      	str	r3, [r2, #0]
 800a8c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f43f ad61 	beq.w	800a38e <_dtoa_r+0x9e>
 800a8cc:	f8c3 8000 	str.w	r8, [r3]
 800a8d0:	e55d      	b.n	800a38e <_dtoa_r+0x9e>
 800a8d2:	465f      	mov	r7, fp
 800a8d4:	4643      	mov	r3, r8
 800a8d6:	4698      	mov	r8, r3
 800a8d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8dc:	2a39      	cmp	r2, #57	; 0x39
 800a8de:	d106      	bne.n	800a8ee <_dtoa_r+0x5fe>
 800a8e0:	9a01      	ldr	r2, [sp, #4]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d1f7      	bne.n	800a8d6 <_dtoa_r+0x5e6>
 800a8e6:	9901      	ldr	r1, [sp, #4]
 800a8e8:	2230      	movs	r2, #48	; 0x30
 800a8ea:	3701      	adds	r7, #1
 800a8ec:	700a      	strb	r2, [r1, #0]
 800a8ee:	781a      	ldrb	r2, [r3, #0]
 800a8f0:	3201      	adds	r2, #1
 800a8f2:	701a      	strb	r2, [r3, #0]
 800a8f4:	e7ae      	b.n	800a854 <_dtoa_r+0x564>
 800a8f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a8fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a902:	d1b2      	bne.n	800a86a <_dtoa_r+0x57a>
 800a904:	e7d3      	b.n	800a8ae <_dtoa_r+0x5be>
 800a906:	bf00      	nop
 800a908:	0800ea58 	.word	0x0800ea58
 800a90c:	0800ea30 	.word	0x0800ea30
 800a910:	9907      	ldr	r1, [sp, #28]
 800a912:	2900      	cmp	r1, #0
 800a914:	f000 80d0 	beq.w	800aab8 <_dtoa_r+0x7c8>
 800a918:	9906      	ldr	r1, [sp, #24]
 800a91a:	2901      	cmp	r1, #1
 800a91c:	f300 80b4 	bgt.w	800aa88 <_dtoa_r+0x798>
 800a920:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a922:	2900      	cmp	r1, #0
 800a924:	f000 80ac 	beq.w	800aa80 <_dtoa_r+0x790>
 800a928:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a92c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a930:	461c      	mov	r4, r3
 800a932:	930a      	str	r3, [sp, #40]	; 0x28
 800a934:	9b04      	ldr	r3, [sp, #16]
 800a936:	4413      	add	r3, r2
 800a938:	9304      	str	r3, [sp, #16]
 800a93a:	9b05      	ldr	r3, [sp, #20]
 800a93c:	2101      	movs	r1, #1
 800a93e:	4413      	add	r3, r2
 800a940:	4630      	mov	r0, r6
 800a942:	9305      	str	r3, [sp, #20]
 800a944:	f000 ff20 	bl	800b788 <__i2b>
 800a948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a94a:	4607      	mov	r7, r0
 800a94c:	f1b8 0f00 	cmp.w	r8, #0
 800a950:	dd0d      	ble.n	800a96e <_dtoa_r+0x67e>
 800a952:	9a05      	ldr	r2, [sp, #20]
 800a954:	2a00      	cmp	r2, #0
 800a956:	dd0a      	ble.n	800a96e <_dtoa_r+0x67e>
 800a958:	4542      	cmp	r2, r8
 800a95a:	9904      	ldr	r1, [sp, #16]
 800a95c:	bfa8      	it	ge
 800a95e:	4642      	movge	r2, r8
 800a960:	1a89      	subs	r1, r1, r2
 800a962:	9104      	str	r1, [sp, #16]
 800a964:	9905      	ldr	r1, [sp, #20]
 800a966:	eba8 0802 	sub.w	r8, r8, r2
 800a96a:	1a8a      	subs	r2, r1, r2
 800a96c:	9205      	str	r2, [sp, #20]
 800a96e:	b303      	cbz	r3, 800a9b2 <_dtoa_r+0x6c2>
 800a970:	9a07      	ldr	r2, [sp, #28]
 800a972:	2a00      	cmp	r2, #0
 800a974:	f000 80a5 	beq.w	800aac2 <_dtoa_r+0x7d2>
 800a978:	2c00      	cmp	r4, #0
 800a97a:	dd13      	ble.n	800a9a4 <_dtoa_r+0x6b4>
 800a97c:	4639      	mov	r1, r7
 800a97e:	4622      	mov	r2, r4
 800a980:	4630      	mov	r0, r6
 800a982:	930d      	str	r3, [sp, #52]	; 0x34
 800a984:	f000 ffc0 	bl	800b908 <__pow5mult>
 800a988:	462a      	mov	r2, r5
 800a98a:	4601      	mov	r1, r0
 800a98c:	4607      	mov	r7, r0
 800a98e:	4630      	mov	r0, r6
 800a990:	f000 ff10 	bl	800b7b4 <__multiply>
 800a994:	4629      	mov	r1, r5
 800a996:	900a      	str	r0, [sp, #40]	; 0x28
 800a998:	4630      	mov	r0, r6
 800a99a:	f000 fdf3 	bl	800b584 <_Bfree>
 800a99e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9a2:	4615      	mov	r5, r2
 800a9a4:	1b1a      	subs	r2, r3, r4
 800a9a6:	d004      	beq.n	800a9b2 <_dtoa_r+0x6c2>
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f000 ffac 	bl	800b908 <__pow5mult>
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	2101      	movs	r1, #1
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f000 fee7 	bl	800b788 <__i2b>
 800a9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	4604      	mov	r4, r0
 800a9c0:	f340 8081 	ble.w	800aac6 <_dtoa_r+0x7d6>
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	4601      	mov	r1, r0
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f000 ff9d 	bl	800b908 <__pow5mult>
 800a9ce:	9b06      	ldr	r3, [sp, #24]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	dd7a      	ble.n	800aacc <_dtoa_r+0x7dc>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	930a      	str	r3, [sp, #40]	; 0x28
 800a9da:	6922      	ldr	r2, [r4, #16]
 800a9dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a9e0:	6910      	ldr	r0, [r2, #16]
 800a9e2:	f000 fe81 	bl	800b6e8 <__hi0bits>
 800a9e6:	f1c0 0020 	rsb	r0, r0, #32
 800a9ea:	9b05      	ldr	r3, [sp, #20]
 800a9ec:	4418      	add	r0, r3
 800a9ee:	f010 001f 	ands.w	r0, r0, #31
 800a9f2:	f000 808c 	beq.w	800ab0e <_dtoa_r+0x81e>
 800a9f6:	f1c0 0220 	rsb	r2, r0, #32
 800a9fa:	2a04      	cmp	r2, #4
 800a9fc:	f340 8085 	ble.w	800ab0a <_dtoa_r+0x81a>
 800aa00:	f1c0 001c 	rsb	r0, r0, #28
 800aa04:	9b04      	ldr	r3, [sp, #16]
 800aa06:	4403      	add	r3, r0
 800aa08:	9304      	str	r3, [sp, #16]
 800aa0a:	9b05      	ldr	r3, [sp, #20]
 800aa0c:	4403      	add	r3, r0
 800aa0e:	4480      	add	r8, r0
 800aa10:	9305      	str	r3, [sp, #20]
 800aa12:	9b04      	ldr	r3, [sp, #16]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	dd05      	ble.n	800aa24 <_dtoa_r+0x734>
 800aa18:	4629      	mov	r1, r5
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	f000 ffcd 	bl	800b9bc <__lshift>
 800aa22:	4605      	mov	r5, r0
 800aa24:	9b05      	ldr	r3, [sp, #20]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	dd05      	ble.n	800aa36 <_dtoa_r+0x746>
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f000 ffc4 	bl	800b9bc <__lshift>
 800aa34:	4604      	mov	r4, r0
 800aa36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d06a      	beq.n	800ab12 <_dtoa_r+0x822>
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f001 f82c 	bl	800ba9c <__mcmp>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	da64      	bge.n	800ab12 <_dtoa_r+0x822>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	220a      	movs	r2, #10
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f000 fdba 	bl	800b5c8 <__multadd>
 800aa54:	9b07      	ldr	r3, [sp, #28]
 800aa56:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa5a:	4605      	mov	r5, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 8191 	beq.w	800ad84 <_dtoa_r+0xa94>
 800aa62:	4639      	mov	r1, r7
 800aa64:	2300      	movs	r3, #0
 800aa66:	220a      	movs	r2, #10
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f000 fdad 	bl	800b5c8 <__multadd>
 800aa6e:	f1ba 0f00 	cmp.w	sl, #0
 800aa72:	4607      	mov	r7, r0
 800aa74:	f300 808d 	bgt.w	800ab92 <_dtoa_r+0x8a2>
 800aa78:	9b06      	ldr	r3, [sp, #24]
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	dc50      	bgt.n	800ab20 <_dtoa_r+0x830>
 800aa7e:	e088      	b.n	800ab92 <_dtoa_r+0x8a2>
 800aa80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aa86:	e751      	b.n	800a92c <_dtoa_r+0x63c>
 800aa88:	f109 34ff 	add.w	r4, r9, #4294967295
 800aa8c:	42a3      	cmp	r3, r4
 800aa8e:	bfbf      	itttt	lt
 800aa90:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800aa92:	1ae3      	sublt	r3, r4, r3
 800aa94:	18d2      	addlt	r2, r2, r3
 800aa96:	9209      	strlt	r2, [sp, #36]	; 0x24
 800aa98:	bfb6      	itet	lt
 800aa9a:	4623      	movlt	r3, r4
 800aa9c:	1b1c      	subge	r4, r3, r4
 800aa9e:	2400      	movlt	r4, #0
 800aaa0:	f1b9 0f00 	cmp.w	r9, #0
 800aaa4:	bfb5      	itete	lt
 800aaa6:	9a04      	ldrlt	r2, [sp, #16]
 800aaa8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800aaac:	eba2 0809 	sublt.w	r8, r2, r9
 800aab0:	464a      	movge	r2, r9
 800aab2:	bfb8      	it	lt
 800aab4:	2200      	movlt	r2, #0
 800aab6:	e73c      	b.n	800a932 <_dtoa_r+0x642>
 800aab8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aabc:	9f07      	ldr	r7, [sp, #28]
 800aabe:	461c      	mov	r4, r3
 800aac0:	e744      	b.n	800a94c <_dtoa_r+0x65c>
 800aac2:	461a      	mov	r2, r3
 800aac4:	e770      	b.n	800a9a8 <_dtoa_r+0x6b8>
 800aac6:	9b06      	ldr	r3, [sp, #24]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	dc18      	bgt.n	800aafe <_dtoa_r+0x80e>
 800aacc:	9b02      	ldr	r3, [sp, #8]
 800aace:	b9b3      	cbnz	r3, 800aafe <_dtoa_r+0x80e>
 800aad0:	9b03      	ldr	r3, [sp, #12]
 800aad2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800aad6:	b9a2      	cbnz	r2, 800ab02 <_dtoa_r+0x812>
 800aad8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800aadc:	0d12      	lsrs	r2, r2, #20
 800aade:	0512      	lsls	r2, r2, #20
 800aae0:	b18a      	cbz	r2, 800ab06 <_dtoa_r+0x816>
 800aae2:	9b04      	ldr	r3, [sp, #16]
 800aae4:	3301      	adds	r3, #1
 800aae6:	9304      	str	r3, [sp, #16]
 800aae8:	9b05      	ldr	r3, [sp, #20]
 800aaea:	3301      	adds	r3, #1
 800aaec:	9305      	str	r3, [sp, #20]
 800aaee:	2301      	movs	r3, #1
 800aaf0:	930a      	str	r3, [sp, #40]	; 0x28
 800aaf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f47f af70 	bne.w	800a9da <_dtoa_r+0x6ea>
 800aafa:	2001      	movs	r0, #1
 800aafc:	e775      	b.n	800a9ea <_dtoa_r+0x6fa>
 800aafe:	2300      	movs	r3, #0
 800ab00:	e7f6      	b.n	800aaf0 <_dtoa_r+0x800>
 800ab02:	9b02      	ldr	r3, [sp, #8]
 800ab04:	e7f4      	b.n	800aaf0 <_dtoa_r+0x800>
 800ab06:	920a      	str	r2, [sp, #40]	; 0x28
 800ab08:	e7f3      	b.n	800aaf2 <_dtoa_r+0x802>
 800ab0a:	d082      	beq.n	800aa12 <_dtoa_r+0x722>
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	301c      	adds	r0, #28
 800ab10:	e778      	b.n	800aa04 <_dtoa_r+0x714>
 800ab12:	f1b9 0f00 	cmp.w	r9, #0
 800ab16:	dc37      	bgt.n	800ab88 <_dtoa_r+0x898>
 800ab18:	9b06      	ldr	r3, [sp, #24]
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	dd34      	ble.n	800ab88 <_dtoa_r+0x898>
 800ab1e:	46ca      	mov	sl, r9
 800ab20:	f1ba 0f00 	cmp.w	sl, #0
 800ab24:	d10d      	bne.n	800ab42 <_dtoa_r+0x852>
 800ab26:	4621      	mov	r1, r4
 800ab28:	4653      	mov	r3, sl
 800ab2a:	2205      	movs	r2, #5
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	f000 fd4b 	bl	800b5c8 <__multadd>
 800ab32:	4601      	mov	r1, r0
 800ab34:	4604      	mov	r4, r0
 800ab36:	4628      	mov	r0, r5
 800ab38:	f000 ffb0 	bl	800ba9c <__mcmp>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	f73f adeb 	bgt.w	800a718 <_dtoa_r+0x428>
 800ab42:	9b08      	ldr	r3, [sp, #32]
 800ab44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ab48:	ea6f 0b03 	mvn.w	fp, r3
 800ab4c:	f04f 0900 	mov.w	r9, #0
 800ab50:	4621      	mov	r1, r4
 800ab52:	4630      	mov	r0, r6
 800ab54:	f000 fd16 	bl	800b584 <_Bfree>
 800ab58:	2f00      	cmp	r7, #0
 800ab5a:	f43f aea8 	beq.w	800a8ae <_dtoa_r+0x5be>
 800ab5e:	f1b9 0f00 	cmp.w	r9, #0
 800ab62:	d005      	beq.n	800ab70 <_dtoa_r+0x880>
 800ab64:	45b9      	cmp	r9, r7
 800ab66:	d003      	beq.n	800ab70 <_dtoa_r+0x880>
 800ab68:	4649      	mov	r1, r9
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	f000 fd0a 	bl	800b584 <_Bfree>
 800ab70:	4639      	mov	r1, r7
 800ab72:	4630      	mov	r0, r6
 800ab74:	f000 fd06 	bl	800b584 <_Bfree>
 800ab78:	e699      	b.n	800a8ae <_dtoa_r+0x5be>
 800ab7a:	2400      	movs	r4, #0
 800ab7c:	4627      	mov	r7, r4
 800ab7e:	e7e0      	b.n	800ab42 <_dtoa_r+0x852>
 800ab80:	46bb      	mov	fp, r7
 800ab82:	4604      	mov	r4, r0
 800ab84:	4607      	mov	r7, r0
 800ab86:	e5c7      	b.n	800a718 <_dtoa_r+0x428>
 800ab88:	9b07      	ldr	r3, [sp, #28]
 800ab8a:	46ca      	mov	sl, r9
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f000 8100 	beq.w	800ad92 <_dtoa_r+0xaa2>
 800ab92:	f1b8 0f00 	cmp.w	r8, #0
 800ab96:	dd05      	ble.n	800aba4 <_dtoa_r+0x8b4>
 800ab98:	4639      	mov	r1, r7
 800ab9a:	4642      	mov	r2, r8
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f000 ff0d 	bl	800b9bc <__lshift>
 800aba2:	4607      	mov	r7, r0
 800aba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d05d      	beq.n	800ac66 <_dtoa_r+0x976>
 800abaa:	6879      	ldr	r1, [r7, #4]
 800abac:	4630      	mov	r0, r6
 800abae:	f000 fca9 	bl	800b504 <_Balloc>
 800abb2:	4680      	mov	r8, r0
 800abb4:	b928      	cbnz	r0, 800abc2 <_dtoa_r+0x8d2>
 800abb6:	4b82      	ldr	r3, [pc, #520]	; (800adc0 <_dtoa_r+0xad0>)
 800abb8:	4602      	mov	r2, r0
 800abba:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abbe:	f7ff bbaf 	b.w	800a320 <_dtoa_r+0x30>
 800abc2:	693a      	ldr	r2, [r7, #16]
 800abc4:	3202      	adds	r2, #2
 800abc6:	0092      	lsls	r2, r2, #2
 800abc8:	f107 010c 	add.w	r1, r7, #12
 800abcc:	300c      	adds	r0, #12
 800abce:	f000 fc8b 	bl	800b4e8 <memcpy>
 800abd2:	2201      	movs	r2, #1
 800abd4:	4641      	mov	r1, r8
 800abd6:	4630      	mov	r0, r6
 800abd8:	f000 fef0 	bl	800b9bc <__lshift>
 800abdc:	9b01      	ldr	r3, [sp, #4]
 800abde:	3301      	adds	r3, #1
 800abe0:	9304      	str	r3, [sp, #16]
 800abe2:	9b01      	ldr	r3, [sp, #4]
 800abe4:	4453      	add	r3, sl
 800abe6:	9308      	str	r3, [sp, #32]
 800abe8:	9b02      	ldr	r3, [sp, #8]
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	46b9      	mov	r9, r7
 800abf0:	9307      	str	r3, [sp, #28]
 800abf2:	4607      	mov	r7, r0
 800abf4:	9b04      	ldr	r3, [sp, #16]
 800abf6:	4621      	mov	r1, r4
 800abf8:	3b01      	subs	r3, #1
 800abfa:	4628      	mov	r0, r5
 800abfc:	9302      	str	r3, [sp, #8]
 800abfe:	f7ff faeb 	bl	800a1d8 <quorem>
 800ac02:	4603      	mov	r3, r0
 800ac04:	3330      	adds	r3, #48	; 0x30
 800ac06:	9005      	str	r0, [sp, #20]
 800ac08:	4649      	mov	r1, r9
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac0e:	f000 ff45 	bl	800ba9c <__mcmp>
 800ac12:	463a      	mov	r2, r7
 800ac14:	4682      	mov	sl, r0
 800ac16:	4621      	mov	r1, r4
 800ac18:	4630      	mov	r0, r6
 800ac1a:	f000 ff5b 	bl	800bad4 <__mdiff>
 800ac1e:	68c2      	ldr	r2, [r0, #12]
 800ac20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac22:	4680      	mov	r8, r0
 800ac24:	bb0a      	cbnz	r2, 800ac6a <_dtoa_r+0x97a>
 800ac26:	4601      	mov	r1, r0
 800ac28:	4628      	mov	r0, r5
 800ac2a:	f000 ff37 	bl	800ba9c <__mcmp>
 800ac2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac30:	4602      	mov	r2, r0
 800ac32:	4641      	mov	r1, r8
 800ac34:	4630      	mov	r0, r6
 800ac36:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ac3a:	f000 fca3 	bl	800b584 <_Bfree>
 800ac3e:	9b06      	ldr	r3, [sp, #24]
 800ac40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac42:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ac46:	ea43 0102 	orr.w	r1, r3, r2
 800ac4a:	9b07      	ldr	r3, [sp, #28]
 800ac4c:	430b      	orrs	r3, r1
 800ac4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac50:	d10d      	bne.n	800ac6e <_dtoa_r+0x97e>
 800ac52:	2b39      	cmp	r3, #57	; 0x39
 800ac54:	d029      	beq.n	800acaa <_dtoa_r+0x9ba>
 800ac56:	f1ba 0f00 	cmp.w	sl, #0
 800ac5a:	dd01      	ble.n	800ac60 <_dtoa_r+0x970>
 800ac5c:	9b05      	ldr	r3, [sp, #20]
 800ac5e:	3331      	adds	r3, #49	; 0x31
 800ac60:	9a02      	ldr	r2, [sp, #8]
 800ac62:	7013      	strb	r3, [r2, #0]
 800ac64:	e774      	b.n	800ab50 <_dtoa_r+0x860>
 800ac66:	4638      	mov	r0, r7
 800ac68:	e7b8      	b.n	800abdc <_dtoa_r+0x8ec>
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	e7e1      	b.n	800ac32 <_dtoa_r+0x942>
 800ac6e:	f1ba 0f00 	cmp.w	sl, #0
 800ac72:	db06      	blt.n	800ac82 <_dtoa_r+0x992>
 800ac74:	9906      	ldr	r1, [sp, #24]
 800ac76:	ea41 0a0a 	orr.w	sl, r1, sl
 800ac7a:	9907      	ldr	r1, [sp, #28]
 800ac7c:	ea5a 0101 	orrs.w	r1, sl, r1
 800ac80:	d120      	bne.n	800acc4 <_dtoa_r+0x9d4>
 800ac82:	2a00      	cmp	r2, #0
 800ac84:	ddec      	ble.n	800ac60 <_dtoa_r+0x970>
 800ac86:	4629      	mov	r1, r5
 800ac88:	2201      	movs	r2, #1
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	9304      	str	r3, [sp, #16]
 800ac8e:	f000 fe95 	bl	800b9bc <__lshift>
 800ac92:	4621      	mov	r1, r4
 800ac94:	4605      	mov	r5, r0
 800ac96:	f000 ff01 	bl	800ba9c <__mcmp>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	9b04      	ldr	r3, [sp, #16]
 800ac9e:	dc02      	bgt.n	800aca6 <_dtoa_r+0x9b6>
 800aca0:	d1de      	bne.n	800ac60 <_dtoa_r+0x970>
 800aca2:	07da      	lsls	r2, r3, #31
 800aca4:	d5dc      	bpl.n	800ac60 <_dtoa_r+0x970>
 800aca6:	2b39      	cmp	r3, #57	; 0x39
 800aca8:	d1d8      	bne.n	800ac5c <_dtoa_r+0x96c>
 800acaa:	9a02      	ldr	r2, [sp, #8]
 800acac:	2339      	movs	r3, #57	; 0x39
 800acae:	7013      	strb	r3, [r2, #0]
 800acb0:	4643      	mov	r3, r8
 800acb2:	4698      	mov	r8, r3
 800acb4:	3b01      	subs	r3, #1
 800acb6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800acba:	2a39      	cmp	r2, #57	; 0x39
 800acbc:	d051      	beq.n	800ad62 <_dtoa_r+0xa72>
 800acbe:	3201      	adds	r2, #1
 800acc0:	701a      	strb	r2, [r3, #0]
 800acc2:	e745      	b.n	800ab50 <_dtoa_r+0x860>
 800acc4:	2a00      	cmp	r2, #0
 800acc6:	dd03      	ble.n	800acd0 <_dtoa_r+0x9e0>
 800acc8:	2b39      	cmp	r3, #57	; 0x39
 800acca:	d0ee      	beq.n	800acaa <_dtoa_r+0x9ba>
 800accc:	3301      	adds	r3, #1
 800acce:	e7c7      	b.n	800ac60 <_dtoa_r+0x970>
 800acd0:	9a04      	ldr	r2, [sp, #16]
 800acd2:	9908      	ldr	r1, [sp, #32]
 800acd4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800acd8:	428a      	cmp	r2, r1
 800acda:	d02b      	beq.n	800ad34 <_dtoa_r+0xa44>
 800acdc:	4629      	mov	r1, r5
 800acde:	2300      	movs	r3, #0
 800ace0:	220a      	movs	r2, #10
 800ace2:	4630      	mov	r0, r6
 800ace4:	f000 fc70 	bl	800b5c8 <__multadd>
 800ace8:	45b9      	cmp	r9, r7
 800acea:	4605      	mov	r5, r0
 800acec:	f04f 0300 	mov.w	r3, #0
 800acf0:	f04f 020a 	mov.w	r2, #10
 800acf4:	4649      	mov	r1, r9
 800acf6:	4630      	mov	r0, r6
 800acf8:	d107      	bne.n	800ad0a <_dtoa_r+0xa1a>
 800acfa:	f000 fc65 	bl	800b5c8 <__multadd>
 800acfe:	4681      	mov	r9, r0
 800ad00:	4607      	mov	r7, r0
 800ad02:	9b04      	ldr	r3, [sp, #16]
 800ad04:	3301      	adds	r3, #1
 800ad06:	9304      	str	r3, [sp, #16]
 800ad08:	e774      	b.n	800abf4 <_dtoa_r+0x904>
 800ad0a:	f000 fc5d 	bl	800b5c8 <__multadd>
 800ad0e:	4639      	mov	r1, r7
 800ad10:	4681      	mov	r9, r0
 800ad12:	2300      	movs	r3, #0
 800ad14:	220a      	movs	r2, #10
 800ad16:	4630      	mov	r0, r6
 800ad18:	f000 fc56 	bl	800b5c8 <__multadd>
 800ad1c:	4607      	mov	r7, r0
 800ad1e:	e7f0      	b.n	800ad02 <_dtoa_r+0xa12>
 800ad20:	f1ba 0f00 	cmp.w	sl, #0
 800ad24:	9a01      	ldr	r2, [sp, #4]
 800ad26:	bfcc      	ite	gt
 800ad28:	46d0      	movgt	r8, sl
 800ad2a:	f04f 0801 	movle.w	r8, #1
 800ad2e:	4490      	add	r8, r2
 800ad30:	f04f 0900 	mov.w	r9, #0
 800ad34:	4629      	mov	r1, r5
 800ad36:	2201      	movs	r2, #1
 800ad38:	4630      	mov	r0, r6
 800ad3a:	9302      	str	r3, [sp, #8]
 800ad3c:	f000 fe3e 	bl	800b9bc <__lshift>
 800ad40:	4621      	mov	r1, r4
 800ad42:	4605      	mov	r5, r0
 800ad44:	f000 feaa 	bl	800ba9c <__mcmp>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	dcb1      	bgt.n	800acb0 <_dtoa_r+0x9c0>
 800ad4c:	d102      	bne.n	800ad54 <_dtoa_r+0xa64>
 800ad4e:	9b02      	ldr	r3, [sp, #8]
 800ad50:	07db      	lsls	r3, r3, #31
 800ad52:	d4ad      	bmi.n	800acb0 <_dtoa_r+0x9c0>
 800ad54:	4643      	mov	r3, r8
 800ad56:	4698      	mov	r8, r3
 800ad58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad5c:	2a30      	cmp	r2, #48	; 0x30
 800ad5e:	d0fa      	beq.n	800ad56 <_dtoa_r+0xa66>
 800ad60:	e6f6      	b.n	800ab50 <_dtoa_r+0x860>
 800ad62:	9a01      	ldr	r2, [sp, #4]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d1a4      	bne.n	800acb2 <_dtoa_r+0x9c2>
 800ad68:	f10b 0b01 	add.w	fp, fp, #1
 800ad6c:	2331      	movs	r3, #49	; 0x31
 800ad6e:	e778      	b.n	800ac62 <_dtoa_r+0x972>
 800ad70:	4b14      	ldr	r3, [pc, #80]	; (800adc4 <_dtoa_r+0xad4>)
 800ad72:	f7ff bb27 	b.w	800a3c4 <_dtoa_r+0xd4>
 800ad76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f47f ab03 	bne.w	800a384 <_dtoa_r+0x94>
 800ad7e:	4b12      	ldr	r3, [pc, #72]	; (800adc8 <_dtoa_r+0xad8>)
 800ad80:	f7ff bb20 	b.w	800a3c4 <_dtoa_r+0xd4>
 800ad84:	f1ba 0f00 	cmp.w	sl, #0
 800ad88:	dc03      	bgt.n	800ad92 <_dtoa_r+0xaa2>
 800ad8a:	9b06      	ldr	r3, [sp, #24]
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	f73f aec7 	bgt.w	800ab20 <_dtoa_r+0x830>
 800ad92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad96:	4621      	mov	r1, r4
 800ad98:	4628      	mov	r0, r5
 800ad9a:	f7ff fa1d 	bl	800a1d8 <quorem>
 800ad9e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ada2:	f808 3b01 	strb.w	r3, [r8], #1
 800ada6:	9a01      	ldr	r2, [sp, #4]
 800ada8:	eba8 0202 	sub.w	r2, r8, r2
 800adac:	4592      	cmp	sl, r2
 800adae:	ddb7      	ble.n	800ad20 <_dtoa_r+0xa30>
 800adb0:	4629      	mov	r1, r5
 800adb2:	2300      	movs	r3, #0
 800adb4:	220a      	movs	r2, #10
 800adb6:	4630      	mov	r0, r6
 800adb8:	f000 fc06 	bl	800b5c8 <__multadd>
 800adbc:	4605      	mov	r5, r0
 800adbe:	e7ea      	b.n	800ad96 <_dtoa_r+0xaa6>
 800adc0:	0800e948 	.word	0x0800e948
 800adc4:	0800e748 	.word	0x0800e748
 800adc8:	0800e8c9 	.word	0x0800e8c9

0800adcc <rshift>:
 800adcc:	6903      	ldr	r3, [r0, #16]
 800adce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800add2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800add6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800adda:	f100 0414 	add.w	r4, r0, #20
 800adde:	dd45      	ble.n	800ae6c <rshift+0xa0>
 800ade0:	f011 011f 	ands.w	r1, r1, #31
 800ade4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ade8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800adec:	d10c      	bne.n	800ae08 <rshift+0x3c>
 800adee:	f100 0710 	add.w	r7, r0, #16
 800adf2:	4629      	mov	r1, r5
 800adf4:	42b1      	cmp	r1, r6
 800adf6:	d334      	bcc.n	800ae62 <rshift+0x96>
 800adf8:	1a9b      	subs	r3, r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	1eea      	subs	r2, r5, #3
 800adfe:	4296      	cmp	r6, r2
 800ae00:	bf38      	it	cc
 800ae02:	2300      	movcc	r3, #0
 800ae04:	4423      	add	r3, r4
 800ae06:	e015      	b.n	800ae34 <rshift+0x68>
 800ae08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae0c:	f1c1 0820 	rsb	r8, r1, #32
 800ae10:	40cf      	lsrs	r7, r1
 800ae12:	f105 0e04 	add.w	lr, r5, #4
 800ae16:	46a1      	mov	r9, r4
 800ae18:	4576      	cmp	r6, lr
 800ae1a:	46f4      	mov	ip, lr
 800ae1c:	d815      	bhi.n	800ae4a <rshift+0x7e>
 800ae1e:	1a9a      	subs	r2, r3, r2
 800ae20:	0092      	lsls	r2, r2, #2
 800ae22:	3a04      	subs	r2, #4
 800ae24:	3501      	adds	r5, #1
 800ae26:	42ae      	cmp	r6, r5
 800ae28:	bf38      	it	cc
 800ae2a:	2200      	movcc	r2, #0
 800ae2c:	18a3      	adds	r3, r4, r2
 800ae2e:	50a7      	str	r7, [r4, r2]
 800ae30:	b107      	cbz	r7, 800ae34 <rshift+0x68>
 800ae32:	3304      	adds	r3, #4
 800ae34:	1b1a      	subs	r2, r3, r4
 800ae36:	42a3      	cmp	r3, r4
 800ae38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae3c:	bf08      	it	eq
 800ae3e:	2300      	moveq	r3, #0
 800ae40:	6102      	str	r2, [r0, #16]
 800ae42:	bf08      	it	eq
 800ae44:	6143      	streq	r3, [r0, #20]
 800ae46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae4a:	f8dc c000 	ldr.w	ip, [ip]
 800ae4e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae52:	ea4c 0707 	orr.w	r7, ip, r7
 800ae56:	f849 7b04 	str.w	r7, [r9], #4
 800ae5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae5e:	40cf      	lsrs	r7, r1
 800ae60:	e7da      	b.n	800ae18 <rshift+0x4c>
 800ae62:	f851 cb04 	ldr.w	ip, [r1], #4
 800ae66:	f847 cf04 	str.w	ip, [r7, #4]!
 800ae6a:	e7c3      	b.n	800adf4 <rshift+0x28>
 800ae6c:	4623      	mov	r3, r4
 800ae6e:	e7e1      	b.n	800ae34 <rshift+0x68>

0800ae70 <__hexdig_fun>:
 800ae70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ae74:	2b09      	cmp	r3, #9
 800ae76:	d802      	bhi.n	800ae7e <__hexdig_fun+0xe>
 800ae78:	3820      	subs	r0, #32
 800ae7a:	b2c0      	uxtb	r0, r0
 800ae7c:	4770      	bx	lr
 800ae7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d801      	bhi.n	800ae8a <__hexdig_fun+0x1a>
 800ae86:	3847      	subs	r0, #71	; 0x47
 800ae88:	e7f7      	b.n	800ae7a <__hexdig_fun+0xa>
 800ae8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ae8e:	2b05      	cmp	r3, #5
 800ae90:	d801      	bhi.n	800ae96 <__hexdig_fun+0x26>
 800ae92:	3827      	subs	r0, #39	; 0x27
 800ae94:	e7f1      	b.n	800ae7a <__hexdig_fun+0xa>
 800ae96:	2000      	movs	r0, #0
 800ae98:	4770      	bx	lr
	...

0800ae9c <__gethex>:
 800ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea0:	ed2d 8b02 	vpush	{d8}
 800aea4:	b089      	sub	sp, #36	; 0x24
 800aea6:	ee08 0a10 	vmov	s16, r0
 800aeaa:	9304      	str	r3, [sp, #16]
 800aeac:	4bb4      	ldr	r3, [pc, #720]	; (800b180 <__gethex+0x2e4>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	9301      	str	r3, [sp, #4]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	468b      	mov	fp, r1
 800aeb6:	4690      	mov	r8, r2
 800aeb8:	f7f5 fa12 	bl	80002e0 <strlen>
 800aebc:	9b01      	ldr	r3, [sp, #4]
 800aebe:	f8db 2000 	ldr.w	r2, [fp]
 800aec2:	4403      	add	r3, r0
 800aec4:	4682      	mov	sl, r0
 800aec6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aeca:	9305      	str	r3, [sp, #20]
 800aecc:	1c93      	adds	r3, r2, #2
 800aece:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aed2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aed6:	32fe      	adds	r2, #254	; 0xfe
 800aed8:	18d1      	adds	r1, r2, r3
 800aeda:	461f      	mov	r7, r3
 800aedc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aee0:	9100      	str	r1, [sp, #0]
 800aee2:	2830      	cmp	r0, #48	; 0x30
 800aee4:	d0f8      	beq.n	800aed8 <__gethex+0x3c>
 800aee6:	f7ff ffc3 	bl	800ae70 <__hexdig_fun>
 800aeea:	4604      	mov	r4, r0
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d13a      	bne.n	800af66 <__gethex+0xca>
 800aef0:	9901      	ldr	r1, [sp, #4]
 800aef2:	4652      	mov	r2, sl
 800aef4:	4638      	mov	r0, r7
 800aef6:	f001 fa2f 	bl	800c358 <strncmp>
 800aefa:	4605      	mov	r5, r0
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d168      	bne.n	800afd2 <__gethex+0x136>
 800af00:	f817 000a 	ldrb.w	r0, [r7, sl]
 800af04:	eb07 060a 	add.w	r6, r7, sl
 800af08:	f7ff ffb2 	bl	800ae70 <__hexdig_fun>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d062      	beq.n	800afd6 <__gethex+0x13a>
 800af10:	4633      	mov	r3, r6
 800af12:	7818      	ldrb	r0, [r3, #0]
 800af14:	2830      	cmp	r0, #48	; 0x30
 800af16:	461f      	mov	r7, r3
 800af18:	f103 0301 	add.w	r3, r3, #1
 800af1c:	d0f9      	beq.n	800af12 <__gethex+0x76>
 800af1e:	f7ff ffa7 	bl	800ae70 <__hexdig_fun>
 800af22:	2301      	movs	r3, #1
 800af24:	fab0 f480 	clz	r4, r0
 800af28:	0964      	lsrs	r4, r4, #5
 800af2a:	4635      	mov	r5, r6
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	463a      	mov	r2, r7
 800af30:	4616      	mov	r6, r2
 800af32:	3201      	adds	r2, #1
 800af34:	7830      	ldrb	r0, [r6, #0]
 800af36:	f7ff ff9b 	bl	800ae70 <__hexdig_fun>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d1f8      	bne.n	800af30 <__gethex+0x94>
 800af3e:	9901      	ldr	r1, [sp, #4]
 800af40:	4652      	mov	r2, sl
 800af42:	4630      	mov	r0, r6
 800af44:	f001 fa08 	bl	800c358 <strncmp>
 800af48:	b980      	cbnz	r0, 800af6c <__gethex+0xd0>
 800af4a:	b94d      	cbnz	r5, 800af60 <__gethex+0xc4>
 800af4c:	eb06 050a 	add.w	r5, r6, sl
 800af50:	462a      	mov	r2, r5
 800af52:	4616      	mov	r6, r2
 800af54:	3201      	adds	r2, #1
 800af56:	7830      	ldrb	r0, [r6, #0]
 800af58:	f7ff ff8a 	bl	800ae70 <__hexdig_fun>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d1f8      	bne.n	800af52 <__gethex+0xb6>
 800af60:	1bad      	subs	r5, r5, r6
 800af62:	00ad      	lsls	r5, r5, #2
 800af64:	e004      	b.n	800af70 <__gethex+0xd4>
 800af66:	2400      	movs	r4, #0
 800af68:	4625      	mov	r5, r4
 800af6a:	e7e0      	b.n	800af2e <__gethex+0x92>
 800af6c:	2d00      	cmp	r5, #0
 800af6e:	d1f7      	bne.n	800af60 <__gethex+0xc4>
 800af70:	7833      	ldrb	r3, [r6, #0]
 800af72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800af76:	2b50      	cmp	r3, #80	; 0x50
 800af78:	d13b      	bne.n	800aff2 <__gethex+0x156>
 800af7a:	7873      	ldrb	r3, [r6, #1]
 800af7c:	2b2b      	cmp	r3, #43	; 0x2b
 800af7e:	d02c      	beq.n	800afda <__gethex+0x13e>
 800af80:	2b2d      	cmp	r3, #45	; 0x2d
 800af82:	d02e      	beq.n	800afe2 <__gethex+0x146>
 800af84:	1c71      	adds	r1, r6, #1
 800af86:	f04f 0900 	mov.w	r9, #0
 800af8a:	7808      	ldrb	r0, [r1, #0]
 800af8c:	f7ff ff70 	bl	800ae70 <__hexdig_fun>
 800af90:	1e43      	subs	r3, r0, #1
 800af92:	b2db      	uxtb	r3, r3
 800af94:	2b18      	cmp	r3, #24
 800af96:	d82c      	bhi.n	800aff2 <__gethex+0x156>
 800af98:	f1a0 0210 	sub.w	r2, r0, #16
 800af9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800afa0:	f7ff ff66 	bl	800ae70 <__hexdig_fun>
 800afa4:	1e43      	subs	r3, r0, #1
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	2b18      	cmp	r3, #24
 800afaa:	d91d      	bls.n	800afe8 <__gethex+0x14c>
 800afac:	f1b9 0f00 	cmp.w	r9, #0
 800afb0:	d000      	beq.n	800afb4 <__gethex+0x118>
 800afb2:	4252      	negs	r2, r2
 800afb4:	4415      	add	r5, r2
 800afb6:	f8cb 1000 	str.w	r1, [fp]
 800afba:	b1e4      	cbz	r4, 800aff6 <__gethex+0x15a>
 800afbc:	9b00      	ldr	r3, [sp, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	bf14      	ite	ne
 800afc2:	2700      	movne	r7, #0
 800afc4:	2706      	moveq	r7, #6
 800afc6:	4638      	mov	r0, r7
 800afc8:	b009      	add	sp, #36	; 0x24
 800afca:	ecbd 8b02 	vpop	{d8}
 800afce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd2:	463e      	mov	r6, r7
 800afd4:	4625      	mov	r5, r4
 800afd6:	2401      	movs	r4, #1
 800afd8:	e7ca      	b.n	800af70 <__gethex+0xd4>
 800afda:	f04f 0900 	mov.w	r9, #0
 800afde:	1cb1      	adds	r1, r6, #2
 800afe0:	e7d3      	b.n	800af8a <__gethex+0xee>
 800afe2:	f04f 0901 	mov.w	r9, #1
 800afe6:	e7fa      	b.n	800afde <__gethex+0x142>
 800afe8:	230a      	movs	r3, #10
 800afea:	fb03 0202 	mla	r2, r3, r2, r0
 800afee:	3a10      	subs	r2, #16
 800aff0:	e7d4      	b.n	800af9c <__gethex+0x100>
 800aff2:	4631      	mov	r1, r6
 800aff4:	e7df      	b.n	800afb6 <__gethex+0x11a>
 800aff6:	1bf3      	subs	r3, r6, r7
 800aff8:	3b01      	subs	r3, #1
 800affa:	4621      	mov	r1, r4
 800affc:	2b07      	cmp	r3, #7
 800affe:	dc0b      	bgt.n	800b018 <__gethex+0x17c>
 800b000:	ee18 0a10 	vmov	r0, s16
 800b004:	f000 fa7e 	bl	800b504 <_Balloc>
 800b008:	4604      	mov	r4, r0
 800b00a:	b940      	cbnz	r0, 800b01e <__gethex+0x182>
 800b00c:	4b5d      	ldr	r3, [pc, #372]	; (800b184 <__gethex+0x2e8>)
 800b00e:	4602      	mov	r2, r0
 800b010:	21de      	movs	r1, #222	; 0xde
 800b012:	485d      	ldr	r0, [pc, #372]	; (800b188 <__gethex+0x2ec>)
 800b014:	f001 f9c2 	bl	800c39c <__assert_func>
 800b018:	3101      	adds	r1, #1
 800b01a:	105b      	asrs	r3, r3, #1
 800b01c:	e7ee      	b.n	800affc <__gethex+0x160>
 800b01e:	f100 0914 	add.w	r9, r0, #20
 800b022:	f04f 0b00 	mov.w	fp, #0
 800b026:	f1ca 0301 	rsb	r3, sl, #1
 800b02a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b02e:	f8cd b000 	str.w	fp, [sp]
 800b032:	9306      	str	r3, [sp, #24]
 800b034:	42b7      	cmp	r7, r6
 800b036:	d340      	bcc.n	800b0ba <__gethex+0x21e>
 800b038:	9802      	ldr	r0, [sp, #8]
 800b03a:	9b00      	ldr	r3, [sp, #0]
 800b03c:	f840 3b04 	str.w	r3, [r0], #4
 800b040:	eba0 0009 	sub.w	r0, r0, r9
 800b044:	1080      	asrs	r0, r0, #2
 800b046:	0146      	lsls	r6, r0, #5
 800b048:	6120      	str	r0, [r4, #16]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 fb4c 	bl	800b6e8 <__hi0bits>
 800b050:	1a30      	subs	r0, r6, r0
 800b052:	f8d8 6000 	ldr.w	r6, [r8]
 800b056:	42b0      	cmp	r0, r6
 800b058:	dd63      	ble.n	800b122 <__gethex+0x286>
 800b05a:	1b87      	subs	r7, r0, r6
 800b05c:	4639      	mov	r1, r7
 800b05e:	4620      	mov	r0, r4
 800b060:	f000 feed 	bl	800be3e <__any_on>
 800b064:	4682      	mov	sl, r0
 800b066:	b1a8      	cbz	r0, 800b094 <__gethex+0x1f8>
 800b068:	1e7b      	subs	r3, r7, #1
 800b06a:	1159      	asrs	r1, r3, #5
 800b06c:	f003 021f 	and.w	r2, r3, #31
 800b070:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b074:	f04f 0a01 	mov.w	sl, #1
 800b078:	fa0a f202 	lsl.w	r2, sl, r2
 800b07c:	420a      	tst	r2, r1
 800b07e:	d009      	beq.n	800b094 <__gethex+0x1f8>
 800b080:	4553      	cmp	r3, sl
 800b082:	dd05      	ble.n	800b090 <__gethex+0x1f4>
 800b084:	1eb9      	subs	r1, r7, #2
 800b086:	4620      	mov	r0, r4
 800b088:	f000 fed9 	bl	800be3e <__any_on>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d145      	bne.n	800b11c <__gethex+0x280>
 800b090:	f04f 0a02 	mov.w	sl, #2
 800b094:	4639      	mov	r1, r7
 800b096:	4620      	mov	r0, r4
 800b098:	f7ff fe98 	bl	800adcc <rshift>
 800b09c:	443d      	add	r5, r7
 800b09e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0a2:	42ab      	cmp	r3, r5
 800b0a4:	da4c      	bge.n	800b140 <__gethex+0x2a4>
 800b0a6:	ee18 0a10 	vmov	r0, s16
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	f000 fa6a 	bl	800b584 <_Bfree>
 800b0b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	6013      	str	r3, [r2, #0]
 800b0b6:	27a3      	movs	r7, #163	; 0xa3
 800b0b8:	e785      	b.n	800afc6 <__gethex+0x12a>
 800b0ba:	1e73      	subs	r3, r6, #1
 800b0bc:	9a05      	ldr	r2, [sp, #20]
 800b0be:	9303      	str	r3, [sp, #12]
 800b0c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d019      	beq.n	800b0fc <__gethex+0x260>
 800b0c8:	f1bb 0f20 	cmp.w	fp, #32
 800b0cc:	d107      	bne.n	800b0de <__gethex+0x242>
 800b0ce:	9b02      	ldr	r3, [sp, #8]
 800b0d0:	9a00      	ldr	r2, [sp, #0]
 800b0d2:	f843 2b04 	str.w	r2, [r3], #4
 800b0d6:	9302      	str	r3, [sp, #8]
 800b0d8:	2300      	movs	r3, #0
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	469b      	mov	fp, r3
 800b0de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b0e2:	f7ff fec5 	bl	800ae70 <__hexdig_fun>
 800b0e6:	9b00      	ldr	r3, [sp, #0]
 800b0e8:	f000 000f 	and.w	r0, r0, #15
 800b0ec:	fa00 f00b 	lsl.w	r0, r0, fp
 800b0f0:	4303      	orrs	r3, r0
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	f10b 0b04 	add.w	fp, fp, #4
 800b0f8:	9b03      	ldr	r3, [sp, #12]
 800b0fa:	e00d      	b.n	800b118 <__gethex+0x27c>
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	9a06      	ldr	r2, [sp, #24]
 800b100:	4413      	add	r3, r2
 800b102:	42bb      	cmp	r3, r7
 800b104:	d3e0      	bcc.n	800b0c8 <__gethex+0x22c>
 800b106:	4618      	mov	r0, r3
 800b108:	9901      	ldr	r1, [sp, #4]
 800b10a:	9307      	str	r3, [sp, #28]
 800b10c:	4652      	mov	r2, sl
 800b10e:	f001 f923 	bl	800c358 <strncmp>
 800b112:	9b07      	ldr	r3, [sp, #28]
 800b114:	2800      	cmp	r0, #0
 800b116:	d1d7      	bne.n	800b0c8 <__gethex+0x22c>
 800b118:	461e      	mov	r6, r3
 800b11a:	e78b      	b.n	800b034 <__gethex+0x198>
 800b11c:	f04f 0a03 	mov.w	sl, #3
 800b120:	e7b8      	b.n	800b094 <__gethex+0x1f8>
 800b122:	da0a      	bge.n	800b13a <__gethex+0x29e>
 800b124:	1a37      	subs	r7, r6, r0
 800b126:	4621      	mov	r1, r4
 800b128:	ee18 0a10 	vmov	r0, s16
 800b12c:	463a      	mov	r2, r7
 800b12e:	f000 fc45 	bl	800b9bc <__lshift>
 800b132:	1bed      	subs	r5, r5, r7
 800b134:	4604      	mov	r4, r0
 800b136:	f100 0914 	add.w	r9, r0, #20
 800b13a:	f04f 0a00 	mov.w	sl, #0
 800b13e:	e7ae      	b.n	800b09e <__gethex+0x202>
 800b140:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b144:	42a8      	cmp	r0, r5
 800b146:	dd72      	ble.n	800b22e <__gethex+0x392>
 800b148:	1b45      	subs	r5, r0, r5
 800b14a:	42ae      	cmp	r6, r5
 800b14c:	dc36      	bgt.n	800b1bc <__gethex+0x320>
 800b14e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b152:	2b02      	cmp	r3, #2
 800b154:	d02a      	beq.n	800b1ac <__gethex+0x310>
 800b156:	2b03      	cmp	r3, #3
 800b158:	d02c      	beq.n	800b1b4 <__gethex+0x318>
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d11c      	bne.n	800b198 <__gethex+0x2fc>
 800b15e:	42ae      	cmp	r6, r5
 800b160:	d11a      	bne.n	800b198 <__gethex+0x2fc>
 800b162:	2e01      	cmp	r6, #1
 800b164:	d112      	bne.n	800b18c <__gethex+0x2f0>
 800b166:	9a04      	ldr	r2, [sp, #16]
 800b168:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b16c:	6013      	str	r3, [r2, #0]
 800b16e:	2301      	movs	r3, #1
 800b170:	6123      	str	r3, [r4, #16]
 800b172:	f8c9 3000 	str.w	r3, [r9]
 800b176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b178:	2762      	movs	r7, #98	; 0x62
 800b17a:	601c      	str	r4, [r3, #0]
 800b17c:	e723      	b.n	800afc6 <__gethex+0x12a>
 800b17e:	bf00      	nop
 800b180:	0800e9c0 	.word	0x0800e9c0
 800b184:	0800e948 	.word	0x0800e948
 800b188:	0800e959 	.word	0x0800e959
 800b18c:	1e71      	subs	r1, r6, #1
 800b18e:	4620      	mov	r0, r4
 800b190:	f000 fe55 	bl	800be3e <__any_on>
 800b194:	2800      	cmp	r0, #0
 800b196:	d1e6      	bne.n	800b166 <__gethex+0x2ca>
 800b198:	ee18 0a10 	vmov	r0, s16
 800b19c:	4621      	mov	r1, r4
 800b19e:	f000 f9f1 	bl	800b584 <_Bfree>
 800b1a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	6013      	str	r3, [r2, #0]
 800b1a8:	2750      	movs	r7, #80	; 0x50
 800b1aa:	e70c      	b.n	800afc6 <__gethex+0x12a>
 800b1ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d1f2      	bne.n	800b198 <__gethex+0x2fc>
 800b1b2:	e7d8      	b.n	800b166 <__gethex+0x2ca>
 800b1b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1d5      	bne.n	800b166 <__gethex+0x2ca>
 800b1ba:	e7ed      	b.n	800b198 <__gethex+0x2fc>
 800b1bc:	1e6f      	subs	r7, r5, #1
 800b1be:	f1ba 0f00 	cmp.w	sl, #0
 800b1c2:	d131      	bne.n	800b228 <__gethex+0x38c>
 800b1c4:	b127      	cbz	r7, 800b1d0 <__gethex+0x334>
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f000 fe38 	bl	800be3e <__any_on>
 800b1ce:	4682      	mov	sl, r0
 800b1d0:	117b      	asrs	r3, r7, #5
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b1d8:	f007 071f 	and.w	r7, r7, #31
 800b1dc:	fa01 f707 	lsl.w	r7, r1, r7
 800b1e0:	421f      	tst	r7, r3
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	bf18      	it	ne
 800b1e8:	f04a 0a02 	orrne.w	sl, sl, #2
 800b1ec:	1b76      	subs	r6, r6, r5
 800b1ee:	f7ff fded 	bl	800adcc <rshift>
 800b1f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b1f6:	2702      	movs	r7, #2
 800b1f8:	f1ba 0f00 	cmp.w	sl, #0
 800b1fc:	d048      	beq.n	800b290 <__gethex+0x3f4>
 800b1fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b202:	2b02      	cmp	r3, #2
 800b204:	d015      	beq.n	800b232 <__gethex+0x396>
 800b206:	2b03      	cmp	r3, #3
 800b208:	d017      	beq.n	800b23a <__gethex+0x39e>
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d109      	bne.n	800b222 <__gethex+0x386>
 800b20e:	f01a 0f02 	tst.w	sl, #2
 800b212:	d006      	beq.n	800b222 <__gethex+0x386>
 800b214:	f8d9 0000 	ldr.w	r0, [r9]
 800b218:	ea4a 0a00 	orr.w	sl, sl, r0
 800b21c:	f01a 0f01 	tst.w	sl, #1
 800b220:	d10e      	bne.n	800b240 <__gethex+0x3a4>
 800b222:	f047 0710 	orr.w	r7, r7, #16
 800b226:	e033      	b.n	800b290 <__gethex+0x3f4>
 800b228:	f04f 0a01 	mov.w	sl, #1
 800b22c:	e7d0      	b.n	800b1d0 <__gethex+0x334>
 800b22e:	2701      	movs	r7, #1
 800b230:	e7e2      	b.n	800b1f8 <__gethex+0x35c>
 800b232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b234:	f1c3 0301 	rsb	r3, r3, #1
 800b238:	9315      	str	r3, [sp, #84]	; 0x54
 800b23a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d0f0      	beq.n	800b222 <__gethex+0x386>
 800b240:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b244:	f104 0314 	add.w	r3, r4, #20
 800b248:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b24c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b250:	f04f 0c00 	mov.w	ip, #0
 800b254:	4618      	mov	r0, r3
 800b256:	f853 2b04 	ldr.w	r2, [r3], #4
 800b25a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b25e:	d01c      	beq.n	800b29a <__gethex+0x3fe>
 800b260:	3201      	adds	r2, #1
 800b262:	6002      	str	r2, [r0, #0]
 800b264:	2f02      	cmp	r7, #2
 800b266:	f104 0314 	add.w	r3, r4, #20
 800b26a:	d13f      	bne.n	800b2ec <__gethex+0x450>
 800b26c:	f8d8 2000 	ldr.w	r2, [r8]
 800b270:	3a01      	subs	r2, #1
 800b272:	42b2      	cmp	r2, r6
 800b274:	d10a      	bne.n	800b28c <__gethex+0x3f0>
 800b276:	1171      	asrs	r1, r6, #5
 800b278:	2201      	movs	r2, #1
 800b27a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b27e:	f006 061f 	and.w	r6, r6, #31
 800b282:	fa02 f606 	lsl.w	r6, r2, r6
 800b286:	421e      	tst	r6, r3
 800b288:	bf18      	it	ne
 800b28a:	4617      	movne	r7, r2
 800b28c:	f047 0720 	orr.w	r7, r7, #32
 800b290:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b292:	601c      	str	r4, [r3, #0]
 800b294:	9b04      	ldr	r3, [sp, #16]
 800b296:	601d      	str	r5, [r3, #0]
 800b298:	e695      	b.n	800afc6 <__gethex+0x12a>
 800b29a:	4299      	cmp	r1, r3
 800b29c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b2a0:	d8d8      	bhi.n	800b254 <__gethex+0x3b8>
 800b2a2:	68a3      	ldr	r3, [r4, #8]
 800b2a4:	459b      	cmp	fp, r3
 800b2a6:	db19      	blt.n	800b2dc <__gethex+0x440>
 800b2a8:	6861      	ldr	r1, [r4, #4]
 800b2aa:	ee18 0a10 	vmov	r0, s16
 800b2ae:	3101      	adds	r1, #1
 800b2b0:	f000 f928 	bl	800b504 <_Balloc>
 800b2b4:	4681      	mov	r9, r0
 800b2b6:	b918      	cbnz	r0, 800b2c0 <__gethex+0x424>
 800b2b8:	4b1a      	ldr	r3, [pc, #104]	; (800b324 <__gethex+0x488>)
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	2184      	movs	r1, #132	; 0x84
 800b2be:	e6a8      	b.n	800b012 <__gethex+0x176>
 800b2c0:	6922      	ldr	r2, [r4, #16]
 800b2c2:	3202      	adds	r2, #2
 800b2c4:	f104 010c 	add.w	r1, r4, #12
 800b2c8:	0092      	lsls	r2, r2, #2
 800b2ca:	300c      	adds	r0, #12
 800b2cc:	f000 f90c 	bl	800b4e8 <memcpy>
 800b2d0:	4621      	mov	r1, r4
 800b2d2:	ee18 0a10 	vmov	r0, s16
 800b2d6:	f000 f955 	bl	800b584 <_Bfree>
 800b2da:	464c      	mov	r4, r9
 800b2dc:	6923      	ldr	r3, [r4, #16]
 800b2de:	1c5a      	adds	r2, r3, #1
 800b2e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2e4:	6122      	str	r2, [r4, #16]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	615a      	str	r2, [r3, #20]
 800b2ea:	e7bb      	b.n	800b264 <__gethex+0x3c8>
 800b2ec:	6922      	ldr	r2, [r4, #16]
 800b2ee:	455a      	cmp	r2, fp
 800b2f0:	dd0b      	ble.n	800b30a <__gethex+0x46e>
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	f7ff fd69 	bl	800adcc <rshift>
 800b2fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2fe:	3501      	adds	r5, #1
 800b300:	42ab      	cmp	r3, r5
 800b302:	f6ff aed0 	blt.w	800b0a6 <__gethex+0x20a>
 800b306:	2701      	movs	r7, #1
 800b308:	e7c0      	b.n	800b28c <__gethex+0x3f0>
 800b30a:	f016 061f 	ands.w	r6, r6, #31
 800b30e:	d0fa      	beq.n	800b306 <__gethex+0x46a>
 800b310:	4453      	add	r3, sl
 800b312:	f1c6 0620 	rsb	r6, r6, #32
 800b316:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b31a:	f000 f9e5 	bl	800b6e8 <__hi0bits>
 800b31e:	42b0      	cmp	r0, r6
 800b320:	dbe7      	blt.n	800b2f2 <__gethex+0x456>
 800b322:	e7f0      	b.n	800b306 <__gethex+0x46a>
 800b324:	0800e948 	.word	0x0800e948

0800b328 <L_shift>:
 800b328:	f1c2 0208 	rsb	r2, r2, #8
 800b32c:	0092      	lsls	r2, r2, #2
 800b32e:	b570      	push	{r4, r5, r6, lr}
 800b330:	f1c2 0620 	rsb	r6, r2, #32
 800b334:	6843      	ldr	r3, [r0, #4]
 800b336:	6804      	ldr	r4, [r0, #0]
 800b338:	fa03 f506 	lsl.w	r5, r3, r6
 800b33c:	432c      	orrs	r4, r5
 800b33e:	40d3      	lsrs	r3, r2
 800b340:	6004      	str	r4, [r0, #0]
 800b342:	f840 3f04 	str.w	r3, [r0, #4]!
 800b346:	4288      	cmp	r0, r1
 800b348:	d3f4      	bcc.n	800b334 <L_shift+0xc>
 800b34a:	bd70      	pop	{r4, r5, r6, pc}

0800b34c <__match>:
 800b34c:	b530      	push	{r4, r5, lr}
 800b34e:	6803      	ldr	r3, [r0, #0]
 800b350:	3301      	adds	r3, #1
 800b352:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b356:	b914      	cbnz	r4, 800b35e <__match+0x12>
 800b358:	6003      	str	r3, [r0, #0]
 800b35a:	2001      	movs	r0, #1
 800b35c:	bd30      	pop	{r4, r5, pc}
 800b35e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b362:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b366:	2d19      	cmp	r5, #25
 800b368:	bf98      	it	ls
 800b36a:	3220      	addls	r2, #32
 800b36c:	42a2      	cmp	r2, r4
 800b36e:	d0f0      	beq.n	800b352 <__match+0x6>
 800b370:	2000      	movs	r0, #0
 800b372:	e7f3      	b.n	800b35c <__match+0x10>

0800b374 <__hexnan>:
 800b374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b378:	680b      	ldr	r3, [r1, #0]
 800b37a:	115e      	asrs	r6, r3, #5
 800b37c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b380:	f013 031f 	ands.w	r3, r3, #31
 800b384:	b087      	sub	sp, #28
 800b386:	bf18      	it	ne
 800b388:	3604      	addne	r6, #4
 800b38a:	2500      	movs	r5, #0
 800b38c:	1f37      	subs	r7, r6, #4
 800b38e:	4690      	mov	r8, r2
 800b390:	6802      	ldr	r2, [r0, #0]
 800b392:	9301      	str	r3, [sp, #4]
 800b394:	4682      	mov	sl, r0
 800b396:	f846 5c04 	str.w	r5, [r6, #-4]
 800b39a:	46b9      	mov	r9, r7
 800b39c:	463c      	mov	r4, r7
 800b39e:	9502      	str	r5, [sp, #8]
 800b3a0:	46ab      	mov	fp, r5
 800b3a2:	7851      	ldrb	r1, [r2, #1]
 800b3a4:	1c53      	adds	r3, r2, #1
 800b3a6:	9303      	str	r3, [sp, #12]
 800b3a8:	b341      	cbz	r1, 800b3fc <__hexnan+0x88>
 800b3aa:	4608      	mov	r0, r1
 800b3ac:	9205      	str	r2, [sp, #20]
 800b3ae:	9104      	str	r1, [sp, #16]
 800b3b0:	f7ff fd5e 	bl	800ae70 <__hexdig_fun>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d14f      	bne.n	800b458 <__hexnan+0xe4>
 800b3b8:	9904      	ldr	r1, [sp, #16]
 800b3ba:	9a05      	ldr	r2, [sp, #20]
 800b3bc:	2920      	cmp	r1, #32
 800b3be:	d818      	bhi.n	800b3f2 <__hexnan+0x7e>
 800b3c0:	9b02      	ldr	r3, [sp, #8]
 800b3c2:	459b      	cmp	fp, r3
 800b3c4:	dd13      	ble.n	800b3ee <__hexnan+0x7a>
 800b3c6:	454c      	cmp	r4, r9
 800b3c8:	d206      	bcs.n	800b3d8 <__hexnan+0x64>
 800b3ca:	2d07      	cmp	r5, #7
 800b3cc:	dc04      	bgt.n	800b3d8 <__hexnan+0x64>
 800b3ce:	462a      	mov	r2, r5
 800b3d0:	4649      	mov	r1, r9
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f7ff ffa8 	bl	800b328 <L_shift>
 800b3d8:	4544      	cmp	r4, r8
 800b3da:	d950      	bls.n	800b47e <__hexnan+0x10a>
 800b3dc:	2300      	movs	r3, #0
 800b3de:	f1a4 0904 	sub.w	r9, r4, #4
 800b3e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3e6:	f8cd b008 	str.w	fp, [sp, #8]
 800b3ea:	464c      	mov	r4, r9
 800b3ec:	461d      	mov	r5, r3
 800b3ee:	9a03      	ldr	r2, [sp, #12]
 800b3f0:	e7d7      	b.n	800b3a2 <__hexnan+0x2e>
 800b3f2:	2929      	cmp	r1, #41	; 0x29
 800b3f4:	d156      	bne.n	800b4a4 <__hexnan+0x130>
 800b3f6:	3202      	adds	r2, #2
 800b3f8:	f8ca 2000 	str.w	r2, [sl]
 800b3fc:	f1bb 0f00 	cmp.w	fp, #0
 800b400:	d050      	beq.n	800b4a4 <__hexnan+0x130>
 800b402:	454c      	cmp	r4, r9
 800b404:	d206      	bcs.n	800b414 <__hexnan+0xa0>
 800b406:	2d07      	cmp	r5, #7
 800b408:	dc04      	bgt.n	800b414 <__hexnan+0xa0>
 800b40a:	462a      	mov	r2, r5
 800b40c:	4649      	mov	r1, r9
 800b40e:	4620      	mov	r0, r4
 800b410:	f7ff ff8a 	bl	800b328 <L_shift>
 800b414:	4544      	cmp	r4, r8
 800b416:	d934      	bls.n	800b482 <__hexnan+0x10e>
 800b418:	f1a8 0204 	sub.w	r2, r8, #4
 800b41c:	4623      	mov	r3, r4
 800b41e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b422:	f842 1f04 	str.w	r1, [r2, #4]!
 800b426:	429f      	cmp	r7, r3
 800b428:	d2f9      	bcs.n	800b41e <__hexnan+0xaa>
 800b42a:	1b3b      	subs	r3, r7, r4
 800b42c:	f023 0303 	bic.w	r3, r3, #3
 800b430:	3304      	adds	r3, #4
 800b432:	3401      	adds	r4, #1
 800b434:	3e03      	subs	r6, #3
 800b436:	42b4      	cmp	r4, r6
 800b438:	bf88      	it	hi
 800b43a:	2304      	movhi	r3, #4
 800b43c:	4443      	add	r3, r8
 800b43e:	2200      	movs	r2, #0
 800b440:	f843 2b04 	str.w	r2, [r3], #4
 800b444:	429f      	cmp	r7, r3
 800b446:	d2fb      	bcs.n	800b440 <__hexnan+0xcc>
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	b91b      	cbnz	r3, 800b454 <__hexnan+0xe0>
 800b44c:	4547      	cmp	r7, r8
 800b44e:	d127      	bne.n	800b4a0 <__hexnan+0x12c>
 800b450:	2301      	movs	r3, #1
 800b452:	603b      	str	r3, [r7, #0]
 800b454:	2005      	movs	r0, #5
 800b456:	e026      	b.n	800b4a6 <__hexnan+0x132>
 800b458:	3501      	adds	r5, #1
 800b45a:	2d08      	cmp	r5, #8
 800b45c:	f10b 0b01 	add.w	fp, fp, #1
 800b460:	dd06      	ble.n	800b470 <__hexnan+0xfc>
 800b462:	4544      	cmp	r4, r8
 800b464:	d9c3      	bls.n	800b3ee <__hexnan+0x7a>
 800b466:	2300      	movs	r3, #0
 800b468:	f844 3c04 	str.w	r3, [r4, #-4]
 800b46c:	2501      	movs	r5, #1
 800b46e:	3c04      	subs	r4, #4
 800b470:	6822      	ldr	r2, [r4, #0]
 800b472:	f000 000f 	and.w	r0, r0, #15
 800b476:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b47a:	6022      	str	r2, [r4, #0]
 800b47c:	e7b7      	b.n	800b3ee <__hexnan+0x7a>
 800b47e:	2508      	movs	r5, #8
 800b480:	e7b5      	b.n	800b3ee <__hexnan+0x7a>
 800b482:	9b01      	ldr	r3, [sp, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d0df      	beq.n	800b448 <__hexnan+0xd4>
 800b488:	f04f 32ff 	mov.w	r2, #4294967295
 800b48c:	f1c3 0320 	rsb	r3, r3, #32
 800b490:	fa22 f303 	lsr.w	r3, r2, r3
 800b494:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b498:	401a      	ands	r2, r3
 800b49a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b49e:	e7d3      	b.n	800b448 <__hexnan+0xd4>
 800b4a0:	3f04      	subs	r7, #4
 800b4a2:	e7d1      	b.n	800b448 <__hexnan+0xd4>
 800b4a4:	2004      	movs	r0, #4
 800b4a6:	b007      	add	sp, #28
 800b4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4ac <_localeconv_r>:
 800b4ac:	4800      	ldr	r0, [pc, #0]	; (800b4b0 <_localeconv_r+0x4>)
 800b4ae:	4770      	bx	lr
 800b4b0:	2400016c 	.word	0x2400016c

0800b4b4 <malloc>:
 800b4b4:	4b02      	ldr	r3, [pc, #8]	; (800b4c0 <malloc+0xc>)
 800b4b6:	4601      	mov	r1, r0
 800b4b8:	6818      	ldr	r0, [r3, #0]
 800b4ba:	f000 bd63 	b.w	800bf84 <_malloc_r>
 800b4be:	bf00      	nop
 800b4c0:	24000014 	.word	0x24000014

0800b4c4 <__ascii_mbtowc>:
 800b4c4:	b082      	sub	sp, #8
 800b4c6:	b901      	cbnz	r1, 800b4ca <__ascii_mbtowc+0x6>
 800b4c8:	a901      	add	r1, sp, #4
 800b4ca:	b142      	cbz	r2, 800b4de <__ascii_mbtowc+0x1a>
 800b4cc:	b14b      	cbz	r3, 800b4e2 <__ascii_mbtowc+0x1e>
 800b4ce:	7813      	ldrb	r3, [r2, #0]
 800b4d0:	600b      	str	r3, [r1, #0]
 800b4d2:	7812      	ldrb	r2, [r2, #0]
 800b4d4:	1e10      	subs	r0, r2, #0
 800b4d6:	bf18      	it	ne
 800b4d8:	2001      	movne	r0, #1
 800b4da:	b002      	add	sp, #8
 800b4dc:	4770      	bx	lr
 800b4de:	4610      	mov	r0, r2
 800b4e0:	e7fb      	b.n	800b4da <__ascii_mbtowc+0x16>
 800b4e2:	f06f 0001 	mvn.w	r0, #1
 800b4e6:	e7f8      	b.n	800b4da <__ascii_mbtowc+0x16>

0800b4e8 <memcpy>:
 800b4e8:	440a      	add	r2, r1
 800b4ea:	4291      	cmp	r1, r2
 800b4ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4f0:	d100      	bne.n	800b4f4 <memcpy+0xc>
 800b4f2:	4770      	bx	lr
 800b4f4:	b510      	push	{r4, lr}
 800b4f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4fe:	4291      	cmp	r1, r2
 800b500:	d1f9      	bne.n	800b4f6 <memcpy+0xe>
 800b502:	bd10      	pop	{r4, pc}

0800b504 <_Balloc>:
 800b504:	b570      	push	{r4, r5, r6, lr}
 800b506:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b508:	4604      	mov	r4, r0
 800b50a:	460d      	mov	r5, r1
 800b50c:	b976      	cbnz	r6, 800b52c <_Balloc+0x28>
 800b50e:	2010      	movs	r0, #16
 800b510:	f7ff ffd0 	bl	800b4b4 <malloc>
 800b514:	4602      	mov	r2, r0
 800b516:	6260      	str	r0, [r4, #36]	; 0x24
 800b518:	b920      	cbnz	r0, 800b524 <_Balloc+0x20>
 800b51a:	4b18      	ldr	r3, [pc, #96]	; (800b57c <_Balloc+0x78>)
 800b51c:	4818      	ldr	r0, [pc, #96]	; (800b580 <_Balloc+0x7c>)
 800b51e:	2166      	movs	r1, #102	; 0x66
 800b520:	f000 ff3c 	bl	800c39c <__assert_func>
 800b524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b528:	6006      	str	r6, [r0, #0]
 800b52a:	60c6      	str	r6, [r0, #12]
 800b52c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b52e:	68f3      	ldr	r3, [r6, #12]
 800b530:	b183      	cbz	r3, 800b554 <_Balloc+0x50>
 800b532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b53a:	b9b8      	cbnz	r0, 800b56c <_Balloc+0x68>
 800b53c:	2101      	movs	r1, #1
 800b53e:	fa01 f605 	lsl.w	r6, r1, r5
 800b542:	1d72      	adds	r2, r6, #5
 800b544:	0092      	lsls	r2, r2, #2
 800b546:	4620      	mov	r0, r4
 800b548:	f000 fc9a 	bl	800be80 <_calloc_r>
 800b54c:	b160      	cbz	r0, 800b568 <_Balloc+0x64>
 800b54e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b552:	e00e      	b.n	800b572 <_Balloc+0x6e>
 800b554:	2221      	movs	r2, #33	; 0x21
 800b556:	2104      	movs	r1, #4
 800b558:	4620      	mov	r0, r4
 800b55a:	f000 fc91 	bl	800be80 <_calloc_r>
 800b55e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b560:	60f0      	str	r0, [r6, #12]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1e4      	bne.n	800b532 <_Balloc+0x2e>
 800b568:	2000      	movs	r0, #0
 800b56a:	bd70      	pop	{r4, r5, r6, pc}
 800b56c:	6802      	ldr	r2, [r0, #0]
 800b56e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b572:	2300      	movs	r3, #0
 800b574:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b578:	e7f7      	b.n	800b56a <_Balloc+0x66>
 800b57a:	bf00      	nop
 800b57c:	0800e8d6 	.word	0x0800e8d6
 800b580:	0800e9d4 	.word	0x0800e9d4

0800b584 <_Bfree>:
 800b584:	b570      	push	{r4, r5, r6, lr}
 800b586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b588:	4605      	mov	r5, r0
 800b58a:	460c      	mov	r4, r1
 800b58c:	b976      	cbnz	r6, 800b5ac <_Bfree+0x28>
 800b58e:	2010      	movs	r0, #16
 800b590:	f7ff ff90 	bl	800b4b4 <malloc>
 800b594:	4602      	mov	r2, r0
 800b596:	6268      	str	r0, [r5, #36]	; 0x24
 800b598:	b920      	cbnz	r0, 800b5a4 <_Bfree+0x20>
 800b59a:	4b09      	ldr	r3, [pc, #36]	; (800b5c0 <_Bfree+0x3c>)
 800b59c:	4809      	ldr	r0, [pc, #36]	; (800b5c4 <_Bfree+0x40>)
 800b59e:	218a      	movs	r1, #138	; 0x8a
 800b5a0:	f000 fefc 	bl	800c39c <__assert_func>
 800b5a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5a8:	6006      	str	r6, [r0, #0]
 800b5aa:	60c6      	str	r6, [r0, #12]
 800b5ac:	b13c      	cbz	r4, 800b5be <_Bfree+0x3a>
 800b5ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5b0:	6862      	ldr	r2, [r4, #4]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5b8:	6021      	str	r1, [r4, #0]
 800b5ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5be:	bd70      	pop	{r4, r5, r6, pc}
 800b5c0:	0800e8d6 	.word	0x0800e8d6
 800b5c4:	0800e9d4 	.word	0x0800e9d4

0800b5c8 <__multadd>:
 800b5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5cc:	690d      	ldr	r5, [r1, #16]
 800b5ce:	4607      	mov	r7, r0
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	461e      	mov	r6, r3
 800b5d4:	f101 0c14 	add.w	ip, r1, #20
 800b5d8:	2000      	movs	r0, #0
 800b5da:	f8dc 3000 	ldr.w	r3, [ip]
 800b5de:	b299      	uxth	r1, r3
 800b5e0:	fb02 6101 	mla	r1, r2, r1, r6
 800b5e4:	0c1e      	lsrs	r6, r3, #16
 800b5e6:	0c0b      	lsrs	r3, r1, #16
 800b5e8:	fb02 3306 	mla	r3, r2, r6, r3
 800b5ec:	b289      	uxth	r1, r1
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5f4:	4285      	cmp	r5, r0
 800b5f6:	f84c 1b04 	str.w	r1, [ip], #4
 800b5fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b5fe:	dcec      	bgt.n	800b5da <__multadd+0x12>
 800b600:	b30e      	cbz	r6, 800b646 <__multadd+0x7e>
 800b602:	68a3      	ldr	r3, [r4, #8]
 800b604:	42ab      	cmp	r3, r5
 800b606:	dc19      	bgt.n	800b63c <__multadd+0x74>
 800b608:	6861      	ldr	r1, [r4, #4]
 800b60a:	4638      	mov	r0, r7
 800b60c:	3101      	adds	r1, #1
 800b60e:	f7ff ff79 	bl	800b504 <_Balloc>
 800b612:	4680      	mov	r8, r0
 800b614:	b928      	cbnz	r0, 800b622 <__multadd+0x5a>
 800b616:	4602      	mov	r2, r0
 800b618:	4b0c      	ldr	r3, [pc, #48]	; (800b64c <__multadd+0x84>)
 800b61a:	480d      	ldr	r0, [pc, #52]	; (800b650 <__multadd+0x88>)
 800b61c:	21b5      	movs	r1, #181	; 0xb5
 800b61e:	f000 febd 	bl	800c39c <__assert_func>
 800b622:	6922      	ldr	r2, [r4, #16]
 800b624:	3202      	adds	r2, #2
 800b626:	f104 010c 	add.w	r1, r4, #12
 800b62a:	0092      	lsls	r2, r2, #2
 800b62c:	300c      	adds	r0, #12
 800b62e:	f7ff ff5b 	bl	800b4e8 <memcpy>
 800b632:	4621      	mov	r1, r4
 800b634:	4638      	mov	r0, r7
 800b636:	f7ff ffa5 	bl	800b584 <_Bfree>
 800b63a:	4644      	mov	r4, r8
 800b63c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b640:	3501      	adds	r5, #1
 800b642:	615e      	str	r6, [r3, #20]
 800b644:	6125      	str	r5, [r4, #16]
 800b646:	4620      	mov	r0, r4
 800b648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b64c:	0800e948 	.word	0x0800e948
 800b650:	0800e9d4 	.word	0x0800e9d4

0800b654 <__s2b>:
 800b654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b658:	460c      	mov	r4, r1
 800b65a:	4615      	mov	r5, r2
 800b65c:	461f      	mov	r7, r3
 800b65e:	2209      	movs	r2, #9
 800b660:	3308      	adds	r3, #8
 800b662:	4606      	mov	r6, r0
 800b664:	fb93 f3f2 	sdiv	r3, r3, r2
 800b668:	2100      	movs	r1, #0
 800b66a:	2201      	movs	r2, #1
 800b66c:	429a      	cmp	r2, r3
 800b66e:	db09      	blt.n	800b684 <__s2b+0x30>
 800b670:	4630      	mov	r0, r6
 800b672:	f7ff ff47 	bl	800b504 <_Balloc>
 800b676:	b940      	cbnz	r0, 800b68a <__s2b+0x36>
 800b678:	4602      	mov	r2, r0
 800b67a:	4b19      	ldr	r3, [pc, #100]	; (800b6e0 <__s2b+0x8c>)
 800b67c:	4819      	ldr	r0, [pc, #100]	; (800b6e4 <__s2b+0x90>)
 800b67e:	21ce      	movs	r1, #206	; 0xce
 800b680:	f000 fe8c 	bl	800c39c <__assert_func>
 800b684:	0052      	lsls	r2, r2, #1
 800b686:	3101      	adds	r1, #1
 800b688:	e7f0      	b.n	800b66c <__s2b+0x18>
 800b68a:	9b08      	ldr	r3, [sp, #32]
 800b68c:	6143      	str	r3, [r0, #20]
 800b68e:	2d09      	cmp	r5, #9
 800b690:	f04f 0301 	mov.w	r3, #1
 800b694:	6103      	str	r3, [r0, #16]
 800b696:	dd16      	ble.n	800b6c6 <__s2b+0x72>
 800b698:	f104 0909 	add.w	r9, r4, #9
 800b69c:	46c8      	mov	r8, r9
 800b69e:	442c      	add	r4, r5
 800b6a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b6a4:	4601      	mov	r1, r0
 800b6a6:	3b30      	subs	r3, #48	; 0x30
 800b6a8:	220a      	movs	r2, #10
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f7ff ff8c 	bl	800b5c8 <__multadd>
 800b6b0:	45a0      	cmp	r8, r4
 800b6b2:	d1f5      	bne.n	800b6a0 <__s2b+0x4c>
 800b6b4:	f1a5 0408 	sub.w	r4, r5, #8
 800b6b8:	444c      	add	r4, r9
 800b6ba:	1b2d      	subs	r5, r5, r4
 800b6bc:	1963      	adds	r3, r4, r5
 800b6be:	42bb      	cmp	r3, r7
 800b6c0:	db04      	blt.n	800b6cc <__s2b+0x78>
 800b6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6c6:	340a      	adds	r4, #10
 800b6c8:	2509      	movs	r5, #9
 800b6ca:	e7f6      	b.n	800b6ba <__s2b+0x66>
 800b6cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b6d0:	4601      	mov	r1, r0
 800b6d2:	3b30      	subs	r3, #48	; 0x30
 800b6d4:	220a      	movs	r2, #10
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f7ff ff76 	bl	800b5c8 <__multadd>
 800b6dc:	e7ee      	b.n	800b6bc <__s2b+0x68>
 800b6de:	bf00      	nop
 800b6e0:	0800e948 	.word	0x0800e948
 800b6e4:	0800e9d4 	.word	0x0800e9d4

0800b6e8 <__hi0bits>:
 800b6e8:	0c03      	lsrs	r3, r0, #16
 800b6ea:	041b      	lsls	r3, r3, #16
 800b6ec:	b9d3      	cbnz	r3, 800b724 <__hi0bits+0x3c>
 800b6ee:	0400      	lsls	r0, r0, #16
 800b6f0:	2310      	movs	r3, #16
 800b6f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b6f6:	bf04      	itt	eq
 800b6f8:	0200      	lsleq	r0, r0, #8
 800b6fa:	3308      	addeq	r3, #8
 800b6fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b700:	bf04      	itt	eq
 800b702:	0100      	lsleq	r0, r0, #4
 800b704:	3304      	addeq	r3, #4
 800b706:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b70a:	bf04      	itt	eq
 800b70c:	0080      	lsleq	r0, r0, #2
 800b70e:	3302      	addeq	r3, #2
 800b710:	2800      	cmp	r0, #0
 800b712:	db05      	blt.n	800b720 <__hi0bits+0x38>
 800b714:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b718:	f103 0301 	add.w	r3, r3, #1
 800b71c:	bf08      	it	eq
 800b71e:	2320      	moveq	r3, #32
 800b720:	4618      	mov	r0, r3
 800b722:	4770      	bx	lr
 800b724:	2300      	movs	r3, #0
 800b726:	e7e4      	b.n	800b6f2 <__hi0bits+0xa>

0800b728 <__lo0bits>:
 800b728:	6803      	ldr	r3, [r0, #0]
 800b72a:	f013 0207 	ands.w	r2, r3, #7
 800b72e:	4601      	mov	r1, r0
 800b730:	d00b      	beq.n	800b74a <__lo0bits+0x22>
 800b732:	07da      	lsls	r2, r3, #31
 800b734:	d423      	bmi.n	800b77e <__lo0bits+0x56>
 800b736:	0798      	lsls	r0, r3, #30
 800b738:	bf49      	itett	mi
 800b73a:	085b      	lsrmi	r3, r3, #1
 800b73c:	089b      	lsrpl	r3, r3, #2
 800b73e:	2001      	movmi	r0, #1
 800b740:	600b      	strmi	r3, [r1, #0]
 800b742:	bf5c      	itt	pl
 800b744:	600b      	strpl	r3, [r1, #0]
 800b746:	2002      	movpl	r0, #2
 800b748:	4770      	bx	lr
 800b74a:	b298      	uxth	r0, r3
 800b74c:	b9a8      	cbnz	r0, 800b77a <__lo0bits+0x52>
 800b74e:	0c1b      	lsrs	r3, r3, #16
 800b750:	2010      	movs	r0, #16
 800b752:	b2da      	uxtb	r2, r3
 800b754:	b90a      	cbnz	r2, 800b75a <__lo0bits+0x32>
 800b756:	3008      	adds	r0, #8
 800b758:	0a1b      	lsrs	r3, r3, #8
 800b75a:	071a      	lsls	r2, r3, #28
 800b75c:	bf04      	itt	eq
 800b75e:	091b      	lsreq	r3, r3, #4
 800b760:	3004      	addeq	r0, #4
 800b762:	079a      	lsls	r2, r3, #30
 800b764:	bf04      	itt	eq
 800b766:	089b      	lsreq	r3, r3, #2
 800b768:	3002      	addeq	r0, #2
 800b76a:	07da      	lsls	r2, r3, #31
 800b76c:	d403      	bmi.n	800b776 <__lo0bits+0x4e>
 800b76e:	085b      	lsrs	r3, r3, #1
 800b770:	f100 0001 	add.w	r0, r0, #1
 800b774:	d005      	beq.n	800b782 <__lo0bits+0x5a>
 800b776:	600b      	str	r3, [r1, #0]
 800b778:	4770      	bx	lr
 800b77a:	4610      	mov	r0, r2
 800b77c:	e7e9      	b.n	800b752 <__lo0bits+0x2a>
 800b77e:	2000      	movs	r0, #0
 800b780:	4770      	bx	lr
 800b782:	2020      	movs	r0, #32
 800b784:	4770      	bx	lr
	...

0800b788 <__i2b>:
 800b788:	b510      	push	{r4, lr}
 800b78a:	460c      	mov	r4, r1
 800b78c:	2101      	movs	r1, #1
 800b78e:	f7ff feb9 	bl	800b504 <_Balloc>
 800b792:	4602      	mov	r2, r0
 800b794:	b928      	cbnz	r0, 800b7a2 <__i2b+0x1a>
 800b796:	4b05      	ldr	r3, [pc, #20]	; (800b7ac <__i2b+0x24>)
 800b798:	4805      	ldr	r0, [pc, #20]	; (800b7b0 <__i2b+0x28>)
 800b79a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b79e:	f000 fdfd 	bl	800c39c <__assert_func>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	6144      	str	r4, [r0, #20]
 800b7a6:	6103      	str	r3, [r0, #16]
 800b7a8:	bd10      	pop	{r4, pc}
 800b7aa:	bf00      	nop
 800b7ac:	0800e948 	.word	0x0800e948
 800b7b0:	0800e9d4 	.word	0x0800e9d4

0800b7b4 <__multiply>:
 800b7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b8:	4691      	mov	r9, r2
 800b7ba:	690a      	ldr	r2, [r1, #16]
 800b7bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	bfb8      	it	lt
 800b7c4:	460b      	movlt	r3, r1
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	bfbc      	itt	lt
 800b7ca:	464c      	movlt	r4, r9
 800b7cc:	4699      	movlt	r9, r3
 800b7ce:	6927      	ldr	r7, [r4, #16]
 800b7d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b7d4:	68a3      	ldr	r3, [r4, #8]
 800b7d6:	6861      	ldr	r1, [r4, #4]
 800b7d8:	eb07 060a 	add.w	r6, r7, sl
 800b7dc:	42b3      	cmp	r3, r6
 800b7de:	b085      	sub	sp, #20
 800b7e0:	bfb8      	it	lt
 800b7e2:	3101      	addlt	r1, #1
 800b7e4:	f7ff fe8e 	bl	800b504 <_Balloc>
 800b7e8:	b930      	cbnz	r0, 800b7f8 <__multiply+0x44>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	4b44      	ldr	r3, [pc, #272]	; (800b900 <__multiply+0x14c>)
 800b7ee:	4845      	ldr	r0, [pc, #276]	; (800b904 <__multiply+0x150>)
 800b7f0:	f240 115d 	movw	r1, #349	; 0x15d
 800b7f4:	f000 fdd2 	bl	800c39c <__assert_func>
 800b7f8:	f100 0514 	add.w	r5, r0, #20
 800b7fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b800:	462b      	mov	r3, r5
 800b802:	2200      	movs	r2, #0
 800b804:	4543      	cmp	r3, r8
 800b806:	d321      	bcc.n	800b84c <__multiply+0x98>
 800b808:	f104 0314 	add.w	r3, r4, #20
 800b80c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b810:	f109 0314 	add.w	r3, r9, #20
 800b814:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b818:	9202      	str	r2, [sp, #8]
 800b81a:	1b3a      	subs	r2, r7, r4
 800b81c:	3a15      	subs	r2, #21
 800b81e:	f022 0203 	bic.w	r2, r2, #3
 800b822:	3204      	adds	r2, #4
 800b824:	f104 0115 	add.w	r1, r4, #21
 800b828:	428f      	cmp	r7, r1
 800b82a:	bf38      	it	cc
 800b82c:	2204      	movcc	r2, #4
 800b82e:	9201      	str	r2, [sp, #4]
 800b830:	9a02      	ldr	r2, [sp, #8]
 800b832:	9303      	str	r3, [sp, #12]
 800b834:	429a      	cmp	r2, r3
 800b836:	d80c      	bhi.n	800b852 <__multiply+0x9e>
 800b838:	2e00      	cmp	r6, #0
 800b83a:	dd03      	ble.n	800b844 <__multiply+0x90>
 800b83c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b840:	2b00      	cmp	r3, #0
 800b842:	d05a      	beq.n	800b8fa <__multiply+0x146>
 800b844:	6106      	str	r6, [r0, #16]
 800b846:	b005      	add	sp, #20
 800b848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84c:	f843 2b04 	str.w	r2, [r3], #4
 800b850:	e7d8      	b.n	800b804 <__multiply+0x50>
 800b852:	f8b3 a000 	ldrh.w	sl, [r3]
 800b856:	f1ba 0f00 	cmp.w	sl, #0
 800b85a:	d024      	beq.n	800b8a6 <__multiply+0xf2>
 800b85c:	f104 0e14 	add.w	lr, r4, #20
 800b860:	46a9      	mov	r9, r5
 800b862:	f04f 0c00 	mov.w	ip, #0
 800b866:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b86a:	f8d9 1000 	ldr.w	r1, [r9]
 800b86e:	fa1f fb82 	uxth.w	fp, r2
 800b872:	b289      	uxth	r1, r1
 800b874:	fb0a 110b 	mla	r1, sl, fp, r1
 800b878:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b87c:	f8d9 2000 	ldr.w	r2, [r9]
 800b880:	4461      	add	r1, ip
 800b882:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b886:	fb0a c20b 	mla	r2, sl, fp, ip
 800b88a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b88e:	b289      	uxth	r1, r1
 800b890:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b894:	4577      	cmp	r7, lr
 800b896:	f849 1b04 	str.w	r1, [r9], #4
 800b89a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b89e:	d8e2      	bhi.n	800b866 <__multiply+0xb2>
 800b8a0:	9a01      	ldr	r2, [sp, #4]
 800b8a2:	f845 c002 	str.w	ip, [r5, r2]
 800b8a6:	9a03      	ldr	r2, [sp, #12]
 800b8a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	f1b9 0f00 	cmp.w	r9, #0
 800b8b2:	d020      	beq.n	800b8f6 <__multiply+0x142>
 800b8b4:	6829      	ldr	r1, [r5, #0]
 800b8b6:	f104 0c14 	add.w	ip, r4, #20
 800b8ba:	46ae      	mov	lr, r5
 800b8bc:	f04f 0a00 	mov.w	sl, #0
 800b8c0:	f8bc b000 	ldrh.w	fp, [ip]
 800b8c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b8c8:	fb09 220b 	mla	r2, r9, fp, r2
 800b8cc:	4492      	add	sl, r2
 800b8ce:	b289      	uxth	r1, r1
 800b8d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b8d4:	f84e 1b04 	str.w	r1, [lr], #4
 800b8d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b8dc:	f8be 1000 	ldrh.w	r1, [lr]
 800b8e0:	0c12      	lsrs	r2, r2, #16
 800b8e2:	fb09 1102 	mla	r1, r9, r2, r1
 800b8e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b8ea:	4567      	cmp	r7, ip
 800b8ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8f0:	d8e6      	bhi.n	800b8c0 <__multiply+0x10c>
 800b8f2:	9a01      	ldr	r2, [sp, #4]
 800b8f4:	50a9      	str	r1, [r5, r2]
 800b8f6:	3504      	adds	r5, #4
 800b8f8:	e79a      	b.n	800b830 <__multiply+0x7c>
 800b8fa:	3e01      	subs	r6, #1
 800b8fc:	e79c      	b.n	800b838 <__multiply+0x84>
 800b8fe:	bf00      	nop
 800b900:	0800e948 	.word	0x0800e948
 800b904:	0800e9d4 	.word	0x0800e9d4

0800b908 <__pow5mult>:
 800b908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b90c:	4615      	mov	r5, r2
 800b90e:	f012 0203 	ands.w	r2, r2, #3
 800b912:	4606      	mov	r6, r0
 800b914:	460f      	mov	r7, r1
 800b916:	d007      	beq.n	800b928 <__pow5mult+0x20>
 800b918:	4c25      	ldr	r4, [pc, #148]	; (800b9b0 <__pow5mult+0xa8>)
 800b91a:	3a01      	subs	r2, #1
 800b91c:	2300      	movs	r3, #0
 800b91e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b922:	f7ff fe51 	bl	800b5c8 <__multadd>
 800b926:	4607      	mov	r7, r0
 800b928:	10ad      	asrs	r5, r5, #2
 800b92a:	d03d      	beq.n	800b9a8 <__pow5mult+0xa0>
 800b92c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b92e:	b97c      	cbnz	r4, 800b950 <__pow5mult+0x48>
 800b930:	2010      	movs	r0, #16
 800b932:	f7ff fdbf 	bl	800b4b4 <malloc>
 800b936:	4602      	mov	r2, r0
 800b938:	6270      	str	r0, [r6, #36]	; 0x24
 800b93a:	b928      	cbnz	r0, 800b948 <__pow5mult+0x40>
 800b93c:	4b1d      	ldr	r3, [pc, #116]	; (800b9b4 <__pow5mult+0xac>)
 800b93e:	481e      	ldr	r0, [pc, #120]	; (800b9b8 <__pow5mult+0xb0>)
 800b940:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b944:	f000 fd2a 	bl	800c39c <__assert_func>
 800b948:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b94c:	6004      	str	r4, [r0, #0]
 800b94e:	60c4      	str	r4, [r0, #12]
 800b950:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b954:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b958:	b94c      	cbnz	r4, 800b96e <__pow5mult+0x66>
 800b95a:	f240 2171 	movw	r1, #625	; 0x271
 800b95e:	4630      	mov	r0, r6
 800b960:	f7ff ff12 	bl	800b788 <__i2b>
 800b964:	2300      	movs	r3, #0
 800b966:	f8c8 0008 	str.w	r0, [r8, #8]
 800b96a:	4604      	mov	r4, r0
 800b96c:	6003      	str	r3, [r0, #0]
 800b96e:	f04f 0900 	mov.w	r9, #0
 800b972:	07eb      	lsls	r3, r5, #31
 800b974:	d50a      	bpl.n	800b98c <__pow5mult+0x84>
 800b976:	4639      	mov	r1, r7
 800b978:	4622      	mov	r2, r4
 800b97a:	4630      	mov	r0, r6
 800b97c:	f7ff ff1a 	bl	800b7b4 <__multiply>
 800b980:	4639      	mov	r1, r7
 800b982:	4680      	mov	r8, r0
 800b984:	4630      	mov	r0, r6
 800b986:	f7ff fdfd 	bl	800b584 <_Bfree>
 800b98a:	4647      	mov	r7, r8
 800b98c:	106d      	asrs	r5, r5, #1
 800b98e:	d00b      	beq.n	800b9a8 <__pow5mult+0xa0>
 800b990:	6820      	ldr	r0, [r4, #0]
 800b992:	b938      	cbnz	r0, 800b9a4 <__pow5mult+0x9c>
 800b994:	4622      	mov	r2, r4
 800b996:	4621      	mov	r1, r4
 800b998:	4630      	mov	r0, r6
 800b99a:	f7ff ff0b 	bl	800b7b4 <__multiply>
 800b99e:	6020      	str	r0, [r4, #0]
 800b9a0:	f8c0 9000 	str.w	r9, [r0]
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	e7e4      	b.n	800b972 <__pow5mult+0x6a>
 800b9a8:	4638      	mov	r0, r7
 800b9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ae:	bf00      	nop
 800b9b0:	0800eb20 	.word	0x0800eb20
 800b9b4:	0800e8d6 	.word	0x0800e8d6
 800b9b8:	0800e9d4 	.word	0x0800e9d4

0800b9bc <__lshift>:
 800b9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9c0:	460c      	mov	r4, r1
 800b9c2:	6849      	ldr	r1, [r1, #4]
 800b9c4:	6923      	ldr	r3, [r4, #16]
 800b9c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9ca:	68a3      	ldr	r3, [r4, #8]
 800b9cc:	4607      	mov	r7, r0
 800b9ce:	4691      	mov	r9, r2
 800b9d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9d4:	f108 0601 	add.w	r6, r8, #1
 800b9d8:	42b3      	cmp	r3, r6
 800b9da:	db0b      	blt.n	800b9f4 <__lshift+0x38>
 800b9dc:	4638      	mov	r0, r7
 800b9de:	f7ff fd91 	bl	800b504 <_Balloc>
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	b948      	cbnz	r0, 800b9fa <__lshift+0x3e>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	4b2a      	ldr	r3, [pc, #168]	; (800ba94 <__lshift+0xd8>)
 800b9ea:	482b      	ldr	r0, [pc, #172]	; (800ba98 <__lshift+0xdc>)
 800b9ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b9f0:	f000 fcd4 	bl	800c39c <__assert_func>
 800b9f4:	3101      	adds	r1, #1
 800b9f6:	005b      	lsls	r3, r3, #1
 800b9f8:	e7ee      	b.n	800b9d8 <__lshift+0x1c>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	f100 0114 	add.w	r1, r0, #20
 800ba00:	f100 0210 	add.w	r2, r0, #16
 800ba04:	4618      	mov	r0, r3
 800ba06:	4553      	cmp	r3, sl
 800ba08:	db37      	blt.n	800ba7a <__lshift+0xbe>
 800ba0a:	6920      	ldr	r0, [r4, #16]
 800ba0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba10:	f104 0314 	add.w	r3, r4, #20
 800ba14:	f019 091f 	ands.w	r9, r9, #31
 800ba18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ba20:	d02f      	beq.n	800ba82 <__lshift+0xc6>
 800ba22:	f1c9 0e20 	rsb	lr, r9, #32
 800ba26:	468a      	mov	sl, r1
 800ba28:	f04f 0c00 	mov.w	ip, #0
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	fa02 f209 	lsl.w	r2, r2, r9
 800ba32:	ea42 020c 	orr.w	r2, r2, ip
 800ba36:	f84a 2b04 	str.w	r2, [sl], #4
 800ba3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba3e:	4298      	cmp	r0, r3
 800ba40:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ba44:	d8f2      	bhi.n	800ba2c <__lshift+0x70>
 800ba46:	1b03      	subs	r3, r0, r4
 800ba48:	3b15      	subs	r3, #21
 800ba4a:	f023 0303 	bic.w	r3, r3, #3
 800ba4e:	3304      	adds	r3, #4
 800ba50:	f104 0215 	add.w	r2, r4, #21
 800ba54:	4290      	cmp	r0, r2
 800ba56:	bf38      	it	cc
 800ba58:	2304      	movcc	r3, #4
 800ba5a:	f841 c003 	str.w	ip, [r1, r3]
 800ba5e:	f1bc 0f00 	cmp.w	ip, #0
 800ba62:	d001      	beq.n	800ba68 <__lshift+0xac>
 800ba64:	f108 0602 	add.w	r6, r8, #2
 800ba68:	3e01      	subs	r6, #1
 800ba6a:	4638      	mov	r0, r7
 800ba6c:	612e      	str	r6, [r5, #16]
 800ba6e:	4621      	mov	r1, r4
 800ba70:	f7ff fd88 	bl	800b584 <_Bfree>
 800ba74:	4628      	mov	r0, r5
 800ba76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba7e:	3301      	adds	r3, #1
 800ba80:	e7c1      	b.n	800ba06 <__lshift+0x4a>
 800ba82:	3904      	subs	r1, #4
 800ba84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba88:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba8c:	4298      	cmp	r0, r3
 800ba8e:	d8f9      	bhi.n	800ba84 <__lshift+0xc8>
 800ba90:	e7ea      	b.n	800ba68 <__lshift+0xac>
 800ba92:	bf00      	nop
 800ba94:	0800e948 	.word	0x0800e948
 800ba98:	0800e9d4 	.word	0x0800e9d4

0800ba9c <__mcmp>:
 800ba9c:	b530      	push	{r4, r5, lr}
 800ba9e:	6902      	ldr	r2, [r0, #16]
 800baa0:	690c      	ldr	r4, [r1, #16]
 800baa2:	1b12      	subs	r2, r2, r4
 800baa4:	d10e      	bne.n	800bac4 <__mcmp+0x28>
 800baa6:	f100 0314 	add.w	r3, r0, #20
 800baaa:	3114      	adds	r1, #20
 800baac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bab0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bab4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bab8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800babc:	42a5      	cmp	r5, r4
 800babe:	d003      	beq.n	800bac8 <__mcmp+0x2c>
 800bac0:	d305      	bcc.n	800bace <__mcmp+0x32>
 800bac2:	2201      	movs	r2, #1
 800bac4:	4610      	mov	r0, r2
 800bac6:	bd30      	pop	{r4, r5, pc}
 800bac8:	4283      	cmp	r3, r0
 800baca:	d3f3      	bcc.n	800bab4 <__mcmp+0x18>
 800bacc:	e7fa      	b.n	800bac4 <__mcmp+0x28>
 800bace:	f04f 32ff 	mov.w	r2, #4294967295
 800bad2:	e7f7      	b.n	800bac4 <__mcmp+0x28>

0800bad4 <__mdiff>:
 800bad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad8:	460c      	mov	r4, r1
 800bada:	4606      	mov	r6, r0
 800badc:	4611      	mov	r1, r2
 800bade:	4620      	mov	r0, r4
 800bae0:	4690      	mov	r8, r2
 800bae2:	f7ff ffdb 	bl	800ba9c <__mcmp>
 800bae6:	1e05      	subs	r5, r0, #0
 800bae8:	d110      	bne.n	800bb0c <__mdiff+0x38>
 800baea:	4629      	mov	r1, r5
 800baec:	4630      	mov	r0, r6
 800baee:	f7ff fd09 	bl	800b504 <_Balloc>
 800baf2:	b930      	cbnz	r0, 800bb02 <__mdiff+0x2e>
 800baf4:	4b3a      	ldr	r3, [pc, #232]	; (800bbe0 <__mdiff+0x10c>)
 800baf6:	4602      	mov	r2, r0
 800baf8:	f240 2132 	movw	r1, #562	; 0x232
 800bafc:	4839      	ldr	r0, [pc, #228]	; (800bbe4 <__mdiff+0x110>)
 800bafe:	f000 fc4d 	bl	800c39c <__assert_func>
 800bb02:	2301      	movs	r3, #1
 800bb04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0c:	bfa4      	itt	ge
 800bb0e:	4643      	movge	r3, r8
 800bb10:	46a0      	movge	r8, r4
 800bb12:	4630      	mov	r0, r6
 800bb14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb18:	bfa6      	itte	ge
 800bb1a:	461c      	movge	r4, r3
 800bb1c:	2500      	movge	r5, #0
 800bb1e:	2501      	movlt	r5, #1
 800bb20:	f7ff fcf0 	bl	800b504 <_Balloc>
 800bb24:	b920      	cbnz	r0, 800bb30 <__mdiff+0x5c>
 800bb26:	4b2e      	ldr	r3, [pc, #184]	; (800bbe0 <__mdiff+0x10c>)
 800bb28:	4602      	mov	r2, r0
 800bb2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb2e:	e7e5      	b.n	800bafc <__mdiff+0x28>
 800bb30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb34:	6926      	ldr	r6, [r4, #16]
 800bb36:	60c5      	str	r5, [r0, #12]
 800bb38:	f104 0914 	add.w	r9, r4, #20
 800bb3c:	f108 0514 	add.w	r5, r8, #20
 800bb40:	f100 0e14 	add.w	lr, r0, #20
 800bb44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb4c:	f108 0210 	add.w	r2, r8, #16
 800bb50:	46f2      	mov	sl, lr
 800bb52:	2100      	movs	r1, #0
 800bb54:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb5c:	fa1f f883 	uxth.w	r8, r3
 800bb60:	fa11 f18b 	uxtah	r1, r1, fp
 800bb64:	0c1b      	lsrs	r3, r3, #16
 800bb66:	eba1 0808 	sub.w	r8, r1, r8
 800bb6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb72:	fa1f f888 	uxth.w	r8, r8
 800bb76:	1419      	asrs	r1, r3, #16
 800bb78:	454e      	cmp	r6, r9
 800bb7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bb7e:	f84a 3b04 	str.w	r3, [sl], #4
 800bb82:	d8e7      	bhi.n	800bb54 <__mdiff+0x80>
 800bb84:	1b33      	subs	r3, r6, r4
 800bb86:	3b15      	subs	r3, #21
 800bb88:	f023 0303 	bic.w	r3, r3, #3
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	3415      	adds	r4, #21
 800bb90:	42a6      	cmp	r6, r4
 800bb92:	bf38      	it	cc
 800bb94:	2304      	movcc	r3, #4
 800bb96:	441d      	add	r5, r3
 800bb98:	4473      	add	r3, lr
 800bb9a:	469e      	mov	lr, r3
 800bb9c:	462e      	mov	r6, r5
 800bb9e:	4566      	cmp	r6, ip
 800bba0:	d30e      	bcc.n	800bbc0 <__mdiff+0xec>
 800bba2:	f10c 0203 	add.w	r2, ip, #3
 800bba6:	1b52      	subs	r2, r2, r5
 800bba8:	f022 0203 	bic.w	r2, r2, #3
 800bbac:	3d03      	subs	r5, #3
 800bbae:	45ac      	cmp	ip, r5
 800bbb0:	bf38      	it	cc
 800bbb2:	2200      	movcc	r2, #0
 800bbb4:	441a      	add	r2, r3
 800bbb6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bbba:	b17b      	cbz	r3, 800bbdc <__mdiff+0x108>
 800bbbc:	6107      	str	r7, [r0, #16]
 800bbbe:	e7a3      	b.n	800bb08 <__mdiff+0x34>
 800bbc0:	f856 8b04 	ldr.w	r8, [r6], #4
 800bbc4:	fa11 f288 	uxtah	r2, r1, r8
 800bbc8:	1414      	asrs	r4, r2, #16
 800bbca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bbce:	b292      	uxth	r2, r2
 800bbd0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bbd4:	f84e 2b04 	str.w	r2, [lr], #4
 800bbd8:	1421      	asrs	r1, r4, #16
 800bbda:	e7e0      	b.n	800bb9e <__mdiff+0xca>
 800bbdc:	3f01      	subs	r7, #1
 800bbde:	e7ea      	b.n	800bbb6 <__mdiff+0xe2>
 800bbe0:	0800e948 	.word	0x0800e948
 800bbe4:	0800e9d4 	.word	0x0800e9d4

0800bbe8 <__ulp>:
 800bbe8:	b082      	sub	sp, #8
 800bbea:	ed8d 0b00 	vstr	d0, [sp]
 800bbee:	9b01      	ldr	r3, [sp, #4]
 800bbf0:	4912      	ldr	r1, [pc, #72]	; (800bc3c <__ulp+0x54>)
 800bbf2:	4019      	ands	r1, r3
 800bbf4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bbf8:	2900      	cmp	r1, #0
 800bbfa:	dd05      	ble.n	800bc08 <__ulp+0x20>
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	ec43 2b10 	vmov	d0, r2, r3
 800bc04:	b002      	add	sp, #8
 800bc06:	4770      	bx	lr
 800bc08:	4249      	negs	r1, r1
 800bc0a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bc0e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bc12:	f04f 0200 	mov.w	r2, #0
 800bc16:	f04f 0300 	mov.w	r3, #0
 800bc1a:	da04      	bge.n	800bc26 <__ulp+0x3e>
 800bc1c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bc20:	fa41 f300 	asr.w	r3, r1, r0
 800bc24:	e7ec      	b.n	800bc00 <__ulp+0x18>
 800bc26:	f1a0 0114 	sub.w	r1, r0, #20
 800bc2a:	291e      	cmp	r1, #30
 800bc2c:	bfda      	itte	le
 800bc2e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bc32:	fa20 f101 	lsrle.w	r1, r0, r1
 800bc36:	2101      	movgt	r1, #1
 800bc38:	460a      	mov	r2, r1
 800bc3a:	e7e1      	b.n	800bc00 <__ulp+0x18>
 800bc3c:	7ff00000 	.word	0x7ff00000

0800bc40 <__b2d>:
 800bc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc42:	6905      	ldr	r5, [r0, #16]
 800bc44:	f100 0714 	add.w	r7, r0, #20
 800bc48:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bc4c:	1f2e      	subs	r6, r5, #4
 800bc4e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bc52:	4620      	mov	r0, r4
 800bc54:	f7ff fd48 	bl	800b6e8 <__hi0bits>
 800bc58:	f1c0 0320 	rsb	r3, r0, #32
 800bc5c:	280a      	cmp	r0, #10
 800bc5e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bcdc <__b2d+0x9c>
 800bc62:	600b      	str	r3, [r1, #0]
 800bc64:	dc14      	bgt.n	800bc90 <__b2d+0x50>
 800bc66:	f1c0 0e0b 	rsb	lr, r0, #11
 800bc6a:	fa24 f10e 	lsr.w	r1, r4, lr
 800bc6e:	42b7      	cmp	r7, r6
 800bc70:	ea41 030c 	orr.w	r3, r1, ip
 800bc74:	bf34      	ite	cc
 800bc76:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bc7a:	2100      	movcs	r1, #0
 800bc7c:	3015      	adds	r0, #21
 800bc7e:	fa04 f000 	lsl.w	r0, r4, r0
 800bc82:	fa21 f10e 	lsr.w	r1, r1, lr
 800bc86:	ea40 0201 	orr.w	r2, r0, r1
 800bc8a:	ec43 2b10 	vmov	d0, r2, r3
 800bc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc90:	42b7      	cmp	r7, r6
 800bc92:	bf3a      	itte	cc
 800bc94:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bc98:	f1a5 0608 	subcc.w	r6, r5, #8
 800bc9c:	2100      	movcs	r1, #0
 800bc9e:	380b      	subs	r0, #11
 800bca0:	d017      	beq.n	800bcd2 <__b2d+0x92>
 800bca2:	f1c0 0c20 	rsb	ip, r0, #32
 800bca6:	fa04 f500 	lsl.w	r5, r4, r0
 800bcaa:	42be      	cmp	r6, r7
 800bcac:	fa21 f40c 	lsr.w	r4, r1, ip
 800bcb0:	ea45 0504 	orr.w	r5, r5, r4
 800bcb4:	bf8c      	ite	hi
 800bcb6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bcba:	2400      	movls	r4, #0
 800bcbc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bcc0:	fa01 f000 	lsl.w	r0, r1, r0
 800bcc4:	fa24 f40c 	lsr.w	r4, r4, ip
 800bcc8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bccc:	ea40 0204 	orr.w	r2, r0, r4
 800bcd0:	e7db      	b.n	800bc8a <__b2d+0x4a>
 800bcd2:	ea44 030c 	orr.w	r3, r4, ip
 800bcd6:	460a      	mov	r2, r1
 800bcd8:	e7d7      	b.n	800bc8a <__b2d+0x4a>
 800bcda:	bf00      	nop
 800bcdc:	3ff00000 	.word	0x3ff00000

0800bce0 <__d2b>:
 800bce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bce4:	4689      	mov	r9, r1
 800bce6:	2101      	movs	r1, #1
 800bce8:	ec57 6b10 	vmov	r6, r7, d0
 800bcec:	4690      	mov	r8, r2
 800bcee:	f7ff fc09 	bl	800b504 <_Balloc>
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	b930      	cbnz	r0, 800bd04 <__d2b+0x24>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	4b25      	ldr	r3, [pc, #148]	; (800bd90 <__d2b+0xb0>)
 800bcfa:	4826      	ldr	r0, [pc, #152]	; (800bd94 <__d2b+0xb4>)
 800bcfc:	f240 310a 	movw	r1, #778	; 0x30a
 800bd00:	f000 fb4c 	bl	800c39c <__assert_func>
 800bd04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bd08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd0c:	bb35      	cbnz	r5, 800bd5c <__d2b+0x7c>
 800bd0e:	2e00      	cmp	r6, #0
 800bd10:	9301      	str	r3, [sp, #4]
 800bd12:	d028      	beq.n	800bd66 <__d2b+0x86>
 800bd14:	4668      	mov	r0, sp
 800bd16:	9600      	str	r6, [sp, #0]
 800bd18:	f7ff fd06 	bl	800b728 <__lo0bits>
 800bd1c:	9900      	ldr	r1, [sp, #0]
 800bd1e:	b300      	cbz	r0, 800bd62 <__d2b+0x82>
 800bd20:	9a01      	ldr	r2, [sp, #4]
 800bd22:	f1c0 0320 	rsb	r3, r0, #32
 800bd26:	fa02 f303 	lsl.w	r3, r2, r3
 800bd2a:	430b      	orrs	r3, r1
 800bd2c:	40c2      	lsrs	r2, r0
 800bd2e:	6163      	str	r3, [r4, #20]
 800bd30:	9201      	str	r2, [sp, #4]
 800bd32:	9b01      	ldr	r3, [sp, #4]
 800bd34:	61a3      	str	r3, [r4, #24]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	bf14      	ite	ne
 800bd3a:	2202      	movne	r2, #2
 800bd3c:	2201      	moveq	r2, #1
 800bd3e:	6122      	str	r2, [r4, #16]
 800bd40:	b1d5      	cbz	r5, 800bd78 <__d2b+0x98>
 800bd42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd46:	4405      	add	r5, r0
 800bd48:	f8c9 5000 	str.w	r5, [r9]
 800bd4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd50:	f8c8 0000 	str.w	r0, [r8]
 800bd54:	4620      	mov	r0, r4
 800bd56:	b003      	add	sp, #12
 800bd58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd60:	e7d5      	b.n	800bd0e <__d2b+0x2e>
 800bd62:	6161      	str	r1, [r4, #20]
 800bd64:	e7e5      	b.n	800bd32 <__d2b+0x52>
 800bd66:	a801      	add	r0, sp, #4
 800bd68:	f7ff fcde 	bl	800b728 <__lo0bits>
 800bd6c:	9b01      	ldr	r3, [sp, #4]
 800bd6e:	6163      	str	r3, [r4, #20]
 800bd70:	2201      	movs	r2, #1
 800bd72:	6122      	str	r2, [r4, #16]
 800bd74:	3020      	adds	r0, #32
 800bd76:	e7e3      	b.n	800bd40 <__d2b+0x60>
 800bd78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd80:	f8c9 0000 	str.w	r0, [r9]
 800bd84:	6918      	ldr	r0, [r3, #16]
 800bd86:	f7ff fcaf 	bl	800b6e8 <__hi0bits>
 800bd8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd8e:	e7df      	b.n	800bd50 <__d2b+0x70>
 800bd90:	0800e948 	.word	0x0800e948
 800bd94:	0800e9d4 	.word	0x0800e9d4

0800bd98 <__ratio>:
 800bd98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd9c:	4688      	mov	r8, r1
 800bd9e:	4669      	mov	r1, sp
 800bda0:	4681      	mov	r9, r0
 800bda2:	f7ff ff4d 	bl	800bc40 <__b2d>
 800bda6:	a901      	add	r1, sp, #4
 800bda8:	4640      	mov	r0, r8
 800bdaa:	ec55 4b10 	vmov	r4, r5, d0
 800bdae:	ee10 aa10 	vmov	sl, s0
 800bdb2:	f7ff ff45 	bl	800bc40 <__b2d>
 800bdb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bdba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bdbe:	1a59      	subs	r1, r3, r1
 800bdc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bdca:	ec57 6b10 	vmov	r6, r7, d0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	bfd6      	itet	le
 800bdd2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bdd6:	462a      	movgt	r2, r5
 800bdd8:	463a      	movle	r2, r7
 800bdda:	46ab      	mov	fp, r5
 800bddc:	bfd6      	itet	le
 800bdde:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bde2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bde6:	ee00 3a90 	vmovle	s1, r3
 800bdea:	ec4b ab17 	vmov	d7, sl, fp
 800bdee:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bdf2:	b003      	add	sp, #12
 800bdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bdf8 <__copybits>:
 800bdf8:	3901      	subs	r1, #1
 800bdfa:	b570      	push	{r4, r5, r6, lr}
 800bdfc:	1149      	asrs	r1, r1, #5
 800bdfe:	6914      	ldr	r4, [r2, #16]
 800be00:	3101      	adds	r1, #1
 800be02:	f102 0314 	add.w	r3, r2, #20
 800be06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be0e:	1f05      	subs	r5, r0, #4
 800be10:	42a3      	cmp	r3, r4
 800be12:	d30c      	bcc.n	800be2e <__copybits+0x36>
 800be14:	1aa3      	subs	r3, r4, r2
 800be16:	3b11      	subs	r3, #17
 800be18:	f023 0303 	bic.w	r3, r3, #3
 800be1c:	3211      	adds	r2, #17
 800be1e:	42a2      	cmp	r2, r4
 800be20:	bf88      	it	hi
 800be22:	2300      	movhi	r3, #0
 800be24:	4418      	add	r0, r3
 800be26:	2300      	movs	r3, #0
 800be28:	4288      	cmp	r0, r1
 800be2a:	d305      	bcc.n	800be38 <__copybits+0x40>
 800be2c:	bd70      	pop	{r4, r5, r6, pc}
 800be2e:	f853 6b04 	ldr.w	r6, [r3], #4
 800be32:	f845 6f04 	str.w	r6, [r5, #4]!
 800be36:	e7eb      	b.n	800be10 <__copybits+0x18>
 800be38:	f840 3b04 	str.w	r3, [r0], #4
 800be3c:	e7f4      	b.n	800be28 <__copybits+0x30>

0800be3e <__any_on>:
 800be3e:	f100 0214 	add.w	r2, r0, #20
 800be42:	6900      	ldr	r0, [r0, #16]
 800be44:	114b      	asrs	r3, r1, #5
 800be46:	4298      	cmp	r0, r3
 800be48:	b510      	push	{r4, lr}
 800be4a:	db11      	blt.n	800be70 <__any_on+0x32>
 800be4c:	dd0a      	ble.n	800be64 <__any_on+0x26>
 800be4e:	f011 011f 	ands.w	r1, r1, #31
 800be52:	d007      	beq.n	800be64 <__any_on+0x26>
 800be54:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800be58:	fa24 f001 	lsr.w	r0, r4, r1
 800be5c:	fa00 f101 	lsl.w	r1, r0, r1
 800be60:	428c      	cmp	r4, r1
 800be62:	d10b      	bne.n	800be7c <__any_on+0x3e>
 800be64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be68:	4293      	cmp	r3, r2
 800be6a:	d803      	bhi.n	800be74 <__any_on+0x36>
 800be6c:	2000      	movs	r0, #0
 800be6e:	bd10      	pop	{r4, pc}
 800be70:	4603      	mov	r3, r0
 800be72:	e7f7      	b.n	800be64 <__any_on+0x26>
 800be74:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be78:	2900      	cmp	r1, #0
 800be7a:	d0f5      	beq.n	800be68 <__any_on+0x2a>
 800be7c:	2001      	movs	r0, #1
 800be7e:	e7f6      	b.n	800be6e <__any_on+0x30>

0800be80 <_calloc_r>:
 800be80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be82:	fba1 2402 	umull	r2, r4, r1, r2
 800be86:	b94c      	cbnz	r4, 800be9c <_calloc_r+0x1c>
 800be88:	4611      	mov	r1, r2
 800be8a:	9201      	str	r2, [sp, #4]
 800be8c:	f000 f87a 	bl	800bf84 <_malloc_r>
 800be90:	9a01      	ldr	r2, [sp, #4]
 800be92:	4605      	mov	r5, r0
 800be94:	b930      	cbnz	r0, 800bea4 <_calloc_r+0x24>
 800be96:	4628      	mov	r0, r5
 800be98:	b003      	add	sp, #12
 800be9a:	bd30      	pop	{r4, r5, pc}
 800be9c:	220c      	movs	r2, #12
 800be9e:	6002      	str	r2, [r0, #0]
 800bea0:	2500      	movs	r5, #0
 800bea2:	e7f8      	b.n	800be96 <_calloc_r+0x16>
 800bea4:	4621      	mov	r1, r4
 800bea6:	f7fc fcc5 	bl	8008834 <memset>
 800beaa:	e7f4      	b.n	800be96 <_calloc_r+0x16>

0800beac <_free_r>:
 800beac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800beae:	2900      	cmp	r1, #0
 800beb0:	d044      	beq.n	800bf3c <_free_r+0x90>
 800beb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800beb6:	9001      	str	r0, [sp, #4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f1a1 0404 	sub.w	r4, r1, #4
 800bebe:	bfb8      	it	lt
 800bec0:	18e4      	addlt	r4, r4, r3
 800bec2:	f000 fab5 	bl	800c430 <__malloc_lock>
 800bec6:	4a1e      	ldr	r2, [pc, #120]	; (800bf40 <_free_r+0x94>)
 800bec8:	9801      	ldr	r0, [sp, #4]
 800beca:	6813      	ldr	r3, [r2, #0]
 800becc:	b933      	cbnz	r3, 800bedc <_free_r+0x30>
 800bece:	6063      	str	r3, [r4, #4]
 800bed0:	6014      	str	r4, [r2, #0]
 800bed2:	b003      	add	sp, #12
 800bed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bed8:	f000 bab0 	b.w	800c43c <__malloc_unlock>
 800bedc:	42a3      	cmp	r3, r4
 800bede:	d908      	bls.n	800bef2 <_free_r+0x46>
 800bee0:	6825      	ldr	r5, [r4, #0]
 800bee2:	1961      	adds	r1, r4, r5
 800bee4:	428b      	cmp	r3, r1
 800bee6:	bf01      	itttt	eq
 800bee8:	6819      	ldreq	r1, [r3, #0]
 800beea:	685b      	ldreq	r3, [r3, #4]
 800beec:	1949      	addeq	r1, r1, r5
 800beee:	6021      	streq	r1, [r4, #0]
 800bef0:	e7ed      	b.n	800bece <_free_r+0x22>
 800bef2:	461a      	mov	r2, r3
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	b10b      	cbz	r3, 800befc <_free_r+0x50>
 800bef8:	42a3      	cmp	r3, r4
 800befa:	d9fa      	bls.n	800bef2 <_free_r+0x46>
 800befc:	6811      	ldr	r1, [r2, #0]
 800befe:	1855      	adds	r5, r2, r1
 800bf00:	42a5      	cmp	r5, r4
 800bf02:	d10b      	bne.n	800bf1c <_free_r+0x70>
 800bf04:	6824      	ldr	r4, [r4, #0]
 800bf06:	4421      	add	r1, r4
 800bf08:	1854      	adds	r4, r2, r1
 800bf0a:	42a3      	cmp	r3, r4
 800bf0c:	6011      	str	r1, [r2, #0]
 800bf0e:	d1e0      	bne.n	800bed2 <_free_r+0x26>
 800bf10:	681c      	ldr	r4, [r3, #0]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	6053      	str	r3, [r2, #4]
 800bf16:	4421      	add	r1, r4
 800bf18:	6011      	str	r1, [r2, #0]
 800bf1a:	e7da      	b.n	800bed2 <_free_r+0x26>
 800bf1c:	d902      	bls.n	800bf24 <_free_r+0x78>
 800bf1e:	230c      	movs	r3, #12
 800bf20:	6003      	str	r3, [r0, #0]
 800bf22:	e7d6      	b.n	800bed2 <_free_r+0x26>
 800bf24:	6825      	ldr	r5, [r4, #0]
 800bf26:	1961      	adds	r1, r4, r5
 800bf28:	428b      	cmp	r3, r1
 800bf2a:	bf04      	itt	eq
 800bf2c:	6819      	ldreq	r1, [r3, #0]
 800bf2e:	685b      	ldreq	r3, [r3, #4]
 800bf30:	6063      	str	r3, [r4, #4]
 800bf32:	bf04      	itt	eq
 800bf34:	1949      	addeq	r1, r1, r5
 800bf36:	6021      	streq	r1, [r4, #0]
 800bf38:	6054      	str	r4, [r2, #4]
 800bf3a:	e7ca      	b.n	800bed2 <_free_r+0x26>
 800bf3c:	b003      	add	sp, #12
 800bf3e:	bd30      	pop	{r4, r5, pc}
 800bf40:	24000710 	.word	0x24000710

0800bf44 <sbrk_aligned>:
 800bf44:	b570      	push	{r4, r5, r6, lr}
 800bf46:	4e0e      	ldr	r6, [pc, #56]	; (800bf80 <sbrk_aligned+0x3c>)
 800bf48:	460c      	mov	r4, r1
 800bf4a:	6831      	ldr	r1, [r6, #0]
 800bf4c:	4605      	mov	r5, r0
 800bf4e:	b911      	cbnz	r1, 800bf56 <sbrk_aligned+0x12>
 800bf50:	f000 f9f2 	bl	800c338 <_sbrk_r>
 800bf54:	6030      	str	r0, [r6, #0]
 800bf56:	4621      	mov	r1, r4
 800bf58:	4628      	mov	r0, r5
 800bf5a:	f000 f9ed 	bl	800c338 <_sbrk_r>
 800bf5e:	1c43      	adds	r3, r0, #1
 800bf60:	d00a      	beq.n	800bf78 <sbrk_aligned+0x34>
 800bf62:	1cc4      	adds	r4, r0, #3
 800bf64:	f024 0403 	bic.w	r4, r4, #3
 800bf68:	42a0      	cmp	r0, r4
 800bf6a:	d007      	beq.n	800bf7c <sbrk_aligned+0x38>
 800bf6c:	1a21      	subs	r1, r4, r0
 800bf6e:	4628      	mov	r0, r5
 800bf70:	f000 f9e2 	bl	800c338 <_sbrk_r>
 800bf74:	3001      	adds	r0, #1
 800bf76:	d101      	bne.n	800bf7c <sbrk_aligned+0x38>
 800bf78:	f04f 34ff 	mov.w	r4, #4294967295
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}
 800bf80:	24000714 	.word	0x24000714

0800bf84 <_malloc_r>:
 800bf84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf88:	1ccd      	adds	r5, r1, #3
 800bf8a:	f025 0503 	bic.w	r5, r5, #3
 800bf8e:	3508      	adds	r5, #8
 800bf90:	2d0c      	cmp	r5, #12
 800bf92:	bf38      	it	cc
 800bf94:	250c      	movcc	r5, #12
 800bf96:	2d00      	cmp	r5, #0
 800bf98:	4607      	mov	r7, r0
 800bf9a:	db01      	blt.n	800bfa0 <_malloc_r+0x1c>
 800bf9c:	42a9      	cmp	r1, r5
 800bf9e:	d905      	bls.n	800bfac <_malloc_r+0x28>
 800bfa0:	230c      	movs	r3, #12
 800bfa2:	603b      	str	r3, [r7, #0]
 800bfa4:	2600      	movs	r6, #0
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfac:	4e2e      	ldr	r6, [pc, #184]	; (800c068 <_malloc_r+0xe4>)
 800bfae:	f000 fa3f 	bl	800c430 <__malloc_lock>
 800bfb2:	6833      	ldr	r3, [r6, #0]
 800bfb4:	461c      	mov	r4, r3
 800bfb6:	bb34      	cbnz	r4, 800c006 <_malloc_r+0x82>
 800bfb8:	4629      	mov	r1, r5
 800bfba:	4638      	mov	r0, r7
 800bfbc:	f7ff ffc2 	bl	800bf44 <sbrk_aligned>
 800bfc0:	1c43      	adds	r3, r0, #1
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	d14d      	bne.n	800c062 <_malloc_r+0xde>
 800bfc6:	6834      	ldr	r4, [r6, #0]
 800bfc8:	4626      	mov	r6, r4
 800bfca:	2e00      	cmp	r6, #0
 800bfcc:	d140      	bne.n	800c050 <_malloc_r+0xcc>
 800bfce:	6823      	ldr	r3, [r4, #0]
 800bfd0:	4631      	mov	r1, r6
 800bfd2:	4638      	mov	r0, r7
 800bfd4:	eb04 0803 	add.w	r8, r4, r3
 800bfd8:	f000 f9ae 	bl	800c338 <_sbrk_r>
 800bfdc:	4580      	cmp	r8, r0
 800bfde:	d13a      	bne.n	800c056 <_malloc_r+0xd2>
 800bfe0:	6821      	ldr	r1, [r4, #0]
 800bfe2:	3503      	adds	r5, #3
 800bfe4:	1a6d      	subs	r5, r5, r1
 800bfe6:	f025 0503 	bic.w	r5, r5, #3
 800bfea:	3508      	adds	r5, #8
 800bfec:	2d0c      	cmp	r5, #12
 800bfee:	bf38      	it	cc
 800bff0:	250c      	movcc	r5, #12
 800bff2:	4629      	mov	r1, r5
 800bff4:	4638      	mov	r0, r7
 800bff6:	f7ff ffa5 	bl	800bf44 <sbrk_aligned>
 800bffa:	3001      	adds	r0, #1
 800bffc:	d02b      	beq.n	800c056 <_malloc_r+0xd2>
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	442b      	add	r3, r5
 800c002:	6023      	str	r3, [r4, #0]
 800c004:	e00e      	b.n	800c024 <_malloc_r+0xa0>
 800c006:	6822      	ldr	r2, [r4, #0]
 800c008:	1b52      	subs	r2, r2, r5
 800c00a:	d41e      	bmi.n	800c04a <_malloc_r+0xc6>
 800c00c:	2a0b      	cmp	r2, #11
 800c00e:	d916      	bls.n	800c03e <_malloc_r+0xba>
 800c010:	1961      	adds	r1, r4, r5
 800c012:	42a3      	cmp	r3, r4
 800c014:	6025      	str	r5, [r4, #0]
 800c016:	bf18      	it	ne
 800c018:	6059      	strne	r1, [r3, #4]
 800c01a:	6863      	ldr	r3, [r4, #4]
 800c01c:	bf08      	it	eq
 800c01e:	6031      	streq	r1, [r6, #0]
 800c020:	5162      	str	r2, [r4, r5]
 800c022:	604b      	str	r3, [r1, #4]
 800c024:	4638      	mov	r0, r7
 800c026:	f104 060b 	add.w	r6, r4, #11
 800c02a:	f000 fa07 	bl	800c43c <__malloc_unlock>
 800c02e:	f026 0607 	bic.w	r6, r6, #7
 800c032:	1d23      	adds	r3, r4, #4
 800c034:	1af2      	subs	r2, r6, r3
 800c036:	d0b6      	beq.n	800bfa6 <_malloc_r+0x22>
 800c038:	1b9b      	subs	r3, r3, r6
 800c03a:	50a3      	str	r3, [r4, r2]
 800c03c:	e7b3      	b.n	800bfa6 <_malloc_r+0x22>
 800c03e:	6862      	ldr	r2, [r4, #4]
 800c040:	42a3      	cmp	r3, r4
 800c042:	bf0c      	ite	eq
 800c044:	6032      	streq	r2, [r6, #0]
 800c046:	605a      	strne	r2, [r3, #4]
 800c048:	e7ec      	b.n	800c024 <_malloc_r+0xa0>
 800c04a:	4623      	mov	r3, r4
 800c04c:	6864      	ldr	r4, [r4, #4]
 800c04e:	e7b2      	b.n	800bfb6 <_malloc_r+0x32>
 800c050:	4634      	mov	r4, r6
 800c052:	6876      	ldr	r6, [r6, #4]
 800c054:	e7b9      	b.n	800bfca <_malloc_r+0x46>
 800c056:	230c      	movs	r3, #12
 800c058:	603b      	str	r3, [r7, #0]
 800c05a:	4638      	mov	r0, r7
 800c05c:	f000 f9ee 	bl	800c43c <__malloc_unlock>
 800c060:	e7a1      	b.n	800bfa6 <_malloc_r+0x22>
 800c062:	6025      	str	r5, [r4, #0]
 800c064:	e7de      	b.n	800c024 <_malloc_r+0xa0>
 800c066:	bf00      	nop
 800c068:	24000710 	.word	0x24000710

0800c06c <__ssputs_r>:
 800c06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c070:	688e      	ldr	r6, [r1, #8]
 800c072:	429e      	cmp	r6, r3
 800c074:	4682      	mov	sl, r0
 800c076:	460c      	mov	r4, r1
 800c078:	4690      	mov	r8, r2
 800c07a:	461f      	mov	r7, r3
 800c07c:	d838      	bhi.n	800c0f0 <__ssputs_r+0x84>
 800c07e:	898a      	ldrh	r2, [r1, #12]
 800c080:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c084:	d032      	beq.n	800c0ec <__ssputs_r+0x80>
 800c086:	6825      	ldr	r5, [r4, #0]
 800c088:	6909      	ldr	r1, [r1, #16]
 800c08a:	eba5 0901 	sub.w	r9, r5, r1
 800c08e:	6965      	ldr	r5, [r4, #20]
 800c090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c098:	3301      	adds	r3, #1
 800c09a:	444b      	add	r3, r9
 800c09c:	106d      	asrs	r5, r5, #1
 800c09e:	429d      	cmp	r5, r3
 800c0a0:	bf38      	it	cc
 800c0a2:	461d      	movcc	r5, r3
 800c0a4:	0553      	lsls	r3, r2, #21
 800c0a6:	d531      	bpl.n	800c10c <__ssputs_r+0xa0>
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	f7ff ff6b 	bl	800bf84 <_malloc_r>
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	b950      	cbnz	r0, 800c0c8 <__ssputs_r+0x5c>
 800c0b2:	230c      	movs	r3, #12
 800c0b4:	f8ca 3000 	str.w	r3, [sl]
 800c0b8:	89a3      	ldrh	r3, [r4, #12]
 800c0ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0be:	81a3      	strh	r3, [r4, #12]
 800c0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0c8:	6921      	ldr	r1, [r4, #16]
 800c0ca:	464a      	mov	r2, r9
 800c0cc:	f7ff fa0c 	bl	800b4e8 <memcpy>
 800c0d0:	89a3      	ldrh	r3, [r4, #12]
 800c0d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0da:	81a3      	strh	r3, [r4, #12]
 800c0dc:	6126      	str	r6, [r4, #16]
 800c0de:	6165      	str	r5, [r4, #20]
 800c0e0:	444e      	add	r6, r9
 800c0e2:	eba5 0509 	sub.w	r5, r5, r9
 800c0e6:	6026      	str	r6, [r4, #0]
 800c0e8:	60a5      	str	r5, [r4, #8]
 800c0ea:	463e      	mov	r6, r7
 800c0ec:	42be      	cmp	r6, r7
 800c0ee:	d900      	bls.n	800c0f2 <__ssputs_r+0x86>
 800c0f0:	463e      	mov	r6, r7
 800c0f2:	6820      	ldr	r0, [r4, #0]
 800c0f4:	4632      	mov	r2, r6
 800c0f6:	4641      	mov	r1, r8
 800c0f8:	f000 f980 	bl	800c3fc <memmove>
 800c0fc:	68a3      	ldr	r3, [r4, #8]
 800c0fe:	1b9b      	subs	r3, r3, r6
 800c100:	60a3      	str	r3, [r4, #8]
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	4433      	add	r3, r6
 800c106:	6023      	str	r3, [r4, #0]
 800c108:	2000      	movs	r0, #0
 800c10a:	e7db      	b.n	800c0c4 <__ssputs_r+0x58>
 800c10c:	462a      	mov	r2, r5
 800c10e:	f000 f99b 	bl	800c448 <_realloc_r>
 800c112:	4606      	mov	r6, r0
 800c114:	2800      	cmp	r0, #0
 800c116:	d1e1      	bne.n	800c0dc <__ssputs_r+0x70>
 800c118:	6921      	ldr	r1, [r4, #16]
 800c11a:	4650      	mov	r0, sl
 800c11c:	f7ff fec6 	bl	800beac <_free_r>
 800c120:	e7c7      	b.n	800c0b2 <__ssputs_r+0x46>
	...

0800c124 <_svfiprintf_r>:
 800c124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c128:	4698      	mov	r8, r3
 800c12a:	898b      	ldrh	r3, [r1, #12]
 800c12c:	061b      	lsls	r3, r3, #24
 800c12e:	b09d      	sub	sp, #116	; 0x74
 800c130:	4607      	mov	r7, r0
 800c132:	460d      	mov	r5, r1
 800c134:	4614      	mov	r4, r2
 800c136:	d50e      	bpl.n	800c156 <_svfiprintf_r+0x32>
 800c138:	690b      	ldr	r3, [r1, #16]
 800c13a:	b963      	cbnz	r3, 800c156 <_svfiprintf_r+0x32>
 800c13c:	2140      	movs	r1, #64	; 0x40
 800c13e:	f7ff ff21 	bl	800bf84 <_malloc_r>
 800c142:	6028      	str	r0, [r5, #0]
 800c144:	6128      	str	r0, [r5, #16]
 800c146:	b920      	cbnz	r0, 800c152 <_svfiprintf_r+0x2e>
 800c148:	230c      	movs	r3, #12
 800c14a:	603b      	str	r3, [r7, #0]
 800c14c:	f04f 30ff 	mov.w	r0, #4294967295
 800c150:	e0d1      	b.n	800c2f6 <_svfiprintf_r+0x1d2>
 800c152:	2340      	movs	r3, #64	; 0x40
 800c154:	616b      	str	r3, [r5, #20]
 800c156:	2300      	movs	r3, #0
 800c158:	9309      	str	r3, [sp, #36]	; 0x24
 800c15a:	2320      	movs	r3, #32
 800c15c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c160:	f8cd 800c 	str.w	r8, [sp, #12]
 800c164:	2330      	movs	r3, #48	; 0x30
 800c166:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c310 <_svfiprintf_r+0x1ec>
 800c16a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c16e:	f04f 0901 	mov.w	r9, #1
 800c172:	4623      	mov	r3, r4
 800c174:	469a      	mov	sl, r3
 800c176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c17a:	b10a      	cbz	r2, 800c180 <_svfiprintf_r+0x5c>
 800c17c:	2a25      	cmp	r2, #37	; 0x25
 800c17e:	d1f9      	bne.n	800c174 <_svfiprintf_r+0x50>
 800c180:	ebba 0b04 	subs.w	fp, sl, r4
 800c184:	d00b      	beq.n	800c19e <_svfiprintf_r+0x7a>
 800c186:	465b      	mov	r3, fp
 800c188:	4622      	mov	r2, r4
 800c18a:	4629      	mov	r1, r5
 800c18c:	4638      	mov	r0, r7
 800c18e:	f7ff ff6d 	bl	800c06c <__ssputs_r>
 800c192:	3001      	adds	r0, #1
 800c194:	f000 80aa 	beq.w	800c2ec <_svfiprintf_r+0x1c8>
 800c198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c19a:	445a      	add	r2, fp
 800c19c:	9209      	str	r2, [sp, #36]	; 0x24
 800c19e:	f89a 3000 	ldrb.w	r3, [sl]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	f000 80a2 	beq.w	800c2ec <_svfiprintf_r+0x1c8>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1b2:	f10a 0a01 	add.w	sl, sl, #1
 800c1b6:	9304      	str	r3, [sp, #16]
 800c1b8:	9307      	str	r3, [sp, #28]
 800c1ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1be:	931a      	str	r3, [sp, #104]	; 0x68
 800c1c0:	4654      	mov	r4, sl
 800c1c2:	2205      	movs	r2, #5
 800c1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1c8:	4851      	ldr	r0, [pc, #324]	; (800c310 <_svfiprintf_r+0x1ec>)
 800c1ca:	f7f4 f891 	bl	80002f0 <memchr>
 800c1ce:	9a04      	ldr	r2, [sp, #16]
 800c1d0:	b9d8      	cbnz	r0, 800c20a <_svfiprintf_r+0xe6>
 800c1d2:	06d0      	lsls	r0, r2, #27
 800c1d4:	bf44      	itt	mi
 800c1d6:	2320      	movmi	r3, #32
 800c1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1dc:	0711      	lsls	r1, r2, #28
 800c1de:	bf44      	itt	mi
 800c1e0:	232b      	movmi	r3, #43	; 0x2b
 800c1e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c1ec:	d015      	beq.n	800c21a <_svfiprintf_r+0xf6>
 800c1ee:	9a07      	ldr	r2, [sp, #28]
 800c1f0:	4654      	mov	r4, sl
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	f04f 0c0a 	mov.w	ip, #10
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1fe:	3b30      	subs	r3, #48	; 0x30
 800c200:	2b09      	cmp	r3, #9
 800c202:	d94e      	bls.n	800c2a2 <_svfiprintf_r+0x17e>
 800c204:	b1b0      	cbz	r0, 800c234 <_svfiprintf_r+0x110>
 800c206:	9207      	str	r2, [sp, #28]
 800c208:	e014      	b.n	800c234 <_svfiprintf_r+0x110>
 800c20a:	eba0 0308 	sub.w	r3, r0, r8
 800c20e:	fa09 f303 	lsl.w	r3, r9, r3
 800c212:	4313      	orrs	r3, r2
 800c214:	9304      	str	r3, [sp, #16]
 800c216:	46a2      	mov	sl, r4
 800c218:	e7d2      	b.n	800c1c0 <_svfiprintf_r+0x9c>
 800c21a:	9b03      	ldr	r3, [sp, #12]
 800c21c:	1d19      	adds	r1, r3, #4
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	9103      	str	r1, [sp, #12]
 800c222:	2b00      	cmp	r3, #0
 800c224:	bfbb      	ittet	lt
 800c226:	425b      	neglt	r3, r3
 800c228:	f042 0202 	orrlt.w	r2, r2, #2
 800c22c:	9307      	strge	r3, [sp, #28]
 800c22e:	9307      	strlt	r3, [sp, #28]
 800c230:	bfb8      	it	lt
 800c232:	9204      	strlt	r2, [sp, #16]
 800c234:	7823      	ldrb	r3, [r4, #0]
 800c236:	2b2e      	cmp	r3, #46	; 0x2e
 800c238:	d10c      	bne.n	800c254 <_svfiprintf_r+0x130>
 800c23a:	7863      	ldrb	r3, [r4, #1]
 800c23c:	2b2a      	cmp	r3, #42	; 0x2a
 800c23e:	d135      	bne.n	800c2ac <_svfiprintf_r+0x188>
 800c240:	9b03      	ldr	r3, [sp, #12]
 800c242:	1d1a      	adds	r2, r3, #4
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	9203      	str	r2, [sp, #12]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	bfb8      	it	lt
 800c24c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c250:	3402      	adds	r4, #2
 800c252:	9305      	str	r3, [sp, #20]
 800c254:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c320 <_svfiprintf_r+0x1fc>
 800c258:	7821      	ldrb	r1, [r4, #0]
 800c25a:	2203      	movs	r2, #3
 800c25c:	4650      	mov	r0, sl
 800c25e:	f7f4 f847 	bl	80002f0 <memchr>
 800c262:	b140      	cbz	r0, 800c276 <_svfiprintf_r+0x152>
 800c264:	2340      	movs	r3, #64	; 0x40
 800c266:	eba0 000a 	sub.w	r0, r0, sl
 800c26a:	fa03 f000 	lsl.w	r0, r3, r0
 800c26e:	9b04      	ldr	r3, [sp, #16]
 800c270:	4303      	orrs	r3, r0
 800c272:	3401      	adds	r4, #1
 800c274:	9304      	str	r3, [sp, #16]
 800c276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c27a:	4826      	ldr	r0, [pc, #152]	; (800c314 <_svfiprintf_r+0x1f0>)
 800c27c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c280:	2206      	movs	r2, #6
 800c282:	f7f4 f835 	bl	80002f0 <memchr>
 800c286:	2800      	cmp	r0, #0
 800c288:	d038      	beq.n	800c2fc <_svfiprintf_r+0x1d8>
 800c28a:	4b23      	ldr	r3, [pc, #140]	; (800c318 <_svfiprintf_r+0x1f4>)
 800c28c:	bb1b      	cbnz	r3, 800c2d6 <_svfiprintf_r+0x1b2>
 800c28e:	9b03      	ldr	r3, [sp, #12]
 800c290:	3307      	adds	r3, #7
 800c292:	f023 0307 	bic.w	r3, r3, #7
 800c296:	3308      	adds	r3, #8
 800c298:	9303      	str	r3, [sp, #12]
 800c29a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c29c:	4433      	add	r3, r6
 800c29e:	9309      	str	r3, [sp, #36]	; 0x24
 800c2a0:	e767      	b.n	800c172 <_svfiprintf_r+0x4e>
 800c2a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2a6:	460c      	mov	r4, r1
 800c2a8:	2001      	movs	r0, #1
 800c2aa:	e7a5      	b.n	800c1f8 <_svfiprintf_r+0xd4>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	3401      	adds	r4, #1
 800c2b0:	9305      	str	r3, [sp, #20]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	f04f 0c0a 	mov.w	ip, #10
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2be:	3a30      	subs	r2, #48	; 0x30
 800c2c0:	2a09      	cmp	r2, #9
 800c2c2:	d903      	bls.n	800c2cc <_svfiprintf_r+0x1a8>
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d0c5      	beq.n	800c254 <_svfiprintf_r+0x130>
 800c2c8:	9105      	str	r1, [sp, #20]
 800c2ca:	e7c3      	b.n	800c254 <_svfiprintf_r+0x130>
 800c2cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e7f0      	b.n	800c2b8 <_svfiprintf_r+0x194>
 800c2d6:	ab03      	add	r3, sp, #12
 800c2d8:	9300      	str	r3, [sp, #0]
 800c2da:	462a      	mov	r2, r5
 800c2dc:	4b0f      	ldr	r3, [pc, #60]	; (800c31c <_svfiprintf_r+0x1f8>)
 800c2de:	a904      	add	r1, sp, #16
 800c2e0:	4638      	mov	r0, r7
 800c2e2:	f7fc fb41 	bl	8008968 <_printf_float>
 800c2e6:	1c42      	adds	r2, r0, #1
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	d1d6      	bne.n	800c29a <_svfiprintf_r+0x176>
 800c2ec:	89ab      	ldrh	r3, [r5, #12]
 800c2ee:	065b      	lsls	r3, r3, #25
 800c2f0:	f53f af2c 	bmi.w	800c14c <_svfiprintf_r+0x28>
 800c2f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2f6:	b01d      	add	sp, #116	; 0x74
 800c2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2fc:	ab03      	add	r3, sp, #12
 800c2fe:	9300      	str	r3, [sp, #0]
 800c300:	462a      	mov	r2, r5
 800c302:	4b06      	ldr	r3, [pc, #24]	; (800c31c <_svfiprintf_r+0x1f8>)
 800c304:	a904      	add	r1, sp, #16
 800c306:	4638      	mov	r0, r7
 800c308:	f7fc fdba 	bl	8008e80 <_printf_i>
 800c30c:	e7eb      	b.n	800c2e6 <_svfiprintf_r+0x1c2>
 800c30e:	bf00      	nop
 800c310:	0800eb2c 	.word	0x0800eb2c
 800c314:	0800eb36 	.word	0x0800eb36
 800c318:	08008969 	.word	0x08008969
 800c31c:	0800c06d 	.word	0x0800c06d
 800c320:	0800eb32 	.word	0x0800eb32
 800c324:	00000000 	.word	0x00000000

0800c328 <nan>:
 800c328:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c330 <nan+0x8>
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	00000000 	.word	0x00000000
 800c334:	7ff80000 	.word	0x7ff80000

0800c338 <_sbrk_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4d06      	ldr	r5, [pc, #24]	; (800c354 <_sbrk_r+0x1c>)
 800c33c:	2300      	movs	r3, #0
 800c33e:	4604      	mov	r4, r0
 800c340:	4608      	mov	r0, r1
 800c342:	602b      	str	r3, [r5, #0]
 800c344:	f7f5 fef2 	bl	800212c <_sbrk>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	d102      	bne.n	800c352 <_sbrk_r+0x1a>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	b103      	cbz	r3, 800c352 <_sbrk_r+0x1a>
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	24000718 	.word	0x24000718

0800c358 <strncmp>:
 800c358:	b510      	push	{r4, lr}
 800c35a:	b17a      	cbz	r2, 800c37c <strncmp+0x24>
 800c35c:	4603      	mov	r3, r0
 800c35e:	3901      	subs	r1, #1
 800c360:	1884      	adds	r4, r0, r2
 800c362:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c366:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c36a:	4290      	cmp	r0, r2
 800c36c:	d101      	bne.n	800c372 <strncmp+0x1a>
 800c36e:	42a3      	cmp	r3, r4
 800c370:	d101      	bne.n	800c376 <strncmp+0x1e>
 800c372:	1a80      	subs	r0, r0, r2
 800c374:	bd10      	pop	{r4, pc}
 800c376:	2800      	cmp	r0, #0
 800c378:	d1f3      	bne.n	800c362 <strncmp+0xa>
 800c37a:	e7fa      	b.n	800c372 <strncmp+0x1a>
 800c37c:	4610      	mov	r0, r2
 800c37e:	e7f9      	b.n	800c374 <strncmp+0x1c>

0800c380 <__ascii_wctomb>:
 800c380:	b149      	cbz	r1, 800c396 <__ascii_wctomb+0x16>
 800c382:	2aff      	cmp	r2, #255	; 0xff
 800c384:	bf85      	ittet	hi
 800c386:	238a      	movhi	r3, #138	; 0x8a
 800c388:	6003      	strhi	r3, [r0, #0]
 800c38a:	700a      	strbls	r2, [r1, #0]
 800c38c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c390:	bf98      	it	ls
 800c392:	2001      	movls	r0, #1
 800c394:	4770      	bx	lr
 800c396:	4608      	mov	r0, r1
 800c398:	4770      	bx	lr
	...

0800c39c <__assert_func>:
 800c39c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c39e:	4614      	mov	r4, r2
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	4b09      	ldr	r3, [pc, #36]	; (800c3c8 <__assert_func+0x2c>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4605      	mov	r5, r0
 800c3a8:	68d8      	ldr	r0, [r3, #12]
 800c3aa:	b14c      	cbz	r4, 800c3c0 <__assert_func+0x24>
 800c3ac:	4b07      	ldr	r3, [pc, #28]	; (800c3cc <__assert_func+0x30>)
 800c3ae:	9100      	str	r1, [sp, #0]
 800c3b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3b4:	4906      	ldr	r1, [pc, #24]	; (800c3d0 <__assert_func+0x34>)
 800c3b6:	462b      	mov	r3, r5
 800c3b8:	f000 f80e 	bl	800c3d8 <fiprintf>
 800c3bc:	f000 fa8c 	bl	800c8d8 <abort>
 800c3c0:	4b04      	ldr	r3, [pc, #16]	; (800c3d4 <__assert_func+0x38>)
 800c3c2:	461c      	mov	r4, r3
 800c3c4:	e7f3      	b.n	800c3ae <__assert_func+0x12>
 800c3c6:	bf00      	nop
 800c3c8:	24000014 	.word	0x24000014
 800c3cc:	0800eb3d 	.word	0x0800eb3d
 800c3d0:	0800eb4a 	.word	0x0800eb4a
 800c3d4:	0800eb78 	.word	0x0800eb78

0800c3d8 <fiprintf>:
 800c3d8:	b40e      	push	{r1, r2, r3}
 800c3da:	b503      	push	{r0, r1, lr}
 800c3dc:	4601      	mov	r1, r0
 800c3de:	ab03      	add	r3, sp, #12
 800c3e0:	4805      	ldr	r0, [pc, #20]	; (800c3f8 <fiprintf+0x20>)
 800c3e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3e6:	6800      	ldr	r0, [r0, #0]
 800c3e8:	9301      	str	r3, [sp, #4]
 800c3ea:	f000 f885 	bl	800c4f8 <_vfiprintf_r>
 800c3ee:	b002      	add	sp, #8
 800c3f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3f4:	b003      	add	sp, #12
 800c3f6:	4770      	bx	lr
 800c3f8:	24000014 	.word	0x24000014

0800c3fc <memmove>:
 800c3fc:	4288      	cmp	r0, r1
 800c3fe:	b510      	push	{r4, lr}
 800c400:	eb01 0402 	add.w	r4, r1, r2
 800c404:	d902      	bls.n	800c40c <memmove+0x10>
 800c406:	4284      	cmp	r4, r0
 800c408:	4623      	mov	r3, r4
 800c40a:	d807      	bhi.n	800c41c <memmove+0x20>
 800c40c:	1e43      	subs	r3, r0, #1
 800c40e:	42a1      	cmp	r1, r4
 800c410:	d008      	beq.n	800c424 <memmove+0x28>
 800c412:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c416:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c41a:	e7f8      	b.n	800c40e <memmove+0x12>
 800c41c:	4402      	add	r2, r0
 800c41e:	4601      	mov	r1, r0
 800c420:	428a      	cmp	r2, r1
 800c422:	d100      	bne.n	800c426 <memmove+0x2a>
 800c424:	bd10      	pop	{r4, pc}
 800c426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c42a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c42e:	e7f7      	b.n	800c420 <memmove+0x24>

0800c430 <__malloc_lock>:
 800c430:	4801      	ldr	r0, [pc, #4]	; (800c438 <__malloc_lock+0x8>)
 800c432:	f000 bc11 	b.w	800cc58 <__retarget_lock_acquire_recursive>
 800c436:	bf00      	nop
 800c438:	2400071c 	.word	0x2400071c

0800c43c <__malloc_unlock>:
 800c43c:	4801      	ldr	r0, [pc, #4]	; (800c444 <__malloc_unlock+0x8>)
 800c43e:	f000 bc0c 	b.w	800cc5a <__retarget_lock_release_recursive>
 800c442:	bf00      	nop
 800c444:	2400071c 	.word	0x2400071c

0800c448 <_realloc_r>:
 800c448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c44c:	4680      	mov	r8, r0
 800c44e:	4614      	mov	r4, r2
 800c450:	460e      	mov	r6, r1
 800c452:	b921      	cbnz	r1, 800c45e <_realloc_r+0x16>
 800c454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c458:	4611      	mov	r1, r2
 800c45a:	f7ff bd93 	b.w	800bf84 <_malloc_r>
 800c45e:	b92a      	cbnz	r2, 800c46c <_realloc_r+0x24>
 800c460:	f7ff fd24 	bl	800beac <_free_r>
 800c464:	4625      	mov	r5, r4
 800c466:	4628      	mov	r0, r5
 800c468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c46c:	f000 fc5c 	bl	800cd28 <_malloc_usable_size_r>
 800c470:	4284      	cmp	r4, r0
 800c472:	4607      	mov	r7, r0
 800c474:	d802      	bhi.n	800c47c <_realloc_r+0x34>
 800c476:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c47a:	d812      	bhi.n	800c4a2 <_realloc_r+0x5a>
 800c47c:	4621      	mov	r1, r4
 800c47e:	4640      	mov	r0, r8
 800c480:	f7ff fd80 	bl	800bf84 <_malloc_r>
 800c484:	4605      	mov	r5, r0
 800c486:	2800      	cmp	r0, #0
 800c488:	d0ed      	beq.n	800c466 <_realloc_r+0x1e>
 800c48a:	42bc      	cmp	r4, r7
 800c48c:	4622      	mov	r2, r4
 800c48e:	4631      	mov	r1, r6
 800c490:	bf28      	it	cs
 800c492:	463a      	movcs	r2, r7
 800c494:	f7ff f828 	bl	800b4e8 <memcpy>
 800c498:	4631      	mov	r1, r6
 800c49a:	4640      	mov	r0, r8
 800c49c:	f7ff fd06 	bl	800beac <_free_r>
 800c4a0:	e7e1      	b.n	800c466 <_realloc_r+0x1e>
 800c4a2:	4635      	mov	r5, r6
 800c4a4:	e7df      	b.n	800c466 <_realloc_r+0x1e>

0800c4a6 <__sfputc_r>:
 800c4a6:	6893      	ldr	r3, [r2, #8]
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	b410      	push	{r4}
 800c4ae:	6093      	str	r3, [r2, #8]
 800c4b0:	da08      	bge.n	800c4c4 <__sfputc_r+0x1e>
 800c4b2:	6994      	ldr	r4, [r2, #24]
 800c4b4:	42a3      	cmp	r3, r4
 800c4b6:	db01      	blt.n	800c4bc <__sfputc_r+0x16>
 800c4b8:	290a      	cmp	r1, #10
 800c4ba:	d103      	bne.n	800c4c4 <__sfputc_r+0x1e>
 800c4bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4c0:	f000 b94a 	b.w	800c758 <__swbuf_r>
 800c4c4:	6813      	ldr	r3, [r2, #0]
 800c4c6:	1c58      	adds	r0, r3, #1
 800c4c8:	6010      	str	r0, [r2, #0]
 800c4ca:	7019      	strb	r1, [r3, #0]
 800c4cc:	4608      	mov	r0, r1
 800c4ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <__sfputs_r>:
 800c4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d6:	4606      	mov	r6, r0
 800c4d8:	460f      	mov	r7, r1
 800c4da:	4614      	mov	r4, r2
 800c4dc:	18d5      	adds	r5, r2, r3
 800c4de:	42ac      	cmp	r4, r5
 800c4e0:	d101      	bne.n	800c4e6 <__sfputs_r+0x12>
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	e007      	b.n	800c4f6 <__sfputs_r+0x22>
 800c4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ea:	463a      	mov	r2, r7
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	f7ff ffda 	bl	800c4a6 <__sfputc_r>
 800c4f2:	1c43      	adds	r3, r0, #1
 800c4f4:	d1f3      	bne.n	800c4de <__sfputs_r+0xa>
 800c4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4f8 <_vfiprintf_r>:
 800c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fc:	460d      	mov	r5, r1
 800c4fe:	b09d      	sub	sp, #116	; 0x74
 800c500:	4614      	mov	r4, r2
 800c502:	4698      	mov	r8, r3
 800c504:	4606      	mov	r6, r0
 800c506:	b118      	cbz	r0, 800c510 <_vfiprintf_r+0x18>
 800c508:	6983      	ldr	r3, [r0, #24]
 800c50a:	b90b      	cbnz	r3, 800c510 <_vfiprintf_r+0x18>
 800c50c:	f000 fb06 	bl	800cb1c <__sinit>
 800c510:	4b89      	ldr	r3, [pc, #548]	; (800c738 <_vfiprintf_r+0x240>)
 800c512:	429d      	cmp	r5, r3
 800c514:	d11b      	bne.n	800c54e <_vfiprintf_r+0x56>
 800c516:	6875      	ldr	r5, [r6, #4]
 800c518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c51a:	07d9      	lsls	r1, r3, #31
 800c51c:	d405      	bmi.n	800c52a <_vfiprintf_r+0x32>
 800c51e:	89ab      	ldrh	r3, [r5, #12]
 800c520:	059a      	lsls	r2, r3, #22
 800c522:	d402      	bmi.n	800c52a <_vfiprintf_r+0x32>
 800c524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c526:	f000 fb97 	bl	800cc58 <__retarget_lock_acquire_recursive>
 800c52a:	89ab      	ldrh	r3, [r5, #12]
 800c52c:	071b      	lsls	r3, r3, #28
 800c52e:	d501      	bpl.n	800c534 <_vfiprintf_r+0x3c>
 800c530:	692b      	ldr	r3, [r5, #16]
 800c532:	b9eb      	cbnz	r3, 800c570 <_vfiprintf_r+0x78>
 800c534:	4629      	mov	r1, r5
 800c536:	4630      	mov	r0, r6
 800c538:	f000 f960 	bl	800c7fc <__swsetup_r>
 800c53c:	b1c0      	cbz	r0, 800c570 <_vfiprintf_r+0x78>
 800c53e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c540:	07dc      	lsls	r4, r3, #31
 800c542:	d50e      	bpl.n	800c562 <_vfiprintf_r+0x6a>
 800c544:	f04f 30ff 	mov.w	r0, #4294967295
 800c548:	b01d      	add	sp, #116	; 0x74
 800c54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c54e:	4b7b      	ldr	r3, [pc, #492]	; (800c73c <_vfiprintf_r+0x244>)
 800c550:	429d      	cmp	r5, r3
 800c552:	d101      	bne.n	800c558 <_vfiprintf_r+0x60>
 800c554:	68b5      	ldr	r5, [r6, #8]
 800c556:	e7df      	b.n	800c518 <_vfiprintf_r+0x20>
 800c558:	4b79      	ldr	r3, [pc, #484]	; (800c740 <_vfiprintf_r+0x248>)
 800c55a:	429d      	cmp	r5, r3
 800c55c:	bf08      	it	eq
 800c55e:	68f5      	ldreq	r5, [r6, #12]
 800c560:	e7da      	b.n	800c518 <_vfiprintf_r+0x20>
 800c562:	89ab      	ldrh	r3, [r5, #12]
 800c564:	0598      	lsls	r0, r3, #22
 800c566:	d4ed      	bmi.n	800c544 <_vfiprintf_r+0x4c>
 800c568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c56a:	f000 fb76 	bl	800cc5a <__retarget_lock_release_recursive>
 800c56e:	e7e9      	b.n	800c544 <_vfiprintf_r+0x4c>
 800c570:	2300      	movs	r3, #0
 800c572:	9309      	str	r3, [sp, #36]	; 0x24
 800c574:	2320      	movs	r3, #32
 800c576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c57a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c57e:	2330      	movs	r3, #48	; 0x30
 800c580:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c744 <_vfiprintf_r+0x24c>
 800c584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c588:	f04f 0901 	mov.w	r9, #1
 800c58c:	4623      	mov	r3, r4
 800c58e:	469a      	mov	sl, r3
 800c590:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c594:	b10a      	cbz	r2, 800c59a <_vfiprintf_r+0xa2>
 800c596:	2a25      	cmp	r2, #37	; 0x25
 800c598:	d1f9      	bne.n	800c58e <_vfiprintf_r+0x96>
 800c59a:	ebba 0b04 	subs.w	fp, sl, r4
 800c59e:	d00b      	beq.n	800c5b8 <_vfiprintf_r+0xc0>
 800c5a0:	465b      	mov	r3, fp
 800c5a2:	4622      	mov	r2, r4
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f7ff ff94 	bl	800c4d4 <__sfputs_r>
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	f000 80aa 	beq.w	800c706 <_vfiprintf_r+0x20e>
 800c5b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5b4:	445a      	add	r2, fp
 800c5b6:	9209      	str	r2, [sp, #36]	; 0x24
 800c5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	f000 80a2 	beq.w	800c706 <_vfiprintf_r+0x20e>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5cc:	f10a 0a01 	add.w	sl, sl, #1
 800c5d0:	9304      	str	r3, [sp, #16]
 800c5d2:	9307      	str	r3, [sp, #28]
 800c5d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5d8:	931a      	str	r3, [sp, #104]	; 0x68
 800c5da:	4654      	mov	r4, sl
 800c5dc:	2205      	movs	r2, #5
 800c5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e2:	4858      	ldr	r0, [pc, #352]	; (800c744 <_vfiprintf_r+0x24c>)
 800c5e4:	f7f3 fe84 	bl	80002f0 <memchr>
 800c5e8:	9a04      	ldr	r2, [sp, #16]
 800c5ea:	b9d8      	cbnz	r0, 800c624 <_vfiprintf_r+0x12c>
 800c5ec:	06d1      	lsls	r1, r2, #27
 800c5ee:	bf44      	itt	mi
 800c5f0:	2320      	movmi	r3, #32
 800c5f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5f6:	0713      	lsls	r3, r2, #28
 800c5f8:	bf44      	itt	mi
 800c5fa:	232b      	movmi	r3, #43	; 0x2b
 800c5fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c600:	f89a 3000 	ldrb.w	r3, [sl]
 800c604:	2b2a      	cmp	r3, #42	; 0x2a
 800c606:	d015      	beq.n	800c634 <_vfiprintf_r+0x13c>
 800c608:	9a07      	ldr	r2, [sp, #28]
 800c60a:	4654      	mov	r4, sl
 800c60c:	2000      	movs	r0, #0
 800c60e:	f04f 0c0a 	mov.w	ip, #10
 800c612:	4621      	mov	r1, r4
 800c614:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c618:	3b30      	subs	r3, #48	; 0x30
 800c61a:	2b09      	cmp	r3, #9
 800c61c:	d94e      	bls.n	800c6bc <_vfiprintf_r+0x1c4>
 800c61e:	b1b0      	cbz	r0, 800c64e <_vfiprintf_r+0x156>
 800c620:	9207      	str	r2, [sp, #28]
 800c622:	e014      	b.n	800c64e <_vfiprintf_r+0x156>
 800c624:	eba0 0308 	sub.w	r3, r0, r8
 800c628:	fa09 f303 	lsl.w	r3, r9, r3
 800c62c:	4313      	orrs	r3, r2
 800c62e:	9304      	str	r3, [sp, #16]
 800c630:	46a2      	mov	sl, r4
 800c632:	e7d2      	b.n	800c5da <_vfiprintf_r+0xe2>
 800c634:	9b03      	ldr	r3, [sp, #12]
 800c636:	1d19      	adds	r1, r3, #4
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	9103      	str	r1, [sp, #12]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	bfbb      	ittet	lt
 800c640:	425b      	neglt	r3, r3
 800c642:	f042 0202 	orrlt.w	r2, r2, #2
 800c646:	9307      	strge	r3, [sp, #28]
 800c648:	9307      	strlt	r3, [sp, #28]
 800c64a:	bfb8      	it	lt
 800c64c:	9204      	strlt	r2, [sp, #16]
 800c64e:	7823      	ldrb	r3, [r4, #0]
 800c650:	2b2e      	cmp	r3, #46	; 0x2e
 800c652:	d10c      	bne.n	800c66e <_vfiprintf_r+0x176>
 800c654:	7863      	ldrb	r3, [r4, #1]
 800c656:	2b2a      	cmp	r3, #42	; 0x2a
 800c658:	d135      	bne.n	800c6c6 <_vfiprintf_r+0x1ce>
 800c65a:	9b03      	ldr	r3, [sp, #12]
 800c65c:	1d1a      	adds	r2, r3, #4
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	9203      	str	r2, [sp, #12]
 800c662:	2b00      	cmp	r3, #0
 800c664:	bfb8      	it	lt
 800c666:	f04f 33ff 	movlt.w	r3, #4294967295
 800c66a:	3402      	adds	r4, #2
 800c66c:	9305      	str	r3, [sp, #20]
 800c66e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c754 <_vfiprintf_r+0x25c>
 800c672:	7821      	ldrb	r1, [r4, #0]
 800c674:	2203      	movs	r2, #3
 800c676:	4650      	mov	r0, sl
 800c678:	f7f3 fe3a 	bl	80002f0 <memchr>
 800c67c:	b140      	cbz	r0, 800c690 <_vfiprintf_r+0x198>
 800c67e:	2340      	movs	r3, #64	; 0x40
 800c680:	eba0 000a 	sub.w	r0, r0, sl
 800c684:	fa03 f000 	lsl.w	r0, r3, r0
 800c688:	9b04      	ldr	r3, [sp, #16]
 800c68a:	4303      	orrs	r3, r0
 800c68c:	3401      	adds	r4, #1
 800c68e:	9304      	str	r3, [sp, #16]
 800c690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c694:	482c      	ldr	r0, [pc, #176]	; (800c748 <_vfiprintf_r+0x250>)
 800c696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c69a:	2206      	movs	r2, #6
 800c69c:	f7f3 fe28 	bl	80002f0 <memchr>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d03f      	beq.n	800c724 <_vfiprintf_r+0x22c>
 800c6a4:	4b29      	ldr	r3, [pc, #164]	; (800c74c <_vfiprintf_r+0x254>)
 800c6a6:	bb1b      	cbnz	r3, 800c6f0 <_vfiprintf_r+0x1f8>
 800c6a8:	9b03      	ldr	r3, [sp, #12]
 800c6aa:	3307      	adds	r3, #7
 800c6ac:	f023 0307 	bic.w	r3, r3, #7
 800c6b0:	3308      	adds	r3, #8
 800c6b2:	9303      	str	r3, [sp, #12]
 800c6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6b6:	443b      	add	r3, r7
 800c6b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c6ba:	e767      	b.n	800c58c <_vfiprintf_r+0x94>
 800c6bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	2001      	movs	r0, #1
 800c6c4:	e7a5      	b.n	800c612 <_vfiprintf_r+0x11a>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	3401      	adds	r4, #1
 800c6ca:	9305      	str	r3, [sp, #20]
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	f04f 0c0a 	mov.w	ip, #10
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6d8:	3a30      	subs	r2, #48	; 0x30
 800c6da:	2a09      	cmp	r2, #9
 800c6dc:	d903      	bls.n	800c6e6 <_vfiprintf_r+0x1ee>
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d0c5      	beq.n	800c66e <_vfiprintf_r+0x176>
 800c6e2:	9105      	str	r1, [sp, #20]
 800c6e4:	e7c3      	b.n	800c66e <_vfiprintf_r+0x176>
 800c6e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	e7f0      	b.n	800c6d2 <_vfiprintf_r+0x1da>
 800c6f0:	ab03      	add	r3, sp, #12
 800c6f2:	9300      	str	r3, [sp, #0]
 800c6f4:	462a      	mov	r2, r5
 800c6f6:	4b16      	ldr	r3, [pc, #88]	; (800c750 <_vfiprintf_r+0x258>)
 800c6f8:	a904      	add	r1, sp, #16
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	f7fc f934 	bl	8008968 <_printf_float>
 800c700:	4607      	mov	r7, r0
 800c702:	1c78      	adds	r0, r7, #1
 800c704:	d1d6      	bne.n	800c6b4 <_vfiprintf_r+0x1bc>
 800c706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c708:	07d9      	lsls	r1, r3, #31
 800c70a:	d405      	bmi.n	800c718 <_vfiprintf_r+0x220>
 800c70c:	89ab      	ldrh	r3, [r5, #12]
 800c70e:	059a      	lsls	r2, r3, #22
 800c710:	d402      	bmi.n	800c718 <_vfiprintf_r+0x220>
 800c712:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c714:	f000 faa1 	bl	800cc5a <__retarget_lock_release_recursive>
 800c718:	89ab      	ldrh	r3, [r5, #12]
 800c71a:	065b      	lsls	r3, r3, #25
 800c71c:	f53f af12 	bmi.w	800c544 <_vfiprintf_r+0x4c>
 800c720:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c722:	e711      	b.n	800c548 <_vfiprintf_r+0x50>
 800c724:	ab03      	add	r3, sp, #12
 800c726:	9300      	str	r3, [sp, #0]
 800c728:	462a      	mov	r2, r5
 800c72a:	4b09      	ldr	r3, [pc, #36]	; (800c750 <_vfiprintf_r+0x258>)
 800c72c:	a904      	add	r1, sp, #16
 800c72e:	4630      	mov	r0, r6
 800c730:	f7fc fba6 	bl	8008e80 <_printf_i>
 800c734:	e7e4      	b.n	800c700 <_vfiprintf_r+0x208>
 800c736:	bf00      	nop
 800c738:	0800eb9c 	.word	0x0800eb9c
 800c73c:	0800ebbc 	.word	0x0800ebbc
 800c740:	0800eb7c 	.word	0x0800eb7c
 800c744:	0800eb2c 	.word	0x0800eb2c
 800c748:	0800eb36 	.word	0x0800eb36
 800c74c:	08008969 	.word	0x08008969
 800c750:	0800c4d5 	.word	0x0800c4d5
 800c754:	0800eb32 	.word	0x0800eb32

0800c758 <__swbuf_r>:
 800c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75a:	460e      	mov	r6, r1
 800c75c:	4614      	mov	r4, r2
 800c75e:	4605      	mov	r5, r0
 800c760:	b118      	cbz	r0, 800c76a <__swbuf_r+0x12>
 800c762:	6983      	ldr	r3, [r0, #24]
 800c764:	b90b      	cbnz	r3, 800c76a <__swbuf_r+0x12>
 800c766:	f000 f9d9 	bl	800cb1c <__sinit>
 800c76a:	4b21      	ldr	r3, [pc, #132]	; (800c7f0 <__swbuf_r+0x98>)
 800c76c:	429c      	cmp	r4, r3
 800c76e:	d12b      	bne.n	800c7c8 <__swbuf_r+0x70>
 800c770:	686c      	ldr	r4, [r5, #4]
 800c772:	69a3      	ldr	r3, [r4, #24]
 800c774:	60a3      	str	r3, [r4, #8]
 800c776:	89a3      	ldrh	r3, [r4, #12]
 800c778:	071a      	lsls	r2, r3, #28
 800c77a:	d52f      	bpl.n	800c7dc <__swbuf_r+0x84>
 800c77c:	6923      	ldr	r3, [r4, #16]
 800c77e:	b36b      	cbz	r3, 800c7dc <__swbuf_r+0x84>
 800c780:	6923      	ldr	r3, [r4, #16]
 800c782:	6820      	ldr	r0, [r4, #0]
 800c784:	1ac0      	subs	r0, r0, r3
 800c786:	6963      	ldr	r3, [r4, #20]
 800c788:	b2f6      	uxtb	r6, r6
 800c78a:	4283      	cmp	r3, r0
 800c78c:	4637      	mov	r7, r6
 800c78e:	dc04      	bgt.n	800c79a <__swbuf_r+0x42>
 800c790:	4621      	mov	r1, r4
 800c792:	4628      	mov	r0, r5
 800c794:	f000 f92e 	bl	800c9f4 <_fflush_r>
 800c798:	bb30      	cbnz	r0, 800c7e8 <__swbuf_r+0x90>
 800c79a:	68a3      	ldr	r3, [r4, #8]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	60a3      	str	r3, [r4, #8]
 800c7a0:	6823      	ldr	r3, [r4, #0]
 800c7a2:	1c5a      	adds	r2, r3, #1
 800c7a4:	6022      	str	r2, [r4, #0]
 800c7a6:	701e      	strb	r6, [r3, #0]
 800c7a8:	6963      	ldr	r3, [r4, #20]
 800c7aa:	3001      	adds	r0, #1
 800c7ac:	4283      	cmp	r3, r0
 800c7ae:	d004      	beq.n	800c7ba <__swbuf_r+0x62>
 800c7b0:	89a3      	ldrh	r3, [r4, #12]
 800c7b2:	07db      	lsls	r3, r3, #31
 800c7b4:	d506      	bpl.n	800c7c4 <__swbuf_r+0x6c>
 800c7b6:	2e0a      	cmp	r6, #10
 800c7b8:	d104      	bne.n	800c7c4 <__swbuf_r+0x6c>
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	4628      	mov	r0, r5
 800c7be:	f000 f919 	bl	800c9f4 <_fflush_r>
 800c7c2:	b988      	cbnz	r0, 800c7e8 <__swbuf_r+0x90>
 800c7c4:	4638      	mov	r0, r7
 800c7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7c8:	4b0a      	ldr	r3, [pc, #40]	; (800c7f4 <__swbuf_r+0x9c>)
 800c7ca:	429c      	cmp	r4, r3
 800c7cc:	d101      	bne.n	800c7d2 <__swbuf_r+0x7a>
 800c7ce:	68ac      	ldr	r4, [r5, #8]
 800c7d0:	e7cf      	b.n	800c772 <__swbuf_r+0x1a>
 800c7d2:	4b09      	ldr	r3, [pc, #36]	; (800c7f8 <__swbuf_r+0xa0>)
 800c7d4:	429c      	cmp	r4, r3
 800c7d6:	bf08      	it	eq
 800c7d8:	68ec      	ldreq	r4, [r5, #12]
 800c7da:	e7ca      	b.n	800c772 <__swbuf_r+0x1a>
 800c7dc:	4621      	mov	r1, r4
 800c7de:	4628      	mov	r0, r5
 800c7e0:	f000 f80c 	bl	800c7fc <__swsetup_r>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	d0cb      	beq.n	800c780 <__swbuf_r+0x28>
 800c7e8:	f04f 37ff 	mov.w	r7, #4294967295
 800c7ec:	e7ea      	b.n	800c7c4 <__swbuf_r+0x6c>
 800c7ee:	bf00      	nop
 800c7f0:	0800eb9c 	.word	0x0800eb9c
 800c7f4:	0800ebbc 	.word	0x0800ebbc
 800c7f8:	0800eb7c 	.word	0x0800eb7c

0800c7fc <__swsetup_r>:
 800c7fc:	4b32      	ldr	r3, [pc, #200]	; (800c8c8 <__swsetup_r+0xcc>)
 800c7fe:	b570      	push	{r4, r5, r6, lr}
 800c800:	681d      	ldr	r5, [r3, #0]
 800c802:	4606      	mov	r6, r0
 800c804:	460c      	mov	r4, r1
 800c806:	b125      	cbz	r5, 800c812 <__swsetup_r+0x16>
 800c808:	69ab      	ldr	r3, [r5, #24]
 800c80a:	b913      	cbnz	r3, 800c812 <__swsetup_r+0x16>
 800c80c:	4628      	mov	r0, r5
 800c80e:	f000 f985 	bl	800cb1c <__sinit>
 800c812:	4b2e      	ldr	r3, [pc, #184]	; (800c8cc <__swsetup_r+0xd0>)
 800c814:	429c      	cmp	r4, r3
 800c816:	d10f      	bne.n	800c838 <__swsetup_r+0x3c>
 800c818:	686c      	ldr	r4, [r5, #4]
 800c81a:	89a3      	ldrh	r3, [r4, #12]
 800c81c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c820:	0719      	lsls	r1, r3, #28
 800c822:	d42c      	bmi.n	800c87e <__swsetup_r+0x82>
 800c824:	06dd      	lsls	r5, r3, #27
 800c826:	d411      	bmi.n	800c84c <__swsetup_r+0x50>
 800c828:	2309      	movs	r3, #9
 800c82a:	6033      	str	r3, [r6, #0]
 800c82c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c830:	81a3      	strh	r3, [r4, #12]
 800c832:	f04f 30ff 	mov.w	r0, #4294967295
 800c836:	e03e      	b.n	800c8b6 <__swsetup_r+0xba>
 800c838:	4b25      	ldr	r3, [pc, #148]	; (800c8d0 <__swsetup_r+0xd4>)
 800c83a:	429c      	cmp	r4, r3
 800c83c:	d101      	bne.n	800c842 <__swsetup_r+0x46>
 800c83e:	68ac      	ldr	r4, [r5, #8]
 800c840:	e7eb      	b.n	800c81a <__swsetup_r+0x1e>
 800c842:	4b24      	ldr	r3, [pc, #144]	; (800c8d4 <__swsetup_r+0xd8>)
 800c844:	429c      	cmp	r4, r3
 800c846:	bf08      	it	eq
 800c848:	68ec      	ldreq	r4, [r5, #12]
 800c84a:	e7e6      	b.n	800c81a <__swsetup_r+0x1e>
 800c84c:	0758      	lsls	r0, r3, #29
 800c84e:	d512      	bpl.n	800c876 <__swsetup_r+0x7a>
 800c850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c852:	b141      	cbz	r1, 800c866 <__swsetup_r+0x6a>
 800c854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c858:	4299      	cmp	r1, r3
 800c85a:	d002      	beq.n	800c862 <__swsetup_r+0x66>
 800c85c:	4630      	mov	r0, r6
 800c85e:	f7ff fb25 	bl	800beac <_free_r>
 800c862:	2300      	movs	r3, #0
 800c864:	6363      	str	r3, [r4, #52]	; 0x34
 800c866:	89a3      	ldrh	r3, [r4, #12]
 800c868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c86c:	81a3      	strh	r3, [r4, #12]
 800c86e:	2300      	movs	r3, #0
 800c870:	6063      	str	r3, [r4, #4]
 800c872:	6923      	ldr	r3, [r4, #16]
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	89a3      	ldrh	r3, [r4, #12]
 800c878:	f043 0308 	orr.w	r3, r3, #8
 800c87c:	81a3      	strh	r3, [r4, #12]
 800c87e:	6923      	ldr	r3, [r4, #16]
 800c880:	b94b      	cbnz	r3, 800c896 <__swsetup_r+0x9a>
 800c882:	89a3      	ldrh	r3, [r4, #12]
 800c884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c88c:	d003      	beq.n	800c896 <__swsetup_r+0x9a>
 800c88e:	4621      	mov	r1, r4
 800c890:	4630      	mov	r0, r6
 800c892:	f000 fa09 	bl	800cca8 <__smakebuf_r>
 800c896:	89a0      	ldrh	r0, [r4, #12]
 800c898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c89c:	f010 0301 	ands.w	r3, r0, #1
 800c8a0:	d00a      	beq.n	800c8b8 <__swsetup_r+0xbc>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	60a3      	str	r3, [r4, #8]
 800c8a6:	6963      	ldr	r3, [r4, #20]
 800c8a8:	425b      	negs	r3, r3
 800c8aa:	61a3      	str	r3, [r4, #24]
 800c8ac:	6923      	ldr	r3, [r4, #16]
 800c8ae:	b943      	cbnz	r3, 800c8c2 <__swsetup_r+0xc6>
 800c8b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8b4:	d1ba      	bne.n	800c82c <__swsetup_r+0x30>
 800c8b6:	bd70      	pop	{r4, r5, r6, pc}
 800c8b8:	0781      	lsls	r1, r0, #30
 800c8ba:	bf58      	it	pl
 800c8bc:	6963      	ldrpl	r3, [r4, #20]
 800c8be:	60a3      	str	r3, [r4, #8]
 800c8c0:	e7f4      	b.n	800c8ac <__swsetup_r+0xb0>
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	e7f7      	b.n	800c8b6 <__swsetup_r+0xba>
 800c8c6:	bf00      	nop
 800c8c8:	24000014 	.word	0x24000014
 800c8cc:	0800eb9c 	.word	0x0800eb9c
 800c8d0:	0800ebbc 	.word	0x0800ebbc
 800c8d4:	0800eb7c 	.word	0x0800eb7c

0800c8d8 <abort>:
 800c8d8:	b508      	push	{r3, lr}
 800c8da:	2006      	movs	r0, #6
 800c8dc:	f000 fa54 	bl	800cd88 <raise>
 800c8e0:	2001      	movs	r0, #1
 800c8e2:	f7f5 fbab 	bl	800203c <_exit>
	...

0800c8e8 <__sflush_r>:
 800c8e8:	898a      	ldrh	r2, [r1, #12]
 800c8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ee:	4605      	mov	r5, r0
 800c8f0:	0710      	lsls	r0, r2, #28
 800c8f2:	460c      	mov	r4, r1
 800c8f4:	d458      	bmi.n	800c9a8 <__sflush_r+0xc0>
 800c8f6:	684b      	ldr	r3, [r1, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	dc05      	bgt.n	800c908 <__sflush_r+0x20>
 800c8fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	dc02      	bgt.n	800c908 <__sflush_r+0x20>
 800c902:	2000      	movs	r0, #0
 800c904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c90a:	2e00      	cmp	r6, #0
 800c90c:	d0f9      	beq.n	800c902 <__sflush_r+0x1a>
 800c90e:	2300      	movs	r3, #0
 800c910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c914:	682f      	ldr	r7, [r5, #0]
 800c916:	602b      	str	r3, [r5, #0]
 800c918:	d032      	beq.n	800c980 <__sflush_r+0x98>
 800c91a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c91c:	89a3      	ldrh	r3, [r4, #12]
 800c91e:	075a      	lsls	r2, r3, #29
 800c920:	d505      	bpl.n	800c92e <__sflush_r+0x46>
 800c922:	6863      	ldr	r3, [r4, #4]
 800c924:	1ac0      	subs	r0, r0, r3
 800c926:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c928:	b10b      	cbz	r3, 800c92e <__sflush_r+0x46>
 800c92a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c92c:	1ac0      	subs	r0, r0, r3
 800c92e:	2300      	movs	r3, #0
 800c930:	4602      	mov	r2, r0
 800c932:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c934:	6a21      	ldr	r1, [r4, #32]
 800c936:	4628      	mov	r0, r5
 800c938:	47b0      	blx	r6
 800c93a:	1c43      	adds	r3, r0, #1
 800c93c:	89a3      	ldrh	r3, [r4, #12]
 800c93e:	d106      	bne.n	800c94e <__sflush_r+0x66>
 800c940:	6829      	ldr	r1, [r5, #0]
 800c942:	291d      	cmp	r1, #29
 800c944:	d82c      	bhi.n	800c9a0 <__sflush_r+0xb8>
 800c946:	4a2a      	ldr	r2, [pc, #168]	; (800c9f0 <__sflush_r+0x108>)
 800c948:	40ca      	lsrs	r2, r1
 800c94a:	07d6      	lsls	r6, r2, #31
 800c94c:	d528      	bpl.n	800c9a0 <__sflush_r+0xb8>
 800c94e:	2200      	movs	r2, #0
 800c950:	6062      	str	r2, [r4, #4]
 800c952:	04d9      	lsls	r1, r3, #19
 800c954:	6922      	ldr	r2, [r4, #16]
 800c956:	6022      	str	r2, [r4, #0]
 800c958:	d504      	bpl.n	800c964 <__sflush_r+0x7c>
 800c95a:	1c42      	adds	r2, r0, #1
 800c95c:	d101      	bne.n	800c962 <__sflush_r+0x7a>
 800c95e:	682b      	ldr	r3, [r5, #0]
 800c960:	b903      	cbnz	r3, 800c964 <__sflush_r+0x7c>
 800c962:	6560      	str	r0, [r4, #84]	; 0x54
 800c964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c966:	602f      	str	r7, [r5, #0]
 800c968:	2900      	cmp	r1, #0
 800c96a:	d0ca      	beq.n	800c902 <__sflush_r+0x1a>
 800c96c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c970:	4299      	cmp	r1, r3
 800c972:	d002      	beq.n	800c97a <__sflush_r+0x92>
 800c974:	4628      	mov	r0, r5
 800c976:	f7ff fa99 	bl	800beac <_free_r>
 800c97a:	2000      	movs	r0, #0
 800c97c:	6360      	str	r0, [r4, #52]	; 0x34
 800c97e:	e7c1      	b.n	800c904 <__sflush_r+0x1c>
 800c980:	6a21      	ldr	r1, [r4, #32]
 800c982:	2301      	movs	r3, #1
 800c984:	4628      	mov	r0, r5
 800c986:	47b0      	blx	r6
 800c988:	1c41      	adds	r1, r0, #1
 800c98a:	d1c7      	bne.n	800c91c <__sflush_r+0x34>
 800c98c:	682b      	ldr	r3, [r5, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d0c4      	beq.n	800c91c <__sflush_r+0x34>
 800c992:	2b1d      	cmp	r3, #29
 800c994:	d001      	beq.n	800c99a <__sflush_r+0xb2>
 800c996:	2b16      	cmp	r3, #22
 800c998:	d101      	bne.n	800c99e <__sflush_r+0xb6>
 800c99a:	602f      	str	r7, [r5, #0]
 800c99c:	e7b1      	b.n	800c902 <__sflush_r+0x1a>
 800c99e:	89a3      	ldrh	r3, [r4, #12]
 800c9a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9a4:	81a3      	strh	r3, [r4, #12]
 800c9a6:	e7ad      	b.n	800c904 <__sflush_r+0x1c>
 800c9a8:	690f      	ldr	r7, [r1, #16]
 800c9aa:	2f00      	cmp	r7, #0
 800c9ac:	d0a9      	beq.n	800c902 <__sflush_r+0x1a>
 800c9ae:	0793      	lsls	r3, r2, #30
 800c9b0:	680e      	ldr	r6, [r1, #0]
 800c9b2:	bf08      	it	eq
 800c9b4:	694b      	ldreq	r3, [r1, #20]
 800c9b6:	600f      	str	r7, [r1, #0]
 800c9b8:	bf18      	it	ne
 800c9ba:	2300      	movne	r3, #0
 800c9bc:	eba6 0807 	sub.w	r8, r6, r7
 800c9c0:	608b      	str	r3, [r1, #8]
 800c9c2:	f1b8 0f00 	cmp.w	r8, #0
 800c9c6:	dd9c      	ble.n	800c902 <__sflush_r+0x1a>
 800c9c8:	6a21      	ldr	r1, [r4, #32]
 800c9ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9cc:	4643      	mov	r3, r8
 800c9ce:	463a      	mov	r2, r7
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	47b0      	blx	r6
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	dc06      	bgt.n	800c9e6 <__sflush_r+0xfe>
 800c9d8:	89a3      	ldrh	r3, [r4, #12]
 800c9da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9de:	81a3      	strh	r3, [r4, #12]
 800c9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e4:	e78e      	b.n	800c904 <__sflush_r+0x1c>
 800c9e6:	4407      	add	r7, r0
 800c9e8:	eba8 0800 	sub.w	r8, r8, r0
 800c9ec:	e7e9      	b.n	800c9c2 <__sflush_r+0xda>
 800c9ee:	bf00      	nop
 800c9f0:	20400001 	.word	0x20400001

0800c9f4 <_fflush_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	690b      	ldr	r3, [r1, #16]
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	b913      	cbnz	r3, 800ca04 <_fflush_r+0x10>
 800c9fe:	2500      	movs	r5, #0
 800ca00:	4628      	mov	r0, r5
 800ca02:	bd38      	pop	{r3, r4, r5, pc}
 800ca04:	b118      	cbz	r0, 800ca0e <_fflush_r+0x1a>
 800ca06:	6983      	ldr	r3, [r0, #24]
 800ca08:	b90b      	cbnz	r3, 800ca0e <_fflush_r+0x1a>
 800ca0a:	f000 f887 	bl	800cb1c <__sinit>
 800ca0e:	4b14      	ldr	r3, [pc, #80]	; (800ca60 <_fflush_r+0x6c>)
 800ca10:	429c      	cmp	r4, r3
 800ca12:	d11b      	bne.n	800ca4c <_fflush_r+0x58>
 800ca14:	686c      	ldr	r4, [r5, #4]
 800ca16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d0ef      	beq.n	800c9fe <_fflush_r+0xa>
 800ca1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca20:	07d0      	lsls	r0, r2, #31
 800ca22:	d404      	bmi.n	800ca2e <_fflush_r+0x3a>
 800ca24:	0599      	lsls	r1, r3, #22
 800ca26:	d402      	bmi.n	800ca2e <_fflush_r+0x3a>
 800ca28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca2a:	f000 f915 	bl	800cc58 <__retarget_lock_acquire_recursive>
 800ca2e:	4628      	mov	r0, r5
 800ca30:	4621      	mov	r1, r4
 800ca32:	f7ff ff59 	bl	800c8e8 <__sflush_r>
 800ca36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca38:	07da      	lsls	r2, r3, #31
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	d4e0      	bmi.n	800ca00 <_fflush_r+0xc>
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	059b      	lsls	r3, r3, #22
 800ca42:	d4dd      	bmi.n	800ca00 <_fflush_r+0xc>
 800ca44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca46:	f000 f908 	bl	800cc5a <__retarget_lock_release_recursive>
 800ca4a:	e7d9      	b.n	800ca00 <_fflush_r+0xc>
 800ca4c:	4b05      	ldr	r3, [pc, #20]	; (800ca64 <_fflush_r+0x70>)
 800ca4e:	429c      	cmp	r4, r3
 800ca50:	d101      	bne.n	800ca56 <_fflush_r+0x62>
 800ca52:	68ac      	ldr	r4, [r5, #8]
 800ca54:	e7df      	b.n	800ca16 <_fflush_r+0x22>
 800ca56:	4b04      	ldr	r3, [pc, #16]	; (800ca68 <_fflush_r+0x74>)
 800ca58:	429c      	cmp	r4, r3
 800ca5a:	bf08      	it	eq
 800ca5c:	68ec      	ldreq	r4, [r5, #12]
 800ca5e:	e7da      	b.n	800ca16 <_fflush_r+0x22>
 800ca60:	0800eb9c 	.word	0x0800eb9c
 800ca64:	0800ebbc 	.word	0x0800ebbc
 800ca68:	0800eb7c 	.word	0x0800eb7c

0800ca6c <std>:
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	b510      	push	{r4, lr}
 800ca70:	4604      	mov	r4, r0
 800ca72:	e9c0 3300 	strd	r3, r3, [r0]
 800ca76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca7a:	6083      	str	r3, [r0, #8]
 800ca7c:	8181      	strh	r1, [r0, #12]
 800ca7e:	6643      	str	r3, [r0, #100]	; 0x64
 800ca80:	81c2      	strh	r2, [r0, #14]
 800ca82:	6183      	str	r3, [r0, #24]
 800ca84:	4619      	mov	r1, r3
 800ca86:	2208      	movs	r2, #8
 800ca88:	305c      	adds	r0, #92	; 0x5c
 800ca8a:	f7fb fed3 	bl	8008834 <memset>
 800ca8e:	4b05      	ldr	r3, [pc, #20]	; (800caa4 <std+0x38>)
 800ca90:	6263      	str	r3, [r4, #36]	; 0x24
 800ca92:	4b05      	ldr	r3, [pc, #20]	; (800caa8 <std+0x3c>)
 800ca94:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca96:	4b05      	ldr	r3, [pc, #20]	; (800caac <std+0x40>)
 800ca98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca9a:	4b05      	ldr	r3, [pc, #20]	; (800cab0 <std+0x44>)
 800ca9c:	6224      	str	r4, [r4, #32]
 800ca9e:	6323      	str	r3, [r4, #48]	; 0x30
 800caa0:	bd10      	pop	{r4, pc}
 800caa2:	bf00      	nop
 800caa4:	0800cdc1 	.word	0x0800cdc1
 800caa8:	0800cde3 	.word	0x0800cde3
 800caac:	0800ce1b 	.word	0x0800ce1b
 800cab0:	0800ce3f 	.word	0x0800ce3f

0800cab4 <_cleanup_r>:
 800cab4:	4901      	ldr	r1, [pc, #4]	; (800cabc <_cleanup_r+0x8>)
 800cab6:	f000 b8af 	b.w	800cc18 <_fwalk_reent>
 800caba:	bf00      	nop
 800cabc:	0800c9f5 	.word	0x0800c9f5

0800cac0 <__sfmoreglue>:
 800cac0:	b570      	push	{r4, r5, r6, lr}
 800cac2:	2268      	movs	r2, #104	; 0x68
 800cac4:	1e4d      	subs	r5, r1, #1
 800cac6:	4355      	muls	r5, r2
 800cac8:	460e      	mov	r6, r1
 800caca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cace:	f7ff fa59 	bl	800bf84 <_malloc_r>
 800cad2:	4604      	mov	r4, r0
 800cad4:	b140      	cbz	r0, 800cae8 <__sfmoreglue+0x28>
 800cad6:	2100      	movs	r1, #0
 800cad8:	e9c0 1600 	strd	r1, r6, [r0]
 800cadc:	300c      	adds	r0, #12
 800cade:	60a0      	str	r0, [r4, #8]
 800cae0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cae4:	f7fb fea6 	bl	8008834 <memset>
 800cae8:	4620      	mov	r0, r4
 800caea:	bd70      	pop	{r4, r5, r6, pc}

0800caec <__sfp_lock_acquire>:
 800caec:	4801      	ldr	r0, [pc, #4]	; (800caf4 <__sfp_lock_acquire+0x8>)
 800caee:	f000 b8b3 	b.w	800cc58 <__retarget_lock_acquire_recursive>
 800caf2:	bf00      	nop
 800caf4:	2400071d 	.word	0x2400071d

0800caf8 <__sfp_lock_release>:
 800caf8:	4801      	ldr	r0, [pc, #4]	; (800cb00 <__sfp_lock_release+0x8>)
 800cafa:	f000 b8ae 	b.w	800cc5a <__retarget_lock_release_recursive>
 800cafe:	bf00      	nop
 800cb00:	2400071d 	.word	0x2400071d

0800cb04 <__sinit_lock_acquire>:
 800cb04:	4801      	ldr	r0, [pc, #4]	; (800cb0c <__sinit_lock_acquire+0x8>)
 800cb06:	f000 b8a7 	b.w	800cc58 <__retarget_lock_acquire_recursive>
 800cb0a:	bf00      	nop
 800cb0c:	2400071e 	.word	0x2400071e

0800cb10 <__sinit_lock_release>:
 800cb10:	4801      	ldr	r0, [pc, #4]	; (800cb18 <__sinit_lock_release+0x8>)
 800cb12:	f000 b8a2 	b.w	800cc5a <__retarget_lock_release_recursive>
 800cb16:	bf00      	nop
 800cb18:	2400071e 	.word	0x2400071e

0800cb1c <__sinit>:
 800cb1c:	b510      	push	{r4, lr}
 800cb1e:	4604      	mov	r4, r0
 800cb20:	f7ff fff0 	bl	800cb04 <__sinit_lock_acquire>
 800cb24:	69a3      	ldr	r3, [r4, #24]
 800cb26:	b11b      	cbz	r3, 800cb30 <__sinit+0x14>
 800cb28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb2c:	f7ff bff0 	b.w	800cb10 <__sinit_lock_release>
 800cb30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb34:	6523      	str	r3, [r4, #80]	; 0x50
 800cb36:	4b13      	ldr	r3, [pc, #76]	; (800cb84 <__sinit+0x68>)
 800cb38:	4a13      	ldr	r2, [pc, #76]	; (800cb88 <__sinit+0x6c>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb3e:	42a3      	cmp	r3, r4
 800cb40:	bf04      	itt	eq
 800cb42:	2301      	moveq	r3, #1
 800cb44:	61a3      	streq	r3, [r4, #24]
 800cb46:	4620      	mov	r0, r4
 800cb48:	f000 f820 	bl	800cb8c <__sfp>
 800cb4c:	6060      	str	r0, [r4, #4]
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f000 f81c 	bl	800cb8c <__sfp>
 800cb54:	60a0      	str	r0, [r4, #8]
 800cb56:	4620      	mov	r0, r4
 800cb58:	f000 f818 	bl	800cb8c <__sfp>
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	60e0      	str	r0, [r4, #12]
 800cb60:	2104      	movs	r1, #4
 800cb62:	6860      	ldr	r0, [r4, #4]
 800cb64:	f7ff ff82 	bl	800ca6c <std>
 800cb68:	68a0      	ldr	r0, [r4, #8]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	2109      	movs	r1, #9
 800cb6e:	f7ff ff7d 	bl	800ca6c <std>
 800cb72:	68e0      	ldr	r0, [r4, #12]
 800cb74:	2202      	movs	r2, #2
 800cb76:	2112      	movs	r1, #18
 800cb78:	f7ff ff78 	bl	800ca6c <std>
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	61a3      	str	r3, [r4, #24]
 800cb80:	e7d2      	b.n	800cb28 <__sinit+0xc>
 800cb82:	bf00      	nop
 800cb84:	0800e734 	.word	0x0800e734
 800cb88:	0800cab5 	.word	0x0800cab5

0800cb8c <__sfp>:
 800cb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8e:	4607      	mov	r7, r0
 800cb90:	f7ff ffac 	bl	800caec <__sfp_lock_acquire>
 800cb94:	4b1e      	ldr	r3, [pc, #120]	; (800cc10 <__sfp+0x84>)
 800cb96:	681e      	ldr	r6, [r3, #0]
 800cb98:	69b3      	ldr	r3, [r6, #24]
 800cb9a:	b913      	cbnz	r3, 800cba2 <__sfp+0x16>
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	f7ff ffbd 	bl	800cb1c <__sinit>
 800cba2:	3648      	adds	r6, #72	; 0x48
 800cba4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	d503      	bpl.n	800cbb4 <__sfp+0x28>
 800cbac:	6833      	ldr	r3, [r6, #0]
 800cbae:	b30b      	cbz	r3, 800cbf4 <__sfp+0x68>
 800cbb0:	6836      	ldr	r6, [r6, #0]
 800cbb2:	e7f7      	b.n	800cba4 <__sfp+0x18>
 800cbb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cbb8:	b9d5      	cbnz	r5, 800cbf0 <__sfp+0x64>
 800cbba:	4b16      	ldr	r3, [pc, #88]	; (800cc14 <__sfp+0x88>)
 800cbbc:	60e3      	str	r3, [r4, #12]
 800cbbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cbc2:	6665      	str	r5, [r4, #100]	; 0x64
 800cbc4:	f000 f847 	bl	800cc56 <__retarget_lock_init_recursive>
 800cbc8:	f7ff ff96 	bl	800caf8 <__sfp_lock_release>
 800cbcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cbd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cbd4:	6025      	str	r5, [r4, #0]
 800cbd6:	61a5      	str	r5, [r4, #24]
 800cbd8:	2208      	movs	r2, #8
 800cbda:	4629      	mov	r1, r5
 800cbdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cbe0:	f7fb fe28 	bl	8008834 <memset>
 800cbe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cbe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cbec:	4620      	mov	r0, r4
 800cbee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbf0:	3468      	adds	r4, #104	; 0x68
 800cbf2:	e7d9      	b.n	800cba8 <__sfp+0x1c>
 800cbf4:	2104      	movs	r1, #4
 800cbf6:	4638      	mov	r0, r7
 800cbf8:	f7ff ff62 	bl	800cac0 <__sfmoreglue>
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	6030      	str	r0, [r6, #0]
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d1d5      	bne.n	800cbb0 <__sfp+0x24>
 800cc04:	f7ff ff78 	bl	800caf8 <__sfp_lock_release>
 800cc08:	230c      	movs	r3, #12
 800cc0a:	603b      	str	r3, [r7, #0]
 800cc0c:	e7ee      	b.n	800cbec <__sfp+0x60>
 800cc0e:	bf00      	nop
 800cc10:	0800e734 	.word	0x0800e734
 800cc14:	ffff0001 	.word	0xffff0001

0800cc18 <_fwalk_reent>:
 800cc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc1c:	4606      	mov	r6, r0
 800cc1e:	4688      	mov	r8, r1
 800cc20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc24:	2700      	movs	r7, #0
 800cc26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc2a:	f1b9 0901 	subs.w	r9, r9, #1
 800cc2e:	d505      	bpl.n	800cc3c <_fwalk_reent+0x24>
 800cc30:	6824      	ldr	r4, [r4, #0]
 800cc32:	2c00      	cmp	r4, #0
 800cc34:	d1f7      	bne.n	800cc26 <_fwalk_reent+0xe>
 800cc36:	4638      	mov	r0, r7
 800cc38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc3c:	89ab      	ldrh	r3, [r5, #12]
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d907      	bls.n	800cc52 <_fwalk_reent+0x3a>
 800cc42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc46:	3301      	adds	r3, #1
 800cc48:	d003      	beq.n	800cc52 <_fwalk_reent+0x3a>
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	47c0      	blx	r8
 800cc50:	4307      	orrs	r7, r0
 800cc52:	3568      	adds	r5, #104	; 0x68
 800cc54:	e7e9      	b.n	800cc2a <_fwalk_reent+0x12>

0800cc56 <__retarget_lock_init_recursive>:
 800cc56:	4770      	bx	lr

0800cc58 <__retarget_lock_acquire_recursive>:
 800cc58:	4770      	bx	lr

0800cc5a <__retarget_lock_release_recursive>:
 800cc5a:	4770      	bx	lr

0800cc5c <__swhatbuf_r>:
 800cc5c:	b570      	push	{r4, r5, r6, lr}
 800cc5e:	460e      	mov	r6, r1
 800cc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc64:	2900      	cmp	r1, #0
 800cc66:	b096      	sub	sp, #88	; 0x58
 800cc68:	4614      	mov	r4, r2
 800cc6a:	461d      	mov	r5, r3
 800cc6c:	da08      	bge.n	800cc80 <__swhatbuf_r+0x24>
 800cc6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cc72:	2200      	movs	r2, #0
 800cc74:	602a      	str	r2, [r5, #0]
 800cc76:	061a      	lsls	r2, r3, #24
 800cc78:	d410      	bmi.n	800cc9c <__swhatbuf_r+0x40>
 800cc7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc7e:	e00e      	b.n	800cc9e <__swhatbuf_r+0x42>
 800cc80:	466a      	mov	r2, sp
 800cc82:	f000 f903 	bl	800ce8c <_fstat_r>
 800cc86:	2800      	cmp	r0, #0
 800cc88:	dbf1      	blt.n	800cc6e <__swhatbuf_r+0x12>
 800cc8a:	9a01      	ldr	r2, [sp, #4]
 800cc8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc94:	425a      	negs	r2, r3
 800cc96:	415a      	adcs	r2, r3
 800cc98:	602a      	str	r2, [r5, #0]
 800cc9a:	e7ee      	b.n	800cc7a <__swhatbuf_r+0x1e>
 800cc9c:	2340      	movs	r3, #64	; 0x40
 800cc9e:	2000      	movs	r0, #0
 800cca0:	6023      	str	r3, [r4, #0]
 800cca2:	b016      	add	sp, #88	; 0x58
 800cca4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cca8 <__smakebuf_r>:
 800cca8:	898b      	ldrh	r3, [r1, #12]
 800ccaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccac:	079d      	lsls	r5, r3, #30
 800ccae:	4606      	mov	r6, r0
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	d507      	bpl.n	800ccc4 <__smakebuf_r+0x1c>
 800ccb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ccb8:	6023      	str	r3, [r4, #0]
 800ccba:	6123      	str	r3, [r4, #16]
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	6163      	str	r3, [r4, #20]
 800ccc0:	b002      	add	sp, #8
 800ccc2:	bd70      	pop	{r4, r5, r6, pc}
 800ccc4:	ab01      	add	r3, sp, #4
 800ccc6:	466a      	mov	r2, sp
 800ccc8:	f7ff ffc8 	bl	800cc5c <__swhatbuf_r>
 800cccc:	9900      	ldr	r1, [sp, #0]
 800ccce:	4605      	mov	r5, r0
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	f7ff f957 	bl	800bf84 <_malloc_r>
 800ccd6:	b948      	cbnz	r0, 800ccec <__smakebuf_r+0x44>
 800ccd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccdc:	059a      	lsls	r2, r3, #22
 800ccde:	d4ef      	bmi.n	800ccc0 <__smakebuf_r+0x18>
 800cce0:	f023 0303 	bic.w	r3, r3, #3
 800cce4:	f043 0302 	orr.w	r3, r3, #2
 800cce8:	81a3      	strh	r3, [r4, #12]
 800ccea:	e7e3      	b.n	800ccb4 <__smakebuf_r+0xc>
 800ccec:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <__smakebuf_r+0x7c>)
 800ccee:	62b3      	str	r3, [r6, #40]	; 0x28
 800ccf0:	89a3      	ldrh	r3, [r4, #12]
 800ccf2:	6020      	str	r0, [r4, #0]
 800ccf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccf8:	81a3      	strh	r3, [r4, #12]
 800ccfa:	9b00      	ldr	r3, [sp, #0]
 800ccfc:	6163      	str	r3, [r4, #20]
 800ccfe:	9b01      	ldr	r3, [sp, #4]
 800cd00:	6120      	str	r0, [r4, #16]
 800cd02:	b15b      	cbz	r3, 800cd1c <__smakebuf_r+0x74>
 800cd04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd08:	4630      	mov	r0, r6
 800cd0a:	f000 f8d1 	bl	800ceb0 <_isatty_r>
 800cd0e:	b128      	cbz	r0, 800cd1c <__smakebuf_r+0x74>
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	f023 0303 	bic.w	r3, r3, #3
 800cd16:	f043 0301 	orr.w	r3, r3, #1
 800cd1a:	81a3      	strh	r3, [r4, #12]
 800cd1c:	89a0      	ldrh	r0, [r4, #12]
 800cd1e:	4305      	orrs	r5, r0
 800cd20:	81a5      	strh	r5, [r4, #12]
 800cd22:	e7cd      	b.n	800ccc0 <__smakebuf_r+0x18>
 800cd24:	0800cab5 	.word	0x0800cab5

0800cd28 <_malloc_usable_size_r>:
 800cd28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd2c:	1f18      	subs	r0, r3, #4
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	bfbc      	itt	lt
 800cd32:	580b      	ldrlt	r3, [r1, r0]
 800cd34:	18c0      	addlt	r0, r0, r3
 800cd36:	4770      	bx	lr

0800cd38 <_raise_r>:
 800cd38:	291f      	cmp	r1, #31
 800cd3a:	b538      	push	{r3, r4, r5, lr}
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	460d      	mov	r5, r1
 800cd40:	d904      	bls.n	800cd4c <_raise_r+0x14>
 800cd42:	2316      	movs	r3, #22
 800cd44:	6003      	str	r3, [r0, #0]
 800cd46:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4a:	bd38      	pop	{r3, r4, r5, pc}
 800cd4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd4e:	b112      	cbz	r2, 800cd56 <_raise_r+0x1e>
 800cd50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd54:	b94b      	cbnz	r3, 800cd6a <_raise_r+0x32>
 800cd56:	4620      	mov	r0, r4
 800cd58:	f000 f830 	bl	800cdbc <_getpid_r>
 800cd5c:	462a      	mov	r2, r5
 800cd5e:	4601      	mov	r1, r0
 800cd60:	4620      	mov	r0, r4
 800cd62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd66:	f000 b817 	b.w	800cd98 <_kill_r>
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d00a      	beq.n	800cd84 <_raise_r+0x4c>
 800cd6e:	1c59      	adds	r1, r3, #1
 800cd70:	d103      	bne.n	800cd7a <_raise_r+0x42>
 800cd72:	2316      	movs	r3, #22
 800cd74:	6003      	str	r3, [r0, #0]
 800cd76:	2001      	movs	r0, #1
 800cd78:	e7e7      	b.n	800cd4a <_raise_r+0x12>
 800cd7a:	2400      	movs	r4, #0
 800cd7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd80:	4628      	mov	r0, r5
 800cd82:	4798      	blx	r3
 800cd84:	2000      	movs	r0, #0
 800cd86:	e7e0      	b.n	800cd4a <_raise_r+0x12>

0800cd88 <raise>:
 800cd88:	4b02      	ldr	r3, [pc, #8]	; (800cd94 <raise+0xc>)
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	6818      	ldr	r0, [r3, #0]
 800cd8e:	f7ff bfd3 	b.w	800cd38 <_raise_r>
 800cd92:	bf00      	nop
 800cd94:	24000014 	.word	0x24000014

0800cd98 <_kill_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4d07      	ldr	r5, [pc, #28]	; (800cdb8 <_kill_r+0x20>)
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	4604      	mov	r4, r0
 800cda0:	4608      	mov	r0, r1
 800cda2:	4611      	mov	r1, r2
 800cda4:	602b      	str	r3, [r5, #0]
 800cda6:	f7f5 f939 	bl	800201c <_kill>
 800cdaa:	1c43      	adds	r3, r0, #1
 800cdac:	d102      	bne.n	800cdb4 <_kill_r+0x1c>
 800cdae:	682b      	ldr	r3, [r5, #0]
 800cdb0:	b103      	cbz	r3, 800cdb4 <_kill_r+0x1c>
 800cdb2:	6023      	str	r3, [r4, #0]
 800cdb4:	bd38      	pop	{r3, r4, r5, pc}
 800cdb6:	bf00      	nop
 800cdb8:	24000718 	.word	0x24000718

0800cdbc <_getpid_r>:
 800cdbc:	f7f5 b926 	b.w	800200c <_getpid>

0800cdc0 <__sread>:
 800cdc0:	b510      	push	{r4, lr}
 800cdc2:	460c      	mov	r4, r1
 800cdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdc8:	f000 f894 	bl	800cef4 <_read_r>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	bfab      	itete	ge
 800cdd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cdd2:	89a3      	ldrhlt	r3, [r4, #12]
 800cdd4:	181b      	addge	r3, r3, r0
 800cdd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cdda:	bfac      	ite	ge
 800cddc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cdde:	81a3      	strhlt	r3, [r4, #12]
 800cde0:	bd10      	pop	{r4, pc}

0800cde2 <__swrite>:
 800cde2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde6:	461f      	mov	r7, r3
 800cde8:	898b      	ldrh	r3, [r1, #12]
 800cdea:	05db      	lsls	r3, r3, #23
 800cdec:	4605      	mov	r5, r0
 800cdee:	460c      	mov	r4, r1
 800cdf0:	4616      	mov	r6, r2
 800cdf2:	d505      	bpl.n	800ce00 <__swrite+0x1e>
 800cdf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f000 f868 	bl	800ced0 <_lseek_r>
 800ce00:	89a3      	ldrh	r3, [r4, #12]
 800ce02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce0a:	81a3      	strh	r3, [r4, #12]
 800ce0c:	4632      	mov	r2, r6
 800ce0e:	463b      	mov	r3, r7
 800ce10:	4628      	mov	r0, r5
 800ce12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce16:	f000 b817 	b.w	800ce48 <_write_r>

0800ce1a <__sseek>:
 800ce1a:	b510      	push	{r4, lr}
 800ce1c:	460c      	mov	r4, r1
 800ce1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce22:	f000 f855 	bl	800ced0 <_lseek_r>
 800ce26:	1c43      	adds	r3, r0, #1
 800ce28:	89a3      	ldrh	r3, [r4, #12]
 800ce2a:	bf15      	itete	ne
 800ce2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce36:	81a3      	strheq	r3, [r4, #12]
 800ce38:	bf18      	it	ne
 800ce3a:	81a3      	strhne	r3, [r4, #12]
 800ce3c:	bd10      	pop	{r4, pc}

0800ce3e <__sclose>:
 800ce3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce42:	f000 b813 	b.w	800ce6c <_close_r>
	...

0800ce48 <_write_r>:
 800ce48:	b538      	push	{r3, r4, r5, lr}
 800ce4a:	4d07      	ldr	r5, [pc, #28]	; (800ce68 <_write_r+0x20>)
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	4608      	mov	r0, r1
 800ce50:	4611      	mov	r1, r2
 800ce52:	2200      	movs	r2, #0
 800ce54:	602a      	str	r2, [r5, #0]
 800ce56:	461a      	mov	r2, r3
 800ce58:	f7f5 f917 	bl	800208a <_write>
 800ce5c:	1c43      	adds	r3, r0, #1
 800ce5e:	d102      	bne.n	800ce66 <_write_r+0x1e>
 800ce60:	682b      	ldr	r3, [r5, #0]
 800ce62:	b103      	cbz	r3, 800ce66 <_write_r+0x1e>
 800ce64:	6023      	str	r3, [r4, #0]
 800ce66:	bd38      	pop	{r3, r4, r5, pc}
 800ce68:	24000718 	.word	0x24000718

0800ce6c <_close_r>:
 800ce6c:	b538      	push	{r3, r4, r5, lr}
 800ce6e:	4d06      	ldr	r5, [pc, #24]	; (800ce88 <_close_r+0x1c>)
 800ce70:	2300      	movs	r3, #0
 800ce72:	4604      	mov	r4, r0
 800ce74:	4608      	mov	r0, r1
 800ce76:	602b      	str	r3, [r5, #0]
 800ce78:	f7f5 f923 	bl	80020c2 <_close>
 800ce7c:	1c43      	adds	r3, r0, #1
 800ce7e:	d102      	bne.n	800ce86 <_close_r+0x1a>
 800ce80:	682b      	ldr	r3, [r5, #0]
 800ce82:	b103      	cbz	r3, 800ce86 <_close_r+0x1a>
 800ce84:	6023      	str	r3, [r4, #0]
 800ce86:	bd38      	pop	{r3, r4, r5, pc}
 800ce88:	24000718 	.word	0x24000718

0800ce8c <_fstat_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	4d07      	ldr	r5, [pc, #28]	; (800ceac <_fstat_r+0x20>)
 800ce90:	2300      	movs	r3, #0
 800ce92:	4604      	mov	r4, r0
 800ce94:	4608      	mov	r0, r1
 800ce96:	4611      	mov	r1, r2
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	f7f5 f91e 	bl	80020da <_fstat>
 800ce9e:	1c43      	adds	r3, r0, #1
 800cea0:	d102      	bne.n	800cea8 <_fstat_r+0x1c>
 800cea2:	682b      	ldr	r3, [r5, #0]
 800cea4:	b103      	cbz	r3, 800cea8 <_fstat_r+0x1c>
 800cea6:	6023      	str	r3, [r4, #0]
 800cea8:	bd38      	pop	{r3, r4, r5, pc}
 800ceaa:	bf00      	nop
 800ceac:	24000718 	.word	0x24000718

0800ceb0 <_isatty_r>:
 800ceb0:	b538      	push	{r3, r4, r5, lr}
 800ceb2:	4d06      	ldr	r5, [pc, #24]	; (800cecc <_isatty_r+0x1c>)
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	4604      	mov	r4, r0
 800ceb8:	4608      	mov	r0, r1
 800ceba:	602b      	str	r3, [r5, #0]
 800cebc:	f7f5 f91d 	bl	80020fa <_isatty>
 800cec0:	1c43      	adds	r3, r0, #1
 800cec2:	d102      	bne.n	800ceca <_isatty_r+0x1a>
 800cec4:	682b      	ldr	r3, [r5, #0]
 800cec6:	b103      	cbz	r3, 800ceca <_isatty_r+0x1a>
 800cec8:	6023      	str	r3, [r4, #0]
 800ceca:	bd38      	pop	{r3, r4, r5, pc}
 800cecc:	24000718 	.word	0x24000718

0800ced0 <_lseek_r>:
 800ced0:	b538      	push	{r3, r4, r5, lr}
 800ced2:	4d07      	ldr	r5, [pc, #28]	; (800cef0 <_lseek_r+0x20>)
 800ced4:	4604      	mov	r4, r0
 800ced6:	4608      	mov	r0, r1
 800ced8:	4611      	mov	r1, r2
 800ceda:	2200      	movs	r2, #0
 800cedc:	602a      	str	r2, [r5, #0]
 800cede:	461a      	mov	r2, r3
 800cee0:	f7f5 f916 	bl	8002110 <_lseek>
 800cee4:	1c43      	adds	r3, r0, #1
 800cee6:	d102      	bne.n	800ceee <_lseek_r+0x1e>
 800cee8:	682b      	ldr	r3, [r5, #0]
 800ceea:	b103      	cbz	r3, 800ceee <_lseek_r+0x1e>
 800ceec:	6023      	str	r3, [r4, #0]
 800ceee:	bd38      	pop	{r3, r4, r5, pc}
 800cef0:	24000718 	.word	0x24000718

0800cef4 <_read_r>:
 800cef4:	b538      	push	{r3, r4, r5, lr}
 800cef6:	4d07      	ldr	r5, [pc, #28]	; (800cf14 <_read_r+0x20>)
 800cef8:	4604      	mov	r4, r0
 800cefa:	4608      	mov	r0, r1
 800cefc:	4611      	mov	r1, r2
 800cefe:	2200      	movs	r2, #0
 800cf00:	602a      	str	r2, [r5, #0]
 800cf02:	461a      	mov	r2, r3
 800cf04:	f7f5 f8a4 	bl	8002050 <_read>
 800cf08:	1c43      	adds	r3, r0, #1
 800cf0a:	d102      	bne.n	800cf12 <_read_r+0x1e>
 800cf0c:	682b      	ldr	r3, [r5, #0]
 800cf0e:	b103      	cbz	r3, 800cf12 <_read_r+0x1e>
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	bd38      	pop	{r3, r4, r5, pc}
 800cf14:	24000718 	.word	0x24000718

0800cf18 <cexp>:
 800cf18:	b510      	push	{r4, lr}
 800cf1a:	ed2d 8b06 	vpush	{d8-d10}
 800cf1e:	eeb0 ab40 	vmov.f64	d10, d0
 800cf22:	eeb0 9b41 	vmov.f64	d9, d1
 800cf26:	f000 f832 	bl	800cf8e <creal>
 800cf2a:	eeb0 1b49 	vmov.f64	d1, d9
 800cf2e:	eeb0 8b40 	vmov.f64	d8, d0
 800cf32:	eeb0 0b4a 	vmov.f64	d0, d10
 800cf36:	f000 f827 	bl	800cf88 <cimag>
 800cf3a:	eeb0 ab40 	vmov.f64	d10, d0
 800cf3e:	eeb0 0b48 	vmov.f64	d0, d8
 800cf42:	f000 f825 	bl	800cf90 <exp>
 800cf46:	eeb0 9b40 	vmov.f64	d9, d0
 800cf4a:	eeb0 0b4a 	vmov.f64	d0, d10
 800cf4e:	f000 fd77 	bl	800da40 <sin>
 800cf52:	ee20 8b09 	vmul.f64	d8, d0, d9
 800cf56:	eeb0 0b4a 	vmov.f64	d0, d10
 800cf5a:	f000 fcdd 	bl	800d918 <cos>
 800cf5e:	eeb0 1b48 	vmov.f64	d1, d8
 800cf62:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800cf80 <cexp+0x68>
 800cf66:	eeb0 6b40 	vmov.f64	d6, d0
 800cf6a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cf6e:	eea6 7b09 	vfma.f64	d7, d6, d9
 800cf72:	ecbd 8b06 	vpop	{d8-d10}
 800cf76:	eeb0 0b47 	vmov.f64	d0, d7
 800cf7a:	bd10      	pop	{r4, pc}
 800cf7c:	f3af 8000 	nop.w
	...

0800cf88 <cimag>:
 800cf88:	eeb0 0b41 	vmov.f64	d0, d1
 800cf8c:	4770      	bx	lr

0800cf8e <creal>:
 800cf8e:	4770      	bx	lr

0800cf90 <exp>:
 800cf90:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800cf92:	ee10 3a90 	vmov	r3, s1
 800cf96:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800cf9a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800cf9e:	18a2      	adds	r2, r4, r2
 800cfa0:	2a3e      	cmp	r2, #62	; 0x3e
 800cfa2:	ee10 1a10 	vmov	r1, s0
 800cfa6:	d922      	bls.n	800cfee <exp+0x5e>
 800cfa8:	2a00      	cmp	r2, #0
 800cfaa:	da06      	bge.n	800cfba <exp+0x2a>
 800cfac:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800cfb0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cfb4:	b004      	add	sp, #16
 800cfb6:	bcf0      	pop	{r4, r5, r6, r7}
 800cfb8:	4770      	bx	lr
 800cfba:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 800cfbe:	f04f 0000 	mov.w	r0, #0
 800cfc2:	d913      	bls.n	800cfec <exp+0x5c>
 800cfc4:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800cfc8:	bf08      	it	eq
 800cfca:	4281      	cmpeq	r1, r0
 800cfcc:	f000 80a0 	beq.w	800d110 <exp+0x180>
 800cfd0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cfd4:	4294      	cmp	r4, r2
 800cfd6:	d0e9      	beq.n	800cfac <exp+0x1c>
 800cfd8:	4283      	cmp	r3, r0
 800cfda:	da03      	bge.n	800cfe4 <exp+0x54>
 800cfdc:	b004      	add	sp, #16
 800cfde:	bcf0      	pop	{r4, r5, r6, r7}
 800cfe0:	f000 b9be 	b.w	800d360 <__math_uflow>
 800cfe4:	b004      	add	sp, #16
 800cfe6:	bcf0      	pop	{r4, r5, r6, r7}
 800cfe8:	f000 b9c2 	b.w	800d370 <__math_oflow>
 800cfec:	4604      	mov	r4, r0
 800cfee:	4950      	ldr	r1, [pc, #320]	; (800d130 <exp+0x1a0>)
 800cff0:	ed91 6b02 	vldr	d6, [r1, #8]
 800cff4:	ed91 5b00 	vldr	d5, [r1]
 800cff8:	eeb0 7b46 	vmov.f64	d7, d6
 800cffc:	eea5 7b00 	vfma.f64	d7, d5, d0
 800d000:	ee17 5a10 	vmov	r5, s14
 800d004:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d008:	ed91 6b04 	vldr	d6, [r1, #16]
 800d00c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800d010:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d014:	ed91 6b06 	vldr	d6, [r1, #24]
 800d018:	18d8      	adds	r0, r3, r3
 800d01a:	f100 030f 	add.w	r3, r0, #15
 800d01e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800d022:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d026:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800d02a:	ee20 7b00 	vmul.f64	d7, d0, d0
 800d02e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 800d032:	ed91 5b08 	vldr	d5, [r1, #32]
 800d036:	ee30 6b06 	vadd.f64	d6, d0, d6
 800d03a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800d03e:	eea4 5b00 	vfma.f64	d5, d4, d0
 800d042:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800d046:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d04a:	ee27 7b07 	vmul.f64	d7, d7, d7
 800d04e:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800d052:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 800d056:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800d05a:	eea4 5b00 	vfma.f64	d5, d4, d0
 800d05e:	2600      	movs	r6, #0
 800d060:	19f2      	adds	r2, r6, r7
 800d062:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 800d066:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d06a:	2c00      	cmp	r4, #0
 800d06c:	d14b      	bne.n	800d106 <exp+0x176>
 800d06e:	42b5      	cmp	r5, r6
 800d070:	db10      	blt.n	800d094 <exp+0x104>
 800d072:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800d076:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800d118 <exp+0x188>
 800d07a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800d07e:	4610      	mov	r0, r2
 800d080:	ec41 0b10 	vmov	d0, r0, r1
 800d084:	eea6 0b00 	vfma.f64	d0, d6, d0
 800d088:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d08c:	b004      	add	sp, #16
 800d08e:	bcf0      	pop	{r4, r5, r6, r7}
 800d090:	f000 b9a6 	b.w	800d3e0 <__math_check_oflow>
 800d094:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d098:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800d09c:	4610      	mov	r0, r2
 800d09e:	ec41 0b17 	vmov	d7, r0, r1
 800d0a2:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800d0a6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d0aa:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d0ae:	eeb4 5bc4 	vcmpe.f64	d5, d4
 800d0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0b6:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d120 <exp+0x190>
 800d0ba:	d51e      	bpl.n	800d0fa <exp+0x16a>
 800d0bc:	ee35 3b04 	vadd.f64	d3, d5, d4
 800d0c0:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d0c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d0c8:	ee34 6b43 	vsub.f64	d6, d4, d3
 800d0cc:	ee36 5b05 	vadd.f64	d5, d6, d5
 800d0d0:	ee35 5b07 	vadd.f64	d5, d5, d7
 800d0d4:	ee35 5b03 	vadd.f64	d5, d5, d3
 800d0d8:	ee35 5b44 	vsub.f64	d5, d5, d4
 800d0dc:	eeb5 5b40 	vcmp.f64	d5, #0.0
 800d0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e4:	d101      	bne.n	800d0ea <exp+0x15a>
 800d0e6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 800d128 <exp+0x198>
 800d0ea:	ed8d 0b00 	vstr	d0, [sp]
 800d0ee:	ed9d 7b00 	vldr	d7, [sp]
 800d0f2:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d0f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d0fa:	ee25 0b00 	vmul.f64	d0, d5, d0
 800d0fe:	b004      	add	sp, #16
 800d100:	bcf0      	pop	{r4, r5, r6, r7}
 800d102:	f000 b964 	b.w	800d3ce <__math_check_uflow>
 800d106:	ec43 2b10 	vmov	d0, r2, r3
 800d10a:	eea6 0b00 	vfma.f64	d0, d6, d0
 800d10e:	e751      	b.n	800cfb4 <exp+0x24>
 800d110:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800d128 <exp+0x198>
 800d114:	e74e      	b.n	800cfb4 <exp+0x24>
 800d116:	bf00      	nop
 800d118:	00000000 	.word	0x00000000
 800d11c:	7f000000 	.word	0x7f000000
 800d120:	00000000 	.word	0x00000000
 800d124:	00100000 	.word	0x00100000
	...
 800d130:	0800ebe0 	.word	0x0800ebe0
 800d134:	00000000 	.word	0x00000000

0800d138 <log>:
 800d138:	b470      	push	{r4, r5, r6}
 800d13a:	ee10 1a90 	vmov	r1, s1
 800d13e:	ee10 2a10 	vmov	r2, s0
 800d142:	f04f 34ff 	mov.w	r4, #4294967295
 800d146:	4294      	cmp	r4, r2
 800d148:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 800d14c:	4c72      	ldr	r4, [pc, #456]	; (800d318 <log+0x1e0>)
 800d14e:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 800d152:	eb74 0000 	sbcs.w	r0, r4, r0
 800d156:	ed2d 8b02 	vpush	{d8}
 800d15a:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800d15e:	d35c      	bcc.n	800d21a <log+0xe2>
 800d160:	4b6e      	ldr	r3, [pc, #440]	; (800d31c <log+0x1e4>)
 800d162:	4299      	cmp	r1, r3
 800d164:	bf08      	it	eq
 800d166:	2a00      	cmpeq	r2, #0
 800d168:	f000 80c6 	beq.w	800d2f8 <log+0x1c0>
 800d16c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d170:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d174:	4b6a      	ldr	r3, [pc, #424]	; (800d320 <log+0x1e8>)
 800d176:	ee20 2b00 	vmul.f64	d2, d0, d0
 800d17a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800d17e:	ee20 4b02 	vmul.f64	d4, d0, d2
 800d182:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800d186:	eea6 7b00 	vfma.f64	d7, d6, d0
 800d18a:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800d18e:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 800d192:	eea6 7b02 	vfma.f64	d7, d6, d2
 800d196:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800d19a:	eea5 6b00 	vfma.f64	d6, d5, d0
 800d19e:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800d1a2:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 800d1a6:	eea5 6b02 	vfma.f64	d6, d5, d2
 800d1aa:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 800d1ae:	eea3 5b00 	vfma.f64	d5, d3, d0
 800d1b2:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 800d1b6:	eea3 5b02 	vfma.f64	d5, d3, d2
 800d1ba:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 800d1be:	eeb0 2b40 	vmov.f64	d2, d0
 800d1c2:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d1c6:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800d1ca:	eea5 6b04 	vfma.f64	d6, d5, d4
 800d1ce:	eea6 7b04 	vfma.f64	d7, d6, d4
 800d1d2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800d300 <log+0x1c8>
 800d1d6:	eeb0 1b47 	vmov.f64	d1, d7
 800d1da:	eeb0 5b40 	vmov.f64	d5, d0
 800d1de:	eea0 5b06 	vfma.f64	d5, d0, d6
 800d1e2:	eea0 5b46 	vfms.f64	d5, d0, d6
 800d1e6:	ee30 8b45 	vsub.f64	d8, d0, d5
 800d1ea:	ee25 7b05 	vmul.f64	d7, d5, d5
 800d1ee:	ee30 5b05 	vadd.f64	d5, d0, d5
 800d1f2:	eea7 2b03 	vfma.f64	d2, d7, d3
 800d1f6:	ee30 6b42 	vsub.f64	d6, d0, d2
 800d1fa:	eea7 6b03 	vfma.f64	d6, d7, d3
 800d1fe:	ee23 3b08 	vmul.f64	d3, d3, d8
 800d202:	eea3 6b05 	vfma.f64	d6, d3, d5
 800d206:	eeb0 0b46 	vmov.f64	d0, d6
 800d20a:	eea1 0b04 	vfma.f64	d0, d1, d4
 800d20e:	ee32 0b00 	vadd.f64	d0, d2, d0
 800d212:	ecbd 8b02 	vpop	{d8}
 800d216:	bc70      	pop	{r4, r5, r6}
 800d218:	4770      	bx	lr
 800d21a:	f1a3 0410 	sub.w	r4, r3, #16
 800d21e:	f647 70df 	movw	r0, #32735	; 0x7fdf
 800d222:	4284      	cmp	r4, r0
 800d224:	d923      	bls.n	800d26e <log+0x136>
 800d226:	1894      	adds	r4, r2, r2
 800d228:	eb41 0001 	adc.w	r0, r1, r1
 800d22c:	4320      	orrs	r0, r4
 800d22e:	d105      	bne.n	800d23c <log+0x104>
 800d230:	ecbd 8b02 	vpop	{d8}
 800d234:	2001      	movs	r0, #1
 800d236:	bc70      	pop	{r4, r5, r6}
 800d238:	f000 b8a2 	b.w	800d380 <__math_divzero>
 800d23c:	4839      	ldr	r0, [pc, #228]	; (800d324 <log+0x1ec>)
 800d23e:	4281      	cmp	r1, r0
 800d240:	bf08      	it	eq
 800d242:	2a00      	cmpeq	r2, #0
 800d244:	d0e5      	beq.n	800d212 <log+0xda>
 800d246:	041a      	lsls	r2, r3, #16
 800d248:	d404      	bmi.n	800d254 <log+0x11c>
 800d24a:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 800d24e:	ea32 0303 	bics.w	r3, r2, r3
 800d252:	d104      	bne.n	800d25e <log+0x126>
 800d254:	ecbd 8b02 	vpop	{d8}
 800d258:	bc70      	pop	{r4, r5, r6}
 800d25a:	f000 b8a9 	b.w	800d3b0 <__math_invalid>
 800d25e:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800d308 <log+0x1d0>
 800d262:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d266:	ec53 2b17 	vmov	r2, r3, d7
 800d26a:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 800d26e:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800d272:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 800d276:	0d1e      	lsrs	r6, r3, #20
 800d278:	1e14      	subs	r4, r2, #0
 800d27a:	4a29      	ldr	r2, [pc, #164]	; (800d320 <log+0x1e8>)
 800d27c:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800d280:	f3c3 3046 	ubfx	r0, r3, #13, #7
 800d284:	0536      	lsls	r6, r6, #20
 800d286:	1b8d      	subs	r5, r1, r6
 800d288:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 800d28c:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 800d290:	ec45 4b16 	vmov	d6, r4, r5
 800d294:	151b      	asrs	r3, r3, #20
 800d296:	eea6 5b07 	vfma.f64	d5, d6, d7
 800d29a:	ee07 3a90 	vmov	s15, r3
 800d29e:	ee25 2b05 	vmul.f64	d2, d5, d5
 800d2a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800d2a6:	ed92 4b00 	vldr	d4, [r2]
 800d2aa:	ee25 1b02 	vmul.f64	d1, d5, d2
 800d2ae:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 800d2b2:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d2b6:	ee35 4b07 	vadd.f64	d4, d5, d7
 800d2ba:	ee37 0b44 	vsub.f64	d0, d7, d4
 800d2be:	ed92 7b02 	vldr	d7, [r2, #8]
 800d2c2:	ee30 0b05 	vadd.f64	d0, d0, d5
 800d2c6:	eea7 0b06 	vfma.f64	d0, d7, d6
 800d2ca:	ed92 7b04 	vldr	d7, [r2, #16]
 800d2ce:	ed92 6b08 	vldr	d6, [r2, #32]
 800d2d2:	eea7 0b02 	vfma.f64	d0, d7, d2
 800d2d6:	ed92 7b06 	vldr	d7, [r2, #24]
 800d2da:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 800d2de:	eea6 7b05 	vfma.f64	d7, d6, d5
 800d2e2:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 800d2e6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800d2ea:	eea6 7b02 	vfma.f64	d7, d6, d2
 800d2ee:	eea1 0b07 	vfma.f64	d0, d1, d7
 800d2f2:	ee30 0b04 	vadd.f64	d0, d0, d4
 800d2f6:	e78c      	b.n	800d212 <log+0xda>
 800d2f8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800d310 <log+0x1d8>
 800d2fc:	e789      	b.n	800d212 <log+0xda>
 800d2fe:	bf00      	nop
 800d300:	00000000 	.word	0x00000000
 800d304:	41a00000 	.word	0x41a00000
 800d308:	00000000 	.word	0x00000000
 800d30c:	43300000 	.word	0x43300000
	...
 800d318:	000308ff 	.word	0x000308ff
 800d31c:	3ff00000 	.word	0x3ff00000
 800d320:	0800f450 	.word	0x0800f450
 800d324:	7ff00000 	.word	0x7ff00000

0800d328 <with_errno>:
 800d328:	b513      	push	{r0, r1, r4, lr}
 800d32a:	4604      	mov	r4, r0
 800d32c:	ed8d 0b00 	vstr	d0, [sp]
 800d330:	f7fb fa56 	bl	80087e0 <__errno>
 800d334:	ed9d 0b00 	vldr	d0, [sp]
 800d338:	6004      	str	r4, [r0, #0]
 800d33a:	b002      	add	sp, #8
 800d33c:	bd10      	pop	{r4, pc}

0800d33e <xflow>:
 800d33e:	b082      	sub	sp, #8
 800d340:	b158      	cbz	r0, 800d35a <xflow+0x1c>
 800d342:	eeb1 7b40 	vneg.f64	d7, d0
 800d346:	ed8d 7b00 	vstr	d7, [sp]
 800d34a:	ed9d 7b00 	vldr	d7, [sp]
 800d34e:	2022      	movs	r0, #34	; 0x22
 800d350:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d354:	b002      	add	sp, #8
 800d356:	f7ff bfe7 	b.w	800d328 <with_errno>
 800d35a:	eeb0 7b40 	vmov.f64	d7, d0
 800d35e:	e7f2      	b.n	800d346 <xflow+0x8>

0800d360 <__math_uflow>:
 800d360:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d368 <__math_uflow+0x8>
 800d364:	f7ff bfeb 	b.w	800d33e <xflow>
 800d368:	00000000 	.word	0x00000000
 800d36c:	10000000 	.word	0x10000000

0800d370 <__math_oflow>:
 800d370:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d378 <__math_oflow+0x8>
 800d374:	f7ff bfe3 	b.w	800d33e <xflow>
 800d378:	00000000 	.word	0x00000000
 800d37c:	70000000 	.word	0x70000000

0800d380 <__math_divzero>:
 800d380:	b082      	sub	sp, #8
 800d382:	2800      	cmp	r0, #0
 800d384:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d388:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800d38c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800d390:	ed8d 7b00 	vstr	d7, [sp]
 800d394:	ed9d 0b00 	vldr	d0, [sp]
 800d398:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800d3a8 <__math_divzero+0x28>
 800d39c:	2022      	movs	r0, #34	; 0x22
 800d39e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800d3a2:	b002      	add	sp, #8
 800d3a4:	f7ff bfc0 	b.w	800d328 <with_errno>
	...

0800d3b0 <__math_invalid>:
 800d3b0:	eeb0 7b40 	vmov.f64	d7, d0
 800d3b4:	eeb4 7b47 	vcmp.f64	d7, d7
 800d3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3bc:	ee30 6b40 	vsub.f64	d6, d0, d0
 800d3c0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800d3c4:	d602      	bvs.n	800d3cc <__math_invalid+0x1c>
 800d3c6:	2021      	movs	r0, #33	; 0x21
 800d3c8:	f7ff bfae 	b.w	800d328 <with_errno>
 800d3cc:	4770      	bx	lr

0800d3ce <__math_check_uflow>:
 800d3ce:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d6:	d102      	bne.n	800d3de <__math_check_uflow+0x10>
 800d3d8:	2022      	movs	r0, #34	; 0x22
 800d3da:	f7ff bfa5 	b.w	800d328 <with_errno>
 800d3de:	4770      	bx	lr

0800d3e0 <__math_check_oflow>:
 800d3e0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800d400 <__math_check_oflow+0x20>
 800d3e4:	eeb0 7bc0 	vabs.f64	d7, d0
 800d3e8:	eeb4 7b46 	vcmp.f64	d7, d6
 800d3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f0:	dd02      	ble.n	800d3f8 <__math_check_oflow+0x18>
 800d3f2:	2022      	movs	r0, #34	; 0x22
 800d3f4:	f7ff bf98 	b.w	800d328 <with_errno>
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	f3af 8000 	nop.w
 800d400:	ffffffff 	.word	0xffffffff
 800d404:	7fefffff 	.word	0x7fefffff

0800d408 <checkint>:
 800d408:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d40c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800d410:	429a      	cmp	r2, r3
 800d412:	b570      	push	{r4, r5, r6, lr}
 800d414:	dd2a      	ble.n	800d46c <checkint+0x64>
 800d416:	f240 4333 	movw	r3, #1075	; 0x433
 800d41a:	429a      	cmp	r2, r3
 800d41c:	dc24      	bgt.n	800d468 <checkint+0x60>
 800d41e:	1a9b      	subs	r3, r3, r2
 800d420:	f1a3 0620 	sub.w	r6, r3, #32
 800d424:	f04f 32ff 	mov.w	r2, #4294967295
 800d428:	fa02 f403 	lsl.w	r4, r2, r3
 800d42c:	fa02 f606 	lsl.w	r6, r2, r6
 800d430:	f1c3 0520 	rsb	r5, r3, #32
 800d434:	fa22 f505 	lsr.w	r5, r2, r5
 800d438:	4334      	orrs	r4, r6
 800d43a:	432c      	orrs	r4, r5
 800d43c:	409a      	lsls	r2, r3
 800d43e:	ea20 0202 	bic.w	r2, r0, r2
 800d442:	ea21 0404 	bic.w	r4, r1, r4
 800d446:	4322      	orrs	r2, r4
 800d448:	f1a3 0420 	sub.w	r4, r3, #32
 800d44c:	f1c3 0220 	rsb	r2, r3, #32
 800d450:	d10c      	bne.n	800d46c <checkint+0x64>
 800d452:	40d8      	lsrs	r0, r3
 800d454:	fa01 f302 	lsl.w	r3, r1, r2
 800d458:	4318      	orrs	r0, r3
 800d45a:	40e1      	lsrs	r1, r4
 800d45c:	4308      	orrs	r0, r1
 800d45e:	f000 0001 	and.w	r0, r0, #1
 800d462:	f1d0 0002 	rsbs	r0, r0, #2
 800d466:	bd70      	pop	{r4, r5, r6, pc}
 800d468:	2002      	movs	r0, #2
 800d46a:	e7fc      	b.n	800d466 <checkint+0x5e>
 800d46c:	2000      	movs	r0, #0
 800d46e:	e7fa      	b.n	800d466 <checkint+0x5e>

0800d470 <pow>:
 800d470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d474:	ee10 4a90 	vmov	r4, s1
 800d478:	ed2d 8b0a 	vpush	{d8-d12}
 800d47c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800d480:	ee11 7a90 	vmov	r7, s3
 800d484:	f10a 32ff 	add.w	r2, sl, #4294967295
 800d488:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800d48c:	429a      	cmp	r2, r3
 800d48e:	ee10 6a10 	vmov	r6, s0
 800d492:	ee11 0a10 	vmov	r0, s2
 800d496:	b086      	sub	sp, #24
 800d498:	46d4      	mov	ip, sl
 800d49a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800d49e:	d806      	bhi.n	800d4ae <pow+0x3e>
 800d4a0:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800d4a4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800d4a8:	2b7f      	cmp	r3, #127	; 0x7f
 800d4aa:	f240 8156 	bls.w	800d75a <pow+0x2ea>
 800d4ae:	1802      	adds	r2, r0, r0
 800d4b0:	eb47 0107 	adc.w	r1, r7, r7
 800d4b4:	f06f 0e01 	mvn.w	lr, #1
 800d4b8:	f112 39ff 	adds.w	r9, r2, #4294967295
 800d4bc:	f141 38ff 	adc.w	r8, r1, #4294967295
 800d4c0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800d4c4:	45ce      	cmp	lr, r9
 800d4c6:	eb73 0808 	sbcs.w	r8, r3, r8
 800d4ca:	d23f      	bcs.n	800d54c <pow+0xdc>
 800d4cc:	ea52 0301 	orrs.w	r3, r2, r1
 800d4d0:	f04f 0300 	mov.w	r3, #0
 800d4d4:	d10c      	bne.n	800d4f0 <pow+0x80>
 800d4d6:	19b6      	adds	r6, r6, r6
 800d4d8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800d4dc:	4164      	adcs	r4, r4
 800d4de:	42b3      	cmp	r3, r6
 800d4e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d4e4:	41a3      	sbcs	r3, r4
 800d4e6:	f0c0 808c 	bcc.w	800d602 <pow+0x192>
 800d4ea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d4ee:	e028      	b.n	800d542 <pow+0xd2>
 800d4f0:	4da3      	ldr	r5, [pc, #652]	; (800d780 <pow+0x310>)
 800d4f2:	42ac      	cmp	r4, r5
 800d4f4:	bf08      	it	eq
 800d4f6:	429e      	cmpeq	r6, r3
 800d4f8:	d107      	bne.n	800d50a <pow+0x9a>
 800d4fa:	1800      	adds	r0, r0, r0
 800d4fc:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800d500:	417f      	adcs	r7, r7
 800d502:	4283      	cmp	r3, r0
 800d504:	4b9f      	ldr	r3, [pc, #636]	; (800d784 <pow+0x314>)
 800d506:	41bb      	sbcs	r3, r7
 800d508:	e7ed      	b.n	800d4e6 <pow+0x76>
 800d50a:	19b6      	adds	r6, r6, r6
 800d50c:	489e      	ldr	r0, [pc, #632]	; (800d788 <pow+0x318>)
 800d50e:	4164      	adcs	r4, r4
 800d510:	42b3      	cmp	r3, r6
 800d512:	eb70 0504 	sbcs.w	r5, r0, r4
 800d516:	d374      	bcc.n	800d602 <pow+0x192>
 800d518:	4281      	cmp	r1, r0
 800d51a:	bf08      	it	eq
 800d51c:	429a      	cmpeq	r2, r3
 800d51e:	d170      	bne.n	800d602 <pow+0x192>
 800d520:	4a9a      	ldr	r2, [pc, #616]	; (800d78c <pow+0x31c>)
 800d522:	4294      	cmp	r4, r2
 800d524:	bf08      	it	eq
 800d526:	429e      	cmpeq	r6, r3
 800d528:	d0df      	beq.n	800d4ea <pow+0x7a>
 800d52a:	4294      	cmp	r4, r2
 800d52c:	ea6f 0707 	mvn.w	r7, r7
 800d530:	bf34      	ite	cc
 800d532:	2400      	movcc	r4, #0
 800d534:	2401      	movcs	r4, #1
 800d536:	0fff      	lsrs	r7, r7, #31
 800d538:	42bc      	cmp	r4, r7
 800d53a:	f040 81d9 	bne.w	800d8f0 <pow+0x480>
 800d53e:	ee21 0b01 	vmul.f64	d0, d1, d1
 800d542:	b006      	add	sp, #24
 800d544:	ecbd 8b0a 	vpop	{d8-d12}
 800d548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d54c:	eb16 0806 	adds.w	r8, r6, r6
 800d550:	eb44 0904 	adc.w	r9, r4, r4
 800d554:	f118 31ff 	adds.w	r1, r8, #4294967295
 800d558:	f169 0200 	sbc.w	r2, r9, #0
 800d55c:	458e      	cmp	lr, r1
 800d55e:	4193      	sbcs	r3, r2
 800d560:	d223      	bcs.n	800d5aa <pow+0x13a>
 800d562:	ee20 0b00 	vmul.f64	d0, d0, d0
 800d566:	2c00      	cmp	r4, #0
 800d568:	da12      	bge.n	800d590 <pow+0x120>
 800d56a:	4639      	mov	r1, r7
 800d56c:	f7ff ff4c 	bl	800d408 <checkint>
 800d570:	2801      	cmp	r0, #1
 800d572:	d10d      	bne.n	800d590 <pow+0x120>
 800d574:	eeb1 0b40 	vneg.f64	d0, d0
 800d578:	ea58 0309 	orrs.w	r3, r8, r9
 800d57c:	d10a      	bne.n	800d594 <pow+0x124>
 800d57e:	2f00      	cmp	r7, #0
 800d580:	dadf      	bge.n	800d542 <pow+0xd2>
 800d582:	b006      	add	sp, #24
 800d584:	ecbd 8b0a 	vpop	{d8-d12}
 800d588:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d58c:	f7ff bef8 	b.w	800d380 <__math_divzero>
 800d590:	2000      	movs	r0, #0
 800d592:	e7f1      	b.n	800d578 <pow+0x108>
 800d594:	2f00      	cmp	r7, #0
 800d596:	dad4      	bge.n	800d542 <pow+0xd2>
 800d598:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d59c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800d5a0:	ed8d 7b00 	vstr	d7, [sp]
 800d5a4:	ed9d 0b00 	vldr	d0, [sp]
 800d5a8:	e7cb      	b.n	800d542 <pow+0xd2>
 800d5aa:	2c00      	cmp	r4, #0
 800d5ac:	da2c      	bge.n	800d608 <pow+0x198>
 800d5ae:	4639      	mov	r1, r7
 800d5b0:	f7ff ff2a 	bl	800d408 <checkint>
 800d5b4:	b930      	cbnz	r0, 800d5c4 <pow+0x154>
 800d5b6:	b006      	add	sp, #24
 800d5b8:	ecbd 8b0a 	vpop	{d8-d12}
 800d5bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c0:	f7ff bef6 	b.w	800d3b0 <__math_invalid>
 800d5c4:	2801      	cmp	r0, #1
 800d5c6:	bf14      	ite	ne
 800d5c8:	2000      	movne	r0, #0
 800d5ca:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800d5ce:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d5d2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800d5d6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800d5da:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800d5de:	2b7f      	cmp	r3, #127	; 0x7f
 800d5e0:	d92d      	bls.n	800d63e <pow+0x1ce>
 800d5e2:	4b67      	ldr	r3, [pc, #412]	; (800d780 <pow+0x310>)
 800d5e4:	2000      	movs	r0, #0
 800d5e6:	429c      	cmp	r4, r3
 800d5e8:	bf08      	it	eq
 800d5ea:	4286      	cmpeq	r6, r0
 800d5ec:	f43f af7d 	beq.w	800d4ea <pow+0x7a>
 800d5f0:	f240 31bd 	movw	r1, #957	; 0x3bd
 800d5f4:	428a      	cmp	r2, r1
 800d5f6:	d80c      	bhi.n	800d612 <pow+0x1a2>
 800d5f8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d5fc:	42b0      	cmp	r0, r6
 800d5fe:	41a3      	sbcs	r3, r4
 800d600:	d204      	bcs.n	800d60c <pow+0x19c>
 800d602:	ee31 0b00 	vadd.f64	d0, d1, d0
 800d606:	e79c      	b.n	800d542 <pow+0xd2>
 800d608:	2000      	movs	r0, #0
 800d60a:	e7e4      	b.n	800d5d6 <pow+0x166>
 800d60c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800d610:	e797      	b.n	800d542 <pow+0xd2>
 800d612:	2e01      	cmp	r6, #1
 800d614:	eb74 0303 	sbcs.w	r3, r4, r3
 800d618:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d61c:	bf34      	ite	cc
 800d61e:	2301      	movcc	r3, #1
 800d620:	2300      	movcs	r3, #0
 800d622:	4295      	cmp	r5, r2
 800d624:	bf8c      	ite	hi
 800d626:	2500      	movhi	r5, #0
 800d628:	2501      	movls	r5, #1
 800d62a:	42ab      	cmp	r3, r5
 800d62c:	f000 809d 	beq.w	800d76a <pow+0x2fa>
 800d630:	b006      	add	sp, #24
 800d632:	ecbd 8b0a 	vpop	{d8-d12}
 800d636:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d63a:	f7ff be99 	b.w	800d370 <__math_oflow>
 800d63e:	f1bc 0f00 	cmp.w	ip, #0
 800d642:	d10b      	bne.n	800d65c <pow+0x1ec>
 800d644:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800d778 <pow+0x308>
 800d648:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d64c:	ec53 2b17 	vmov	r2, r3, d7
 800d650:	ee17 6a10 	vmov	r6, s14
 800d654:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d658:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800d65c:	4b4c      	ldr	r3, [pc, #304]	; (800d790 <pow+0x320>)
 800d65e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800d662:	4423      	add	r3, r4
 800d664:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800d668:	1519      	asrs	r1, r3, #20
 800d66a:	0d1b      	lsrs	r3, r3, #20
 800d66c:	051b      	lsls	r3, r3, #20
 800d66e:	eba4 0903 	sub.w	r9, r4, r3
 800d672:	4b48      	ldr	r3, [pc, #288]	; (800d794 <pow+0x324>)
 800d674:	ee04 1a10 	vmov	s8, r1
 800d678:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800d67c:	f1b6 0800 	subs.w	r8, r6, #0
 800d680:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800d684:	ec49 8b15 	vmov	d5, r8, r9
 800d688:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800d68c:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d690:	ed93 7b00 	vldr	d7, [r3]
 800d694:	ed93 5b02 	vldr	d5, [r3, #8]
 800d698:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800d69c:	eea4 2b07 	vfma.f64	d2, d4, d7
 800d6a0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800d6a4:	ee36 ab02 	vadd.f64	d10, d6, d2
 800d6a8:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800d6ac:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d6b0:	ed93 5b04 	vldr	d5, [r3, #16]
 800d6b4:	ee32 2b06 	vadd.f64	d2, d2, d6
 800d6b8:	ee37 7b02 	vadd.f64	d7, d7, d2
 800d6bc:	ee26 5b05 	vmul.f64	d5, d6, d5
 800d6c0:	ed93 4b08 	vldr	d4, [r3, #32]
 800d6c4:	ee26 0b05 	vmul.f64	d0, d6, d5
 800d6c8:	eeb0 9b40 	vmov.f64	d9, d0
 800d6cc:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800d6d0:	ed93 5b06 	vldr	d5, [r3, #24]
 800d6d4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800d6d8:	ee26 bb00 	vmul.f64	d11, d6, d0
 800d6dc:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800d6e0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800d6e4:	ee3a ab48 	vsub.f64	d10, d10, d8
 800d6e8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800d6ec:	ee37 9b09 	vadd.f64	d9, d7, d9
 800d6f0:	ee3a ab00 	vadd.f64	d10, d10, d0
 800d6f4:	eea6 4b03 	vfma.f64	d4, d6, d3
 800d6f8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800d6fc:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800d700:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800d704:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800d708:	eea0 4b03 	vfma.f64	d4, d0, d3
 800d70c:	eea0 5b04 	vfma.f64	d5, d0, d4
 800d710:	eeab ab05 	vfma.f64	d10, d11, d5
 800d714:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800d718:	ee21 7b06 	vmul.f64	d7, d1, d6
 800d71c:	ee17 3a90 	vmov	r3, s15
 800d720:	eeb0 5b47 	vmov.f64	d5, d7
 800d724:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800d728:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800d72c:	18b2      	adds	r2, r6, r2
 800d72e:	2a3e      	cmp	r2, #62	; 0x3e
 800d730:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800d734:	ee38 8b46 	vsub.f64	d8, d8, d6
 800d738:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800d73c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800d740:	d92b      	bls.n	800d79a <pow+0x32a>
 800d742:	2a00      	cmp	r2, #0
 800d744:	da0b      	bge.n	800d75e <pow+0x2ee>
 800d746:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d74a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d74e:	2800      	cmp	r0, #0
 800d750:	f43f aef7 	beq.w	800d542 <pow+0xd2>
 800d754:	eeb1 0b40 	vneg.f64	d0, d0
 800d758:	e6f3      	b.n	800d542 <pow+0xd2>
 800d75a:	2000      	movs	r0, #0
 800d75c:	e77e      	b.n	800d65c <pow+0x1ec>
 800d75e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800d762:	d919      	bls.n	800d798 <pow+0x328>
 800d764:	2b00      	cmp	r3, #0
 800d766:	f6bf af63 	bge.w	800d630 <pow+0x1c0>
 800d76a:	b006      	add	sp, #24
 800d76c:	ecbd 8b0a 	vpop	{d8-d12}
 800d770:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d774:	f7ff bdf4 	b.w	800d360 <__math_uflow>
 800d778:	00000000 	.word	0x00000000
 800d77c:	43300000 	.word	0x43300000
 800d780:	3ff00000 	.word	0x3ff00000
 800d784:	fff00000 	.word	0xfff00000
 800d788:	ffe00000 	.word	0xffe00000
 800d78c:	7fe00000 	.word	0x7fe00000
 800d790:	c0196aab 	.word	0xc0196aab
 800d794:	0800fce0 	.word	0x0800fce0
 800d798:	2600      	movs	r6, #0
 800d79a:	495d      	ldr	r1, [pc, #372]	; (800d910 <pow+0x4a0>)
 800d79c:	ed91 4b02 	vldr	d4, [r1, #8]
 800d7a0:	ed91 3b00 	vldr	d3, [r1]
 800d7a4:	eeb0 6b44 	vmov.f64	d6, d4
 800d7a8:	eea7 6b03 	vfma.f64	d6, d7, d3
 800d7ac:	ee16 5a10 	vmov	r5, s12
 800d7b0:	ee36 6b44 	vsub.f64	d6, d6, d4
 800d7b4:	ed91 4b04 	vldr	d4, [r1, #16]
 800d7b8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800d7bc:	eea6 7b04 	vfma.f64	d7, d6, d4
 800d7c0:	eeb0 0b47 	vmov.f64	d0, d7
 800d7c4:	ed91 7b06 	vldr	d7, [r1, #24]
 800d7c8:	18dc      	adds	r4, r3, r3
 800d7ca:	f104 030f 	add.w	r3, r4, #15
 800d7ce:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800d7d2:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d7d6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800d7da:	ee35 0b00 	vadd.f64	d0, d5, d0
 800d7de:	ee20 6b00 	vmul.f64	d6, d0, d0
 800d7e2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800d7e6:	ed91 5b08 	vldr	d5, [r1, #32]
 800d7ea:	ee30 7b07 	vadd.f64	d7, d0, d7
 800d7ee:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800d7f2:	eea0 5b04 	vfma.f64	d5, d0, d4
 800d7f6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800d7fa:	eea6 7b05 	vfma.f64	d7, d6, d5
 800d7fe:	ee26 6b06 	vmul.f64	d6, d6, d6
 800d802:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800d806:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800d80a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800d80e:	eea0 5b04 	vfma.f64	d5, d0, d4
 800d812:	1940      	adds	r0, r0, r5
 800d814:	2700      	movs	r7, #0
 800d816:	eb17 020c 	adds.w	r2, r7, ip
 800d81a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800d81e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800d822:	2e00      	cmp	r6, #0
 800d824:	d15f      	bne.n	800d8e6 <pow+0x476>
 800d826:	42bd      	cmp	r5, r7
 800d828:	db13      	blt.n	800d852 <pow+0x3e2>
 800d82a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800d82e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800d832:	4610      	mov	r0, r2
 800d834:	ec41 0b10 	vmov	d0, r0, r1
 800d838:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d83c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d8f8 <pow+0x488>
 800d840:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d844:	b006      	add	sp, #24
 800d846:	ecbd 8b0a 	vpop	{d8-d12}
 800d84a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d84e:	f7ff bdc7 	b.w	800d3e0 <__math_check_oflow>
 800d852:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d856:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800d85a:	4610      	mov	r0, r2
 800d85c:	ec41 0b15 	vmov	d5, r0, r1
 800d860:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800d864:	ee27 6b05 	vmul.f64	d6, d7, d5
 800d868:	ee35 7b06 	vadd.f64	d7, d5, d6
 800d86c:	eeb0 3bc7 	vabs.f64	d3, d7
 800d870:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800d874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d878:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d900 <pow+0x490>
 800d87c:	d52a      	bpl.n	800d8d4 <pow+0x464>
 800d87e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d882:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d88a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800d88e:	ee35 6b06 	vadd.f64	d6, d5, d6
 800d892:	bf48      	it	mi
 800d894:	eeb0 4b43 	vmovmi.f64	d4, d3
 800d898:	ee37 3b04 	vadd.f64	d3, d7, d4
 800d89c:	ee34 5b43 	vsub.f64	d5, d4, d3
 800d8a0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d8a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d8a8:	ee37 7b03 	vadd.f64	d7, d7, d3
 800d8ac:	ee37 7b44 	vsub.f64	d7, d7, d4
 800d8b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b8:	d104      	bne.n	800d8c4 <pow+0x454>
 800d8ba:	4632      	mov	r2, r6
 800d8bc:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d8c0:	ec43 2b17 	vmov	d7, r2, r3
 800d8c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d8c8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d8cc:	ee26 6b00 	vmul.f64	d6, d6, d0
 800d8d0:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d8d4:	ee27 0b00 	vmul.f64	d0, d7, d0
 800d8d8:	b006      	add	sp, #24
 800d8da:	ecbd 8b0a 	vpop	{d8-d12}
 800d8de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8e2:	f7ff bd74 	b.w	800d3ce <__math_check_uflow>
 800d8e6:	ec43 2b10 	vmov	d0, r2, r3
 800d8ea:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d8ee:	e628      	b.n	800d542 <pow+0xd2>
 800d8f0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800d908 <pow+0x498>
 800d8f4:	e625      	b.n	800d542 <pow+0xd2>
 800d8f6:	bf00      	nop
 800d8f8:	00000000 	.word	0x00000000
 800d8fc:	7f000000 	.word	0x7f000000
 800d900:	00000000 	.word	0x00000000
 800d904:	00100000 	.word	0x00100000
	...
 800d910:	0800ebe0 	.word	0x0800ebe0
 800d914:	00000000 	.word	0x00000000

0800d918 <cos>:
 800d918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d91a:	eeb0 7b40 	vmov.f64	d7, d0
 800d91e:	ee17 3a90 	vmov	r3, s15
 800d922:	4a21      	ldr	r2, [pc, #132]	; (800d9a8 <cos+0x90>)
 800d924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d928:	4293      	cmp	r3, r2
 800d92a:	dc06      	bgt.n	800d93a <cos+0x22>
 800d92c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800d9a0 <cos+0x88>
 800d930:	b005      	add	sp, #20
 800d932:	f85d eb04 	ldr.w	lr, [sp], #4
 800d936:	f000 ba13 	b.w	800dd60 <__kernel_cos>
 800d93a:	4a1c      	ldr	r2, [pc, #112]	; (800d9ac <cos+0x94>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	dd04      	ble.n	800d94a <cos+0x32>
 800d940:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d944:	b005      	add	sp, #20
 800d946:	f85d fb04 	ldr.w	pc, [sp], #4
 800d94a:	4668      	mov	r0, sp
 800d94c:	f000 f8c4 	bl	800dad8 <__ieee754_rem_pio2>
 800d950:	f000 0003 	and.w	r0, r0, #3
 800d954:	2801      	cmp	r0, #1
 800d956:	d009      	beq.n	800d96c <cos+0x54>
 800d958:	2802      	cmp	r0, #2
 800d95a:	d010      	beq.n	800d97e <cos+0x66>
 800d95c:	b9b0      	cbnz	r0, 800d98c <cos+0x74>
 800d95e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d962:	ed9d 0b00 	vldr	d0, [sp]
 800d966:	f000 f9fb 	bl	800dd60 <__kernel_cos>
 800d96a:	e7eb      	b.n	800d944 <cos+0x2c>
 800d96c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d970:	ed9d 0b00 	vldr	d0, [sp]
 800d974:	f000 fcf8 	bl	800e368 <__kernel_sin>
 800d978:	eeb1 0b40 	vneg.f64	d0, d0
 800d97c:	e7e2      	b.n	800d944 <cos+0x2c>
 800d97e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d982:	ed9d 0b00 	vldr	d0, [sp]
 800d986:	f000 f9eb 	bl	800dd60 <__kernel_cos>
 800d98a:	e7f5      	b.n	800d978 <cos+0x60>
 800d98c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d990:	ed9d 0b00 	vldr	d0, [sp]
 800d994:	2001      	movs	r0, #1
 800d996:	f000 fce7 	bl	800e368 <__kernel_sin>
 800d99a:	e7d3      	b.n	800d944 <cos+0x2c>
 800d99c:	f3af 8000 	nop.w
	...
 800d9a8:	3fe921fb 	.word	0x3fe921fb
 800d9ac:	7fefffff 	.word	0x7fefffff

0800d9b0 <round>:
 800d9b0:	ee10 1a90 	vmov	r1, s1
 800d9b4:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800d9b8:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 800d9bc:	2a13      	cmp	r2, #19
 800d9be:	b510      	push	{r4, lr}
 800d9c0:	ee10 3a10 	vmov	r3, s0
 800d9c4:	dc19      	bgt.n	800d9fa <round+0x4a>
 800d9c6:	2a00      	cmp	r2, #0
 800d9c8:	da09      	bge.n	800d9de <round+0x2e>
 800d9ca:	3201      	adds	r2, #1
 800d9cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d9d0:	d103      	bne.n	800d9da <round+0x2a>
 800d9d2:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d9d6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d9da:	2000      	movs	r0, #0
 800d9dc:	e026      	b.n	800da2c <round+0x7c>
 800d9de:	4816      	ldr	r0, [pc, #88]	; (800da38 <round+0x88>)
 800d9e0:	4110      	asrs	r0, r2
 800d9e2:	ea01 0400 	and.w	r4, r1, r0
 800d9e6:	4323      	orrs	r3, r4
 800d9e8:	d00e      	beq.n	800da08 <round+0x58>
 800d9ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d9ee:	fa43 f202 	asr.w	r2, r3, r2
 800d9f2:	4411      	add	r1, r2
 800d9f4:	ea21 0100 	bic.w	r1, r1, r0
 800d9f8:	e7ef      	b.n	800d9da <round+0x2a>
 800d9fa:	2a33      	cmp	r2, #51	; 0x33
 800d9fc:	dd05      	ble.n	800da0a <round+0x5a>
 800d9fe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800da02:	d101      	bne.n	800da08 <round+0x58>
 800da04:	ee30 0b00 	vadd.f64	d0, d0, d0
 800da08:	bd10      	pop	{r4, pc}
 800da0a:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800da0e:	f04f 30ff 	mov.w	r0, #4294967295
 800da12:	40e0      	lsrs	r0, r4
 800da14:	4203      	tst	r3, r0
 800da16:	d0f7      	beq.n	800da08 <round+0x58>
 800da18:	2401      	movs	r4, #1
 800da1a:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800da1e:	fa04 f202 	lsl.w	r2, r4, r2
 800da22:	189b      	adds	r3, r3, r2
 800da24:	bf28      	it	cs
 800da26:	1909      	addcs	r1, r1, r4
 800da28:	ea23 0000 	bic.w	r0, r3, r0
 800da2c:	460b      	mov	r3, r1
 800da2e:	4602      	mov	r2, r0
 800da30:	ec43 2b10 	vmov	d0, r2, r3
 800da34:	e7e8      	b.n	800da08 <round+0x58>
 800da36:	bf00      	nop
 800da38:	000fffff 	.word	0x000fffff
 800da3c:	00000000 	.word	0x00000000

0800da40 <sin>:
 800da40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da42:	eeb0 7b40 	vmov.f64	d7, d0
 800da46:	ee17 3a90 	vmov	r3, s15
 800da4a:	4a21      	ldr	r2, [pc, #132]	; (800dad0 <sin+0x90>)
 800da4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da50:	4293      	cmp	r3, r2
 800da52:	dc07      	bgt.n	800da64 <sin+0x24>
 800da54:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800dac8 <sin+0x88>
 800da58:	2000      	movs	r0, #0
 800da5a:	b005      	add	sp, #20
 800da5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800da60:	f000 bc82 	b.w	800e368 <__kernel_sin>
 800da64:	4a1b      	ldr	r2, [pc, #108]	; (800dad4 <sin+0x94>)
 800da66:	4293      	cmp	r3, r2
 800da68:	dd04      	ble.n	800da74 <sin+0x34>
 800da6a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800da6e:	b005      	add	sp, #20
 800da70:	f85d fb04 	ldr.w	pc, [sp], #4
 800da74:	4668      	mov	r0, sp
 800da76:	f000 f82f 	bl	800dad8 <__ieee754_rem_pio2>
 800da7a:	f000 0003 	and.w	r0, r0, #3
 800da7e:	2801      	cmp	r0, #1
 800da80:	d00a      	beq.n	800da98 <sin+0x58>
 800da82:	2802      	cmp	r0, #2
 800da84:	d00f      	beq.n	800daa6 <sin+0x66>
 800da86:	b9c0      	cbnz	r0, 800daba <sin+0x7a>
 800da88:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da8c:	ed9d 0b00 	vldr	d0, [sp]
 800da90:	2001      	movs	r0, #1
 800da92:	f000 fc69 	bl	800e368 <__kernel_sin>
 800da96:	e7ea      	b.n	800da6e <sin+0x2e>
 800da98:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da9c:	ed9d 0b00 	vldr	d0, [sp]
 800daa0:	f000 f95e 	bl	800dd60 <__kernel_cos>
 800daa4:	e7e3      	b.n	800da6e <sin+0x2e>
 800daa6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800daaa:	ed9d 0b00 	vldr	d0, [sp]
 800daae:	2001      	movs	r0, #1
 800dab0:	f000 fc5a 	bl	800e368 <__kernel_sin>
 800dab4:	eeb1 0b40 	vneg.f64	d0, d0
 800dab8:	e7d9      	b.n	800da6e <sin+0x2e>
 800daba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dabe:	ed9d 0b00 	vldr	d0, [sp]
 800dac2:	f000 f94d 	bl	800dd60 <__kernel_cos>
 800dac6:	e7f5      	b.n	800dab4 <sin+0x74>
	...
 800dad0:	3fe921fb 	.word	0x3fe921fb
 800dad4:	7fefffff 	.word	0x7fefffff

0800dad8 <__ieee754_rem_pio2>:
 800dad8:	b570      	push	{r4, r5, r6, lr}
 800dada:	eeb0 7b40 	vmov.f64	d7, d0
 800dade:	ee17 5a90 	vmov	r5, s15
 800dae2:	4b99      	ldr	r3, [pc, #612]	; (800dd48 <__ieee754_rem_pio2+0x270>)
 800dae4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dae8:	429e      	cmp	r6, r3
 800daea:	b088      	sub	sp, #32
 800daec:	4604      	mov	r4, r0
 800daee:	dc07      	bgt.n	800db00 <__ieee754_rem_pio2+0x28>
 800daf0:	2200      	movs	r2, #0
 800daf2:	2300      	movs	r3, #0
 800daf4:	ed84 0b00 	vstr	d0, [r4]
 800daf8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dafc:	2000      	movs	r0, #0
 800dafe:	e01b      	b.n	800db38 <__ieee754_rem_pio2+0x60>
 800db00:	4b92      	ldr	r3, [pc, #584]	; (800dd4c <__ieee754_rem_pio2+0x274>)
 800db02:	429e      	cmp	r6, r3
 800db04:	dc3b      	bgt.n	800db7e <__ieee754_rem_pio2+0xa6>
 800db06:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800db0a:	2d00      	cmp	r5, #0
 800db0c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800dd08 <__ieee754_rem_pio2+0x230>
 800db10:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800db14:	dd19      	ble.n	800db4a <__ieee754_rem_pio2+0x72>
 800db16:	ee30 7b46 	vsub.f64	d7, d0, d6
 800db1a:	429e      	cmp	r6, r3
 800db1c:	d00e      	beq.n	800db3c <__ieee754_rem_pio2+0x64>
 800db1e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800dd10 <__ieee754_rem_pio2+0x238>
 800db22:	ee37 5b46 	vsub.f64	d5, d7, d6
 800db26:	ee37 7b45 	vsub.f64	d7, d7, d5
 800db2a:	ed84 5b00 	vstr	d5, [r4]
 800db2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800db32:	ed84 7b02 	vstr	d7, [r4, #8]
 800db36:	2001      	movs	r0, #1
 800db38:	b008      	add	sp, #32
 800db3a:	bd70      	pop	{r4, r5, r6, pc}
 800db3c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800dd18 <__ieee754_rem_pio2+0x240>
 800db40:	ee37 7b46 	vsub.f64	d7, d7, d6
 800db44:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800dd20 <__ieee754_rem_pio2+0x248>
 800db48:	e7eb      	b.n	800db22 <__ieee754_rem_pio2+0x4a>
 800db4a:	429e      	cmp	r6, r3
 800db4c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800db50:	d00e      	beq.n	800db70 <__ieee754_rem_pio2+0x98>
 800db52:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800dd10 <__ieee754_rem_pio2+0x238>
 800db56:	ee37 5b06 	vadd.f64	d5, d7, d6
 800db5a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800db5e:	ed84 5b00 	vstr	d5, [r4]
 800db62:	ee37 7b06 	vadd.f64	d7, d7, d6
 800db66:	f04f 30ff 	mov.w	r0, #4294967295
 800db6a:	ed84 7b02 	vstr	d7, [r4, #8]
 800db6e:	e7e3      	b.n	800db38 <__ieee754_rem_pio2+0x60>
 800db70:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800dd18 <__ieee754_rem_pio2+0x240>
 800db74:	ee37 7b06 	vadd.f64	d7, d7, d6
 800db78:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800dd20 <__ieee754_rem_pio2+0x248>
 800db7c:	e7eb      	b.n	800db56 <__ieee754_rem_pio2+0x7e>
 800db7e:	4b74      	ldr	r3, [pc, #464]	; (800dd50 <__ieee754_rem_pio2+0x278>)
 800db80:	429e      	cmp	r6, r3
 800db82:	dc70      	bgt.n	800dc66 <__ieee754_rem_pio2+0x18e>
 800db84:	f000 fc48 	bl	800e418 <fabs>
 800db88:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800db8c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800dd28 <__ieee754_rem_pio2+0x250>
 800db90:	eea0 7b06 	vfma.f64	d7, d0, d6
 800db94:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800db98:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800db9c:	ee17 0a90 	vmov	r0, s15
 800dba0:	eeb1 4b45 	vneg.f64	d4, d5
 800dba4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800dd08 <__ieee754_rem_pio2+0x230>
 800dba8:	eea5 0b47 	vfms.f64	d0, d5, d7
 800dbac:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800dd10 <__ieee754_rem_pio2+0x238>
 800dbb0:	281f      	cmp	r0, #31
 800dbb2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800dbb6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dbba:	dc08      	bgt.n	800dbce <__ieee754_rem_pio2+0xf6>
 800dbbc:	4b65      	ldr	r3, [pc, #404]	; (800dd54 <__ieee754_rem_pio2+0x27c>)
 800dbbe:	1e42      	subs	r2, r0, #1
 800dbc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbc4:	42b3      	cmp	r3, r6
 800dbc6:	d002      	beq.n	800dbce <__ieee754_rem_pio2+0xf6>
 800dbc8:	ed84 6b00 	vstr	d6, [r4]
 800dbcc:	e026      	b.n	800dc1c <__ieee754_rem_pio2+0x144>
 800dbce:	ee16 3a90 	vmov	r3, s13
 800dbd2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800dbd6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800dbda:	2b10      	cmp	r3, #16
 800dbdc:	ea4f 5226 	mov.w	r2, r6, asr #20
 800dbe0:	ddf2      	ble.n	800dbc8 <__ieee754_rem_pio2+0xf0>
 800dbe2:	eeb0 6b40 	vmov.f64	d6, d0
 800dbe6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800dd18 <__ieee754_rem_pio2+0x240>
 800dbea:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800dd20 <__ieee754_rem_pio2+0x248>
 800dbee:	eea4 6b07 	vfma.f64	d6, d4, d7
 800dbf2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800dbf6:	eea4 0b07 	vfma.f64	d0, d4, d7
 800dbfa:	eeb0 7b40 	vmov.f64	d7, d0
 800dbfe:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800dc02:	ee36 3b47 	vsub.f64	d3, d6, d7
 800dc06:	ee13 3a90 	vmov	r3, s7
 800dc0a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800dc0e:	1ad3      	subs	r3, r2, r3
 800dc10:	2b31      	cmp	r3, #49	; 0x31
 800dc12:	dc17      	bgt.n	800dc44 <__ieee754_rem_pio2+0x16c>
 800dc14:	eeb0 0b46 	vmov.f64	d0, d6
 800dc18:	ed84 3b00 	vstr	d3, [r4]
 800dc1c:	ed94 6b00 	vldr	d6, [r4]
 800dc20:	2d00      	cmp	r5, #0
 800dc22:	ee30 0b46 	vsub.f64	d0, d0, d6
 800dc26:	ee30 0b47 	vsub.f64	d0, d0, d7
 800dc2a:	ed84 0b02 	vstr	d0, [r4, #8]
 800dc2e:	da83      	bge.n	800db38 <__ieee754_rem_pio2+0x60>
 800dc30:	eeb1 6b46 	vneg.f64	d6, d6
 800dc34:	eeb1 0b40 	vneg.f64	d0, d0
 800dc38:	ed84 6b00 	vstr	d6, [r4]
 800dc3c:	ed84 0b02 	vstr	d0, [r4, #8]
 800dc40:	4240      	negs	r0, r0
 800dc42:	e779      	b.n	800db38 <__ieee754_rem_pio2+0x60>
 800dc44:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800dd30 <__ieee754_rem_pio2+0x258>
 800dc48:	eeb0 0b46 	vmov.f64	d0, d6
 800dc4c:	eea4 0b03 	vfma.f64	d0, d4, d3
 800dc50:	ee36 7b40 	vsub.f64	d7, d6, d0
 800dc54:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800dd38 <__ieee754_rem_pio2+0x260>
 800dc58:	eea4 7b03 	vfma.f64	d7, d4, d3
 800dc5c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800dc60:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dc64:	e7b0      	b.n	800dbc8 <__ieee754_rem_pio2+0xf0>
 800dc66:	4b3c      	ldr	r3, [pc, #240]	; (800dd58 <__ieee754_rem_pio2+0x280>)
 800dc68:	429e      	cmp	r6, r3
 800dc6a:	dd06      	ble.n	800dc7a <__ieee754_rem_pio2+0x1a2>
 800dc6c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800dc70:	ed80 7b02 	vstr	d7, [r0, #8]
 800dc74:	ed80 7b00 	vstr	d7, [r0]
 800dc78:	e740      	b.n	800dafc <__ieee754_rem_pio2+0x24>
 800dc7a:	1532      	asrs	r2, r6, #20
 800dc7c:	ee10 0a10 	vmov	r0, s0
 800dc80:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800dc84:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800dc88:	ec41 0b17 	vmov	d7, r0, r1
 800dc8c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800dc90:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800dd40 <__ieee754_rem_pio2+0x268>
 800dc94:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800dc98:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800dca0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dca4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800dca8:	a902      	add	r1, sp, #8
 800dcaa:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800dcae:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dcb2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800dcb6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dcba:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dcbe:	2603      	movs	r6, #3
 800dcc0:	4608      	mov	r0, r1
 800dcc2:	ed91 7b04 	vldr	d7, [r1, #16]
 800dcc6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dcca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcce:	4633      	mov	r3, r6
 800dcd0:	f1a1 0108 	sub.w	r1, r1, #8
 800dcd4:	f106 36ff 	add.w	r6, r6, #4294967295
 800dcd8:	d0f3      	beq.n	800dcc2 <__ieee754_rem_pio2+0x1ea>
 800dcda:	4920      	ldr	r1, [pc, #128]	; (800dd5c <__ieee754_rem_pio2+0x284>)
 800dcdc:	9101      	str	r1, [sp, #4]
 800dcde:	2102      	movs	r1, #2
 800dce0:	9100      	str	r1, [sp, #0]
 800dce2:	4621      	mov	r1, r4
 800dce4:	f000 f8a8 	bl	800de38 <__kernel_rem_pio2>
 800dce8:	2d00      	cmp	r5, #0
 800dcea:	f6bf af25 	bge.w	800db38 <__ieee754_rem_pio2+0x60>
 800dcee:	ed94 7b00 	vldr	d7, [r4]
 800dcf2:	eeb1 7b47 	vneg.f64	d7, d7
 800dcf6:	ed84 7b00 	vstr	d7, [r4]
 800dcfa:	ed94 7b02 	vldr	d7, [r4, #8]
 800dcfe:	eeb1 7b47 	vneg.f64	d7, d7
 800dd02:	ed84 7b02 	vstr	d7, [r4, #8]
 800dd06:	e79b      	b.n	800dc40 <__ieee754_rem_pio2+0x168>
 800dd08:	54400000 	.word	0x54400000
 800dd0c:	3ff921fb 	.word	0x3ff921fb
 800dd10:	1a626331 	.word	0x1a626331
 800dd14:	3dd0b461 	.word	0x3dd0b461
 800dd18:	1a600000 	.word	0x1a600000
 800dd1c:	3dd0b461 	.word	0x3dd0b461
 800dd20:	2e037073 	.word	0x2e037073
 800dd24:	3ba3198a 	.word	0x3ba3198a
 800dd28:	6dc9c883 	.word	0x6dc9c883
 800dd2c:	3fe45f30 	.word	0x3fe45f30
 800dd30:	2e000000 	.word	0x2e000000
 800dd34:	3ba3198a 	.word	0x3ba3198a
 800dd38:	252049c1 	.word	0x252049c1
 800dd3c:	397b839a 	.word	0x397b839a
 800dd40:	00000000 	.word	0x00000000
 800dd44:	41700000 	.word	0x41700000
 800dd48:	3fe921fb 	.word	0x3fe921fb
 800dd4c:	4002d97b 	.word	0x4002d97b
 800dd50:	413921fb 	.word	0x413921fb
 800dd54:	08010d28 	.word	0x08010d28
 800dd58:	7fefffff 	.word	0x7fefffff
 800dd5c:	08010da8 	.word	0x08010da8

0800dd60 <__kernel_cos>:
 800dd60:	ee10 1a90 	vmov	r1, s1
 800dd64:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800dd68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dd6c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800dd70:	da05      	bge.n	800dd7e <__kernel_cos+0x1e>
 800dd72:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800dd76:	ee17 3a90 	vmov	r3, s15
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d03d      	beq.n	800ddfa <__kernel_cos+0x9a>
 800dd7e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800dd82:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800de00 <__kernel_cos+0xa0>
 800dd86:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800de08 <__kernel_cos+0xa8>
 800dd8a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800dd8e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800de10 <__kernel_cos+0xb0>
 800dd92:	eea6 7b03 	vfma.f64	d7, d6, d3
 800dd96:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800de18 <__kernel_cos+0xb8>
 800dd9a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800dd9e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800de20 <__kernel_cos+0xc0>
 800dda2:	4b23      	ldr	r3, [pc, #140]	; (800de30 <__kernel_cos+0xd0>)
 800dda4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800dda8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800de28 <__kernel_cos+0xc8>
 800ddac:	4299      	cmp	r1, r3
 800ddae:	eea7 6b03 	vfma.f64	d6, d7, d3
 800ddb2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ddb6:	ee26 5b03 	vmul.f64	d5, d6, d3
 800ddba:	ee23 7b07 	vmul.f64	d7, d3, d7
 800ddbe:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800ddc2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ddc6:	dc04      	bgt.n	800ddd2 <__kernel_cos+0x72>
 800ddc8:	ee37 6b46 	vsub.f64	d6, d7, d6
 800ddcc:	ee34 0b46 	vsub.f64	d0, d4, d6
 800ddd0:	4770      	bx	lr
 800ddd2:	4b18      	ldr	r3, [pc, #96]	; (800de34 <__kernel_cos+0xd4>)
 800ddd4:	4299      	cmp	r1, r3
 800ddd6:	dc0d      	bgt.n	800ddf4 <__kernel_cos+0x94>
 800ddd8:	2200      	movs	r2, #0
 800ddda:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800ddde:	ec43 2b15 	vmov	d5, r2, r3
 800dde2:	ee34 0b45 	vsub.f64	d0, d4, d5
 800dde6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ddea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ddee:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ddf2:	4770      	bx	lr
 800ddf4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ddf8:	e7f3      	b.n	800dde2 <__kernel_cos+0x82>
 800ddfa:	eeb0 0b44 	vmov.f64	d0, d4
 800ddfe:	4770      	bx	lr
 800de00:	be8838d4 	.word	0xbe8838d4
 800de04:	bda8fae9 	.word	0xbda8fae9
 800de08:	bdb4b1c4 	.word	0xbdb4b1c4
 800de0c:	3e21ee9e 	.word	0x3e21ee9e
 800de10:	809c52ad 	.word	0x809c52ad
 800de14:	be927e4f 	.word	0xbe927e4f
 800de18:	19cb1590 	.word	0x19cb1590
 800de1c:	3efa01a0 	.word	0x3efa01a0
 800de20:	16c15177 	.word	0x16c15177
 800de24:	bf56c16c 	.word	0xbf56c16c
 800de28:	5555554c 	.word	0x5555554c
 800de2c:	3fa55555 	.word	0x3fa55555
 800de30:	3fd33332 	.word	0x3fd33332
 800de34:	3fe90000 	.word	0x3fe90000

0800de38 <__kernel_rem_pio2>:
 800de38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3c:	ed2d 8b06 	vpush	{d8-d10}
 800de40:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800de44:	460f      	mov	r7, r1
 800de46:	9002      	str	r0, [sp, #8]
 800de48:	49c5      	ldr	r1, [pc, #788]	; (800e160 <__kernel_rem_pio2+0x328>)
 800de4a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800de4c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800de50:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800de54:	9301      	str	r3, [sp, #4]
 800de56:	f112 0f14 	cmn.w	r2, #20
 800de5a:	bfa8      	it	ge
 800de5c:	2018      	movge	r0, #24
 800de5e:	f103 31ff 	add.w	r1, r3, #4294967295
 800de62:	bfb8      	it	lt
 800de64:	2000      	movlt	r0, #0
 800de66:	f06f 0417 	mvn.w	r4, #23
 800de6a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800e148 <__kernel_rem_pio2+0x310>
 800de6e:	bfa4      	itt	ge
 800de70:	f1a2 0a03 	subge.w	sl, r2, #3
 800de74:	fb9a f0f0 	sdivge	r0, sl, r0
 800de78:	fb00 4404 	mla	r4, r0, r4, r4
 800de7c:	1a46      	subs	r6, r0, r1
 800de7e:	4414      	add	r4, r2
 800de80:	eb09 0c01 	add.w	ip, r9, r1
 800de84:	ad1a      	add	r5, sp, #104	; 0x68
 800de86:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800de8a:	2200      	movs	r2, #0
 800de8c:	4562      	cmp	r2, ip
 800de8e:	dd10      	ble.n	800deb2 <__kernel_rem_pio2+0x7a>
 800de90:	9a01      	ldr	r2, [sp, #4]
 800de92:	ab1a      	add	r3, sp, #104	; 0x68
 800de94:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800de98:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800de9c:	f04f 0c00 	mov.w	ip, #0
 800dea0:	45cc      	cmp	ip, r9
 800dea2:	dc26      	bgt.n	800def2 <__kernel_rem_pio2+0xba>
 800dea4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800e148 <__kernel_rem_pio2+0x310>
 800dea8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800deac:	4616      	mov	r6, r2
 800deae:	2500      	movs	r5, #0
 800deb0:	e015      	b.n	800dede <__kernel_rem_pio2+0xa6>
 800deb2:	42d6      	cmn	r6, r2
 800deb4:	d409      	bmi.n	800deca <__kernel_rem_pio2+0x92>
 800deb6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800deba:	ee07 3a90 	vmov	s15, r3
 800debe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dec2:	eca5 7b02 	vstmia	r5!, {d7}
 800dec6:	3201      	adds	r2, #1
 800dec8:	e7e0      	b.n	800de8c <__kernel_rem_pio2+0x54>
 800deca:	eeb0 7b46 	vmov.f64	d7, d6
 800dece:	e7f8      	b.n	800dec2 <__kernel_rem_pio2+0x8a>
 800ded0:	ecb8 5b02 	vldmia	r8!, {d5}
 800ded4:	ed96 6b00 	vldr	d6, [r6]
 800ded8:	3501      	adds	r5, #1
 800deda:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dede:	428d      	cmp	r5, r1
 800dee0:	f1a6 0608 	sub.w	r6, r6, #8
 800dee4:	ddf4      	ble.n	800ded0 <__kernel_rem_pio2+0x98>
 800dee6:	ecaa 7b02 	vstmia	sl!, {d7}
 800deea:	f10c 0c01 	add.w	ip, ip, #1
 800deee:	3208      	adds	r2, #8
 800def0:	e7d6      	b.n	800dea0 <__kernel_rem_pio2+0x68>
 800def2:	ab06      	add	r3, sp, #24
 800def4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800e150 <__kernel_rem_pio2+0x318>
 800def8:	ed9f ab97 	vldr	d10, [pc, #604]	; 800e158 <__kernel_rem_pio2+0x320>
 800defc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800df00:	9303      	str	r3, [sp, #12]
 800df02:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800df06:	464d      	mov	r5, r9
 800df08:	00eb      	lsls	r3, r5, #3
 800df0a:	9304      	str	r3, [sp, #16]
 800df0c:	ab92      	add	r3, sp, #584	; 0x248
 800df0e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800df12:	f10d 0b18 	add.w	fp, sp, #24
 800df16:	ab6a      	add	r3, sp, #424	; 0x1a8
 800df18:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800df1c:	465e      	mov	r6, fp
 800df1e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800df22:	4628      	mov	r0, r5
 800df24:	2800      	cmp	r0, #0
 800df26:	f1a2 0208 	sub.w	r2, r2, #8
 800df2a:	dc4c      	bgt.n	800dfc6 <__kernel_rem_pio2+0x18e>
 800df2c:	4620      	mov	r0, r4
 800df2e:	9105      	str	r1, [sp, #20]
 800df30:	f000 faf2 	bl	800e518 <scalbn>
 800df34:	eeb0 8b40 	vmov.f64	d8, d0
 800df38:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800df3c:	ee28 0b00 	vmul.f64	d0, d8, d0
 800df40:	f000 fa76 	bl	800e430 <floor>
 800df44:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800df48:	eea0 8b47 	vfms.f64	d8, d0, d7
 800df4c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800df50:	2c00      	cmp	r4, #0
 800df52:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800df56:	ee17 8a90 	vmov	r8, s15
 800df5a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800df5e:	9905      	ldr	r1, [sp, #20]
 800df60:	dd43      	ble.n	800dfea <__kernel_rem_pio2+0x1b2>
 800df62:	1e68      	subs	r0, r5, #1
 800df64:	ab06      	add	r3, sp, #24
 800df66:	f1c4 0c18 	rsb	ip, r4, #24
 800df6a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800df6e:	fa46 f20c 	asr.w	r2, r6, ip
 800df72:	4490      	add	r8, r2
 800df74:	fa02 f20c 	lsl.w	r2, r2, ip
 800df78:	1ab6      	subs	r6, r6, r2
 800df7a:	f1c4 0217 	rsb	r2, r4, #23
 800df7e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800df82:	4116      	asrs	r6, r2
 800df84:	2e00      	cmp	r6, #0
 800df86:	dd3f      	ble.n	800e008 <__kernel_rem_pio2+0x1d0>
 800df88:	f04f 0c00 	mov.w	ip, #0
 800df8c:	f108 0801 	add.w	r8, r8, #1
 800df90:	4660      	mov	r0, ip
 800df92:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800df96:	4565      	cmp	r5, ip
 800df98:	dc6e      	bgt.n	800e078 <__kernel_rem_pio2+0x240>
 800df9a:	2c00      	cmp	r4, #0
 800df9c:	dd04      	ble.n	800dfa8 <__kernel_rem_pio2+0x170>
 800df9e:	2c01      	cmp	r4, #1
 800dfa0:	d07f      	beq.n	800e0a2 <__kernel_rem_pio2+0x26a>
 800dfa2:	2c02      	cmp	r4, #2
 800dfa4:	f000 8087 	beq.w	800e0b6 <__kernel_rem_pio2+0x27e>
 800dfa8:	2e02      	cmp	r6, #2
 800dfaa:	d12d      	bne.n	800e008 <__kernel_rem_pio2+0x1d0>
 800dfac:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800dfb0:	ee30 8b48 	vsub.f64	d8, d0, d8
 800dfb4:	b340      	cbz	r0, 800e008 <__kernel_rem_pio2+0x1d0>
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	9105      	str	r1, [sp, #20]
 800dfba:	f000 faad 	bl	800e518 <scalbn>
 800dfbe:	9905      	ldr	r1, [sp, #20]
 800dfc0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800dfc4:	e020      	b.n	800e008 <__kernel_rem_pio2+0x1d0>
 800dfc6:	ee20 7b09 	vmul.f64	d7, d0, d9
 800dfca:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800dfce:	3801      	subs	r0, #1
 800dfd0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800dfd4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800dfd8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800dfdc:	eca6 0a01 	vstmia	r6!, {s0}
 800dfe0:	ed92 0b00 	vldr	d0, [r2]
 800dfe4:	ee37 0b00 	vadd.f64	d0, d7, d0
 800dfe8:	e79c      	b.n	800df24 <__kernel_rem_pio2+0xec>
 800dfea:	d105      	bne.n	800dff8 <__kernel_rem_pio2+0x1c0>
 800dfec:	1e6a      	subs	r2, r5, #1
 800dfee:	ab06      	add	r3, sp, #24
 800dff0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800dff4:	15f6      	asrs	r6, r6, #23
 800dff6:	e7c5      	b.n	800df84 <__kernel_rem_pio2+0x14c>
 800dff8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dffc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e004:	da36      	bge.n	800e074 <__kernel_rem_pio2+0x23c>
 800e006:	2600      	movs	r6, #0
 800e008:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e010:	f040 80aa 	bne.w	800e168 <__kernel_rem_pio2+0x330>
 800e014:	f105 3bff 	add.w	fp, r5, #4294967295
 800e018:	4658      	mov	r0, fp
 800e01a:	2200      	movs	r2, #0
 800e01c:	4548      	cmp	r0, r9
 800e01e:	da52      	bge.n	800e0c6 <__kernel_rem_pio2+0x28e>
 800e020:	2a00      	cmp	r2, #0
 800e022:	f000 8081 	beq.w	800e128 <__kernel_rem_pio2+0x2f0>
 800e026:	ab06      	add	r3, sp, #24
 800e028:	3c18      	subs	r4, #24
 800e02a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	f000 8087 	beq.w	800e142 <__kernel_rem_pio2+0x30a>
 800e034:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e038:	4620      	mov	r0, r4
 800e03a:	f000 fa6d 	bl	800e518 <scalbn>
 800e03e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e042:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800e150 <__kernel_rem_pio2+0x318>
 800e046:	a96a      	add	r1, sp, #424	; 0x1a8
 800e048:	f103 0208 	add.w	r2, r3, #8
 800e04c:	1888      	adds	r0, r1, r2
 800e04e:	4659      	mov	r1, fp
 800e050:	2900      	cmp	r1, #0
 800e052:	f280 80b7 	bge.w	800e1c4 <__kernel_rem_pio2+0x38c>
 800e056:	4659      	mov	r1, fp
 800e058:	2900      	cmp	r1, #0
 800e05a:	f2c0 80d5 	blt.w	800e208 <__kernel_rem_pio2+0x3d0>
 800e05e:	a86a      	add	r0, sp, #424	; 0x1a8
 800e060:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800e064:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800e148 <__kernel_rem_pio2+0x310>
 800e068:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800e164 <__kernel_rem_pio2+0x32c>
 800e06c:	2400      	movs	r4, #0
 800e06e:	ebab 0001 	sub.w	r0, fp, r1
 800e072:	e0be      	b.n	800e1f2 <__kernel_rem_pio2+0x3ba>
 800e074:	2602      	movs	r6, #2
 800e076:	e787      	b.n	800df88 <__kernel_rem_pio2+0x150>
 800e078:	f8db 2000 	ldr.w	r2, [fp]
 800e07c:	b958      	cbnz	r0, 800e096 <__kernel_rem_pio2+0x25e>
 800e07e:	b122      	cbz	r2, 800e08a <__kernel_rem_pio2+0x252>
 800e080:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800e084:	f8cb 2000 	str.w	r2, [fp]
 800e088:	2201      	movs	r2, #1
 800e08a:	f10c 0c01 	add.w	ip, ip, #1
 800e08e:	f10b 0b04 	add.w	fp, fp, #4
 800e092:	4610      	mov	r0, r2
 800e094:	e77f      	b.n	800df96 <__kernel_rem_pio2+0x15e>
 800e096:	ebae 0202 	sub.w	r2, lr, r2
 800e09a:	f8cb 2000 	str.w	r2, [fp]
 800e09e:	4602      	mov	r2, r0
 800e0a0:	e7f3      	b.n	800e08a <__kernel_rem_pio2+0x252>
 800e0a2:	f105 3cff 	add.w	ip, r5, #4294967295
 800e0a6:	ab06      	add	r3, sp, #24
 800e0a8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800e0ac:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800e0b0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800e0b4:	e778      	b.n	800dfa8 <__kernel_rem_pio2+0x170>
 800e0b6:	f105 3cff 	add.w	ip, r5, #4294967295
 800e0ba:	ab06      	add	r3, sp, #24
 800e0bc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800e0c0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800e0c4:	e7f4      	b.n	800e0b0 <__kernel_rem_pio2+0x278>
 800e0c6:	ab06      	add	r3, sp, #24
 800e0c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e0cc:	3801      	subs	r0, #1
 800e0ce:	431a      	orrs	r2, r3
 800e0d0:	e7a4      	b.n	800e01c <__kernel_rem_pio2+0x1e4>
 800e0d2:	f10c 0c01 	add.w	ip, ip, #1
 800e0d6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	d0f9      	beq.n	800e0d2 <__kernel_rem_pio2+0x29a>
 800e0de:	9b04      	ldr	r3, [sp, #16]
 800e0e0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800e0e4:	eb0d 0203 	add.w	r2, sp, r3
 800e0e8:	9b01      	ldr	r3, [sp, #4]
 800e0ea:	18e8      	adds	r0, r5, r3
 800e0ec:	ab1a      	add	r3, sp, #104	; 0x68
 800e0ee:	1c6e      	adds	r6, r5, #1
 800e0f0:	3a98      	subs	r2, #152	; 0x98
 800e0f2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e0f6:	4465      	add	r5, ip
 800e0f8:	42b5      	cmp	r5, r6
 800e0fa:	f6ff af05 	blt.w	800df08 <__kernel_rem_pio2+0xd0>
 800e0fe:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800e102:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e106:	ee07 3a90 	vmov	s15, r3
 800e10a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e10e:	f04f 0c00 	mov.w	ip, #0
 800e112:	eca0 7b02 	vstmia	r0!, {d7}
 800e116:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e148 <__kernel_rem_pio2+0x310>
 800e11a:	4680      	mov	r8, r0
 800e11c:	458c      	cmp	ip, r1
 800e11e:	dd07      	ble.n	800e130 <__kernel_rem_pio2+0x2f8>
 800e120:	eca2 7b02 	vstmia	r2!, {d7}
 800e124:	3601      	adds	r6, #1
 800e126:	e7e7      	b.n	800e0f8 <__kernel_rem_pio2+0x2c0>
 800e128:	9a03      	ldr	r2, [sp, #12]
 800e12a:	f04f 0c01 	mov.w	ip, #1
 800e12e:	e7d2      	b.n	800e0d6 <__kernel_rem_pio2+0x29e>
 800e130:	ecbe 5b02 	vldmia	lr!, {d5}
 800e134:	ed38 6b02 	vldmdb	r8!, {d6}
 800e138:	f10c 0c01 	add.w	ip, ip, #1
 800e13c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e140:	e7ec      	b.n	800e11c <__kernel_rem_pio2+0x2e4>
 800e142:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e146:	e76e      	b.n	800e026 <__kernel_rem_pio2+0x1ee>
	...
 800e154:	3e700000 	.word	0x3e700000
 800e158:	00000000 	.word	0x00000000
 800e15c:	41700000 	.word	0x41700000
 800e160:	08010ef0 	.word	0x08010ef0
 800e164:	08010eb0 	.word	0x08010eb0
 800e168:	4260      	negs	r0, r4
 800e16a:	eeb0 0b48 	vmov.f64	d0, d8
 800e16e:	f000 f9d3 	bl	800e518 <scalbn>
 800e172:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800e350 <__kernel_rem_pio2+0x518>
 800e176:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e17e:	db18      	blt.n	800e1b2 <__kernel_rem_pio2+0x37a>
 800e180:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800e358 <__kernel_rem_pio2+0x520>
 800e184:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e188:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e18c:	aa06      	add	r2, sp, #24
 800e18e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e192:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e196:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e19a:	f105 0b01 	add.w	fp, r5, #1
 800e19e:	ee10 3a10 	vmov	r3, s0
 800e1a2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e1a6:	ee17 3a10 	vmov	r3, s14
 800e1aa:	3418      	adds	r4, #24
 800e1ac:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800e1b0:	e740      	b.n	800e034 <__kernel_rem_pio2+0x1fc>
 800e1b2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e1b6:	aa06      	add	r2, sp, #24
 800e1b8:	ee10 3a10 	vmov	r3, s0
 800e1bc:	46ab      	mov	fp, r5
 800e1be:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e1c2:	e737      	b.n	800e034 <__kernel_rem_pio2+0x1fc>
 800e1c4:	ac06      	add	r4, sp, #24
 800e1c6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800e1ca:	9401      	str	r4, [sp, #4]
 800e1cc:	ee07 4a90 	vmov	s15, r4
 800e1d0:	3901      	subs	r1, #1
 800e1d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e1d6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e1da:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e1de:	ed20 7b02 	vstmdb	r0!, {d7}
 800e1e2:	e735      	b.n	800e050 <__kernel_rem_pio2+0x218>
 800e1e4:	ecbc 5b02 	vldmia	ip!, {d5}
 800e1e8:	ecb5 6b02 	vldmia	r5!, {d6}
 800e1ec:	3401      	adds	r4, #1
 800e1ee:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e1f2:	454c      	cmp	r4, r9
 800e1f4:	dc01      	bgt.n	800e1fa <__kernel_rem_pio2+0x3c2>
 800e1f6:	4284      	cmp	r4, r0
 800e1f8:	ddf4      	ble.n	800e1e4 <__kernel_rem_pio2+0x3ac>
 800e1fa:	ac42      	add	r4, sp, #264	; 0x108
 800e1fc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800e200:	ed80 7b00 	vstr	d7, [r0]
 800e204:	3901      	subs	r1, #1
 800e206:	e727      	b.n	800e058 <__kernel_rem_pio2+0x220>
 800e208:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e20a:	2902      	cmp	r1, #2
 800e20c:	dc0a      	bgt.n	800e224 <__kernel_rem_pio2+0x3ec>
 800e20e:	2900      	cmp	r1, #0
 800e210:	dc2c      	bgt.n	800e26c <__kernel_rem_pio2+0x434>
 800e212:	d045      	beq.n	800e2a0 <__kernel_rem_pio2+0x468>
 800e214:	f008 0007 	and.w	r0, r8, #7
 800e218:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800e21c:	ecbd 8b06 	vpop	{d8-d10}
 800e220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e224:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800e226:	2a03      	cmp	r2, #3
 800e228:	d1f4      	bne.n	800e214 <__kernel_rem_pio2+0x3dc>
 800e22a:	aa42      	add	r2, sp, #264	; 0x108
 800e22c:	4413      	add	r3, r2
 800e22e:	461a      	mov	r2, r3
 800e230:	4619      	mov	r1, r3
 800e232:	4658      	mov	r0, fp
 800e234:	2800      	cmp	r0, #0
 800e236:	f1a1 0108 	sub.w	r1, r1, #8
 800e23a:	dc54      	bgt.n	800e2e6 <__kernel_rem_pio2+0x4ae>
 800e23c:	4659      	mov	r1, fp
 800e23e:	2901      	cmp	r1, #1
 800e240:	f1a2 0208 	sub.w	r2, r2, #8
 800e244:	dc5f      	bgt.n	800e306 <__kernel_rem_pio2+0x4ce>
 800e246:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800e360 <__kernel_rem_pio2+0x528>
 800e24a:	3308      	adds	r3, #8
 800e24c:	f1bb 0f01 	cmp.w	fp, #1
 800e250:	dc69      	bgt.n	800e326 <__kernel_rem_pio2+0x4ee>
 800e252:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800e256:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800e25a:	2e00      	cmp	r6, #0
 800e25c:	d16a      	bne.n	800e334 <__kernel_rem_pio2+0x4fc>
 800e25e:	ed87 5b00 	vstr	d5, [r7]
 800e262:	ed87 6b02 	vstr	d6, [r7, #8]
 800e266:	ed87 7b04 	vstr	d7, [r7, #16]
 800e26a:	e7d3      	b.n	800e214 <__kernel_rem_pio2+0x3dc>
 800e26c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e360 <__kernel_rem_pio2+0x528>
 800e270:	ab42      	add	r3, sp, #264	; 0x108
 800e272:	441a      	add	r2, r3
 800e274:	465b      	mov	r3, fp
 800e276:	2b00      	cmp	r3, #0
 800e278:	da26      	bge.n	800e2c8 <__kernel_rem_pio2+0x490>
 800e27a:	b35e      	cbz	r6, 800e2d4 <__kernel_rem_pio2+0x49c>
 800e27c:	eeb1 7b46 	vneg.f64	d7, d6
 800e280:	ed87 7b00 	vstr	d7, [r7]
 800e284:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800e288:	aa44      	add	r2, sp, #272	; 0x110
 800e28a:	2301      	movs	r3, #1
 800e28c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e290:	459b      	cmp	fp, r3
 800e292:	da22      	bge.n	800e2da <__kernel_rem_pio2+0x4a2>
 800e294:	b10e      	cbz	r6, 800e29a <__kernel_rem_pio2+0x462>
 800e296:	eeb1 7b47 	vneg.f64	d7, d7
 800e29a:	ed87 7b02 	vstr	d7, [r7, #8]
 800e29e:	e7b9      	b.n	800e214 <__kernel_rem_pio2+0x3dc>
 800e2a0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e360 <__kernel_rem_pio2+0x528>
 800e2a4:	ab42      	add	r3, sp, #264	; 0x108
 800e2a6:	441a      	add	r2, r3
 800e2a8:	f1bb 0f00 	cmp.w	fp, #0
 800e2ac:	da05      	bge.n	800e2ba <__kernel_rem_pio2+0x482>
 800e2ae:	b10e      	cbz	r6, 800e2b4 <__kernel_rem_pio2+0x47c>
 800e2b0:	eeb1 7b47 	vneg.f64	d7, d7
 800e2b4:	ed87 7b00 	vstr	d7, [r7]
 800e2b8:	e7ac      	b.n	800e214 <__kernel_rem_pio2+0x3dc>
 800e2ba:	ed32 6b02 	vldmdb	r2!, {d6}
 800e2be:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e2c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e2c6:	e7ef      	b.n	800e2a8 <__kernel_rem_pio2+0x470>
 800e2c8:	ed32 7b02 	vldmdb	r2!, {d7}
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e2d2:	e7d0      	b.n	800e276 <__kernel_rem_pio2+0x43e>
 800e2d4:	eeb0 7b46 	vmov.f64	d7, d6
 800e2d8:	e7d2      	b.n	800e280 <__kernel_rem_pio2+0x448>
 800e2da:	ecb2 6b02 	vldmia	r2!, {d6}
 800e2de:	3301      	adds	r3, #1
 800e2e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e2e4:	e7d4      	b.n	800e290 <__kernel_rem_pio2+0x458>
 800e2e6:	ed91 7b00 	vldr	d7, [r1]
 800e2ea:	ed91 5b02 	vldr	d5, [r1, #8]
 800e2ee:	3801      	subs	r0, #1
 800e2f0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e2f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e2f8:	ed81 6b00 	vstr	d6, [r1]
 800e2fc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e300:	ed81 7b02 	vstr	d7, [r1, #8]
 800e304:	e796      	b.n	800e234 <__kernel_rem_pio2+0x3fc>
 800e306:	ed92 7b00 	vldr	d7, [r2]
 800e30a:	ed92 5b02 	vldr	d5, [r2, #8]
 800e30e:	3901      	subs	r1, #1
 800e310:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e314:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e318:	ed82 6b00 	vstr	d6, [r2]
 800e31c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e320:	ed82 7b02 	vstr	d7, [r2, #8]
 800e324:	e78b      	b.n	800e23e <__kernel_rem_pio2+0x406>
 800e326:	ed33 6b02 	vldmdb	r3!, {d6}
 800e32a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e32e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e332:	e78b      	b.n	800e24c <__kernel_rem_pio2+0x414>
 800e334:	eeb1 5b45 	vneg.f64	d5, d5
 800e338:	eeb1 6b46 	vneg.f64	d6, d6
 800e33c:	ed87 5b00 	vstr	d5, [r7]
 800e340:	eeb1 7b47 	vneg.f64	d7, d7
 800e344:	ed87 6b02 	vstr	d6, [r7, #8]
 800e348:	e78d      	b.n	800e266 <__kernel_rem_pio2+0x42e>
 800e34a:	bf00      	nop
 800e34c:	f3af 8000 	nop.w
 800e350:	00000000 	.word	0x00000000
 800e354:	41700000 	.word	0x41700000
 800e358:	00000000 	.word	0x00000000
 800e35c:	3e700000 	.word	0x3e700000
	...

0800e368 <__kernel_sin>:
 800e368:	ee10 3a90 	vmov	r3, s1
 800e36c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e370:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e374:	da04      	bge.n	800e380 <__kernel_sin+0x18>
 800e376:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e37a:	ee17 3a90 	vmov	r3, s15
 800e37e:	b35b      	cbz	r3, 800e3d8 <__kernel_sin+0x70>
 800e380:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e384:	ee20 5b06 	vmul.f64	d5, d0, d6
 800e388:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800e3e0 <__kernel_sin+0x78>
 800e38c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e3e8 <__kernel_sin+0x80>
 800e390:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e394:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e3f0 <__kernel_sin+0x88>
 800e398:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e39c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e3f8 <__kernel_sin+0x90>
 800e3a0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e3a4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e400 <__kernel_sin+0x98>
 800e3a8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e3ac:	b930      	cbnz	r0, 800e3bc <__kernel_sin+0x54>
 800e3ae:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e408 <__kernel_sin+0xa0>
 800e3b2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e3b6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800e3ba:	4770      	bx	lr
 800e3bc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e3c0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e3c4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800e3c8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800e3cc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800e410 <__kernel_sin+0xa8>
 800e3d0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800e3d4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	f3af 8000 	nop.w
 800e3e0:	5acfd57c 	.word	0x5acfd57c
 800e3e4:	3de5d93a 	.word	0x3de5d93a
 800e3e8:	8a2b9ceb 	.word	0x8a2b9ceb
 800e3ec:	be5ae5e6 	.word	0xbe5ae5e6
 800e3f0:	57b1fe7d 	.word	0x57b1fe7d
 800e3f4:	3ec71de3 	.word	0x3ec71de3
 800e3f8:	19c161d5 	.word	0x19c161d5
 800e3fc:	bf2a01a0 	.word	0xbf2a01a0
 800e400:	1110f8a6 	.word	0x1110f8a6
 800e404:	3f811111 	.word	0x3f811111
 800e408:	55555549 	.word	0x55555549
 800e40c:	bfc55555 	.word	0xbfc55555
 800e410:	55555549 	.word	0x55555549
 800e414:	3fc55555 	.word	0x3fc55555

0800e418 <fabs>:
 800e418:	ec51 0b10 	vmov	r0, r1, d0
 800e41c:	ee10 2a10 	vmov	r2, s0
 800e420:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e424:	ec43 2b10 	vmov	d0, r2, r3
 800e428:	4770      	bx	lr
 800e42a:	0000      	movs	r0, r0
 800e42c:	0000      	movs	r0, r0
	...

0800e430 <floor>:
 800e430:	ee10 1a90 	vmov	r1, s1
 800e434:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e438:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e43c:	2b13      	cmp	r3, #19
 800e43e:	b530      	push	{r4, r5, lr}
 800e440:	ee10 0a10 	vmov	r0, s0
 800e444:	ee10 5a10 	vmov	r5, s0
 800e448:	dc31      	bgt.n	800e4ae <floor+0x7e>
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	da15      	bge.n	800e47a <floor+0x4a>
 800e44e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e508 <floor+0xd8>
 800e452:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e456:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e45e:	dd07      	ble.n	800e470 <floor+0x40>
 800e460:	2900      	cmp	r1, #0
 800e462:	da4e      	bge.n	800e502 <floor+0xd2>
 800e464:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e468:	4318      	orrs	r0, r3
 800e46a:	d001      	beq.n	800e470 <floor+0x40>
 800e46c:	4928      	ldr	r1, [pc, #160]	; (800e510 <floor+0xe0>)
 800e46e:	2000      	movs	r0, #0
 800e470:	460b      	mov	r3, r1
 800e472:	4602      	mov	r2, r0
 800e474:	ec43 2b10 	vmov	d0, r2, r3
 800e478:	e020      	b.n	800e4bc <floor+0x8c>
 800e47a:	4a26      	ldr	r2, [pc, #152]	; (800e514 <floor+0xe4>)
 800e47c:	411a      	asrs	r2, r3
 800e47e:	ea01 0402 	and.w	r4, r1, r2
 800e482:	4304      	orrs	r4, r0
 800e484:	d01a      	beq.n	800e4bc <floor+0x8c>
 800e486:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e508 <floor+0xd8>
 800e48a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e48e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e496:	ddeb      	ble.n	800e470 <floor+0x40>
 800e498:	2900      	cmp	r1, #0
 800e49a:	bfbe      	ittt	lt
 800e49c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800e4a0:	fa40 f303 	asrlt.w	r3, r0, r3
 800e4a4:	18c9      	addlt	r1, r1, r3
 800e4a6:	ea21 0102 	bic.w	r1, r1, r2
 800e4aa:	2000      	movs	r0, #0
 800e4ac:	e7e0      	b.n	800e470 <floor+0x40>
 800e4ae:	2b33      	cmp	r3, #51	; 0x33
 800e4b0:	dd05      	ble.n	800e4be <floor+0x8e>
 800e4b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e4b6:	d101      	bne.n	800e4bc <floor+0x8c>
 800e4b8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e4bc:	bd30      	pop	{r4, r5, pc}
 800e4be:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c6:	40e2      	lsrs	r2, r4
 800e4c8:	4202      	tst	r2, r0
 800e4ca:	d0f7      	beq.n	800e4bc <floor+0x8c>
 800e4cc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800e508 <floor+0xd8>
 800e4d0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e4d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4dc:	ddc8      	ble.n	800e470 <floor+0x40>
 800e4de:	2900      	cmp	r1, #0
 800e4e0:	da02      	bge.n	800e4e8 <floor+0xb8>
 800e4e2:	2b14      	cmp	r3, #20
 800e4e4:	d103      	bne.n	800e4ee <floor+0xbe>
 800e4e6:	3101      	adds	r1, #1
 800e4e8:	ea20 0002 	bic.w	r0, r0, r2
 800e4ec:	e7c0      	b.n	800e470 <floor+0x40>
 800e4ee:	2401      	movs	r4, #1
 800e4f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e4f4:	fa04 f303 	lsl.w	r3, r4, r3
 800e4f8:	4418      	add	r0, r3
 800e4fa:	42a8      	cmp	r0, r5
 800e4fc:	bf38      	it	cc
 800e4fe:	1909      	addcc	r1, r1, r4
 800e500:	e7f2      	b.n	800e4e8 <floor+0xb8>
 800e502:	2000      	movs	r0, #0
 800e504:	4601      	mov	r1, r0
 800e506:	e7b3      	b.n	800e470 <floor+0x40>
 800e508:	8800759c 	.word	0x8800759c
 800e50c:	7e37e43c 	.word	0x7e37e43c
 800e510:	bff00000 	.word	0xbff00000
 800e514:	000fffff 	.word	0x000fffff

0800e518 <scalbn>:
 800e518:	ee10 1a90 	vmov	r1, s1
 800e51c:	b510      	push	{r4, lr}
 800e51e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e522:	b98c      	cbnz	r4, 800e548 <scalbn+0x30>
 800e524:	ee10 3a10 	vmov	r3, s0
 800e528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e52c:	430b      	orrs	r3, r1
 800e52e:	d011      	beq.n	800e554 <scalbn+0x3c>
 800e530:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800e5f8 <scalbn+0xe0>
 800e534:	4b3c      	ldr	r3, [pc, #240]	; (800e628 <scalbn+0x110>)
 800e536:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e53a:	4298      	cmp	r0, r3
 800e53c:	da0b      	bge.n	800e556 <scalbn+0x3e>
 800e53e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e600 <scalbn+0xe8>
 800e542:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e546:	e005      	b.n	800e554 <scalbn+0x3c>
 800e548:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e54c:	429c      	cmp	r4, r3
 800e54e:	d107      	bne.n	800e560 <scalbn+0x48>
 800e550:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e554:	bd10      	pop	{r4, pc}
 800e556:	ee10 1a90 	vmov	r1, s1
 800e55a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e55e:	3c36      	subs	r4, #54	; 0x36
 800e560:	4404      	add	r4, r0
 800e562:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800e566:	429c      	cmp	r4, r3
 800e568:	dd0d      	ble.n	800e586 <scalbn+0x6e>
 800e56a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800e608 <scalbn+0xf0>
 800e56e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800e610 <scalbn+0xf8>
 800e572:	eeb0 6b47 	vmov.f64	d6, d7
 800e576:	ee10 3a90 	vmov	r3, s1
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	fe27 7b05 	vselge.f64	d7, d7, d5
 800e580:	ee27 0b06 	vmul.f64	d0, d7, d6
 800e584:	e7e6      	b.n	800e554 <scalbn+0x3c>
 800e586:	2c00      	cmp	r4, #0
 800e588:	dd0a      	ble.n	800e5a0 <scalbn+0x88>
 800e58a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800e58e:	ec53 2b10 	vmov	r2, r3, d0
 800e592:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800e596:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800e59a:	ec43 2b10 	vmov	d0, r2, r3
 800e59e:	e7d9      	b.n	800e554 <scalbn+0x3c>
 800e5a0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800e5a4:	da19      	bge.n	800e5da <scalbn+0xc2>
 800e5a6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e5aa:	4298      	cmp	r0, r3
 800e5ac:	ee10 3a90 	vmov	r3, s1
 800e5b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5b4:	dd09      	ble.n	800e5ca <scalbn+0xb2>
 800e5b6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800e608 <scalbn+0xf0>
 800e5ba:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800e610 <scalbn+0xf8>
 800e5be:	eeb0 7b40 	vmov.f64	d7, d0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800e5c8:	e7bb      	b.n	800e542 <scalbn+0x2a>
 800e5ca:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800e600 <scalbn+0xe8>
 800e5ce:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800e618 <scalbn+0x100>
 800e5d2:	eeb0 7b40 	vmov.f64	d7, d0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	e7f4      	b.n	800e5c4 <scalbn+0xac>
 800e5da:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800e5de:	ec53 2b10 	vmov	r2, r3, d0
 800e5e2:	3436      	adds	r4, #54	; 0x36
 800e5e4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800e5e8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800e5ec:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e620 <scalbn+0x108>
 800e5f0:	ec43 2b10 	vmov	d0, r2, r3
 800e5f4:	e7a5      	b.n	800e542 <scalbn+0x2a>
 800e5f6:	bf00      	nop
 800e5f8:	00000000 	.word	0x00000000
 800e5fc:	43500000 	.word	0x43500000
 800e600:	c2f8f359 	.word	0xc2f8f359
 800e604:	01a56e1f 	.word	0x01a56e1f
 800e608:	8800759c 	.word	0x8800759c
 800e60c:	7e37e43c 	.word	0x7e37e43c
 800e610:	8800759c 	.word	0x8800759c
 800e614:	fe37e43c 	.word	0xfe37e43c
 800e618:	c2f8f359 	.word	0xc2f8f359
 800e61c:	81a56e1f 	.word	0x81a56e1f
 800e620:	00000000 	.word	0x00000000
 800e624:	3c900000 	.word	0x3c900000
 800e628:	ffff3cb0 	.word	0xffff3cb0

0800e62c <_init>:
 800e62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e62e:	bf00      	nop
 800e630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e632:	bc08      	pop	{r3}
 800e634:	469e      	mov	lr, r3
 800e636:	4770      	bx	lr

0800e638 <_fini>:
 800e638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e63a:	bf00      	nop
 800e63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e63e:	bc08      	pop	{r3}
 800e640:	469e      	mov	lr, r3
 800e642:	4770      	bx	lr
