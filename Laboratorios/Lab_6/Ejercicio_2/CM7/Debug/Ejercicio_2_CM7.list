
Ejercicio_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f348  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800f5e8  0800f5e8  0001f5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fafc  0800fafc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fafc  0800fafc  0001fafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb04  0800fb04  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb04  0800fb04  0001fb04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb08  0800fb08  0001fb08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800fb0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  240001e4  0800fcf0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000530  0800fcf0  00020530  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c277  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec9  00000000  00000000  0003c489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  0003f358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  00040978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cf92  00000000  00000000  00041e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c383  00000000  00000000  0007ee12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019a820  00000000  00000000  0009b195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002359b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007368  00000000  00000000  00235a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f5d0 	.word	0x0800f5d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800f5d0 	.word	0x0800f5d0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <SystemInit+0xfc>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <SystemInit+0xfc>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0xfc>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <SystemInit+0xfc>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <SystemInit+0x100>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d807      	bhi.n	8000ab8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <SystemInit+0x100>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 030f 	bic.w	r3, r3, #15
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x100>)
 8000ab2:	f043 0307 	orr.w	r3, r3, #7
 8000ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemInit+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <SystemInit+0x104>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x104>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <SystemInit+0x104>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	492c      	ldr	r1, [pc, #176]	; (8000b80 <SystemInit+0x104>)
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <SystemInit+0x108>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SystemInit+0x100>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SystemInit+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 030f 	bic.w	r3, r3, #15
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <SystemInit+0x100>)
 8000aec:	f043 0307 	orr.w	r3, r3, #7
 8000af0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemInit+0x104>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemInit+0x104>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemInit+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemInit+0x104>)
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemInit+0x10c>)
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SystemInit+0x104>)
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <SystemInit+0x110>)
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SystemInit+0x104>)
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <SystemInit+0x114>)
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <SystemInit+0x104>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SystemInit+0x104>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SystemInit+0x114>)
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <SystemInit+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SystemInit+0x104>)
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <SystemInit+0x114>)
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <SystemInit+0x104>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <SystemInit+0x104>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <SystemInit+0x104>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x118>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SystemInit+0x118>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <SystemInit+0x11c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x120>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b5e:	d202      	bcs.n	8000b66 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x124>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SystemInit+0x128>)
 8000b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b6c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	52002000 	.word	0x52002000
 8000b80:	58024400 	.word	0x58024400
 8000b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b88:	02020200 	.word	0x02020200
 8000b8c:	01ff0000 	.word	0x01ff0000
 8000b90:	01010280 	.word	0x01010280
 8000b94:	580000c0 	.word	0x580000c0
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bb4:	bf00      	nop
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <main+0xb0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <main+0x24>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dcf4      	bgt.n	8000bb6 <main+0xe>
  if ( timeout < 0 )
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	da01      	bge.n	8000bd6 <main+0x2e>
  {
  Error_Handler();
 8000bd2:	f000 faf9 	bl	80011c8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f000 fd97 	bl	8001708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f845 	bl	8000c68 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <main+0xb0>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <main+0xb0>)
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <main+0xb0>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f005 f983 	bl	8005f08 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f005 f999 	bl	8005f3c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c10:	bf00      	nop
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <main+0xb0>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d104      	bne.n	8000c28 <main+0x80>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	dcf4      	bgt.n	8000c12 <main+0x6a>
if ( timeout < 0 )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da01      	bge.n	8000c32 <main+0x8a>
{
Error_Handler();
 8000c2e:	f000 facb 	bl	80011c8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c32:	f000 f9d1 	bl	8000fd8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c36:	f000 f963 	bl	8000f00 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000c3a:	f000 f899 	bl	8000d70 <MX_ADC1_Init>
  MX_DMA_Init();
 8000c3e:	f000 f9ab 	bl	8000f98 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c42:	f000 f90f 	bl	8000e64 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_read[0], 1);
 8000c46:	2201      	movs	r2, #1
 8000c48:	4904      	ldr	r1, [pc, #16]	; (8000c5c <main+0xb4>)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <main+0xb8>)
 8000c4c:	f001 f9d4 	bl	8001ff8 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim2);
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <main+0xbc>)
 8000c52:	f008 fb7f 	bl	8009354 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <main+0xae>
 8000c58:	58024400 	.word	0x58024400
 8000c5c:	240003ec 	.word	0x240003ec
 8000c60:	24000200 	.word	0x24000200
 8000c64:	240002dc 	.word	0x240002dc

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b09c      	sub	sp, #112	; 0x70
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	224c      	movs	r2, #76	; 0x4c
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f00a f938 	bl	800aeec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2220      	movs	r2, #32
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f00a f932 	bl	800aeec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c88:	2004      	movs	r0, #4
 8000c8a:	f005 f96b 	bl	8005f64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <SystemClock_Config+0xfc>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	4a33      	ldr	r2, [pc, #204]	; (8000d64 <SystemClock_Config+0xfc>)
 8000c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c9c:	6193      	str	r3, [r2, #24]
 8000c9e:	4b31      	ldr	r3, [pc, #196]	; (8000d64 <SystemClock_Config+0xfc>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <SystemClock_Config+0x100>)
 8000caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cac:	4a2e      	ldr	r2, [pc, #184]	; (8000d68 <SystemClock_Config+0x100>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cb4:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <SystemClock_Config+0x100>)
 8000cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cc0:	bf00      	nop
 8000cc2:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <SystemClock_Config+0xfc>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cce:	d1f8      	bne.n	8000cc2 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <SystemClock_Config+0x104>)
 8000cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd4:	f023 0303 	bic.w	r3, r3, #3
 8000cd8:	4a24      	ldr	r2, [pc, #144]	; (8000d6c <SystemClock_Config+0x104>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ce4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cea:	2302      	movs	r3, #2
 8000cec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000cf6:	2378      	movs	r3, #120	; 0x78
 8000cf8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d02:	2302      	movs	r3, #2
 8000d04:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d06:	230c      	movs	r3, #12
 8000d08:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4618      	mov	r0, r3
 8000d18:	f005 f97e 	bl	8006018 <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000d22:	f000 fa51 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d26:	233f      	movs	r3, #63	; 0x3f
 8000d28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d32:	2308      	movs	r3, #8
 8000d34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d36:	2340      	movs	r3, #64	; 0x40
 8000d38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d3a:	2340      	movs	r3, #64	; 0x40
 8000d3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d42:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d44:	2340      	movs	r3, #64	; 0x40
 8000d46:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f005 fd91 	bl	8006874 <HAL_RCC_ClockConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000d58:	f000 fa36 	bl	80011c8 <Error_Handler>
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3770      	adds	r7, #112	; 0x70
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	58024800 	.word	0x58024800
 8000d68:	58000400 	.word	0x58000400
 8000d6c:	58024400 	.word	0x58024400

08000d70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
 8000d90:	615a      	str	r2, [r3, #20]
 8000d92:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d94:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000d96:	4a31      	ldr	r2, [pc, #196]	; (8000e5c <MX_ADC1_Init+0xec>)
 8000d98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000d9c:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000da0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000da2:	4b2d      	ldr	r3, [pc, #180]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000da4:	2210      	movs	r2, #16
 8000da6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000da8:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dae:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000db0:	2208      	movs	r2, #8
 8000db2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000db4:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dba:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000dda:	2203      	movs	r2, #3
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000de0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000de4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df4:	4818      	ldr	r0, [pc, #96]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000df6:	f000 ff5d 	bl	8001cb4 <HAL_ADC_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e00:	f000 f9e2 	bl	80011c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4812      	ldr	r0, [pc, #72]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000e10:	f002 f8e6 	bl	8002fe0 <HAL_ADCEx_MultiModeConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000e1a:	f000 f9d5 	bl	80011c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_ADC1_Init+0xf0>)
 8000e20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e22:	2306      	movs	r3, #6
 8000e24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e2a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e2e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e30:	2304      	movs	r3, #4
 8000e32:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_ADC1_Init+0xe8>)
 8000e42:	f001 fa13 	bl	800226c <HAL_ADC_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000e4c:	f000 f9bc 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	24000200 	.word	0x24000200
 8000e5c:	40022000 	.word	0x40022000
 8000e60:	08600004 	.word	0x08600004

08000e64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <MX_TIM2_Init+0x98>)
 8000e84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 65535;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_TIM2_Init+0x98>)
 8000e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_TIM2_Init+0x98>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 366;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_TIM2_Init+0x98>)
 8000e9a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8000e9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_TIM2_Init+0x98>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_TIM2_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eac:	4813      	ldr	r0, [pc, #76]	; (8000efc <MX_TIM2_Init+0x98>)
 8000eae:	f008 f9f9 	bl	80092a4 <HAL_TIM_Base_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000eb8:	f000 f986 	bl	80011c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_TIM2_Init+0x98>)
 8000eca:	f008 fbdb 	bl	8009684 <HAL_TIM_ConfigClockSource>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000ed4:	f000 f978 	bl	80011c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_TIM2_Init+0x98>)
 8000ee6:	f008 fe25 	bl	8009b34 <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ef0:	f000 f96a 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3720      	adds	r7, #32
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	240002dc 	.word	0x240002dc

08000f00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f06:	4a23      	ldr	r2, [pc, #140]	; (8000f94 <MX_USART3_UART_Init+0x94>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f48:	4811      	ldr	r0, [pc, #68]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f4a:	f008 fe9f 	bl	8009c8c <HAL_UART_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f54:	f000 f938 	bl	80011c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	480d      	ldr	r0, [pc, #52]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f5c:	f009 fed2 	bl	800ad04 <HAL_UARTEx_SetTxFifoThreshold>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f66:	f000 f92f 	bl	80011c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4808      	ldr	r0, [pc, #32]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f6e:	f009 ff07 	bl	800ad80 <HAL_UARTEx_SetRxFifoThreshold>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f78:	f000 f926 	bl	80011c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MX_USART3_UART_Init+0x90>)
 8000f7e:	f009 fe88 	bl	800ac92 <HAL_UARTEx_DisableFifoMode>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f88:	f000 f91e 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	24000328 	.word	0x24000328
 8000f94:	40004800 	.word	0x40004800

08000f98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <MX_DMA_Init+0x3c>)
 8000fa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa4:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <MX_DMA_Init+0x3c>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_DMA_Init+0x3c>)
 8000fb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	200b      	movs	r0, #11
 8000fc2:	f002 f9c6 	bl	8003352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fc6:	200b      	movs	r0, #11
 8000fc8:	f002 f9dd 	bl	8003386 <HAL_NVIC_EnableIRQ>

}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58024400 	.word	0x58024400

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <MX_GPIO_Init+0xa8>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	4a26      	ldr	r2, [pc, #152]	; (8001080 <MX_GPIO_Init+0xa8>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fee:	4b24      	ldr	r3, [pc, #144]	; (8001080 <MX_GPIO_Init+0xa8>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffc:	4b20      	ldr	r3, [pc, #128]	; (8001080 <MX_GPIO_Init+0xa8>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <MX_GPIO_Init+0xa8>)
 8001004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_GPIO_Init+0xa8>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_GPIO_Init+0xa8>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	4a17      	ldr	r2, [pc, #92]	; (8001080 <MX_GPIO_Init+0xa8>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_GPIO_Init+0xa8>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_GPIO_Init+0xa8>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <MX_GPIO_Init+0xa8>)
 8001040:	f043 0320 	orr.w	r3, r3, #32
 8001044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <MX_GPIO_Init+0xa8>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104e:	f003 0320 	and.w	r3, r3, #32
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <MX_GPIO_Init+0xa8>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105c:	4a08      	ldr	r2, [pc, #32]	; (8001080 <MX_GPIO_Init+0xa8>)
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_GPIO_Init+0xa8>)
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]

}
 8001074:	bf00      	nop
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	58024400 	.word	0x58024400

08001084 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <HAL_ADC_ConvCpltCallback+0x20>)
 800108e:	f001 f877 	bl	8002180 <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_read[0], 1);
 8001092:	2201      	movs	r2, #1
 8001094:	4904      	ldr	r1, [pc, #16]	; (80010a8 <HAL_ADC_ConvCpltCallback+0x24>)
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <HAL_ADC_ConvCpltCallback+0x20>)
 8001098:	f000 ffae 	bl	8001ff8 <HAL_ADC_Start_DMA>

}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	24000200 	.word	0x24000200
 80010a8:	240003ec 	.word	0x240003ec
 80010ac:	00000000 	.word	0x00000000

080010b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d124      	bne.n	800110a <HAL_TIM_PeriodElapsedCallback+0x5a>
		adc_voltage[0] = ((float)adc_read[0]*3.3)/255.0;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010d2:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8001118 <HAL_TIM_PeriodElapsedCallback+0x68>
 80010d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010da:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8001120 <HAL_TIM_PeriodElapsedCallback+0x70>
 80010de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80010e8:	edc3 7a00 	vstr	s15, [r3]
		printUART_int("Valor ADC: %u \r\n", adc_read[0]);
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	4619      	mov	r1, r3
 80010f4:	480f      	ldr	r0, [pc, #60]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010f6:	f000 f821 	bl	800113c <printUART_int>
		printUART_float("Voltaje ADC: %.3f \r\n", adc_voltage[0]);
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	eeb0 0a67 	vmov.f32	s0, s15
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001106:	f000 f839 	bl	800117c <printUART_float>
	}
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	66666666 	.word	0x66666666
 800111c:	400a6666 	.word	0x400a6666
 8001120:	00000000 	.word	0x00000000
 8001124:	406fe000 	.word	0x406fe000
 8001128:	240002dc 	.word	0x240002dc
 800112c:	240003ec 	.word	0x240003ec
 8001130:	24000450 	.word	0x24000450
 8001134:	0800f5e8 	.word	0x0800f5e8
 8001138:	0800f5fc 	.word	0x0800f5fc

0800113c <printUART_int>:

static void printUART_int(char *string, int var){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	uart_buf_len = sprintf(uart_buf, string, var);
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	4809      	ldr	r0, [pc, #36]	; (8001170 <printUART_int+0x34>)
 800114c:	f00a fd26 	bl	800bb9c <siprintf>
 8001150:	4603      	mov	r3, r0
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <printUART_int+0x38>)
 8001156:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <printUART_int+0x38>)
 800115a:	881a      	ldrh	r2, [r3, #0]
 800115c:	2364      	movs	r3, #100	; 0x64
 800115e:	4904      	ldr	r1, [pc, #16]	; (8001170 <printUART_int+0x34>)
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <printUART_int+0x3c>)
 8001162:	f008 fde3 	bl	8009d2c <HAL_UART_Transmit>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	240003b8 	.word	0x240003b8
 8001174:	240003ea 	.word	0x240003ea
 8001178:	24000328 	.word	0x24000328

0800117c <printUART_float>:

static void printUART_float(char *string, float var){
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	ed87 0a00 	vstr	s0, [r7]
	uart_buf_len = sprintf(uart_buf, string, var);
 8001188:	edd7 7a00 	vldr	s15, [r7]
 800118c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001190:	ec53 2b17 	vmov	r2, r3, d7
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4809      	ldr	r0, [pc, #36]	; (80011bc <printUART_float+0x40>)
 8001198:	f00a fd00 	bl	800bb9c <siprintf>
 800119c:	4603      	mov	r3, r0
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <printUART_float+0x44>)
 80011a2:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <printUART_float+0x44>)
 80011a6:	881a      	ldrh	r2, [r3, #0]
 80011a8:	2364      	movs	r3, #100	; 0x64
 80011aa:	4904      	ldr	r1, [pc, #16]	; (80011bc <printUART_float+0x40>)
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <printUART_float+0x48>)
 80011ae:	f008 fdbd 	bl	8009d2c <HAL_UART_Transmit>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	240003b8 	.word	0x240003b8
 80011c0:	240003ea 	.word	0x240003ea
 80011c4:	24000328 	.word	0x24000328

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <Error_Handler+0x8>
	...

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_MspInit+0x30>)
 80011dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011e0:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_MspInit+0x30>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_MspInit+0x30>)
 80011ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	58024400 	.word	0x58024400

08001208 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0ba      	sub	sp, #232	; 0xe8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	22bc      	movs	r2, #188	; 0xbc
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f009 fe5f 	bl	800aeec <memset>
  if(hadc->Instance==ADC1)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a52      	ldr	r2, [pc, #328]	; (800137c <HAL_ADC_MspInit+0x174>)
 8001234:	4293      	cmp	r3, r2
 8001236:	f040 809c 	bne.w	8001372 <HAL_ADC_MspInit+0x16a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800123a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800123e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8001244:	2313      	movs	r3, #19
 8001246:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001248:	2302      	movs	r3, #2
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800124c:	2302      	movs	r3, #2
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001250:	2302      	movs	r3, #2
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001254:	23c0      	movs	r3, #192	; 0xc0
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001258:	2320      	movs	r3, #32
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	4618      	mov	r0, r3
 800126c:	f005 fe8e 	bl	8006f8c <HAL_RCCEx_PeriphCLKConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8001276:	f7ff ffa7 	bl	80011c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <HAL_ADC_MspInit+0x178>)
 800127c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001280:	4a3f      	ldr	r2, [pc, #252]	; (8001380 <HAL_ADC_MspInit+0x178>)
 8001282:	f043 0320 	orr.w	r3, r3, #32
 8001286:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800128a:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <HAL_ADC_MspInit+0x178>)
 800128c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b39      	ldr	r3, [pc, #228]	; (8001380 <HAL_ADC_MspInit+0x178>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	4a38      	ldr	r2, [pc, #224]	; (8001380 <HAL_ADC_MspInit+0x178>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a8:	4b35      	ldr	r3, [pc, #212]	; (8001380 <HAL_ADC_MspInit+0x178>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b6:	4b32      	ldr	r3, [pc, #200]	; (8001380 <HAL_ADC_MspInit+0x178>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	4a30      	ldr	r2, [pc, #192]	; (8001380 <HAL_ADC_MspInit+0x178>)
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c6:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <HAL_ADC_MspInit+0x178>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012cc:	f003 0320 	and.w	r3, r3, #32
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d4:	2301      	movs	r3, #1
 80012d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012da:	2303      	movs	r3, #3
 80012dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ea:	4619      	mov	r1, r3
 80012ec:	4825      	ldr	r0, [pc, #148]	; (8001384 <HAL_ADC_MspInit+0x17c>)
 80012ee:	f004 fc5b 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001306:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800130a:	4619      	mov	r1, r3
 800130c:	481e      	ldr	r0, [pc, #120]	; (8001388 <HAL_ADC_MspInit+0x180>)
 800130e:	f004 fc4b 	bl	8005ba8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001312:	4b1e      	ldr	r3, [pc, #120]	; (800138c <HAL_ADC_MspInit+0x184>)
 8001314:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <HAL_ADC_MspInit+0x188>)
 8001316:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_ADC_MspInit+0x184>)
 800131a:	2209      	movs	r2, #9
 800131c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800131e:	4b1b      	ldr	r3, [pc, #108]	; (800138c <HAL_ADC_MspInit+0x184>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_ADC_MspInit+0x184>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_ADC_MspInit+0x184>)
 800132c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001330:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <HAL_ADC_MspInit+0x184>)
 8001334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001338:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_ADC_MspInit+0x184>)
 800133c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001340:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_ADC_MspInit+0x184>)
 8001344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001348:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_ADC_MspInit+0x184>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_ADC_MspInit+0x184>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <HAL_ADC_MspInit+0x184>)
 8001358:	f002 f830 	bl	80033bc <HAL_DMA_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_ADC_MspInit+0x15e>
    {
      Error_Handler();
 8001362:	f7ff ff31 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_ADC_MspInit+0x184>)
 800136a:	64da      	str	r2, [r3, #76]	; 0x4c
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_ADC_MspInit+0x184>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001372:	bf00      	nop
 8001374:	37e8      	adds	r7, #232	; 0xe8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40022000 	.word	0x40022000
 8001380:	58024400 	.word	0x58024400
 8001384:	58020000 	.word	0x58020000
 8001388:	58021400 	.word	0x58021400
 800138c:	24000264 	.word	0x24000264
 8001390:	40020010 	.word	0x40020010

08001394 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a4:	d116      	bne.n	80013d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_TIM_Base_MspInit+0x48>)
 80013a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ac:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <HAL_TIM_Base_MspInit+0x48>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_TIM_Base_MspInit+0x48>)
 80013b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	201c      	movs	r0, #28
 80013ca:	f001 ffc2 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013ce:	201c      	movs	r0, #28
 80013d0:	f001 ffd9 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	58024400 	.word	0x58024400

080013e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b0b8      	sub	sp, #224	; 0xe0
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	22bc      	movs	r2, #188	; 0xbc
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f009 fd73 	bl	800aeec <memset>
  if(huart->Instance==USART3)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a25      	ldr	r2, [pc, #148]	; (80014a0 <HAL_UART_MspInit+0xc0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d142      	bne.n	8001496 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001410:	2302      	movs	r3, #2
 8001412:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	4618      	mov	r0, r3
 8001420:	f005 fdb4 	bl	8006f8c <HAL_RCCEx_PeriphCLKConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800142a:	f7ff fecd 	bl	80011c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <HAL_UART_MspInit+0xc4>)
 8001430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <HAL_UART_MspInit+0xc4>)
 8001436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800143a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_UART_MspInit+0xc4>)
 8001440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_UART_MspInit+0xc4>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001452:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <HAL_UART_MspInit+0xc4>)
 8001454:	f043 0308 	orr.w	r3, r3, #8
 8001458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_UART_MspInit+0xc4>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800146a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800146e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001484:	2307      	movs	r3, #7
 8001486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_UART_MspInit+0xc8>)
 8001492:	f004 fb89 	bl	8005ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	37e0      	adds	r7, #224	; 0xe0
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40004800 	.word	0x40004800
 80014a4:	58024400 	.word	0x58024400
 80014a8:	58020c00 	.word	0x58020c00

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <NMI_Handler+0x4>

080014b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <MemManage_Handler+0x4>

080014be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <UsageFault_Handler+0x4>

080014ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f8:	f000 f978 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <DMA1_Stream0_IRQHandler+0x10>)
 8001506:	f003 f83d 	bl	8004584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	24000264 	.word	0x24000264

08001514 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <TIM2_IRQHandler+0x10>)
 800151a:	f007 ff93 	bl	8009444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	240002dc 	.word	0x240002dc

08001528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	return 1;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_kill>:

int _kill(int pid, int sig)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001542:	f009 fca9 	bl	800ae98 <__errno>
 8001546:	4603      	mov	r3, r0
 8001548:	2216      	movs	r2, #22
 800154a:	601a      	str	r2, [r3, #0]
	return -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <_exit>:

void _exit (int status)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ffe7 	bl	8001538 <_kill>
	while (1) {}		/* Make sure we hang here */
 800156a:	e7fe      	b.n	800156a <_exit+0x12>

0800156c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e00a      	b.n	8001594 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800157e:	f3af 8000 	nop.w
 8001582:	4601      	mov	r1, r0
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	60ba      	str	r2, [r7, #8]
 800158a:	b2ca      	uxtb	r2, r1
 800158c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbf0      	blt.n	800157e <_read+0x12>
	}

return len;
 800159c:	687b      	ldr	r3, [r7, #4]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e009      	b.n	80015cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	60ba      	str	r2, [r7, #8]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbf1      	blt.n	80015b8 <_write+0x12>
	}
	return len;
 80015d4:	687b      	ldr	r3, [r7, #4]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_close>:

int _close(int file)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	return -1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001606:	605a      	str	r2, [r3, #4]
	return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_isatty>:

int _isatty(int file)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	return 1;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
	return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d207      	bcs.n	8001688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001678:	f009 fc0e 	bl	800ae98 <__errno>
 800167c:	4603      	mov	r3, r0
 800167e:	220c      	movs	r2, #12
 8001680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	e009      	b.n	800169c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <_sbrk+0x64>)
 8001698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	24080000 	.word	0x24080000
 80016a8:	00000400 	.word	0x00000400
 80016ac:	24000518 	.word	0x24000518
 80016b0:	24000530 	.word	0x24000530

080016b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b8:	f7ff f9e0 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016be:	490d      	ldr	r1, [pc, #52]	; (80016f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d4:	4c0a      	ldr	r4, [pc, #40]	; (8001700 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016e2:	f009 fbdf 	bl	800aea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e6:	f7ff fa5f 	bl	8000ba8 <main>
  bx  lr
 80016ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016f4:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 80016f8:	0800fb0c 	.word	0x0800fb0c
  ldr r2, =_sbss
 80016fc:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8001700:	24000530 	.word	0x24000530

08001704 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC3_IRQHandler>
	...

08001708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170e:	2003      	movs	r0, #3
 8001710:	f001 fe14 	bl	800333c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001714:	f005 fa64 	bl	8006be0 <HAL_RCC_GetSysClockFreq>
 8001718:	4602      	mov	r2, r0
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_Init+0x68>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	4913      	ldr	r1, [pc, #76]	; (8001774 <HAL_Init+0x6c>)
 8001726:	5ccb      	ldrb	r3, [r1, r3]
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	fa22 f303 	lsr.w	r3, r2, r3
 8001730:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_Init+0x68>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_Init+0x6c>)
 800173c:	5cd3      	ldrb	r3, [r2, r3]
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <HAL_Init+0x70>)
 800174a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800174c:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_Init+0x74>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f814 	bl	8001780 <HAL_InitTick>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e002      	b.n	8001768 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001762:	f7ff fd37 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	58024400 	.word	0x58024400
 8001774:	0800f614 	.word	0x0800f614
 8001778:	24000004 	.word	0x24000004
 800177c:	24000000 	.word	0x24000000

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_InitTick+0x60>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e021      	b.n	80017d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_InitTick+0x64>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_InitTick+0x60>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f001 fdf9 	bl	80033a2 <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f001 fdc3 	bl	8003352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_InitTick+0x68>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	2400000c 	.word	0x2400000c
 80017e4:	24000000 	.word	0x24000000
 80017e8:	24000008 	.word	0x24000008

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2400000c 	.word	0x2400000c
 8001810:	2400051c 	.word	0x2400051c

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	2400051c 	.word	0x2400051c

0800182c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_GetREVID+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0c1b      	lsrs	r3, r3, #16
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	5c001000 	.word	0x5c001000

08001844 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	609a      	str	r2, [r3, #8]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	609a      	str	r2, [r3, #8]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3360      	adds	r3, #96	; 0x60
 80018be:	461a      	mov	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	430b      	orrs	r3, r1
 80018da:	431a      	orrs	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f003 031f 	and.w	r3, r3, #31
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	431a      	orrs	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	611a      	str	r2, [r3, #16]
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800191e:	b480      	push	{r7}
 8001920:	b087      	sub	sp, #28
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3360      	adds	r3, #96	; 0x60
 800192e:	461a      	mov	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	431a      	orrs	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	601a      	str	r2, [r3, #0]
  }
}
 8001948:	bf00      	nop
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800197a:	b480      	push	{r7}
 800197c:	b087      	sub	sp, #28
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3330      	adds	r3, #48	; 0x30
 800198a:	461a      	mov	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	4413      	add	r3, r2
 8001998:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	211f      	movs	r1, #31
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	401a      	ands	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	0e9b      	lsrs	r3, r3, #26
 80019b2:	f003 011f 	and.w	r1, r3, #31
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	431a      	orrs	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019c6:	bf00      	nop
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f023 0203 	bic.w	r2, r3, #3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	60da      	str	r2, [r3, #12]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3314      	adds	r3, #20
 8001a08:	461a      	mov	r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	0e5b      	lsrs	r3, r3, #25
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	4413      	add	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	0d1b      	lsrs	r3, r3, #20
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	2107      	movs	r1, #7
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	0d1b      	lsrs	r3, r3, #20
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a42:	bf00      	nop
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0318 	and.w	r3, r3, #24
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a74:	40d9      	lsrs	r1, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	400b      	ands	r3, r1
 8001a7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	000fffff 	.word	0x000fffff

08001a98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 031f 	and.w	r3, r3, #31
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6093      	str	r3, [r2, #8]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	5fffffc0 	.word	0x5fffffc0

08001ad8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aec:	d101      	bne.n	8001af2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	6fffffc0 	.word	0x6fffffc0

08001b28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b3c:	d101      	bne.n	8001b42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <LL_ADC_Enable+0x24>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	f043 0201 	orr.w	r2, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	7fffffc0 	.word	0x7fffffc0

08001b78 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <LL_ADC_Disable+0x24>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	f043 0202 	orr.w	r2, r3, #2
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	7fffffc0 	.word	0x7fffffc0

08001ba0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <LL_ADC_IsEnabled+0x18>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <LL_ADC_IsEnabled+0x1a>
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d101      	bne.n	8001bde <LL_ADC_IsDisableOngoing+0x18>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <LL_ADC_IsDisableOngoing+0x1a>
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <LL_ADC_REG_StartConversion+0x24>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	f043 0204 	orr.w	r2, r3, #4
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	7fffffc0 	.word	0x7fffffc0

08001c14 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <LL_ADC_REG_StopConversion+0x24>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	f043 0210 	orr.w	r2, r3, #16
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	7fffffc0 	.word	0x7fffffc0

08001c3c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d101      	bne.n	8001c54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <LL_ADC_INJ_StopConversion+0x24>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	f043 0220 	orr.w	r2, r3, #32
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	7fffffc0 	.word	0x7fffffc0

08001c8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d101      	bne.n	8001ca4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e18f      	b.n	8001fee <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fa93 	bl	8001208 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff feef 	bl	8001ad8 <LL_ADC_IsDeepPowerDownEnabled>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fed5 	bl	8001ab4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff0a 	bl	8001b28 <LL_ADC_IsInternalRegulatorEnabled>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d114      	bne.n	8001d44 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff feee 	bl	8001b00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d24:	4b87      	ldr	r3, [pc, #540]	; (8001f44 <HAL_ADC_Init+0x290>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	4a87      	ldr	r2, [pc, #540]	; (8001f48 <HAL_ADC_Init+0x294>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	099b      	lsrs	r3, r3, #6
 8001d32:	3301      	adds	r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d36:	e002      	b.n	8001d3e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f9      	bne.n	8001d38 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff feed 	bl	8001b28 <LL_ADC_IsInternalRegulatorEnabled>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10d      	bne.n	8001d70 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	f043 0210 	orr.w	r2, r3, #16
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff61 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8001d7a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f040 8129 	bne.w	8001fdc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 8125 	bne.w	8001fdc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d9a:	f043 0202 	orr.w	r2, r3, #2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fefa 	bl	8001ba0 <LL_ADC_IsEnabled>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d136      	bne.n	8001e20 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a65      	ldr	r2, [pc, #404]	; (8001f4c <HAL_ADC_Init+0x298>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d004      	beq.n	8001dc6 <HAL_ADC_Init+0x112>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a63      	ldr	r2, [pc, #396]	; (8001f50 <HAL_ADC_Init+0x29c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10e      	bne.n	8001de4 <HAL_ADC_Init+0x130>
 8001dc6:	4861      	ldr	r0, [pc, #388]	; (8001f4c <HAL_ADC_Init+0x298>)
 8001dc8:	f7ff feea 	bl	8001ba0 <LL_ADC_IsEnabled>
 8001dcc:	4604      	mov	r4, r0
 8001dce:	4860      	ldr	r0, [pc, #384]	; (8001f50 <HAL_ADC_Init+0x29c>)
 8001dd0:	f7ff fee6 	bl	8001ba0 <LL_ADC_IsEnabled>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4323      	orrs	r3, r4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e008      	b.n	8001df6 <HAL_ADC_Init+0x142>
 8001de4:	485b      	ldr	r0, [pc, #364]	; (8001f54 <HAL_ADC_Init+0x2a0>)
 8001de6:	f7ff fedb 	bl	8001ba0 <LL_ADC_IsEnabled>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d012      	beq.n	8001e20 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a53      	ldr	r2, [pc, #332]	; (8001f4c <HAL_ADC_Init+0x298>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d004      	beq.n	8001e0e <HAL_ADC_Init+0x15a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a51      	ldr	r2, [pc, #324]	; (8001f50 <HAL_ADC_Init+0x29c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_Init+0x15e>
 8001e0e:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_ADC_Init+0x2a4>)
 8001e10:	e000      	b.n	8001e14 <HAL_ADC_Init+0x160>
 8001e12:	4a52      	ldr	r2, [pc, #328]	; (8001f5c <HAL_ADC_Init+0x2a8>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	f7ff fd12 	bl	8001844 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e20:	f7ff fd04 	bl	800182c <HAL_GetREVID>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d914      	bls.n	8001e58 <HAL_ADC_Init+0x1a4>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b10      	cmp	r3, #16
 8001e34:	d110      	bne.n	8001e58 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7d5b      	ldrb	r3, [r3, #21]
 8001e3a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e40:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e46:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7f1b      	ldrb	r3, [r3, #28]
 8001e4c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e4e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e50:	f043 030c 	orr.w	r3, r3, #12
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	e00d      	b.n	8001e74 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7d5b      	ldrb	r3, [r3, #21]
 8001e5c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e62:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e68:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7f1b      	ldrb	r3, [r3, #28]
 8001e6e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7f1b      	ldrb	r3, [r3, #28]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d106      	bne.n	8001e8a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	045b      	lsls	r3, r3, #17
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <HAL_ADC_Init+0x2ac>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	69b9      	ldr	r1, [r7, #24]
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff febc 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8001ec4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fede 	bl	8001c8c <LL_ADC_INJ_IsConversionOngoing>
 8001ed0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d15f      	bne.n	8001f98 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d15c      	bne.n	8001f98 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7d1b      	ldrb	r3, [r3, #20]
 8001ee2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_ADC_Init+0x2b0>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	69b9      	ldr	r1, [r7, #24]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d130      	bne.n	8001f6c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_ADC_Init+0x2b4>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f1e:	3a01      	subs	r2, #1
 8001f20:	0411      	lsls	r1, r2, #16
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f26:	4311      	orrs	r1, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f2c:	4311      	orrs	r1, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f32:	430a      	orrs	r2, r1
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	611a      	str	r2, [r3, #16]
 8001f40:	e01c      	b.n	8001f7c <HAL_ADC_Init+0x2c8>
 8001f42:	bf00      	nop
 8001f44:	24000000 	.word	0x24000000
 8001f48:	053e2d63 	.word	0x053e2d63
 8001f4c:	40022000 	.word	0x40022000
 8001f50:	40022100 	.word	0x40022100
 8001f54:	58026000 	.word	0x58026000
 8001f58:	40022300 	.word	0x40022300
 8001f5c:	58026300 	.word	0x58026300
 8001f60:	fff0c003 	.word	0xfff0c003
 8001f64:	ffffbffc 	.word	0xffffbffc
 8001f68:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0201 	bic.w	r2, r2, #1
 8001f7a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fef4 	bl	8002d80 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d10c      	bne.n	8001fba <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f023 010f 	bic.w	r1, r3, #15
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fb8:	e007      	b.n	8001fca <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 020f 	bic.w	r2, r2, #15
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	f023 0303 	bic.w	r3, r3, #3
 8001fd2:	f043 0201 	orr.w	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54
 8001fda:	e007      	b.n	8001fec <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	f043 0210 	orr.w	r2, r3, #16
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd90      	pop	{r4, r7, pc}
 8001ff6:	bf00      	nop

08001ff8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a55      	ldr	r2, [pc, #340]	; (8002160 <HAL_ADC_Start_DMA+0x168>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d004      	beq.n	8002018 <HAL_ADC_Start_DMA+0x20>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a54      	ldr	r2, [pc, #336]	; (8002164 <HAL_ADC_Start_DMA+0x16c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_ADC_Start_DMA+0x24>
 8002018:	4b53      	ldr	r3, [pc, #332]	; (8002168 <HAL_ADC_Start_DMA+0x170>)
 800201a:	e000      	b.n	800201e <HAL_ADC_Start_DMA+0x26>
 800201c:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_ADC_Start_DMA+0x174>)
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fd3a 	bl	8001a98 <LL_ADC_GetMultimode>
 8002024:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fe06 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 808c 	bne.w	8002150 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_ADC_Start_DMA+0x4e>
 8002042:	2302      	movs	r3, #2
 8002044:	e087      	b.n	8002156 <HAL_ADC_Start_DMA+0x15e>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	2b05      	cmp	r3, #5
 8002058:	d002      	beq.n	8002060 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b09      	cmp	r3, #9
 800205e:	d170      	bne.n	8002142 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fd0f 	bl	8002a84 <ADC_Enable>
 8002066:	4603      	mov	r3, r0
 8002068:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800206a:	7dfb      	ldrb	r3, [r7, #23]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d163      	bne.n	8002138 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002074:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <HAL_ADC_Start_DMA+0x178>)
 8002076:	4013      	ands	r3, r2
 8002078:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a37      	ldr	r2, [pc, #220]	; (8002164 <HAL_ADC_Start_DMA+0x16c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d002      	beq.n	8002090 <HAL_ADC_Start_DMA+0x98>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	e000      	b.n	8002092 <HAL_ADC_Start_DMA+0x9a>
 8002090:	4b33      	ldr	r3, [pc, #204]	; (8002160 <HAL_ADC_Start_DMA+0x168>)
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	4293      	cmp	r3, r2
 8002098:	d002      	beq.n	80020a0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d105      	bne.n	80020ac <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d006      	beq.n	80020c6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	f023 0206 	bic.w	r2, r3, #6
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	659a      	str	r2, [r3, #88]	; 0x58
 80020c4:	e002      	b.n	80020cc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d0:	4a28      	ldr	r2, [pc, #160]	; (8002174 <HAL_ADC_Start_DMA+0x17c>)
 80020d2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	4a27      	ldr	r2, [pc, #156]	; (8002178 <HAL_ADC_Start_DMA+0x180>)
 80020da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e0:	4a26      	ldr	r2, [pc, #152]	; (800217c <HAL_ADC_Start_DMA+0x184>)
 80020e2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	221c      	movs	r2, #28
 80020ea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0210 	orr.w	r2, r2, #16
 8002102:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f7ff fc5f 	bl	80019d2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3340      	adds	r3, #64	; 0x40
 800211e:	4619      	mov	r1, r3
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f001 fca6 	bl	8003a74 <HAL_DMA_Start_IT>
 8002128:	4603      	mov	r3, r0
 800212a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fd5b 	bl	8001bec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002136:	e00d      	b.n	8002154 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002140:	e008      	b.n	8002154 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800214e:	e001      	b.n	8002154 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002150:	2302      	movs	r3, #2
 8002152:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002154:	7dfb      	ldrb	r3, [r7, #23]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40022000 	.word	0x40022000
 8002164:	40022100 	.word	0x40022100
 8002168:	40022300 	.word	0x40022300
 800216c:	58026300 	.word	0x58026300
 8002170:	fffff0fe 	.word	0xfffff0fe
 8002174:	08002c57 	.word	0x08002c57
 8002178:	08002d2f 	.word	0x08002d2f
 800217c:	08002d4b 	.word	0x08002d4b

08002180 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_ADC_Stop_DMA+0x16>
 8002192:	2302      	movs	r3, #2
 8002194:	e04f      	b.n	8002236 <HAL_ADC_Stop_DMA+0xb6>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800219e:	2103      	movs	r1, #3
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fbb3 	bl	800290c <ADC_ConversionStop>
 80021a6:	4603      	mov	r3, r0
 80021a8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d13d      	bne.n	800222c <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0203 	bic.w	r2, r2, #3
 80021be:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d10f      	bne.n	80021ee <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	4618      	mov	r0, r3
 80021d4:	f001 feb8 	bl	8003f48 <HAL_DMA_Abort>
 80021d8:	4603      	mov	r3, r0
 80021da:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0210 	bic.w	r2, r2, #16
 80021fc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fcc7 	bl	8002b98 <ADC_Disable>
 800220a:	4603      	mov	r3, r0
 800220c:	73fb      	strb	r3, [r7, #15]
 800220e:	e002      	b.n	8002216 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 fcc1 	bl	8002b98 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d107      	bne.n	800222c <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <HAL_ADC_Stop_DMA+0xc0>)
 8002222:	4013      	ands	r3, r2
 8002224:	f043 0201 	orr.w	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	ffffeefe 	.word	0xffffeefe

08002244 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b0a1      	sub	sp, #132	; 0x84
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a9d      	ldr	r2, [pc, #628]	; (80024fc <HAL_ADC_ConfigChannel+0x290>)
 8002286:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x2a>
 8002292:	2302      	movs	r3, #2
 8002294:	e321      	b.n	80028da <HAL_ADC_ConfigChannel+0x66e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fcca 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f040 8306 	bne.w	80028bc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d108      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x62>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	0e9b      	lsrs	r3, r3, #26
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	2201      	movs	r2, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	e016      	b.n	80022fc <HAL_ADC_ConfigChannel+0x90>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022de:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80022e6:	2320      	movs	r3, #32
 80022e8:	e003      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80022ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	2201      	movs	r2, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	69d1      	ldr	r1, [r2, #28]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	430b      	orrs	r3, r1
 8002308:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	f7ff fb2f 	bl	800197a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fc8b 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8002326:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fcad 	bl	8001c8c <LL_ADC_INJ_IsConversionOngoing>
 8002332:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 80b3 	bne.w	80024a2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800233c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 80af 	bne.w	80024a2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	461a      	mov	r2, r3
 8002352:	f7ff fb51 	bl	80019f8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002356:	4b6a      	ldr	r3, [pc, #424]	; (8002500 <HAL_ADC_ConfigChannel+0x294>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800235e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002362:	d10b      	bne.n	800237c <HAL_ADC_ConfigChannel+0x110>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	e01d      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x14c>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10b      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x136>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	e00a      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x14c>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	695a      	ldr	r2, [r3, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d027      	beq.n	8002412 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6919      	ldr	r1, [r3, #16]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023d0:	f7ff fa6c 	bl	80018ac <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6919      	ldr	r1, [r3, #16]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	7e5b      	ldrb	r3, [r3, #25]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d102      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x17e>
 80023e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80023e8:	e000      	b.n	80023ec <HAL_ADC_ConfigChannel+0x180>
 80023ea:	2300      	movs	r3, #0
 80023ec:	461a      	mov	r2, r3
 80023ee:	f7ff fa96 	bl	800191e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6919      	ldr	r1, [r3, #16]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	7e1b      	ldrb	r3, [r3, #24]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d102      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x19c>
 8002402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002406:	e000      	b.n	800240a <HAL_ADC_ConfigChannel+0x19e>
 8002408:	2300      	movs	r3, #0
 800240a:	461a      	mov	r2, r3
 800240c:	f7ff fa6e 	bl	80018ec <LL_ADC_SetDataRightShift>
 8002410:	e047      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002418:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	069b      	lsls	r3, r3, #26
 8002422:	429a      	cmp	r2, r3
 8002424:	d107      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002434:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800243c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	069b      	lsls	r3, r3, #26
 8002446:	429a      	cmp	r2, r3
 8002448:	d107      	bne.n	800245a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002458:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002460:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	069b      	lsls	r3, r3, #26
 800246a:	429a      	cmp	r2, r3
 800246c:	d107      	bne.n	800247e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800247c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002484:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	069b      	lsls	r3, r3, #26
 800248e:	429a      	cmp	r2, r3
 8002490:	d107      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024a0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fb7a 	bl	8001ba0 <LL_ADC_IsEnabled>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 820d 	bne.w	80028ce <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	6819      	ldr	r1, [r3, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	461a      	mov	r2, r3
 80024c2:	f7ff fac5 	bl	8001a50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <HAL_ADC_ConfigChannel+0x290>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	f040 8133 	bne.w	8002738 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d110      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x298>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	0e9b      	lsrs	r3, r3, #26
 80024e8:	3301      	adds	r3, #1
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	bf94      	ite	ls
 80024f2:	2301      	movls	r3, #1
 80024f4:	2300      	movhi	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	e01e      	b.n	8002538 <HAL_ADC_ConfigChannel+0x2cc>
 80024fa:	bf00      	nop
 80024fc:	47ff0000 	.word	0x47ff0000
 8002500:	5c001000 	.word	0x5c001000
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002514:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800251c:	2320      	movs	r3, #32
 800251e:	e003      	b.n	8002528 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	3301      	adds	r3, #1
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	2b09      	cmp	r3, #9
 8002530:	bf94      	ite	ls
 8002532:	2301      	movls	r3, #1
 8002534:	2300      	movhi	r3, #0
 8002536:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002538:	2b00      	cmp	r3, #0
 800253a:	d079      	beq.n	8002630 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002544:	2b00      	cmp	r3, #0
 8002546:	d107      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x2ec>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	0e9b      	lsrs	r3, r3, #26
 800254e:	3301      	adds	r3, #1
 8002550:	069b      	lsls	r3, r3, #26
 8002552:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002556:	e015      	b.n	8002584 <HAL_ADC_ConfigChannel+0x318>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002568:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800256a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002570:	2320      	movs	r3, #32
 8002572:	e003      	b.n	800257c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	3301      	adds	r3, #1
 800257e:	069b      	lsls	r3, r3, #26
 8002580:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800258c:	2b00      	cmp	r3, #0
 800258e:	d109      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x338>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	3301      	adds	r3, #1
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	2101      	movs	r1, #1
 800259e:	fa01 f303 	lsl.w	r3, r1, r3
 80025a2:	e017      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x368>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80025b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80025bc:	2320      	movs	r3, #32
 80025be:	e003      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80025c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	3301      	adds	r3, #1
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	ea42 0103 	orr.w	r1, r2, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x38e>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	0e9b      	lsrs	r3, r3, #26
 80025ea:	3301      	adds	r3, #1
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	051b      	lsls	r3, r3, #20
 80025f8:	e018      	b.n	800262c <HAL_ADC_ConfigChannel+0x3c0>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800260c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002612:	2320      	movs	r3, #32
 8002614:	e003      	b.n	800261e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800262c:	430b      	orrs	r3, r1
 800262e:	e07e      	b.n	800272e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002638:	2b00      	cmp	r3, #0
 800263a:	d107      	bne.n	800264c <HAL_ADC_ConfigChannel+0x3e0>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0e9b      	lsrs	r3, r3, #26
 8002642:	3301      	adds	r3, #1
 8002644:	069b      	lsls	r3, r3, #26
 8002646:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800264a:	e015      	b.n	8002678 <HAL_ADC_ConfigChannel+0x40c>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002664:	2320      	movs	r3, #32
 8002666:	e003      	b.n	8002670 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	3301      	adds	r3, #1
 8002672:	069b      	lsls	r3, r3, #26
 8002674:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002680:	2b00      	cmp	r3, #0
 8002682:	d109      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x42c>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0e9b      	lsrs	r3, r3, #26
 800268a:	3301      	adds	r3, #1
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	e017      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x45c>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	61bb      	str	r3, [r7, #24]
  return result;
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80026b0:	2320      	movs	r3, #32
 80026b2:	e003      	b.n	80026bc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	2101      	movs	r1, #1
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	ea42 0103 	orr.w	r1, r2, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10d      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x488>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0e9b      	lsrs	r3, r3, #26
 80026de:	3301      	adds	r3, #1
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	3b1e      	subs	r3, #30
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026f2:	e01b      	b.n	800272c <HAL_ADC_ConfigChannel+0x4c0>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	60fb      	str	r3, [r7, #12]
  return result;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800270c:	2320      	movs	r3, #32
 800270e:	e003      	b.n	8002718 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	3301      	adds	r3, #1
 800271a:	f003 021f 	and.w	r2, r3, #31
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	3b1e      	subs	r3, #30
 8002726:	051b      	lsls	r3, r3, #20
 8002728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800272c:	430b      	orrs	r3, r1
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	6892      	ldr	r2, [r2, #8]
 8002732:	4619      	mov	r1, r3
 8002734:	f7ff f960 	bl	80019f8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	f280 80c6 	bge.w	80028ce <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a67      	ldr	r2, [pc, #412]	; (80028e4 <HAL_ADC_ConfigChannel+0x678>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d004      	beq.n	8002756 <HAL_ADC_ConfigChannel+0x4ea>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a65      	ldr	r2, [pc, #404]	; (80028e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0x4ee>
 8002756:	4b65      	ldr	r3, [pc, #404]	; (80028ec <HAL_ADC_ConfigChannel+0x680>)
 8002758:	e000      	b.n	800275c <HAL_ADC_ConfigChannel+0x4f0>
 800275a:	4b65      	ldr	r3, [pc, #404]	; (80028f0 <HAL_ADC_ConfigChannel+0x684>)
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff f897 	bl	8001890 <LL_ADC_GetCommonPathInternalCh>
 8002762:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a5e      	ldr	r2, [pc, #376]	; (80028e4 <HAL_ADC_ConfigChannel+0x678>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_ADC_ConfigChannel+0x50c>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a5d      	ldr	r2, [pc, #372]	; (80028e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d10e      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x52a>
 8002778:	485a      	ldr	r0, [pc, #360]	; (80028e4 <HAL_ADC_ConfigChannel+0x678>)
 800277a:	f7ff fa11 	bl	8001ba0 <LL_ADC_IsEnabled>
 800277e:	4604      	mov	r4, r0
 8002780:	4859      	ldr	r0, [pc, #356]	; (80028e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002782:	f7ff fa0d 	bl	8001ba0 <LL_ADC_IsEnabled>
 8002786:	4603      	mov	r3, r0
 8002788:	4323      	orrs	r3, r4
 800278a:	2b00      	cmp	r3, #0
 800278c:	bf0c      	ite	eq
 800278e:	2301      	moveq	r3, #1
 8002790:	2300      	movne	r3, #0
 8002792:	b2db      	uxtb	r3, r3
 8002794:	e008      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x53c>
 8002796:	4857      	ldr	r0, [pc, #348]	; (80028f4 <HAL_ADC_ConfigChannel+0x688>)
 8002798:	f7ff fa02 	bl	8001ba0 <LL_ADC_IsEnabled>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf0c      	ite	eq
 80027a2:	2301      	moveq	r3, #1
 80027a4:	2300      	movne	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d07d      	beq.n	80028a8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a51      	ldr	r2, [pc, #324]	; (80028f8 <HAL_ADC_ConfigChannel+0x68c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d130      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x5ac>
 80027b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d12b      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a4b      	ldr	r2, [pc, #300]	; (80028f4 <HAL_ADC_ConfigChannel+0x688>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	f040 8081 	bne.w	80028ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a44      	ldr	r2, [pc, #272]	; (80028e4 <HAL_ADC_ConfigChannel+0x678>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0x574>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a43      	ldr	r2, [pc, #268]	; (80028e8 <HAL_ADC_ConfigChannel+0x67c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x578>
 80027e0:	4a42      	ldr	r2, [pc, #264]	; (80028ec <HAL_ADC_ConfigChannel+0x680>)
 80027e2:	e000      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x57a>
 80027e4:	4a42      	ldr	r2, [pc, #264]	; (80028f0 <HAL_ADC_ConfigChannel+0x684>)
 80027e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f7ff f83b 	bl	800186a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f4:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_ADC_ConfigChannel+0x690>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	4a41      	ldr	r2, [pc, #260]	; (8002900 <HAL_ADC_ConfigChannel+0x694>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	3301      	adds	r3, #1
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002808:	e002      	b.n	8002810 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3b01      	subs	r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f9      	bne.n	800280a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002816:	e05a      	b.n	80028ce <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a39      	ldr	r2, [pc, #228]	; (8002904 <HAL_ADC_ConfigChannel+0x698>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d11e      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x5f4>
 8002822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d119      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a30      	ldr	r2, [pc, #192]	; (80028f4 <HAL_ADC_ConfigChannel+0x688>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d14b      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <HAL_ADC_ConfigChannel+0x678>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d004      	beq.n	800284a <HAL_ADC_ConfigChannel+0x5de>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a28      	ldr	r2, [pc, #160]	; (80028e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_ADC_ConfigChannel+0x5e2>
 800284a:	4a28      	ldr	r2, [pc, #160]	; (80028ec <HAL_ADC_ConfigChannel+0x680>)
 800284c:	e000      	b.n	8002850 <HAL_ADC_ConfigChannel+0x5e4>
 800284e:	4a28      	ldr	r2, [pc, #160]	; (80028f0 <HAL_ADC_ConfigChannel+0x684>)
 8002850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002856:	4619      	mov	r1, r3
 8002858:	4610      	mov	r0, r2
 800285a:	f7ff f806 	bl	800186a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800285e:	e036      	b.n	80028ce <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a28      	ldr	r2, [pc, #160]	; (8002908 <HAL_ADC_ConfigChannel+0x69c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d131      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x662>
 800286a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d12c      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1e      	ldr	r2, [pc, #120]	; (80028f4 <HAL_ADC_ConfigChannel+0x688>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d127      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <HAL_ADC_ConfigChannel+0x678>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <HAL_ADC_ConfigChannel+0x626>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <HAL_ADC_ConfigChannel+0x67c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x62a>
 8002892:	4a16      	ldr	r2, [pc, #88]	; (80028ec <HAL_ADC_ConfigChannel+0x680>)
 8002894:	e000      	b.n	8002898 <HAL_ADC_ConfigChannel+0x62c>
 8002896:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <HAL_ADC_ConfigChannel+0x684>)
 8002898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800289a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800289e:	4619      	mov	r1, r3
 80028a0:	4610      	mov	r0, r2
 80028a2:	f7fe ffe2 	bl	800186a <LL_ADC_SetCommonPathInternalCh>
 80028a6:	e012      	b.n	80028ce <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ac:	f043 0220 	orr.w	r2, r3, #32
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80028ba:	e008      	b.n	80028ce <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3784      	adds	r7, #132	; 0x84
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd90      	pop	{r4, r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40022000 	.word	0x40022000
 80028e8:	40022100 	.word	0x40022100
 80028ec:	40022300 	.word	0x40022300
 80028f0:	58026300 	.word	0x58026300
 80028f4:	58026000 	.word	0x58026000
 80028f8:	cb840000 	.word	0xcb840000
 80028fc:	24000000 	.word	0x24000000
 8002900:	053e2d63 	.word	0x053e2d63
 8002904:	c7520000 	.word	0xc7520000
 8002908:	cfb80000 	.word	0xcfb80000

0800290c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f98a 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8002928:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff f9ac 	bl	8001c8c <LL_ADC_INJ_IsConversionOngoing>
 8002934:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d103      	bne.n	8002944 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8098 	beq.w	8002a74 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d02a      	beq.n	80029a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7d5b      	ldrb	r3, [r3, #21]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d126      	bne.n	80029a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	7d1b      	ldrb	r3, [r3, #20]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d122      	bne.n	80029a8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002962:	2301      	movs	r3, #1
 8002964:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002966:	e014      	b.n	8002992 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4a45      	ldr	r2, [pc, #276]	; (8002a80 <ADC_ConversionStop+0x174>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d90d      	bls.n	800298c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	f043 0210 	orr.w	r2, r3, #16
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	f043 0201 	orr.w	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e074      	b.n	8002a76 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	3301      	adds	r3, #1
 8002990:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d1e3      	bne.n	8002968 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2240      	movs	r2, #64	; 0x40
 80029a6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d014      	beq.n	80029d8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff f942 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00c      	beq.n	80029d8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff f8ff 	bl	8001bc6 <LL_ADC_IsDisableOngoing>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d104      	bne.n	80029d8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff f91e 	bl	8001c14 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d014      	beq.n	8002a08 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff f952 	bl	8001c8c <LL_ADC_INJ_IsConversionOngoing>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00c      	beq.n	8002a08 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff f8e7 	bl	8001bc6 <LL_ADC_IsDisableOngoing>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d104      	bne.n	8002a08 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff f92e 	bl	8001c64 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d005      	beq.n	8002a1a <ADC_ConversionStop+0x10e>
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d105      	bne.n	8002a20 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a14:	230c      	movs	r3, #12
 8002a16:	617b      	str	r3, [r7, #20]
        break;
 8002a18:	e005      	b.n	8002a26 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	617b      	str	r3, [r7, #20]
        break;
 8002a1e:	e002      	b.n	8002a26 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a20:	2304      	movs	r3, #4
 8002a22:	617b      	str	r3, [r7, #20]
        break;
 8002a24:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a26:	f7fe fef5 	bl	8001814 <HAL_GetTick>
 8002a2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a2c:	e01b      	b.n	8002a66 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a2e:	f7fe fef1 	bl	8001814 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b05      	cmp	r3, #5
 8002a3a:	d914      	bls.n	8002a66 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	f043 0210 	orr.w	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e007      	b.n	8002a76 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1dc      	bne.n	8002a2e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	000cdbff 	.word	0x000cdbff

08002a84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff f885 	bl	8001ba0 <LL_ADC_IsEnabled>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d16e      	bne.n	8002b7a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	4b38      	ldr	r3, [pc, #224]	; (8002b84 <ADC_Enable+0x100>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	f043 0210 	orr.w	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e05a      	b.n	8002b7c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff f840 	bl	8001b50 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ad0:	f7fe fea0 	bl	8001814 <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a2b      	ldr	r2, [pc, #172]	; (8002b88 <ADC_Enable+0x104>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <ADC_Enable+0x66>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a29      	ldr	r2, [pc, #164]	; (8002b8c <ADC_Enable+0x108>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <ADC_Enable+0x6a>
 8002aea:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <ADC_Enable+0x10c>)
 8002aec:	e000      	b.n	8002af0 <ADC_Enable+0x6c>
 8002aee:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <ADC_Enable+0x110>)
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe ffd1 	bl	8001a98 <LL_ADC_GetMultimode>
 8002af6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a23      	ldr	r2, [pc, #140]	; (8002b8c <ADC_Enable+0x108>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d002      	beq.n	8002b08 <ADC_Enable+0x84>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	e000      	b.n	8002b0a <ADC_Enable+0x86>
 8002b08:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <ADC_Enable+0x104>)
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d02c      	beq.n	8002b6c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d130      	bne.n	8002b7a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b18:	e028      	b.n	8002b6c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff f83e 	bl	8001ba0 <LL_ADC_IsEnabled>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d104      	bne.n	8002b34 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff f80e 	bl	8001b50 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b34:	f7fe fe6e 	bl	8001814 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d914      	bls.n	8002b6c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d00d      	beq.n	8002b6c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f043 0210 	orr.w	r2, r3, #16
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	f043 0201 	orr.w	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e007      	b.n	8002b7c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d1cf      	bne.n	8002b1a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	8000003f 	.word	0x8000003f
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40022100 	.word	0x40022100
 8002b90:	40022300 	.word	0x40022300
 8002b94:	58026300 	.word	0x58026300

08002b98 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff f80e 	bl	8001bc6 <LL_ADC_IsDisableOngoing>
 8002baa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe fff5 	bl	8001ba0 <LL_ADC_IsEnabled>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d047      	beq.n	8002c4c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d144      	bne.n	8002c4c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 030d 	and.w	r3, r3, #13
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d10c      	bne.n	8002bea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe ffcf 	bl	8001b78 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2203      	movs	r2, #3
 8002be0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002be2:	f7fe fe17 	bl	8001814 <HAL_GetTick>
 8002be6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002be8:	e029      	b.n	8002c3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	f043 0210 	orr.w	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e023      	b.n	8002c4e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c06:	f7fe fe05 	bl	8001814 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d914      	bls.n	8002c3e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	f043 0210 	orr.w	r2, r3, #16
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	f043 0201 	orr.w	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e007      	b.n	8002c4e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1dc      	bne.n	8002c06 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d14b      	bne.n	8002d08 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d021      	beq.n	8002cce <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fe60 	bl	8001954 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d032      	beq.n	8002d00 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d12b      	bne.n	8002d00 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d11f      	bne.n	8002d00 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	f043 0201 	orr.w	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	655a      	str	r2, [r3, #84]	; 0x54
 8002ccc:	e018      	b.n	8002d00 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d111      	bne.n	8002d00 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d105      	bne.n	8002d00 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f7fe f9bf 	bl	8001084 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d06:	e00e      	b.n	8002d26 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f7ff fa9f 	bl	8002258 <HAL_ADC_ErrorCallback>
}
 8002d1a:	e004      	b.n	8002d26 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
}
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f7ff fa81 	bl	8002244 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	f043 0204 	orr.w	r2, r3, #4
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7ff fa71 	bl	8002258 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a79      	ldr	r2, [pc, #484]	; (8002f74 <ADC_ConfigureBoostMode+0x1f4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <ADC_ConfigureBoostMode+0x1c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a78      	ldr	r2, [pc, #480]	; (8002f78 <ADC_ConfigureBoostMode+0x1f8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d109      	bne.n	8002db0 <ADC_ConfigureBoostMode+0x30>
 8002d9c:	4b77      	ldr	r3, [pc, #476]	; (8002f7c <ADC_ConfigureBoostMode+0x1fc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e008      	b.n	8002dc2 <ADC_ConfigureBoostMode+0x42>
 8002db0:	4b73      	ldr	r3, [pc, #460]	; (8002f80 <ADC_ConfigureBoostMode+0x200>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01c      	beq.n	8002e00 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002dc6:	f004 f885 	bl	8006ed4 <HAL_RCC_GetHCLKFreq>
 8002dca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dd4:	d010      	beq.n	8002df8 <ADC_ConfigureBoostMode+0x78>
 8002dd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dda:	d871      	bhi.n	8002ec0 <ADC_ConfigureBoostMode+0x140>
 8002ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de0:	d002      	beq.n	8002de8 <ADC_ConfigureBoostMode+0x68>
 8002de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002de6:	d16b      	bne.n	8002ec0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	60fb      	str	r3, [r7, #12]
        break;
 8002df6:	e066      	b.n	8002ec6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	60fb      	str	r3, [r7, #12]
        break;
 8002dfe:	e062      	b.n	8002ec6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e04:	f005 f808 	bl	8007e18 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e08:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e12:	d051      	beq.n	8002eb8 <ADC_ConfigureBoostMode+0x138>
 8002e14:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e18:	d854      	bhi.n	8002ec4 <ADC_ConfigureBoostMode+0x144>
 8002e1a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e1e:	d047      	beq.n	8002eb0 <ADC_ConfigureBoostMode+0x130>
 8002e20:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e24:	d84e      	bhi.n	8002ec4 <ADC_ConfigureBoostMode+0x144>
 8002e26:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e2a:	d03d      	beq.n	8002ea8 <ADC_ConfigureBoostMode+0x128>
 8002e2c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e30:	d848      	bhi.n	8002ec4 <ADC_ConfigureBoostMode+0x144>
 8002e32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e36:	d033      	beq.n	8002ea0 <ADC_ConfigureBoostMode+0x120>
 8002e38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e3c:	d842      	bhi.n	8002ec4 <ADC_ConfigureBoostMode+0x144>
 8002e3e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e42:	d029      	beq.n	8002e98 <ADC_ConfigureBoostMode+0x118>
 8002e44:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e48:	d83c      	bhi.n	8002ec4 <ADC_ConfigureBoostMode+0x144>
 8002e4a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e4e:	d01a      	beq.n	8002e86 <ADC_ConfigureBoostMode+0x106>
 8002e50:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e54:	d836      	bhi.n	8002ec4 <ADC_ConfigureBoostMode+0x144>
 8002e56:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e5a:	d014      	beq.n	8002e86 <ADC_ConfigureBoostMode+0x106>
 8002e5c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e60:	d830      	bhi.n	8002ec4 <ADC_ConfigureBoostMode+0x144>
 8002e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e66:	d00e      	beq.n	8002e86 <ADC_ConfigureBoostMode+0x106>
 8002e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e6c:	d82a      	bhi.n	8002ec4 <ADC_ConfigureBoostMode+0x144>
 8002e6e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e72:	d008      	beq.n	8002e86 <ADC_ConfigureBoostMode+0x106>
 8002e74:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e78:	d824      	bhi.n	8002ec4 <ADC_ConfigureBoostMode+0x144>
 8002e7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e7e:	d002      	beq.n	8002e86 <ADC_ConfigureBoostMode+0x106>
 8002e80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e84:	d11e      	bne.n	8002ec4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	0c9b      	lsrs	r3, r3, #18
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	60fb      	str	r3, [r7, #12]
        break;
 8002e96:	e016      	b.n	8002ec6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	60fb      	str	r3, [r7, #12]
        break;
 8002e9e:	e012      	b.n	8002ec6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	60fb      	str	r3, [r7, #12]
        break;
 8002ea6:	e00e      	b.n	8002ec6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	60fb      	str	r3, [r7, #12]
        break;
 8002eae:	e00a      	b.n	8002ec6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	09db      	lsrs	r3, r3, #7
 8002eb4:	60fb      	str	r3, [r7, #12]
        break;
 8002eb6:	e006      	b.n	8002ec6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	60fb      	str	r3, [r7, #12]
        break;
 8002ebe:	e002      	b.n	8002ec6 <ADC_ConfigureBoostMode+0x146>
        break;
 8002ec0:	bf00      	nop
 8002ec2:	e000      	b.n	8002ec6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002ec4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002ec6:	f7fe fcb1 	bl	800182c <HAL_GetREVID>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d815      	bhi.n	8002f00 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a2b      	ldr	r2, [pc, #172]	; (8002f84 <ADC_ConfigureBoostMode+0x204>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d908      	bls.n	8002eee <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002eec:	e03e      	b.n	8002f6c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002efc:	609a      	str	r2, [r3, #8]
}
 8002efe:	e035      	b.n	8002f6c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a1f      	ldr	r2, [pc, #124]	; (8002f88 <ADC_ConfigureBoostMode+0x208>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d808      	bhi.n	8002f20 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f1c:	609a      	str	r2, [r3, #8]
}
 8002f1e:	e025      	b.n	8002f6c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4a1a      	ldr	r2, [pc, #104]	; (8002f8c <ADC_ConfigureBoostMode+0x20c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d80a      	bhi.n	8002f3e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3a:	609a      	str	r2, [r3, #8]
}
 8002f3c:	e016      	b.n	8002f6c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <ADC_ConfigureBoostMode+0x210>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d80a      	bhi.n	8002f5c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f58:	609a      	str	r2, [r3, #8]
}
 8002f5a:	e007      	b.n	8002f6c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f6a:	609a      	str	r2, [r3, #8]
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40022000 	.word	0x40022000
 8002f78:	40022100 	.word	0x40022100
 8002f7c:	40022300 	.word	0x40022300
 8002f80:	58026300 	.word	0x58026300
 8002f84:	01312d00 	.word	0x01312d00
 8002f88:	005f5e10 	.word	0x005f5e10
 8002f8c:	00bebc20 	.word	0x00bebc20
 8002f90:	017d7840 	.word	0x017d7840

08002f94 <LL_ADC_IsEnabled>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <LL_ADC_IsEnabled+0x18>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <LL_ADC_IsEnabled+0x1a>
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_ADC_REG_IsConversionOngoing>:
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d101      	bne.n	8002fd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b09f      	sub	sp, #124	; 0x7c
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e0be      	b.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800300a:	2300      	movs	r3, #0
 800300c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a5c      	ldr	r2, [pc, #368]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d102      	bne.n	800301e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003018:	4b5b      	ldr	r3, [pc, #364]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	e001      	b.n	8003022 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800301e:	2300      	movs	r3, #0
 8003020:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10b      	bne.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e09d      	b.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ffb9 	bl	8002fba <LL_ADC_REG_IsConversionOngoing>
 8003048:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ffb3 	bl	8002fba <LL_ADC_REG_IsConversionOngoing>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d17f      	bne.n	800315a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800305a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800305c:	2b00      	cmp	r3, #0
 800305e:	d17c      	bne.n	800315a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a47      	ldr	r2, [pc, #284]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d004      	beq.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a46      	ldr	r2, [pc, #280]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003074:	4b45      	ldr	r3, [pc, #276]	; (800318c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003076:	e000      	b.n	800307a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003078:	4b45      	ldr	r3, [pc, #276]	; (8003190 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800307a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d039      	beq.n	80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	431a      	orrs	r2, r3
 8003092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003094:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a3a      	ldr	r2, [pc, #232]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a38      	ldr	r2, [pc, #224]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10e      	bne.n	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80030aa:	4836      	ldr	r0, [pc, #216]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030ac:	f7ff ff72 	bl	8002f94 <LL_ADC_IsEnabled>
 80030b0:	4604      	mov	r4, r0
 80030b2:	4835      	ldr	r0, [pc, #212]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80030b4:	f7ff ff6e 	bl	8002f94 <LL_ADC_IsEnabled>
 80030b8:	4603      	mov	r3, r0
 80030ba:	4323      	orrs	r3, r4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e008      	b.n	80030da <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80030c8:	4832      	ldr	r0, [pc, #200]	; (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80030ca:	f7ff ff63 	bl	8002f94 <LL_ADC_IsEnabled>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d047      	beq.n	800316e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	6811      	ldr	r1, [r2, #0]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	6892      	ldr	r2, [r2, #8]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	431a      	orrs	r2, r3
 80030f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030f6:	e03a      	b.n	800316e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80030f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003102:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d004      	beq.n	8003118 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d10e      	bne.n	8003136 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003118:	481a      	ldr	r0, [pc, #104]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800311a:	f7ff ff3b 	bl	8002f94 <LL_ADC_IsEnabled>
 800311e:	4604      	mov	r4, r0
 8003120:	4819      	ldr	r0, [pc, #100]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003122:	f7ff ff37 	bl	8002f94 <LL_ADC_IsEnabled>
 8003126:	4603      	mov	r3, r0
 8003128:	4323      	orrs	r3, r4
 800312a:	2b00      	cmp	r3, #0
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	e008      	b.n	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003136:	4817      	ldr	r0, [pc, #92]	; (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003138:	f7ff ff2c 	bl	8002f94 <LL_ADC_IsEnabled>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d010      	beq.n	800316e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800314c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003152:	4013      	ands	r3, r2
 8003154:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003156:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003158:	e009      	b.n	800316e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	f043 0220 	orr.w	r2, r3, #32
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800316c:	e000      	b.n	8003170 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800316e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003178:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800317c:	4618      	mov	r0, r3
 800317e:	377c      	adds	r7, #124	; 0x7c
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}
 8003184:	40022000 	.word	0x40022000
 8003188:	40022100 	.word	0x40022100
 800318c:	40022300 	.word	0x40022300
 8003190:	58026300 	.word	0x58026300
 8003194:	58026000 	.word	0x58026000
 8003198:	fffff0e0 	.word	0xfffff0e0

0800319c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <__NVIC_SetPriorityGrouping+0x40>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ca:	4a04      	ldr	r2, [pc, #16]	; (80031dc <__NVIC_SetPriorityGrouping+0x40>)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	60d3      	str	r3, [r2, #12]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000ed00 	.word	0xe000ed00
 80031e0:	05fa0000 	.word	0x05fa0000

080031e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <__NVIC_GetPriorityGrouping+0x18>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	f003 0307 	and.w	r3, r3, #7
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800320a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800320e:	2b00      	cmp	r3, #0
 8003210:	db0b      	blt.n	800322a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	f003 021f 	and.w	r2, r3, #31
 8003218:	4907      	ldr	r1, [pc, #28]	; (8003238 <__NVIC_EnableIRQ+0x38>)
 800321a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	2001      	movs	r0, #1
 8003222:	fa00 f202 	lsl.w	r2, r0, r2
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000e100 	.word	0xe000e100

0800323c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	6039      	str	r1, [r7, #0]
 8003246:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800324c:	2b00      	cmp	r3, #0
 800324e:	db0a      	blt.n	8003266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	b2da      	uxtb	r2, r3
 8003254:	490c      	ldr	r1, [pc, #48]	; (8003288 <__NVIC_SetPriority+0x4c>)
 8003256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800325a:	0112      	lsls	r2, r2, #4
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	440b      	add	r3, r1
 8003260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003264:	e00a      	b.n	800327c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4908      	ldr	r1, [pc, #32]	; (800328c <__NVIC_SetPriority+0x50>)
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	3b04      	subs	r3, #4
 8003274:	0112      	lsls	r2, r2, #4
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	440b      	add	r3, r1
 800327a:	761a      	strb	r2, [r3, #24]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000e100 	.word	0xe000e100
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003290:	b480      	push	{r7}
 8003292:	b089      	sub	sp, #36	; 0x24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f1c3 0307 	rsb	r3, r3, #7
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	bf28      	it	cs
 80032ae:	2304      	movcs	r3, #4
 80032b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3304      	adds	r3, #4
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d902      	bls.n	80032c0 <NVIC_EncodePriority+0x30>
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3b03      	subs	r3, #3
 80032be:	e000      	b.n	80032c2 <NVIC_EncodePriority+0x32>
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43da      	mvns	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	401a      	ands	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d8:	f04f 31ff 	mov.w	r1, #4294967295
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	fa01 f303 	lsl.w	r3, r1, r3
 80032e2:	43d9      	mvns	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e8:	4313      	orrs	r3, r2
         );
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3724      	adds	r7, #36	; 0x24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003308:	d301      	bcc.n	800330e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330a:	2301      	movs	r3, #1
 800330c:	e00f      	b.n	800332e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <SysTick_Config+0x40>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003316:	210f      	movs	r1, #15
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	f7ff ff8e 	bl	800323c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <SysTick_Config+0x40>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003326:	4b04      	ldr	r3, [pc, #16]	; (8003338 <SysTick_Config+0x40>)
 8003328:	2207      	movs	r2, #7
 800332a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	e000e010 	.word	0xe000e010

0800333c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff ff29 	bl	800319c <__NVIC_SetPriorityGrouping>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003360:	f7ff ff40 	bl	80031e4 <__NVIC_GetPriorityGrouping>
 8003364:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	6978      	ldr	r0, [r7, #20]
 800336c:	f7ff ff90 	bl	8003290 <NVIC_EncodePriority>
 8003370:	4602      	mov	r2, r0
 8003372:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff5f 	bl	800323c <__NVIC_SetPriority>
}
 800337e:	bf00      	nop
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	4603      	mov	r3, r0
 800338e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003390:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff33 	bl	8003200 <__NVIC_EnableIRQ>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff ffa4 	bl	80032f8 <SysTick_Config>
 80033b0:	4603      	mov	r3, r0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80033c4:	f7fe fa26 	bl	8001814 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e316      	b.n	8003a02 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a66      	ldr	r2, [pc, #408]	; (8003574 <HAL_DMA_Init+0x1b8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d04a      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a65      	ldr	r2, [pc, #404]	; (8003578 <HAL_DMA_Init+0x1bc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d045      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a63      	ldr	r2, [pc, #396]	; (800357c <HAL_DMA_Init+0x1c0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d040      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a62      	ldr	r2, [pc, #392]	; (8003580 <HAL_DMA_Init+0x1c4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d03b      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a60      	ldr	r2, [pc, #384]	; (8003584 <HAL_DMA_Init+0x1c8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d036      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a5f      	ldr	r2, [pc, #380]	; (8003588 <HAL_DMA_Init+0x1cc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d031      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a5d      	ldr	r2, [pc, #372]	; (800358c <HAL_DMA_Init+0x1d0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d02c      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a5c      	ldr	r2, [pc, #368]	; (8003590 <HAL_DMA_Init+0x1d4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d027      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a5a      	ldr	r2, [pc, #360]	; (8003594 <HAL_DMA_Init+0x1d8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d022      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a59      	ldr	r2, [pc, #356]	; (8003598 <HAL_DMA_Init+0x1dc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d01d      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a57      	ldr	r2, [pc, #348]	; (800359c <HAL_DMA_Init+0x1e0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d018      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a56      	ldr	r2, [pc, #344]	; (80035a0 <HAL_DMA_Init+0x1e4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d013      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a54      	ldr	r2, [pc, #336]	; (80035a4 <HAL_DMA_Init+0x1e8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00e      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a53      	ldr	r2, [pc, #332]	; (80035a8 <HAL_DMA_Init+0x1ec>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d009      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a51      	ldr	r2, [pc, #324]	; (80035ac <HAL_DMA_Init+0x1f0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a50      	ldr	r2, [pc, #320]	; (80035b0 <HAL_DMA_Init+0x1f4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_DMA_Init+0xbc>
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <HAL_DMA_Init+0xbe>
 8003478:	2300      	movs	r3, #0
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 813b 	beq.w	80036f6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a37      	ldr	r2, [pc, #220]	; (8003574 <HAL_DMA_Init+0x1b8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d04a      	beq.n	8003530 <HAL_DMA_Init+0x174>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a36      	ldr	r2, [pc, #216]	; (8003578 <HAL_DMA_Init+0x1bc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d045      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a34      	ldr	r2, [pc, #208]	; (800357c <HAL_DMA_Init+0x1c0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d040      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a33      	ldr	r2, [pc, #204]	; (8003580 <HAL_DMA_Init+0x1c4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d03b      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a31      	ldr	r2, [pc, #196]	; (8003584 <HAL_DMA_Init+0x1c8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d036      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a30      	ldr	r2, [pc, #192]	; (8003588 <HAL_DMA_Init+0x1cc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d031      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a2e      	ldr	r2, [pc, #184]	; (800358c <HAL_DMA_Init+0x1d0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d02c      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a2d      	ldr	r2, [pc, #180]	; (8003590 <HAL_DMA_Init+0x1d4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d027      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a2b      	ldr	r2, [pc, #172]	; (8003594 <HAL_DMA_Init+0x1d8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d022      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <HAL_DMA_Init+0x1dc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d01d      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a28      	ldr	r2, [pc, #160]	; (800359c <HAL_DMA_Init+0x1e0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d018      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a27      	ldr	r2, [pc, #156]	; (80035a0 <HAL_DMA_Init+0x1e4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d013      	beq.n	8003530 <HAL_DMA_Init+0x174>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a25      	ldr	r2, [pc, #148]	; (80035a4 <HAL_DMA_Init+0x1e8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00e      	beq.n	8003530 <HAL_DMA_Init+0x174>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a24      	ldr	r2, [pc, #144]	; (80035a8 <HAL_DMA_Init+0x1ec>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d009      	beq.n	8003530 <HAL_DMA_Init+0x174>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a22      	ldr	r2, [pc, #136]	; (80035ac <HAL_DMA_Init+0x1f0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_DMA_Init+0x174>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a21      	ldr	r2, [pc, #132]	; (80035b0 <HAL_DMA_Init+0x1f4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d108      	bne.n	8003542 <HAL_DMA_Init+0x186>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	e007      	b.n	8003552 <HAL_DMA_Init+0x196>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003552:	e02f      	b.n	80035b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003554:	f7fe f95e 	bl	8001814 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b05      	cmp	r3, #5
 8003560:	d928      	bls.n	80035b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2203      	movs	r2, #3
 800356c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e246      	b.n	8003a02 <HAL_DMA_Init+0x646>
 8003574:	40020010 	.word	0x40020010
 8003578:	40020028 	.word	0x40020028
 800357c:	40020040 	.word	0x40020040
 8003580:	40020058 	.word	0x40020058
 8003584:	40020070 	.word	0x40020070
 8003588:	40020088 	.word	0x40020088
 800358c:	400200a0 	.word	0x400200a0
 8003590:	400200b8 	.word	0x400200b8
 8003594:	40020410 	.word	0x40020410
 8003598:	40020428 	.word	0x40020428
 800359c:	40020440 	.word	0x40020440
 80035a0:	40020458 	.word	0x40020458
 80035a4:	40020470 	.word	0x40020470
 80035a8:	40020488 	.word	0x40020488
 80035ac:	400204a0 	.word	0x400204a0
 80035b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1c8      	bne.n	8003554 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4b83      	ldr	r3, [pc, #524]	; (80037dc <HAL_DMA_Init+0x420>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80035da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	2b04      	cmp	r3, #4
 8003606:	d107      	bne.n	8003618 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	4313      	orrs	r3, r2
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003618:	4b71      	ldr	r3, [pc, #452]	; (80037e0 <HAL_DMA_Init+0x424>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4b71      	ldr	r3, [pc, #452]	; (80037e4 <HAL_DMA_Init+0x428>)
 800361e:	4013      	ands	r3, r2
 8003620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003624:	d328      	bcc.n	8003678 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b28      	cmp	r3, #40	; 0x28
 800362c:	d903      	bls.n	8003636 <HAL_DMA_Init+0x27a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b2e      	cmp	r3, #46	; 0x2e
 8003634:	d917      	bls.n	8003666 <HAL_DMA_Init+0x2aa>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b3e      	cmp	r3, #62	; 0x3e
 800363c:	d903      	bls.n	8003646 <HAL_DMA_Init+0x28a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b42      	cmp	r3, #66	; 0x42
 8003644:	d90f      	bls.n	8003666 <HAL_DMA_Init+0x2aa>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b46      	cmp	r3, #70	; 0x46
 800364c:	d903      	bls.n	8003656 <HAL_DMA_Init+0x29a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b48      	cmp	r3, #72	; 0x48
 8003654:	d907      	bls.n	8003666 <HAL_DMA_Init+0x2aa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b4e      	cmp	r3, #78	; 0x4e
 800365c:	d905      	bls.n	800366a <HAL_DMA_Init+0x2ae>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b52      	cmp	r3, #82	; 0x52
 8003664:	d801      	bhi.n	800366a <HAL_DMA_Init+0x2ae>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <HAL_DMA_Init+0x2b0>
 800366a:	2300      	movs	r3, #0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003676:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0307 	bic.w	r3, r3, #7
 800368e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d117      	bne.n	80036d2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00e      	beq.n	80036d2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f002 f8ed 	bl	8005894 <DMA_CheckFifoParam>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2240      	movs	r2, #64	; 0x40
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e197      	b.n	8003a02 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f002 f828 	bl	8005730 <DMA_CalcBaseAndBitshift>
 80036e0:	4603      	mov	r3, r0
 80036e2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	223f      	movs	r2, #63	; 0x3f
 80036ee:	409a      	lsls	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	e0cd      	b.n	8003892 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a3b      	ldr	r2, [pc, #236]	; (80037e8 <HAL_DMA_Init+0x42c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d022      	beq.n	8003746 <HAL_DMA_Init+0x38a>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a39      	ldr	r2, [pc, #228]	; (80037ec <HAL_DMA_Init+0x430>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01d      	beq.n	8003746 <HAL_DMA_Init+0x38a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a38      	ldr	r2, [pc, #224]	; (80037f0 <HAL_DMA_Init+0x434>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d018      	beq.n	8003746 <HAL_DMA_Init+0x38a>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a36      	ldr	r2, [pc, #216]	; (80037f4 <HAL_DMA_Init+0x438>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_DMA_Init+0x38a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a35      	ldr	r2, [pc, #212]	; (80037f8 <HAL_DMA_Init+0x43c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_DMA_Init+0x38a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a33      	ldr	r2, [pc, #204]	; (80037fc <HAL_DMA_Init+0x440>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_DMA_Init+0x38a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a32      	ldr	r2, [pc, #200]	; (8003800 <HAL_DMA_Init+0x444>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_DMA_Init+0x38a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a30      	ldr	r2, [pc, #192]	; (8003804 <HAL_DMA_Init+0x448>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_DMA_Init+0x38e>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_DMA_Init+0x390>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8097 	beq.w	8003880 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a24      	ldr	r2, [pc, #144]	; (80037e8 <HAL_DMA_Init+0x42c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d021      	beq.n	80037a0 <HAL_DMA_Init+0x3e4>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a22      	ldr	r2, [pc, #136]	; (80037ec <HAL_DMA_Init+0x430>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01c      	beq.n	80037a0 <HAL_DMA_Init+0x3e4>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <HAL_DMA_Init+0x434>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d017      	beq.n	80037a0 <HAL_DMA_Init+0x3e4>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <HAL_DMA_Init+0x438>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d012      	beq.n	80037a0 <HAL_DMA_Init+0x3e4>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <HAL_DMA_Init+0x43c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00d      	beq.n	80037a0 <HAL_DMA_Init+0x3e4>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <HAL_DMA_Init+0x440>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d008      	beq.n	80037a0 <HAL_DMA_Init+0x3e4>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1b      	ldr	r2, [pc, #108]	; (8003800 <HAL_DMA_Init+0x444>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <HAL_DMA_Init+0x3e4>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a19      	ldr	r2, [pc, #100]	; (8003804 <HAL_DMA_Init+0x448>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4b12      	ldr	r3, [pc, #72]	; (8003808 <HAL_DMA_Init+0x44c>)
 80037be:	4013      	ands	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d020      	beq.n	800380c <HAL_DMA_Init+0x450>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b80      	cmp	r3, #128	; 0x80
 80037d0:	d102      	bne.n	80037d8 <HAL_DMA_Init+0x41c>
 80037d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037d6:	e01a      	b.n	800380e <HAL_DMA_Init+0x452>
 80037d8:	2300      	movs	r3, #0
 80037da:	e018      	b.n	800380e <HAL_DMA_Init+0x452>
 80037dc:	fe10803f 	.word	0xfe10803f
 80037e0:	5c001000 	.word	0x5c001000
 80037e4:	ffff0000 	.word	0xffff0000
 80037e8:	58025408 	.word	0x58025408
 80037ec:	5802541c 	.word	0x5802541c
 80037f0:	58025430 	.word	0x58025430
 80037f4:	58025444 	.word	0x58025444
 80037f8:	58025458 	.word	0x58025458
 80037fc:	5802546c 	.word	0x5802546c
 8003800:	58025480 	.word	0x58025480
 8003804:	58025494 	.word	0x58025494
 8003808:	fffe000f 	.word	0xfffe000f
 800380c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68d2      	ldr	r2, [r2, #12]
 8003812:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800381c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003824:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800382c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003834:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800383c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b6e      	ldr	r3, [pc, #440]	; (8003a0c <HAL_DMA_Init+0x650>)
 8003854:	4413      	add	r3, r2
 8003856:	4a6e      	ldr	r2, [pc, #440]	; (8003a10 <HAL_DMA_Init+0x654>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	009a      	lsls	r2, r3, #2
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f001 ff63 	bl	8005730 <DMA_CalcBaseAndBitshift>
 800386a:	4603      	mov	r3, r0
 800386c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	2201      	movs	r2, #1
 8003878:	409a      	lsls	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	e008      	b.n	8003892 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2240      	movs	r2, #64	; 0x40
 8003884:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2203      	movs	r2, #3
 800388a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e0b7      	b.n	8003a02 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a5f      	ldr	r2, [pc, #380]	; (8003a14 <HAL_DMA_Init+0x658>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d072      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a5d      	ldr	r2, [pc, #372]	; (8003a18 <HAL_DMA_Init+0x65c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d06d      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a5c      	ldr	r2, [pc, #368]	; (8003a1c <HAL_DMA_Init+0x660>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d068      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a5a      	ldr	r2, [pc, #360]	; (8003a20 <HAL_DMA_Init+0x664>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d063      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a59      	ldr	r2, [pc, #356]	; (8003a24 <HAL_DMA_Init+0x668>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d05e      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a57      	ldr	r2, [pc, #348]	; (8003a28 <HAL_DMA_Init+0x66c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d059      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a56      	ldr	r2, [pc, #344]	; (8003a2c <HAL_DMA_Init+0x670>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d054      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a54      	ldr	r2, [pc, #336]	; (8003a30 <HAL_DMA_Init+0x674>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d04f      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a53      	ldr	r2, [pc, #332]	; (8003a34 <HAL_DMA_Init+0x678>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04a      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a51      	ldr	r2, [pc, #324]	; (8003a38 <HAL_DMA_Init+0x67c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d045      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a50      	ldr	r2, [pc, #320]	; (8003a3c <HAL_DMA_Init+0x680>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d040      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a4e      	ldr	r2, [pc, #312]	; (8003a40 <HAL_DMA_Init+0x684>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d03b      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a4d      	ldr	r2, [pc, #308]	; (8003a44 <HAL_DMA_Init+0x688>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d036      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a4b      	ldr	r2, [pc, #300]	; (8003a48 <HAL_DMA_Init+0x68c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d031      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a4a      	ldr	r2, [pc, #296]	; (8003a4c <HAL_DMA_Init+0x690>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d02c      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a48      	ldr	r2, [pc, #288]	; (8003a50 <HAL_DMA_Init+0x694>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d027      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a47      	ldr	r2, [pc, #284]	; (8003a54 <HAL_DMA_Init+0x698>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a45      	ldr	r2, [pc, #276]	; (8003a58 <HAL_DMA_Init+0x69c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01d      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a44      	ldr	r2, [pc, #272]	; (8003a5c <HAL_DMA_Init+0x6a0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a42      	ldr	r2, [pc, #264]	; (8003a60 <HAL_DMA_Init+0x6a4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a41      	ldr	r2, [pc, #260]	; (8003a64 <HAL_DMA_Init+0x6a8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a3f      	ldr	r2, [pc, #252]	; (8003a68 <HAL_DMA_Init+0x6ac>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a3e      	ldr	r2, [pc, #248]	; (8003a6c <HAL_DMA_Init+0x6b0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a3c      	ldr	r2, [pc, #240]	; (8003a70 <HAL_DMA_Init+0x6b4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <HAL_DMA_Init+0x5ca>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_DMA_Init+0x5cc>
 8003986:	2300      	movs	r3, #0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d032      	beq.n	80039f2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f001 fffd 	bl	800598c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b80      	cmp	r3, #128	; 0x80
 8003998:	d102      	bne.n	80039a0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d010      	beq.n	80039e0 <HAL_DMA_Init+0x624>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d80c      	bhi.n	80039e0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f002 f87a 	bl	8005ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	e008      	b.n	80039f2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	a7fdabf8 	.word	0xa7fdabf8
 8003a10:	cccccccd 	.word	0xcccccccd
 8003a14:	40020010 	.word	0x40020010
 8003a18:	40020028 	.word	0x40020028
 8003a1c:	40020040 	.word	0x40020040
 8003a20:	40020058 	.word	0x40020058
 8003a24:	40020070 	.word	0x40020070
 8003a28:	40020088 	.word	0x40020088
 8003a2c:	400200a0 	.word	0x400200a0
 8003a30:	400200b8 	.word	0x400200b8
 8003a34:	40020410 	.word	0x40020410
 8003a38:	40020428 	.word	0x40020428
 8003a3c:	40020440 	.word	0x40020440
 8003a40:	40020458 	.word	0x40020458
 8003a44:	40020470 	.word	0x40020470
 8003a48:	40020488 	.word	0x40020488
 8003a4c:	400204a0 	.word	0x400204a0
 8003a50:	400204b8 	.word	0x400204b8
 8003a54:	58025408 	.word	0x58025408
 8003a58:	5802541c 	.word	0x5802541c
 8003a5c:	58025430 	.word	0x58025430
 8003a60:	58025444 	.word	0x58025444
 8003a64:	58025458 	.word	0x58025458
 8003a68:	5802546c 	.word	0x5802546c
 8003a6c:	58025480 	.word	0x58025480
 8003a70:	58025494 	.word	0x58025494

08003a74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e226      	b.n	8003ede <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_DMA_Start_IT+0x2a>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e21f      	b.n	8003ede <HAL_DMA_Start_IT+0x46a>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	f040 820a 	bne.w	8003ec8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a68      	ldr	r2, [pc, #416]	; (8003c68 <HAL_DMA_Start_IT+0x1f4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d04a      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a66      	ldr	r2, [pc, #408]	; (8003c6c <HAL_DMA_Start_IT+0x1f8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d045      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a65      	ldr	r2, [pc, #404]	; (8003c70 <HAL_DMA_Start_IT+0x1fc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d040      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a63      	ldr	r2, [pc, #396]	; (8003c74 <HAL_DMA_Start_IT+0x200>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d03b      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a62      	ldr	r2, [pc, #392]	; (8003c78 <HAL_DMA_Start_IT+0x204>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d036      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a60      	ldr	r2, [pc, #384]	; (8003c7c <HAL_DMA_Start_IT+0x208>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d031      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a5f      	ldr	r2, [pc, #380]	; (8003c80 <HAL_DMA_Start_IT+0x20c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d02c      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a5d      	ldr	r2, [pc, #372]	; (8003c84 <HAL_DMA_Start_IT+0x210>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d027      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a5c      	ldr	r2, [pc, #368]	; (8003c88 <HAL_DMA_Start_IT+0x214>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d022      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a5a      	ldr	r2, [pc, #360]	; (8003c8c <HAL_DMA_Start_IT+0x218>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01d      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a59      	ldr	r2, [pc, #356]	; (8003c90 <HAL_DMA_Start_IT+0x21c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d018      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a57      	ldr	r2, [pc, #348]	; (8003c94 <HAL_DMA_Start_IT+0x220>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a56      	ldr	r2, [pc, #344]	; (8003c98 <HAL_DMA_Start_IT+0x224>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00e      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a54      	ldr	r2, [pc, #336]	; (8003c9c <HAL_DMA_Start_IT+0x228>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d009      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a53      	ldr	r2, [pc, #332]	; (8003ca0 <HAL_DMA_Start_IT+0x22c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a51      	ldr	r2, [pc, #324]	; (8003ca4 <HAL_DMA_Start_IT+0x230>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d108      	bne.n	8003b74 <HAL_DMA_Start_IT+0x100>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e007      	b.n	8003b84 <HAL_DMA_Start_IT+0x110>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f001 fc24 	bl	80053d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a34      	ldr	r2, [pc, #208]	; (8003c68 <HAL_DMA_Start_IT+0x1f4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d04a      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a33      	ldr	r2, [pc, #204]	; (8003c6c <HAL_DMA_Start_IT+0x1f8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d045      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a31      	ldr	r2, [pc, #196]	; (8003c70 <HAL_DMA_Start_IT+0x1fc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d040      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a30      	ldr	r2, [pc, #192]	; (8003c74 <HAL_DMA_Start_IT+0x200>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d03b      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2e      	ldr	r2, [pc, #184]	; (8003c78 <HAL_DMA_Start_IT+0x204>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d036      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2d      	ldr	r2, [pc, #180]	; (8003c7c <HAL_DMA_Start_IT+0x208>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d031      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2b      	ldr	r2, [pc, #172]	; (8003c80 <HAL_DMA_Start_IT+0x20c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d02c      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2a      	ldr	r2, [pc, #168]	; (8003c84 <HAL_DMA_Start_IT+0x210>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d027      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a28      	ldr	r2, [pc, #160]	; (8003c88 <HAL_DMA_Start_IT+0x214>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d022      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a27      	ldr	r2, [pc, #156]	; (8003c8c <HAL_DMA_Start_IT+0x218>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d01d      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a25      	ldr	r2, [pc, #148]	; (8003c90 <HAL_DMA_Start_IT+0x21c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d018      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a24      	ldr	r2, [pc, #144]	; (8003c94 <HAL_DMA_Start_IT+0x220>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d013      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a22      	ldr	r2, [pc, #136]	; (8003c98 <HAL_DMA_Start_IT+0x224>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00e      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a21      	ldr	r2, [pc, #132]	; (8003c9c <HAL_DMA_Start_IT+0x228>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d009      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1f      	ldr	r2, [pc, #124]	; (8003ca0 <HAL_DMA_Start_IT+0x22c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d004      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1e      	ldr	r2, [pc, #120]	; (8003ca4 <HAL_DMA_Start_IT+0x230>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d101      	bne.n	8003c34 <HAL_DMA_Start_IT+0x1c0>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <HAL_DMA_Start_IT+0x1c2>
 8003c34:	2300      	movs	r3, #0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d036      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f023 021e 	bic.w	r2, r3, #30
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0216 	orr.w	r2, r2, #22
 8003c4c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d03e      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0208 	orr.w	r2, r2, #8
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e035      	b.n	8003cd4 <HAL_DMA_Start_IT+0x260>
 8003c68:	40020010 	.word	0x40020010
 8003c6c:	40020028 	.word	0x40020028
 8003c70:	40020040 	.word	0x40020040
 8003c74:	40020058 	.word	0x40020058
 8003c78:	40020070 	.word	0x40020070
 8003c7c:	40020088 	.word	0x40020088
 8003c80:	400200a0 	.word	0x400200a0
 8003c84:	400200b8 	.word	0x400200b8
 8003c88:	40020410 	.word	0x40020410
 8003c8c:	40020428 	.word	0x40020428
 8003c90:	40020440 	.word	0x40020440
 8003c94:	40020458 	.word	0x40020458
 8003c98:	40020470 	.word	0x40020470
 8003c9c:	40020488 	.word	0x40020488
 8003ca0:	400204a0 	.word	0x400204a0
 8003ca4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 020e 	bic.w	r2, r3, #14
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 020a 	orr.w	r2, r2, #10
 8003cba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d007      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0204 	orr.w	r2, r2, #4
 8003cd2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a83      	ldr	r2, [pc, #524]	; (8003ee8 <HAL_DMA_Start_IT+0x474>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d072      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a82      	ldr	r2, [pc, #520]	; (8003eec <HAL_DMA_Start_IT+0x478>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d06d      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a80      	ldr	r2, [pc, #512]	; (8003ef0 <HAL_DMA_Start_IT+0x47c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d068      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a7f      	ldr	r2, [pc, #508]	; (8003ef4 <HAL_DMA_Start_IT+0x480>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d063      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a7d      	ldr	r2, [pc, #500]	; (8003ef8 <HAL_DMA_Start_IT+0x484>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d05e      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a7c      	ldr	r2, [pc, #496]	; (8003efc <HAL_DMA_Start_IT+0x488>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d059      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a7a      	ldr	r2, [pc, #488]	; (8003f00 <HAL_DMA_Start_IT+0x48c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d054      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a79      	ldr	r2, [pc, #484]	; (8003f04 <HAL_DMA_Start_IT+0x490>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d04f      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a77      	ldr	r2, [pc, #476]	; (8003f08 <HAL_DMA_Start_IT+0x494>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d04a      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a76      	ldr	r2, [pc, #472]	; (8003f0c <HAL_DMA_Start_IT+0x498>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d045      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a74      	ldr	r2, [pc, #464]	; (8003f10 <HAL_DMA_Start_IT+0x49c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d040      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a73      	ldr	r2, [pc, #460]	; (8003f14 <HAL_DMA_Start_IT+0x4a0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d03b      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a71      	ldr	r2, [pc, #452]	; (8003f18 <HAL_DMA_Start_IT+0x4a4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d036      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a70      	ldr	r2, [pc, #448]	; (8003f1c <HAL_DMA_Start_IT+0x4a8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d031      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6e      	ldr	r2, [pc, #440]	; (8003f20 <HAL_DMA_Start_IT+0x4ac>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02c      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6d      	ldr	r2, [pc, #436]	; (8003f24 <HAL_DMA_Start_IT+0x4b0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d027      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a6b      	ldr	r2, [pc, #428]	; (8003f28 <HAL_DMA_Start_IT+0x4b4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d022      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a6a      	ldr	r2, [pc, #424]	; (8003f2c <HAL_DMA_Start_IT+0x4b8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d01d      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a68      	ldr	r2, [pc, #416]	; (8003f30 <HAL_DMA_Start_IT+0x4bc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d018      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a67      	ldr	r2, [pc, #412]	; (8003f34 <HAL_DMA_Start_IT+0x4c0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a65      	ldr	r2, [pc, #404]	; (8003f38 <HAL_DMA_Start_IT+0x4c4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00e      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a64      	ldr	r2, [pc, #400]	; (8003f3c <HAL_DMA_Start_IT+0x4c8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a62      	ldr	r2, [pc, #392]	; (8003f40 <HAL_DMA_Start_IT+0x4cc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a61      	ldr	r2, [pc, #388]	; (8003f44 <HAL_DMA_Start_IT+0x4d0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_DMA_Start_IT+0x354>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_DMA_Start_IT+0x356>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01a      	beq.n	8003e04 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e02:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a37      	ldr	r2, [pc, #220]	; (8003ee8 <HAL_DMA_Start_IT+0x474>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d04a      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a36      	ldr	r2, [pc, #216]	; (8003eec <HAL_DMA_Start_IT+0x478>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d045      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a34      	ldr	r2, [pc, #208]	; (8003ef0 <HAL_DMA_Start_IT+0x47c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d040      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a33      	ldr	r2, [pc, #204]	; (8003ef4 <HAL_DMA_Start_IT+0x480>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d03b      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a31      	ldr	r2, [pc, #196]	; (8003ef8 <HAL_DMA_Start_IT+0x484>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d036      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a30      	ldr	r2, [pc, #192]	; (8003efc <HAL_DMA_Start_IT+0x488>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d031      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2e      	ldr	r2, [pc, #184]	; (8003f00 <HAL_DMA_Start_IT+0x48c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d02c      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2d      	ldr	r2, [pc, #180]	; (8003f04 <HAL_DMA_Start_IT+0x490>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d027      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a2b      	ldr	r2, [pc, #172]	; (8003f08 <HAL_DMA_Start_IT+0x494>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d022      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a2a      	ldr	r2, [pc, #168]	; (8003f0c <HAL_DMA_Start_IT+0x498>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d01d      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a28      	ldr	r2, [pc, #160]	; (8003f10 <HAL_DMA_Start_IT+0x49c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d018      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a27      	ldr	r2, [pc, #156]	; (8003f14 <HAL_DMA_Start_IT+0x4a0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a25      	ldr	r2, [pc, #148]	; (8003f18 <HAL_DMA_Start_IT+0x4a4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a24      	ldr	r2, [pc, #144]	; (8003f1c <HAL_DMA_Start_IT+0x4a8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a22      	ldr	r2, [pc, #136]	; (8003f20 <HAL_DMA_Start_IT+0x4ac>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a21      	ldr	r2, [pc, #132]	; (8003f24 <HAL_DMA_Start_IT+0x4b0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d108      	bne.n	8003eb6 <HAL_DMA_Start_IT+0x442>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e012      	b.n	8003edc <HAL_DMA_Start_IT+0x468>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e009      	b.n	8003edc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40020010 	.word	0x40020010
 8003eec:	40020028 	.word	0x40020028
 8003ef0:	40020040 	.word	0x40020040
 8003ef4:	40020058 	.word	0x40020058
 8003ef8:	40020070 	.word	0x40020070
 8003efc:	40020088 	.word	0x40020088
 8003f00:	400200a0 	.word	0x400200a0
 8003f04:	400200b8 	.word	0x400200b8
 8003f08:	40020410 	.word	0x40020410
 8003f0c:	40020428 	.word	0x40020428
 8003f10:	40020440 	.word	0x40020440
 8003f14:	40020458 	.word	0x40020458
 8003f18:	40020470 	.word	0x40020470
 8003f1c:	40020488 	.word	0x40020488
 8003f20:	400204a0 	.word	0x400204a0
 8003f24:	400204b8 	.word	0x400204b8
 8003f28:	58025408 	.word	0x58025408
 8003f2c:	5802541c 	.word	0x5802541c
 8003f30:	58025430 	.word	0x58025430
 8003f34:	58025444 	.word	0x58025444
 8003f38:	58025458 	.word	0x58025458
 8003f3c:	5802546c 	.word	0x5802546c
 8003f40:	58025480 	.word	0x58025480
 8003f44:	58025494 	.word	0x58025494

08003f48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003f50:	f7fd fc60 	bl	8001814 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e2dc      	b.n	800451a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d008      	beq.n	8003f7e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2280      	movs	r2, #128	; 0x80
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e2cd      	b.n	800451a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a76      	ldr	r2, [pc, #472]	; (800415c <HAL_DMA_Abort+0x214>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d04a      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a74      	ldr	r2, [pc, #464]	; (8004160 <HAL_DMA_Abort+0x218>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d045      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a73      	ldr	r2, [pc, #460]	; (8004164 <HAL_DMA_Abort+0x21c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d040      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a71      	ldr	r2, [pc, #452]	; (8004168 <HAL_DMA_Abort+0x220>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d03b      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a70      	ldr	r2, [pc, #448]	; (800416c <HAL_DMA_Abort+0x224>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d036      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a6e      	ldr	r2, [pc, #440]	; (8004170 <HAL_DMA_Abort+0x228>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d031      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6d      	ldr	r2, [pc, #436]	; (8004174 <HAL_DMA_Abort+0x22c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d02c      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a6b      	ldr	r2, [pc, #428]	; (8004178 <HAL_DMA_Abort+0x230>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d027      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a6a      	ldr	r2, [pc, #424]	; (800417c <HAL_DMA_Abort+0x234>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d022      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a68      	ldr	r2, [pc, #416]	; (8004180 <HAL_DMA_Abort+0x238>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d01d      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a67      	ldr	r2, [pc, #412]	; (8004184 <HAL_DMA_Abort+0x23c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d018      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a65      	ldr	r2, [pc, #404]	; (8004188 <HAL_DMA_Abort+0x240>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a64      	ldr	r2, [pc, #400]	; (800418c <HAL_DMA_Abort+0x244>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00e      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a62      	ldr	r2, [pc, #392]	; (8004190 <HAL_DMA_Abort+0x248>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d009      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a61      	ldr	r2, [pc, #388]	; (8004194 <HAL_DMA_Abort+0x24c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d004      	beq.n	800401e <HAL_DMA_Abort+0xd6>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a5f      	ldr	r2, [pc, #380]	; (8004198 <HAL_DMA_Abort+0x250>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d101      	bne.n	8004022 <HAL_DMA_Abort+0xda>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <HAL_DMA_Abort+0xdc>
 8004022:	2300      	movs	r3, #0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d013      	beq.n	8004050 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 021e 	bic.w	r2, r2, #30
 8004036:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004046:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	e00a      	b.n	8004066 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 020e 	bic.w	r2, r2, #14
 800405e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a3c      	ldr	r2, [pc, #240]	; (800415c <HAL_DMA_Abort+0x214>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d072      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a3a      	ldr	r2, [pc, #232]	; (8004160 <HAL_DMA_Abort+0x218>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d06d      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a39      	ldr	r2, [pc, #228]	; (8004164 <HAL_DMA_Abort+0x21c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d068      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a37      	ldr	r2, [pc, #220]	; (8004168 <HAL_DMA_Abort+0x220>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d063      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a36      	ldr	r2, [pc, #216]	; (800416c <HAL_DMA_Abort+0x224>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d05e      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a34      	ldr	r2, [pc, #208]	; (8004170 <HAL_DMA_Abort+0x228>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d059      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a33      	ldr	r2, [pc, #204]	; (8004174 <HAL_DMA_Abort+0x22c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d054      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a31      	ldr	r2, [pc, #196]	; (8004178 <HAL_DMA_Abort+0x230>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d04f      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a30      	ldr	r2, [pc, #192]	; (800417c <HAL_DMA_Abort+0x234>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d04a      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a2e      	ldr	r2, [pc, #184]	; (8004180 <HAL_DMA_Abort+0x238>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d045      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a2d      	ldr	r2, [pc, #180]	; (8004184 <HAL_DMA_Abort+0x23c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d040      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2b      	ldr	r2, [pc, #172]	; (8004188 <HAL_DMA_Abort+0x240>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d03b      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2a      	ldr	r2, [pc, #168]	; (800418c <HAL_DMA_Abort+0x244>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d036      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a28      	ldr	r2, [pc, #160]	; (8004190 <HAL_DMA_Abort+0x248>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d031      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a27      	ldr	r2, [pc, #156]	; (8004194 <HAL_DMA_Abort+0x24c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d02c      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a25      	ldr	r2, [pc, #148]	; (8004198 <HAL_DMA_Abort+0x250>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d027      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a24      	ldr	r2, [pc, #144]	; (800419c <HAL_DMA_Abort+0x254>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d022      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a22      	ldr	r2, [pc, #136]	; (80041a0 <HAL_DMA_Abort+0x258>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01d      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a21      	ldr	r2, [pc, #132]	; (80041a4 <HAL_DMA_Abort+0x25c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d018      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <HAL_DMA_Abort+0x260>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d013      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1e      	ldr	r2, [pc, #120]	; (80041ac <HAL_DMA_Abort+0x264>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00e      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1c      	ldr	r2, [pc, #112]	; (80041b0 <HAL_DMA_Abort+0x268>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d009      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1b      	ldr	r2, [pc, #108]	; (80041b4 <HAL_DMA_Abort+0x26c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_DMA_Abort+0x20e>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a19      	ldr	r2, [pc, #100]	; (80041b8 <HAL_DMA_Abort+0x270>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d132      	bne.n	80041bc <HAL_DMA_Abort+0x274>
 8004156:	2301      	movs	r3, #1
 8004158:	e031      	b.n	80041be <HAL_DMA_Abort+0x276>
 800415a:	bf00      	nop
 800415c:	40020010 	.word	0x40020010
 8004160:	40020028 	.word	0x40020028
 8004164:	40020040 	.word	0x40020040
 8004168:	40020058 	.word	0x40020058
 800416c:	40020070 	.word	0x40020070
 8004170:	40020088 	.word	0x40020088
 8004174:	400200a0 	.word	0x400200a0
 8004178:	400200b8 	.word	0x400200b8
 800417c:	40020410 	.word	0x40020410
 8004180:	40020428 	.word	0x40020428
 8004184:	40020440 	.word	0x40020440
 8004188:	40020458 	.word	0x40020458
 800418c:	40020470 	.word	0x40020470
 8004190:	40020488 	.word	0x40020488
 8004194:	400204a0 	.word	0x400204a0
 8004198:	400204b8 	.word	0x400204b8
 800419c:	58025408 	.word	0x58025408
 80041a0:	5802541c 	.word	0x5802541c
 80041a4:	58025430 	.word	0x58025430
 80041a8:	58025444 	.word	0x58025444
 80041ac:	58025458 	.word	0x58025458
 80041b0:	5802546c 	.word	0x5802546c
 80041b4:	58025480 	.word	0x58025480
 80041b8:	58025494 	.word	0x58025494
 80041bc:	2300      	movs	r3, #0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d007      	beq.n	80041d2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a6d      	ldr	r2, [pc, #436]	; (800438c <HAL_DMA_Abort+0x444>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d04a      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a6b      	ldr	r2, [pc, #428]	; (8004390 <HAL_DMA_Abort+0x448>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d045      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a6a      	ldr	r2, [pc, #424]	; (8004394 <HAL_DMA_Abort+0x44c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d040      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a68      	ldr	r2, [pc, #416]	; (8004398 <HAL_DMA_Abort+0x450>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d03b      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a67      	ldr	r2, [pc, #412]	; (800439c <HAL_DMA_Abort+0x454>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d036      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a65      	ldr	r2, [pc, #404]	; (80043a0 <HAL_DMA_Abort+0x458>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d031      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a64      	ldr	r2, [pc, #400]	; (80043a4 <HAL_DMA_Abort+0x45c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d02c      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a62      	ldr	r2, [pc, #392]	; (80043a8 <HAL_DMA_Abort+0x460>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d027      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a61      	ldr	r2, [pc, #388]	; (80043ac <HAL_DMA_Abort+0x464>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d022      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a5f      	ldr	r2, [pc, #380]	; (80043b0 <HAL_DMA_Abort+0x468>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d01d      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a5e      	ldr	r2, [pc, #376]	; (80043b4 <HAL_DMA_Abort+0x46c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d018      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a5c      	ldr	r2, [pc, #368]	; (80043b8 <HAL_DMA_Abort+0x470>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d013      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a5b      	ldr	r2, [pc, #364]	; (80043bc <HAL_DMA_Abort+0x474>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00e      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a59      	ldr	r2, [pc, #356]	; (80043c0 <HAL_DMA_Abort+0x478>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d009      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a58      	ldr	r2, [pc, #352]	; (80043c4 <HAL_DMA_Abort+0x47c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d004      	beq.n	8004272 <HAL_DMA_Abort+0x32a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a56      	ldr	r2, [pc, #344]	; (80043c8 <HAL_DMA_Abort+0x480>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d108      	bne.n	8004284 <HAL_DMA_Abort+0x33c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0201 	bic.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	e007      	b.n	8004294 <HAL_DMA_Abort+0x34c>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004294:	e013      	b.n	80042be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004296:	f7fd fabd 	bl	8001814 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b05      	cmp	r3, #5
 80042a2:	d90c      	bls.n	80042be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2203      	movs	r2, #3
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e12d      	b.n	800451a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e5      	bne.n	8004296 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a2f      	ldr	r2, [pc, #188]	; (800438c <HAL_DMA_Abort+0x444>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d04a      	beq.n	800436a <HAL_DMA_Abort+0x422>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2d      	ldr	r2, [pc, #180]	; (8004390 <HAL_DMA_Abort+0x448>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d045      	beq.n	800436a <HAL_DMA_Abort+0x422>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2c      	ldr	r2, [pc, #176]	; (8004394 <HAL_DMA_Abort+0x44c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d040      	beq.n	800436a <HAL_DMA_Abort+0x422>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <HAL_DMA_Abort+0x450>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d03b      	beq.n	800436a <HAL_DMA_Abort+0x422>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a29      	ldr	r2, [pc, #164]	; (800439c <HAL_DMA_Abort+0x454>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d036      	beq.n	800436a <HAL_DMA_Abort+0x422>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a27      	ldr	r2, [pc, #156]	; (80043a0 <HAL_DMA_Abort+0x458>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d031      	beq.n	800436a <HAL_DMA_Abort+0x422>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a26      	ldr	r2, [pc, #152]	; (80043a4 <HAL_DMA_Abort+0x45c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d02c      	beq.n	800436a <HAL_DMA_Abort+0x422>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a24      	ldr	r2, [pc, #144]	; (80043a8 <HAL_DMA_Abort+0x460>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d027      	beq.n	800436a <HAL_DMA_Abort+0x422>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a23      	ldr	r2, [pc, #140]	; (80043ac <HAL_DMA_Abort+0x464>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d022      	beq.n	800436a <HAL_DMA_Abort+0x422>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a21      	ldr	r2, [pc, #132]	; (80043b0 <HAL_DMA_Abort+0x468>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d01d      	beq.n	800436a <HAL_DMA_Abort+0x422>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a20      	ldr	r2, [pc, #128]	; (80043b4 <HAL_DMA_Abort+0x46c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d018      	beq.n	800436a <HAL_DMA_Abort+0x422>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1e      	ldr	r2, [pc, #120]	; (80043b8 <HAL_DMA_Abort+0x470>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <HAL_DMA_Abort+0x422>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1d      	ldr	r2, [pc, #116]	; (80043bc <HAL_DMA_Abort+0x474>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00e      	beq.n	800436a <HAL_DMA_Abort+0x422>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1b      	ldr	r2, [pc, #108]	; (80043c0 <HAL_DMA_Abort+0x478>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d009      	beq.n	800436a <HAL_DMA_Abort+0x422>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1a      	ldr	r2, [pc, #104]	; (80043c4 <HAL_DMA_Abort+0x47c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d004      	beq.n	800436a <HAL_DMA_Abort+0x422>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a18      	ldr	r2, [pc, #96]	; (80043c8 <HAL_DMA_Abort+0x480>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d101      	bne.n	800436e <HAL_DMA_Abort+0x426>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <HAL_DMA_Abort+0x428>
 800436e:	2300      	movs	r3, #0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d02b      	beq.n	80043cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004378:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	223f      	movs	r2, #63	; 0x3f
 8004384:	409a      	lsls	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	609a      	str	r2, [r3, #8]
 800438a:	e02a      	b.n	80043e2 <HAL_DMA_Abort+0x49a>
 800438c:	40020010 	.word	0x40020010
 8004390:	40020028 	.word	0x40020028
 8004394:	40020040 	.word	0x40020040
 8004398:	40020058 	.word	0x40020058
 800439c:	40020070 	.word	0x40020070
 80043a0:	40020088 	.word	0x40020088
 80043a4:	400200a0 	.word	0x400200a0
 80043a8:	400200b8 	.word	0x400200b8
 80043ac:	40020410 	.word	0x40020410
 80043b0:	40020428 	.word	0x40020428
 80043b4:	40020440 	.word	0x40020440
 80043b8:	40020458 	.word	0x40020458
 80043bc:	40020470 	.word	0x40020470
 80043c0:	40020488 	.word	0x40020488
 80043c4:	400204a0 	.word	0x400204a0
 80043c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2201      	movs	r2, #1
 80043dc:	409a      	lsls	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a4f      	ldr	r2, [pc, #316]	; (8004524 <HAL_DMA_Abort+0x5dc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d072      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a4d      	ldr	r2, [pc, #308]	; (8004528 <HAL_DMA_Abort+0x5e0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d06d      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a4c      	ldr	r2, [pc, #304]	; (800452c <HAL_DMA_Abort+0x5e4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d068      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a4a      	ldr	r2, [pc, #296]	; (8004530 <HAL_DMA_Abort+0x5e8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d063      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a49      	ldr	r2, [pc, #292]	; (8004534 <HAL_DMA_Abort+0x5ec>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d05e      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a47      	ldr	r2, [pc, #284]	; (8004538 <HAL_DMA_Abort+0x5f0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d059      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a46      	ldr	r2, [pc, #280]	; (800453c <HAL_DMA_Abort+0x5f4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d054      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a44      	ldr	r2, [pc, #272]	; (8004540 <HAL_DMA_Abort+0x5f8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d04f      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a43      	ldr	r2, [pc, #268]	; (8004544 <HAL_DMA_Abort+0x5fc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d04a      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a41      	ldr	r2, [pc, #260]	; (8004548 <HAL_DMA_Abort+0x600>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d045      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a40      	ldr	r2, [pc, #256]	; (800454c <HAL_DMA_Abort+0x604>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d040      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a3e      	ldr	r2, [pc, #248]	; (8004550 <HAL_DMA_Abort+0x608>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d03b      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a3d      	ldr	r2, [pc, #244]	; (8004554 <HAL_DMA_Abort+0x60c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d036      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a3b      	ldr	r2, [pc, #236]	; (8004558 <HAL_DMA_Abort+0x610>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d031      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a3a      	ldr	r2, [pc, #232]	; (800455c <HAL_DMA_Abort+0x614>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d02c      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a38      	ldr	r2, [pc, #224]	; (8004560 <HAL_DMA_Abort+0x618>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d027      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a37      	ldr	r2, [pc, #220]	; (8004564 <HAL_DMA_Abort+0x61c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d022      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a35      	ldr	r2, [pc, #212]	; (8004568 <HAL_DMA_Abort+0x620>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01d      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a34      	ldr	r2, [pc, #208]	; (800456c <HAL_DMA_Abort+0x624>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d018      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a32      	ldr	r2, [pc, #200]	; (8004570 <HAL_DMA_Abort+0x628>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d013      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a31      	ldr	r2, [pc, #196]	; (8004574 <HAL_DMA_Abort+0x62c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00e      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2f      	ldr	r2, [pc, #188]	; (8004578 <HAL_DMA_Abort+0x630>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d009      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2e      	ldr	r2, [pc, #184]	; (800457c <HAL_DMA_Abort+0x634>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <HAL_DMA_Abort+0x58a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <HAL_DMA_Abort+0x638>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d101      	bne.n	80044d6 <HAL_DMA_Abort+0x58e>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_DMA_Abort+0x590>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d015      	beq.n	8004508 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00c      	beq.n	8004508 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004506:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40020010 	.word	0x40020010
 8004528:	40020028 	.word	0x40020028
 800452c:	40020040 	.word	0x40020040
 8004530:	40020058 	.word	0x40020058
 8004534:	40020070 	.word	0x40020070
 8004538:	40020088 	.word	0x40020088
 800453c:	400200a0 	.word	0x400200a0
 8004540:	400200b8 	.word	0x400200b8
 8004544:	40020410 	.word	0x40020410
 8004548:	40020428 	.word	0x40020428
 800454c:	40020440 	.word	0x40020440
 8004550:	40020458 	.word	0x40020458
 8004554:	40020470 	.word	0x40020470
 8004558:	40020488 	.word	0x40020488
 800455c:	400204a0 	.word	0x400204a0
 8004560:	400204b8 	.word	0x400204b8
 8004564:	58025408 	.word	0x58025408
 8004568:	5802541c 	.word	0x5802541c
 800456c:	58025430 	.word	0x58025430
 8004570:	58025444 	.word	0x58025444
 8004574:	58025458 	.word	0x58025458
 8004578:	5802546c 	.word	0x5802546c
 800457c:	58025480 	.word	0x58025480
 8004580:	58025494 	.word	0x58025494

08004584 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	; 0x28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004590:	4b67      	ldr	r3, [pc, #412]	; (8004730 <HAL_DMA_IRQHandler+0x1ac>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a67      	ldr	r2, [pc, #412]	; (8004734 <HAL_DMA_IRQHandler+0x1b0>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	0a9b      	lsrs	r3, r3, #10
 800459c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a5f      	ldr	r2, [pc, #380]	; (8004738 <HAL_DMA_IRQHandler+0x1b4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d04a      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a5d      	ldr	r2, [pc, #372]	; (800473c <HAL_DMA_IRQHandler+0x1b8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d045      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a5c      	ldr	r2, [pc, #368]	; (8004740 <HAL_DMA_IRQHandler+0x1bc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d040      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a5a      	ldr	r2, [pc, #360]	; (8004744 <HAL_DMA_IRQHandler+0x1c0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d03b      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a59      	ldr	r2, [pc, #356]	; (8004748 <HAL_DMA_IRQHandler+0x1c4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d036      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a57      	ldr	r2, [pc, #348]	; (800474c <HAL_DMA_IRQHandler+0x1c8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d031      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a56      	ldr	r2, [pc, #344]	; (8004750 <HAL_DMA_IRQHandler+0x1cc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d02c      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a54      	ldr	r2, [pc, #336]	; (8004754 <HAL_DMA_IRQHandler+0x1d0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d027      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a53      	ldr	r2, [pc, #332]	; (8004758 <HAL_DMA_IRQHandler+0x1d4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d022      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a51      	ldr	r2, [pc, #324]	; (800475c <HAL_DMA_IRQHandler+0x1d8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d01d      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a50      	ldr	r2, [pc, #320]	; (8004760 <HAL_DMA_IRQHandler+0x1dc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d018      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a4e      	ldr	r2, [pc, #312]	; (8004764 <HAL_DMA_IRQHandler+0x1e0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a4d      	ldr	r2, [pc, #308]	; (8004768 <HAL_DMA_IRQHandler+0x1e4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00e      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a4b      	ldr	r2, [pc, #300]	; (800476c <HAL_DMA_IRQHandler+0x1e8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d009      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a4a      	ldr	r2, [pc, #296]	; (8004770 <HAL_DMA_IRQHandler+0x1ec>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_DMA_IRQHandler+0xd2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a48      	ldr	r2, [pc, #288]	; (8004774 <HAL_DMA_IRQHandler+0x1f0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d101      	bne.n	800465a <HAL_DMA_IRQHandler+0xd6>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <HAL_DMA_IRQHandler+0xd8>
 800465a:	2300      	movs	r3, #0
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 842b 	beq.w	8004eb8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	2208      	movs	r2, #8
 800466c:	409a      	lsls	r2, r3
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80a2 	beq.w	80047bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a2e      	ldr	r2, [pc, #184]	; (8004738 <HAL_DMA_IRQHandler+0x1b4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d04a      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a2d      	ldr	r2, [pc, #180]	; (800473c <HAL_DMA_IRQHandler+0x1b8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d045      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2b      	ldr	r2, [pc, #172]	; (8004740 <HAL_DMA_IRQHandler+0x1bc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d040      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a2a      	ldr	r2, [pc, #168]	; (8004744 <HAL_DMA_IRQHandler+0x1c0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d03b      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a28      	ldr	r2, [pc, #160]	; (8004748 <HAL_DMA_IRQHandler+0x1c4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d036      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a27      	ldr	r2, [pc, #156]	; (800474c <HAL_DMA_IRQHandler+0x1c8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d031      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a25      	ldr	r2, [pc, #148]	; (8004750 <HAL_DMA_IRQHandler+0x1cc>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d02c      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a24      	ldr	r2, [pc, #144]	; (8004754 <HAL_DMA_IRQHandler+0x1d0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d027      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a22      	ldr	r2, [pc, #136]	; (8004758 <HAL_DMA_IRQHandler+0x1d4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d022      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a21      	ldr	r2, [pc, #132]	; (800475c <HAL_DMA_IRQHandler+0x1d8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d01d      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1f      	ldr	r2, [pc, #124]	; (8004760 <HAL_DMA_IRQHandler+0x1dc>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d018      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1e      	ldr	r2, [pc, #120]	; (8004764 <HAL_DMA_IRQHandler+0x1e0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d013      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <HAL_DMA_IRQHandler+0x1e4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00e      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1b      	ldr	r2, [pc, #108]	; (800476c <HAL_DMA_IRQHandler+0x1e8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d009      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a19      	ldr	r2, [pc, #100]	; (8004770 <HAL_DMA_IRQHandler+0x1ec>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d004      	beq.n	8004718 <HAL_DMA_IRQHandler+0x194>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a18      	ldr	r2, [pc, #96]	; (8004774 <HAL_DMA_IRQHandler+0x1f0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d12f      	bne.n	8004778 <HAL_DMA_IRQHandler+0x1f4>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	bf14      	ite	ne
 8004726:	2301      	movne	r3, #1
 8004728:	2300      	moveq	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	e02e      	b.n	800478c <HAL_DMA_IRQHandler+0x208>
 800472e:	bf00      	nop
 8004730:	24000000 	.word	0x24000000
 8004734:	1b4e81b5 	.word	0x1b4e81b5
 8004738:	40020010 	.word	0x40020010
 800473c:	40020028 	.word	0x40020028
 8004740:	40020040 	.word	0x40020040
 8004744:	40020058 	.word	0x40020058
 8004748:	40020070 	.word	0x40020070
 800474c:	40020088 	.word	0x40020088
 8004750:	400200a0 	.word	0x400200a0
 8004754:	400200b8 	.word	0x400200b8
 8004758:	40020410 	.word	0x40020410
 800475c:	40020428 	.word	0x40020428
 8004760:	40020440 	.word	0x40020440
 8004764:	40020458 	.word	0x40020458
 8004768:	40020470 	.word	0x40020470
 800476c:	40020488 	.word	0x40020488
 8004770:	400204a0 	.word	0x400204a0
 8004774:	400204b8 	.word	0x400204b8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	bf14      	ite	ne
 8004786:	2301      	movne	r3, #1
 8004788:	2300      	moveq	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d015      	beq.n	80047bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0204 	bic.w	r2, r2, #4
 800479e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	2208      	movs	r2, #8
 80047aa:	409a      	lsls	r2, r3
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b4:	f043 0201 	orr.w	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d06e      	beq.n	80048b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a69      	ldr	r2, [pc, #420]	; (800497c <HAL_DMA_IRQHandler+0x3f8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d04a      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a67      	ldr	r2, [pc, #412]	; (8004980 <HAL_DMA_IRQHandler+0x3fc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d045      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a66      	ldr	r2, [pc, #408]	; (8004984 <HAL_DMA_IRQHandler+0x400>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d040      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a64      	ldr	r2, [pc, #400]	; (8004988 <HAL_DMA_IRQHandler+0x404>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d03b      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a63      	ldr	r2, [pc, #396]	; (800498c <HAL_DMA_IRQHandler+0x408>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d036      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a61      	ldr	r2, [pc, #388]	; (8004990 <HAL_DMA_IRQHandler+0x40c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d031      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a60      	ldr	r2, [pc, #384]	; (8004994 <HAL_DMA_IRQHandler+0x410>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d02c      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a5e      	ldr	r2, [pc, #376]	; (8004998 <HAL_DMA_IRQHandler+0x414>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d027      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a5d      	ldr	r2, [pc, #372]	; (800499c <HAL_DMA_IRQHandler+0x418>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d022      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a5b      	ldr	r2, [pc, #364]	; (80049a0 <HAL_DMA_IRQHandler+0x41c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01d      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a5a      	ldr	r2, [pc, #360]	; (80049a4 <HAL_DMA_IRQHandler+0x420>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d018      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a58      	ldr	r2, [pc, #352]	; (80049a8 <HAL_DMA_IRQHandler+0x424>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a57      	ldr	r2, [pc, #348]	; (80049ac <HAL_DMA_IRQHandler+0x428>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00e      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a55      	ldr	r2, [pc, #340]	; (80049b0 <HAL_DMA_IRQHandler+0x42c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a54      	ldr	r2, [pc, #336]	; (80049b4 <HAL_DMA_IRQHandler+0x430>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <HAL_DMA_IRQHandler+0x2ee>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a52      	ldr	r2, [pc, #328]	; (80049b8 <HAL_DMA_IRQHandler+0x434>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d10a      	bne.n	8004888 <HAL_DMA_IRQHandler+0x304>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf14      	ite	ne
 8004880:	2301      	movne	r3, #1
 8004882:	2300      	moveq	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e003      	b.n	8004890 <HAL_DMA_IRQHandler+0x30c>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2300      	movs	r3, #0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00d      	beq.n	80048b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	2201      	movs	r2, #1
 800489e:	409a      	lsls	r2, r3
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a8:	f043 0202 	orr.w	r2, r3, #2
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	2204      	movs	r2, #4
 80048ba:	409a      	lsls	r2, r3
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 808f 	beq.w	80049e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a2c      	ldr	r2, [pc, #176]	; (800497c <HAL_DMA_IRQHandler+0x3f8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d04a      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2a      	ldr	r2, [pc, #168]	; (8004980 <HAL_DMA_IRQHandler+0x3fc>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d045      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a29      	ldr	r2, [pc, #164]	; (8004984 <HAL_DMA_IRQHandler+0x400>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d040      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a27      	ldr	r2, [pc, #156]	; (8004988 <HAL_DMA_IRQHandler+0x404>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d03b      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a26      	ldr	r2, [pc, #152]	; (800498c <HAL_DMA_IRQHandler+0x408>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d036      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a24      	ldr	r2, [pc, #144]	; (8004990 <HAL_DMA_IRQHandler+0x40c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d031      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a23      	ldr	r2, [pc, #140]	; (8004994 <HAL_DMA_IRQHandler+0x410>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d02c      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a21      	ldr	r2, [pc, #132]	; (8004998 <HAL_DMA_IRQHandler+0x414>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d027      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a20      	ldr	r2, [pc, #128]	; (800499c <HAL_DMA_IRQHandler+0x418>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d022      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1e      	ldr	r2, [pc, #120]	; (80049a0 <HAL_DMA_IRQHandler+0x41c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d01d      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1d      	ldr	r2, [pc, #116]	; (80049a4 <HAL_DMA_IRQHandler+0x420>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d018      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1b      	ldr	r2, [pc, #108]	; (80049a8 <HAL_DMA_IRQHandler+0x424>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1a      	ldr	r2, [pc, #104]	; (80049ac <HAL_DMA_IRQHandler+0x428>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00e      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a18      	ldr	r2, [pc, #96]	; (80049b0 <HAL_DMA_IRQHandler+0x42c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d009      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a17      	ldr	r2, [pc, #92]	; (80049b4 <HAL_DMA_IRQHandler+0x430>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d004      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3e2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a15      	ldr	r2, [pc, #84]	; (80049b8 <HAL_DMA_IRQHandler+0x434>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d12a      	bne.n	80049bc <HAL_DMA_IRQHandler+0x438>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	e023      	b.n	80049c4 <HAL_DMA_IRQHandler+0x440>
 800497c:	40020010 	.word	0x40020010
 8004980:	40020028 	.word	0x40020028
 8004984:	40020040 	.word	0x40020040
 8004988:	40020058 	.word	0x40020058
 800498c:	40020070 	.word	0x40020070
 8004990:	40020088 	.word	0x40020088
 8004994:	400200a0 	.word	0x400200a0
 8004998:	400200b8 	.word	0x400200b8
 800499c:	40020410 	.word	0x40020410
 80049a0:	40020428 	.word	0x40020428
 80049a4:	40020440 	.word	0x40020440
 80049a8:	40020458 	.word	0x40020458
 80049ac:	40020470 	.word	0x40020470
 80049b0:	40020488 	.word	0x40020488
 80049b4:	400204a0 	.word	0x400204a0
 80049b8:	400204b8 	.word	0x400204b8
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2300      	movs	r3, #0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00d      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	2204      	movs	r2, #4
 80049d2:	409a      	lsls	r2, r3
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049dc:	f043 0204 	orr.w	r2, r3, #4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	2210      	movs	r2, #16
 80049ee:	409a      	lsls	r2, r3
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80a6 	beq.w	8004b46 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a85      	ldr	r2, [pc, #532]	; (8004c14 <HAL_DMA_IRQHandler+0x690>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d04a      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a83      	ldr	r2, [pc, #524]	; (8004c18 <HAL_DMA_IRQHandler+0x694>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d045      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a82      	ldr	r2, [pc, #520]	; (8004c1c <HAL_DMA_IRQHandler+0x698>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d040      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a80      	ldr	r2, [pc, #512]	; (8004c20 <HAL_DMA_IRQHandler+0x69c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d03b      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a7f      	ldr	r2, [pc, #508]	; (8004c24 <HAL_DMA_IRQHandler+0x6a0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d036      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a7d      	ldr	r2, [pc, #500]	; (8004c28 <HAL_DMA_IRQHandler+0x6a4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d031      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a7c      	ldr	r2, [pc, #496]	; (8004c2c <HAL_DMA_IRQHandler+0x6a8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d02c      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a7a      	ldr	r2, [pc, #488]	; (8004c30 <HAL_DMA_IRQHandler+0x6ac>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d027      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a79      	ldr	r2, [pc, #484]	; (8004c34 <HAL_DMA_IRQHandler+0x6b0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d022      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a77      	ldr	r2, [pc, #476]	; (8004c38 <HAL_DMA_IRQHandler+0x6b4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d01d      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a76      	ldr	r2, [pc, #472]	; (8004c3c <HAL_DMA_IRQHandler+0x6b8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d018      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a74      	ldr	r2, [pc, #464]	; (8004c40 <HAL_DMA_IRQHandler+0x6bc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a73      	ldr	r2, [pc, #460]	; (8004c44 <HAL_DMA_IRQHandler+0x6c0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00e      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a71      	ldr	r2, [pc, #452]	; (8004c48 <HAL_DMA_IRQHandler+0x6c4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d009      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a70      	ldr	r2, [pc, #448]	; (8004c4c <HAL_DMA_IRQHandler+0x6c8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x516>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a6e      	ldr	r2, [pc, #440]	; (8004c50 <HAL_DMA_IRQHandler+0x6cc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d10a      	bne.n	8004ab0 <HAL_DMA_IRQHandler+0x52c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf14      	ite	ne
 8004aa8:	2301      	movne	r3, #1
 8004aaa:	2300      	moveq	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	e009      	b.n	8004ac4 <HAL_DMA_IRQHandler+0x540>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bf14      	ite	ne
 8004abe:	2301      	movne	r3, #1
 8004ac0:	2300      	moveq	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d03e      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	2210      	movs	r2, #16
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d018      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d108      	bne.n	8004b06 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d024      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	4798      	blx	r3
 8004b04:	e01f      	b.n	8004b46 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01b      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4798      	blx	r3
 8004b16:	e016      	b.n	8004b46 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d107      	bne.n	8004b36 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0208 	bic.w	r2, r2, #8
 8004b34:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	2220      	movs	r2, #32
 8004b50:	409a      	lsls	r2, r3
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 8110 	beq.w	8004d7c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a2c      	ldr	r2, [pc, #176]	; (8004c14 <HAL_DMA_IRQHandler+0x690>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d04a      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a2b      	ldr	r2, [pc, #172]	; (8004c18 <HAL_DMA_IRQHandler+0x694>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d045      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a29      	ldr	r2, [pc, #164]	; (8004c1c <HAL_DMA_IRQHandler+0x698>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d040      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a28      	ldr	r2, [pc, #160]	; (8004c20 <HAL_DMA_IRQHandler+0x69c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d03b      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a26      	ldr	r2, [pc, #152]	; (8004c24 <HAL_DMA_IRQHandler+0x6a0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d036      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a25      	ldr	r2, [pc, #148]	; (8004c28 <HAL_DMA_IRQHandler+0x6a4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d031      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a23      	ldr	r2, [pc, #140]	; (8004c2c <HAL_DMA_IRQHandler+0x6a8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d02c      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a22      	ldr	r2, [pc, #136]	; (8004c30 <HAL_DMA_IRQHandler+0x6ac>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d027      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a20      	ldr	r2, [pc, #128]	; (8004c34 <HAL_DMA_IRQHandler+0x6b0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d022      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1f      	ldr	r2, [pc, #124]	; (8004c38 <HAL_DMA_IRQHandler+0x6b4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d01d      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <HAL_DMA_IRQHandler+0x6b8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d018      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1c      	ldr	r2, [pc, #112]	; (8004c40 <HAL_DMA_IRQHandler+0x6bc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d013      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <HAL_DMA_IRQHandler+0x6c0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00e      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a19      	ldr	r2, [pc, #100]	; (8004c48 <HAL_DMA_IRQHandler+0x6c4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <HAL_DMA_IRQHandler+0x6c8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x678>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a16      	ldr	r2, [pc, #88]	; (8004c50 <HAL_DMA_IRQHandler+0x6cc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d12b      	bne.n	8004c54 <HAL_DMA_IRQHandler+0x6d0>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	bf14      	ite	ne
 8004c0a:	2301      	movne	r3, #1
 8004c0c:	2300      	moveq	r3, #0
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	e02a      	b.n	8004c68 <HAL_DMA_IRQHandler+0x6e4>
 8004c12:	bf00      	nop
 8004c14:	40020010 	.word	0x40020010
 8004c18:	40020028 	.word	0x40020028
 8004c1c:	40020040 	.word	0x40020040
 8004c20:	40020058 	.word	0x40020058
 8004c24:	40020070 	.word	0x40020070
 8004c28:	40020088 	.word	0x40020088
 8004c2c:	400200a0 	.word	0x400200a0
 8004c30:	400200b8 	.word	0x400200b8
 8004c34:	40020410 	.word	0x40020410
 8004c38:	40020428 	.word	0x40020428
 8004c3c:	40020440 	.word	0x40020440
 8004c40:	40020458 	.word	0x40020458
 8004c44:	40020470 	.word	0x40020470
 8004c48:	40020488 	.word	0x40020488
 8004c4c:	400204a0 	.word	0x400204a0
 8004c50:	400204b8 	.word	0x400204b8
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf14      	ite	ne
 8004c62:	2301      	movne	r3, #1
 8004c64:	2300      	moveq	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8087 	beq.w	8004d7c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c72:	f003 031f 	and.w	r3, r3, #31
 8004c76:	2220      	movs	r2, #32
 8004c78:	409a      	lsls	r2, r3
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d139      	bne.n	8004cfe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0216 	bic.w	r2, r2, #22
 8004c98:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ca8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d103      	bne.n	8004cba <HAL_DMA_IRQHandler+0x736>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0208 	bic.w	r2, r2, #8
 8004cc8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	223f      	movs	r2, #63	; 0x3f
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 834a 	beq.w	8005388 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	4798      	blx	r3
          }
          return;
 8004cfc:	e344      	b.n	8005388 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d018      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d108      	bne.n	8004d2c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d02c      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	4798      	blx	r3
 8004d2a:	e027      	b.n	8004d7c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d023      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4798      	blx	r3
 8004d3c:	e01e      	b.n	8004d7c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10f      	bne.n	8004d6c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0210 	bic.w	r2, r2, #16
 8004d5a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 8306 	beq.w	8005392 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 8088 	beq.w	8004ea4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2204      	movs	r2, #4
 8004d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a7a      	ldr	r2, [pc, #488]	; (8004f8c <HAL_DMA_IRQHandler+0xa08>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d04a      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a79      	ldr	r2, [pc, #484]	; (8004f90 <HAL_DMA_IRQHandler+0xa0c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d045      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a77      	ldr	r2, [pc, #476]	; (8004f94 <HAL_DMA_IRQHandler+0xa10>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d040      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a76      	ldr	r2, [pc, #472]	; (8004f98 <HAL_DMA_IRQHandler+0xa14>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d03b      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a74      	ldr	r2, [pc, #464]	; (8004f9c <HAL_DMA_IRQHandler+0xa18>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d036      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a73      	ldr	r2, [pc, #460]	; (8004fa0 <HAL_DMA_IRQHandler+0xa1c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d031      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a71      	ldr	r2, [pc, #452]	; (8004fa4 <HAL_DMA_IRQHandler+0xa20>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d02c      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a70      	ldr	r2, [pc, #448]	; (8004fa8 <HAL_DMA_IRQHandler+0xa24>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d027      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a6e      	ldr	r2, [pc, #440]	; (8004fac <HAL_DMA_IRQHandler+0xa28>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d022      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a6d      	ldr	r2, [pc, #436]	; (8004fb0 <HAL_DMA_IRQHandler+0xa2c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d01d      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a6b      	ldr	r2, [pc, #428]	; (8004fb4 <HAL_DMA_IRQHandler+0xa30>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d018      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a6a      	ldr	r2, [pc, #424]	; (8004fb8 <HAL_DMA_IRQHandler+0xa34>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d013      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a68      	ldr	r2, [pc, #416]	; (8004fbc <HAL_DMA_IRQHandler+0xa38>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00e      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a67      	ldr	r2, [pc, #412]	; (8004fc0 <HAL_DMA_IRQHandler+0xa3c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d009      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a65      	ldr	r2, [pc, #404]	; (8004fc4 <HAL_DMA_IRQHandler+0xa40>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x8b8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a64      	ldr	r2, [pc, #400]	; (8004fc8 <HAL_DMA_IRQHandler+0xa44>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d108      	bne.n	8004e4e <HAL_DMA_IRQHandler+0x8ca>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0201 	bic.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	e007      	b.n	8004e5e <HAL_DMA_IRQHandler+0x8da>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3301      	adds	r3, #1
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d307      	bcc.n	8004e7a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f2      	bne.n	8004e5e <HAL_DMA_IRQHandler+0x8da>
 8004e78:	e000      	b.n	8004e7c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e7a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d004      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2203      	movs	r2, #3
 8004e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004e92:	e003      	b.n	8004e9c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8272 	beq.w	8005392 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	4798      	blx	r3
 8004eb6:	e26c      	b.n	8005392 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a43      	ldr	r2, [pc, #268]	; (8004fcc <HAL_DMA_IRQHandler+0xa48>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d022      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x984>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a42      	ldr	r2, [pc, #264]	; (8004fd0 <HAL_DMA_IRQHandler+0xa4c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d01d      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x984>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a40      	ldr	r2, [pc, #256]	; (8004fd4 <HAL_DMA_IRQHandler+0xa50>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d018      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x984>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a3f      	ldr	r2, [pc, #252]	; (8004fd8 <HAL_DMA_IRQHandler+0xa54>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d013      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x984>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a3d      	ldr	r2, [pc, #244]	; (8004fdc <HAL_DMA_IRQHandler+0xa58>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00e      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x984>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a3c      	ldr	r2, [pc, #240]	; (8004fe0 <HAL_DMA_IRQHandler+0xa5c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d009      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x984>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a3a      	ldr	r2, [pc, #232]	; (8004fe4 <HAL_DMA_IRQHandler+0xa60>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d004      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x984>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a39      	ldr	r2, [pc, #228]	; (8004fe8 <HAL_DMA_IRQHandler+0xa64>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d101      	bne.n	8004f0c <HAL_DMA_IRQHandler+0x988>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <HAL_DMA_IRQHandler+0x98a>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 823f 	beq.w	8005392 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	2204      	movs	r2, #4
 8004f26:	409a      	lsls	r2, r3
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 80cd 	beq.w	80050cc <HAL_DMA_IRQHandler+0xb48>
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 80c7 	beq.w	80050cc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	2204      	movs	r2, #4
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d049      	beq.n	8004fec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d109      	bne.n	8004f76 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 8210 	beq.w	800538c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f74:	e20a      	b.n	800538c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8206 	beq.w	800538c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f88:	e200      	b.n	800538c <HAL_DMA_IRQHandler+0xe08>
 8004f8a:	bf00      	nop
 8004f8c:	40020010 	.word	0x40020010
 8004f90:	40020028 	.word	0x40020028
 8004f94:	40020040 	.word	0x40020040
 8004f98:	40020058 	.word	0x40020058
 8004f9c:	40020070 	.word	0x40020070
 8004fa0:	40020088 	.word	0x40020088
 8004fa4:	400200a0 	.word	0x400200a0
 8004fa8:	400200b8 	.word	0x400200b8
 8004fac:	40020410 	.word	0x40020410
 8004fb0:	40020428 	.word	0x40020428
 8004fb4:	40020440 	.word	0x40020440
 8004fb8:	40020458 	.word	0x40020458
 8004fbc:	40020470 	.word	0x40020470
 8004fc0:	40020488 	.word	0x40020488
 8004fc4:	400204a0 	.word	0x400204a0
 8004fc8:	400204b8 	.word	0x400204b8
 8004fcc:	58025408 	.word	0x58025408
 8004fd0:	5802541c 	.word	0x5802541c
 8004fd4:	58025430 	.word	0x58025430
 8004fd8:	58025444 	.word	0x58025444
 8004fdc:	58025458 	.word	0x58025458
 8004fe0:	5802546c 	.word	0x5802546c
 8004fe4:	58025480 	.word	0x58025480
 8004fe8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d160      	bne.n	80050b8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a7f      	ldr	r2, [pc, #508]	; (80051f8 <HAL_DMA_IRQHandler+0xc74>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d04a      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a7d      	ldr	r2, [pc, #500]	; (80051fc <HAL_DMA_IRQHandler+0xc78>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d045      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a7c      	ldr	r2, [pc, #496]	; (8005200 <HAL_DMA_IRQHandler+0xc7c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d040      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a7a      	ldr	r2, [pc, #488]	; (8005204 <HAL_DMA_IRQHandler+0xc80>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d03b      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a79      	ldr	r2, [pc, #484]	; (8005208 <HAL_DMA_IRQHandler+0xc84>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d036      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a77      	ldr	r2, [pc, #476]	; (800520c <HAL_DMA_IRQHandler+0xc88>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d031      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a76      	ldr	r2, [pc, #472]	; (8005210 <HAL_DMA_IRQHandler+0xc8c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d02c      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a74      	ldr	r2, [pc, #464]	; (8005214 <HAL_DMA_IRQHandler+0xc90>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d027      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a73      	ldr	r2, [pc, #460]	; (8005218 <HAL_DMA_IRQHandler+0xc94>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d022      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a71      	ldr	r2, [pc, #452]	; (800521c <HAL_DMA_IRQHandler+0xc98>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d01d      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a70      	ldr	r2, [pc, #448]	; (8005220 <HAL_DMA_IRQHandler+0xc9c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d018      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a6e      	ldr	r2, [pc, #440]	; (8005224 <HAL_DMA_IRQHandler+0xca0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a6d      	ldr	r2, [pc, #436]	; (8005228 <HAL_DMA_IRQHandler+0xca4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00e      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a6b      	ldr	r2, [pc, #428]	; (800522c <HAL_DMA_IRQHandler+0xca8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d009      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a6a      	ldr	r2, [pc, #424]	; (8005230 <HAL_DMA_IRQHandler+0xcac>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d004      	beq.n	8005096 <HAL_DMA_IRQHandler+0xb12>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a68      	ldr	r2, [pc, #416]	; (8005234 <HAL_DMA_IRQHandler+0xcb0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d108      	bne.n	80050a8 <HAL_DMA_IRQHandler+0xb24>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0208 	bic.w	r2, r2, #8
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	e007      	b.n	80050b8 <HAL_DMA_IRQHandler+0xb34>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0204 	bic.w	r2, r2, #4
 80050b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8165 	beq.w	800538c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050ca:	e15f      	b.n	800538c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	2202      	movs	r2, #2
 80050d6:	409a      	lsls	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 80c5 	beq.w	800526c <HAL_DMA_IRQHandler+0xce8>
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80bf 	beq.w	800526c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f2:	f003 031f 	and.w	r3, r3, #31
 80050f6:	2202      	movs	r2, #2
 80050f8:	409a      	lsls	r2, r3
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d018      	beq.n	800513a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d109      	bne.n	8005126 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 813a 	beq.w	8005390 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005124:	e134      	b.n	8005390 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 8130 	beq.w	8005390 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005138:	e12a      	b.n	8005390 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	f040 8089 	bne.w	8005258 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a2b      	ldr	r2, [pc, #172]	; (80051f8 <HAL_DMA_IRQHandler+0xc74>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d04a      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a29      	ldr	r2, [pc, #164]	; (80051fc <HAL_DMA_IRQHandler+0xc78>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d045      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a28      	ldr	r2, [pc, #160]	; (8005200 <HAL_DMA_IRQHandler+0xc7c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d040      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a26      	ldr	r2, [pc, #152]	; (8005204 <HAL_DMA_IRQHandler+0xc80>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d03b      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a25      	ldr	r2, [pc, #148]	; (8005208 <HAL_DMA_IRQHandler+0xc84>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d036      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a23      	ldr	r2, [pc, #140]	; (800520c <HAL_DMA_IRQHandler+0xc88>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d031      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a22      	ldr	r2, [pc, #136]	; (8005210 <HAL_DMA_IRQHandler+0xc8c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d02c      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a20      	ldr	r2, [pc, #128]	; (8005214 <HAL_DMA_IRQHandler+0xc90>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d027      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1f      	ldr	r2, [pc, #124]	; (8005218 <HAL_DMA_IRQHandler+0xc94>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d022      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1d      	ldr	r2, [pc, #116]	; (800521c <HAL_DMA_IRQHandler+0xc98>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01d      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1c      	ldr	r2, [pc, #112]	; (8005220 <HAL_DMA_IRQHandler+0xc9c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d018      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1a      	ldr	r2, [pc, #104]	; (8005224 <HAL_DMA_IRQHandler+0xca0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d013      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a19      	ldr	r2, [pc, #100]	; (8005228 <HAL_DMA_IRQHandler+0xca4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00e      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a17      	ldr	r2, [pc, #92]	; (800522c <HAL_DMA_IRQHandler+0xca8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d009      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a16      	ldr	r2, [pc, #88]	; (8005230 <HAL_DMA_IRQHandler+0xcac>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d004      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xc62>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a14      	ldr	r2, [pc, #80]	; (8005234 <HAL_DMA_IRQHandler+0xcb0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d128      	bne.n	8005238 <HAL_DMA_IRQHandler+0xcb4>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0214 	bic.w	r2, r2, #20
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e027      	b.n	8005248 <HAL_DMA_IRQHandler+0xcc4>
 80051f8:	40020010 	.word	0x40020010
 80051fc:	40020028 	.word	0x40020028
 8005200:	40020040 	.word	0x40020040
 8005204:	40020058 	.word	0x40020058
 8005208:	40020070 	.word	0x40020070
 800520c:	40020088 	.word	0x40020088
 8005210:	400200a0 	.word	0x400200a0
 8005214:	400200b8 	.word	0x400200b8
 8005218:	40020410 	.word	0x40020410
 800521c:	40020428 	.word	0x40020428
 8005220:	40020440 	.word	0x40020440
 8005224:	40020458 	.word	0x40020458
 8005228:	40020470 	.word	0x40020470
 800522c:	40020488 	.word	0x40020488
 8005230:	400204a0 	.word	0x400204a0
 8005234:	400204b8 	.word	0x400204b8
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 020a 	bic.w	r2, r2, #10
 8005246:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 8097 	beq.w	8005390 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800526a:	e091      	b.n	8005390 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005270:	f003 031f 	and.w	r3, r3, #31
 8005274:	2208      	movs	r2, #8
 8005276:	409a      	lsls	r2, r3
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8088 	beq.w	8005392 <HAL_DMA_IRQHandler+0xe0e>
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8082 	beq.w	8005392 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a41      	ldr	r2, [pc, #260]	; (8005398 <HAL_DMA_IRQHandler+0xe14>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d04a      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a3f      	ldr	r2, [pc, #252]	; (800539c <HAL_DMA_IRQHandler+0xe18>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d045      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a3e      	ldr	r2, [pc, #248]	; (80053a0 <HAL_DMA_IRQHandler+0xe1c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d040      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a3c      	ldr	r2, [pc, #240]	; (80053a4 <HAL_DMA_IRQHandler+0xe20>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d03b      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a3b      	ldr	r2, [pc, #236]	; (80053a8 <HAL_DMA_IRQHandler+0xe24>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d036      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a39      	ldr	r2, [pc, #228]	; (80053ac <HAL_DMA_IRQHandler+0xe28>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d031      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a38      	ldr	r2, [pc, #224]	; (80053b0 <HAL_DMA_IRQHandler+0xe2c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d02c      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a36      	ldr	r2, [pc, #216]	; (80053b4 <HAL_DMA_IRQHandler+0xe30>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d027      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a35      	ldr	r2, [pc, #212]	; (80053b8 <HAL_DMA_IRQHandler+0xe34>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d022      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a33      	ldr	r2, [pc, #204]	; (80053bc <HAL_DMA_IRQHandler+0xe38>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d01d      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a32      	ldr	r2, [pc, #200]	; (80053c0 <HAL_DMA_IRQHandler+0xe3c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d018      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a30      	ldr	r2, [pc, #192]	; (80053c4 <HAL_DMA_IRQHandler+0xe40>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a2f      	ldr	r2, [pc, #188]	; (80053c8 <HAL_DMA_IRQHandler+0xe44>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00e      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2d      	ldr	r2, [pc, #180]	; (80053cc <HAL_DMA_IRQHandler+0xe48>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d009      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a2c      	ldr	r2, [pc, #176]	; (80053d0 <HAL_DMA_IRQHandler+0xe4c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d004      	beq.n	800532e <HAL_DMA_IRQHandler+0xdaa>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a2a      	ldr	r2, [pc, #168]	; (80053d4 <HAL_DMA_IRQHandler+0xe50>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d108      	bne.n	8005340 <HAL_DMA_IRQHandler+0xdbc>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 021c 	bic.w	r2, r2, #28
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e007      	b.n	8005350 <HAL_DMA_IRQHandler+0xdcc>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 020e 	bic.w	r2, r2, #14
 800534e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005354:	f003 031f 	and.w	r3, r3, #31
 8005358:	2201      	movs	r2, #1
 800535a:	409a      	lsls	r2, r3
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d009      	beq.n	8005392 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	4798      	blx	r3
 8005386:	e004      	b.n	8005392 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005388:	bf00      	nop
 800538a:	e002      	b.n	8005392 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800538c:	bf00      	nop
 800538e:	e000      	b.n	8005392 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005390:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005392:	3728      	adds	r7, #40	; 0x28
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40020010 	.word	0x40020010
 800539c:	40020028 	.word	0x40020028
 80053a0:	40020040 	.word	0x40020040
 80053a4:	40020058 	.word	0x40020058
 80053a8:	40020070 	.word	0x40020070
 80053ac:	40020088 	.word	0x40020088
 80053b0:	400200a0 	.word	0x400200a0
 80053b4:	400200b8 	.word	0x400200b8
 80053b8:	40020410 	.word	0x40020410
 80053bc:	40020428 	.word	0x40020428
 80053c0:	40020440 	.word	0x40020440
 80053c4:	40020458 	.word	0x40020458
 80053c8:	40020470 	.word	0x40020470
 80053cc:	40020488 	.word	0x40020488
 80053d0:	400204a0 	.word	0x400204a0
 80053d4:	400204b8 	.word	0x400204b8

080053d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a7f      	ldr	r2, [pc, #508]	; (80055f4 <DMA_SetConfig+0x21c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d072      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a7d      	ldr	r2, [pc, #500]	; (80055f8 <DMA_SetConfig+0x220>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d06d      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a7c      	ldr	r2, [pc, #496]	; (80055fc <DMA_SetConfig+0x224>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d068      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a7a      	ldr	r2, [pc, #488]	; (8005600 <DMA_SetConfig+0x228>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d063      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a79      	ldr	r2, [pc, #484]	; (8005604 <DMA_SetConfig+0x22c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d05e      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a77      	ldr	r2, [pc, #476]	; (8005608 <DMA_SetConfig+0x230>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d059      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a76      	ldr	r2, [pc, #472]	; (800560c <DMA_SetConfig+0x234>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d054      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a74      	ldr	r2, [pc, #464]	; (8005610 <DMA_SetConfig+0x238>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d04f      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a73      	ldr	r2, [pc, #460]	; (8005614 <DMA_SetConfig+0x23c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d04a      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a71      	ldr	r2, [pc, #452]	; (8005618 <DMA_SetConfig+0x240>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d045      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a70      	ldr	r2, [pc, #448]	; (800561c <DMA_SetConfig+0x244>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d040      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a6e      	ldr	r2, [pc, #440]	; (8005620 <DMA_SetConfig+0x248>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d03b      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a6d      	ldr	r2, [pc, #436]	; (8005624 <DMA_SetConfig+0x24c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d036      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a6b      	ldr	r2, [pc, #428]	; (8005628 <DMA_SetConfig+0x250>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d031      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a6a      	ldr	r2, [pc, #424]	; (800562c <DMA_SetConfig+0x254>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d02c      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a68      	ldr	r2, [pc, #416]	; (8005630 <DMA_SetConfig+0x258>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d027      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a67      	ldr	r2, [pc, #412]	; (8005634 <DMA_SetConfig+0x25c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d022      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a65      	ldr	r2, [pc, #404]	; (8005638 <DMA_SetConfig+0x260>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d01d      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a64      	ldr	r2, [pc, #400]	; (800563c <DMA_SetConfig+0x264>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d018      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a62      	ldr	r2, [pc, #392]	; (8005640 <DMA_SetConfig+0x268>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a61      	ldr	r2, [pc, #388]	; (8005644 <DMA_SetConfig+0x26c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00e      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a5f      	ldr	r2, [pc, #380]	; (8005648 <DMA_SetConfig+0x270>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d009      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a5e      	ldr	r2, [pc, #376]	; (800564c <DMA_SetConfig+0x274>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d004      	beq.n	80054e2 <DMA_SetConfig+0x10a>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a5c      	ldr	r2, [pc, #368]	; (8005650 <DMA_SetConfig+0x278>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d101      	bne.n	80054e6 <DMA_SetConfig+0x10e>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <DMA_SetConfig+0x110>
 80054e6:	2300      	movs	r3, #0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00d      	beq.n	8005508 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80054f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d004      	beq.n	8005508 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005506:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a39      	ldr	r2, [pc, #228]	; (80055f4 <DMA_SetConfig+0x21c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d04a      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a38      	ldr	r2, [pc, #224]	; (80055f8 <DMA_SetConfig+0x220>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d045      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a36      	ldr	r2, [pc, #216]	; (80055fc <DMA_SetConfig+0x224>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d040      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a35      	ldr	r2, [pc, #212]	; (8005600 <DMA_SetConfig+0x228>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d03b      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a33      	ldr	r2, [pc, #204]	; (8005604 <DMA_SetConfig+0x22c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d036      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a32      	ldr	r2, [pc, #200]	; (8005608 <DMA_SetConfig+0x230>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d031      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a30      	ldr	r2, [pc, #192]	; (800560c <DMA_SetConfig+0x234>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d02c      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a2f      	ldr	r2, [pc, #188]	; (8005610 <DMA_SetConfig+0x238>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d027      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2d      	ldr	r2, [pc, #180]	; (8005614 <DMA_SetConfig+0x23c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d022      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a2c      	ldr	r2, [pc, #176]	; (8005618 <DMA_SetConfig+0x240>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d01d      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2a      	ldr	r2, [pc, #168]	; (800561c <DMA_SetConfig+0x244>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d018      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a29      	ldr	r2, [pc, #164]	; (8005620 <DMA_SetConfig+0x248>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d013      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a27      	ldr	r2, [pc, #156]	; (8005624 <DMA_SetConfig+0x24c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00e      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a26      	ldr	r2, [pc, #152]	; (8005628 <DMA_SetConfig+0x250>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d009      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a24      	ldr	r2, [pc, #144]	; (800562c <DMA_SetConfig+0x254>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d004      	beq.n	80055a8 <DMA_SetConfig+0x1d0>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a23      	ldr	r2, [pc, #140]	; (8005630 <DMA_SetConfig+0x258>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d101      	bne.n	80055ac <DMA_SetConfig+0x1d4>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <DMA_SetConfig+0x1d6>
 80055ac:	2300      	movs	r3, #0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d059      	beq.n	8005666 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	223f      	movs	r2, #63	; 0x3f
 80055bc:	409a      	lsls	r2, r3
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d138      	bne.n	8005654 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80055f2:	e086      	b.n	8005702 <DMA_SetConfig+0x32a>
 80055f4:	40020010 	.word	0x40020010
 80055f8:	40020028 	.word	0x40020028
 80055fc:	40020040 	.word	0x40020040
 8005600:	40020058 	.word	0x40020058
 8005604:	40020070 	.word	0x40020070
 8005608:	40020088 	.word	0x40020088
 800560c:	400200a0 	.word	0x400200a0
 8005610:	400200b8 	.word	0x400200b8
 8005614:	40020410 	.word	0x40020410
 8005618:	40020428 	.word	0x40020428
 800561c:	40020440 	.word	0x40020440
 8005620:	40020458 	.word	0x40020458
 8005624:	40020470 	.word	0x40020470
 8005628:	40020488 	.word	0x40020488
 800562c:	400204a0 	.word	0x400204a0
 8005630:	400204b8 	.word	0x400204b8
 8005634:	58025408 	.word	0x58025408
 8005638:	5802541c 	.word	0x5802541c
 800563c:	58025430 	.word	0x58025430
 8005640:	58025444 	.word	0x58025444
 8005644:	58025458 	.word	0x58025458
 8005648:	5802546c 	.word	0x5802546c
 800564c:	58025480 	.word	0x58025480
 8005650:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	60da      	str	r2, [r3, #12]
}
 8005664:	e04d      	b.n	8005702 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a29      	ldr	r2, [pc, #164]	; (8005710 <DMA_SetConfig+0x338>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d022      	beq.n	80056b6 <DMA_SetConfig+0x2de>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a27      	ldr	r2, [pc, #156]	; (8005714 <DMA_SetConfig+0x33c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d01d      	beq.n	80056b6 <DMA_SetConfig+0x2de>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a26      	ldr	r2, [pc, #152]	; (8005718 <DMA_SetConfig+0x340>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d018      	beq.n	80056b6 <DMA_SetConfig+0x2de>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a24      	ldr	r2, [pc, #144]	; (800571c <DMA_SetConfig+0x344>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <DMA_SetConfig+0x2de>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a23      	ldr	r2, [pc, #140]	; (8005720 <DMA_SetConfig+0x348>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00e      	beq.n	80056b6 <DMA_SetConfig+0x2de>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a21      	ldr	r2, [pc, #132]	; (8005724 <DMA_SetConfig+0x34c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d009      	beq.n	80056b6 <DMA_SetConfig+0x2de>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a20      	ldr	r2, [pc, #128]	; (8005728 <DMA_SetConfig+0x350>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d004      	beq.n	80056b6 <DMA_SetConfig+0x2de>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1e      	ldr	r2, [pc, #120]	; (800572c <DMA_SetConfig+0x354>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d101      	bne.n	80056ba <DMA_SetConfig+0x2e2>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <DMA_SetConfig+0x2e4>
 80056ba:	2300      	movs	r3, #0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d020      	beq.n	8005702 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	2201      	movs	r2, #1
 80056ca:	409a      	lsls	r2, r3
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b40      	cmp	r3, #64	; 0x40
 80056de:	d108      	bne.n	80056f2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	60da      	str	r2, [r3, #12]
}
 80056f0:	e007      	b.n	8005702 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	60da      	str	r2, [r3, #12]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	58025408 	.word	0x58025408
 8005714:	5802541c 	.word	0x5802541c
 8005718:	58025430 	.word	0x58025430
 800571c:	58025444 	.word	0x58025444
 8005720:	58025458 	.word	0x58025458
 8005724:	5802546c 	.word	0x5802546c
 8005728:	58025480 	.word	0x58025480
 800572c:	58025494 	.word	0x58025494

08005730 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a42      	ldr	r2, [pc, #264]	; (8005848 <DMA_CalcBaseAndBitshift+0x118>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d04a      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a41      	ldr	r2, [pc, #260]	; (800584c <DMA_CalcBaseAndBitshift+0x11c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d045      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a3f      	ldr	r2, [pc, #252]	; (8005850 <DMA_CalcBaseAndBitshift+0x120>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d040      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3e      	ldr	r2, [pc, #248]	; (8005854 <DMA_CalcBaseAndBitshift+0x124>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d03b      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a3c      	ldr	r2, [pc, #240]	; (8005858 <DMA_CalcBaseAndBitshift+0x128>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d036      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a3b      	ldr	r2, [pc, #236]	; (800585c <DMA_CalcBaseAndBitshift+0x12c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d031      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a39      	ldr	r2, [pc, #228]	; (8005860 <DMA_CalcBaseAndBitshift+0x130>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d02c      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a38      	ldr	r2, [pc, #224]	; (8005864 <DMA_CalcBaseAndBitshift+0x134>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d027      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a36      	ldr	r2, [pc, #216]	; (8005868 <DMA_CalcBaseAndBitshift+0x138>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d022      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a35      	ldr	r2, [pc, #212]	; (800586c <DMA_CalcBaseAndBitshift+0x13c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d01d      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a33      	ldr	r2, [pc, #204]	; (8005870 <DMA_CalcBaseAndBitshift+0x140>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d018      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a32      	ldr	r2, [pc, #200]	; (8005874 <DMA_CalcBaseAndBitshift+0x144>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a30      	ldr	r2, [pc, #192]	; (8005878 <DMA_CalcBaseAndBitshift+0x148>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00e      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a2f      	ldr	r2, [pc, #188]	; (800587c <DMA_CalcBaseAndBitshift+0x14c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d009      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2d      	ldr	r2, [pc, #180]	; (8005880 <DMA_CalcBaseAndBitshift+0x150>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xa8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a2c      	ldr	r2, [pc, #176]	; (8005884 <DMA_CalcBaseAndBitshift+0x154>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d101      	bne.n	80057dc <DMA_CalcBaseAndBitshift+0xac>
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <DMA_CalcBaseAndBitshift+0xae>
 80057dc:	2300      	movs	r3, #0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d024      	beq.n	800582c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	3b10      	subs	r3, #16
 80057ea:	4a27      	ldr	r2, [pc, #156]	; (8005888 <DMA_CalcBaseAndBitshift+0x158>)
 80057ec:	fba2 2303 	umull	r2, r3, r2, r3
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	4a24      	ldr	r2, [pc, #144]	; (800588c <DMA_CalcBaseAndBitshift+0x15c>)
 80057fc:	5cd3      	ldrb	r3, [r2, r3]
 80057fe:	461a      	mov	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b03      	cmp	r3, #3
 8005808:	d908      	bls.n	800581c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	4b1f      	ldr	r3, [pc, #124]	; (8005890 <DMA_CalcBaseAndBitshift+0x160>)
 8005812:	4013      	ands	r3, r2
 8005814:	1d1a      	adds	r2, r3, #4
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	659a      	str	r2, [r3, #88]	; 0x58
 800581a:	e00d      	b.n	8005838 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <DMA_CalcBaseAndBitshift+0x160>)
 8005824:	4013      	ands	r3, r2
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6593      	str	r3, [r2, #88]	; 0x58
 800582a:	e005      	b.n	8005838 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	40020010 	.word	0x40020010
 800584c:	40020028 	.word	0x40020028
 8005850:	40020040 	.word	0x40020040
 8005854:	40020058 	.word	0x40020058
 8005858:	40020070 	.word	0x40020070
 800585c:	40020088 	.word	0x40020088
 8005860:	400200a0 	.word	0x400200a0
 8005864:	400200b8 	.word	0x400200b8
 8005868:	40020410 	.word	0x40020410
 800586c:	40020428 	.word	0x40020428
 8005870:	40020440 	.word	0x40020440
 8005874:	40020458 	.word	0x40020458
 8005878:	40020470 	.word	0x40020470
 800587c:	40020488 	.word	0x40020488
 8005880:	400204a0 	.word	0x400204a0
 8005884:	400204b8 	.word	0x400204b8
 8005888:	aaaaaaab 	.word	0xaaaaaaab
 800588c:	0800f624 	.word	0x0800f624
 8005890:	fffffc00 	.word	0xfffffc00

08005894 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d120      	bne.n	80058ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d858      	bhi.n	8005962 <DMA_CheckFifoParam+0xce>
 80058b0:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <DMA_CheckFifoParam+0x24>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	080058c9 	.word	0x080058c9
 80058bc:	080058db 	.word	0x080058db
 80058c0:	080058c9 	.word	0x080058c9
 80058c4:	08005963 	.word	0x08005963
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d048      	beq.n	8005966 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058d8:	e045      	b.n	8005966 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058e2:	d142      	bne.n	800596a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058e8:	e03f      	b.n	800596a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f2:	d123      	bne.n	800593c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d838      	bhi.n	800596e <DMA_CheckFifoParam+0xda>
 80058fc:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <DMA_CheckFifoParam+0x70>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	08005915 	.word	0x08005915
 8005908:	0800591b 	.word	0x0800591b
 800590c:	08005915 	.word	0x08005915
 8005910:	0800592d 	.word	0x0800592d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
        break;
 8005918:	e030      	b.n	800597c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d025      	beq.n	8005972 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800592a:	e022      	b.n	8005972 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005934:	d11f      	bne.n	8005976 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800593a:	e01c      	b.n	8005976 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	2b02      	cmp	r3, #2
 8005942:	d902      	bls.n	800594a <DMA_CheckFifoParam+0xb6>
 8005944:	2b03      	cmp	r3, #3
 8005946:	d003      	beq.n	8005950 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005948:	e018      	b.n	800597c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	73fb      	strb	r3, [r7, #15]
        break;
 800594e:	e015      	b.n	800597c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00e      	beq.n	800597a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	73fb      	strb	r3, [r7, #15]
    break;
 8005960:	e00b      	b.n	800597a <DMA_CheckFifoParam+0xe6>
        break;
 8005962:	bf00      	nop
 8005964:	e00a      	b.n	800597c <DMA_CheckFifoParam+0xe8>
        break;
 8005966:	bf00      	nop
 8005968:	e008      	b.n	800597c <DMA_CheckFifoParam+0xe8>
        break;
 800596a:	bf00      	nop
 800596c:	e006      	b.n	800597c <DMA_CheckFifoParam+0xe8>
        break;
 800596e:	bf00      	nop
 8005970:	e004      	b.n	800597c <DMA_CheckFifoParam+0xe8>
        break;
 8005972:	bf00      	nop
 8005974:	e002      	b.n	800597c <DMA_CheckFifoParam+0xe8>
        break;
 8005976:	bf00      	nop
 8005978:	e000      	b.n	800597c <DMA_CheckFifoParam+0xe8>
    break;
 800597a:	bf00      	nop
    }
  }

  return status;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop

0800598c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a38      	ldr	r2, [pc, #224]	; (8005a80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d022      	beq.n	80059ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a36      	ldr	r2, [pc, #216]	; (8005a84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01d      	beq.n	80059ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a35      	ldr	r2, [pc, #212]	; (8005a88 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d018      	beq.n	80059ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a33      	ldr	r2, [pc, #204]	; (8005a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a32      	ldr	r2, [pc, #200]	; (8005a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00e      	beq.n	80059ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a30      	ldr	r2, [pc, #192]	; (8005a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d009      	beq.n	80059ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a2f      	ldr	r2, [pc, #188]	; (8005a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d004      	beq.n	80059ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a2d      	ldr	r2, [pc, #180]	; (8005a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d101      	bne.n	80059ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01a      	beq.n	8005a2a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	3b08      	subs	r3, #8
 80059fc:	4a28      	ldr	r2, [pc, #160]	; (8005aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	091b      	lsrs	r3, r3, #4
 8005a04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4b26      	ldr	r3, [pc, #152]	; (8005aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	461a      	mov	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a24      	ldr	r2, [pc, #144]	; (8005aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005a18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 031f 	and.w	r3, r3, #31
 8005a20:	2201      	movs	r2, #1
 8005a22:	409a      	lsls	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005a28:	e024      	b.n	8005a74 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	3b10      	subs	r3, #16
 8005a32:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005a34:	fba2 2303 	umull	r2, r3, r2, r3
 8005a38:	091b      	lsrs	r3, r3, #4
 8005a3a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4a1c      	ldr	r2, [pc, #112]	; (8005ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d806      	bhi.n	8005a52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d902      	bls.n	8005a52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3308      	adds	r3, #8
 8005a50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4b18      	ldr	r3, [pc, #96]	; (8005ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a16      	ldr	r2, [pc, #88]	; (8005abc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a64:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f003 031f 	and.w	r3, r3, #31
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	409a      	lsls	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a74:	bf00      	nop
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	58025408 	.word	0x58025408
 8005a84:	5802541c 	.word	0x5802541c
 8005a88:	58025430 	.word	0x58025430
 8005a8c:	58025444 	.word	0x58025444
 8005a90:	58025458 	.word	0x58025458
 8005a94:	5802546c 	.word	0x5802546c
 8005a98:	58025480 	.word	0x58025480
 8005a9c:	58025494 	.word	0x58025494
 8005aa0:	cccccccd 	.word	0xcccccccd
 8005aa4:	16009600 	.word	0x16009600
 8005aa8:	58025880 	.word	0x58025880
 8005aac:	aaaaaaab 	.word	0xaaaaaaab
 8005ab0:	400204b8 	.word	0x400204b8
 8005ab4:	4002040f 	.word	0x4002040f
 8005ab8:	10008200 	.word	0x10008200
 8005abc:	40020880 	.word	0x40020880

08005ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d04a      	beq.n	8005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d847      	bhi.n	8005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a25      	ldr	r2, [pc, #148]	; (8005b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d022      	beq.n	8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a24      	ldr	r2, [pc, #144]	; (8005b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d01d      	beq.n	8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a22      	ldr	r2, [pc, #136]	; (8005b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d018      	beq.n	8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a21      	ldr	r2, [pc, #132]	; (8005b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1f      	ldr	r2, [pc, #124]	; (8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00e      	beq.n	8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1e      	ldr	r2, [pc, #120]	; (8005b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d009      	beq.n	8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1c      	ldr	r2, [pc, #112]	; (8005b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a1b      	ldr	r2, [pc, #108]	; (8005b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d101      	bne.n	8005b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005b30:	2300      	movs	r3, #0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4b17      	ldr	r3, [pc, #92]	; (8005b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	461a      	mov	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005b48:	671a      	str	r2, [r3, #112]	; 0x70
 8005b4a:	e009      	b.n	8005b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005b50:	4413      	add	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	461a      	mov	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a11      	ldr	r2, [pc, #68]	; (8005ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b5e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	2201      	movs	r2, #1
 8005b66:	409a      	lsls	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	58025408 	.word	0x58025408
 8005b7c:	5802541c 	.word	0x5802541c
 8005b80:	58025430 	.word	0x58025430
 8005b84:	58025444 	.word	0x58025444
 8005b88:	58025458 	.word	0x58025458
 8005b8c:	5802546c 	.word	0x5802546c
 8005b90:	58025480 	.word	0x58025480
 8005b94:	58025494 	.word	0x58025494
 8005b98:	1600963f 	.word	0x1600963f
 8005b9c:	58025940 	.word	0x58025940
 8005ba0:	1000823f 	.word	0x1000823f
 8005ba4:	40020940 	.word	0x40020940

08005ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b089      	sub	sp, #36	; 0x24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005bb6:	4b89      	ldr	r3, [pc, #548]	; (8005ddc <HAL_GPIO_Init+0x234>)
 8005bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005bba:	e194      	b.n	8005ee6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc8:	4013      	ands	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 8186 	beq.w	8005ee0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f003 0303 	and.w	r3, r3, #3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d005      	beq.n	8005bec <HAL_GPIO_Init+0x44>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d130      	bne.n	8005c4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	2203      	movs	r2, #3
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	4013      	ands	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c22:	2201      	movs	r2, #1
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	091b      	lsrs	r3, r3, #4
 8005c38:	f003 0201 	and.w	r2, r3, #1
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d017      	beq.n	8005c8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	2203      	movs	r2, #3
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d123      	bne.n	8005cde <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	08da      	lsrs	r2, r3, #3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3208      	adds	r2, #8
 8005c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	220f      	movs	r2, #15
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	691a      	ldr	r2, [r3, #16]
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	08da      	lsrs	r2, r3, #3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3208      	adds	r2, #8
 8005cd8:	69b9      	ldr	r1, [r7, #24]
 8005cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	2203      	movs	r2, #3
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f003 0203 	and.w	r2, r3, #3
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	fa02 f303 	lsl.w	r3, r2, r3
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 80e0 	beq.w	8005ee0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d20:	4b2f      	ldr	r3, [pc, #188]	; (8005de0 <HAL_GPIO_Init+0x238>)
 8005d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d26:	4a2e      	ldr	r2, [pc, #184]	; (8005de0 <HAL_GPIO_Init+0x238>)
 8005d28:	f043 0302 	orr.w	r3, r3, #2
 8005d2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005d30:	4b2b      	ldr	r3, [pc, #172]	; (8005de0 <HAL_GPIO_Init+0x238>)
 8005d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d3e:	4a29      	ldr	r2, [pc, #164]	; (8005de4 <HAL_GPIO_Init+0x23c>)
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	089b      	lsrs	r3, r3, #2
 8005d44:	3302      	adds	r3, #2
 8005d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	220f      	movs	r2, #15
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a20      	ldr	r2, [pc, #128]	; (8005de8 <HAL_GPIO_Init+0x240>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d052      	beq.n	8005e10 <HAL_GPIO_Init+0x268>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a1f      	ldr	r2, [pc, #124]	; (8005dec <HAL_GPIO_Init+0x244>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d031      	beq.n	8005dd6 <HAL_GPIO_Init+0x22e>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a1e      	ldr	r2, [pc, #120]	; (8005df0 <HAL_GPIO_Init+0x248>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d02b      	beq.n	8005dd2 <HAL_GPIO_Init+0x22a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a1d      	ldr	r2, [pc, #116]	; (8005df4 <HAL_GPIO_Init+0x24c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d025      	beq.n	8005dce <HAL_GPIO_Init+0x226>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <HAL_GPIO_Init+0x250>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d01f      	beq.n	8005dca <HAL_GPIO_Init+0x222>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <HAL_GPIO_Init+0x254>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d019      	beq.n	8005dc6 <HAL_GPIO_Init+0x21e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a1a      	ldr	r2, [pc, #104]	; (8005e00 <HAL_GPIO_Init+0x258>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d013      	beq.n	8005dc2 <HAL_GPIO_Init+0x21a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a19      	ldr	r2, [pc, #100]	; (8005e04 <HAL_GPIO_Init+0x25c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00d      	beq.n	8005dbe <HAL_GPIO_Init+0x216>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <HAL_GPIO_Init+0x260>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d007      	beq.n	8005dba <HAL_GPIO_Init+0x212>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a17      	ldr	r2, [pc, #92]	; (8005e0c <HAL_GPIO_Init+0x264>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d101      	bne.n	8005db6 <HAL_GPIO_Init+0x20e>
 8005db2:	2309      	movs	r3, #9
 8005db4:	e02d      	b.n	8005e12 <HAL_GPIO_Init+0x26a>
 8005db6:	230a      	movs	r3, #10
 8005db8:	e02b      	b.n	8005e12 <HAL_GPIO_Init+0x26a>
 8005dba:	2308      	movs	r3, #8
 8005dbc:	e029      	b.n	8005e12 <HAL_GPIO_Init+0x26a>
 8005dbe:	2307      	movs	r3, #7
 8005dc0:	e027      	b.n	8005e12 <HAL_GPIO_Init+0x26a>
 8005dc2:	2306      	movs	r3, #6
 8005dc4:	e025      	b.n	8005e12 <HAL_GPIO_Init+0x26a>
 8005dc6:	2305      	movs	r3, #5
 8005dc8:	e023      	b.n	8005e12 <HAL_GPIO_Init+0x26a>
 8005dca:	2304      	movs	r3, #4
 8005dcc:	e021      	b.n	8005e12 <HAL_GPIO_Init+0x26a>
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e01f      	b.n	8005e12 <HAL_GPIO_Init+0x26a>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e01d      	b.n	8005e12 <HAL_GPIO_Init+0x26a>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e01b      	b.n	8005e12 <HAL_GPIO_Init+0x26a>
 8005dda:	bf00      	nop
 8005ddc:	58000080 	.word	0x58000080
 8005de0:	58024400 	.word	0x58024400
 8005de4:	58000400 	.word	0x58000400
 8005de8:	58020000 	.word	0x58020000
 8005dec:	58020400 	.word	0x58020400
 8005df0:	58020800 	.word	0x58020800
 8005df4:	58020c00 	.word	0x58020c00
 8005df8:	58021000 	.word	0x58021000
 8005dfc:	58021400 	.word	0x58021400
 8005e00:	58021800 	.word	0x58021800
 8005e04:	58021c00 	.word	0x58021c00
 8005e08:	58022000 	.word	0x58022000
 8005e0c:	58022400 	.word	0x58022400
 8005e10:	2300      	movs	r3, #0
 8005e12:	69fa      	ldr	r2, [r7, #28]
 8005e14:	f002 0203 	and.w	r2, r2, #3
 8005e18:	0092      	lsls	r2, r2, #2
 8005e1a:	4093      	lsls	r3, r2
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e22:	4938      	ldr	r1, [pc, #224]	; (8005f04 <HAL_GPIO_Init+0x35c>)
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	089b      	lsrs	r3, r3, #2
 8005e28:	3302      	adds	r3, #2
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f47f ae63 	bne.w	8005bbc <HAL_GPIO_Init+0x14>
  }
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	3724      	adds	r7, #36	; 0x24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	58000400 	.word	0x58000400

08005f08 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005f10:	4a08      	ldr	r2, [pc, #32]	; (8005f34 <HAL_HSEM_FastTake+0x2c>)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3320      	adds	r3, #32
 8005f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1a:	4a07      	ldr	r2, [pc, #28]	; (8005f38 <HAL_HSEM_FastTake+0x30>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d101      	bne.n	8005f24 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	e000      	b.n	8005f26 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	58026400 	.word	0x58026400
 8005f38:	80000300 	.word	0x80000300

08005f3c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005f46:	4906      	ldr	r1, [pc, #24]	; (8005f60 <HAL_HSEM_Release+0x24>)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	58026400 	.word	0x58026400

08005f64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005f6c:	4b29      	ldr	r3, [pc, #164]	; (8006014 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	2b06      	cmp	r3, #6
 8005f76:	d00a      	beq.n	8005f8e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f78:	4b26      	ldr	r3, [pc, #152]	; (8006014 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d001      	beq.n	8005f8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e040      	b.n	800600c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e03e      	b.n	800600c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f8e:	4b21      	ldr	r3, [pc, #132]	; (8006014 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005f96:	491f      	ldr	r1, [pc, #124]	; (8006014 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f9e:	f7fb fc39 	bl	8001814 <HAL_GetTick>
 8005fa2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005fa4:	e009      	b.n	8005fba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005fa6:	f7fb fc35 	bl	8001814 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fb4:	d901      	bls.n	8005fba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e028      	b.n	800600c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005fba:	4b16      	ldr	r3, [pc, #88]	; (8006014 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc6:	d1ee      	bne.n	8005fa6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b1e      	cmp	r3, #30
 8005fcc:	d008      	beq.n	8005fe0 <HAL_PWREx_ConfigSupply+0x7c>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b2e      	cmp	r3, #46	; 0x2e
 8005fd2:	d005      	beq.n	8005fe0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b1d      	cmp	r3, #29
 8005fd8:	d002      	beq.n	8005fe0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b2d      	cmp	r3, #45	; 0x2d
 8005fde:	d114      	bne.n	800600a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005fe0:	f7fb fc18 	bl	8001814 <HAL_GetTick>
 8005fe4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005fe6:	e009      	b.n	8005ffc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005fe8:	f7fb fc14 	bl	8001814 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ff6:	d901      	bls.n	8005ffc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e007      	b.n	800600c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005ffc:	4b05      	ldr	r3, [pc, #20]	; (8006014 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006008:	d1ee      	bne.n	8005fe8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	58024800 	.word	0x58024800

08006018 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08c      	sub	sp, #48	; 0x30
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d102      	bne.n	800602c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	f000 bc1d 	b.w	8006866 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8087 	beq.w	8006148 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800603a:	4b99      	ldr	r3, [pc, #612]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006042:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006044:	4b96      	ldr	r3, [pc, #600]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 8006046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006048:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800604a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604c:	2b10      	cmp	r3, #16
 800604e:	d007      	beq.n	8006060 <HAL_RCC_OscConfig+0x48>
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	2b18      	cmp	r3, #24
 8006054:	d110      	bne.n	8006078 <HAL_RCC_OscConfig+0x60>
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d10b      	bne.n	8006078 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006060:	4b8f      	ldr	r3, [pc, #572]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d06c      	beq.n	8006146 <HAL_RCC_OscConfig+0x12e>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d168      	bne.n	8006146 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e3f6      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006080:	d106      	bne.n	8006090 <HAL_RCC_OscConfig+0x78>
 8006082:	4b87      	ldr	r3, [pc, #540]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a86      	ldr	r2, [pc, #536]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 8006088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	e02e      	b.n	80060ee <HAL_RCC_OscConfig+0xd6>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10c      	bne.n	80060b2 <HAL_RCC_OscConfig+0x9a>
 8006098:	4b81      	ldr	r3, [pc, #516]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a80      	ldr	r2, [pc, #512]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 800609e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	4b7e      	ldr	r3, [pc, #504]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a7d      	ldr	r2, [pc, #500]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80060aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	e01d      	b.n	80060ee <HAL_RCC_OscConfig+0xd6>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060ba:	d10c      	bne.n	80060d6 <HAL_RCC_OscConfig+0xbe>
 80060bc:	4b78      	ldr	r3, [pc, #480]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a77      	ldr	r2, [pc, #476]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80060c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	4b75      	ldr	r3, [pc, #468]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a74      	ldr	r2, [pc, #464]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80060ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	e00b      	b.n	80060ee <HAL_RCC_OscConfig+0xd6>
 80060d6:	4b72      	ldr	r3, [pc, #456]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a71      	ldr	r2, [pc, #452]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80060dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	4b6f      	ldr	r3, [pc, #444]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a6e      	ldr	r2, [pc, #440]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80060e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d013      	beq.n	800611e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f6:	f7fb fb8d 	bl	8001814 <HAL_GetTick>
 80060fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060fc:	e008      	b.n	8006110 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060fe:	f7fb fb89 	bl	8001814 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b64      	cmp	r3, #100	; 0x64
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e3aa      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006110:	4b63      	ldr	r3, [pc, #396]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0f0      	beq.n	80060fe <HAL_RCC_OscConfig+0xe6>
 800611c:	e014      	b.n	8006148 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611e:	f7fb fb79 	bl	8001814 <HAL_GetTick>
 8006122:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006124:	e008      	b.n	8006138 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006126:	f7fb fb75 	bl	8001814 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b64      	cmp	r3, #100	; 0x64
 8006132:	d901      	bls.n	8006138 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e396      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006138:	4b59      	ldr	r3, [pc, #356]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1f0      	bne.n	8006126 <HAL_RCC_OscConfig+0x10e>
 8006144:	e000      	b.n	8006148 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006146:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80cb 	beq.w	80062ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006156:	4b52      	ldr	r3, [pc, #328]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800615e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006160:	4b4f      	ldr	r3, [pc, #316]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 8006162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006164:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <HAL_RCC_OscConfig+0x164>
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	2b18      	cmp	r3, #24
 8006170:	d156      	bne.n	8006220 <HAL_RCC_OscConfig+0x208>
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	f003 0303 	and.w	r3, r3, #3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d151      	bne.n	8006220 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800617c:	4b48      	ldr	r3, [pc, #288]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_RCC_OscConfig+0x17c>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e368      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006194:	4b42      	ldr	r3, [pc, #264]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f023 0219 	bic.w	r2, r3, #25
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	493f      	ldr	r1, [pc, #252]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061a6:	f7fb fb35 	bl	8001814 <HAL_GetTick>
 80061aa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061ac:	e008      	b.n	80061c0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ae:	f7fb fb31 	bl	8001814 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e352      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061c0:	4b37      	ldr	r3, [pc, #220]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0f0      	beq.n	80061ae <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061cc:	f7fb fb2e 	bl	800182c <HAL_GetREVID>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d817      	bhi.n	800620a <HAL_RCC_OscConfig+0x1f2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b40      	cmp	r3, #64	; 0x40
 80061e0:	d108      	bne.n	80061f4 <HAL_RCC_OscConfig+0x1dc>
 80061e2:	4b2f      	ldr	r3, [pc, #188]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80061ea:	4a2d      	ldr	r2, [pc, #180]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80061ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061f0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061f2:	e07b      	b.n	80062ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061f4:	4b2a      	ldr	r3, [pc, #168]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	031b      	lsls	r3, r3, #12
 8006202:	4927      	ldr	r1, [pc, #156]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 8006204:	4313      	orrs	r3, r2
 8006206:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006208:	e070      	b.n	80062ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800620a:	4b25      	ldr	r3, [pc, #148]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	061b      	lsls	r3, r3, #24
 8006218:	4921      	ldr	r1, [pc, #132]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 800621a:	4313      	orrs	r3, r2
 800621c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800621e:	e065      	b.n	80062ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d048      	beq.n	80062ba <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006228:	4b1d      	ldr	r3, [pc, #116]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f023 0219 	bic.w	r2, r3, #25
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	491a      	ldr	r1, [pc, #104]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 8006236:	4313      	orrs	r3, r2
 8006238:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623a:	f7fb faeb 	bl	8001814 <HAL_GetTick>
 800623e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006240:	e008      	b.n	8006254 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006242:	f7fb fae7 	bl	8001814 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e308      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006254:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0f0      	beq.n	8006242 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006260:	f7fb fae4 	bl	800182c <HAL_GetREVID>
 8006264:	4603      	mov	r3, r0
 8006266:	f241 0203 	movw	r2, #4099	; 0x1003
 800626a:	4293      	cmp	r3, r2
 800626c:	d81a      	bhi.n	80062a4 <HAL_RCC_OscConfig+0x28c>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b40      	cmp	r3, #64	; 0x40
 8006274:	d108      	bne.n	8006288 <HAL_RCC_OscConfig+0x270>
 8006276:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800627e:	4a08      	ldr	r2, [pc, #32]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 8006280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006284:	6053      	str	r3, [r2, #4]
 8006286:	e031      	b.n	80062ec <HAL_RCC_OscConfig+0x2d4>
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	031b      	lsls	r3, r3, #12
 8006296:	4902      	ldr	r1, [pc, #8]	; (80062a0 <HAL_RCC_OscConfig+0x288>)
 8006298:	4313      	orrs	r3, r2
 800629a:	604b      	str	r3, [r1, #4]
 800629c:	e026      	b.n	80062ec <HAL_RCC_OscConfig+0x2d4>
 800629e:	bf00      	nop
 80062a0:	58024400 	.word	0x58024400
 80062a4:	4b9a      	ldr	r3, [pc, #616]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	061b      	lsls	r3, r3, #24
 80062b2:	4997      	ldr	r1, [pc, #604]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	604b      	str	r3, [r1, #4]
 80062b8:	e018      	b.n	80062ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062ba:	4b95      	ldr	r3, [pc, #596]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a94      	ldr	r2, [pc, #592]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 80062c0:	f023 0301 	bic.w	r3, r3, #1
 80062c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c6:	f7fb faa5 	bl	8001814 <HAL_GetTick>
 80062ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062cc:	e008      	b.n	80062e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062ce:	f7fb faa1 	bl	8001814 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e2c2      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062e0:	4b8b      	ldr	r3, [pc, #556]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1f0      	bne.n	80062ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0310 	and.w	r3, r3, #16
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80a9 	beq.w	800644c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062fa:	4b85      	ldr	r3, [pc, #532]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006302:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006304:	4b82      	ldr	r3, [pc, #520]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006308:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	2b08      	cmp	r3, #8
 800630e:	d007      	beq.n	8006320 <HAL_RCC_OscConfig+0x308>
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b18      	cmp	r3, #24
 8006314:	d13a      	bne.n	800638c <HAL_RCC_OscConfig+0x374>
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	2b01      	cmp	r3, #1
 800631e:	d135      	bne.n	800638c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006320:	4b7b      	ldr	r3, [pc, #492]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_RCC_OscConfig+0x320>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	2b80      	cmp	r3, #128	; 0x80
 8006332:	d001      	beq.n	8006338 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e296      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006338:	f7fb fa78 	bl	800182c <HAL_GetREVID>
 800633c:	4603      	mov	r3, r0
 800633e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006342:	4293      	cmp	r3, r2
 8006344:	d817      	bhi.n	8006376 <HAL_RCC_OscConfig+0x35e>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	2b20      	cmp	r3, #32
 800634c:	d108      	bne.n	8006360 <HAL_RCC_OscConfig+0x348>
 800634e:	4b70      	ldr	r3, [pc, #448]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006356:	4a6e      	ldr	r2, [pc, #440]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006358:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800635c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800635e:	e075      	b.n	800644c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006360:	4b6b      	ldr	r3, [pc, #428]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	069b      	lsls	r3, r3, #26
 800636e:	4968      	ldr	r1, [pc, #416]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006370:	4313      	orrs	r3, r2
 8006372:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006374:	e06a      	b.n	800644c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006376:	4b66      	ldr	r3, [pc, #408]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	061b      	lsls	r3, r3, #24
 8006384:	4962      	ldr	r1, [pc, #392]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006386:	4313      	orrs	r3, r2
 8006388:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800638a:	e05f      	b.n	800644c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d042      	beq.n	800641a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006394:	4b5e      	ldr	r3, [pc, #376]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a5d      	ldr	r2, [pc, #372]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 800639a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a0:	f7fb fa38 	bl	8001814 <HAL_GetTick>
 80063a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80063a8:	f7fb fa34 	bl	8001814 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e255      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063ba:	4b55      	ldr	r3, [pc, #340]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0f0      	beq.n	80063a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063c6:	f7fb fa31 	bl	800182c <HAL_GetREVID>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d817      	bhi.n	8006404 <HAL_RCC_OscConfig+0x3ec>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d108      	bne.n	80063ee <HAL_RCC_OscConfig+0x3d6>
 80063dc:	4b4c      	ldr	r3, [pc, #304]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80063e4:	4a4a      	ldr	r2, [pc, #296]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 80063e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063ea:	6053      	str	r3, [r2, #4]
 80063ec:	e02e      	b.n	800644c <HAL_RCC_OscConfig+0x434>
 80063ee:	4b48      	ldr	r3, [pc, #288]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	069b      	lsls	r3, r3, #26
 80063fc:	4944      	ldr	r1, [pc, #272]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	604b      	str	r3, [r1, #4]
 8006402:	e023      	b.n	800644c <HAL_RCC_OscConfig+0x434>
 8006404:	4b42      	ldr	r3, [pc, #264]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	061b      	lsls	r3, r3, #24
 8006412:	493f      	ldr	r1, [pc, #252]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006414:	4313      	orrs	r3, r2
 8006416:	60cb      	str	r3, [r1, #12]
 8006418:	e018      	b.n	800644c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800641a:	4b3d      	ldr	r3, [pc, #244]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a3c      	ldr	r2, [pc, #240]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006426:	f7fb f9f5 	bl	8001814 <HAL_GetTick>
 800642a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800642c:	e008      	b.n	8006440 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800642e:	f7fb f9f1 	bl	8001814 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e212      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006440:	4b33      	ldr	r3, [pc, #204]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1f0      	bne.n	800642e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d036      	beq.n	80064c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d019      	beq.n	8006494 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006460:	4b2b      	ldr	r3, [pc, #172]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006464:	4a2a      	ldr	r2, [pc, #168]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800646c:	f7fb f9d2 	bl	8001814 <HAL_GetTick>
 8006470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006474:	f7fb f9ce 	bl	8001814 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e1ef      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006486:	4b22      	ldr	r3, [pc, #136]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0f0      	beq.n	8006474 <HAL_RCC_OscConfig+0x45c>
 8006492:	e018      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006494:	4b1e      	ldr	r3, [pc, #120]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006498:	4a1d      	ldr	r2, [pc, #116]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 800649a:	f023 0301 	bic.w	r3, r3, #1
 800649e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a0:	f7fb f9b8 	bl	8001814 <HAL_GetTick>
 80064a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064a8:	f7fb f9b4 	bl	8001814 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e1d5      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064ba:	4b15      	ldr	r3, [pc, #84]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 80064bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f0      	bne.n	80064a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d039      	beq.n	8006546 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d01c      	beq.n	8006514 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064da:	4b0d      	ldr	r3, [pc, #52]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a0c      	ldr	r2, [pc, #48]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 80064e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064e6:	f7fb f995 	bl	8001814 <HAL_GetTick>
 80064ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064ec:	e008      	b.n	8006500 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80064ee:	f7fb f991 	bl	8001814 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e1b2      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006500:	4b03      	ldr	r3, [pc, #12]	; (8006510 <HAL_RCC_OscConfig+0x4f8>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0f0      	beq.n	80064ee <HAL_RCC_OscConfig+0x4d6>
 800650c:	e01b      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
 800650e:	bf00      	nop
 8006510:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006514:	4b9b      	ldr	r3, [pc, #620]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a9a      	ldr	r2, [pc, #616]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 800651a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800651e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006520:	f7fb f978 	bl	8001814 <HAL_GetTick>
 8006524:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006528:	f7fb f974 	bl	8001814 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e195      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800653a:	4b92      	ldr	r3, [pc, #584]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8081 	beq.w	8006656 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006554:	4b8c      	ldr	r3, [pc, #560]	; (8006788 <HAL_RCC_OscConfig+0x770>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a8b      	ldr	r2, [pc, #556]	; (8006788 <HAL_RCC_OscConfig+0x770>)
 800655a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800655e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006560:	f7fb f958 	bl	8001814 <HAL_GetTick>
 8006564:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006568:	f7fb f954 	bl	8001814 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b64      	cmp	r3, #100	; 0x64
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e175      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800657a:	4b83      	ldr	r3, [pc, #524]	; (8006788 <HAL_RCC_OscConfig+0x770>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0f0      	beq.n	8006568 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d106      	bne.n	800659c <HAL_RCC_OscConfig+0x584>
 800658e:	4b7d      	ldr	r3, [pc, #500]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006592:	4a7c      	ldr	r2, [pc, #496]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	6713      	str	r3, [r2, #112]	; 0x70
 800659a:	e02d      	b.n	80065f8 <HAL_RCC_OscConfig+0x5e0>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10c      	bne.n	80065be <HAL_RCC_OscConfig+0x5a6>
 80065a4:	4b77      	ldr	r3, [pc, #476]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80065a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a8:	4a76      	ldr	r2, [pc, #472]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80065aa:	f023 0301 	bic.w	r3, r3, #1
 80065ae:	6713      	str	r3, [r2, #112]	; 0x70
 80065b0:	4b74      	ldr	r3, [pc, #464]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80065b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b4:	4a73      	ldr	r2, [pc, #460]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80065b6:	f023 0304 	bic.w	r3, r3, #4
 80065ba:	6713      	str	r3, [r2, #112]	; 0x70
 80065bc:	e01c      	b.n	80065f8 <HAL_RCC_OscConfig+0x5e0>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b05      	cmp	r3, #5
 80065c4:	d10c      	bne.n	80065e0 <HAL_RCC_OscConfig+0x5c8>
 80065c6:	4b6f      	ldr	r3, [pc, #444]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80065c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ca:	4a6e      	ldr	r2, [pc, #440]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80065cc:	f043 0304 	orr.w	r3, r3, #4
 80065d0:	6713      	str	r3, [r2, #112]	; 0x70
 80065d2:	4b6c      	ldr	r3, [pc, #432]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80065d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d6:	4a6b      	ldr	r2, [pc, #428]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80065d8:	f043 0301 	orr.w	r3, r3, #1
 80065dc:	6713      	str	r3, [r2, #112]	; 0x70
 80065de:	e00b      	b.n	80065f8 <HAL_RCC_OscConfig+0x5e0>
 80065e0:	4b68      	ldr	r3, [pc, #416]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80065e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e4:	4a67      	ldr	r2, [pc, #412]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80065e6:	f023 0301 	bic.w	r3, r3, #1
 80065ea:	6713      	str	r3, [r2, #112]	; 0x70
 80065ec:	4b65      	ldr	r3, [pc, #404]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80065ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f0:	4a64      	ldr	r2, [pc, #400]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80065f2:	f023 0304 	bic.w	r3, r3, #4
 80065f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d015      	beq.n	800662c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006600:	f7fb f908 	bl	8001814 <HAL_GetTick>
 8006604:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006606:	e00a      	b.n	800661e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006608:	f7fb f904 	bl	8001814 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	f241 3288 	movw	r2, #5000	; 0x1388
 8006616:	4293      	cmp	r3, r2
 8006618:	d901      	bls.n	800661e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e123      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800661e:	4b59      	ldr	r3, [pc, #356]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0ee      	beq.n	8006608 <HAL_RCC_OscConfig+0x5f0>
 800662a:	e014      	b.n	8006656 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662c:	f7fb f8f2 	bl	8001814 <HAL_GetTick>
 8006630:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006632:	e00a      	b.n	800664a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006634:	f7fb f8ee 	bl	8001814 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006642:	4293      	cmp	r3, r2
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e10d      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800664a:	4b4e      	ldr	r3, [pc, #312]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 800664c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1ee      	bne.n	8006634 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 8102 	beq.w	8006864 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006660:	4b48      	ldr	r3, [pc, #288]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006668:	2b18      	cmp	r3, #24
 800666a:	f000 80bd 	beq.w	80067e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	2b02      	cmp	r3, #2
 8006674:	f040 809e 	bne.w	80067b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006678:	4b42      	ldr	r3, [pc, #264]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a41      	ldr	r2, [pc, #260]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 800667e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006684:	f7fb f8c6 	bl	8001814 <HAL_GetTick>
 8006688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800668a:	e008      	b.n	800669e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800668c:	f7fb f8c2 	bl	8001814 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e0e3      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800669e:	4b39      	ldr	r3, [pc, #228]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1f0      	bne.n	800668c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066aa:	4b36      	ldr	r3, [pc, #216]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80066ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ae:	4b37      	ldr	r3, [pc, #220]	; (800678c <HAL_RCC_OscConfig+0x774>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80066ba:	0112      	lsls	r2, r2, #4
 80066bc:	430a      	orrs	r2, r1
 80066be:	4931      	ldr	r1, [pc, #196]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	628b      	str	r3, [r1, #40]	; 0x28
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	3b01      	subs	r3, #1
 80066ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d2:	3b01      	subs	r3, #1
 80066d4:	025b      	lsls	r3, r3, #9
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066de:	3b01      	subs	r3, #1
 80066e0:	041b      	lsls	r3, r3, #16
 80066e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ec:	3b01      	subs	r3, #1
 80066ee:	061b      	lsls	r3, r3, #24
 80066f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066f4:	4923      	ldr	r1, [pc, #140]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80066fa:	4b22      	ldr	r3, [pc, #136]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	4a21      	ldr	r2, [pc, #132]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006700:	f023 0301 	bic.w	r3, r3, #1
 8006704:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006706:	4b1f      	ldr	r3, [pc, #124]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800670a:	4b21      	ldr	r3, [pc, #132]	; (8006790 <HAL_RCC_OscConfig+0x778>)
 800670c:	4013      	ands	r3, r2
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006712:	00d2      	lsls	r2, r2, #3
 8006714:	491b      	ldr	r1, [pc, #108]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006716:	4313      	orrs	r3, r2
 8006718:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800671a:	4b1a      	ldr	r3, [pc, #104]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 800671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671e:	f023 020c 	bic.w	r2, r3, #12
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	4917      	ldr	r1, [pc, #92]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006728:	4313      	orrs	r3, r2
 800672a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800672c:	4b15      	ldr	r3, [pc, #84]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	f023 0202 	bic.w	r2, r3, #2
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006738:	4912      	ldr	r1, [pc, #72]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 800673a:	4313      	orrs	r3, r2
 800673c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800673e:	4b11      	ldr	r3, [pc, #68]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	4a10      	ldr	r2, [pc, #64]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006748:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800674a:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	4a0d      	ldr	r2, [pc, #52]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006754:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006756:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	4a0a      	ldr	r2, [pc, #40]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 800675c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006760:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006762:	4b08      	ldr	r3, [pc, #32]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006766:	4a07      	ldr	r2, [pc, #28]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006768:	f043 0301 	orr.w	r3, r3, #1
 800676c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800676e:	4b05      	ldr	r3, [pc, #20]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a04      	ldr	r2, [pc, #16]	; (8006784 <HAL_RCC_OscConfig+0x76c>)
 8006774:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677a:	f7fb f84b 	bl	8001814 <HAL_GetTick>
 800677e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006780:	e011      	b.n	80067a6 <HAL_RCC_OscConfig+0x78e>
 8006782:	bf00      	nop
 8006784:	58024400 	.word	0x58024400
 8006788:	58024800 	.word	0x58024800
 800678c:	fffffc0c 	.word	0xfffffc0c
 8006790:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006794:	f7fb f83e 	bl	8001814 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e05f      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067a6:	4b32      	ldr	r3, [pc, #200]	; (8006870 <HAL_RCC_OscConfig+0x858>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCC_OscConfig+0x77c>
 80067b2:	e057      	b.n	8006864 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b4:	4b2e      	ldr	r3, [pc, #184]	; (8006870 <HAL_RCC_OscConfig+0x858>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a2d      	ldr	r2, [pc, #180]	; (8006870 <HAL_RCC_OscConfig+0x858>)
 80067ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c0:	f7fb f828 	bl	8001814 <HAL_GetTick>
 80067c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067c8:	f7fb f824 	bl	8001814 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e045      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067da:	4b25      	ldr	r3, [pc, #148]	; (8006870 <HAL_RCC_OscConfig+0x858>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f0      	bne.n	80067c8 <HAL_RCC_OscConfig+0x7b0>
 80067e6:	e03d      	b.n	8006864 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80067e8:	4b21      	ldr	r3, [pc, #132]	; (8006870 <HAL_RCC_OscConfig+0x858>)
 80067ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80067ee:	4b20      	ldr	r3, [pc, #128]	; (8006870 <HAL_RCC_OscConfig+0x858>)
 80067f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d031      	beq.n	8006860 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f003 0203 	and.w	r2, r3, #3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006806:	429a      	cmp	r2, r3
 8006808:	d12a      	bne.n	8006860 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006816:	429a      	cmp	r2, r3
 8006818:	d122      	bne.n	8006860 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006826:	429a      	cmp	r2, r3
 8006828:	d11a      	bne.n	8006860 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	0a5b      	lsrs	r3, r3, #9
 800682e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006836:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006838:	429a      	cmp	r2, r3
 800683a:	d111      	bne.n	8006860 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	0c1b      	lsrs	r3, r3, #16
 8006840:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800684a:	429a      	cmp	r2, r3
 800684c:	d108      	bne.n	8006860 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	0e1b      	lsrs	r3, r3, #24
 8006852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800685c:	429a      	cmp	r2, r3
 800685e:	d001      	beq.n	8006864 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e000      	b.n	8006866 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3730      	adds	r7, #48	; 0x30
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	58024400 	.word	0x58024400

08006874 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e19c      	b.n	8006bc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006888:	4b8a      	ldr	r3, [pc, #552]	; (8006ab4 <HAL_RCC_ClockConfig+0x240>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	429a      	cmp	r2, r3
 8006894:	d910      	bls.n	80068b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006896:	4b87      	ldr	r3, [pc, #540]	; (8006ab4 <HAL_RCC_ClockConfig+0x240>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f023 020f 	bic.w	r2, r3, #15
 800689e:	4985      	ldr	r1, [pc, #532]	; (8006ab4 <HAL_RCC_ClockConfig+0x240>)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068a6:	4b83      	ldr	r3, [pc, #524]	; (8006ab4 <HAL_RCC_ClockConfig+0x240>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d001      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e184      	b.n	8006bc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d010      	beq.n	80068e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691a      	ldr	r2, [r3, #16]
 80068c8:	4b7b      	ldr	r3, [pc, #492]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d908      	bls.n	80068e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068d4:	4b78      	ldr	r3, [pc, #480]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	4975      	ldr	r1, [pc, #468]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d010      	beq.n	8006914 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	695a      	ldr	r2, [r3, #20]
 80068f6:	4b70      	ldr	r3, [pc, #448]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068fe:	429a      	cmp	r2, r3
 8006900:	d908      	bls.n	8006914 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006902:	4b6d      	ldr	r3, [pc, #436]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	496a      	ldr	r1, [pc, #424]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 8006910:	4313      	orrs	r3, r2
 8006912:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	2b00      	cmp	r3, #0
 800691e:	d010      	beq.n	8006942 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699a      	ldr	r2, [r3, #24]
 8006924:	4b64      	ldr	r3, [pc, #400]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800692c:	429a      	cmp	r2, r3
 800692e:	d908      	bls.n	8006942 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006930:	4b61      	ldr	r3, [pc, #388]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	495e      	ldr	r1, [pc, #376]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 800693e:	4313      	orrs	r3, r2
 8006940:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b00      	cmp	r3, #0
 800694c:	d010      	beq.n	8006970 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	69da      	ldr	r2, [r3, #28]
 8006952:	4b59      	ldr	r3, [pc, #356]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800695a:	429a      	cmp	r2, r3
 800695c:	d908      	bls.n	8006970 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800695e:	4b56      	ldr	r3, [pc, #344]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	4953      	ldr	r1, [pc, #332]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 800696c:	4313      	orrs	r3, r2
 800696e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d010      	beq.n	800699e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	4b4d      	ldr	r3, [pc, #308]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	429a      	cmp	r2, r3
 800698a:	d908      	bls.n	800699e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800698c:	4b4a      	ldr	r3, [pc, #296]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f023 020f 	bic.w	r2, r3, #15
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	4947      	ldr	r1, [pc, #284]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 800699a:	4313      	orrs	r3, r2
 800699c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d055      	beq.n	8006a56 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80069aa:	4b43      	ldr	r3, [pc, #268]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	4940      	ldr	r1, [pc, #256]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d107      	bne.n	80069d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069c4:	4b3c      	ldr	r3, [pc, #240]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d121      	bne.n	8006a14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0f6      	b.n	8006bc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d107      	bne.n	80069ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069dc:	4b36      	ldr	r3, [pc, #216]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d115      	bne.n	8006a14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e0ea      	b.n	8006bc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d107      	bne.n	8006a04 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069f4:	4b30      	ldr	r3, [pc, #192]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d109      	bne.n	8006a14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0de      	b.n	8006bc2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a04:	4b2c      	ldr	r3, [pc, #176]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e0d6      	b.n	8006bc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a14:	4b28      	ldr	r3, [pc, #160]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f023 0207 	bic.w	r2, r3, #7
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	4925      	ldr	r1, [pc, #148]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a26:	f7fa fef5 	bl	8001814 <HAL_GetTick>
 8006a2a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a2c:	e00a      	b.n	8006a44 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a2e:	f7fa fef1 	bl	8001814 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e0be      	b.n	8006bc2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a44:	4b1c      	ldr	r3, [pc, #112]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d1eb      	bne.n	8006a2e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d010      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	4b14      	ldr	r3, [pc, #80]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d208      	bcs.n	8006a84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a72:	4b11      	ldr	r3, [pc, #68]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	f023 020f 	bic.w	r2, r3, #15
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	490e      	ldr	r1, [pc, #56]	; (8006ab8 <HAL_RCC_ClockConfig+0x244>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a84:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <HAL_RCC_ClockConfig+0x240>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d214      	bcs.n	8006abc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a92:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <HAL_RCC_ClockConfig+0x240>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f023 020f 	bic.w	r2, r3, #15
 8006a9a:	4906      	ldr	r1, [pc, #24]	; (8006ab4 <HAL_RCC_ClockConfig+0x240>)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa2:	4b04      	ldr	r3, [pc, #16]	; (8006ab4 <HAL_RCC_ClockConfig+0x240>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d005      	beq.n	8006abc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e086      	b.n	8006bc2 <HAL_RCC_ClockConfig+0x34e>
 8006ab4:	52002000 	.word	0x52002000
 8006ab8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d010      	beq.n	8006aea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691a      	ldr	r2, [r3, #16]
 8006acc:	4b3f      	ldr	r3, [pc, #252]	; (8006bcc <HAL_RCC_ClockConfig+0x358>)
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d208      	bcs.n	8006aea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ad8:	4b3c      	ldr	r3, [pc, #240]	; (8006bcc <HAL_RCC_ClockConfig+0x358>)
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	4939      	ldr	r1, [pc, #228]	; (8006bcc <HAL_RCC_ClockConfig+0x358>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d010      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695a      	ldr	r2, [r3, #20]
 8006afa:	4b34      	ldr	r3, [pc, #208]	; (8006bcc <HAL_RCC_ClockConfig+0x358>)
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d208      	bcs.n	8006b18 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b06:	4b31      	ldr	r3, [pc, #196]	; (8006bcc <HAL_RCC_ClockConfig+0x358>)
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	492e      	ldr	r1, [pc, #184]	; (8006bcc <HAL_RCC_ClockConfig+0x358>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0310 	and.w	r3, r3, #16
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d010      	beq.n	8006b46 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	699a      	ldr	r2, [r3, #24]
 8006b28:	4b28      	ldr	r3, [pc, #160]	; (8006bcc <HAL_RCC_ClockConfig+0x358>)
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d208      	bcs.n	8006b46 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b34:	4b25      	ldr	r3, [pc, #148]	; (8006bcc <HAL_RCC_ClockConfig+0x358>)
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	4922      	ldr	r1, [pc, #136]	; (8006bcc <HAL_RCC_ClockConfig+0x358>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d010      	beq.n	8006b74 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69da      	ldr	r2, [r3, #28]
 8006b56:	4b1d      	ldr	r3, [pc, #116]	; (8006bcc <HAL_RCC_ClockConfig+0x358>)
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d208      	bcs.n	8006b74 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006b62:	4b1a      	ldr	r3, [pc, #104]	; (8006bcc <HAL_RCC_ClockConfig+0x358>)
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	4917      	ldr	r1, [pc, #92]	; (8006bcc <HAL_RCC_ClockConfig+0x358>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b74:	f000 f834 	bl	8006be0 <HAL_RCC_GetSysClockFreq>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	4b14      	ldr	r3, [pc, #80]	; (8006bcc <HAL_RCC_ClockConfig+0x358>)
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	0a1b      	lsrs	r3, r3, #8
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	4912      	ldr	r1, [pc, #72]	; (8006bd0 <HAL_RCC_ClockConfig+0x35c>)
 8006b86:	5ccb      	ldrb	r3, [r1, r3]
 8006b88:	f003 031f 	and.w	r3, r3, #31
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b92:	4b0e      	ldr	r3, [pc, #56]	; (8006bcc <HAL_RCC_ClockConfig+0x358>)
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	4a0d      	ldr	r2, [pc, #52]	; (8006bd0 <HAL_RCC_ClockConfig+0x35c>)
 8006b9c:	5cd3      	ldrb	r3, [r2, r3]
 8006b9e:	f003 031f 	and.w	r3, r3, #31
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba8:	4a0a      	ldr	r2, [pc, #40]	; (8006bd4 <HAL_RCC_ClockConfig+0x360>)
 8006baa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bac:	4a0a      	ldr	r2, [pc, #40]	; (8006bd8 <HAL_RCC_ClockConfig+0x364>)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006bb2:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <HAL_RCC_ClockConfig+0x368>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fa fde2 	bl	8001780 <HAL_InitTick>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	58024400 	.word	0x58024400
 8006bd0:	0800f614 	.word	0x0800f614
 8006bd4:	24000004 	.word	0x24000004
 8006bd8:	24000000 	.word	0x24000000
 8006bdc:	24000008 	.word	0x24000008

08006be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b089      	sub	sp, #36	; 0x24
 8006be4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006be6:	4bb3      	ldr	r3, [pc, #716]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bee:	2b18      	cmp	r3, #24
 8006bf0:	f200 8155 	bhi.w	8006e9e <HAL_RCC_GetSysClockFreq+0x2be>
 8006bf4:	a201      	add	r2, pc, #4	; (adr r2, 8006bfc <HAL_RCC_GetSysClockFreq+0x1c>)
 8006bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfa:	bf00      	nop
 8006bfc:	08006c61 	.word	0x08006c61
 8006c00:	08006e9f 	.word	0x08006e9f
 8006c04:	08006e9f 	.word	0x08006e9f
 8006c08:	08006e9f 	.word	0x08006e9f
 8006c0c:	08006e9f 	.word	0x08006e9f
 8006c10:	08006e9f 	.word	0x08006e9f
 8006c14:	08006e9f 	.word	0x08006e9f
 8006c18:	08006e9f 	.word	0x08006e9f
 8006c1c:	08006c87 	.word	0x08006c87
 8006c20:	08006e9f 	.word	0x08006e9f
 8006c24:	08006e9f 	.word	0x08006e9f
 8006c28:	08006e9f 	.word	0x08006e9f
 8006c2c:	08006e9f 	.word	0x08006e9f
 8006c30:	08006e9f 	.word	0x08006e9f
 8006c34:	08006e9f 	.word	0x08006e9f
 8006c38:	08006e9f 	.word	0x08006e9f
 8006c3c:	08006c8d 	.word	0x08006c8d
 8006c40:	08006e9f 	.word	0x08006e9f
 8006c44:	08006e9f 	.word	0x08006e9f
 8006c48:	08006e9f 	.word	0x08006e9f
 8006c4c:	08006e9f 	.word	0x08006e9f
 8006c50:	08006e9f 	.word	0x08006e9f
 8006c54:	08006e9f 	.word	0x08006e9f
 8006c58:	08006e9f 	.word	0x08006e9f
 8006c5c:	08006c93 	.word	0x08006c93
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c60:	4b94      	ldr	r3, [pc, #592]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0320 	and.w	r3, r3, #32
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d009      	beq.n	8006c80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c6c:	4b91      	ldr	r3, [pc, #580]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	08db      	lsrs	r3, r3, #3
 8006c72:	f003 0303 	and.w	r3, r3, #3
 8006c76:	4a90      	ldr	r2, [pc, #576]	; (8006eb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c78:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006c7e:	e111      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c80:	4b8d      	ldr	r3, [pc, #564]	; (8006eb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c82:	61bb      	str	r3, [r7, #24]
    break;
 8006c84:	e10e      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006c86:	4b8d      	ldr	r3, [pc, #564]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c88:	61bb      	str	r3, [r7, #24]
    break;
 8006c8a:	e10b      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006c8c:	4b8c      	ldr	r3, [pc, #560]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c8e:	61bb      	str	r3, [r7, #24]
    break;
 8006c90:	e108      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c92:	4b88      	ldr	r3, [pc, #544]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006c9c:	4b85      	ldr	r3, [pc, #532]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca0:	091b      	lsrs	r3, r3, #4
 8006ca2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ca6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ca8:	4b82      	ldr	r3, [pc, #520]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006cb2:	4b80      	ldr	r3, [pc, #512]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb6:	08db      	lsrs	r3, r3, #3
 8006cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	fb02 f303 	mul.w	r3, r2, r3
 8006cc2:	ee07 3a90 	vmov	s15, r3
 8006cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 80e1 	beq.w	8006e98 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	f000 8083 	beq.w	8006de4 <HAL_RCC_GetSysClockFreq+0x204>
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	f200 80a1 	bhi.w	8006e28 <HAL_RCC_GetSysClockFreq+0x248>
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x114>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d056      	beq.n	8006da0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006cf2:	e099      	b.n	8006e28 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cf4:	4b6f      	ldr	r3, [pc, #444]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d02d      	beq.n	8006d5c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d00:	4b6c      	ldr	r3, [pc, #432]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	08db      	lsrs	r3, r3, #3
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	4a6b      	ldr	r2, [pc, #428]	; (8006eb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d10:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	ee07 3a90 	vmov	s15, r3
 8006d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d2a:	4b62      	ldr	r3, [pc, #392]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d3e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006d5a:	e087      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d66:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006ec8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6e:	4b51      	ldr	r3, [pc, #324]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d82:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d9e:	e065      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006daa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006ecc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db2:	4b40      	ldr	r3, [pc, #256]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dc6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006de2:	e043      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006ed0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df6:	4b2f      	ldr	r3, [pc, #188]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e26:	e021      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006ecc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3a:	4b1e      	ldr	r3, [pc, #120]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e6a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006e6c:	4b11      	ldr	r3, [pc, #68]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e70:	0a5b      	lsrs	r3, r3, #9
 8006e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e76:	3301      	adds	r3, #1
 8006e78:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	ee07 3a90 	vmov	s15, r3
 8006e80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e90:	ee17 3a90 	vmov	r3, s15
 8006e94:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006e96:	e005      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61bb      	str	r3, [r7, #24]
    break;
 8006e9c:	e002      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006e9e:	4b07      	ldr	r3, [pc, #28]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ea0:	61bb      	str	r3, [r7, #24]
    break;
 8006ea2:	bf00      	nop
  }

  return sysclockfreq;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3724      	adds	r7, #36	; 0x24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	58024400 	.word	0x58024400
 8006eb8:	03d09000 	.word	0x03d09000
 8006ebc:	003d0900 	.word	0x003d0900
 8006ec0:	007a1200 	.word	0x007a1200
 8006ec4:	46000000 	.word	0x46000000
 8006ec8:	4c742400 	.word	0x4c742400
 8006ecc:	4a742400 	.word	0x4a742400
 8006ed0:	4af42400 	.word	0x4af42400

08006ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006eda:	f7ff fe81 	bl	8006be0 <HAL_RCC_GetSysClockFreq>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	4b10      	ldr	r3, [pc, #64]	; (8006f24 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	0a1b      	lsrs	r3, r3, #8
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	490f      	ldr	r1, [pc, #60]	; (8006f28 <HAL_RCC_GetHCLKFreq+0x54>)
 8006eec:	5ccb      	ldrb	r3, [r1, r3]
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <HAL_RCC_GetHCLKFreq+0x50>)
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	4a09      	ldr	r2, [pc, #36]	; (8006f28 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f02:	5cd3      	ldrb	r3, [r2, r3]
 8006f04:	f003 031f 	and.w	r3, r3, #31
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0e:	4a07      	ldr	r2, [pc, #28]	; (8006f2c <HAL_RCC_GetHCLKFreq+0x58>)
 8006f10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f12:	4a07      	ldr	r2, [pc, #28]	; (8006f30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006f18:	4b04      	ldr	r3, [pc, #16]	; (8006f2c <HAL_RCC_GetHCLKFreq+0x58>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	58024400 	.word	0x58024400
 8006f28:	0800f614 	.word	0x0800f614
 8006f2c:	24000004 	.word	0x24000004
 8006f30:	24000000 	.word	0x24000000

08006f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f38:	f7ff ffcc 	bl	8006ed4 <HAL_RCC_GetHCLKFreq>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	091b      	lsrs	r3, r3, #4
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	4904      	ldr	r1, [pc, #16]	; (8006f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f4a:	5ccb      	ldrb	r3, [r1, r3]
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	58024400 	.word	0x58024400
 8006f5c:	0800f614 	.word	0x0800f614

08006f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006f64:	f7ff ffb6 	bl	8006ed4 <HAL_RCC_GetHCLKFreq>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	0a1b      	lsrs	r3, r3, #8
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	4904      	ldr	r1, [pc, #16]	; (8006f88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f76:	5ccb      	ldrb	r3, [r1, r3]
 8006f78:	f003 031f 	and.w	r3, r3, #31
 8006f7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	58024400 	.word	0x58024400
 8006f88:	0800f614 	.word	0x0800f614

08006f8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f94:	2300      	movs	r3, #0
 8006f96:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f98:	2300      	movs	r3, #0
 8006f9a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d03f      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fb0:	d02a      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006fb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fb6:	d824      	bhi.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fbc:	d018      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fc2:	d81e      	bhi.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fcc:	d007      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006fce:	e018      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd0:	4ba3      	ldr	r3, [pc, #652]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	4aa2      	ldr	r2, [pc, #648]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fdc:	e015      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	2102      	movs	r1, #2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f001 fff9 	bl	8008fdc <RCCEx_PLL2_Config>
 8006fea:	4603      	mov	r3, r0
 8006fec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fee:	e00c      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3324      	adds	r3, #36	; 0x24
 8006ff4:	2102      	movs	r1, #2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f002 f8a2 	bl	8009140 <RCCEx_PLL3_Config>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007000:	e003      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	75fb      	strb	r3, [r7, #23]
      break;
 8007006:	e000      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800700a:	7dfb      	ldrb	r3, [r7, #23]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d109      	bne.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007010:	4b93      	ldr	r3, [pc, #588]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007014:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800701c:	4990      	ldr	r1, [pc, #576]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800701e:	4313      	orrs	r3, r2
 8007020:	650b      	str	r3, [r1, #80]	; 0x50
 8007022:	e001      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007030:	2b00      	cmp	r3, #0
 8007032:	d03d      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007038:	2b04      	cmp	r3, #4
 800703a:	d826      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800703c:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	08007059 	.word	0x08007059
 8007048:	08007067 	.word	0x08007067
 800704c:	08007079 	.word	0x08007079
 8007050:	08007091 	.word	0x08007091
 8007054:	08007091 	.word	0x08007091
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007058:	4b81      	ldr	r3, [pc, #516]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	4a80      	ldr	r2, [pc, #512]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800705e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007064:	e015      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3304      	adds	r3, #4
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f001 ffb5 	bl	8008fdc <RCCEx_PLL2_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007076:	e00c      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3324      	adds	r3, #36	; 0x24
 800707c:	2100      	movs	r1, #0
 800707e:	4618      	mov	r0, r3
 8007080:	f002 f85e 	bl	8009140 <RCCEx_PLL3_Config>
 8007084:	4603      	mov	r3, r0
 8007086:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007088:	e003      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	75fb      	strb	r3, [r7, #23]
      break;
 800708e:	e000      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007092:	7dfb      	ldrb	r3, [r7, #23]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d109      	bne.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007098:	4b71      	ldr	r3, [pc, #452]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800709a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800709c:	f023 0207 	bic.w	r2, r3, #7
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a4:	496e      	ldr	r1, [pc, #440]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	650b      	str	r3, [r1, #80]	; 0x50
 80070aa:	e001      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
 80070ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d042      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c4:	d02b      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80070c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ca:	d825      	bhi.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80070cc:	2bc0      	cmp	r3, #192	; 0xc0
 80070ce:	d028      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80070d0:	2bc0      	cmp	r3, #192	; 0xc0
 80070d2:	d821      	bhi.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80070d4:	2b80      	cmp	r3, #128	; 0x80
 80070d6:	d016      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80070d8:	2b80      	cmp	r3, #128	; 0x80
 80070da:	d81d      	bhi.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	d007      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80070e4:	e018      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e6:	4b5e      	ldr	r3, [pc, #376]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ea:	4a5d      	ldr	r2, [pc, #372]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070f2:	e017      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3304      	adds	r3, #4
 80070f8:	2100      	movs	r1, #0
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 ff6e 	bl	8008fdc <RCCEx_PLL2_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007104:	e00e      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3324      	adds	r3, #36	; 0x24
 800710a:	2100      	movs	r1, #0
 800710c:	4618      	mov	r0, r3
 800710e:	f002 f817 	bl	8009140 <RCCEx_PLL3_Config>
 8007112:	4603      	mov	r3, r0
 8007114:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007116:	e005      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	75fb      	strb	r3, [r7, #23]
      break;
 800711c:	e002      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800711e:	bf00      	nop
 8007120:	e000      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007124:	7dfb      	ldrb	r3, [r7, #23]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d109      	bne.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800712a:	4b4d      	ldr	r3, [pc, #308]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800712c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007136:	494a      	ldr	r1, [pc, #296]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007138:	4313      	orrs	r3, r2
 800713a:	650b      	str	r3, [r1, #80]	; 0x50
 800713c:	e001      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713e:	7dfb      	ldrb	r3, [r7, #23]
 8007140:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800714a:	2b00      	cmp	r3, #0
 800714c:	d049      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007154:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007158:	d030      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800715a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800715e:	d82a      	bhi.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007160:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007164:	d02c      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007166:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800716a:	d824      	bhi.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800716c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007170:	d018      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007176:	d81e      	bhi.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800717c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007180:	d007      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007182:	e018      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007184:	4b36      	ldr	r3, [pc, #216]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	4a35      	ldr	r2, [pc, #212]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800718a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800718e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007190:	e017      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	3304      	adds	r3, #4
 8007196:	2100      	movs	r1, #0
 8007198:	4618      	mov	r0, r3
 800719a:	f001 ff1f 	bl	8008fdc <RCCEx_PLL2_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80071a2:	e00e      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3324      	adds	r3, #36	; 0x24
 80071a8:	2100      	movs	r1, #0
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 ffc8 	bl	8009140 <RCCEx_PLL3_Config>
 80071b0:	4603      	mov	r3, r0
 80071b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071b4:	e005      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	75fb      	strb	r3, [r7, #23]
      break;
 80071ba:	e002      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80071bc:	bf00      	nop
 80071be:	e000      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80071c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10a      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80071c8:	4b25      	ldr	r3, [pc, #148]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80071ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071d6:	4922      	ldr	r1, [pc, #136]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	658b      	str	r3, [r1, #88]	; 0x58
 80071dc:	e001      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d04b      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071f8:	d030      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80071fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071fe:	d82a      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007200:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007204:	d02e      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007206:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800720a:	d824      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800720c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007210:	d018      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007216:	d81e      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800721c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007220:	d007      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007222:	e018      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007224:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	4a0d      	ldr	r2, [pc, #52]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800722a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800722e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007230:	e019      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	3304      	adds	r3, #4
 8007236:	2100      	movs	r1, #0
 8007238:	4618      	mov	r0, r3
 800723a:	f001 fecf 	bl	8008fdc <RCCEx_PLL2_Config>
 800723e:	4603      	mov	r3, r0
 8007240:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007242:	e010      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3324      	adds	r3, #36	; 0x24
 8007248:	2100      	movs	r1, #0
 800724a:	4618      	mov	r0, r3
 800724c:	f001 ff78 	bl	8009140 <RCCEx_PLL3_Config>
 8007250:	4603      	mov	r3, r0
 8007252:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007254:	e007      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	75fb      	strb	r3, [r7, #23]
      break;
 800725a:	e004      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800725c:	bf00      	nop
 800725e:	e002      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007260:	58024400 	.word	0x58024400
      break;
 8007264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007266:	7dfb      	ldrb	r3, [r7, #23]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10a      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800726c:	4b99      	ldr	r3, [pc, #612]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800726e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007270:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800727a:	4996      	ldr	r1, [pc, #600]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800727c:	4313      	orrs	r3, r2
 800727e:	658b      	str	r3, [r1, #88]	; 0x58
 8007280:	e001      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d032      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007296:	2b30      	cmp	r3, #48	; 0x30
 8007298:	d01c      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800729a:	2b30      	cmp	r3, #48	; 0x30
 800729c:	d817      	bhi.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x342>
 800729e:	2b20      	cmp	r3, #32
 80072a0:	d00c      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	d813      	bhi.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x342>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d016      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80072aa:	2b10      	cmp	r3, #16
 80072ac:	d10f      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ae:	4b89      	ldr	r3, [pc, #548]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	4a88      	ldr	r2, [pc, #544]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80072b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80072ba:	e00e      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3304      	adds	r3, #4
 80072c0:	2102      	movs	r1, #2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fe8a 	bl	8008fdc <RCCEx_PLL2_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80072cc:	e005      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
      break;
 80072d2:	e002      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80072d4:	bf00      	nop
 80072d6:	e000      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80072d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d109      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072e0:	4b7c      	ldr	r3, [pc, #496]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80072e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ec:	4979      	ldr	r1, [pc, #484]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072f2:	e001      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d047      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800730c:	d030      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800730e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007312:	d82a      	bhi.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007314:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007318:	d02c      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800731a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800731e:	d824      	bhi.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007324:	d018      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800732a:	d81e      	bhi.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007334:	d007      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007336:	e018      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007338:	4b66      	ldr	r3, [pc, #408]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	4a65      	ldr	r2, [pc, #404]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800733e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007342:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007344:	e017      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	3304      	adds	r3, #4
 800734a:	2100      	movs	r1, #0
 800734c:	4618      	mov	r0, r3
 800734e:	f001 fe45 	bl	8008fdc <RCCEx_PLL2_Config>
 8007352:	4603      	mov	r3, r0
 8007354:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007356:	e00e      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3324      	adds	r3, #36	; 0x24
 800735c:	2100      	movs	r1, #0
 800735e:	4618      	mov	r0, r3
 8007360:	f001 feee 	bl	8009140 <RCCEx_PLL3_Config>
 8007364:	4603      	mov	r3, r0
 8007366:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007368:	e005      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	75fb      	strb	r3, [r7, #23]
      break;
 800736e:	e002      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007370:	bf00      	nop
 8007372:	e000      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007376:	7dfb      	ldrb	r3, [r7, #23]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d109      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800737c:	4b55      	ldr	r3, [pc, #340]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800737e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007380:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007388:	4952      	ldr	r1, [pc, #328]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800738a:	4313      	orrs	r3, r2
 800738c:	650b      	str	r3, [r1, #80]	; 0x50
 800738e:	e001      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007390:	7dfb      	ldrb	r3, [r7, #23]
 8007392:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d049      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073a8:	d02e      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80073aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073ae:	d828      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80073b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073b4:	d02a      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x480>
 80073b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073ba:	d822      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80073bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80073c0:	d026      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80073c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80073c6:	d81c      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80073c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073cc:	d010      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80073ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073d2:	d816      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01d      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80073d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073dc:	d111      	bne.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3304      	adds	r3, #4
 80073e2:	2101      	movs	r1, #1
 80073e4:	4618      	mov	r0, r3
 80073e6:	f001 fdf9 	bl	8008fdc <RCCEx_PLL2_Config>
 80073ea:	4603      	mov	r3, r0
 80073ec:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80073ee:	e012      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3324      	adds	r3, #36	; 0x24
 80073f4:	2101      	movs	r1, #1
 80073f6:	4618      	mov	r0, r3
 80073f8:	f001 fea2 	bl	8009140 <RCCEx_PLL3_Config>
 80073fc:	4603      	mov	r3, r0
 80073fe:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007400:	e009      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	75fb      	strb	r3, [r7, #23]
      break;
 8007406:	e006      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007408:	bf00      	nop
 800740a:	e004      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800740c:	bf00      	nop
 800740e:	e002      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007410:	bf00      	nop
 8007412:	e000      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d109      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800741c:	4b2d      	ldr	r3, [pc, #180]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800741e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007420:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007428:	492a      	ldr	r1, [pc, #168]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800742a:	4313      	orrs	r3, r2
 800742c:	650b      	str	r3, [r1, #80]	; 0x50
 800742e:	e001      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d04d      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800744a:	d02e      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800744c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007450:	d828      	bhi.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007456:	d02a      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745c:	d822      	bhi.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800745e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007462:	d026      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007464:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007468:	d81c      	bhi.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800746a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800746e:	d010      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007474:	d816      	bhi.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d01d      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800747a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800747e:	d111      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3304      	adds	r3, #4
 8007484:	2101      	movs	r1, #1
 8007486:	4618      	mov	r0, r3
 8007488:	f001 fda8 	bl	8008fdc <RCCEx_PLL2_Config>
 800748c:	4603      	mov	r3, r0
 800748e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007490:	e012      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3324      	adds	r3, #36	; 0x24
 8007496:	2101      	movs	r1, #1
 8007498:	4618      	mov	r0, r3
 800749a:	f001 fe51 	bl	8009140 <RCCEx_PLL3_Config>
 800749e:	4603      	mov	r3, r0
 80074a0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80074a2:	e009      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	75fb      	strb	r3, [r7, #23]
      break;
 80074a8:	e006      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80074aa:	bf00      	nop
 80074ac:	e004      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80074ae:	bf00      	nop
 80074b0:	e002      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80074b2:	bf00      	nop
 80074b4:	e000      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80074b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10c      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80074be:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80074c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80074cc:	4901      	ldr	r1, [pc, #4]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	658b      	str	r3, [r1, #88]	; 0x58
 80074d2:	e003      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80074d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d8:	7dfb      	ldrb	r3, [r7, #23]
 80074da:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d02f      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074f0:	d00e      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80074f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074f6:	d814      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d015      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80074fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007500:	d10f      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007502:	4baf      	ldr	r3, [pc, #700]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007506:	4aae      	ldr	r2, [pc, #696]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800750c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800750e:	e00c      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3304      	adds	r3, #4
 8007514:	2101      	movs	r1, #1
 8007516:	4618      	mov	r0, r3
 8007518:	f001 fd60 	bl	8008fdc <RCCEx_PLL2_Config>
 800751c:	4603      	mov	r3, r0
 800751e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007520:	e003      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	75fb      	strb	r3, [r7, #23]
      break;
 8007526:	e000      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d109      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007530:	4ba3      	ldr	r3, [pc, #652]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007534:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800753c:	49a0      	ldr	r1, [pc, #640]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800753e:	4313      	orrs	r3, r2
 8007540:	650b      	str	r3, [r1, #80]	; 0x50
 8007542:	e001      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d032      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007558:	2b03      	cmp	r3, #3
 800755a:	d81b      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800755c:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800755e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007562:	bf00      	nop
 8007564:	0800759b 	.word	0x0800759b
 8007568:	08007575 	.word	0x08007575
 800756c:	08007583 	.word	0x08007583
 8007570:	0800759b 	.word	0x0800759b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007574:	4b92      	ldr	r3, [pc, #584]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	4a91      	ldr	r2, [pc, #580]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800757a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800757e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007580:	e00c      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3304      	adds	r3, #4
 8007586:	2102      	movs	r1, #2
 8007588:	4618      	mov	r0, r3
 800758a:	f001 fd27 	bl	8008fdc <RCCEx_PLL2_Config>
 800758e:	4603      	mov	r3, r0
 8007590:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007592:	e003      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	75fb      	strb	r3, [r7, #23]
      break;
 8007598:	e000      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800759a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80075a2:	4b87      	ldr	r3, [pc, #540]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075a6:	f023 0203 	bic.w	r2, r3, #3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ae:	4984      	ldr	r1, [pc, #528]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80075b4:	e001      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8086 	beq.w	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075c8:	4b7e      	ldr	r3, [pc, #504]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a7d      	ldr	r2, [pc, #500]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80075ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075d4:	f7fa f91e 	bl	8001814 <HAL_GetTick>
 80075d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075da:	e009      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075dc:	f7fa f91a 	bl	8001814 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b64      	cmp	r3, #100	; 0x64
 80075e8:	d902      	bls.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	75fb      	strb	r3, [r7, #23]
        break;
 80075ee:	e005      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075f0:	4b74      	ldr	r3, [pc, #464]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d0ef      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d166      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007602:	4b6f      	ldr	r3, [pc, #444]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007604:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800760c:	4053      	eors	r3, r2
 800760e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007612:	2b00      	cmp	r3, #0
 8007614:	d013      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007616:	4b6a      	ldr	r3, [pc, #424]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800761e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007620:	4b67      	ldr	r3, [pc, #412]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007624:	4a66      	ldr	r2, [pc, #408]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800762a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800762c:	4b64      	ldr	r3, [pc, #400]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800762e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007630:	4a63      	ldr	r2, [pc, #396]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007636:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007638:	4a61      	ldr	r2, [pc, #388]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007648:	d115      	bne.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764a:	f7fa f8e3 	bl	8001814 <HAL_GetTick>
 800764e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007650:	e00b      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007652:	f7fa f8df 	bl	8001814 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007660:	4293      	cmp	r3, r2
 8007662:	d902      	bls.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	75fb      	strb	r3, [r7, #23]
            break;
 8007668:	e005      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800766a:	4b55      	ldr	r3, [pc, #340]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800766c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0ed      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d126      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800768a:	d10d      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800768c:	4b4c      	ldr	r3, [pc, #304]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800769a:	0919      	lsrs	r1, r3, #4
 800769c:	4b4a      	ldr	r3, [pc, #296]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800769e:	400b      	ands	r3, r1
 80076a0:	4947      	ldr	r1, [pc, #284]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	610b      	str	r3, [r1, #16]
 80076a6:	e005      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80076a8:	4b45      	ldr	r3, [pc, #276]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	4a44      	ldr	r2, [pc, #272]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80076b2:	6113      	str	r3, [r2, #16]
 80076b4:	4b42      	ldr	r3, [pc, #264]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076c2:	493f      	ldr	r1, [pc, #252]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	670b      	str	r3, [r1, #112]	; 0x70
 80076c8:	e004      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	75bb      	strb	r3, [r7, #22]
 80076ce:	e001      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8085 	beq.w	80077ec <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076e6:	2b28      	cmp	r3, #40	; 0x28
 80076e8:	d866      	bhi.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80076ea:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80076ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f0:	080077cd 	.word	0x080077cd
 80076f4:	080077b9 	.word	0x080077b9
 80076f8:	080077b9 	.word	0x080077b9
 80076fc:	080077b9 	.word	0x080077b9
 8007700:	080077b9 	.word	0x080077b9
 8007704:	080077b9 	.word	0x080077b9
 8007708:	080077b9 	.word	0x080077b9
 800770c:	080077b9 	.word	0x080077b9
 8007710:	08007795 	.word	0x08007795
 8007714:	080077b9 	.word	0x080077b9
 8007718:	080077b9 	.word	0x080077b9
 800771c:	080077b9 	.word	0x080077b9
 8007720:	080077b9 	.word	0x080077b9
 8007724:	080077b9 	.word	0x080077b9
 8007728:	080077b9 	.word	0x080077b9
 800772c:	080077b9 	.word	0x080077b9
 8007730:	080077a7 	.word	0x080077a7
 8007734:	080077b9 	.word	0x080077b9
 8007738:	080077b9 	.word	0x080077b9
 800773c:	080077b9 	.word	0x080077b9
 8007740:	080077b9 	.word	0x080077b9
 8007744:	080077b9 	.word	0x080077b9
 8007748:	080077b9 	.word	0x080077b9
 800774c:	080077b9 	.word	0x080077b9
 8007750:	080077cd 	.word	0x080077cd
 8007754:	080077b9 	.word	0x080077b9
 8007758:	080077b9 	.word	0x080077b9
 800775c:	080077b9 	.word	0x080077b9
 8007760:	080077b9 	.word	0x080077b9
 8007764:	080077b9 	.word	0x080077b9
 8007768:	080077b9 	.word	0x080077b9
 800776c:	080077b9 	.word	0x080077b9
 8007770:	080077cd 	.word	0x080077cd
 8007774:	080077b9 	.word	0x080077b9
 8007778:	080077b9 	.word	0x080077b9
 800777c:	080077b9 	.word	0x080077b9
 8007780:	080077b9 	.word	0x080077b9
 8007784:	080077b9 	.word	0x080077b9
 8007788:	080077b9 	.word	0x080077b9
 800778c:	080077b9 	.word	0x080077b9
 8007790:	080077cd 	.word	0x080077cd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3304      	adds	r3, #4
 8007798:	2101      	movs	r1, #1
 800779a:	4618      	mov	r0, r3
 800779c:	f001 fc1e 	bl	8008fdc <RCCEx_PLL2_Config>
 80077a0:	4603      	mov	r3, r0
 80077a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80077a4:	e013      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	3324      	adds	r3, #36	; 0x24
 80077aa:	2101      	movs	r1, #1
 80077ac:	4618      	mov	r0, r3
 80077ae:	f001 fcc7 	bl	8009140 <RCCEx_PLL3_Config>
 80077b2:	4603      	mov	r3, r0
 80077b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80077b6:	e00a      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	75fb      	strb	r3, [r7, #23]
      break;
 80077bc:	e007      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x842>
 80077be:	bf00      	nop
 80077c0:	58024400 	.word	0x58024400
 80077c4:	58024800 	.word	0x58024800
 80077c8:	00ffffcf 	.word	0x00ffffcf
      break;
 80077cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d109      	bne.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80077d4:	4b96      	ldr	r3, [pc, #600]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077e0:	4993      	ldr	r1, [pc, #588]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	654b      	str	r3, [r1, #84]	; 0x54
 80077e6:	e001      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d038      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077fc:	2b05      	cmp	r3, #5
 80077fe:	d821      	bhi.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007800:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	0800784b 	.word	0x0800784b
 800780c:	08007821 	.word	0x08007821
 8007810:	08007833 	.word	0x08007833
 8007814:	0800784b 	.word	0x0800784b
 8007818:	0800784b 	.word	0x0800784b
 800781c:	0800784b 	.word	0x0800784b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3304      	adds	r3, #4
 8007824:	2101      	movs	r1, #1
 8007826:	4618      	mov	r0, r3
 8007828:	f001 fbd8 	bl	8008fdc <RCCEx_PLL2_Config>
 800782c:	4603      	mov	r3, r0
 800782e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007830:	e00c      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	3324      	adds	r3, #36	; 0x24
 8007836:	2101      	movs	r1, #1
 8007838:	4618      	mov	r0, r3
 800783a:	f001 fc81 	bl	8009140 <RCCEx_PLL3_Config>
 800783e:	4603      	mov	r3, r0
 8007840:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007842:	e003      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	75fb      	strb	r3, [r7, #23]
      break;
 8007848:	e000      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800784a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800784c:	7dfb      	ldrb	r3, [r7, #23]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d109      	bne.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007852:	4b77      	ldr	r3, [pc, #476]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007856:	f023 0207 	bic.w	r2, r3, #7
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800785e:	4974      	ldr	r1, [pc, #464]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007860:	4313      	orrs	r3, r2
 8007862:	654b      	str	r3, [r1, #84]	; 0x54
 8007864:	e001      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0304 	and.w	r3, r3, #4
 8007872:	2b00      	cmp	r3, #0
 8007874:	d03a      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800787c:	2b05      	cmp	r3, #5
 800787e:	d821      	bhi.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007880:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007886:	bf00      	nop
 8007888:	080078cb 	.word	0x080078cb
 800788c:	080078a1 	.word	0x080078a1
 8007890:	080078b3 	.word	0x080078b3
 8007894:	080078cb 	.word	0x080078cb
 8007898:	080078cb 	.word	0x080078cb
 800789c:	080078cb 	.word	0x080078cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3304      	adds	r3, #4
 80078a4:	2101      	movs	r1, #1
 80078a6:	4618      	mov	r0, r3
 80078a8:	f001 fb98 	bl	8008fdc <RCCEx_PLL2_Config>
 80078ac:	4603      	mov	r3, r0
 80078ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80078b0:	e00c      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	3324      	adds	r3, #36	; 0x24
 80078b6:	2101      	movs	r1, #1
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 fc41 	bl	8009140 <RCCEx_PLL3_Config>
 80078be:	4603      	mov	r3, r0
 80078c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80078c2:	e003      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	75fb      	strb	r3, [r7, #23]
      break;
 80078c8:	e000      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80078ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078d2:	4b57      	ldr	r3, [pc, #348]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80078d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d6:	f023 0207 	bic.w	r2, r3, #7
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078e0:	4953      	ldr	r1, [pc, #332]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	658b      	str	r3, [r1, #88]	; 0x58
 80078e6:	e001      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e8:	7dfb      	ldrb	r3, [r7, #23]
 80078ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0320 	and.w	r3, r3, #32
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d04b      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007902:	d02e      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007908:	d828      	bhi.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800790a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800790e:	d02a      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007914:	d822      	bhi.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007916:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800791a:	d026      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800791c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007920:	d81c      	bhi.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007926:	d010      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800792c:	d816      	bhi.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d01d      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007936:	d111      	bne.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3304      	adds	r3, #4
 800793c:	2100      	movs	r1, #0
 800793e:	4618      	mov	r0, r3
 8007940:	f001 fb4c 	bl	8008fdc <RCCEx_PLL2_Config>
 8007944:	4603      	mov	r3, r0
 8007946:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007948:	e012      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	3324      	adds	r3, #36	; 0x24
 800794e:	2102      	movs	r1, #2
 8007950:	4618      	mov	r0, r3
 8007952:	f001 fbf5 	bl	8009140 <RCCEx_PLL3_Config>
 8007956:	4603      	mov	r3, r0
 8007958:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800795a:	e009      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	75fb      	strb	r3, [r7, #23]
      break;
 8007960:	e006      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007962:	bf00      	nop
 8007964:	e004      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007966:	bf00      	nop
 8007968:	e002      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800796a:	bf00      	nop
 800796c:	e000      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800796e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007970:	7dfb      	ldrb	r3, [r7, #23]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007976:	4b2e      	ldr	r3, [pc, #184]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800797a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007984:	492a      	ldr	r1, [pc, #168]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007986:	4313      	orrs	r3, r2
 8007988:	654b      	str	r3, [r1, #84]	; 0x54
 800798a:	e001      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798c:	7dfb      	ldrb	r3, [r7, #23]
 800798e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007998:	2b00      	cmp	r3, #0
 800799a:	d04d      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80079a6:	d02e      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80079a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80079ac:	d828      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80079ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b2:	d02a      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80079b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b8:	d822      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80079ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079be:	d026      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80079c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079c4:	d81c      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80079c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ca:	d010      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80079cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079d0:	d816      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d01d      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80079d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079da:	d111      	bne.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3304      	adds	r3, #4
 80079e0:	2100      	movs	r1, #0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f001 fafa 	bl	8008fdc <RCCEx_PLL2_Config>
 80079e8:	4603      	mov	r3, r0
 80079ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80079ec:	e012      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3324      	adds	r3, #36	; 0x24
 80079f2:	2102      	movs	r1, #2
 80079f4:	4618      	mov	r0, r3
 80079f6:	f001 fba3 	bl	8009140 <RCCEx_PLL3_Config>
 80079fa:	4603      	mov	r3, r0
 80079fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80079fe:	e009      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	75fb      	strb	r3, [r7, #23]
      break;
 8007a04:	e006      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007a06:	bf00      	nop
 8007a08:	e004      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007a0a:	bf00      	nop
 8007a0c:	e002      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007a0e:	bf00      	nop
 8007a10:	e000      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007a12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10c      	bne.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a1a:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a28:	4901      	ldr	r1, [pc, #4]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	658b      	str	r3, [r1, #88]	; 0x58
 8007a2e:	e003      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007a30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
 8007a36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d04b      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a4e:	d02e      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007a50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a54:	d828      	bhi.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a5a:	d02a      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a60:	d822      	bhi.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007a62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a66:	d026      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007a68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a6c:	d81c      	bhi.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a72:	d010      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a78:	d816      	bhi.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d01d      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a82:	d111      	bne.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3304      	adds	r3, #4
 8007a88:	2100      	movs	r1, #0
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 faa6 	bl	8008fdc <RCCEx_PLL2_Config>
 8007a90:	4603      	mov	r3, r0
 8007a92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a94:	e012      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3324      	adds	r3, #36	; 0x24
 8007a9a:	2102      	movs	r1, #2
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f001 fb4f 	bl	8009140 <RCCEx_PLL3_Config>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007aa6:	e009      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8007aac:	e006      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007aae:	bf00      	nop
 8007ab0:	e004      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007ab2:	bf00      	nop
 8007ab4:	e002      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007ab6:	bf00      	nop
 8007ab8:	e000      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ac2:	4b9d      	ldr	r3, [pc, #628]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ad0:	4999      	ldr	r1, [pc, #612]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	658b      	str	r3, [r1, #88]	; 0x58
 8007ad6:	e001      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0308 	and.w	r3, r3, #8
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d01a      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af2:	d10a      	bne.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3324      	adds	r3, #36	; 0x24
 8007af8:	2102      	movs	r1, #2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f001 fb20 	bl	8009140 <RCCEx_PLL3_Config>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b0a:	4b8b      	ldr	r3, [pc, #556]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b18:	4987      	ldr	r1, [pc, #540]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0310 	and.w	r3, r3, #16
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d01a      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b34:	d10a      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	3324      	adds	r3, #36	; 0x24
 8007b3a:	2102      	movs	r1, #2
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f001 faff 	bl	8009140 <RCCEx_PLL3_Config>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b4c:	4b7a      	ldr	r3, [pc, #488]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b5a:	4977      	ldr	r1, [pc, #476]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d034      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b76:	d01d      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b7c:	d817      	bhi.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b86:	d009      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007b88:	e011      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	2100      	movs	r1, #0
 8007b90:	4618      	mov	r0, r3
 8007b92:	f001 fa23 	bl	8008fdc <RCCEx_PLL2_Config>
 8007b96:	4603      	mov	r3, r0
 8007b98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b9a:	e00c      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3324      	adds	r3, #36	; 0x24
 8007ba0:	2102      	movs	r1, #2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f001 facc 	bl	8009140 <RCCEx_PLL3_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007bac:	e003      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb2:	e000      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007bbc:	4b5e      	ldr	r3, [pc, #376]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007bca:	495b      	ldr	r1, [pc, #364]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	658b      	str	r3, [r1, #88]	; 0x58
 8007bd0:	e001      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d033      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007be8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bec:	d01c      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007bee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bf2:	d816      	bhi.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bf8:	d003      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bfe:	d007      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007c00:	e00f      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c02:	4b4d      	ldr	r3, [pc, #308]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	4a4c      	ldr	r2, [pc, #304]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007c0e:	e00c      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3324      	adds	r3, #36	; 0x24
 8007c14:	2101      	movs	r1, #1
 8007c16:	4618      	mov	r0, r3
 8007c18:	f001 fa92 	bl	8009140 <RCCEx_PLL3_Config>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007c20:	e003      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	75fb      	strb	r3, [r7, #23]
      break;
 8007c26:	e000      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10a      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c30:	4b41      	ldr	r3, [pc, #260]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c3e:	493e      	ldr	r1, [pc, #248]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	654b      	str	r3, [r1, #84]	; 0x54
 8007c44:	e001      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d029      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c62:	d007      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007c64:	e00f      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c66:	4b34      	ldr	r3, [pc, #208]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	4a33      	ldr	r2, [pc, #204]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007c72:	e00b      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3304      	adds	r3, #4
 8007c78:	2102      	movs	r1, #2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 f9ae 	bl	8008fdc <RCCEx_PLL2_Config>
 8007c80:	4603      	mov	r3, r0
 8007c82:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007c84:	e002      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	75fb      	strb	r3, [r7, #23]
      break;
 8007c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007c92:	4b29      	ldr	r3, [pc, #164]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9e:	4926      	ldr	r1, [pc, #152]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ca4:	e001      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3324      	adds	r3, #36	; 0x24
 8007cba:	2102      	movs	r1, #2
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f001 fa3f 	bl	8009140 <RCCEx_PLL3_Config>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d033      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ce0:	d017      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ce6:	d811      	bhi.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cec:	d013      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf2:	d80b      	bhi.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d010      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cfc:	d106      	bne.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cfe:	4b0e      	ldr	r3, [pc, #56]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	4a0d      	ldr	r2, [pc, #52]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007d0a:	e007      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d10:	e004      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007d12:	bf00      	nop
 8007d14:	e002      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007d16:	bf00      	nop
 8007d18:	e000      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d1c:	7dfb      	ldrb	r3, [r7, #23]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10c      	bne.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d22:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d2e:	4902      	ldr	r1, [pc, #8]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	654b      	str	r3, [r1, #84]	; 0x54
 8007d34:	e004      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007d36:	bf00      	nop
 8007d38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
 8007d3e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d008      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d4c:	4b31      	ldr	r3, [pc, #196]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d58:	492e      	ldr	r1, [pc, #184]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d009      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007d6a:	4b2a      	ldr	r3, [pc, #168]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d78:	4926      	ldr	r1, [pc, #152]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d008      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d8a:	4b22      	ldr	r3, [pc, #136]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d8e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d96:	491f      	ldr	r1, [pc, #124]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00d      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007da8:	4b1a      	ldr	r3, [pc, #104]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	4a19      	ldr	r2, [pc, #100]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007dae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007db2:	6113      	str	r3, [r2, #16]
 8007db4:	4b17      	ldr	r3, [pc, #92]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007db6:	691a      	ldr	r2, [r3, #16]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007dbe:	4915      	ldr	r1, [pc, #84]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	da08      	bge.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007dcc:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dd8:	490e      	ldr	r1, [pc, #56]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d009      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007dea:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df8:	4906      	ldr	r1, [pc, #24]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007dfe:	7dbb      	ldrb	r3, [r7, #22]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	e000      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	58024400 	.word	0x58024400

08007e18 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b090      	sub	sp, #64	; 0x40
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e26:	f040 8095 	bne.w	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007e2a:	4b97      	ldr	r3, [pc, #604]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	f200 8088 	bhi.w	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007e3c:	a201      	add	r2, pc, #4	; (adr r2, 8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e42:	bf00      	nop
 8007e44:	08007e59 	.word	0x08007e59
 8007e48:	08007e81 	.word	0x08007e81
 8007e4c:	08007ea9 	.word	0x08007ea9
 8007e50:	08007f45 	.word	0x08007f45
 8007e54:	08007ed1 	.word	0x08007ed1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e58:	4b8b      	ldr	r3, [pc, #556]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e64:	d108      	bne.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 ff64 	bl	8008d38 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e74:	f000 bc94 	b.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e7c:	f000 bc90 	b.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e80:	4b81      	ldr	r3, [pc, #516]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e8c:	d108      	bne.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e8e:	f107 0318 	add.w	r3, r7, #24
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fca8 	bl	80087e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e9c:	f000 bc80 	b.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea4:	f000 bc7c 	b.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ea8:	4b77      	ldr	r3, [pc, #476]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eb4:	d108      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eb6:	f107 030c 	add.w	r3, r7, #12
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fde8 	bl	8008a90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ec4:	f000 bc6c 	b.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ecc:	f000 bc68 	b.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ed0:	4b6d      	ldr	r3, [pc, #436]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ed4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ed8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007eda:	4b6b      	ldr	r3, [pc, #428]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0304 	and.w	r3, r3, #4
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	d10c      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d109      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007eec:	4b66      	ldr	r3, [pc, #408]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	08db      	lsrs	r3, r3, #3
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	4a65      	ldr	r2, [pc, #404]	; (800808c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8007efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007efe:	e01f      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f00:	4b61      	ldr	r3, [pc, #388]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f0c:	d106      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f14:	d102      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007f16:	4b5e      	ldr	r3, [pc, #376]	; (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f1a:	e011      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f1c:	4b5a      	ldr	r3, [pc, #360]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f28:	d106      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f30:	d102      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007f32:	4b58      	ldr	r3, [pc, #352]	; (8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f36:	e003      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007f3c:	f000 bc30 	b.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007f40:	f000 bc2e 	b.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f44:	4b54      	ldr	r3, [pc, #336]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007f46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f48:	f000 bc2a 	b.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f50:	f000 bc26 	b.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f5a:	f040 809f 	bne.w	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007f5e:	4b4a      	ldr	r3, [pc, #296]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f62:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007f66:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6e:	d04d      	beq.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f76:	f200 8084 	bhi.w	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	2bc0      	cmp	r3, #192	; 0xc0
 8007f7e:	d07d      	beq.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	2bc0      	cmp	r3, #192	; 0xc0
 8007f84:	d87d      	bhi.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	2b80      	cmp	r3, #128	; 0x80
 8007f8a:	d02d      	beq.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	2b80      	cmp	r3, #128	; 0x80
 8007f90:	d877      	bhi.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	2b40      	cmp	r3, #64	; 0x40
 8007f9c:	d012      	beq.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8007f9e:	e070      	b.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fa0:	4b39      	ldr	r3, [pc, #228]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fac:	d107      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fec0 	bl	8008d38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007fbc:	e3f0      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fc2:	e3ed      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fc4:	4b30      	ldr	r3, [pc, #192]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fd0:	d107      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fd2:	f107 0318 	add.w	r3, r7, #24
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fc06 	bl	80087e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007fe0:	e3de      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fe6:	e3db      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fe8:	4b27      	ldr	r3, [pc, #156]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ff4:	d107      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ff6:	f107 030c 	add.w	r3, r7, #12
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 fd48 	bl	8008a90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008004:	e3cc      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800800a:	e3c9      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800800c:	4b1e      	ldr	r3, [pc, #120]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800800e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008010:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008014:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008016:	4b1c      	ldr	r3, [pc, #112]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0304 	and.w	r3, r3, #4
 800801e:	2b04      	cmp	r3, #4
 8008020:	d10c      	bne.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008024:	2b00      	cmp	r3, #0
 8008026:	d109      	bne.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008028:	4b17      	ldr	r3, [pc, #92]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	08db      	lsrs	r3, r3, #3
 800802e:	f003 0303 	and.w	r3, r3, #3
 8008032:	4a16      	ldr	r2, [pc, #88]	; (800808c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008034:	fa22 f303 	lsr.w	r3, r2, r3
 8008038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800803a:	e01e      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800803c:	4b12      	ldr	r3, [pc, #72]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008048:	d106      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800804a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008050:	d102      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008052:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008056:	e010      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008058:	4b0b      	ldr	r3, [pc, #44]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008064:	d106      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800806c:	d102      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800806e:	4b09      	ldr	r3, [pc, #36]	; (8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008072:	e002      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008078:	e392      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800807a:	e391      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800807c:	4b06      	ldr	r3, [pc, #24]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008080:	e38e      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008086:	e38b      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008088:	58024400 	.word	0x58024400
 800808c:	03d09000 	.word	0x03d09000
 8008090:	003d0900 	.word	0x003d0900
 8008094:	007a1200 	.word	0x007a1200
 8008098:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080a2:	f040 809c 	bne.w	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80080a6:	4b9d      	ldr	r3, [pc, #628]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80080a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080aa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80080ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080b6:	d054      	beq.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080be:	f200 808b 	bhi.w	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80080c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080c8:	f000 8083 	beq.w	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80080cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080d2:	f200 8081 	bhi.w	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080dc:	d02f      	beq.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80080de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080e4:	d878      	bhi.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d004      	beq.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080f2:	d012      	beq.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80080f4:	e070      	b.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080f6:	4b89      	ldr	r3, [pc, #548]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008102:	d107      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008108:	4618      	mov	r0, r3
 800810a:	f000 fe15 	bl	8008d38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008112:	e345      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008118:	e342      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800811a:	4b80      	ldr	r3, [pc, #512]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008126:	d107      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008128:	f107 0318 	add.w	r3, r7, #24
 800812c:	4618      	mov	r0, r3
 800812e:	f000 fb5b 	bl	80087e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008136:	e333      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800813c:	e330      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800813e:	4b77      	ldr	r3, [pc, #476]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800814a:	d107      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800814c:	f107 030c 	add.w	r3, r7, #12
 8008150:	4618      	mov	r0, r3
 8008152:	f000 fc9d 	bl	8008a90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800815a:	e321      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008160:	e31e      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008162:	4b6e      	ldr	r3, [pc, #440]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008166:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800816a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800816c:	4b6b      	ldr	r3, [pc, #428]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b04      	cmp	r3, #4
 8008176:	d10c      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817a:	2b00      	cmp	r3, #0
 800817c:	d109      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800817e:	4b67      	ldr	r3, [pc, #412]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	08db      	lsrs	r3, r3, #3
 8008184:	f003 0303 	and.w	r3, r3, #3
 8008188:	4a65      	ldr	r2, [pc, #404]	; (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800818a:	fa22 f303 	lsr.w	r3, r2, r3
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008190:	e01e      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008192:	4b62      	ldr	r3, [pc, #392]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800819a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800819e:	d106      	bne.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80081a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081a6:	d102      	bne.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80081a8:	4b5e      	ldr	r3, [pc, #376]	; (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80081aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081ac:	e010      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081ae:	4b5b      	ldr	r3, [pc, #364]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ba:	d106      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80081bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081c2:	d102      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80081c4:	4b58      	ldr	r3, [pc, #352]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c8:	e002      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80081ce:	e2e7      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80081d0:	e2e6      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80081d2:	4b56      	ldr	r3, [pc, #344]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081d6:	e2e3      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081dc:	e2e0      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081e4:	f040 80a7 	bne.w	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80081e8:	4b4c      	ldr	r3, [pc, #304]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80081ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ec:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80081f0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081f8:	d055      	beq.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008200:	f200 8096 	bhi.w	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800820a:	f000 8084 	beq.w	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008214:	f200 808c 	bhi.w	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800821e:	d030      	beq.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008226:	f200 8083 	bhi.w	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008232:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008236:	d012      	beq.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008238:	e07a      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800823a:	4b38      	ldr	r3, [pc, #224]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008246:	d107      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fd73 	bl	8008d38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008254:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008256:	e2a3      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008258:	2300      	movs	r3, #0
 800825a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800825c:	e2a0      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800825e:	4b2f      	ldr	r3, [pc, #188]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800826a:	d107      	bne.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800826c:	f107 0318 	add.w	r3, r7, #24
 8008270:	4618      	mov	r0, r3
 8008272:	f000 fab9 	bl	80087e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800827a:	e291      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008280:	e28e      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008282:	4b26      	ldr	r3, [pc, #152]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800828a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800828e:	d107      	bne.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008290:	f107 030c 	add.w	r3, r7, #12
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fbfb 	bl	8008a90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800829e:	e27f      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082a4:	e27c      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80082a6:	4b1d      	ldr	r3, [pc, #116]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80082a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082ae:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082b0:	4b1a      	ldr	r3, [pc, #104]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d10c      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80082bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d109      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082c2:	4b16      	ldr	r3, [pc, #88]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	08db      	lsrs	r3, r3, #3
 80082c8:	f003 0303 	and.w	r3, r3, #3
 80082cc:	4a14      	ldr	r2, [pc, #80]	; (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80082ce:	fa22 f303 	lsr.w	r3, r2, r3
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d4:	e01e      	b.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082d6:	4b11      	ldr	r3, [pc, #68]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082e2:	d106      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80082e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082ea:	d102      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80082ec:	4b0d      	ldr	r3, [pc, #52]	; (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80082ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082f0:	e010      	b.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082f2:	4b0a      	ldr	r3, [pc, #40]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082fe:	d106      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008306:	d102      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008308:	4b07      	ldr	r3, [pc, #28]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800830a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800830c:	e002      	b.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008312:	e245      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008314:	e244      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008316:	4b05      	ldr	r3, [pc, #20]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008318:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800831a:	e241      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800831c:	58024400 	.word	0x58024400
 8008320:	03d09000 	.word	0x03d09000
 8008324:	003d0900 	.word	0x003d0900
 8008328:	007a1200 	.word	0x007a1200
 800832c:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008334:	e234      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800833c:	f040 809c 	bne.w	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008340:	4b9b      	ldr	r3, [pc, #620]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008344:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008348:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008350:	d054      	beq.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008358:	f200 808b 	bhi.w	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008362:	f000 8083 	beq.w	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008368:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800836c:	f200 8081 	bhi.w	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008376:	d02f      	beq.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800837e:	d878      	bhi.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	2b00      	cmp	r3, #0
 8008384:	d004      	beq.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800838c:	d012      	beq.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800838e:	e070      	b.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008390:	4b87      	ldr	r3, [pc, #540]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800839c:	d107      	bne.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800839e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fcc8 	bl	8008d38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083ac:	e1f8      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083b2:	e1f5      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083b4:	4b7e      	ldr	r3, [pc, #504]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083c0:	d107      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083c2:	f107 0318 	add.w	r3, r7, #24
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fa0e 	bl	80087e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083d0:	e1e6      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083d6:	e1e3      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083d8:	4b75      	ldr	r3, [pc, #468]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083e4:	d107      	bne.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083e6:	f107 030c 	add.w	r3, r7, #12
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fb50 	bl	8008a90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083f4:	e1d4      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80083f6:	2300      	movs	r3, #0
 80083f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083fa:	e1d1      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80083fc:	4b6c      	ldr	r3, [pc, #432]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80083fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008400:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008404:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008406:	4b6a      	ldr	r3, [pc, #424]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0304 	and.w	r3, r3, #4
 800840e:	2b04      	cmp	r3, #4
 8008410:	d10c      	bne.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008414:	2b00      	cmp	r3, #0
 8008416:	d109      	bne.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008418:	4b65      	ldr	r3, [pc, #404]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	08db      	lsrs	r3, r3, #3
 800841e:	f003 0303 	and.w	r3, r3, #3
 8008422:	4a64      	ldr	r2, [pc, #400]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8008424:	fa22 f303 	lsr.w	r3, r2, r3
 8008428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800842a:	e01e      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800842c:	4b60      	ldr	r3, [pc, #384]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008438:	d106      	bne.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800843a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008440:	d102      	bne.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008442:	4b5d      	ldr	r3, [pc, #372]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008446:	e010      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008448:	4b59      	ldr	r3, [pc, #356]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008450:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008454:	d106      	bne.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800845c:	d102      	bne.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800845e:	4b57      	ldr	r3, [pc, #348]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008462:	e002      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008464:	2300      	movs	r3, #0
 8008466:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008468:	e19a      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800846a:	e199      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800846c:	4b54      	ldr	r3, [pc, #336]	; (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800846e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008470:	e196      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008476:	e193      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800847e:	d173      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008480:	4b4b      	ldr	r3, [pc, #300]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008488:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800848a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008490:	d02f      	beq.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008498:	d863      	bhi.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	2b00      	cmp	r3, #0
 800849e:	d004      	beq.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084a6:	d012      	beq.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80084a8:	e05b      	b.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084aa:	4b41      	ldr	r3, [pc, #260]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084b6:	d107      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084b8:	f107 0318 	add.w	r3, r7, #24
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 f993 	bl	80087e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084c6:	e16b      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084cc:	e168      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084ce:	4b38      	ldr	r3, [pc, #224]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084da:	d107      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084dc:	f107 030c 	add.w	r3, r7, #12
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fad5 	bl	8008a90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084ea:	e159      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084f0:	e156      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80084f2:	4b2f      	ldr	r3, [pc, #188]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80084f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084fa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084fc:	4b2c      	ldr	r3, [pc, #176]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b04      	cmp	r3, #4
 8008506:	d10c      	bne.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8008508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800850e:	4b28      	ldr	r3, [pc, #160]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	08db      	lsrs	r3, r3, #3
 8008514:	f003 0303 	and.w	r3, r3, #3
 8008518:	4a26      	ldr	r2, [pc, #152]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800851a:	fa22 f303 	lsr.w	r3, r2, r3
 800851e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008520:	e01e      	b.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008522:	4b23      	ldr	r3, [pc, #140]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800852e:	d106      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8008530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008536:	d102      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008538:	4b1f      	ldr	r3, [pc, #124]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800853c:	e010      	b.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800853e:	4b1c      	ldr	r3, [pc, #112]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800854a:	d106      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800854c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008552:	d102      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008554:	4b19      	ldr	r3, [pc, #100]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008558:	e002      	b.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800855e:	e11f      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008560:	e11e      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008566:	e11b      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800856e:	d13e      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008570:	4b0f      	ldr	r3, [pc, #60]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008578:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800857a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857c:	2b00      	cmp	r3, #0
 800857e:	d004      	beq.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8008580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008586:	d01d      	beq.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008588:	e02e      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800858a:	4b09      	ldr	r3, [pc, #36]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008592:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008596:	d107      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800859c:	4618      	mov	r0, r3
 800859e:	f000 fbcb 	bl	8008d38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80085a6:	e0fb      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ac:	e0f8      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80085ae:	bf00      	nop
 80085b0:	58024400 	.word	0x58024400
 80085b4:	03d09000 	.word	0x03d09000
 80085b8:	003d0900 	.word	0x003d0900
 80085bc:	007a1200 	.word	0x007a1200
 80085c0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085c4:	4b79      	ldr	r3, [pc, #484]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085d0:	d107      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085d2:	f107 0318 	add.w	r3, r7, #24
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 f906 	bl	80087e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80085dc:	6a3b      	ldr	r3, [r7, #32]
 80085de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80085e0:	e0de      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80085e2:	2300      	movs	r3, #0
 80085e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085e6:	e0db      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ec:	e0d8      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085f4:	f040 8085 	bne.w	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80085f8:	4b6c      	ldr	r3, [pc, #432]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085fc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008600:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008608:	d06b      	beq.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800860a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008610:	d874      	bhi.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008618:	d056      	beq.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008620:	d86c      	bhi.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008628:	d03b      	beq.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008630:	d864      	bhi.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008638:	d021      	beq.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008640:	d85c      	bhi.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008644:	2b00      	cmp	r3, #0
 8008646:	d004      	beq.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800864e:	d004      	beq.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008650:	e054      	b.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008652:	f000 f8b3 	bl	80087bc <HAL_RCCEx_GetD3PCLK1Freq>
 8008656:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008658:	e0a2      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800865a:	4b54      	ldr	r3, [pc, #336]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008666:	d107      	bne.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008668:	f107 0318 	add.w	r3, r7, #24
 800866c:	4618      	mov	r0, r3
 800866e:	f000 f8bb 	bl	80087e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008676:	e093      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800867c:	e090      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800867e:	4b4b      	ldr	r3, [pc, #300]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800868a:	d107      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800868c:	f107 030c 	add.w	r3, r7, #12
 8008690:	4618      	mov	r0, r3
 8008692:	f000 f9fd 	bl	8008a90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800869a:	e081      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086a0:	e07e      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086a2:	4b42      	ldr	r3, [pc, #264]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0304 	and.w	r3, r3, #4
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d109      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086ae:	4b3f      	ldr	r3, [pc, #252]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	08db      	lsrs	r3, r3, #3
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	4a3d      	ldr	r2, [pc, #244]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80086ba:	fa22 f303 	lsr.w	r3, r2, r3
 80086be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80086c0:	e06e      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80086c2:	2300      	movs	r3, #0
 80086c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086c6:	e06b      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80086c8:	4b38      	ldr	r3, [pc, #224]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086d4:	d102      	bne.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 80086d6:	4b37      	ldr	r3, [pc, #220]	; (80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80086d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086da:	e061      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80086dc:	2300      	movs	r3, #0
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086e0:	e05e      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086e2:	4b32      	ldr	r3, [pc, #200]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086ee:	d102      	bne.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 80086f0:	4b31      	ldr	r3, [pc, #196]	; (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80086f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80086f4:	e054      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086fa:	e051      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008700:	e04e      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008708:	d148      	bne.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800870a:	4b28      	ldr	r3, [pc, #160]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800870c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800870e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008712:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800871a:	d02a      	beq.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800871c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008722:	d838      	bhi.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8008724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008726:	2b00      	cmp	r3, #0
 8008728:	d004      	beq.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008730:	d00d      	beq.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8008732:	e030      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008734:	4b1d      	ldr	r3, [pc, #116]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800873c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008740:	d102      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8008742:	4b1d      	ldr	r3, [pc, #116]	; (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008744:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008746:	e02b      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800874c:	e028      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800874e:	4b17      	ldr	r3, [pc, #92]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800875a:	d107      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800875c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008760:	4618      	mov	r0, r3
 8008762:	f000 fae9 	bl	8008d38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800876a:	e019      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008770:	e016      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008772:	4b0e      	ldr	r3, [pc, #56]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800877a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800877e:	d107      	bne.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008780:	f107 0318 	add.w	r3, r7, #24
 8008784:	4618      	mov	r0, r3
 8008786:	f000 f82f 	bl	80087e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800878e:	e007      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008790:	2300      	movs	r3, #0
 8008792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008794:	e004      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800879a:	e001      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80087a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3740      	adds	r7, #64	; 0x40
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	58024400 	.word	0x58024400
 80087b0:	03d09000 	.word	0x03d09000
 80087b4:	003d0900 	.word	0x003d0900
 80087b8:	007a1200 	.word	0x007a1200

080087bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80087c0:	f7fe fb88 	bl	8006ed4 <HAL_RCC_GetHCLKFreq>
 80087c4:	4602      	mov	r2, r0
 80087c6:	4b06      	ldr	r3, [pc, #24]	; (80087e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	091b      	lsrs	r3, r3, #4
 80087cc:	f003 0307 	and.w	r3, r3, #7
 80087d0:	4904      	ldr	r1, [pc, #16]	; (80087e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80087d2:	5ccb      	ldrb	r3, [r1, r3]
 80087d4:	f003 031f 	and.w	r3, r3, #31
 80087d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80087dc:	4618      	mov	r0, r3
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	58024400 	.word	0x58024400
 80087e4:	0800f614 	.word	0x0800f614

080087e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b089      	sub	sp, #36	; 0x24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087f0:	4ba1      	ldr	r3, [pc, #644]	; (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80087fa:	4b9f      	ldr	r3, [pc, #636]	; (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fe:	0b1b      	lsrs	r3, r3, #12
 8008800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008804:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008806:	4b9c      	ldr	r3, [pc, #624]	; (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	091b      	lsrs	r3, r3, #4
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008812:	4b99      	ldr	r3, [pc, #612]	; (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008816:	08db      	lsrs	r3, r3, #3
 8008818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	fb02 f303 	mul.w	r3, r2, r3
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 8111 	beq.w	8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	2b02      	cmp	r3, #2
 800883a:	f000 8083 	beq.w	8008944 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	2b02      	cmp	r3, #2
 8008842:	f200 80a1 	bhi.w	8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d056      	beq.n	8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008852:	e099      	b.n	8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008854:	4b88      	ldr	r3, [pc, #544]	; (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0320 	and.w	r3, r3, #32
 800885c:	2b00      	cmp	r3, #0
 800885e:	d02d      	beq.n	80088bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008860:	4b85      	ldr	r3, [pc, #532]	; (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	08db      	lsrs	r3, r3, #3
 8008866:	f003 0303 	and.w	r3, r3, #3
 800886a:	4a84      	ldr	r2, [pc, #528]	; (8008a7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800886c:	fa22 f303 	lsr.w	r3, r2, r3
 8008870:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	ee07 3a90 	vmov	s15, r3
 8008878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800888a:	4b7b      	ldr	r3, [pc, #492]	; (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800888c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800889a:	ed97 6a03 	vldr	s12, [r7, #12]
 800889e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80088ba:	e087      	b.n	80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	ee07 3a90 	vmov	s15, r3
 80088c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80088ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ce:	4b6a      	ldr	r3, [pc, #424]	; (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088de:	ed97 6a03 	vldr	s12, [r7, #12]
 80088e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088fe:	e065      	b.n	80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800890e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008912:	4b59      	ldr	r3, [pc, #356]	; (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891a:	ee07 3a90 	vmov	s15, r3
 800891e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008922:	ed97 6a03 	vldr	s12, [r7, #12]
 8008926:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800892a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800892e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800893e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008942:	e043      	b.n	80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	ee07 3a90 	vmov	s15, r3
 800894a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008956:	4b48      	ldr	r3, [pc, #288]	; (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895e:	ee07 3a90 	vmov	s15, r3
 8008962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008966:	ed97 6a03 	vldr	s12, [r7, #12]
 800896a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800896e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800897a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800897e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008982:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008986:	e021      	b.n	80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008992:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800899a:	4b37      	ldr	r3, [pc, #220]	; (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800899c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a2:	ee07 3a90 	vmov	s15, r3
 80089a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80089cc:	4b2a      	ldr	r3, [pc, #168]	; (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d0:	0a5b      	lsrs	r3, r3, #9
 80089d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d6:	ee07 3a90 	vmov	s15, r3
 80089da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089f2:	ee17 2a90 	vmov	r2, s15
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80089fa:	4b1f      	ldr	r3, [pc, #124]	; (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fe:	0c1b      	lsrs	r3, r3, #16
 8008a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a04:	ee07 3a90 	vmov	s15, r3
 8008a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a14:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a20:	ee17 2a90 	vmov	r2, s15
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008a28:	4b13      	ldr	r3, [pc, #76]	; (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2c:	0e1b      	lsrs	r3, r3, #24
 8008a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a42:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a4e:	ee17 2a90 	vmov	r2, s15
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a56:	e008      	b.n	8008a6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	609a      	str	r2, [r3, #8]
}
 8008a6a:	bf00      	nop
 8008a6c:	3724      	adds	r7, #36	; 0x24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	58024400 	.word	0x58024400
 8008a7c:	03d09000 	.word	0x03d09000
 8008a80:	46000000 	.word	0x46000000
 8008a84:	4c742400 	.word	0x4c742400
 8008a88:	4a742400 	.word	0x4a742400
 8008a8c:	4af42400 	.word	0x4af42400

08008a90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b089      	sub	sp, #36	; 0x24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a98:	4ba1      	ldr	r3, [pc, #644]	; (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9c:	f003 0303 	and.w	r3, r3, #3
 8008aa0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008aa2:	4b9f      	ldr	r3, [pc, #636]	; (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa6:	0d1b      	lsrs	r3, r3, #20
 8008aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008aae:	4b9c      	ldr	r3, [pc, #624]	; (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab2:	0a1b      	lsrs	r3, r3, #8
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008aba:	4b99      	ldr	r3, [pc, #612]	; (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008abe:	08db      	lsrs	r3, r3, #3
 8008ac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	fb02 f303 	mul.w	r3, r2, r3
 8008aca:	ee07 3a90 	vmov	s15, r3
 8008ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 8111 	beq.w	8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	f000 8083 	beq.w	8008bec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	f200 80a1 	bhi.w	8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d056      	beq.n	8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008afa:	e099      	b.n	8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008afc:	4b88      	ldr	r3, [pc, #544]	; (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0320 	and.w	r3, r3, #32
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d02d      	beq.n	8008b64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b08:	4b85      	ldr	r3, [pc, #532]	; (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	08db      	lsrs	r3, r3, #3
 8008b0e:	f003 0303 	and.w	r3, r3, #3
 8008b12:	4a84      	ldr	r2, [pc, #528]	; (8008d24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008b14:	fa22 f303 	lsr.w	r3, r2, r3
 8008b18:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	ee07 3a90 	vmov	s15, r3
 8008b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	ee07 3a90 	vmov	s15, r3
 8008b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b32:	4b7b      	ldr	r3, [pc, #492]	; (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008b62:	e087      	b.n	8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b76:	4b6a      	ldr	r3, [pc, #424]	; (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ba6:	e065      	b.n	8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	ee07 3a90 	vmov	s15, r3
 8008bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bba:	4b59      	ldr	r3, [pc, #356]	; (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bea:	e043      	b.n	8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bfe:	4b48      	ldr	r3, [pc, #288]	; (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c2e:	e021      	b.n	8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c42:	4b37      	ldr	r3, [pc, #220]	; (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4a:	ee07 3a90 	vmov	s15, r3
 8008c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008c74:	4b2a      	ldr	r3, [pc, #168]	; (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c78:	0a5b      	lsrs	r3, r3, #9
 8008c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c7e:	ee07 3a90 	vmov	s15, r3
 8008c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c9a:	ee17 2a90 	vmov	r2, s15
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008ca2:	4b1f      	ldr	r3, [pc, #124]	; (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca6:	0c1b      	lsrs	r3, r3, #16
 8008ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cac:	ee07 3a90 	vmov	s15, r3
 8008cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cc8:	ee17 2a90 	vmov	r2, s15
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008cd0:	4b13      	ldr	r3, [pc, #76]	; (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd4:	0e1b      	lsrs	r3, r3, #24
 8008cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ce6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cea:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cf6:	ee17 2a90 	vmov	r2, s15
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008cfe:	e008      	b.n	8008d12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	609a      	str	r2, [r3, #8]
}
 8008d12:	bf00      	nop
 8008d14:	3724      	adds	r7, #36	; 0x24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	58024400 	.word	0x58024400
 8008d24:	03d09000 	.word	0x03d09000
 8008d28:	46000000 	.word	0x46000000
 8008d2c:	4c742400 	.word	0x4c742400
 8008d30:	4a742400 	.word	0x4a742400
 8008d34:	4af42400 	.word	0x4af42400

08008d38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b089      	sub	sp, #36	; 0x24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d40:	4ba0      	ldr	r3, [pc, #640]	; (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d44:	f003 0303 	and.w	r3, r3, #3
 8008d48:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008d4a:	4b9e      	ldr	r3, [pc, #632]	; (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4e:	091b      	lsrs	r3, r3, #4
 8008d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d54:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008d56:	4b9b      	ldr	r3, [pc, #620]	; (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008d60:	4b98      	ldr	r3, [pc, #608]	; (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d64:	08db      	lsrs	r3, r3, #3
 8008d66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	fb02 f303 	mul.w	r3, r2, r3
 8008d70:	ee07 3a90 	vmov	s15, r3
 8008d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d78:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 8111 	beq.w	8008fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	f000 8083 	beq.w	8008e92 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	f200 80a1 	bhi.w	8008ed6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d056      	beq.n	8008e4e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008da0:	e099      	b.n	8008ed6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008da2:	4b88      	ldr	r3, [pc, #544]	; (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 0320 	and.w	r3, r3, #32
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d02d      	beq.n	8008e0a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008dae:	4b85      	ldr	r3, [pc, #532]	; (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	08db      	lsrs	r3, r3, #3
 8008db4:	f003 0303 	and.w	r3, r3, #3
 8008db8:	4a83      	ldr	r2, [pc, #524]	; (8008fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008dba:	fa22 f303 	lsr.w	r3, r2, r3
 8008dbe:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	ee07 3a90 	vmov	s15, r3
 8008dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	ee07 3a90 	vmov	s15, r3
 8008dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dd8:	4b7a      	ldr	r3, [pc, #488]	; (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de0:	ee07 3a90 	vmov	s15, r3
 8008de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008de8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dec:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008df8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e04:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008e08:	e087      	b.n	8008f1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	ee07 3a90 	vmov	s15, r3
 8008e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e14:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e1c:	4b69      	ldr	r3, [pc, #420]	; (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e24:	ee07 3a90 	vmov	s15, r3
 8008e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e30:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e4c:	e065      	b.n	8008f1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	ee07 3a90 	vmov	s15, r3
 8008e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e58:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008e5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e60:	4b58      	ldr	r3, [pc, #352]	; (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e68:	ee07 3a90 	vmov	s15, r3
 8008e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e70:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e74:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e90:	e043      	b.n	8008f1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	ee07 3a90 	vmov	s15, r3
 8008e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008ea0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea4:	4b47      	ldr	r3, [pc, #284]	; (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eac:	ee07 3a90 	vmov	s15, r3
 8008eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eb8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ebc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ec0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ed0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ed4:	e021      	b.n	8008f1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	ee07 3a90 	vmov	s15, r3
 8008edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee8:	4b36      	ldr	r3, [pc, #216]	; (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef0:	ee07 3a90 	vmov	s15, r3
 8008ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008efc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f18:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008f1a:	4b2a      	ldr	r3, [pc, #168]	; (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1e:	0a5b      	lsrs	r3, r3, #9
 8008f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f24:	ee07 3a90 	vmov	s15, r3
 8008f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f34:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f40:	ee17 2a90 	vmov	r2, s15
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008f48:	4b1e      	ldr	r3, [pc, #120]	; (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4c:	0c1b      	lsrs	r3, r3, #16
 8008f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f6e:	ee17 2a90 	vmov	r2, s15
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008f76:	4b13      	ldr	r3, [pc, #76]	; (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7a:	0e1b      	lsrs	r3, r3, #24
 8008f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f80:	ee07 3a90 	vmov	s15, r3
 8008f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f9c:	ee17 2a90 	vmov	r2, s15
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008fa4:	e008      	b.n	8008fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	609a      	str	r2, [r3, #8]
}
 8008fb8:	bf00      	nop
 8008fba:	3724      	adds	r7, #36	; 0x24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	58024400 	.word	0x58024400
 8008fc8:	03d09000 	.word	0x03d09000
 8008fcc:	46000000 	.word	0x46000000
 8008fd0:	4c742400 	.word	0x4c742400
 8008fd4:	4a742400 	.word	0x4a742400
 8008fd8:	4af42400 	.word	0x4af42400

08008fdc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fea:	4b53      	ldr	r3, [pc, #332]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 8008fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fee:	f003 0303 	and.w	r3, r3, #3
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d101      	bne.n	8008ffa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e099      	b.n	800912e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ffa:	4b4f      	ldr	r3, [pc, #316]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a4e      	ldr	r2, [pc, #312]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 8009000:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009006:	f7f8 fc05 	bl	8001814 <HAL_GetTick>
 800900a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800900c:	e008      	b.n	8009020 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800900e:	f7f8 fc01 	bl	8001814 <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	2b02      	cmp	r3, #2
 800901a:	d901      	bls.n	8009020 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e086      	b.n	800912e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009020:	4b45      	ldr	r3, [pc, #276]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1f0      	bne.n	800900e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800902c:	4b42      	ldr	r3, [pc, #264]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 800902e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009030:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	031b      	lsls	r3, r3, #12
 800903a:	493f      	ldr	r1, [pc, #252]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 800903c:	4313      	orrs	r3, r2
 800903e:	628b      	str	r3, [r1, #40]	; 0x28
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	3b01      	subs	r3, #1
 8009046:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	3b01      	subs	r3, #1
 8009050:	025b      	lsls	r3, r3, #9
 8009052:	b29b      	uxth	r3, r3
 8009054:	431a      	orrs	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	3b01      	subs	r3, #1
 800905c:	041b      	lsls	r3, r3, #16
 800905e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009062:	431a      	orrs	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	3b01      	subs	r3, #1
 800906a:	061b      	lsls	r3, r3, #24
 800906c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009070:	4931      	ldr	r1, [pc, #196]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 8009072:	4313      	orrs	r3, r2
 8009074:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009076:	4b30      	ldr	r3, [pc, #192]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 8009078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	492d      	ldr	r1, [pc, #180]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 8009084:	4313      	orrs	r3, r2
 8009086:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009088:	4b2b      	ldr	r3, [pc, #172]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 800908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908c:	f023 0220 	bic.w	r2, r3, #32
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	4928      	ldr	r1, [pc, #160]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 8009096:	4313      	orrs	r3, r2
 8009098:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800909a:	4b27      	ldr	r3, [pc, #156]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 800909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909e:	4a26      	ldr	r2, [pc, #152]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 80090a0:	f023 0310 	bic.w	r3, r3, #16
 80090a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80090a6:	4b24      	ldr	r3, [pc, #144]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 80090a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090aa:	4b24      	ldr	r3, [pc, #144]	; (800913c <RCCEx_PLL2_Config+0x160>)
 80090ac:	4013      	ands	r3, r2
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	69d2      	ldr	r2, [r2, #28]
 80090b2:	00d2      	lsls	r2, r2, #3
 80090b4:	4920      	ldr	r1, [pc, #128]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80090ba:	4b1f      	ldr	r3, [pc, #124]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 80090bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090be:	4a1e      	ldr	r2, [pc, #120]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 80090c0:	f043 0310 	orr.w	r3, r3, #16
 80090c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d106      	bne.n	80090da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80090cc:	4b1a      	ldr	r3, [pc, #104]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	4a19      	ldr	r2, [pc, #100]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 80090d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090d8:	e00f      	b.n	80090fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d106      	bne.n	80090ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80090e0:	4b15      	ldr	r3, [pc, #84]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	4a14      	ldr	r2, [pc, #80]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 80090e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090ec:	e005      	b.n	80090fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80090ee:	4b12      	ldr	r3, [pc, #72]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 80090f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f2:	4a11      	ldr	r2, [pc, #68]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 80090f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80090f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80090fa:	4b0f      	ldr	r3, [pc, #60]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a0e      	ldr	r2, [pc, #56]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 8009100:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009106:	f7f8 fb85 	bl	8001814 <HAL_GetTick>
 800910a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800910c:	e008      	b.n	8009120 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800910e:	f7f8 fb81 	bl	8001814 <HAL_GetTick>
 8009112:	4602      	mov	r2, r0
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	2b02      	cmp	r3, #2
 800911a:	d901      	bls.n	8009120 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e006      	b.n	800912e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009120:	4b05      	ldr	r3, [pc, #20]	; (8009138 <RCCEx_PLL2_Config+0x15c>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0f0      	beq.n	800910e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800912c:	7bfb      	ldrb	r3, [r7, #15]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	58024400 	.word	0x58024400
 800913c:	ffff0007 	.word	0xffff0007

08009140 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800914e:	4b53      	ldr	r3, [pc, #332]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	2b03      	cmp	r3, #3
 8009158:	d101      	bne.n	800915e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e099      	b.n	8009292 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800915e:	4b4f      	ldr	r3, [pc, #316]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a4e      	ldr	r2, [pc, #312]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800916a:	f7f8 fb53 	bl	8001814 <HAL_GetTick>
 800916e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009170:	e008      	b.n	8009184 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009172:	f7f8 fb4f 	bl	8001814 <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	2b02      	cmp	r3, #2
 800917e:	d901      	bls.n	8009184 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	e086      	b.n	8009292 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009184:	4b45      	ldr	r3, [pc, #276]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1f0      	bne.n	8009172 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009190:	4b42      	ldr	r3, [pc, #264]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009194:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	051b      	lsls	r3, r3, #20
 800919e:	493f      	ldr	r1, [pc, #252]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	628b      	str	r3, [r1, #40]	; 0x28
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	025b      	lsls	r3, r3, #9
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	431a      	orrs	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	3b01      	subs	r3, #1
 80091c0:	041b      	lsls	r3, r3, #16
 80091c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091c6:	431a      	orrs	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	061b      	lsls	r3, r3, #24
 80091d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091d4:	4931      	ldr	r1, [pc, #196]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80091da:	4b30      	ldr	r3, [pc, #192]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 80091dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	492d      	ldr	r1, [pc, #180]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 80091e8:	4313      	orrs	r3, r2
 80091ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80091ec:	4b2b      	ldr	r3, [pc, #172]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 80091ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	4928      	ldr	r1, [pc, #160]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80091fe:	4b27      	ldr	r3, [pc, #156]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009202:	4a26      	ldr	r2, [pc, #152]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009208:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800920a:	4b24      	ldr	r3, [pc, #144]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 800920c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800920e:	4b24      	ldr	r3, [pc, #144]	; (80092a0 <RCCEx_PLL3_Config+0x160>)
 8009210:	4013      	ands	r3, r2
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	69d2      	ldr	r2, [r2, #28]
 8009216:	00d2      	lsls	r2, r2, #3
 8009218:	4920      	ldr	r1, [pc, #128]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 800921a:	4313      	orrs	r3, r2
 800921c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800921e:	4b1f      	ldr	r3, [pc, #124]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009222:	4a1e      	ldr	r2, [pc, #120]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d106      	bne.n	800923e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009230:	4b1a      	ldr	r3, [pc, #104]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	4a19      	ldr	r2, [pc, #100]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009236:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800923a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800923c:	e00f      	b.n	800925e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d106      	bne.n	8009252 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009244:	4b15      	ldr	r3, [pc, #84]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	4a14      	ldr	r2, [pc, #80]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 800924a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800924e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009250:	e005      	b.n	800925e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009252:	4b12      	ldr	r3, [pc, #72]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009256:	4a11      	ldr	r2, [pc, #68]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800925c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800925e:	4b0f      	ldr	r3, [pc, #60]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a0e      	ldr	r2, [pc, #56]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800926a:	f7f8 fad3 	bl	8001814 <HAL_GetTick>
 800926e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009270:	e008      	b.n	8009284 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009272:	f7f8 facf 	bl	8001814 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	2b02      	cmp	r3, #2
 800927e:	d901      	bls.n	8009284 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e006      	b.n	8009292 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009284:	4b05      	ldr	r3, [pc, #20]	; (800929c <RCCEx_PLL3_Config+0x15c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0f0      	beq.n	8009272 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	58024400 	.word	0x58024400
 80092a0:	ffff0007 	.word	0xffff0007

080092a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e049      	b.n	800934a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d106      	bne.n	80092d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7f8 f862 	bl	8001394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	3304      	adds	r3, #4
 80092e0:	4619      	mov	r1, r3
 80092e2:	4610      	mov	r0, r2
 80092e4:	f000 faee 	bl	80098c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
	...

08009354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b01      	cmp	r3, #1
 8009366:	d001      	beq.n	800936c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e054      	b.n	8009416 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2202      	movs	r2, #2
 8009370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68da      	ldr	r2, [r3, #12]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f042 0201 	orr.w	r2, r2, #1
 8009382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a26      	ldr	r2, [pc, #152]	; (8009424 <HAL_TIM_Base_Start_IT+0xd0>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d022      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009396:	d01d      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a22      	ldr	r2, [pc, #136]	; (8009428 <HAL_TIM_Base_Start_IT+0xd4>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d018      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a21      	ldr	r2, [pc, #132]	; (800942c <HAL_TIM_Base_Start_IT+0xd8>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d013      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a1f      	ldr	r2, [pc, #124]	; (8009430 <HAL_TIM_Base_Start_IT+0xdc>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d00e      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a1e      	ldr	r2, [pc, #120]	; (8009434 <HAL_TIM_Base_Start_IT+0xe0>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d009      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a1c      	ldr	r2, [pc, #112]	; (8009438 <HAL_TIM_Base_Start_IT+0xe4>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d004      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x80>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a1b      	ldr	r2, [pc, #108]	; (800943c <HAL_TIM_Base_Start_IT+0xe8>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d115      	bne.n	8009400 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689a      	ldr	r2, [r3, #8]
 80093da:	4b19      	ldr	r3, [pc, #100]	; (8009440 <HAL_TIM_Base_Start_IT+0xec>)
 80093dc:	4013      	ands	r3, r2
 80093de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2b06      	cmp	r3, #6
 80093e4:	d015      	beq.n	8009412 <HAL_TIM_Base_Start_IT+0xbe>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093ec:	d011      	beq.n	8009412 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f042 0201 	orr.w	r2, r2, #1
 80093fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093fe:	e008      	b.n	8009412 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f042 0201 	orr.w	r2, r2, #1
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	e000      	b.n	8009414 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009412:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	40010000 	.word	0x40010000
 8009428:	40000400 	.word	0x40000400
 800942c:	40000800 	.word	0x40000800
 8009430:	40000c00 	.word	0x40000c00
 8009434:	40010400 	.word	0x40010400
 8009438:	40001800 	.word	0x40001800
 800943c:	40014000 	.word	0x40014000
 8009440:	00010007 	.word	0x00010007

08009444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	f003 0302 	and.w	r3, r3, #2
 8009456:	2b02      	cmp	r3, #2
 8009458:	d122      	bne.n	80094a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f003 0302 	and.w	r3, r3, #2
 8009464:	2b02      	cmp	r3, #2
 8009466:	d11b      	bne.n	80094a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f06f 0202 	mvn.w	r2, #2
 8009470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	f003 0303 	and.w	r3, r3, #3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d003      	beq.n	800948e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f9fe 	bl	8009888 <HAL_TIM_IC_CaptureCallback>
 800948c:	e005      	b.n	800949a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f9f0 	bl	8009874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fa01 	bl	800989c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	f003 0304 	and.w	r3, r3, #4
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	d122      	bne.n	80094f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f003 0304 	and.w	r3, r3, #4
 80094b8:	2b04      	cmp	r3, #4
 80094ba:	d11b      	bne.n	80094f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f06f 0204 	mvn.w	r2, #4
 80094c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2202      	movs	r2, #2
 80094ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d003      	beq.n	80094e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f9d4 	bl	8009888 <HAL_TIM_IC_CaptureCallback>
 80094e0:	e005      	b.n	80094ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f9c6 	bl	8009874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f9d7 	bl	800989c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	f003 0308 	and.w	r3, r3, #8
 80094fe:	2b08      	cmp	r3, #8
 8009500:	d122      	bne.n	8009548 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	f003 0308 	and.w	r3, r3, #8
 800950c:	2b08      	cmp	r3, #8
 800950e:	d11b      	bne.n	8009548 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f06f 0208 	mvn.w	r2, #8
 8009518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2204      	movs	r2, #4
 800951e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f9aa 	bl	8009888 <HAL_TIM_IC_CaptureCallback>
 8009534:	e005      	b.n	8009542 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f99c 	bl	8009874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f9ad 	bl	800989c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	f003 0310 	and.w	r3, r3, #16
 8009552:	2b10      	cmp	r3, #16
 8009554:	d122      	bne.n	800959c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	f003 0310 	and.w	r3, r3, #16
 8009560:	2b10      	cmp	r3, #16
 8009562:	d11b      	bne.n	800959c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f06f 0210 	mvn.w	r2, #16
 800956c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2208      	movs	r2, #8
 8009572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f980 	bl	8009888 <HAL_TIM_IC_CaptureCallback>
 8009588:	e005      	b.n	8009596 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f972 	bl	8009874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f983 	bl	800989c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	f003 0301 	and.w	r3, r3, #1
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d10e      	bne.n	80095c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d107      	bne.n	80095c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f06f 0201 	mvn.w	r2, #1
 80095c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7f7 fd74 	bl	80010b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d2:	2b80      	cmp	r3, #128	; 0x80
 80095d4:	d10e      	bne.n	80095f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e0:	2b80      	cmp	r3, #128	; 0x80
 80095e2:	d107      	bne.n	80095f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fb38 	bl	8009c64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009602:	d10e      	bne.n	8009622 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800960e:	2b80      	cmp	r3, #128	; 0x80
 8009610:	d107      	bne.n	8009622 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800961a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fb2b 	bl	8009c78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962c:	2b40      	cmp	r3, #64	; 0x40
 800962e:	d10e      	bne.n	800964e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963a:	2b40      	cmp	r3, #64	; 0x40
 800963c:	d107      	bne.n	800964e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f931 	bl	80098b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	f003 0320 	and.w	r3, r3, #32
 8009658:	2b20      	cmp	r3, #32
 800965a:	d10e      	bne.n	800967a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	f003 0320 	and.w	r3, r3, #32
 8009666:	2b20      	cmp	r3, #32
 8009668:	d107      	bne.n	800967a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f06f 0220 	mvn.w	r2, #32
 8009672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 faeb 	bl	8009c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800967a:	bf00      	nop
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009698:	2b01      	cmp	r3, #1
 800969a:	d101      	bne.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c>
 800969c:	2302      	movs	r3, #2
 800969e:	e0dc      	b.n	800985a <HAL_TIM_ConfigClockSource+0x1d6>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2202      	movs	r2, #2
 80096ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	4b6a      	ldr	r3, [pc, #424]	; (8009864 <HAL_TIM_ConfigClockSource+0x1e0>)
 80096bc:	4013      	ands	r3, r2
 80096be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a64      	ldr	r2, [pc, #400]	; (8009868 <HAL_TIM_ConfigClockSource+0x1e4>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	f000 80a9 	beq.w	800982e <HAL_TIM_ConfigClockSource+0x1aa>
 80096dc:	4a62      	ldr	r2, [pc, #392]	; (8009868 <HAL_TIM_ConfigClockSource+0x1e4>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	f200 80ae 	bhi.w	8009840 <HAL_TIM_ConfigClockSource+0x1bc>
 80096e4:	4a61      	ldr	r2, [pc, #388]	; (800986c <HAL_TIM_ConfigClockSource+0x1e8>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	f000 80a1 	beq.w	800982e <HAL_TIM_ConfigClockSource+0x1aa>
 80096ec:	4a5f      	ldr	r2, [pc, #380]	; (800986c <HAL_TIM_ConfigClockSource+0x1e8>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	f200 80a6 	bhi.w	8009840 <HAL_TIM_ConfigClockSource+0x1bc>
 80096f4:	4a5e      	ldr	r2, [pc, #376]	; (8009870 <HAL_TIM_ConfigClockSource+0x1ec>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	f000 8099 	beq.w	800982e <HAL_TIM_ConfigClockSource+0x1aa>
 80096fc:	4a5c      	ldr	r2, [pc, #368]	; (8009870 <HAL_TIM_ConfigClockSource+0x1ec>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	f200 809e 	bhi.w	8009840 <HAL_TIM_ConfigClockSource+0x1bc>
 8009704:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009708:	f000 8091 	beq.w	800982e <HAL_TIM_ConfigClockSource+0x1aa>
 800970c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009710:	f200 8096 	bhi.w	8009840 <HAL_TIM_ConfigClockSource+0x1bc>
 8009714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009718:	f000 8089 	beq.w	800982e <HAL_TIM_ConfigClockSource+0x1aa>
 800971c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009720:	f200 808e 	bhi.w	8009840 <HAL_TIM_ConfigClockSource+0x1bc>
 8009724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009728:	d03e      	beq.n	80097a8 <HAL_TIM_ConfigClockSource+0x124>
 800972a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800972e:	f200 8087 	bhi.w	8009840 <HAL_TIM_ConfigClockSource+0x1bc>
 8009732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009736:	f000 8086 	beq.w	8009846 <HAL_TIM_ConfigClockSource+0x1c2>
 800973a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800973e:	d87f      	bhi.n	8009840 <HAL_TIM_ConfigClockSource+0x1bc>
 8009740:	2b70      	cmp	r3, #112	; 0x70
 8009742:	d01a      	beq.n	800977a <HAL_TIM_ConfigClockSource+0xf6>
 8009744:	2b70      	cmp	r3, #112	; 0x70
 8009746:	d87b      	bhi.n	8009840 <HAL_TIM_ConfigClockSource+0x1bc>
 8009748:	2b60      	cmp	r3, #96	; 0x60
 800974a:	d050      	beq.n	80097ee <HAL_TIM_ConfigClockSource+0x16a>
 800974c:	2b60      	cmp	r3, #96	; 0x60
 800974e:	d877      	bhi.n	8009840 <HAL_TIM_ConfigClockSource+0x1bc>
 8009750:	2b50      	cmp	r3, #80	; 0x50
 8009752:	d03c      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x14a>
 8009754:	2b50      	cmp	r3, #80	; 0x50
 8009756:	d873      	bhi.n	8009840 <HAL_TIM_ConfigClockSource+0x1bc>
 8009758:	2b40      	cmp	r3, #64	; 0x40
 800975a:	d058      	beq.n	800980e <HAL_TIM_ConfigClockSource+0x18a>
 800975c:	2b40      	cmp	r3, #64	; 0x40
 800975e:	d86f      	bhi.n	8009840 <HAL_TIM_ConfigClockSource+0x1bc>
 8009760:	2b30      	cmp	r3, #48	; 0x30
 8009762:	d064      	beq.n	800982e <HAL_TIM_ConfigClockSource+0x1aa>
 8009764:	2b30      	cmp	r3, #48	; 0x30
 8009766:	d86b      	bhi.n	8009840 <HAL_TIM_ConfigClockSource+0x1bc>
 8009768:	2b20      	cmp	r3, #32
 800976a:	d060      	beq.n	800982e <HAL_TIM_ConfigClockSource+0x1aa>
 800976c:	2b20      	cmp	r3, #32
 800976e:	d867      	bhi.n	8009840 <HAL_TIM_ConfigClockSource+0x1bc>
 8009770:	2b00      	cmp	r3, #0
 8009772:	d05c      	beq.n	800982e <HAL_TIM_ConfigClockSource+0x1aa>
 8009774:	2b10      	cmp	r3, #16
 8009776:	d05a      	beq.n	800982e <HAL_TIM_ConfigClockSource+0x1aa>
 8009778:	e062      	b.n	8009840 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	6899      	ldr	r1, [r3, #8]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	685a      	ldr	r2, [r3, #4]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	f000 f9b3 	bl	8009af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800979c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	609a      	str	r2, [r3, #8]
      break;
 80097a6:	e04f      	b.n	8009848 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6818      	ldr	r0, [r3, #0]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	6899      	ldr	r1, [r3, #8]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	f000 f99c 	bl	8009af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	689a      	ldr	r2, [r3, #8]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097ca:	609a      	str	r2, [r3, #8]
      break;
 80097cc:	e03c      	b.n	8009848 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6818      	ldr	r0, [r3, #0]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	6859      	ldr	r1, [r3, #4]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	461a      	mov	r2, r3
 80097dc:	f000 f90c 	bl	80099f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2150      	movs	r1, #80	; 0x50
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 f966 	bl	8009ab8 <TIM_ITRx_SetConfig>
      break;
 80097ec:	e02c      	b.n	8009848 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6818      	ldr	r0, [r3, #0]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	6859      	ldr	r1, [r3, #4]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	461a      	mov	r2, r3
 80097fc:	f000 f92b 	bl	8009a56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2160      	movs	r1, #96	; 0x60
 8009806:	4618      	mov	r0, r3
 8009808:	f000 f956 	bl	8009ab8 <TIM_ITRx_SetConfig>
      break;
 800980c:	e01c      	b.n	8009848 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6818      	ldr	r0, [r3, #0]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	6859      	ldr	r1, [r3, #4]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	461a      	mov	r2, r3
 800981c:	f000 f8ec 	bl	80099f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2140      	movs	r1, #64	; 0x40
 8009826:	4618      	mov	r0, r3
 8009828:	f000 f946 	bl	8009ab8 <TIM_ITRx_SetConfig>
      break;
 800982c:	e00c      	b.n	8009848 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4619      	mov	r1, r3
 8009838:	4610      	mov	r0, r2
 800983a:	f000 f93d 	bl	8009ab8 <TIM_ITRx_SetConfig>
      break;
 800983e:	e003      	b.n	8009848 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	73fb      	strb	r3, [r7, #15]
      break;
 8009844:	e000      	b.n	8009848 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009846:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009858:	7bfb      	ldrb	r3, [r7, #15]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	ffceff88 	.word	0xffceff88
 8009868:	00100040 	.word	0x00100040
 800986c:	00100030 	.word	0x00100030
 8009870:	00100020 	.word	0x00100020

08009874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a40      	ldr	r2, [pc, #256]	; (80099d8 <TIM_Base_SetConfig+0x114>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d013      	beq.n	8009904 <TIM_Base_SetConfig+0x40>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098e2:	d00f      	beq.n	8009904 <TIM_Base_SetConfig+0x40>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a3d      	ldr	r2, [pc, #244]	; (80099dc <TIM_Base_SetConfig+0x118>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d00b      	beq.n	8009904 <TIM_Base_SetConfig+0x40>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a3c      	ldr	r2, [pc, #240]	; (80099e0 <TIM_Base_SetConfig+0x11c>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d007      	beq.n	8009904 <TIM_Base_SetConfig+0x40>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a3b      	ldr	r2, [pc, #236]	; (80099e4 <TIM_Base_SetConfig+0x120>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d003      	beq.n	8009904 <TIM_Base_SetConfig+0x40>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a3a      	ldr	r2, [pc, #232]	; (80099e8 <TIM_Base_SetConfig+0x124>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d108      	bne.n	8009916 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800990a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	4313      	orrs	r3, r2
 8009914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a2f      	ldr	r2, [pc, #188]	; (80099d8 <TIM_Base_SetConfig+0x114>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d01f      	beq.n	800995e <TIM_Base_SetConfig+0x9a>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009924:	d01b      	beq.n	800995e <TIM_Base_SetConfig+0x9a>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a2c      	ldr	r2, [pc, #176]	; (80099dc <TIM_Base_SetConfig+0x118>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d017      	beq.n	800995e <TIM_Base_SetConfig+0x9a>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a2b      	ldr	r2, [pc, #172]	; (80099e0 <TIM_Base_SetConfig+0x11c>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d013      	beq.n	800995e <TIM_Base_SetConfig+0x9a>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a2a      	ldr	r2, [pc, #168]	; (80099e4 <TIM_Base_SetConfig+0x120>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d00f      	beq.n	800995e <TIM_Base_SetConfig+0x9a>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a29      	ldr	r2, [pc, #164]	; (80099e8 <TIM_Base_SetConfig+0x124>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d00b      	beq.n	800995e <TIM_Base_SetConfig+0x9a>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a28      	ldr	r2, [pc, #160]	; (80099ec <TIM_Base_SetConfig+0x128>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d007      	beq.n	800995e <TIM_Base_SetConfig+0x9a>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a27      	ldr	r2, [pc, #156]	; (80099f0 <TIM_Base_SetConfig+0x12c>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d003      	beq.n	800995e <TIM_Base_SetConfig+0x9a>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a26      	ldr	r2, [pc, #152]	; (80099f4 <TIM_Base_SetConfig+0x130>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d108      	bne.n	8009970 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	4313      	orrs	r3, r2
 800996e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	4313      	orrs	r3, r2
 800997c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	689a      	ldr	r2, [r3, #8]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a10      	ldr	r2, [pc, #64]	; (80099d8 <TIM_Base_SetConfig+0x114>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d00f      	beq.n	80099bc <TIM_Base_SetConfig+0xf8>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a12      	ldr	r2, [pc, #72]	; (80099e8 <TIM_Base_SetConfig+0x124>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d00b      	beq.n	80099bc <TIM_Base_SetConfig+0xf8>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a11      	ldr	r2, [pc, #68]	; (80099ec <TIM_Base_SetConfig+0x128>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d007      	beq.n	80099bc <TIM_Base_SetConfig+0xf8>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a10      	ldr	r2, [pc, #64]	; (80099f0 <TIM_Base_SetConfig+0x12c>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d003      	beq.n	80099bc <TIM_Base_SetConfig+0xf8>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a0f      	ldr	r2, [pc, #60]	; (80099f4 <TIM_Base_SetConfig+0x130>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d103      	bne.n	80099c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	691a      	ldr	r2, [r3, #16]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	615a      	str	r2, [r3, #20]
}
 80099ca:	bf00      	nop
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	40010000 	.word	0x40010000
 80099dc:	40000400 	.word	0x40000400
 80099e0:	40000800 	.word	0x40000800
 80099e4:	40000c00 	.word	0x40000c00
 80099e8:	40010400 	.word	0x40010400
 80099ec:	40014000 	.word	0x40014000
 80099f0:	40014400 	.word	0x40014400
 80099f4:	40014800 	.word	0x40014800

080099f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b087      	sub	sp, #28
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6a1b      	ldr	r3, [r3, #32]
 8009a0e:	f023 0201 	bic.w	r2, r3, #1
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	011b      	lsls	r3, r3, #4
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f023 030a 	bic.w	r3, r3, #10
 8009a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	621a      	str	r2, [r3, #32]
}
 8009a4a:	bf00      	nop
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b087      	sub	sp, #28
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	60f8      	str	r0, [r7, #12]
 8009a5e:	60b9      	str	r1, [r7, #8]
 8009a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	f023 0210 	bic.w	r2, r3, #16
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	031b      	lsls	r3, r3, #12
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	011b      	lsls	r3, r3, #4
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	621a      	str	r2, [r3, #32]
}
 8009aaa:	bf00      	nop
 8009aac:	371c      	adds	r7, #28
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
	...

08009ab8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <TIM_ITRx_SetConfig+0x38>)
 8009acc:	4013      	ands	r3, r2
 8009ace:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	f043 0307 	orr.w	r3, r3, #7
 8009ada:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	609a      	str	r2, [r3, #8]
}
 8009ae2:	bf00      	nop
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	ffcfff8f 	.word	0xffcfff8f

08009af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b087      	sub	sp, #28
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
 8009b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	021a      	lsls	r2, r3, #8
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	431a      	orrs	r2, r3
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	609a      	str	r2, [r3, #8]
}
 8009b28:	bf00      	nop
 8009b2a:	371c      	adds	r7, #28
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d101      	bne.n	8009b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b48:	2302      	movs	r3, #2
 8009b4a:	e06d      	b.n	8009c28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2202      	movs	r2, #2
 8009b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a30      	ldr	r2, [pc, #192]	; (8009c34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d004      	beq.n	8009b80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a2f      	ldr	r2, [pc, #188]	; (8009c38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d108      	bne.n	8009b92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a20      	ldr	r2, [pc, #128]	; (8009c34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d022      	beq.n	8009bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bbe:	d01d      	beq.n	8009bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a1d      	ldr	r2, [pc, #116]	; (8009c3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d018      	beq.n	8009bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a1c      	ldr	r2, [pc, #112]	; (8009c40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d013      	beq.n	8009bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a1a      	ldr	r2, [pc, #104]	; (8009c44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d00e      	beq.n	8009bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a15      	ldr	r2, [pc, #84]	; (8009c38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d009      	beq.n	8009bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a16      	ldr	r2, [pc, #88]	; (8009c48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d004      	beq.n	8009bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a15      	ldr	r2, [pc, #84]	; (8009c4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d10c      	bne.n	8009c16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	40010000 	.word	0x40010000
 8009c38:	40010400 	.word	0x40010400
 8009c3c:	40000400 	.word	0x40000400
 8009c40:	40000800 	.word	0x40000800
 8009c44:	40000c00 	.word	0x40000c00
 8009c48:	40001800 	.word	0x40001800
 8009c4c:	40014000 	.word	0x40014000

08009c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e042      	b.n	8009d24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d106      	bne.n	8009cb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7f7 fb95 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2224      	movs	r2, #36	; 0x24
 8009cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f022 0201 	bic.w	r2, r2, #1
 8009ccc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f8c2 	bl	8009e58 <UART_SetConfig>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d101      	bne.n	8009cde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e022      	b.n	8009d24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fe1e 	bl	800a928 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009cfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689a      	ldr	r2, [r3, #8]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f042 0201 	orr.w	r2, r2, #1
 8009d1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fea5 	bl	800aa6c <UART_CheckIdleState>
 8009d22:	4603      	mov	r3, r0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08a      	sub	sp, #40	; 0x28
 8009d30:	af02      	add	r7, sp, #8
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	603b      	str	r3, [r7, #0]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d42:	2b20      	cmp	r3, #32
 8009d44:	f040 8083 	bne.w	8009e4e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <HAL_UART_Transmit+0x28>
 8009d4e:	88fb      	ldrh	r3, [r7, #6]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e07b      	b.n	8009e50 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d101      	bne.n	8009d66 <HAL_UART_Transmit+0x3a>
 8009d62:	2302      	movs	r3, #2
 8009d64:	e074      	b.n	8009e50 <HAL_UART_Transmit+0x124>
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2221      	movs	r2, #33	; 0x21
 8009d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d7e:	f7f7 fd49 	bl	8001814 <HAL_GetTick>
 8009d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	88fa      	ldrh	r2, [r7, #6]
 8009d88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	88fa      	ldrh	r2, [r7, #6]
 8009d90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d9c:	d108      	bne.n	8009db0 <HAL_UART_Transmit+0x84>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d104      	bne.n	8009db0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009da6:	2300      	movs	r3, #0
 8009da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	61bb      	str	r3, [r7, #24]
 8009dae:	e003      	b.n	8009db8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009db4:	2300      	movs	r3, #0
 8009db6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009dc0:	e02c      	b.n	8009e1c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	2180      	movs	r1, #128	; 0x80
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f000 fe98 	bl	800ab02 <UART_WaitOnFlagUntilTimeout>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d001      	beq.n	8009ddc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e039      	b.n	8009e50 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10b      	bne.n	8009dfa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	881b      	ldrh	r3, [r3, #0]
 8009de6:	461a      	mov	r2, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009df0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	3302      	adds	r3, #2
 8009df6:	61bb      	str	r3, [r7, #24]
 8009df8:	e007      	b.n	8009e0a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	781a      	ldrb	r2, [r3, #0]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	3301      	adds	r3, #1
 8009e08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	3b01      	subs	r3, #1
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1cc      	bne.n	8009dc2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	2140      	movs	r1, #64	; 0x40
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f000 fe65 	bl	800ab02 <UART_WaitOnFlagUntilTimeout>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e006      	b.n	8009e50 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2220      	movs	r2, #32
 8009e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e000      	b.n	8009e50 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009e4e:	2302      	movs	r3, #2
  }
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3720      	adds	r7, #32
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e5c:	b092      	sub	sp, #72	; 0x48
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e62:	2300      	movs	r3, #0
 8009e64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	689a      	ldr	r2, [r3, #8]
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	431a      	orrs	r2, r3
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	431a      	orrs	r2, r3
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	69db      	ldr	r3, [r3, #28]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	4bbe      	ldr	r3, [pc, #760]	; (800a180 <UART_SetConfig+0x328>)
 8009e88:	4013      	ands	r3, r2
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	6812      	ldr	r2, [r2, #0]
 8009e8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e90:	430b      	orrs	r3, r1
 8009e92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	68da      	ldr	r2, [r3, #12]
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4ab3      	ldr	r2, [pc, #716]	; (800a184 <UART_SetConfig+0x32c>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d004      	beq.n	8009ec4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	689a      	ldr	r2, [r3, #8]
 8009eca:	4baf      	ldr	r3, [pc, #700]	; (800a188 <UART_SetConfig+0x330>)
 8009ecc:	4013      	ands	r3, r2
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	6812      	ldr	r2, [r2, #0]
 8009ed2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ed4:	430b      	orrs	r3, r1
 8009ed6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ede:	f023 010f 	bic.w	r1, r3, #15
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4aa6      	ldr	r2, [pc, #664]	; (800a18c <UART_SetConfig+0x334>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d177      	bne.n	8009fe8 <UART_SetConfig+0x190>
 8009ef8:	4ba5      	ldr	r3, [pc, #660]	; (800a190 <UART_SetConfig+0x338>)
 8009efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009efc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f00:	2b28      	cmp	r3, #40	; 0x28
 8009f02:	d86d      	bhi.n	8009fe0 <UART_SetConfig+0x188>
 8009f04:	a201      	add	r2, pc, #4	; (adr r2, 8009f0c <UART_SetConfig+0xb4>)
 8009f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0a:	bf00      	nop
 8009f0c:	08009fb1 	.word	0x08009fb1
 8009f10:	08009fe1 	.word	0x08009fe1
 8009f14:	08009fe1 	.word	0x08009fe1
 8009f18:	08009fe1 	.word	0x08009fe1
 8009f1c:	08009fe1 	.word	0x08009fe1
 8009f20:	08009fe1 	.word	0x08009fe1
 8009f24:	08009fe1 	.word	0x08009fe1
 8009f28:	08009fe1 	.word	0x08009fe1
 8009f2c:	08009fb9 	.word	0x08009fb9
 8009f30:	08009fe1 	.word	0x08009fe1
 8009f34:	08009fe1 	.word	0x08009fe1
 8009f38:	08009fe1 	.word	0x08009fe1
 8009f3c:	08009fe1 	.word	0x08009fe1
 8009f40:	08009fe1 	.word	0x08009fe1
 8009f44:	08009fe1 	.word	0x08009fe1
 8009f48:	08009fe1 	.word	0x08009fe1
 8009f4c:	08009fc1 	.word	0x08009fc1
 8009f50:	08009fe1 	.word	0x08009fe1
 8009f54:	08009fe1 	.word	0x08009fe1
 8009f58:	08009fe1 	.word	0x08009fe1
 8009f5c:	08009fe1 	.word	0x08009fe1
 8009f60:	08009fe1 	.word	0x08009fe1
 8009f64:	08009fe1 	.word	0x08009fe1
 8009f68:	08009fe1 	.word	0x08009fe1
 8009f6c:	08009fc9 	.word	0x08009fc9
 8009f70:	08009fe1 	.word	0x08009fe1
 8009f74:	08009fe1 	.word	0x08009fe1
 8009f78:	08009fe1 	.word	0x08009fe1
 8009f7c:	08009fe1 	.word	0x08009fe1
 8009f80:	08009fe1 	.word	0x08009fe1
 8009f84:	08009fe1 	.word	0x08009fe1
 8009f88:	08009fe1 	.word	0x08009fe1
 8009f8c:	08009fd1 	.word	0x08009fd1
 8009f90:	08009fe1 	.word	0x08009fe1
 8009f94:	08009fe1 	.word	0x08009fe1
 8009f98:	08009fe1 	.word	0x08009fe1
 8009f9c:	08009fe1 	.word	0x08009fe1
 8009fa0:	08009fe1 	.word	0x08009fe1
 8009fa4:	08009fe1 	.word	0x08009fe1
 8009fa8:	08009fe1 	.word	0x08009fe1
 8009fac:	08009fd9 	.word	0x08009fd9
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fb6:	e222      	b.n	800a3fe <UART_SetConfig+0x5a6>
 8009fb8:	2304      	movs	r3, #4
 8009fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fbe:	e21e      	b.n	800a3fe <UART_SetConfig+0x5a6>
 8009fc0:	2308      	movs	r3, #8
 8009fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc6:	e21a      	b.n	800a3fe <UART_SetConfig+0x5a6>
 8009fc8:	2310      	movs	r3, #16
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fce:	e216      	b.n	800a3fe <UART_SetConfig+0x5a6>
 8009fd0:	2320      	movs	r3, #32
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fd6:	e212      	b.n	800a3fe <UART_SetConfig+0x5a6>
 8009fd8:	2340      	movs	r3, #64	; 0x40
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fde:	e20e      	b.n	800a3fe <UART_SetConfig+0x5a6>
 8009fe0:	2380      	movs	r3, #128	; 0x80
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fe6:	e20a      	b.n	800a3fe <UART_SetConfig+0x5a6>
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a69      	ldr	r2, [pc, #420]	; (800a194 <UART_SetConfig+0x33c>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d130      	bne.n	800a054 <UART_SetConfig+0x1fc>
 8009ff2:	4b67      	ldr	r3, [pc, #412]	; (800a190 <UART_SetConfig+0x338>)
 8009ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff6:	f003 0307 	and.w	r3, r3, #7
 8009ffa:	2b05      	cmp	r3, #5
 8009ffc:	d826      	bhi.n	800a04c <UART_SetConfig+0x1f4>
 8009ffe:	a201      	add	r2, pc, #4	; (adr r2, 800a004 <UART_SetConfig+0x1ac>)
 800a000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a004:	0800a01d 	.word	0x0800a01d
 800a008:	0800a025 	.word	0x0800a025
 800a00c:	0800a02d 	.word	0x0800a02d
 800a010:	0800a035 	.word	0x0800a035
 800a014:	0800a03d 	.word	0x0800a03d
 800a018:	0800a045 	.word	0x0800a045
 800a01c:	2300      	movs	r3, #0
 800a01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a022:	e1ec      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a024:	2304      	movs	r3, #4
 800a026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a02a:	e1e8      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a02c:	2308      	movs	r3, #8
 800a02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a032:	e1e4      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a034:	2310      	movs	r3, #16
 800a036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a03a:	e1e0      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a03c:	2320      	movs	r3, #32
 800a03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a042:	e1dc      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a044:	2340      	movs	r3, #64	; 0x40
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a04a:	e1d8      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a04c:	2380      	movs	r3, #128	; 0x80
 800a04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a052:	e1d4      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a4f      	ldr	r2, [pc, #316]	; (800a198 <UART_SetConfig+0x340>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d130      	bne.n	800a0c0 <UART_SetConfig+0x268>
 800a05e:	4b4c      	ldr	r3, [pc, #304]	; (800a190 <UART_SetConfig+0x338>)
 800a060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a062:	f003 0307 	and.w	r3, r3, #7
 800a066:	2b05      	cmp	r3, #5
 800a068:	d826      	bhi.n	800a0b8 <UART_SetConfig+0x260>
 800a06a:	a201      	add	r2, pc, #4	; (adr r2, 800a070 <UART_SetConfig+0x218>)
 800a06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a070:	0800a089 	.word	0x0800a089
 800a074:	0800a091 	.word	0x0800a091
 800a078:	0800a099 	.word	0x0800a099
 800a07c:	0800a0a1 	.word	0x0800a0a1
 800a080:	0800a0a9 	.word	0x0800a0a9
 800a084:	0800a0b1 	.word	0x0800a0b1
 800a088:	2300      	movs	r3, #0
 800a08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a08e:	e1b6      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a090:	2304      	movs	r3, #4
 800a092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a096:	e1b2      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a098:	2308      	movs	r3, #8
 800a09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a09e:	e1ae      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a0a0:	2310      	movs	r3, #16
 800a0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0a6:	e1aa      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a0a8:	2320      	movs	r3, #32
 800a0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ae:	e1a6      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a0b0:	2340      	movs	r3, #64	; 0x40
 800a0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0b6:	e1a2      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a0b8:	2380      	movs	r3, #128	; 0x80
 800a0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0be:	e19e      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a35      	ldr	r2, [pc, #212]	; (800a19c <UART_SetConfig+0x344>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d130      	bne.n	800a12c <UART_SetConfig+0x2d4>
 800a0ca:	4b31      	ldr	r3, [pc, #196]	; (800a190 <UART_SetConfig+0x338>)
 800a0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ce:	f003 0307 	and.w	r3, r3, #7
 800a0d2:	2b05      	cmp	r3, #5
 800a0d4:	d826      	bhi.n	800a124 <UART_SetConfig+0x2cc>
 800a0d6:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <UART_SetConfig+0x284>)
 800a0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0dc:	0800a0f5 	.word	0x0800a0f5
 800a0e0:	0800a0fd 	.word	0x0800a0fd
 800a0e4:	0800a105 	.word	0x0800a105
 800a0e8:	0800a10d 	.word	0x0800a10d
 800a0ec:	0800a115 	.word	0x0800a115
 800a0f0:	0800a11d 	.word	0x0800a11d
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0fa:	e180      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a0fc:	2304      	movs	r3, #4
 800a0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a102:	e17c      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a104:	2308      	movs	r3, #8
 800a106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a10a:	e178      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a10c:	2310      	movs	r3, #16
 800a10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a112:	e174      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a114:	2320      	movs	r3, #32
 800a116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a11a:	e170      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a11c:	2340      	movs	r3, #64	; 0x40
 800a11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a122:	e16c      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a124:	2380      	movs	r3, #128	; 0x80
 800a126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a12a:	e168      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a1b      	ldr	r2, [pc, #108]	; (800a1a0 <UART_SetConfig+0x348>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d142      	bne.n	800a1bc <UART_SetConfig+0x364>
 800a136:	4b16      	ldr	r3, [pc, #88]	; (800a190 <UART_SetConfig+0x338>)
 800a138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a13a:	f003 0307 	and.w	r3, r3, #7
 800a13e:	2b05      	cmp	r3, #5
 800a140:	d838      	bhi.n	800a1b4 <UART_SetConfig+0x35c>
 800a142:	a201      	add	r2, pc, #4	; (adr r2, 800a148 <UART_SetConfig+0x2f0>)
 800a144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a148:	0800a161 	.word	0x0800a161
 800a14c:	0800a169 	.word	0x0800a169
 800a150:	0800a171 	.word	0x0800a171
 800a154:	0800a179 	.word	0x0800a179
 800a158:	0800a1a5 	.word	0x0800a1a5
 800a15c:	0800a1ad 	.word	0x0800a1ad
 800a160:	2300      	movs	r3, #0
 800a162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a166:	e14a      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a168:	2304      	movs	r3, #4
 800a16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a16e:	e146      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a170:	2308      	movs	r3, #8
 800a172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a176:	e142      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a178:	2310      	movs	r3, #16
 800a17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a17e:	e13e      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a180:	cfff69f3 	.word	0xcfff69f3
 800a184:	58000c00 	.word	0x58000c00
 800a188:	11fff4ff 	.word	0x11fff4ff
 800a18c:	40011000 	.word	0x40011000
 800a190:	58024400 	.word	0x58024400
 800a194:	40004400 	.word	0x40004400
 800a198:	40004800 	.word	0x40004800
 800a19c:	40004c00 	.word	0x40004c00
 800a1a0:	40005000 	.word	0x40005000
 800a1a4:	2320      	movs	r3, #32
 800a1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1aa:	e128      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a1ac:	2340      	movs	r3, #64	; 0x40
 800a1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1b2:	e124      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a1b4:	2380      	movs	r3, #128	; 0x80
 800a1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ba:	e120      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4acb      	ldr	r2, [pc, #812]	; (800a4f0 <UART_SetConfig+0x698>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d176      	bne.n	800a2b4 <UART_SetConfig+0x45c>
 800a1c6:	4bcb      	ldr	r3, [pc, #812]	; (800a4f4 <UART_SetConfig+0x69c>)
 800a1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1ce:	2b28      	cmp	r3, #40	; 0x28
 800a1d0:	d86c      	bhi.n	800a2ac <UART_SetConfig+0x454>
 800a1d2:	a201      	add	r2, pc, #4	; (adr r2, 800a1d8 <UART_SetConfig+0x380>)
 800a1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d8:	0800a27d 	.word	0x0800a27d
 800a1dc:	0800a2ad 	.word	0x0800a2ad
 800a1e0:	0800a2ad 	.word	0x0800a2ad
 800a1e4:	0800a2ad 	.word	0x0800a2ad
 800a1e8:	0800a2ad 	.word	0x0800a2ad
 800a1ec:	0800a2ad 	.word	0x0800a2ad
 800a1f0:	0800a2ad 	.word	0x0800a2ad
 800a1f4:	0800a2ad 	.word	0x0800a2ad
 800a1f8:	0800a285 	.word	0x0800a285
 800a1fc:	0800a2ad 	.word	0x0800a2ad
 800a200:	0800a2ad 	.word	0x0800a2ad
 800a204:	0800a2ad 	.word	0x0800a2ad
 800a208:	0800a2ad 	.word	0x0800a2ad
 800a20c:	0800a2ad 	.word	0x0800a2ad
 800a210:	0800a2ad 	.word	0x0800a2ad
 800a214:	0800a2ad 	.word	0x0800a2ad
 800a218:	0800a28d 	.word	0x0800a28d
 800a21c:	0800a2ad 	.word	0x0800a2ad
 800a220:	0800a2ad 	.word	0x0800a2ad
 800a224:	0800a2ad 	.word	0x0800a2ad
 800a228:	0800a2ad 	.word	0x0800a2ad
 800a22c:	0800a2ad 	.word	0x0800a2ad
 800a230:	0800a2ad 	.word	0x0800a2ad
 800a234:	0800a2ad 	.word	0x0800a2ad
 800a238:	0800a295 	.word	0x0800a295
 800a23c:	0800a2ad 	.word	0x0800a2ad
 800a240:	0800a2ad 	.word	0x0800a2ad
 800a244:	0800a2ad 	.word	0x0800a2ad
 800a248:	0800a2ad 	.word	0x0800a2ad
 800a24c:	0800a2ad 	.word	0x0800a2ad
 800a250:	0800a2ad 	.word	0x0800a2ad
 800a254:	0800a2ad 	.word	0x0800a2ad
 800a258:	0800a29d 	.word	0x0800a29d
 800a25c:	0800a2ad 	.word	0x0800a2ad
 800a260:	0800a2ad 	.word	0x0800a2ad
 800a264:	0800a2ad 	.word	0x0800a2ad
 800a268:	0800a2ad 	.word	0x0800a2ad
 800a26c:	0800a2ad 	.word	0x0800a2ad
 800a270:	0800a2ad 	.word	0x0800a2ad
 800a274:	0800a2ad 	.word	0x0800a2ad
 800a278:	0800a2a5 	.word	0x0800a2a5
 800a27c:	2301      	movs	r3, #1
 800a27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a282:	e0bc      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a284:	2304      	movs	r3, #4
 800a286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a28a:	e0b8      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a28c:	2308      	movs	r3, #8
 800a28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a292:	e0b4      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a294:	2310      	movs	r3, #16
 800a296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29a:	e0b0      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a29c:	2320      	movs	r3, #32
 800a29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2a2:	e0ac      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a2a4:	2340      	movs	r3, #64	; 0x40
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2aa:	e0a8      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a2ac:	2380      	movs	r3, #128	; 0x80
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b2:	e0a4      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a8f      	ldr	r2, [pc, #572]	; (800a4f8 <UART_SetConfig+0x6a0>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d130      	bne.n	800a320 <UART_SetConfig+0x4c8>
 800a2be:	4b8d      	ldr	r3, [pc, #564]	; (800a4f4 <UART_SetConfig+0x69c>)
 800a2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c2:	f003 0307 	and.w	r3, r3, #7
 800a2c6:	2b05      	cmp	r3, #5
 800a2c8:	d826      	bhi.n	800a318 <UART_SetConfig+0x4c0>
 800a2ca:	a201      	add	r2, pc, #4	; (adr r2, 800a2d0 <UART_SetConfig+0x478>)
 800a2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d0:	0800a2e9 	.word	0x0800a2e9
 800a2d4:	0800a2f1 	.word	0x0800a2f1
 800a2d8:	0800a2f9 	.word	0x0800a2f9
 800a2dc:	0800a301 	.word	0x0800a301
 800a2e0:	0800a309 	.word	0x0800a309
 800a2e4:	0800a311 	.word	0x0800a311
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ee:	e086      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a2f0:	2304      	movs	r3, #4
 800a2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2f6:	e082      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a2f8:	2308      	movs	r3, #8
 800a2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2fe:	e07e      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a300:	2310      	movs	r3, #16
 800a302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a306:	e07a      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a308:	2320      	movs	r3, #32
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30e:	e076      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a310:	2340      	movs	r3, #64	; 0x40
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a316:	e072      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a318:	2380      	movs	r3, #128	; 0x80
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31e:	e06e      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a75      	ldr	r2, [pc, #468]	; (800a4fc <UART_SetConfig+0x6a4>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d130      	bne.n	800a38c <UART_SetConfig+0x534>
 800a32a:	4b72      	ldr	r3, [pc, #456]	; (800a4f4 <UART_SetConfig+0x69c>)
 800a32c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a32e:	f003 0307 	and.w	r3, r3, #7
 800a332:	2b05      	cmp	r3, #5
 800a334:	d826      	bhi.n	800a384 <UART_SetConfig+0x52c>
 800a336:	a201      	add	r2, pc, #4	; (adr r2, 800a33c <UART_SetConfig+0x4e4>)
 800a338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33c:	0800a355 	.word	0x0800a355
 800a340:	0800a35d 	.word	0x0800a35d
 800a344:	0800a365 	.word	0x0800a365
 800a348:	0800a36d 	.word	0x0800a36d
 800a34c:	0800a375 	.word	0x0800a375
 800a350:	0800a37d 	.word	0x0800a37d
 800a354:	2300      	movs	r3, #0
 800a356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a35a:	e050      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a35c:	2304      	movs	r3, #4
 800a35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a362:	e04c      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a364:	2308      	movs	r3, #8
 800a366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a36a:	e048      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a36c:	2310      	movs	r3, #16
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a372:	e044      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a374:	2320      	movs	r3, #32
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a37a:	e040      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a37c:	2340      	movs	r3, #64	; 0x40
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a382:	e03c      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a384:	2380      	movs	r3, #128	; 0x80
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38a:	e038      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a5b      	ldr	r2, [pc, #364]	; (800a500 <UART_SetConfig+0x6a8>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d130      	bne.n	800a3f8 <UART_SetConfig+0x5a0>
 800a396:	4b57      	ldr	r3, [pc, #348]	; (800a4f4 <UART_SetConfig+0x69c>)
 800a398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a39a:	f003 0307 	and.w	r3, r3, #7
 800a39e:	2b05      	cmp	r3, #5
 800a3a0:	d826      	bhi.n	800a3f0 <UART_SetConfig+0x598>
 800a3a2:	a201      	add	r2, pc, #4	; (adr r2, 800a3a8 <UART_SetConfig+0x550>)
 800a3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a8:	0800a3c1 	.word	0x0800a3c1
 800a3ac:	0800a3c9 	.word	0x0800a3c9
 800a3b0:	0800a3d1 	.word	0x0800a3d1
 800a3b4:	0800a3d9 	.word	0x0800a3d9
 800a3b8:	0800a3e1 	.word	0x0800a3e1
 800a3bc:	0800a3e9 	.word	0x0800a3e9
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3c6:	e01a      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a3c8:	2304      	movs	r3, #4
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ce:	e016      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a3d0:	2308      	movs	r3, #8
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3d6:	e012      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a3d8:	2310      	movs	r3, #16
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3de:	e00e      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a3e0:	2320      	movs	r3, #32
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3e6:	e00a      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a3e8:	2340      	movs	r3, #64	; 0x40
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ee:	e006      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a3f0:	2380      	movs	r3, #128	; 0x80
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3f6:	e002      	b.n	800a3fe <UART_SetConfig+0x5a6>
 800a3f8:	2380      	movs	r3, #128	; 0x80
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a3f      	ldr	r2, [pc, #252]	; (800a500 <UART_SetConfig+0x6a8>)
 800a404:	4293      	cmp	r3, r2
 800a406:	f040 80f8 	bne.w	800a5fa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a40a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a40e:	2b20      	cmp	r3, #32
 800a410:	dc46      	bgt.n	800a4a0 <UART_SetConfig+0x648>
 800a412:	2b02      	cmp	r3, #2
 800a414:	f2c0 8082 	blt.w	800a51c <UART_SetConfig+0x6c4>
 800a418:	3b02      	subs	r3, #2
 800a41a:	2b1e      	cmp	r3, #30
 800a41c:	d87e      	bhi.n	800a51c <UART_SetConfig+0x6c4>
 800a41e:	a201      	add	r2, pc, #4	; (adr r2, 800a424 <UART_SetConfig+0x5cc>)
 800a420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a424:	0800a4a7 	.word	0x0800a4a7
 800a428:	0800a51d 	.word	0x0800a51d
 800a42c:	0800a4af 	.word	0x0800a4af
 800a430:	0800a51d 	.word	0x0800a51d
 800a434:	0800a51d 	.word	0x0800a51d
 800a438:	0800a51d 	.word	0x0800a51d
 800a43c:	0800a4bf 	.word	0x0800a4bf
 800a440:	0800a51d 	.word	0x0800a51d
 800a444:	0800a51d 	.word	0x0800a51d
 800a448:	0800a51d 	.word	0x0800a51d
 800a44c:	0800a51d 	.word	0x0800a51d
 800a450:	0800a51d 	.word	0x0800a51d
 800a454:	0800a51d 	.word	0x0800a51d
 800a458:	0800a51d 	.word	0x0800a51d
 800a45c:	0800a4cf 	.word	0x0800a4cf
 800a460:	0800a51d 	.word	0x0800a51d
 800a464:	0800a51d 	.word	0x0800a51d
 800a468:	0800a51d 	.word	0x0800a51d
 800a46c:	0800a51d 	.word	0x0800a51d
 800a470:	0800a51d 	.word	0x0800a51d
 800a474:	0800a51d 	.word	0x0800a51d
 800a478:	0800a51d 	.word	0x0800a51d
 800a47c:	0800a51d 	.word	0x0800a51d
 800a480:	0800a51d 	.word	0x0800a51d
 800a484:	0800a51d 	.word	0x0800a51d
 800a488:	0800a51d 	.word	0x0800a51d
 800a48c:	0800a51d 	.word	0x0800a51d
 800a490:	0800a51d 	.word	0x0800a51d
 800a494:	0800a51d 	.word	0x0800a51d
 800a498:	0800a51d 	.word	0x0800a51d
 800a49c:	0800a50f 	.word	0x0800a50f
 800a4a0:	2b40      	cmp	r3, #64	; 0x40
 800a4a2:	d037      	beq.n	800a514 <UART_SetConfig+0x6bc>
 800a4a4:	e03a      	b.n	800a51c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a4a6:	f7fe f989 	bl	80087bc <HAL_RCCEx_GetD3PCLK1Freq>
 800a4aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a4ac:	e03c      	b.n	800a528 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe f998 	bl	80087e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4bc:	e034      	b.n	800a528 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4be:	f107 0318 	add.w	r3, r7, #24
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fe fae4 	bl	8008a90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4cc:	e02c      	b.n	800a528 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4ce:	4b09      	ldr	r3, [pc, #36]	; (800a4f4 <UART_SetConfig+0x69c>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f003 0320 	and.w	r3, r3, #32
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d016      	beq.n	800a508 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4da:	4b06      	ldr	r3, [pc, #24]	; (800a4f4 <UART_SetConfig+0x69c>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	08db      	lsrs	r3, r3, #3
 800a4e0:	f003 0303 	and.w	r3, r3, #3
 800a4e4:	4a07      	ldr	r2, [pc, #28]	; (800a504 <UART_SetConfig+0x6ac>)
 800a4e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4ec:	e01c      	b.n	800a528 <UART_SetConfig+0x6d0>
 800a4ee:	bf00      	nop
 800a4f0:	40011400 	.word	0x40011400
 800a4f4:	58024400 	.word	0x58024400
 800a4f8:	40007800 	.word	0x40007800
 800a4fc:	40007c00 	.word	0x40007c00
 800a500:	58000c00 	.word	0x58000c00
 800a504:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a508:	4b9d      	ldr	r3, [pc, #628]	; (800a780 <UART_SetConfig+0x928>)
 800a50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a50c:	e00c      	b.n	800a528 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a50e:	4b9d      	ldr	r3, [pc, #628]	; (800a784 <UART_SetConfig+0x92c>)
 800a510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a512:	e009      	b.n	800a528 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a51a:	e005      	b.n	800a528 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a51c:	2300      	movs	r3, #0
 800a51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a526:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f000 81de 	beq.w	800a8ec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	4a94      	ldr	r2, [pc, #592]	; (800a788 <UART_SetConfig+0x930>)
 800a536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a53a:	461a      	mov	r2, r3
 800a53c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a53e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a542:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	685a      	ldr	r2, [r3, #4]
 800a548:	4613      	mov	r3, r2
 800a54a:	005b      	lsls	r3, r3, #1
 800a54c:	4413      	add	r3, r2
 800a54e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a550:	429a      	cmp	r2, r3
 800a552:	d305      	bcc.n	800a560 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a55a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d903      	bls.n	800a568 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a566:	e1c1      	b.n	800a8ec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a56a:	2200      	movs	r2, #0
 800a56c:	60bb      	str	r3, [r7, #8]
 800a56e:	60fa      	str	r2, [r7, #12]
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a574:	4a84      	ldr	r2, [pc, #528]	; (800a788 <UART_SetConfig+0x930>)
 800a576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	2200      	movs	r2, #0
 800a57e:	603b      	str	r3, [r7, #0]
 800a580:	607a      	str	r2, [r7, #4]
 800a582:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a58a:	f7f6 f8bd 	bl	8000708 <__aeabi_uldivmod>
 800a58e:	4602      	mov	r2, r0
 800a590:	460b      	mov	r3, r1
 800a592:	4610      	mov	r0, r2
 800a594:	4619      	mov	r1, r3
 800a596:	f04f 0200 	mov.w	r2, #0
 800a59a:	f04f 0300 	mov.w	r3, #0
 800a59e:	020b      	lsls	r3, r1, #8
 800a5a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a5a4:	0202      	lsls	r2, r0, #8
 800a5a6:	6979      	ldr	r1, [r7, #20]
 800a5a8:	6849      	ldr	r1, [r1, #4]
 800a5aa:	0849      	lsrs	r1, r1, #1
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	eb12 0804 	adds.w	r8, r2, r4
 800a5b6:	eb43 0905 	adc.w	r9, r3, r5
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	469a      	mov	sl, r3
 800a5c2:	4693      	mov	fp, r2
 800a5c4:	4652      	mov	r2, sl
 800a5c6:	465b      	mov	r3, fp
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	4649      	mov	r1, r9
 800a5cc:	f7f6 f89c 	bl	8000708 <__aeabi_uldivmod>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5de:	d308      	bcc.n	800a5f2 <UART_SetConfig+0x79a>
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5e6:	d204      	bcs.n	800a5f2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5ee:	60da      	str	r2, [r3, #12]
 800a5f0:	e17c      	b.n	800a8ec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a5f8:	e178      	b.n	800a8ec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	69db      	ldr	r3, [r3, #28]
 800a5fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a602:	f040 80c5 	bne.w	800a790 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a606:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a60a:	2b20      	cmp	r3, #32
 800a60c:	dc48      	bgt.n	800a6a0 <UART_SetConfig+0x848>
 800a60e:	2b00      	cmp	r3, #0
 800a610:	db7b      	blt.n	800a70a <UART_SetConfig+0x8b2>
 800a612:	2b20      	cmp	r3, #32
 800a614:	d879      	bhi.n	800a70a <UART_SetConfig+0x8b2>
 800a616:	a201      	add	r2, pc, #4	; (adr r2, 800a61c <UART_SetConfig+0x7c4>)
 800a618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61c:	0800a6a7 	.word	0x0800a6a7
 800a620:	0800a6af 	.word	0x0800a6af
 800a624:	0800a70b 	.word	0x0800a70b
 800a628:	0800a70b 	.word	0x0800a70b
 800a62c:	0800a6b7 	.word	0x0800a6b7
 800a630:	0800a70b 	.word	0x0800a70b
 800a634:	0800a70b 	.word	0x0800a70b
 800a638:	0800a70b 	.word	0x0800a70b
 800a63c:	0800a6c7 	.word	0x0800a6c7
 800a640:	0800a70b 	.word	0x0800a70b
 800a644:	0800a70b 	.word	0x0800a70b
 800a648:	0800a70b 	.word	0x0800a70b
 800a64c:	0800a70b 	.word	0x0800a70b
 800a650:	0800a70b 	.word	0x0800a70b
 800a654:	0800a70b 	.word	0x0800a70b
 800a658:	0800a70b 	.word	0x0800a70b
 800a65c:	0800a6d7 	.word	0x0800a6d7
 800a660:	0800a70b 	.word	0x0800a70b
 800a664:	0800a70b 	.word	0x0800a70b
 800a668:	0800a70b 	.word	0x0800a70b
 800a66c:	0800a70b 	.word	0x0800a70b
 800a670:	0800a70b 	.word	0x0800a70b
 800a674:	0800a70b 	.word	0x0800a70b
 800a678:	0800a70b 	.word	0x0800a70b
 800a67c:	0800a70b 	.word	0x0800a70b
 800a680:	0800a70b 	.word	0x0800a70b
 800a684:	0800a70b 	.word	0x0800a70b
 800a688:	0800a70b 	.word	0x0800a70b
 800a68c:	0800a70b 	.word	0x0800a70b
 800a690:	0800a70b 	.word	0x0800a70b
 800a694:	0800a70b 	.word	0x0800a70b
 800a698:	0800a70b 	.word	0x0800a70b
 800a69c:	0800a6fd 	.word	0x0800a6fd
 800a6a0:	2b40      	cmp	r3, #64	; 0x40
 800a6a2:	d02e      	beq.n	800a702 <UART_SetConfig+0x8aa>
 800a6a4:	e031      	b.n	800a70a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6a6:	f7fc fc45 	bl	8006f34 <HAL_RCC_GetPCLK1Freq>
 800a6aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a6ac:	e033      	b.n	800a716 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6ae:	f7fc fc57 	bl	8006f60 <HAL_RCC_GetPCLK2Freq>
 800a6b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a6b4:	e02f      	b.n	800a716 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fe f894 	bl	80087e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6c4:	e027      	b.n	800a716 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6c6:	f107 0318 	add.w	r3, r7, #24
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe f9e0 	bl	8008a90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6d4:	e01f      	b.n	800a716 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6d6:	4b2d      	ldr	r3, [pc, #180]	; (800a78c <UART_SetConfig+0x934>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0320 	and.w	r3, r3, #32
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d009      	beq.n	800a6f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6e2:	4b2a      	ldr	r3, [pc, #168]	; (800a78c <UART_SetConfig+0x934>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	08db      	lsrs	r3, r3, #3
 800a6e8:	f003 0303 	and.w	r3, r3, #3
 800a6ec:	4a24      	ldr	r2, [pc, #144]	; (800a780 <UART_SetConfig+0x928>)
 800a6ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6f4:	e00f      	b.n	800a716 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a6f6:	4b22      	ldr	r3, [pc, #136]	; (800a780 <UART_SetConfig+0x928>)
 800a6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6fa:	e00c      	b.n	800a716 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a6fc:	4b21      	ldr	r3, [pc, #132]	; (800a784 <UART_SetConfig+0x92c>)
 800a6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a700:	e009      	b.n	800a716 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a708:	e005      	b.n	800a716 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a70a:	2300      	movs	r3, #0
 800a70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a714:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f000 80e7 	beq.w	800a8ec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a722:	4a19      	ldr	r2, [pc, #100]	; (800a788 <UART_SetConfig+0x930>)
 800a724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a728:	461a      	mov	r2, r3
 800a72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a72c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a730:	005a      	lsls	r2, r3, #1
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	085b      	lsrs	r3, r3, #1
 800a738:	441a      	add	r2, r3
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a742:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a746:	2b0f      	cmp	r3, #15
 800a748:	d916      	bls.n	800a778 <UART_SetConfig+0x920>
 800a74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a750:	d212      	bcs.n	800a778 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a754:	b29b      	uxth	r3, r3
 800a756:	f023 030f 	bic.w	r3, r3, #15
 800a75a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75e:	085b      	lsrs	r3, r3, #1
 800a760:	b29b      	uxth	r3, r3
 800a762:	f003 0307 	and.w	r3, r3, #7
 800a766:	b29a      	uxth	r2, r3
 800a768:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a76a:	4313      	orrs	r3, r2
 800a76c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a774:	60da      	str	r2, [r3, #12]
 800a776:	e0b9      	b.n	800a8ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a77e:	e0b5      	b.n	800a8ec <UART_SetConfig+0xa94>
 800a780:	03d09000 	.word	0x03d09000
 800a784:	003d0900 	.word	0x003d0900
 800a788:	0800f62c 	.word	0x0800f62c
 800a78c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a790:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a794:	2b20      	cmp	r3, #32
 800a796:	dc49      	bgt.n	800a82c <UART_SetConfig+0x9d4>
 800a798:	2b00      	cmp	r3, #0
 800a79a:	db7c      	blt.n	800a896 <UART_SetConfig+0xa3e>
 800a79c:	2b20      	cmp	r3, #32
 800a79e:	d87a      	bhi.n	800a896 <UART_SetConfig+0xa3e>
 800a7a0:	a201      	add	r2, pc, #4	; (adr r2, 800a7a8 <UART_SetConfig+0x950>)
 800a7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a6:	bf00      	nop
 800a7a8:	0800a833 	.word	0x0800a833
 800a7ac:	0800a83b 	.word	0x0800a83b
 800a7b0:	0800a897 	.word	0x0800a897
 800a7b4:	0800a897 	.word	0x0800a897
 800a7b8:	0800a843 	.word	0x0800a843
 800a7bc:	0800a897 	.word	0x0800a897
 800a7c0:	0800a897 	.word	0x0800a897
 800a7c4:	0800a897 	.word	0x0800a897
 800a7c8:	0800a853 	.word	0x0800a853
 800a7cc:	0800a897 	.word	0x0800a897
 800a7d0:	0800a897 	.word	0x0800a897
 800a7d4:	0800a897 	.word	0x0800a897
 800a7d8:	0800a897 	.word	0x0800a897
 800a7dc:	0800a897 	.word	0x0800a897
 800a7e0:	0800a897 	.word	0x0800a897
 800a7e4:	0800a897 	.word	0x0800a897
 800a7e8:	0800a863 	.word	0x0800a863
 800a7ec:	0800a897 	.word	0x0800a897
 800a7f0:	0800a897 	.word	0x0800a897
 800a7f4:	0800a897 	.word	0x0800a897
 800a7f8:	0800a897 	.word	0x0800a897
 800a7fc:	0800a897 	.word	0x0800a897
 800a800:	0800a897 	.word	0x0800a897
 800a804:	0800a897 	.word	0x0800a897
 800a808:	0800a897 	.word	0x0800a897
 800a80c:	0800a897 	.word	0x0800a897
 800a810:	0800a897 	.word	0x0800a897
 800a814:	0800a897 	.word	0x0800a897
 800a818:	0800a897 	.word	0x0800a897
 800a81c:	0800a897 	.word	0x0800a897
 800a820:	0800a897 	.word	0x0800a897
 800a824:	0800a897 	.word	0x0800a897
 800a828:	0800a889 	.word	0x0800a889
 800a82c:	2b40      	cmp	r3, #64	; 0x40
 800a82e:	d02e      	beq.n	800a88e <UART_SetConfig+0xa36>
 800a830:	e031      	b.n	800a896 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a832:	f7fc fb7f 	bl	8006f34 <HAL_RCC_GetPCLK1Freq>
 800a836:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a838:	e033      	b.n	800a8a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a83a:	f7fc fb91 	bl	8006f60 <HAL_RCC_GetPCLK2Freq>
 800a83e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a840:	e02f      	b.n	800a8a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a846:	4618      	mov	r0, r3
 800a848:	f7fd ffce 	bl	80087e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a850:	e027      	b.n	800a8a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a852:	f107 0318 	add.w	r3, r7, #24
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe f91a 	bl	8008a90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a860:	e01f      	b.n	800a8a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a862:	4b2d      	ldr	r3, [pc, #180]	; (800a918 <UART_SetConfig+0xac0>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f003 0320 	and.w	r3, r3, #32
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d009      	beq.n	800a882 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a86e:	4b2a      	ldr	r3, [pc, #168]	; (800a918 <UART_SetConfig+0xac0>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	08db      	lsrs	r3, r3, #3
 800a874:	f003 0303 	and.w	r3, r3, #3
 800a878:	4a28      	ldr	r2, [pc, #160]	; (800a91c <UART_SetConfig+0xac4>)
 800a87a:	fa22 f303 	lsr.w	r3, r2, r3
 800a87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a880:	e00f      	b.n	800a8a2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a882:	4b26      	ldr	r3, [pc, #152]	; (800a91c <UART_SetConfig+0xac4>)
 800a884:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a886:	e00c      	b.n	800a8a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a888:	4b25      	ldr	r3, [pc, #148]	; (800a920 <UART_SetConfig+0xac8>)
 800a88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a88c:	e009      	b.n	800a8a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a88e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a894:	e005      	b.n	800a8a2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a896:	2300      	movs	r3, #0
 800a898:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a8a0:	bf00      	nop
    }

    if (pclk != 0U)
 800a8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d021      	beq.n	800a8ec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	4a1d      	ldr	r2, [pc, #116]	; (800a924 <UART_SetConfig+0xacc>)
 800a8ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8b6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	085b      	lsrs	r3, r3, #1
 800a8c0:	441a      	add	r2, r3
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ce:	2b0f      	cmp	r3, #15
 800a8d0:	d909      	bls.n	800a8e6 <UART_SetConfig+0xa8e>
 800a8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d8:	d205      	bcs.n	800a8e6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	60da      	str	r2, [r3, #12]
 800a8e4:	e002      	b.n	800a8ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	2200      	movs	r2, #0
 800a900:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	2200      	movs	r2, #0
 800a906:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a908:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3748      	adds	r7, #72	; 0x48
 800a910:	46bd      	mov	sp, r7
 800a912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a916:	bf00      	nop
 800a918:	58024400 	.word	0x58024400
 800a91c:	03d09000 	.word	0x03d09000
 800a920:	003d0900 	.word	0x003d0900
 800a924:	0800f62c 	.word	0x0800f62c

0800a928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a934:	f003 0301 	and.w	r3, r3, #1
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00a      	beq.n	800a952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	430a      	orrs	r2, r1
 800a950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a956:	f003 0302 	and.w	r3, r3, #2
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00a      	beq.n	800a974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	430a      	orrs	r2, r1
 800a972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00a      	beq.n	800a996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	430a      	orrs	r2, r1
 800a994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99a:	f003 0308 	and.w	r3, r3, #8
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00a      	beq.n	800a9b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	430a      	orrs	r2, r1
 800a9b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9bc:	f003 0310 	and.w	r3, r3, #16
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00a      	beq.n	800a9da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	430a      	orrs	r2, r1
 800a9d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9de:	f003 0320 	and.w	r3, r3, #32
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00a      	beq.n	800a9fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	430a      	orrs	r2, r1
 800a9fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d01a      	beq.n	800aa3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	430a      	orrs	r2, r1
 800aa1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa26:	d10a      	bne.n	800aa3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	430a      	orrs	r2, r1
 800aa3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00a      	beq.n	800aa60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	430a      	orrs	r2, r1
 800aa5e:	605a      	str	r2, [r3, #4]
  }
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af02      	add	r7, sp, #8
 800aa72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa7c:	f7f6 feca 	bl	8001814 <HAL_GetTick>
 800aa80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0308 	and.w	r3, r3, #8
 800aa8c:	2b08      	cmp	r3, #8
 800aa8e:	d10e      	bne.n	800aaae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f82f 	bl	800ab02 <UART_WaitOnFlagUntilTimeout>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d001      	beq.n	800aaae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e025      	b.n	800aafa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 0304 	and.w	r3, r3, #4
 800aab8:	2b04      	cmp	r3, #4
 800aaba:	d10e      	bne.n	800aada <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aabc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f819 	bl	800ab02 <UART_WaitOnFlagUntilTimeout>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d001      	beq.n	800aada <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aad6:	2303      	movs	r3, #3
 800aad8:	e00f      	b.n	800aafa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2220      	movs	r2, #32
 800aade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2220      	movs	r2, #32
 800aae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b09c      	sub	sp, #112	; 0x70
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	60f8      	str	r0, [r7, #12]
 800ab0a:	60b9      	str	r1, [r7, #8]
 800ab0c:	603b      	str	r3, [r7, #0]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab12:	e0a9      	b.n	800ac68 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab1a:	f000 80a5 	beq.w	800ac68 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab1e:	f7f6 fe79 	bl	8001814 <HAL_GetTick>
 800ab22:	4602      	mov	r2, r0
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d302      	bcc.n	800ab34 <UART_WaitOnFlagUntilTimeout+0x32>
 800ab2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d140      	bne.n	800abb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab3c:	e853 3f00 	ldrex	r3, [r3]
 800ab40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ab42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab48:	667b      	str	r3, [r7, #100]	; 0x64
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab5a:	e841 2300 	strex	r3, r2, [r1]
 800ab5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ab60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d1e6      	bne.n	800ab34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab70:	e853 3f00 	ldrex	r3, [r3]
 800ab74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab78:	f023 0301 	bic.w	r3, r3, #1
 800ab7c:	663b      	str	r3, [r7, #96]	; 0x60
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3308      	adds	r3, #8
 800ab84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab86:	64ba      	str	r2, [r7, #72]	; 0x48
 800ab88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab8e:	e841 2300 	strex	r3, r2, [r1]
 800ab92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1e5      	bne.n	800ab66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2220      	movs	r2, #32
 800ab9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2220      	movs	r2, #32
 800aba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	e069      	b.n	800ac8a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 0304 	and.w	r3, r3, #4
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d051      	beq.n	800ac68 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abd2:	d149      	bne.n	800ac68 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800abdc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe6:	e853 3f00 	ldrex	r3, [r3]
 800abea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800abf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	461a      	mov	r2, r3
 800abfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abfc:	637b      	str	r3, [r7, #52]	; 0x34
 800abfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac04:	e841 2300 	strex	r3, r2, [r1]
 800ac08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1e6      	bne.n	800abde <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	3308      	adds	r3, #8
 800ac16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	e853 3f00 	ldrex	r3, [r3]
 800ac1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	f023 0301 	bic.w	r3, r3, #1
 800ac26:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	3308      	adds	r3, #8
 800ac2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac30:	623a      	str	r2, [r7, #32]
 800ac32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac34:	69f9      	ldr	r1, [r7, #28]
 800ac36:	6a3a      	ldr	r2, [r7, #32]
 800ac38:	e841 2300 	strex	r3, r2, [r1]
 800ac3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1e5      	bne.n	800ac10 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2220      	movs	r2, #32
 800ac48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2220      	movs	r2, #32
 800ac50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2220      	movs	r2, #32
 800ac58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ac64:	2303      	movs	r3, #3
 800ac66:	e010      	b.n	800ac8a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	69da      	ldr	r2, [r3, #28]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	4013      	ands	r3, r2
 800ac72:	68ba      	ldr	r2, [r7, #8]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	bf0c      	ite	eq
 800ac78:	2301      	moveq	r3, #1
 800ac7a:	2300      	movne	r3, #0
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	461a      	mov	r2, r3
 800ac80:	79fb      	ldrb	r3, [r7, #7]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	f43f af46 	beq.w	800ab14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3770      	adds	r7, #112	; 0x70
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b085      	sub	sp, #20
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d101      	bne.n	800aca8 <HAL_UARTEx_DisableFifoMode+0x16>
 800aca4:	2302      	movs	r3, #2
 800aca6:	e027      	b.n	800acf8 <HAL_UARTEx_DisableFifoMode+0x66>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2224      	movs	r2, #36	; 0x24
 800acb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f022 0201 	bic.w	r2, r2, #1
 800acce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800acd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2220      	movs	r2, #32
 800acea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d101      	bne.n	800ad1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad18:	2302      	movs	r3, #2
 800ad1a:	e02d      	b.n	800ad78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2224      	movs	r2, #36	; 0x24
 800ad28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f022 0201 	bic.w	r2, r2, #1
 800ad42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	430a      	orrs	r2, r1
 800ad56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 f84f 	bl	800adfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2220      	movs	r2, #32
 800ad6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d101      	bne.n	800ad98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad94:	2302      	movs	r3, #2
 800ad96:	e02d      	b.n	800adf4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2224      	movs	r2, #36	; 0x24
 800ada4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f022 0201 	bic.w	r2, r2, #1
 800adbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	430a      	orrs	r2, r1
 800add2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 f811 	bl	800adfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2220      	movs	r2, #32
 800ade6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d108      	bne.n	800ae1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae1c:	e031      	b.n	800ae82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae1e:	2310      	movs	r3, #16
 800ae20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae22:	2310      	movs	r3, #16
 800ae24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	0e5b      	lsrs	r3, r3, #25
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	f003 0307 	and.w	r3, r3, #7
 800ae34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	0f5b      	lsrs	r3, r3, #29
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	f003 0307 	and.w	r3, r3, #7
 800ae44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae46:	7bbb      	ldrb	r3, [r7, #14]
 800ae48:	7b3a      	ldrb	r2, [r7, #12]
 800ae4a:	4911      	ldr	r1, [pc, #68]	; (800ae90 <UARTEx_SetNbDataToProcess+0x94>)
 800ae4c:	5c8a      	ldrb	r2, [r1, r2]
 800ae4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae52:	7b3a      	ldrb	r2, [r7, #12]
 800ae54:	490f      	ldr	r1, [pc, #60]	; (800ae94 <UARTEx_SetNbDataToProcess+0x98>)
 800ae56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae58:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae5c:	b29a      	uxth	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
 800ae66:	7b7a      	ldrb	r2, [r7, #13]
 800ae68:	4909      	ldr	r1, [pc, #36]	; (800ae90 <UARTEx_SetNbDataToProcess+0x94>)
 800ae6a:	5c8a      	ldrb	r2, [r1, r2]
 800ae6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae70:	7b7a      	ldrb	r2, [r7, #13]
 800ae72:	4908      	ldr	r1, [pc, #32]	; (800ae94 <UARTEx_SetNbDataToProcess+0x98>)
 800ae74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae76:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ae82:	bf00      	nop
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	0800f644 	.word	0x0800f644
 800ae94:	0800f64c 	.word	0x0800f64c

0800ae98 <__errno>:
 800ae98:	4b01      	ldr	r3, [pc, #4]	; (800aea0 <__errno+0x8>)
 800ae9a:	6818      	ldr	r0, [r3, #0]
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	24000010 	.word	0x24000010

0800aea4 <__libc_init_array>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	4d0d      	ldr	r5, [pc, #52]	; (800aedc <__libc_init_array+0x38>)
 800aea8:	4c0d      	ldr	r4, [pc, #52]	; (800aee0 <__libc_init_array+0x3c>)
 800aeaa:	1b64      	subs	r4, r4, r5
 800aeac:	10a4      	asrs	r4, r4, #2
 800aeae:	2600      	movs	r6, #0
 800aeb0:	42a6      	cmp	r6, r4
 800aeb2:	d109      	bne.n	800aec8 <__libc_init_array+0x24>
 800aeb4:	4d0b      	ldr	r5, [pc, #44]	; (800aee4 <__libc_init_array+0x40>)
 800aeb6:	4c0c      	ldr	r4, [pc, #48]	; (800aee8 <__libc_init_array+0x44>)
 800aeb8:	f004 fb8a 	bl	800f5d0 <_init>
 800aebc:	1b64      	subs	r4, r4, r5
 800aebe:	10a4      	asrs	r4, r4, #2
 800aec0:	2600      	movs	r6, #0
 800aec2:	42a6      	cmp	r6, r4
 800aec4:	d105      	bne.n	800aed2 <__libc_init_array+0x2e>
 800aec6:	bd70      	pop	{r4, r5, r6, pc}
 800aec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aecc:	4798      	blx	r3
 800aece:	3601      	adds	r6, #1
 800aed0:	e7ee      	b.n	800aeb0 <__libc_init_array+0xc>
 800aed2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aed6:	4798      	blx	r3
 800aed8:	3601      	adds	r6, #1
 800aeda:	e7f2      	b.n	800aec2 <__libc_init_array+0x1e>
 800aedc:	0800fb04 	.word	0x0800fb04
 800aee0:	0800fb04 	.word	0x0800fb04
 800aee4:	0800fb04 	.word	0x0800fb04
 800aee8:	0800fb08 	.word	0x0800fb08

0800aeec <memset>:
 800aeec:	4402      	add	r2, r0
 800aeee:	4603      	mov	r3, r0
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d100      	bne.n	800aef6 <memset+0xa>
 800aef4:	4770      	bx	lr
 800aef6:	f803 1b01 	strb.w	r1, [r3], #1
 800aefa:	e7f9      	b.n	800aef0 <memset+0x4>

0800aefc <__cvt>:
 800aefc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aefe:	ed2d 8b02 	vpush	{d8}
 800af02:	eeb0 8b40 	vmov.f64	d8, d0
 800af06:	b085      	sub	sp, #20
 800af08:	4617      	mov	r7, r2
 800af0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800af0c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800af0e:	ee18 2a90 	vmov	r2, s17
 800af12:	f025 0520 	bic.w	r5, r5, #32
 800af16:	2a00      	cmp	r2, #0
 800af18:	bfb6      	itet	lt
 800af1a:	222d      	movlt	r2, #45	; 0x2d
 800af1c:	2200      	movge	r2, #0
 800af1e:	eeb1 8b40 	vneglt.f64	d8, d0
 800af22:	2d46      	cmp	r5, #70	; 0x46
 800af24:	460c      	mov	r4, r1
 800af26:	701a      	strb	r2, [r3, #0]
 800af28:	d004      	beq.n	800af34 <__cvt+0x38>
 800af2a:	2d45      	cmp	r5, #69	; 0x45
 800af2c:	d100      	bne.n	800af30 <__cvt+0x34>
 800af2e:	3401      	adds	r4, #1
 800af30:	2102      	movs	r1, #2
 800af32:	e000      	b.n	800af36 <__cvt+0x3a>
 800af34:	2103      	movs	r1, #3
 800af36:	ab03      	add	r3, sp, #12
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	ab02      	add	r3, sp, #8
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	4622      	mov	r2, r4
 800af40:	4633      	mov	r3, r6
 800af42:	eeb0 0b48 	vmov.f64	d0, d8
 800af46:	f001 fd2f 	bl	800c9a8 <_dtoa_r>
 800af4a:	2d47      	cmp	r5, #71	; 0x47
 800af4c:	d101      	bne.n	800af52 <__cvt+0x56>
 800af4e:	07fb      	lsls	r3, r7, #31
 800af50:	d51a      	bpl.n	800af88 <__cvt+0x8c>
 800af52:	2d46      	cmp	r5, #70	; 0x46
 800af54:	eb00 0204 	add.w	r2, r0, r4
 800af58:	d10c      	bne.n	800af74 <__cvt+0x78>
 800af5a:	7803      	ldrb	r3, [r0, #0]
 800af5c:	2b30      	cmp	r3, #48	; 0x30
 800af5e:	d107      	bne.n	800af70 <__cvt+0x74>
 800af60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800af64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af68:	bf1c      	itt	ne
 800af6a:	f1c4 0401 	rsbne	r4, r4, #1
 800af6e:	6034      	strne	r4, [r6, #0]
 800af70:	6833      	ldr	r3, [r6, #0]
 800af72:	441a      	add	r2, r3
 800af74:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800af78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af7c:	bf08      	it	eq
 800af7e:	9203      	streq	r2, [sp, #12]
 800af80:	2130      	movs	r1, #48	; 0x30
 800af82:	9b03      	ldr	r3, [sp, #12]
 800af84:	4293      	cmp	r3, r2
 800af86:	d307      	bcc.n	800af98 <__cvt+0x9c>
 800af88:	9b03      	ldr	r3, [sp, #12]
 800af8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af8c:	1a1b      	subs	r3, r3, r0
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	b005      	add	sp, #20
 800af92:	ecbd 8b02 	vpop	{d8}
 800af96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af98:	1c5c      	adds	r4, r3, #1
 800af9a:	9403      	str	r4, [sp, #12]
 800af9c:	7019      	strb	r1, [r3, #0]
 800af9e:	e7f0      	b.n	800af82 <__cvt+0x86>

0800afa0 <__exponent>:
 800afa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afa2:	4603      	mov	r3, r0
 800afa4:	2900      	cmp	r1, #0
 800afa6:	bfb8      	it	lt
 800afa8:	4249      	neglt	r1, r1
 800afaa:	f803 2b02 	strb.w	r2, [r3], #2
 800afae:	bfb4      	ite	lt
 800afb0:	222d      	movlt	r2, #45	; 0x2d
 800afb2:	222b      	movge	r2, #43	; 0x2b
 800afb4:	2909      	cmp	r1, #9
 800afb6:	7042      	strb	r2, [r0, #1]
 800afb8:	dd2a      	ble.n	800b010 <__exponent+0x70>
 800afba:	f10d 0407 	add.w	r4, sp, #7
 800afbe:	46a4      	mov	ip, r4
 800afc0:	270a      	movs	r7, #10
 800afc2:	46a6      	mov	lr, r4
 800afc4:	460a      	mov	r2, r1
 800afc6:	fb91 f6f7 	sdiv	r6, r1, r7
 800afca:	fb07 1516 	mls	r5, r7, r6, r1
 800afce:	3530      	adds	r5, #48	; 0x30
 800afd0:	2a63      	cmp	r2, #99	; 0x63
 800afd2:	f104 34ff 	add.w	r4, r4, #4294967295
 800afd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800afda:	4631      	mov	r1, r6
 800afdc:	dcf1      	bgt.n	800afc2 <__exponent+0x22>
 800afde:	3130      	adds	r1, #48	; 0x30
 800afe0:	f1ae 0502 	sub.w	r5, lr, #2
 800afe4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800afe8:	1c44      	adds	r4, r0, #1
 800afea:	4629      	mov	r1, r5
 800afec:	4561      	cmp	r1, ip
 800afee:	d30a      	bcc.n	800b006 <__exponent+0x66>
 800aff0:	f10d 0209 	add.w	r2, sp, #9
 800aff4:	eba2 020e 	sub.w	r2, r2, lr
 800aff8:	4565      	cmp	r5, ip
 800affa:	bf88      	it	hi
 800affc:	2200      	movhi	r2, #0
 800affe:	4413      	add	r3, r2
 800b000:	1a18      	subs	r0, r3, r0
 800b002:	b003      	add	sp, #12
 800b004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b00a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b00e:	e7ed      	b.n	800afec <__exponent+0x4c>
 800b010:	2330      	movs	r3, #48	; 0x30
 800b012:	3130      	adds	r1, #48	; 0x30
 800b014:	7083      	strb	r3, [r0, #2]
 800b016:	70c1      	strb	r1, [r0, #3]
 800b018:	1d03      	adds	r3, r0, #4
 800b01a:	e7f1      	b.n	800b000 <__exponent+0x60>
 800b01c:	0000      	movs	r0, r0
	...

0800b020 <_printf_float>:
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	b08b      	sub	sp, #44	; 0x2c
 800b026:	460c      	mov	r4, r1
 800b028:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b02c:	4616      	mov	r6, r2
 800b02e:	461f      	mov	r7, r3
 800b030:	4605      	mov	r5, r0
 800b032:	f002 fd97 	bl	800db64 <_localeconv_r>
 800b036:	f8d0 b000 	ldr.w	fp, [r0]
 800b03a:	4658      	mov	r0, fp
 800b03c:	f7f5 f950 	bl	80002e0 <strlen>
 800b040:	2300      	movs	r3, #0
 800b042:	9308      	str	r3, [sp, #32]
 800b044:	f8d8 3000 	ldr.w	r3, [r8]
 800b048:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b04c:	6822      	ldr	r2, [r4, #0]
 800b04e:	3307      	adds	r3, #7
 800b050:	f023 0307 	bic.w	r3, r3, #7
 800b054:	f103 0108 	add.w	r1, r3, #8
 800b058:	f8c8 1000 	str.w	r1, [r8]
 800b05c:	4682      	mov	sl, r0
 800b05e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b062:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b066:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800b2c8 <_printf_float+0x2a8>
 800b06a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b06e:	eeb0 6bc0 	vabs.f64	d6, d0
 800b072:	eeb4 6b47 	vcmp.f64	d6, d7
 800b076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b07a:	dd24      	ble.n	800b0c6 <_printf_float+0xa6>
 800b07c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b084:	d502      	bpl.n	800b08c <_printf_float+0x6c>
 800b086:	232d      	movs	r3, #45	; 0x2d
 800b088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b08c:	4b90      	ldr	r3, [pc, #576]	; (800b2d0 <_printf_float+0x2b0>)
 800b08e:	4891      	ldr	r0, [pc, #580]	; (800b2d4 <_printf_float+0x2b4>)
 800b090:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b094:	bf94      	ite	ls
 800b096:	4698      	movls	r8, r3
 800b098:	4680      	movhi	r8, r0
 800b09a:	2303      	movs	r3, #3
 800b09c:	6123      	str	r3, [r4, #16]
 800b09e:	f022 0204 	bic.w	r2, r2, #4
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	6022      	str	r2, [r4, #0]
 800b0a6:	9304      	str	r3, [sp, #16]
 800b0a8:	9700      	str	r7, [sp, #0]
 800b0aa:	4633      	mov	r3, r6
 800b0ac:	aa09      	add	r2, sp, #36	; 0x24
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	f000 f9d3 	bl	800b45c <_printf_common>
 800b0b6:	3001      	adds	r0, #1
 800b0b8:	f040 808a 	bne.w	800b1d0 <_printf_float+0x1b0>
 800b0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c0:	b00b      	add	sp, #44	; 0x2c
 800b0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c6:	eeb4 0b40 	vcmp.f64	d0, d0
 800b0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ce:	d709      	bvc.n	800b0e4 <_printf_float+0xc4>
 800b0d0:	ee10 3a90 	vmov	r3, s1
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	bfbc      	itt	lt
 800b0d8:	232d      	movlt	r3, #45	; 0x2d
 800b0da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b0de:	487e      	ldr	r0, [pc, #504]	; (800b2d8 <_printf_float+0x2b8>)
 800b0e0:	4b7e      	ldr	r3, [pc, #504]	; (800b2dc <_printf_float+0x2bc>)
 800b0e2:	e7d5      	b.n	800b090 <_printf_float+0x70>
 800b0e4:	6863      	ldr	r3, [r4, #4]
 800b0e6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b0ea:	9104      	str	r1, [sp, #16]
 800b0ec:	1c59      	adds	r1, r3, #1
 800b0ee:	d13c      	bne.n	800b16a <_printf_float+0x14a>
 800b0f0:	2306      	movs	r3, #6
 800b0f2:	6063      	str	r3, [r4, #4]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	9303      	str	r3, [sp, #12]
 800b0f8:	ab08      	add	r3, sp, #32
 800b0fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b0fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b102:	ab07      	add	r3, sp, #28
 800b104:	6861      	ldr	r1, [r4, #4]
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	6022      	str	r2, [r4, #0]
 800b10a:	f10d 031b 	add.w	r3, sp, #27
 800b10e:	4628      	mov	r0, r5
 800b110:	f7ff fef4 	bl	800aefc <__cvt>
 800b114:	9b04      	ldr	r3, [sp, #16]
 800b116:	9907      	ldr	r1, [sp, #28]
 800b118:	2b47      	cmp	r3, #71	; 0x47
 800b11a:	4680      	mov	r8, r0
 800b11c:	d108      	bne.n	800b130 <_printf_float+0x110>
 800b11e:	1cc8      	adds	r0, r1, #3
 800b120:	db02      	blt.n	800b128 <_printf_float+0x108>
 800b122:	6863      	ldr	r3, [r4, #4]
 800b124:	4299      	cmp	r1, r3
 800b126:	dd41      	ble.n	800b1ac <_printf_float+0x18c>
 800b128:	f1a9 0902 	sub.w	r9, r9, #2
 800b12c:	fa5f f989 	uxtb.w	r9, r9
 800b130:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b134:	d820      	bhi.n	800b178 <_printf_float+0x158>
 800b136:	3901      	subs	r1, #1
 800b138:	464a      	mov	r2, r9
 800b13a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b13e:	9107      	str	r1, [sp, #28]
 800b140:	f7ff ff2e 	bl	800afa0 <__exponent>
 800b144:	9a08      	ldr	r2, [sp, #32]
 800b146:	9004      	str	r0, [sp, #16]
 800b148:	1813      	adds	r3, r2, r0
 800b14a:	2a01      	cmp	r2, #1
 800b14c:	6123      	str	r3, [r4, #16]
 800b14e:	dc02      	bgt.n	800b156 <_printf_float+0x136>
 800b150:	6822      	ldr	r2, [r4, #0]
 800b152:	07d2      	lsls	r2, r2, #31
 800b154:	d501      	bpl.n	800b15a <_printf_float+0x13a>
 800b156:	3301      	adds	r3, #1
 800b158:	6123      	str	r3, [r4, #16]
 800b15a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d0a2      	beq.n	800b0a8 <_printf_float+0x88>
 800b162:	232d      	movs	r3, #45	; 0x2d
 800b164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b168:	e79e      	b.n	800b0a8 <_printf_float+0x88>
 800b16a:	9904      	ldr	r1, [sp, #16]
 800b16c:	2947      	cmp	r1, #71	; 0x47
 800b16e:	d1c1      	bne.n	800b0f4 <_printf_float+0xd4>
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1bf      	bne.n	800b0f4 <_printf_float+0xd4>
 800b174:	2301      	movs	r3, #1
 800b176:	e7bc      	b.n	800b0f2 <_printf_float+0xd2>
 800b178:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b17c:	d118      	bne.n	800b1b0 <_printf_float+0x190>
 800b17e:	2900      	cmp	r1, #0
 800b180:	6863      	ldr	r3, [r4, #4]
 800b182:	dd0b      	ble.n	800b19c <_printf_float+0x17c>
 800b184:	6121      	str	r1, [r4, #16]
 800b186:	b913      	cbnz	r3, 800b18e <_printf_float+0x16e>
 800b188:	6822      	ldr	r2, [r4, #0]
 800b18a:	07d0      	lsls	r0, r2, #31
 800b18c:	d502      	bpl.n	800b194 <_printf_float+0x174>
 800b18e:	3301      	adds	r3, #1
 800b190:	440b      	add	r3, r1
 800b192:	6123      	str	r3, [r4, #16]
 800b194:	2300      	movs	r3, #0
 800b196:	65a1      	str	r1, [r4, #88]	; 0x58
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	e7de      	b.n	800b15a <_printf_float+0x13a>
 800b19c:	b913      	cbnz	r3, 800b1a4 <_printf_float+0x184>
 800b19e:	6822      	ldr	r2, [r4, #0]
 800b1a0:	07d2      	lsls	r2, r2, #31
 800b1a2:	d501      	bpl.n	800b1a8 <_printf_float+0x188>
 800b1a4:	3302      	adds	r3, #2
 800b1a6:	e7f4      	b.n	800b192 <_printf_float+0x172>
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e7f2      	b.n	800b192 <_printf_float+0x172>
 800b1ac:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b1b0:	9b08      	ldr	r3, [sp, #32]
 800b1b2:	4299      	cmp	r1, r3
 800b1b4:	db05      	blt.n	800b1c2 <_printf_float+0x1a2>
 800b1b6:	6823      	ldr	r3, [r4, #0]
 800b1b8:	6121      	str	r1, [r4, #16]
 800b1ba:	07d8      	lsls	r0, r3, #31
 800b1bc:	d5ea      	bpl.n	800b194 <_printf_float+0x174>
 800b1be:	1c4b      	adds	r3, r1, #1
 800b1c0:	e7e7      	b.n	800b192 <_printf_float+0x172>
 800b1c2:	2900      	cmp	r1, #0
 800b1c4:	bfd4      	ite	le
 800b1c6:	f1c1 0202 	rsble	r2, r1, #2
 800b1ca:	2201      	movgt	r2, #1
 800b1cc:	4413      	add	r3, r2
 800b1ce:	e7e0      	b.n	800b192 <_printf_float+0x172>
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	055a      	lsls	r2, r3, #21
 800b1d4:	d407      	bmi.n	800b1e6 <_printf_float+0x1c6>
 800b1d6:	6923      	ldr	r3, [r4, #16]
 800b1d8:	4642      	mov	r2, r8
 800b1da:	4631      	mov	r1, r6
 800b1dc:	4628      	mov	r0, r5
 800b1de:	47b8      	blx	r7
 800b1e0:	3001      	adds	r0, #1
 800b1e2:	d12a      	bne.n	800b23a <_printf_float+0x21a>
 800b1e4:	e76a      	b.n	800b0bc <_printf_float+0x9c>
 800b1e6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b1ea:	f240 80e2 	bls.w	800b3b2 <_printf_float+0x392>
 800b1ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b1f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1fa:	d133      	bne.n	800b264 <_printf_float+0x244>
 800b1fc:	4a38      	ldr	r2, [pc, #224]	; (800b2e0 <_printf_float+0x2c0>)
 800b1fe:	2301      	movs	r3, #1
 800b200:	4631      	mov	r1, r6
 800b202:	4628      	mov	r0, r5
 800b204:	47b8      	blx	r7
 800b206:	3001      	adds	r0, #1
 800b208:	f43f af58 	beq.w	800b0bc <_printf_float+0x9c>
 800b20c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b210:	429a      	cmp	r2, r3
 800b212:	db02      	blt.n	800b21a <_printf_float+0x1fa>
 800b214:	6823      	ldr	r3, [r4, #0]
 800b216:	07d8      	lsls	r0, r3, #31
 800b218:	d50f      	bpl.n	800b23a <_printf_float+0x21a>
 800b21a:	4653      	mov	r3, sl
 800b21c:	465a      	mov	r2, fp
 800b21e:	4631      	mov	r1, r6
 800b220:	4628      	mov	r0, r5
 800b222:	47b8      	blx	r7
 800b224:	3001      	adds	r0, #1
 800b226:	f43f af49 	beq.w	800b0bc <_printf_float+0x9c>
 800b22a:	f04f 0800 	mov.w	r8, #0
 800b22e:	f104 091a 	add.w	r9, r4, #26
 800b232:	9b08      	ldr	r3, [sp, #32]
 800b234:	3b01      	subs	r3, #1
 800b236:	4543      	cmp	r3, r8
 800b238:	dc09      	bgt.n	800b24e <_printf_float+0x22e>
 800b23a:	6823      	ldr	r3, [r4, #0]
 800b23c:	079b      	lsls	r3, r3, #30
 800b23e:	f100 8108 	bmi.w	800b452 <_printf_float+0x432>
 800b242:	68e0      	ldr	r0, [r4, #12]
 800b244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b246:	4298      	cmp	r0, r3
 800b248:	bfb8      	it	lt
 800b24a:	4618      	movlt	r0, r3
 800b24c:	e738      	b.n	800b0c0 <_printf_float+0xa0>
 800b24e:	2301      	movs	r3, #1
 800b250:	464a      	mov	r2, r9
 800b252:	4631      	mov	r1, r6
 800b254:	4628      	mov	r0, r5
 800b256:	47b8      	blx	r7
 800b258:	3001      	adds	r0, #1
 800b25a:	f43f af2f 	beq.w	800b0bc <_printf_float+0x9c>
 800b25e:	f108 0801 	add.w	r8, r8, #1
 800b262:	e7e6      	b.n	800b232 <_printf_float+0x212>
 800b264:	9b07      	ldr	r3, [sp, #28]
 800b266:	2b00      	cmp	r3, #0
 800b268:	dc3c      	bgt.n	800b2e4 <_printf_float+0x2c4>
 800b26a:	4a1d      	ldr	r2, [pc, #116]	; (800b2e0 <_printf_float+0x2c0>)
 800b26c:	2301      	movs	r3, #1
 800b26e:	4631      	mov	r1, r6
 800b270:	4628      	mov	r0, r5
 800b272:	47b8      	blx	r7
 800b274:	3001      	adds	r0, #1
 800b276:	f43f af21 	beq.w	800b0bc <_printf_float+0x9c>
 800b27a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b27e:	4313      	orrs	r3, r2
 800b280:	d102      	bne.n	800b288 <_printf_float+0x268>
 800b282:	6823      	ldr	r3, [r4, #0]
 800b284:	07d9      	lsls	r1, r3, #31
 800b286:	d5d8      	bpl.n	800b23a <_printf_float+0x21a>
 800b288:	4653      	mov	r3, sl
 800b28a:	465a      	mov	r2, fp
 800b28c:	4631      	mov	r1, r6
 800b28e:	4628      	mov	r0, r5
 800b290:	47b8      	blx	r7
 800b292:	3001      	adds	r0, #1
 800b294:	f43f af12 	beq.w	800b0bc <_printf_float+0x9c>
 800b298:	f04f 0900 	mov.w	r9, #0
 800b29c:	f104 0a1a 	add.w	sl, r4, #26
 800b2a0:	9b07      	ldr	r3, [sp, #28]
 800b2a2:	425b      	negs	r3, r3
 800b2a4:	454b      	cmp	r3, r9
 800b2a6:	dc01      	bgt.n	800b2ac <_printf_float+0x28c>
 800b2a8:	9b08      	ldr	r3, [sp, #32]
 800b2aa:	e795      	b.n	800b1d8 <_printf_float+0x1b8>
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	4652      	mov	r2, sl
 800b2b0:	4631      	mov	r1, r6
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	47b8      	blx	r7
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	f43f af00 	beq.w	800b0bc <_printf_float+0x9c>
 800b2bc:	f109 0901 	add.w	r9, r9, #1
 800b2c0:	e7ee      	b.n	800b2a0 <_printf_float+0x280>
 800b2c2:	bf00      	nop
 800b2c4:	f3af 8000 	nop.w
 800b2c8:	ffffffff 	.word	0xffffffff
 800b2cc:	7fefffff 	.word	0x7fefffff
 800b2d0:	0800f658 	.word	0x0800f658
 800b2d4:	0800f65c 	.word	0x0800f65c
 800b2d8:	0800f664 	.word	0x0800f664
 800b2dc:	0800f660 	.word	0x0800f660
 800b2e0:	0800f668 	.word	0x0800f668
 800b2e4:	9a08      	ldr	r2, [sp, #32]
 800b2e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	bfa8      	it	ge
 800b2ec:	461a      	movge	r2, r3
 800b2ee:	2a00      	cmp	r2, #0
 800b2f0:	4691      	mov	r9, r2
 800b2f2:	dc38      	bgt.n	800b366 <_printf_float+0x346>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	9305      	str	r3, [sp, #20]
 800b2f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2fc:	f104 021a 	add.w	r2, r4, #26
 800b300:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b302:	9905      	ldr	r1, [sp, #20]
 800b304:	9304      	str	r3, [sp, #16]
 800b306:	eba3 0309 	sub.w	r3, r3, r9
 800b30a:	428b      	cmp	r3, r1
 800b30c:	dc33      	bgt.n	800b376 <_printf_float+0x356>
 800b30e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b312:	429a      	cmp	r2, r3
 800b314:	db3c      	blt.n	800b390 <_printf_float+0x370>
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	07da      	lsls	r2, r3, #31
 800b31a:	d439      	bmi.n	800b390 <_printf_float+0x370>
 800b31c:	9b08      	ldr	r3, [sp, #32]
 800b31e:	9a04      	ldr	r2, [sp, #16]
 800b320:	9907      	ldr	r1, [sp, #28]
 800b322:	1a9a      	subs	r2, r3, r2
 800b324:	eba3 0901 	sub.w	r9, r3, r1
 800b328:	4591      	cmp	r9, r2
 800b32a:	bfa8      	it	ge
 800b32c:	4691      	movge	r9, r2
 800b32e:	f1b9 0f00 	cmp.w	r9, #0
 800b332:	dc35      	bgt.n	800b3a0 <_printf_float+0x380>
 800b334:	f04f 0800 	mov.w	r8, #0
 800b338:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b33c:	f104 0a1a 	add.w	sl, r4, #26
 800b340:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b344:	1a9b      	subs	r3, r3, r2
 800b346:	eba3 0309 	sub.w	r3, r3, r9
 800b34a:	4543      	cmp	r3, r8
 800b34c:	f77f af75 	ble.w	800b23a <_printf_float+0x21a>
 800b350:	2301      	movs	r3, #1
 800b352:	4652      	mov	r2, sl
 800b354:	4631      	mov	r1, r6
 800b356:	4628      	mov	r0, r5
 800b358:	47b8      	blx	r7
 800b35a:	3001      	adds	r0, #1
 800b35c:	f43f aeae 	beq.w	800b0bc <_printf_float+0x9c>
 800b360:	f108 0801 	add.w	r8, r8, #1
 800b364:	e7ec      	b.n	800b340 <_printf_float+0x320>
 800b366:	4613      	mov	r3, r2
 800b368:	4631      	mov	r1, r6
 800b36a:	4642      	mov	r2, r8
 800b36c:	4628      	mov	r0, r5
 800b36e:	47b8      	blx	r7
 800b370:	3001      	adds	r0, #1
 800b372:	d1bf      	bne.n	800b2f4 <_printf_float+0x2d4>
 800b374:	e6a2      	b.n	800b0bc <_printf_float+0x9c>
 800b376:	2301      	movs	r3, #1
 800b378:	4631      	mov	r1, r6
 800b37a:	4628      	mov	r0, r5
 800b37c:	9204      	str	r2, [sp, #16]
 800b37e:	47b8      	blx	r7
 800b380:	3001      	adds	r0, #1
 800b382:	f43f ae9b 	beq.w	800b0bc <_printf_float+0x9c>
 800b386:	9b05      	ldr	r3, [sp, #20]
 800b388:	9a04      	ldr	r2, [sp, #16]
 800b38a:	3301      	adds	r3, #1
 800b38c:	9305      	str	r3, [sp, #20]
 800b38e:	e7b7      	b.n	800b300 <_printf_float+0x2e0>
 800b390:	4653      	mov	r3, sl
 800b392:	465a      	mov	r2, fp
 800b394:	4631      	mov	r1, r6
 800b396:	4628      	mov	r0, r5
 800b398:	47b8      	blx	r7
 800b39a:	3001      	adds	r0, #1
 800b39c:	d1be      	bne.n	800b31c <_printf_float+0x2fc>
 800b39e:	e68d      	b.n	800b0bc <_printf_float+0x9c>
 800b3a0:	9a04      	ldr	r2, [sp, #16]
 800b3a2:	464b      	mov	r3, r9
 800b3a4:	4442      	add	r2, r8
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	47b8      	blx	r7
 800b3ac:	3001      	adds	r0, #1
 800b3ae:	d1c1      	bne.n	800b334 <_printf_float+0x314>
 800b3b0:	e684      	b.n	800b0bc <_printf_float+0x9c>
 800b3b2:	9a08      	ldr	r2, [sp, #32]
 800b3b4:	2a01      	cmp	r2, #1
 800b3b6:	dc01      	bgt.n	800b3bc <_printf_float+0x39c>
 800b3b8:	07db      	lsls	r3, r3, #31
 800b3ba:	d537      	bpl.n	800b42c <_printf_float+0x40c>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	4642      	mov	r2, r8
 800b3c0:	4631      	mov	r1, r6
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	47b8      	blx	r7
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	f43f ae78 	beq.w	800b0bc <_printf_float+0x9c>
 800b3cc:	4653      	mov	r3, sl
 800b3ce:	465a      	mov	r2, fp
 800b3d0:	4631      	mov	r1, r6
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	47b8      	blx	r7
 800b3d6:	3001      	adds	r0, #1
 800b3d8:	f43f ae70 	beq.w	800b0bc <_printf_float+0x9c>
 800b3dc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b3e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3e8:	d01b      	beq.n	800b422 <_printf_float+0x402>
 800b3ea:	9b08      	ldr	r3, [sp, #32]
 800b3ec:	f108 0201 	add.w	r2, r8, #1
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	47b8      	blx	r7
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	d10e      	bne.n	800b41a <_printf_float+0x3fa>
 800b3fc:	e65e      	b.n	800b0bc <_printf_float+0x9c>
 800b3fe:	2301      	movs	r3, #1
 800b400:	464a      	mov	r2, r9
 800b402:	4631      	mov	r1, r6
 800b404:	4628      	mov	r0, r5
 800b406:	47b8      	blx	r7
 800b408:	3001      	adds	r0, #1
 800b40a:	f43f ae57 	beq.w	800b0bc <_printf_float+0x9c>
 800b40e:	f108 0801 	add.w	r8, r8, #1
 800b412:	9b08      	ldr	r3, [sp, #32]
 800b414:	3b01      	subs	r3, #1
 800b416:	4543      	cmp	r3, r8
 800b418:	dcf1      	bgt.n	800b3fe <_printf_float+0x3de>
 800b41a:	9b04      	ldr	r3, [sp, #16]
 800b41c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b420:	e6db      	b.n	800b1da <_printf_float+0x1ba>
 800b422:	f04f 0800 	mov.w	r8, #0
 800b426:	f104 091a 	add.w	r9, r4, #26
 800b42a:	e7f2      	b.n	800b412 <_printf_float+0x3f2>
 800b42c:	2301      	movs	r3, #1
 800b42e:	4642      	mov	r2, r8
 800b430:	e7df      	b.n	800b3f2 <_printf_float+0x3d2>
 800b432:	2301      	movs	r3, #1
 800b434:	464a      	mov	r2, r9
 800b436:	4631      	mov	r1, r6
 800b438:	4628      	mov	r0, r5
 800b43a:	47b8      	blx	r7
 800b43c:	3001      	adds	r0, #1
 800b43e:	f43f ae3d 	beq.w	800b0bc <_printf_float+0x9c>
 800b442:	f108 0801 	add.w	r8, r8, #1
 800b446:	68e3      	ldr	r3, [r4, #12]
 800b448:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b44a:	1a5b      	subs	r3, r3, r1
 800b44c:	4543      	cmp	r3, r8
 800b44e:	dcf0      	bgt.n	800b432 <_printf_float+0x412>
 800b450:	e6f7      	b.n	800b242 <_printf_float+0x222>
 800b452:	f04f 0800 	mov.w	r8, #0
 800b456:	f104 0919 	add.w	r9, r4, #25
 800b45a:	e7f4      	b.n	800b446 <_printf_float+0x426>

0800b45c <_printf_common>:
 800b45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b460:	4616      	mov	r6, r2
 800b462:	4699      	mov	r9, r3
 800b464:	688a      	ldr	r2, [r1, #8]
 800b466:	690b      	ldr	r3, [r1, #16]
 800b468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b46c:	4293      	cmp	r3, r2
 800b46e:	bfb8      	it	lt
 800b470:	4613      	movlt	r3, r2
 800b472:	6033      	str	r3, [r6, #0]
 800b474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b478:	4607      	mov	r7, r0
 800b47a:	460c      	mov	r4, r1
 800b47c:	b10a      	cbz	r2, 800b482 <_printf_common+0x26>
 800b47e:	3301      	adds	r3, #1
 800b480:	6033      	str	r3, [r6, #0]
 800b482:	6823      	ldr	r3, [r4, #0]
 800b484:	0699      	lsls	r1, r3, #26
 800b486:	bf42      	ittt	mi
 800b488:	6833      	ldrmi	r3, [r6, #0]
 800b48a:	3302      	addmi	r3, #2
 800b48c:	6033      	strmi	r3, [r6, #0]
 800b48e:	6825      	ldr	r5, [r4, #0]
 800b490:	f015 0506 	ands.w	r5, r5, #6
 800b494:	d106      	bne.n	800b4a4 <_printf_common+0x48>
 800b496:	f104 0a19 	add.w	sl, r4, #25
 800b49a:	68e3      	ldr	r3, [r4, #12]
 800b49c:	6832      	ldr	r2, [r6, #0]
 800b49e:	1a9b      	subs	r3, r3, r2
 800b4a0:	42ab      	cmp	r3, r5
 800b4a2:	dc26      	bgt.n	800b4f2 <_printf_common+0x96>
 800b4a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4a8:	1e13      	subs	r3, r2, #0
 800b4aa:	6822      	ldr	r2, [r4, #0]
 800b4ac:	bf18      	it	ne
 800b4ae:	2301      	movne	r3, #1
 800b4b0:	0692      	lsls	r2, r2, #26
 800b4b2:	d42b      	bmi.n	800b50c <_printf_common+0xb0>
 800b4b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4b8:	4649      	mov	r1, r9
 800b4ba:	4638      	mov	r0, r7
 800b4bc:	47c0      	blx	r8
 800b4be:	3001      	adds	r0, #1
 800b4c0:	d01e      	beq.n	800b500 <_printf_common+0xa4>
 800b4c2:	6823      	ldr	r3, [r4, #0]
 800b4c4:	68e5      	ldr	r5, [r4, #12]
 800b4c6:	6832      	ldr	r2, [r6, #0]
 800b4c8:	f003 0306 	and.w	r3, r3, #6
 800b4cc:	2b04      	cmp	r3, #4
 800b4ce:	bf08      	it	eq
 800b4d0:	1aad      	subeq	r5, r5, r2
 800b4d2:	68a3      	ldr	r3, [r4, #8]
 800b4d4:	6922      	ldr	r2, [r4, #16]
 800b4d6:	bf0c      	ite	eq
 800b4d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4dc:	2500      	movne	r5, #0
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	bfc4      	itt	gt
 800b4e2:	1a9b      	subgt	r3, r3, r2
 800b4e4:	18ed      	addgt	r5, r5, r3
 800b4e6:	2600      	movs	r6, #0
 800b4e8:	341a      	adds	r4, #26
 800b4ea:	42b5      	cmp	r5, r6
 800b4ec:	d11a      	bne.n	800b524 <_printf_common+0xc8>
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	e008      	b.n	800b504 <_printf_common+0xa8>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	4652      	mov	r2, sl
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	4638      	mov	r0, r7
 800b4fa:	47c0      	blx	r8
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d103      	bne.n	800b508 <_printf_common+0xac>
 800b500:	f04f 30ff 	mov.w	r0, #4294967295
 800b504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b508:	3501      	adds	r5, #1
 800b50a:	e7c6      	b.n	800b49a <_printf_common+0x3e>
 800b50c:	18e1      	adds	r1, r4, r3
 800b50e:	1c5a      	adds	r2, r3, #1
 800b510:	2030      	movs	r0, #48	; 0x30
 800b512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b516:	4422      	add	r2, r4
 800b518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b51c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b520:	3302      	adds	r3, #2
 800b522:	e7c7      	b.n	800b4b4 <_printf_common+0x58>
 800b524:	2301      	movs	r3, #1
 800b526:	4622      	mov	r2, r4
 800b528:	4649      	mov	r1, r9
 800b52a:	4638      	mov	r0, r7
 800b52c:	47c0      	blx	r8
 800b52e:	3001      	adds	r0, #1
 800b530:	d0e6      	beq.n	800b500 <_printf_common+0xa4>
 800b532:	3601      	adds	r6, #1
 800b534:	e7d9      	b.n	800b4ea <_printf_common+0x8e>
	...

0800b538 <_printf_i>:
 800b538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b53c:	7e0f      	ldrb	r7, [r1, #24]
 800b53e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b540:	2f78      	cmp	r7, #120	; 0x78
 800b542:	4691      	mov	r9, r2
 800b544:	4680      	mov	r8, r0
 800b546:	460c      	mov	r4, r1
 800b548:	469a      	mov	sl, r3
 800b54a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b54e:	d807      	bhi.n	800b560 <_printf_i+0x28>
 800b550:	2f62      	cmp	r7, #98	; 0x62
 800b552:	d80a      	bhi.n	800b56a <_printf_i+0x32>
 800b554:	2f00      	cmp	r7, #0
 800b556:	f000 80d8 	beq.w	800b70a <_printf_i+0x1d2>
 800b55a:	2f58      	cmp	r7, #88	; 0x58
 800b55c:	f000 80a3 	beq.w	800b6a6 <_printf_i+0x16e>
 800b560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b568:	e03a      	b.n	800b5e0 <_printf_i+0xa8>
 800b56a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b56e:	2b15      	cmp	r3, #21
 800b570:	d8f6      	bhi.n	800b560 <_printf_i+0x28>
 800b572:	a101      	add	r1, pc, #4	; (adr r1, 800b578 <_printf_i+0x40>)
 800b574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b578:	0800b5d1 	.word	0x0800b5d1
 800b57c:	0800b5e5 	.word	0x0800b5e5
 800b580:	0800b561 	.word	0x0800b561
 800b584:	0800b561 	.word	0x0800b561
 800b588:	0800b561 	.word	0x0800b561
 800b58c:	0800b561 	.word	0x0800b561
 800b590:	0800b5e5 	.word	0x0800b5e5
 800b594:	0800b561 	.word	0x0800b561
 800b598:	0800b561 	.word	0x0800b561
 800b59c:	0800b561 	.word	0x0800b561
 800b5a0:	0800b561 	.word	0x0800b561
 800b5a4:	0800b6f1 	.word	0x0800b6f1
 800b5a8:	0800b615 	.word	0x0800b615
 800b5ac:	0800b6d3 	.word	0x0800b6d3
 800b5b0:	0800b561 	.word	0x0800b561
 800b5b4:	0800b561 	.word	0x0800b561
 800b5b8:	0800b713 	.word	0x0800b713
 800b5bc:	0800b561 	.word	0x0800b561
 800b5c0:	0800b615 	.word	0x0800b615
 800b5c4:	0800b561 	.word	0x0800b561
 800b5c8:	0800b561 	.word	0x0800b561
 800b5cc:	0800b6db 	.word	0x0800b6db
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	1d1a      	adds	r2, r3, #4
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	602a      	str	r2, [r5, #0]
 800b5d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e0a3      	b.n	800b72c <_printf_i+0x1f4>
 800b5e4:	6820      	ldr	r0, [r4, #0]
 800b5e6:	6829      	ldr	r1, [r5, #0]
 800b5e8:	0606      	lsls	r6, r0, #24
 800b5ea:	f101 0304 	add.w	r3, r1, #4
 800b5ee:	d50a      	bpl.n	800b606 <_printf_i+0xce>
 800b5f0:	680e      	ldr	r6, [r1, #0]
 800b5f2:	602b      	str	r3, [r5, #0]
 800b5f4:	2e00      	cmp	r6, #0
 800b5f6:	da03      	bge.n	800b600 <_printf_i+0xc8>
 800b5f8:	232d      	movs	r3, #45	; 0x2d
 800b5fa:	4276      	negs	r6, r6
 800b5fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b600:	485e      	ldr	r0, [pc, #376]	; (800b77c <_printf_i+0x244>)
 800b602:	230a      	movs	r3, #10
 800b604:	e019      	b.n	800b63a <_printf_i+0x102>
 800b606:	680e      	ldr	r6, [r1, #0]
 800b608:	602b      	str	r3, [r5, #0]
 800b60a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b60e:	bf18      	it	ne
 800b610:	b236      	sxthne	r6, r6
 800b612:	e7ef      	b.n	800b5f4 <_printf_i+0xbc>
 800b614:	682b      	ldr	r3, [r5, #0]
 800b616:	6820      	ldr	r0, [r4, #0]
 800b618:	1d19      	adds	r1, r3, #4
 800b61a:	6029      	str	r1, [r5, #0]
 800b61c:	0601      	lsls	r1, r0, #24
 800b61e:	d501      	bpl.n	800b624 <_printf_i+0xec>
 800b620:	681e      	ldr	r6, [r3, #0]
 800b622:	e002      	b.n	800b62a <_printf_i+0xf2>
 800b624:	0646      	lsls	r6, r0, #25
 800b626:	d5fb      	bpl.n	800b620 <_printf_i+0xe8>
 800b628:	881e      	ldrh	r6, [r3, #0]
 800b62a:	4854      	ldr	r0, [pc, #336]	; (800b77c <_printf_i+0x244>)
 800b62c:	2f6f      	cmp	r7, #111	; 0x6f
 800b62e:	bf0c      	ite	eq
 800b630:	2308      	moveq	r3, #8
 800b632:	230a      	movne	r3, #10
 800b634:	2100      	movs	r1, #0
 800b636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b63a:	6865      	ldr	r5, [r4, #4]
 800b63c:	60a5      	str	r5, [r4, #8]
 800b63e:	2d00      	cmp	r5, #0
 800b640:	bfa2      	ittt	ge
 800b642:	6821      	ldrge	r1, [r4, #0]
 800b644:	f021 0104 	bicge.w	r1, r1, #4
 800b648:	6021      	strge	r1, [r4, #0]
 800b64a:	b90e      	cbnz	r6, 800b650 <_printf_i+0x118>
 800b64c:	2d00      	cmp	r5, #0
 800b64e:	d04d      	beq.n	800b6ec <_printf_i+0x1b4>
 800b650:	4615      	mov	r5, r2
 800b652:	fbb6 f1f3 	udiv	r1, r6, r3
 800b656:	fb03 6711 	mls	r7, r3, r1, r6
 800b65a:	5dc7      	ldrb	r7, [r0, r7]
 800b65c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b660:	4637      	mov	r7, r6
 800b662:	42bb      	cmp	r3, r7
 800b664:	460e      	mov	r6, r1
 800b666:	d9f4      	bls.n	800b652 <_printf_i+0x11a>
 800b668:	2b08      	cmp	r3, #8
 800b66a:	d10b      	bne.n	800b684 <_printf_i+0x14c>
 800b66c:	6823      	ldr	r3, [r4, #0]
 800b66e:	07de      	lsls	r6, r3, #31
 800b670:	d508      	bpl.n	800b684 <_printf_i+0x14c>
 800b672:	6923      	ldr	r3, [r4, #16]
 800b674:	6861      	ldr	r1, [r4, #4]
 800b676:	4299      	cmp	r1, r3
 800b678:	bfde      	ittt	le
 800b67a:	2330      	movle	r3, #48	; 0x30
 800b67c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b680:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b684:	1b52      	subs	r2, r2, r5
 800b686:	6122      	str	r2, [r4, #16]
 800b688:	f8cd a000 	str.w	sl, [sp]
 800b68c:	464b      	mov	r3, r9
 800b68e:	aa03      	add	r2, sp, #12
 800b690:	4621      	mov	r1, r4
 800b692:	4640      	mov	r0, r8
 800b694:	f7ff fee2 	bl	800b45c <_printf_common>
 800b698:	3001      	adds	r0, #1
 800b69a:	d14c      	bne.n	800b736 <_printf_i+0x1fe>
 800b69c:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a0:	b004      	add	sp, #16
 800b6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a6:	4835      	ldr	r0, [pc, #212]	; (800b77c <_printf_i+0x244>)
 800b6a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b6ac:	6829      	ldr	r1, [r5, #0]
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b6b4:	6029      	str	r1, [r5, #0]
 800b6b6:	061d      	lsls	r5, r3, #24
 800b6b8:	d514      	bpl.n	800b6e4 <_printf_i+0x1ac>
 800b6ba:	07df      	lsls	r7, r3, #31
 800b6bc:	bf44      	itt	mi
 800b6be:	f043 0320 	orrmi.w	r3, r3, #32
 800b6c2:	6023      	strmi	r3, [r4, #0]
 800b6c4:	b91e      	cbnz	r6, 800b6ce <_printf_i+0x196>
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	f023 0320 	bic.w	r3, r3, #32
 800b6cc:	6023      	str	r3, [r4, #0]
 800b6ce:	2310      	movs	r3, #16
 800b6d0:	e7b0      	b.n	800b634 <_printf_i+0xfc>
 800b6d2:	6823      	ldr	r3, [r4, #0]
 800b6d4:	f043 0320 	orr.w	r3, r3, #32
 800b6d8:	6023      	str	r3, [r4, #0]
 800b6da:	2378      	movs	r3, #120	; 0x78
 800b6dc:	4828      	ldr	r0, [pc, #160]	; (800b780 <_printf_i+0x248>)
 800b6de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6e2:	e7e3      	b.n	800b6ac <_printf_i+0x174>
 800b6e4:	0659      	lsls	r1, r3, #25
 800b6e6:	bf48      	it	mi
 800b6e8:	b2b6      	uxthmi	r6, r6
 800b6ea:	e7e6      	b.n	800b6ba <_printf_i+0x182>
 800b6ec:	4615      	mov	r5, r2
 800b6ee:	e7bb      	b.n	800b668 <_printf_i+0x130>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	6826      	ldr	r6, [r4, #0]
 800b6f4:	6961      	ldr	r1, [r4, #20]
 800b6f6:	1d18      	adds	r0, r3, #4
 800b6f8:	6028      	str	r0, [r5, #0]
 800b6fa:	0635      	lsls	r5, r6, #24
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	d501      	bpl.n	800b704 <_printf_i+0x1cc>
 800b700:	6019      	str	r1, [r3, #0]
 800b702:	e002      	b.n	800b70a <_printf_i+0x1d2>
 800b704:	0670      	lsls	r0, r6, #25
 800b706:	d5fb      	bpl.n	800b700 <_printf_i+0x1c8>
 800b708:	8019      	strh	r1, [r3, #0]
 800b70a:	2300      	movs	r3, #0
 800b70c:	6123      	str	r3, [r4, #16]
 800b70e:	4615      	mov	r5, r2
 800b710:	e7ba      	b.n	800b688 <_printf_i+0x150>
 800b712:	682b      	ldr	r3, [r5, #0]
 800b714:	1d1a      	adds	r2, r3, #4
 800b716:	602a      	str	r2, [r5, #0]
 800b718:	681d      	ldr	r5, [r3, #0]
 800b71a:	6862      	ldr	r2, [r4, #4]
 800b71c:	2100      	movs	r1, #0
 800b71e:	4628      	mov	r0, r5
 800b720:	f7f4 fde6 	bl	80002f0 <memchr>
 800b724:	b108      	cbz	r0, 800b72a <_printf_i+0x1f2>
 800b726:	1b40      	subs	r0, r0, r5
 800b728:	6060      	str	r0, [r4, #4]
 800b72a:	6863      	ldr	r3, [r4, #4]
 800b72c:	6123      	str	r3, [r4, #16]
 800b72e:	2300      	movs	r3, #0
 800b730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b734:	e7a8      	b.n	800b688 <_printf_i+0x150>
 800b736:	6923      	ldr	r3, [r4, #16]
 800b738:	462a      	mov	r2, r5
 800b73a:	4649      	mov	r1, r9
 800b73c:	4640      	mov	r0, r8
 800b73e:	47d0      	blx	sl
 800b740:	3001      	adds	r0, #1
 800b742:	d0ab      	beq.n	800b69c <_printf_i+0x164>
 800b744:	6823      	ldr	r3, [r4, #0]
 800b746:	079b      	lsls	r3, r3, #30
 800b748:	d413      	bmi.n	800b772 <_printf_i+0x23a>
 800b74a:	68e0      	ldr	r0, [r4, #12]
 800b74c:	9b03      	ldr	r3, [sp, #12]
 800b74e:	4298      	cmp	r0, r3
 800b750:	bfb8      	it	lt
 800b752:	4618      	movlt	r0, r3
 800b754:	e7a4      	b.n	800b6a0 <_printf_i+0x168>
 800b756:	2301      	movs	r3, #1
 800b758:	4632      	mov	r2, r6
 800b75a:	4649      	mov	r1, r9
 800b75c:	4640      	mov	r0, r8
 800b75e:	47d0      	blx	sl
 800b760:	3001      	adds	r0, #1
 800b762:	d09b      	beq.n	800b69c <_printf_i+0x164>
 800b764:	3501      	adds	r5, #1
 800b766:	68e3      	ldr	r3, [r4, #12]
 800b768:	9903      	ldr	r1, [sp, #12]
 800b76a:	1a5b      	subs	r3, r3, r1
 800b76c:	42ab      	cmp	r3, r5
 800b76e:	dcf2      	bgt.n	800b756 <_printf_i+0x21e>
 800b770:	e7eb      	b.n	800b74a <_printf_i+0x212>
 800b772:	2500      	movs	r5, #0
 800b774:	f104 0619 	add.w	r6, r4, #25
 800b778:	e7f5      	b.n	800b766 <_printf_i+0x22e>
 800b77a:	bf00      	nop
 800b77c:	0800f66a 	.word	0x0800f66a
 800b780:	0800f67b 	.word	0x0800f67b

0800b784 <_scanf_float>:
 800b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b788:	b087      	sub	sp, #28
 800b78a:	4617      	mov	r7, r2
 800b78c:	9303      	str	r3, [sp, #12]
 800b78e:	688b      	ldr	r3, [r1, #8]
 800b790:	1e5a      	subs	r2, r3, #1
 800b792:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b796:	bf83      	ittte	hi
 800b798:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b79c:	195b      	addhi	r3, r3, r5
 800b79e:	9302      	strhi	r3, [sp, #8]
 800b7a0:	2300      	movls	r3, #0
 800b7a2:	bf86      	itte	hi
 800b7a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b7a8:	608b      	strhi	r3, [r1, #8]
 800b7aa:	9302      	strls	r3, [sp, #8]
 800b7ac:	680b      	ldr	r3, [r1, #0]
 800b7ae:	468b      	mov	fp, r1
 800b7b0:	2500      	movs	r5, #0
 800b7b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b7b6:	f84b 3b1c 	str.w	r3, [fp], #28
 800b7ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b7be:	4680      	mov	r8, r0
 800b7c0:	460c      	mov	r4, r1
 800b7c2:	465e      	mov	r6, fp
 800b7c4:	46aa      	mov	sl, r5
 800b7c6:	46a9      	mov	r9, r5
 800b7c8:	9501      	str	r5, [sp, #4]
 800b7ca:	68a2      	ldr	r2, [r4, #8]
 800b7cc:	b152      	cbz	r2, 800b7e4 <_scanf_float+0x60>
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	2b4e      	cmp	r3, #78	; 0x4e
 800b7d4:	d864      	bhi.n	800b8a0 <_scanf_float+0x11c>
 800b7d6:	2b40      	cmp	r3, #64	; 0x40
 800b7d8:	d83c      	bhi.n	800b854 <_scanf_float+0xd0>
 800b7da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b7de:	b2c8      	uxtb	r0, r1
 800b7e0:	280e      	cmp	r0, #14
 800b7e2:	d93a      	bls.n	800b85a <_scanf_float+0xd6>
 800b7e4:	f1b9 0f00 	cmp.w	r9, #0
 800b7e8:	d003      	beq.n	800b7f2 <_scanf_float+0x6e>
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7f0:	6023      	str	r3, [r4, #0]
 800b7f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7f6:	f1ba 0f01 	cmp.w	sl, #1
 800b7fa:	f200 8113 	bhi.w	800ba24 <_scanf_float+0x2a0>
 800b7fe:	455e      	cmp	r6, fp
 800b800:	f200 8105 	bhi.w	800ba0e <_scanf_float+0x28a>
 800b804:	2501      	movs	r5, #1
 800b806:	4628      	mov	r0, r5
 800b808:	b007      	add	sp, #28
 800b80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b812:	2a0d      	cmp	r2, #13
 800b814:	d8e6      	bhi.n	800b7e4 <_scanf_float+0x60>
 800b816:	a101      	add	r1, pc, #4	; (adr r1, 800b81c <_scanf_float+0x98>)
 800b818:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b81c:	0800b95b 	.word	0x0800b95b
 800b820:	0800b7e5 	.word	0x0800b7e5
 800b824:	0800b7e5 	.word	0x0800b7e5
 800b828:	0800b7e5 	.word	0x0800b7e5
 800b82c:	0800b9bb 	.word	0x0800b9bb
 800b830:	0800b993 	.word	0x0800b993
 800b834:	0800b7e5 	.word	0x0800b7e5
 800b838:	0800b7e5 	.word	0x0800b7e5
 800b83c:	0800b969 	.word	0x0800b969
 800b840:	0800b7e5 	.word	0x0800b7e5
 800b844:	0800b7e5 	.word	0x0800b7e5
 800b848:	0800b7e5 	.word	0x0800b7e5
 800b84c:	0800b7e5 	.word	0x0800b7e5
 800b850:	0800b921 	.word	0x0800b921
 800b854:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b858:	e7db      	b.n	800b812 <_scanf_float+0x8e>
 800b85a:	290e      	cmp	r1, #14
 800b85c:	d8c2      	bhi.n	800b7e4 <_scanf_float+0x60>
 800b85e:	a001      	add	r0, pc, #4	; (adr r0, 800b864 <_scanf_float+0xe0>)
 800b860:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b864:	0800b913 	.word	0x0800b913
 800b868:	0800b7e5 	.word	0x0800b7e5
 800b86c:	0800b913 	.word	0x0800b913
 800b870:	0800b9a7 	.word	0x0800b9a7
 800b874:	0800b7e5 	.word	0x0800b7e5
 800b878:	0800b8c1 	.word	0x0800b8c1
 800b87c:	0800b8fd 	.word	0x0800b8fd
 800b880:	0800b8fd 	.word	0x0800b8fd
 800b884:	0800b8fd 	.word	0x0800b8fd
 800b888:	0800b8fd 	.word	0x0800b8fd
 800b88c:	0800b8fd 	.word	0x0800b8fd
 800b890:	0800b8fd 	.word	0x0800b8fd
 800b894:	0800b8fd 	.word	0x0800b8fd
 800b898:	0800b8fd 	.word	0x0800b8fd
 800b89c:	0800b8fd 	.word	0x0800b8fd
 800b8a0:	2b6e      	cmp	r3, #110	; 0x6e
 800b8a2:	d809      	bhi.n	800b8b8 <_scanf_float+0x134>
 800b8a4:	2b60      	cmp	r3, #96	; 0x60
 800b8a6:	d8b2      	bhi.n	800b80e <_scanf_float+0x8a>
 800b8a8:	2b54      	cmp	r3, #84	; 0x54
 800b8aa:	d077      	beq.n	800b99c <_scanf_float+0x218>
 800b8ac:	2b59      	cmp	r3, #89	; 0x59
 800b8ae:	d199      	bne.n	800b7e4 <_scanf_float+0x60>
 800b8b0:	2d07      	cmp	r5, #7
 800b8b2:	d197      	bne.n	800b7e4 <_scanf_float+0x60>
 800b8b4:	2508      	movs	r5, #8
 800b8b6:	e029      	b.n	800b90c <_scanf_float+0x188>
 800b8b8:	2b74      	cmp	r3, #116	; 0x74
 800b8ba:	d06f      	beq.n	800b99c <_scanf_float+0x218>
 800b8bc:	2b79      	cmp	r3, #121	; 0x79
 800b8be:	e7f6      	b.n	800b8ae <_scanf_float+0x12a>
 800b8c0:	6821      	ldr	r1, [r4, #0]
 800b8c2:	05c8      	lsls	r0, r1, #23
 800b8c4:	d51a      	bpl.n	800b8fc <_scanf_float+0x178>
 800b8c6:	9b02      	ldr	r3, [sp, #8]
 800b8c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b8cc:	6021      	str	r1, [r4, #0]
 800b8ce:	f109 0901 	add.w	r9, r9, #1
 800b8d2:	b11b      	cbz	r3, 800b8dc <_scanf_float+0x158>
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	3201      	adds	r2, #1
 800b8d8:	9302      	str	r3, [sp, #8]
 800b8da:	60a2      	str	r2, [r4, #8]
 800b8dc:	68a3      	ldr	r3, [r4, #8]
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	60a3      	str	r3, [r4, #8]
 800b8e2:	6923      	ldr	r3, [r4, #16]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	6123      	str	r3, [r4, #16]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	607b      	str	r3, [r7, #4]
 800b8f0:	f340 8084 	ble.w	800b9fc <_scanf_float+0x278>
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	603b      	str	r3, [r7, #0]
 800b8fa:	e766      	b.n	800b7ca <_scanf_float+0x46>
 800b8fc:	eb1a 0f05 	cmn.w	sl, r5
 800b900:	f47f af70 	bne.w	800b7e4 <_scanf_float+0x60>
 800b904:	6822      	ldr	r2, [r4, #0]
 800b906:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b90a:	6022      	str	r2, [r4, #0]
 800b90c:	f806 3b01 	strb.w	r3, [r6], #1
 800b910:	e7e4      	b.n	800b8dc <_scanf_float+0x158>
 800b912:	6822      	ldr	r2, [r4, #0]
 800b914:	0610      	lsls	r0, r2, #24
 800b916:	f57f af65 	bpl.w	800b7e4 <_scanf_float+0x60>
 800b91a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b91e:	e7f4      	b.n	800b90a <_scanf_float+0x186>
 800b920:	f1ba 0f00 	cmp.w	sl, #0
 800b924:	d10e      	bne.n	800b944 <_scanf_float+0x1c0>
 800b926:	f1b9 0f00 	cmp.w	r9, #0
 800b92a:	d10e      	bne.n	800b94a <_scanf_float+0x1c6>
 800b92c:	6822      	ldr	r2, [r4, #0]
 800b92e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b932:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b936:	d108      	bne.n	800b94a <_scanf_float+0x1c6>
 800b938:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b93c:	6022      	str	r2, [r4, #0]
 800b93e:	f04f 0a01 	mov.w	sl, #1
 800b942:	e7e3      	b.n	800b90c <_scanf_float+0x188>
 800b944:	f1ba 0f02 	cmp.w	sl, #2
 800b948:	d055      	beq.n	800b9f6 <_scanf_float+0x272>
 800b94a:	2d01      	cmp	r5, #1
 800b94c:	d002      	beq.n	800b954 <_scanf_float+0x1d0>
 800b94e:	2d04      	cmp	r5, #4
 800b950:	f47f af48 	bne.w	800b7e4 <_scanf_float+0x60>
 800b954:	3501      	adds	r5, #1
 800b956:	b2ed      	uxtb	r5, r5
 800b958:	e7d8      	b.n	800b90c <_scanf_float+0x188>
 800b95a:	f1ba 0f01 	cmp.w	sl, #1
 800b95e:	f47f af41 	bne.w	800b7e4 <_scanf_float+0x60>
 800b962:	f04f 0a02 	mov.w	sl, #2
 800b966:	e7d1      	b.n	800b90c <_scanf_float+0x188>
 800b968:	b97d      	cbnz	r5, 800b98a <_scanf_float+0x206>
 800b96a:	f1b9 0f00 	cmp.w	r9, #0
 800b96e:	f47f af3c 	bne.w	800b7ea <_scanf_float+0x66>
 800b972:	6822      	ldr	r2, [r4, #0]
 800b974:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b978:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b97c:	f47f af39 	bne.w	800b7f2 <_scanf_float+0x6e>
 800b980:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b984:	6022      	str	r2, [r4, #0]
 800b986:	2501      	movs	r5, #1
 800b988:	e7c0      	b.n	800b90c <_scanf_float+0x188>
 800b98a:	2d03      	cmp	r5, #3
 800b98c:	d0e2      	beq.n	800b954 <_scanf_float+0x1d0>
 800b98e:	2d05      	cmp	r5, #5
 800b990:	e7de      	b.n	800b950 <_scanf_float+0x1cc>
 800b992:	2d02      	cmp	r5, #2
 800b994:	f47f af26 	bne.w	800b7e4 <_scanf_float+0x60>
 800b998:	2503      	movs	r5, #3
 800b99a:	e7b7      	b.n	800b90c <_scanf_float+0x188>
 800b99c:	2d06      	cmp	r5, #6
 800b99e:	f47f af21 	bne.w	800b7e4 <_scanf_float+0x60>
 800b9a2:	2507      	movs	r5, #7
 800b9a4:	e7b2      	b.n	800b90c <_scanf_float+0x188>
 800b9a6:	6822      	ldr	r2, [r4, #0]
 800b9a8:	0591      	lsls	r1, r2, #22
 800b9aa:	f57f af1b 	bpl.w	800b7e4 <_scanf_float+0x60>
 800b9ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b9b2:	6022      	str	r2, [r4, #0]
 800b9b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b9b8:	e7a8      	b.n	800b90c <_scanf_float+0x188>
 800b9ba:	6822      	ldr	r2, [r4, #0]
 800b9bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b9c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b9c4:	d006      	beq.n	800b9d4 <_scanf_float+0x250>
 800b9c6:	0550      	lsls	r0, r2, #21
 800b9c8:	f57f af0c 	bpl.w	800b7e4 <_scanf_float+0x60>
 800b9cc:	f1b9 0f00 	cmp.w	r9, #0
 800b9d0:	f43f af0f 	beq.w	800b7f2 <_scanf_float+0x6e>
 800b9d4:	0591      	lsls	r1, r2, #22
 800b9d6:	bf58      	it	pl
 800b9d8:	9901      	ldrpl	r1, [sp, #4]
 800b9da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b9de:	bf58      	it	pl
 800b9e0:	eba9 0101 	subpl.w	r1, r9, r1
 800b9e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b9e8:	bf58      	it	pl
 800b9ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b9ee:	6022      	str	r2, [r4, #0]
 800b9f0:	f04f 0900 	mov.w	r9, #0
 800b9f4:	e78a      	b.n	800b90c <_scanf_float+0x188>
 800b9f6:	f04f 0a03 	mov.w	sl, #3
 800b9fa:	e787      	b.n	800b90c <_scanf_float+0x188>
 800b9fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ba00:	4639      	mov	r1, r7
 800ba02:	4640      	mov	r0, r8
 800ba04:	4798      	blx	r3
 800ba06:	2800      	cmp	r0, #0
 800ba08:	f43f aedf 	beq.w	800b7ca <_scanf_float+0x46>
 800ba0c:	e6ea      	b.n	800b7e4 <_scanf_float+0x60>
 800ba0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba16:	463a      	mov	r2, r7
 800ba18:	4640      	mov	r0, r8
 800ba1a:	4798      	blx	r3
 800ba1c:	6923      	ldr	r3, [r4, #16]
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	6123      	str	r3, [r4, #16]
 800ba22:	e6ec      	b.n	800b7fe <_scanf_float+0x7a>
 800ba24:	1e6b      	subs	r3, r5, #1
 800ba26:	2b06      	cmp	r3, #6
 800ba28:	d825      	bhi.n	800ba76 <_scanf_float+0x2f2>
 800ba2a:	2d02      	cmp	r5, #2
 800ba2c:	d836      	bhi.n	800ba9c <_scanf_float+0x318>
 800ba2e:	455e      	cmp	r6, fp
 800ba30:	f67f aee8 	bls.w	800b804 <_scanf_float+0x80>
 800ba34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba3c:	463a      	mov	r2, r7
 800ba3e:	4640      	mov	r0, r8
 800ba40:	4798      	blx	r3
 800ba42:	6923      	ldr	r3, [r4, #16]
 800ba44:	3b01      	subs	r3, #1
 800ba46:	6123      	str	r3, [r4, #16]
 800ba48:	e7f1      	b.n	800ba2e <_scanf_float+0x2aa>
 800ba4a:	9802      	ldr	r0, [sp, #8]
 800ba4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba50:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ba54:	9002      	str	r0, [sp, #8]
 800ba56:	463a      	mov	r2, r7
 800ba58:	4640      	mov	r0, r8
 800ba5a:	4798      	blx	r3
 800ba5c:	6923      	ldr	r3, [r4, #16]
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	6123      	str	r3, [r4, #16]
 800ba62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba66:	fa5f fa8a 	uxtb.w	sl, sl
 800ba6a:	f1ba 0f02 	cmp.w	sl, #2
 800ba6e:	d1ec      	bne.n	800ba4a <_scanf_float+0x2c6>
 800ba70:	3d03      	subs	r5, #3
 800ba72:	b2ed      	uxtb	r5, r5
 800ba74:	1b76      	subs	r6, r6, r5
 800ba76:	6823      	ldr	r3, [r4, #0]
 800ba78:	05da      	lsls	r2, r3, #23
 800ba7a:	d52f      	bpl.n	800badc <_scanf_float+0x358>
 800ba7c:	055b      	lsls	r3, r3, #21
 800ba7e:	d510      	bpl.n	800baa2 <_scanf_float+0x31e>
 800ba80:	455e      	cmp	r6, fp
 800ba82:	f67f aebf 	bls.w	800b804 <_scanf_float+0x80>
 800ba86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba8e:	463a      	mov	r2, r7
 800ba90:	4640      	mov	r0, r8
 800ba92:	4798      	blx	r3
 800ba94:	6923      	ldr	r3, [r4, #16]
 800ba96:	3b01      	subs	r3, #1
 800ba98:	6123      	str	r3, [r4, #16]
 800ba9a:	e7f1      	b.n	800ba80 <_scanf_float+0x2fc>
 800ba9c:	46aa      	mov	sl, r5
 800ba9e:	9602      	str	r6, [sp, #8]
 800baa0:	e7df      	b.n	800ba62 <_scanf_float+0x2de>
 800baa2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800baa6:	6923      	ldr	r3, [r4, #16]
 800baa8:	2965      	cmp	r1, #101	; 0x65
 800baaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800baae:	f106 35ff 	add.w	r5, r6, #4294967295
 800bab2:	6123      	str	r3, [r4, #16]
 800bab4:	d00c      	beq.n	800bad0 <_scanf_float+0x34c>
 800bab6:	2945      	cmp	r1, #69	; 0x45
 800bab8:	d00a      	beq.n	800bad0 <_scanf_float+0x34c>
 800baba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800babe:	463a      	mov	r2, r7
 800bac0:	4640      	mov	r0, r8
 800bac2:	4798      	blx	r3
 800bac4:	6923      	ldr	r3, [r4, #16]
 800bac6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800baca:	3b01      	subs	r3, #1
 800bacc:	1eb5      	subs	r5, r6, #2
 800bace:	6123      	str	r3, [r4, #16]
 800bad0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bad4:	463a      	mov	r2, r7
 800bad6:	4640      	mov	r0, r8
 800bad8:	4798      	blx	r3
 800bada:	462e      	mov	r6, r5
 800badc:	6825      	ldr	r5, [r4, #0]
 800bade:	f015 0510 	ands.w	r5, r5, #16
 800bae2:	d14e      	bne.n	800bb82 <_scanf_float+0x3fe>
 800bae4:	7035      	strb	r5, [r6, #0]
 800bae6:	6823      	ldr	r3, [r4, #0]
 800bae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800baec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800baf0:	d119      	bne.n	800bb26 <_scanf_float+0x3a2>
 800baf2:	9b01      	ldr	r3, [sp, #4]
 800baf4:	454b      	cmp	r3, r9
 800baf6:	eba3 0209 	sub.w	r2, r3, r9
 800bafa:	d121      	bne.n	800bb40 <_scanf_float+0x3bc>
 800bafc:	2200      	movs	r2, #0
 800bafe:	4659      	mov	r1, fp
 800bb00:	4640      	mov	r0, r8
 800bb02:	f000 fe3b 	bl	800c77c <_strtod_r>
 800bb06:	6822      	ldr	r2, [r4, #0]
 800bb08:	9b03      	ldr	r3, [sp, #12]
 800bb0a:	f012 0f02 	tst.w	r2, #2
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	d021      	beq.n	800bb56 <_scanf_float+0x3d2>
 800bb12:	9903      	ldr	r1, [sp, #12]
 800bb14:	1d1a      	adds	r2, r3, #4
 800bb16:	600a      	str	r2, [r1, #0]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	ed83 0b00 	vstr	d0, [r3]
 800bb1e:	68e3      	ldr	r3, [r4, #12]
 800bb20:	3301      	adds	r3, #1
 800bb22:	60e3      	str	r3, [r4, #12]
 800bb24:	e66f      	b.n	800b806 <_scanf_float+0x82>
 800bb26:	9b04      	ldr	r3, [sp, #16]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d0e7      	beq.n	800bafc <_scanf_float+0x378>
 800bb2c:	9905      	ldr	r1, [sp, #20]
 800bb2e:	230a      	movs	r3, #10
 800bb30:	462a      	mov	r2, r5
 800bb32:	3101      	adds	r1, #1
 800bb34:	4640      	mov	r0, r8
 800bb36:	f000 fea9 	bl	800c88c <_strtol_r>
 800bb3a:	9b04      	ldr	r3, [sp, #16]
 800bb3c:	9e05      	ldr	r6, [sp, #20]
 800bb3e:	1ac2      	subs	r2, r0, r3
 800bb40:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bb44:	429e      	cmp	r6, r3
 800bb46:	bf28      	it	cs
 800bb48:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bb4c:	490e      	ldr	r1, [pc, #56]	; (800bb88 <_scanf_float+0x404>)
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f000 f824 	bl	800bb9c <siprintf>
 800bb54:	e7d2      	b.n	800bafc <_scanf_float+0x378>
 800bb56:	9903      	ldr	r1, [sp, #12]
 800bb58:	f012 0f04 	tst.w	r2, #4
 800bb5c:	f103 0204 	add.w	r2, r3, #4
 800bb60:	600a      	str	r2, [r1, #0]
 800bb62:	d1d9      	bne.n	800bb18 <_scanf_float+0x394>
 800bb64:	eeb4 0b40 	vcmp.f64	d0, d0
 800bb68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb6c:	681e      	ldr	r6, [r3, #0]
 800bb6e:	d705      	bvc.n	800bb7c <_scanf_float+0x3f8>
 800bb70:	4806      	ldr	r0, [pc, #24]	; (800bb8c <_scanf_float+0x408>)
 800bb72:	f000 f80d 	bl	800bb90 <nanf>
 800bb76:	ed86 0a00 	vstr	s0, [r6]
 800bb7a:	e7d0      	b.n	800bb1e <_scanf_float+0x39a>
 800bb7c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bb80:	e7f9      	b.n	800bb76 <_scanf_float+0x3f2>
 800bb82:	2500      	movs	r5, #0
 800bb84:	e63f      	b.n	800b806 <_scanf_float+0x82>
 800bb86:	bf00      	nop
 800bb88:	0800f68c 	.word	0x0800f68c
 800bb8c:	0800fa98 	.word	0x0800fa98

0800bb90 <nanf>:
 800bb90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bb98 <nanf+0x8>
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	7fc00000 	.word	0x7fc00000

0800bb9c <siprintf>:
 800bb9c:	b40e      	push	{r1, r2, r3}
 800bb9e:	b500      	push	{lr}
 800bba0:	b09c      	sub	sp, #112	; 0x70
 800bba2:	ab1d      	add	r3, sp, #116	; 0x74
 800bba4:	9002      	str	r0, [sp, #8]
 800bba6:	9006      	str	r0, [sp, #24]
 800bba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bbac:	4809      	ldr	r0, [pc, #36]	; (800bbd4 <siprintf+0x38>)
 800bbae:	9107      	str	r1, [sp, #28]
 800bbb0:	9104      	str	r1, [sp, #16]
 800bbb2:	4909      	ldr	r1, [pc, #36]	; (800bbd8 <siprintf+0x3c>)
 800bbb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbb8:	9105      	str	r1, [sp, #20]
 800bbba:	6800      	ldr	r0, [r0, #0]
 800bbbc:	9301      	str	r3, [sp, #4]
 800bbbe:	a902      	add	r1, sp, #8
 800bbc0:	f002 fe0c 	bl	800e7dc <_svfiprintf_r>
 800bbc4:	9b02      	ldr	r3, [sp, #8]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	701a      	strb	r2, [r3, #0]
 800bbca:	b01c      	add	sp, #112	; 0x70
 800bbcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbd0:	b003      	add	sp, #12
 800bbd2:	4770      	bx	lr
 800bbd4:	24000010 	.word	0x24000010
 800bbd8:	ffff0208 	.word	0xffff0208

0800bbdc <sulp>:
 800bbdc:	b570      	push	{r4, r5, r6, lr}
 800bbde:	4604      	mov	r4, r0
 800bbe0:	460d      	mov	r5, r1
 800bbe2:	4616      	mov	r6, r2
 800bbe4:	ec45 4b10 	vmov	d0, r4, r5
 800bbe8:	f002 fb5a 	bl	800e2a0 <__ulp>
 800bbec:	b17e      	cbz	r6, 800bc0e <sulp+0x32>
 800bbee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bbf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	dd09      	ble.n	800bc0e <sulp+0x32>
 800bbfa:	051b      	lsls	r3, r3, #20
 800bbfc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800bc00:	2000      	movs	r0, #0
 800bc02:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800bc06:	ec41 0b17 	vmov	d7, r0, r1
 800bc0a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bc0e:	bd70      	pop	{r4, r5, r6, pc}

0800bc10 <_strtod_l>:
 800bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	ed2d 8b0e 	vpush	{d8-d14}
 800bc18:	b097      	sub	sp, #92	; 0x5c
 800bc1a:	461f      	mov	r7, r3
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	9312      	str	r3, [sp, #72]	; 0x48
 800bc20:	4ba1      	ldr	r3, [pc, #644]	; (800bea8 <_strtod_l+0x298>)
 800bc22:	920d      	str	r2, [sp, #52]	; 0x34
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	9307      	str	r3, [sp, #28]
 800bc28:	4604      	mov	r4, r0
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	468b      	mov	fp, r1
 800bc2e:	f7f4 fb57 	bl	80002e0 <strlen>
 800bc32:	f04f 0800 	mov.w	r8, #0
 800bc36:	4605      	mov	r5, r0
 800bc38:	f04f 0900 	mov.w	r9, #0
 800bc3c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800bc40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc42:	7813      	ldrb	r3, [r2, #0]
 800bc44:	2b2b      	cmp	r3, #43	; 0x2b
 800bc46:	d04d      	beq.n	800bce4 <_strtod_l+0xd4>
 800bc48:	d83a      	bhi.n	800bcc0 <_strtod_l+0xb0>
 800bc4a:	2b0d      	cmp	r3, #13
 800bc4c:	d833      	bhi.n	800bcb6 <_strtod_l+0xa6>
 800bc4e:	2b08      	cmp	r3, #8
 800bc50:	d833      	bhi.n	800bcba <_strtod_l+0xaa>
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d03d      	beq.n	800bcd2 <_strtod_l+0xc2>
 800bc56:	2300      	movs	r3, #0
 800bc58:	9308      	str	r3, [sp, #32]
 800bc5a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800bc5c:	7833      	ldrb	r3, [r6, #0]
 800bc5e:	2b30      	cmp	r3, #48	; 0x30
 800bc60:	f040 80b0 	bne.w	800bdc4 <_strtod_l+0x1b4>
 800bc64:	7873      	ldrb	r3, [r6, #1]
 800bc66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bc6a:	2b58      	cmp	r3, #88	; 0x58
 800bc6c:	d167      	bne.n	800bd3e <_strtod_l+0x12e>
 800bc6e:	9b08      	ldr	r3, [sp, #32]
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	ab12      	add	r3, sp, #72	; 0x48
 800bc74:	9702      	str	r7, [sp, #8]
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	4a8c      	ldr	r2, [pc, #560]	; (800beac <_strtod_l+0x29c>)
 800bc7a:	ab13      	add	r3, sp, #76	; 0x4c
 800bc7c:	a911      	add	r1, sp, #68	; 0x44
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f001 fc68 	bl	800d554 <__gethex>
 800bc84:	f010 0507 	ands.w	r5, r0, #7
 800bc88:	4607      	mov	r7, r0
 800bc8a:	d005      	beq.n	800bc98 <_strtod_l+0x88>
 800bc8c:	2d06      	cmp	r5, #6
 800bc8e:	d12b      	bne.n	800bce8 <_strtod_l+0xd8>
 800bc90:	3601      	adds	r6, #1
 800bc92:	2300      	movs	r3, #0
 800bc94:	9611      	str	r6, [sp, #68]	; 0x44
 800bc96:	9308      	str	r3, [sp, #32]
 800bc98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f040 854e 	bne.w	800c73c <_strtod_l+0xb2c>
 800bca0:	9b08      	ldr	r3, [sp, #32]
 800bca2:	b1e3      	cbz	r3, 800bcde <_strtod_l+0xce>
 800bca4:	ec49 8b17 	vmov	d7, r8, r9
 800bca8:	eeb1 0b47 	vneg.f64	d0, d7
 800bcac:	b017      	add	sp, #92	; 0x5c
 800bcae:	ecbd 8b0e 	vpop	{d8-d14}
 800bcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb6:	2b20      	cmp	r3, #32
 800bcb8:	d1cd      	bne.n	800bc56 <_strtod_l+0x46>
 800bcba:	3201      	adds	r2, #1
 800bcbc:	9211      	str	r2, [sp, #68]	; 0x44
 800bcbe:	e7bf      	b.n	800bc40 <_strtod_l+0x30>
 800bcc0:	2b2d      	cmp	r3, #45	; 0x2d
 800bcc2:	d1c8      	bne.n	800bc56 <_strtod_l+0x46>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	9308      	str	r3, [sp, #32]
 800bcc8:	1c53      	adds	r3, r2, #1
 800bcca:	9311      	str	r3, [sp, #68]	; 0x44
 800bccc:	7853      	ldrb	r3, [r2, #1]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1c3      	bne.n	800bc5a <_strtod_l+0x4a>
 800bcd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcd4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f040 852d 	bne.w	800c738 <_strtod_l+0xb28>
 800bcde:	ec49 8b10 	vmov	d0, r8, r9
 800bce2:	e7e3      	b.n	800bcac <_strtod_l+0x9c>
 800bce4:	2300      	movs	r3, #0
 800bce6:	e7ee      	b.n	800bcc6 <_strtod_l+0xb6>
 800bce8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bcea:	b13a      	cbz	r2, 800bcfc <_strtod_l+0xec>
 800bcec:	2135      	movs	r1, #53	; 0x35
 800bcee:	a814      	add	r0, sp, #80	; 0x50
 800bcf0:	f002 fbde 	bl	800e4b0 <__copybits>
 800bcf4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f001 ffa0 	bl	800dc3c <_Bfree>
 800bcfc:	3d01      	subs	r5, #1
 800bcfe:	2d04      	cmp	r5, #4
 800bd00:	d806      	bhi.n	800bd10 <_strtod_l+0x100>
 800bd02:	e8df f005 	tbb	[pc, r5]
 800bd06:	030a      	.short	0x030a
 800bd08:	1714      	.short	0x1714
 800bd0a:	0a          	.byte	0x0a
 800bd0b:	00          	.byte	0x00
 800bd0c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800bd10:	073f      	lsls	r7, r7, #28
 800bd12:	d5c1      	bpl.n	800bc98 <_strtod_l+0x88>
 800bd14:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800bd18:	e7be      	b.n	800bc98 <_strtod_l+0x88>
 800bd1a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800bd1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd20:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bd24:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bd28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bd2c:	e7f0      	b.n	800bd10 <_strtod_l+0x100>
 800bd2e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800beb0 <_strtod_l+0x2a0>
 800bd32:	e7ed      	b.n	800bd10 <_strtod_l+0x100>
 800bd34:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bd38:	f04f 38ff 	mov.w	r8, #4294967295
 800bd3c:	e7e8      	b.n	800bd10 <_strtod_l+0x100>
 800bd3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd40:	1c5a      	adds	r2, r3, #1
 800bd42:	9211      	str	r2, [sp, #68]	; 0x44
 800bd44:	785b      	ldrb	r3, [r3, #1]
 800bd46:	2b30      	cmp	r3, #48	; 0x30
 800bd48:	d0f9      	beq.n	800bd3e <_strtod_l+0x12e>
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d0a4      	beq.n	800bc98 <_strtod_l+0x88>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	f04f 0a00 	mov.w	sl, #0
 800bd54:	9304      	str	r3, [sp, #16]
 800bd56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd58:	930a      	str	r3, [sp, #40]	; 0x28
 800bd5a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bd5e:	f8cd a018 	str.w	sl, [sp, #24]
 800bd62:	220a      	movs	r2, #10
 800bd64:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bd66:	7807      	ldrb	r7, [r0, #0]
 800bd68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800bd6c:	b2d9      	uxtb	r1, r3
 800bd6e:	2909      	cmp	r1, #9
 800bd70:	d92a      	bls.n	800bdc8 <_strtod_l+0x1b8>
 800bd72:	9907      	ldr	r1, [sp, #28]
 800bd74:	462a      	mov	r2, r5
 800bd76:	f002 fe4b 	bl	800ea10 <strncmp>
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d033      	beq.n	800bde6 <_strtod_l+0x1d6>
 800bd7e:	2000      	movs	r0, #0
 800bd80:	9b06      	ldr	r3, [sp, #24]
 800bd82:	463a      	mov	r2, r7
 800bd84:	4601      	mov	r1, r0
 800bd86:	4607      	mov	r7, r0
 800bd88:	2a65      	cmp	r2, #101	; 0x65
 800bd8a:	d001      	beq.n	800bd90 <_strtod_l+0x180>
 800bd8c:	2a45      	cmp	r2, #69	; 0x45
 800bd8e:	d117      	bne.n	800bdc0 <_strtod_l+0x1b0>
 800bd90:	b91b      	cbnz	r3, 800bd9a <_strtod_l+0x18a>
 800bd92:	9b04      	ldr	r3, [sp, #16]
 800bd94:	4303      	orrs	r3, r0
 800bd96:	d09c      	beq.n	800bcd2 <_strtod_l+0xc2>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800bd9e:	f10b 0201 	add.w	r2, fp, #1
 800bda2:	9211      	str	r2, [sp, #68]	; 0x44
 800bda4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800bda8:	2a2b      	cmp	r2, #43	; 0x2b
 800bdaa:	d071      	beq.n	800be90 <_strtod_l+0x280>
 800bdac:	2a2d      	cmp	r2, #45	; 0x2d
 800bdae:	d077      	beq.n	800bea0 <_strtod_l+0x290>
 800bdb0:	f04f 0e00 	mov.w	lr, #0
 800bdb4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800bdb8:	2d09      	cmp	r5, #9
 800bdba:	d97f      	bls.n	800bebc <_strtod_l+0x2ac>
 800bdbc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800bdc0:	2500      	movs	r5, #0
 800bdc2:	e09b      	b.n	800befc <_strtod_l+0x2ec>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	e7c3      	b.n	800bd50 <_strtod_l+0x140>
 800bdc8:	9906      	ldr	r1, [sp, #24]
 800bdca:	2908      	cmp	r1, #8
 800bdcc:	bfdd      	ittte	le
 800bdce:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bdd0:	fb02 3301 	mlale	r3, r2, r1, r3
 800bdd4:	9309      	strle	r3, [sp, #36]	; 0x24
 800bdd6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bdda:	9b06      	ldr	r3, [sp, #24]
 800bddc:	3001      	adds	r0, #1
 800bdde:	3301      	adds	r3, #1
 800bde0:	9306      	str	r3, [sp, #24]
 800bde2:	9011      	str	r0, [sp, #68]	; 0x44
 800bde4:	e7be      	b.n	800bd64 <_strtod_l+0x154>
 800bde6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bde8:	195a      	adds	r2, r3, r5
 800bdea:	9211      	str	r2, [sp, #68]	; 0x44
 800bdec:	5d5a      	ldrb	r2, [r3, r5]
 800bdee:	9b06      	ldr	r3, [sp, #24]
 800bdf0:	b3a3      	cbz	r3, 800be5c <_strtod_l+0x24c>
 800bdf2:	4607      	mov	r7, r0
 800bdf4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bdf8:	2909      	cmp	r1, #9
 800bdfa:	d912      	bls.n	800be22 <_strtod_l+0x212>
 800bdfc:	2101      	movs	r1, #1
 800bdfe:	e7c3      	b.n	800bd88 <_strtod_l+0x178>
 800be00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be02:	1c5a      	adds	r2, r3, #1
 800be04:	9211      	str	r2, [sp, #68]	; 0x44
 800be06:	785a      	ldrb	r2, [r3, #1]
 800be08:	3001      	adds	r0, #1
 800be0a:	2a30      	cmp	r2, #48	; 0x30
 800be0c:	d0f8      	beq.n	800be00 <_strtod_l+0x1f0>
 800be0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800be12:	2b08      	cmp	r3, #8
 800be14:	f200 8497 	bhi.w	800c746 <_strtod_l+0xb36>
 800be18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be1a:	930a      	str	r3, [sp, #40]	; 0x28
 800be1c:	4607      	mov	r7, r0
 800be1e:	2000      	movs	r0, #0
 800be20:	4603      	mov	r3, r0
 800be22:	3a30      	subs	r2, #48	; 0x30
 800be24:	f100 0101 	add.w	r1, r0, #1
 800be28:	d012      	beq.n	800be50 <_strtod_l+0x240>
 800be2a:	440f      	add	r7, r1
 800be2c:	eb00 0c03 	add.w	ip, r0, r3
 800be30:	4619      	mov	r1, r3
 800be32:	250a      	movs	r5, #10
 800be34:	4561      	cmp	r1, ip
 800be36:	d113      	bne.n	800be60 <_strtod_l+0x250>
 800be38:	1819      	adds	r1, r3, r0
 800be3a:	2908      	cmp	r1, #8
 800be3c:	f103 0301 	add.w	r3, r3, #1
 800be40:	4403      	add	r3, r0
 800be42:	dc1c      	bgt.n	800be7e <_strtod_l+0x26e>
 800be44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be46:	210a      	movs	r1, #10
 800be48:	fb01 2200 	mla	r2, r1, r0, r2
 800be4c:	9209      	str	r2, [sp, #36]	; 0x24
 800be4e:	2100      	movs	r1, #0
 800be50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800be52:	1c50      	adds	r0, r2, #1
 800be54:	9011      	str	r0, [sp, #68]	; 0x44
 800be56:	7852      	ldrb	r2, [r2, #1]
 800be58:	4608      	mov	r0, r1
 800be5a:	e7cb      	b.n	800bdf4 <_strtod_l+0x1e4>
 800be5c:	9806      	ldr	r0, [sp, #24]
 800be5e:	e7d4      	b.n	800be0a <_strtod_l+0x1fa>
 800be60:	2908      	cmp	r1, #8
 800be62:	dc04      	bgt.n	800be6e <_strtod_l+0x25e>
 800be64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800be66:	436e      	muls	r6, r5
 800be68:	9609      	str	r6, [sp, #36]	; 0x24
 800be6a:	3101      	adds	r1, #1
 800be6c:	e7e2      	b.n	800be34 <_strtod_l+0x224>
 800be6e:	f101 0e01 	add.w	lr, r1, #1
 800be72:	f1be 0f10 	cmp.w	lr, #16
 800be76:	bfd8      	it	le
 800be78:	fb05 fa0a 	mulle.w	sl, r5, sl
 800be7c:	e7f5      	b.n	800be6a <_strtod_l+0x25a>
 800be7e:	2b10      	cmp	r3, #16
 800be80:	bfdc      	itt	le
 800be82:	210a      	movle	r1, #10
 800be84:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800be88:	e7e1      	b.n	800be4e <_strtod_l+0x23e>
 800be8a:	2700      	movs	r7, #0
 800be8c:	2101      	movs	r1, #1
 800be8e:	e780      	b.n	800bd92 <_strtod_l+0x182>
 800be90:	f04f 0e00 	mov.w	lr, #0
 800be94:	f10b 0202 	add.w	r2, fp, #2
 800be98:	9211      	str	r2, [sp, #68]	; 0x44
 800be9a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800be9e:	e789      	b.n	800bdb4 <_strtod_l+0x1a4>
 800bea0:	f04f 0e01 	mov.w	lr, #1
 800bea4:	e7f6      	b.n	800be94 <_strtod_l+0x284>
 800bea6:	bf00      	nop
 800bea8:	0800f8e0 	.word	0x0800f8e0
 800beac:	0800f694 	.word	0x0800f694
 800beb0:	7ff00000 	.word	0x7ff00000
 800beb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800beb6:	1c55      	adds	r5, r2, #1
 800beb8:	9511      	str	r5, [sp, #68]	; 0x44
 800beba:	7852      	ldrb	r2, [r2, #1]
 800bebc:	2a30      	cmp	r2, #48	; 0x30
 800bebe:	d0f9      	beq.n	800beb4 <_strtod_l+0x2a4>
 800bec0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800bec4:	2d08      	cmp	r5, #8
 800bec6:	f63f af7b 	bhi.w	800bdc0 <_strtod_l+0x1b0>
 800beca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800bece:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bed0:	9207      	str	r2, [sp, #28]
 800bed2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bed4:	1c55      	adds	r5, r2, #1
 800bed6:	9511      	str	r5, [sp, #68]	; 0x44
 800bed8:	7852      	ldrb	r2, [r2, #1]
 800beda:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bede:	2e09      	cmp	r6, #9
 800bee0:	d937      	bls.n	800bf52 <_strtod_l+0x342>
 800bee2:	9e07      	ldr	r6, [sp, #28]
 800bee4:	1bad      	subs	r5, r5, r6
 800bee6:	2d08      	cmp	r5, #8
 800bee8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800beec:	dc02      	bgt.n	800bef4 <_strtod_l+0x2e4>
 800beee:	4565      	cmp	r5, ip
 800bef0:	bfa8      	it	ge
 800bef2:	4665      	movge	r5, ip
 800bef4:	f1be 0f00 	cmp.w	lr, #0
 800bef8:	d000      	beq.n	800befc <_strtod_l+0x2ec>
 800befa:	426d      	negs	r5, r5
 800befc:	2b00      	cmp	r3, #0
 800befe:	d14d      	bne.n	800bf9c <_strtod_l+0x38c>
 800bf00:	9b04      	ldr	r3, [sp, #16]
 800bf02:	4303      	orrs	r3, r0
 800bf04:	f47f aec8 	bne.w	800bc98 <_strtod_l+0x88>
 800bf08:	2900      	cmp	r1, #0
 800bf0a:	f47f aee2 	bne.w	800bcd2 <_strtod_l+0xc2>
 800bf0e:	2a69      	cmp	r2, #105	; 0x69
 800bf10:	d027      	beq.n	800bf62 <_strtod_l+0x352>
 800bf12:	dc24      	bgt.n	800bf5e <_strtod_l+0x34e>
 800bf14:	2a49      	cmp	r2, #73	; 0x49
 800bf16:	d024      	beq.n	800bf62 <_strtod_l+0x352>
 800bf18:	2a4e      	cmp	r2, #78	; 0x4e
 800bf1a:	f47f aeda 	bne.w	800bcd2 <_strtod_l+0xc2>
 800bf1e:	4996      	ldr	r1, [pc, #600]	; (800c178 <_strtod_l+0x568>)
 800bf20:	a811      	add	r0, sp, #68	; 0x44
 800bf22:	f001 fd6f 	bl	800da04 <__match>
 800bf26:	2800      	cmp	r0, #0
 800bf28:	f43f aed3 	beq.w	800bcd2 <_strtod_l+0xc2>
 800bf2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	2b28      	cmp	r3, #40	; 0x28
 800bf32:	d12d      	bne.n	800bf90 <_strtod_l+0x380>
 800bf34:	4991      	ldr	r1, [pc, #580]	; (800c17c <_strtod_l+0x56c>)
 800bf36:	aa14      	add	r2, sp, #80	; 0x50
 800bf38:	a811      	add	r0, sp, #68	; 0x44
 800bf3a:	f001 fd77 	bl	800da2c <__hexnan>
 800bf3e:	2805      	cmp	r0, #5
 800bf40:	d126      	bne.n	800bf90 <_strtod_l+0x380>
 800bf42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf44:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800bf48:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bf4c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bf50:	e6a2      	b.n	800bc98 <_strtod_l+0x88>
 800bf52:	250a      	movs	r5, #10
 800bf54:	fb05 250c 	mla	r5, r5, ip, r2
 800bf58:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800bf5c:	e7b9      	b.n	800bed2 <_strtod_l+0x2c2>
 800bf5e:	2a6e      	cmp	r2, #110	; 0x6e
 800bf60:	e7db      	b.n	800bf1a <_strtod_l+0x30a>
 800bf62:	4987      	ldr	r1, [pc, #540]	; (800c180 <_strtod_l+0x570>)
 800bf64:	a811      	add	r0, sp, #68	; 0x44
 800bf66:	f001 fd4d 	bl	800da04 <__match>
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	f43f aeb1 	beq.w	800bcd2 <_strtod_l+0xc2>
 800bf70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf72:	4984      	ldr	r1, [pc, #528]	; (800c184 <_strtod_l+0x574>)
 800bf74:	3b01      	subs	r3, #1
 800bf76:	a811      	add	r0, sp, #68	; 0x44
 800bf78:	9311      	str	r3, [sp, #68]	; 0x44
 800bf7a:	f001 fd43 	bl	800da04 <__match>
 800bf7e:	b910      	cbnz	r0, 800bf86 <_strtod_l+0x376>
 800bf80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf82:	3301      	adds	r3, #1
 800bf84:	9311      	str	r3, [sp, #68]	; 0x44
 800bf86:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800c198 <_strtod_l+0x588>
 800bf8a:	f04f 0800 	mov.w	r8, #0
 800bf8e:	e683      	b.n	800bc98 <_strtod_l+0x88>
 800bf90:	487d      	ldr	r0, [pc, #500]	; (800c188 <_strtod_l+0x578>)
 800bf92:	f002 fd25 	bl	800e9e0 <nan>
 800bf96:	ec59 8b10 	vmov	r8, r9, d0
 800bf9a:	e67d      	b.n	800bc98 <_strtod_l+0x88>
 800bf9c:	1bea      	subs	r2, r5, r7
 800bf9e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800bfa2:	9207      	str	r2, [sp, #28]
 800bfa4:	9a06      	ldr	r2, [sp, #24]
 800bfa6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bfaa:	2a00      	cmp	r2, #0
 800bfac:	bf08      	it	eq
 800bfae:	461a      	moveq	r2, r3
 800bfb0:	2b10      	cmp	r3, #16
 800bfb2:	9206      	str	r2, [sp, #24]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	bfa8      	it	ge
 800bfb8:	2210      	movge	r2, #16
 800bfba:	2b09      	cmp	r3, #9
 800bfbc:	ec59 8b17 	vmov	r8, r9, d7
 800bfc0:	dd0c      	ble.n	800bfdc <_strtod_l+0x3cc>
 800bfc2:	4972      	ldr	r1, [pc, #456]	; (800c18c <_strtod_l+0x57c>)
 800bfc4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bfc8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800bfcc:	ee06 aa90 	vmov	s13, sl
 800bfd0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800bfd4:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bfd8:	ec59 8b16 	vmov	r8, r9, d6
 800bfdc:	2b0f      	cmp	r3, #15
 800bfde:	dc36      	bgt.n	800c04e <_strtod_l+0x43e>
 800bfe0:	9907      	ldr	r1, [sp, #28]
 800bfe2:	2900      	cmp	r1, #0
 800bfe4:	f43f ae58 	beq.w	800bc98 <_strtod_l+0x88>
 800bfe8:	dd23      	ble.n	800c032 <_strtod_l+0x422>
 800bfea:	2916      	cmp	r1, #22
 800bfec:	dc0b      	bgt.n	800c006 <_strtod_l+0x3f6>
 800bfee:	4b67      	ldr	r3, [pc, #412]	; (800c18c <_strtod_l+0x57c>)
 800bff0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800bff4:	ed93 7b00 	vldr	d7, [r3]
 800bff8:	ec49 8b16 	vmov	d6, r8, r9
 800bffc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c000:	ec59 8b17 	vmov	r8, r9, d7
 800c004:	e648      	b.n	800bc98 <_strtod_l+0x88>
 800c006:	9807      	ldr	r0, [sp, #28]
 800c008:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c00c:	4281      	cmp	r1, r0
 800c00e:	db1e      	blt.n	800c04e <_strtod_l+0x43e>
 800c010:	4a5e      	ldr	r2, [pc, #376]	; (800c18c <_strtod_l+0x57c>)
 800c012:	f1c3 030f 	rsb	r3, r3, #15
 800c016:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c01a:	ed91 7b00 	vldr	d7, [r1]
 800c01e:	ec49 8b16 	vmov	d6, r8, r9
 800c022:	1ac3      	subs	r3, r0, r3
 800c024:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c028:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c02c:	ed92 6b00 	vldr	d6, [r2]
 800c030:	e7e4      	b.n	800bffc <_strtod_l+0x3ec>
 800c032:	9907      	ldr	r1, [sp, #28]
 800c034:	3116      	adds	r1, #22
 800c036:	db0a      	blt.n	800c04e <_strtod_l+0x43e>
 800c038:	4b54      	ldr	r3, [pc, #336]	; (800c18c <_strtod_l+0x57c>)
 800c03a:	1b7d      	subs	r5, r7, r5
 800c03c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c040:	ed95 7b00 	vldr	d7, [r5]
 800c044:	ec49 8b16 	vmov	d6, r8, r9
 800c048:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c04c:	e7d8      	b.n	800c000 <_strtod_l+0x3f0>
 800c04e:	9907      	ldr	r1, [sp, #28]
 800c050:	1a9a      	subs	r2, r3, r2
 800c052:	440a      	add	r2, r1
 800c054:	2a00      	cmp	r2, #0
 800c056:	dd6f      	ble.n	800c138 <_strtod_l+0x528>
 800c058:	f012 000f 	ands.w	r0, r2, #15
 800c05c:	d00a      	beq.n	800c074 <_strtod_l+0x464>
 800c05e:	494b      	ldr	r1, [pc, #300]	; (800c18c <_strtod_l+0x57c>)
 800c060:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c064:	ed91 7b00 	vldr	d7, [r1]
 800c068:	ec49 8b16 	vmov	d6, r8, r9
 800c06c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c070:	ec59 8b17 	vmov	r8, r9, d7
 800c074:	f032 020f 	bics.w	r2, r2, #15
 800c078:	d04f      	beq.n	800c11a <_strtod_l+0x50a>
 800c07a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c07e:	dd22      	ble.n	800c0c6 <_strtod_l+0x4b6>
 800c080:	2500      	movs	r5, #0
 800c082:	462e      	mov	r6, r5
 800c084:	9506      	str	r5, [sp, #24]
 800c086:	462f      	mov	r7, r5
 800c088:	2322      	movs	r3, #34	; 0x22
 800c08a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800c198 <_strtod_l+0x588>
 800c08e:	6023      	str	r3, [r4, #0]
 800c090:	f04f 0800 	mov.w	r8, #0
 800c094:	9b06      	ldr	r3, [sp, #24]
 800c096:	2b00      	cmp	r3, #0
 800c098:	f43f adfe 	beq.w	800bc98 <_strtod_l+0x88>
 800c09c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f001 fdcc 	bl	800dc3c <_Bfree>
 800c0a4:	4639      	mov	r1, r7
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	f001 fdc8 	bl	800dc3c <_Bfree>
 800c0ac:	4631      	mov	r1, r6
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f001 fdc4 	bl	800dc3c <_Bfree>
 800c0b4:	9906      	ldr	r1, [sp, #24]
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f001 fdc0 	bl	800dc3c <_Bfree>
 800c0bc:	4629      	mov	r1, r5
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f001 fdbc 	bl	800dc3c <_Bfree>
 800c0c4:	e5e8      	b.n	800bc98 <_strtod_l+0x88>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	ec49 8b17 	vmov	d7, r8, r9
 800c0cc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800c190 <_strtod_l+0x580>
 800c0d0:	1112      	asrs	r2, r2, #4
 800c0d2:	4601      	mov	r1, r0
 800c0d4:	2a01      	cmp	r2, #1
 800c0d6:	dc23      	bgt.n	800c120 <_strtod_l+0x510>
 800c0d8:	b108      	cbz	r0, 800c0de <_strtod_l+0x4ce>
 800c0da:	ec59 8b17 	vmov	r8, r9, d7
 800c0de:	4a2c      	ldr	r2, [pc, #176]	; (800c190 <_strtod_l+0x580>)
 800c0e0:	482c      	ldr	r0, [pc, #176]	; (800c194 <_strtod_l+0x584>)
 800c0e2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c0e6:	ed92 7b00 	vldr	d7, [r2]
 800c0ea:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c0ee:	ec49 8b16 	vmov	d6, r8, r9
 800c0f2:	4a29      	ldr	r2, [pc, #164]	; (800c198 <_strtod_l+0x588>)
 800c0f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c0f8:	ee17 1a90 	vmov	r1, s15
 800c0fc:	400a      	ands	r2, r1
 800c0fe:	4282      	cmp	r2, r0
 800c100:	ec59 8b17 	vmov	r8, r9, d7
 800c104:	d8bc      	bhi.n	800c080 <_strtod_l+0x470>
 800c106:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c10a:	4282      	cmp	r2, r0
 800c10c:	bf86      	itte	hi
 800c10e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800c19c <_strtod_l+0x58c>
 800c112:	f04f 38ff 	movhi.w	r8, #4294967295
 800c116:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800c11a:	2200      	movs	r2, #0
 800c11c:	9204      	str	r2, [sp, #16]
 800c11e:	e078      	b.n	800c212 <_strtod_l+0x602>
 800c120:	07d6      	lsls	r6, r2, #31
 800c122:	d504      	bpl.n	800c12e <_strtod_l+0x51e>
 800c124:	ed9c 6b00 	vldr	d6, [ip]
 800c128:	2001      	movs	r0, #1
 800c12a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c12e:	3101      	adds	r1, #1
 800c130:	1052      	asrs	r2, r2, #1
 800c132:	f10c 0c08 	add.w	ip, ip, #8
 800c136:	e7cd      	b.n	800c0d4 <_strtod_l+0x4c4>
 800c138:	d0ef      	beq.n	800c11a <_strtod_l+0x50a>
 800c13a:	4252      	negs	r2, r2
 800c13c:	f012 000f 	ands.w	r0, r2, #15
 800c140:	d00a      	beq.n	800c158 <_strtod_l+0x548>
 800c142:	4912      	ldr	r1, [pc, #72]	; (800c18c <_strtod_l+0x57c>)
 800c144:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c148:	ed91 7b00 	vldr	d7, [r1]
 800c14c:	ec49 8b16 	vmov	d6, r8, r9
 800c150:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c154:	ec59 8b17 	vmov	r8, r9, d7
 800c158:	1112      	asrs	r2, r2, #4
 800c15a:	d0de      	beq.n	800c11a <_strtod_l+0x50a>
 800c15c:	2a1f      	cmp	r2, #31
 800c15e:	dd1f      	ble.n	800c1a0 <_strtod_l+0x590>
 800c160:	2500      	movs	r5, #0
 800c162:	462e      	mov	r6, r5
 800c164:	9506      	str	r5, [sp, #24]
 800c166:	462f      	mov	r7, r5
 800c168:	2322      	movs	r3, #34	; 0x22
 800c16a:	f04f 0800 	mov.w	r8, #0
 800c16e:	f04f 0900 	mov.w	r9, #0
 800c172:	6023      	str	r3, [r4, #0]
 800c174:	e78e      	b.n	800c094 <_strtod_l+0x484>
 800c176:	bf00      	nop
 800c178:	0800f665 	.word	0x0800f665
 800c17c:	0800f6a8 	.word	0x0800f6a8
 800c180:	0800f65d 	.word	0x0800f65d
 800c184:	0800f7ec 	.word	0x0800f7ec
 800c188:	0800fa98 	.word	0x0800fa98
 800c18c:	0800f978 	.word	0x0800f978
 800c190:	0800f950 	.word	0x0800f950
 800c194:	7ca00000 	.word	0x7ca00000
 800c198:	7ff00000 	.word	0x7ff00000
 800c19c:	7fefffff 	.word	0x7fefffff
 800c1a0:	f012 0110 	ands.w	r1, r2, #16
 800c1a4:	bf18      	it	ne
 800c1a6:	216a      	movne	r1, #106	; 0x6a
 800c1a8:	9104      	str	r1, [sp, #16]
 800c1aa:	ec49 8b17 	vmov	d7, r8, r9
 800c1ae:	49be      	ldr	r1, [pc, #760]	; (800c4a8 <_strtod_l+0x898>)
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	07d6      	lsls	r6, r2, #31
 800c1b4:	d504      	bpl.n	800c1c0 <_strtod_l+0x5b0>
 800c1b6:	ed91 6b00 	vldr	d6, [r1]
 800c1ba:	2001      	movs	r0, #1
 800c1bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c1c0:	1052      	asrs	r2, r2, #1
 800c1c2:	f101 0108 	add.w	r1, r1, #8
 800c1c6:	d1f4      	bne.n	800c1b2 <_strtod_l+0x5a2>
 800c1c8:	b108      	cbz	r0, 800c1ce <_strtod_l+0x5be>
 800c1ca:	ec59 8b17 	vmov	r8, r9, d7
 800c1ce:	9a04      	ldr	r2, [sp, #16]
 800c1d0:	b1c2      	cbz	r2, 800c204 <_strtod_l+0x5f4>
 800c1d2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800c1d6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800c1da:	2a00      	cmp	r2, #0
 800c1dc:	4648      	mov	r0, r9
 800c1de:	dd11      	ble.n	800c204 <_strtod_l+0x5f4>
 800c1e0:	2a1f      	cmp	r2, #31
 800c1e2:	f340 812e 	ble.w	800c442 <_strtod_l+0x832>
 800c1e6:	2a34      	cmp	r2, #52	; 0x34
 800c1e8:	bfde      	ittt	le
 800c1ea:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800c1ee:	f04f 32ff 	movle.w	r2, #4294967295
 800c1f2:	fa02 f101 	lslle.w	r1, r2, r1
 800c1f6:	f04f 0800 	mov.w	r8, #0
 800c1fa:	bfcc      	ite	gt
 800c1fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c200:	ea01 0900 	andle.w	r9, r1, r0
 800c204:	ec49 8b17 	vmov	d7, r8, r9
 800c208:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c210:	d0a6      	beq.n	800c160 <_strtod_l+0x550>
 800c212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c214:	9200      	str	r2, [sp, #0]
 800c216:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c218:	9a06      	ldr	r2, [sp, #24]
 800c21a:	4620      	mov	r0, r4
 800c21c:	f001 fd76 	bl	800dd0c <__s2b>
 800c220:	9006      	str	r0, [sp, #24]
 800c222:	2800      	cmp	r0, #0
 800c224:	f43f af2c 	beq.w	800c080 <_strtod_l+0x470>
 800c228:	9b07      	ldr	r3, [sp, #28]
 800c22a:	1b7d      	subs	r5, r7, r5
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	bfb4      	ite	lt
 800c230:	462b      	movlt	r3, r5
 800c232:	2300      	movge	r3, #0
 800c234:	9309      	str	r3, [sp, #36]	; 0x24
 800c236:	9b07      	ldr	r3, [sp, #28]
 800c238:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800c488 <_strtod_l+0x878>
 800c23c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800c490 <_strtod_l+0x880>
 800c240:	ed9f bb95 	vldr	d11, [pc, #596]	; 800c498 <_strtod_l+0x888>
 800c244:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c248:	2500      	movs	r5, #0
 800c24a:	930c      	str	r3, [sp, #48]	; 0x30
 800c24c:	462e      	mov	r6, r5
 800c24e:	9b06      	ldr	r3, [sp, #24]
 800c250:	4620      	mov	r0, r4
 800c252:	6859      	ldr	r1, [r3, #4]
 800c254:	f001 fcb2 	bl	800dbbc <_Balloc>
 800c258:	4607      	mov	r7, r0
 800c25a:	2800      	cmp	r0, #0
 800c25c:	f43f af14 	beq.w	800c088 <_strtod_l+0x478>
 800c260:	9b06      	ldr	r3, [sp, #24]
 800c262:	691a      	ldr	r2, [r3, #16]
 800c264:	3202      	adds	r2, #2
 800c266:	f103 010c 	add.w	r1, r3, #12
 800c26a:	0092      	lsls	r2, r2, #2
 800c26c:	300c      	adds	r0, #12
 800c26e:	f001 fc97 	bl	800dba0 <memcpy>
 800c272:	ec49 8b10 	vmov	d0, r8, r9
 800c276:	aa14      	add	r2, sp, #80	; 0x50
 800c278:	a913      	add	r1, sp, #76	; 0x4c
 800c27a:	4620      	mov	r0, r4
 800c27c:	f002 f88c 	bl	800e398 <__d2b>
 800c280:	ec49 8b18 	vmov	d8, r8, r9
 800c284:	9012      	str	r0, [sp, #72]	; 0x48
 800c286:	2800      	cmp	r0, #0
 800c288:	f43f aefe 	beq.w	800c088 <_strtod_l+0x478>
 800c28c:	2101      	movs	r1, #1
 800c28e:	4620      	mov	r0, r4
 800c290:	f001 fdd6 	bl	800de40 <__i2b>
 800c294:	4606      	mov	r6, r0
 800c296:	2800      	cmp	r0, #0
 800c298:	f43f aef6 	beq.w	800c088 <_strtod_l+0x478>
 800c29c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c29e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	bfab      	itete	ge
 800c2a4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800c2a6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800c2a8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800c2ac:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800c2b0:	bfac      	ite	ge
 800c2b2:	eb03 0b02 	addge.w	fp, r3, r2
 800c2b6:	eba2 0a03 	sublt.w	sl, r2, r3
 800c2ba:	9a04      	ldr	r2, [sp, #16]
 800c2bc:	1a9b      	subs	r3, r3, r2
 800c2be:	440b      	add	r3, r1
 800c2c0:	4a7a      	ldr	r2, [pc, #488]	; (800c4ac <_strtod_l+0x89c>)
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800c2ca:	f280 80cd 	bge.w	800c468 <_strtod_l+0x858>
 800c2ce:	1ad2      	subs	r2, r2, r3
 800c2d0:	2a1f      	cmp	r2, #31
 800c2d2:	eba1 0102 	sub.w	r1, r1, r2
 800c2d6:	f04f 0001 	mov.w	r0, #1
 800c2da:	f300 80b9 	bgt.w	800c450 <_strtod_l+0x840>
 800c2de:	fa00 f302 	lsl.w	r3, r0, r2
 800c2e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c2e8:	eb0b 0301 	add.w	r3, fp, r1
 800c2ec:	9a04      	ldr	r2, [sp, #16]
 800c2ee:	459b      	cmp	fp, r3
 800c2f0:	448a      	add	sl, r1
 800c2f2:	4492      	add	sl, r2
 800c2f4:	465a      	mov	r2, fp
 800c2f6:	bfa8      	it	ge
 800c2f8:	461a      	movge	r2, r3
 800c2fa:	4552      	cmp	r2, sl
 800c2fc:	bfa8      	it	ge
 800c2fe:	4652      	movge	r2, sl
 800c300:	2a00      	cmp	r2, #0
 800c302:	bfc2      	ittt	gt
 800c304:	1a9b      	subgt	r3, r3, r2
 800c306:	ebaa 0a02 	subgt.w	sl, sl, r2
 800c30a:	ebab 0b02 	subgt.w	fp, fp, r2
 800c30e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c310:	2a00      	cmp	r2, #0
 800c312:	dd18      	ble.n	800c346 <_strtod_l+0x736>
 800c314:	4631      	mov	r1, r6
 800c316:	4620      	mov	r0, r4
 800c318:	930f      	str	r3, [sp, #60]	; 0x3c
 800c31a:	f001 fe51 	bl	800dfc0 <__pow5mult>
 800c31e:	4606      	mov	r6, r0
 800c320:	2800      	cmp	r0, #0
 800c322:	f43f aeb1 	beq.w	800c088 <_strtod_l+0x478>
 800c326:	4601      	mov	r1, r0
 800c328:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c32a:	4620      	mov	r0, r4
 800c32c:	f001 fd9e 	bl	800de6c <__multiply>
 800c330:	900e      	str	r0, [sp, #56]	; 0x38
 800c332:	2800      	cmp	r0, #0
 800c334:	f43f aea8 	beq.w	800c088 <_strtod_l+0x478>
 800c338:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c33a:	4620      	mov	r0, r4
 800c33c:	f001 fc7e 	bl	800dc3c <_Bfree>
 800c340:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c344:	9212      	str	r2, [sp, #72]	; 0x48
 800c346:	2b00      	cmp	r3, #0
 800c348:	f300 8093 	bgt.w	800c472 <_strtod_l+0x862>
 800c34c:	9b07      	ldr	r3, [sp, #28]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	dd08      	ble.n	800c364 <_strtod_l+0x754>
 800c352:	4639      	mov	r1, r7
 800c354:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c356:	4620      	mov	r0, r4
 800c358:	f001 fe32 	bl	800dfc0 <__pow5mult>
 800c35c:	4607      	mov	r7, r0
 800c35e:	2800      	cmp	r0, #0
 800c360:	f43f ae92 	beq.w	800c088 <_strtod_l+0x478>
 800c364:	f1ba 0f00 	cmp.w	sl, #0
 800c368:	dd08      	ble.n	800c37c <_strtod_l+0x76c>
 800c36a:	4639      	mov	r1, r7
 800c36c:	4652      	mov	r2, sl
 800c36e:	4620      	mov	r0, r4
 800c370:	f001 fe80 	bl	800e074 <__lshift>
 800c374:	4607      	mov	r7, r0
 800c376:	2800      	cmp	r0, #0
 800c378:	f43f ae86 	beq.w	800c088 <_strtod_l+0x478>
 800c37c:	f1bb 0f00 	cmp.w	fp, #0
 800c380:	dd08      	ble.n	800c394 <_strtod_l+0x784>
 800c382:	4631      	mov	r1, r6
 800c384:	465a      	mov	r2, fp
 800c386:	4620      	mov	r0, r4
 800c388:	f001 fe74 	bl	800e074 <__lshift>
 800c38c:	4606      	mov	r6, r0
 800c38e:	2800      	cmp	r0, #0
 800c390:	f43f ae7a 	beq.w	800c088 <_strtod_l+0x478>
 800c394:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c396:	463a      	mov	r2, r7
 800c398:	4620      	mov	r0, r4
 800c39a:	f001 fef7 	bl	800e18c <__mdiff>
 800c39e:	4605      	mov	r5, r0
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	f43f ae71 	beq.w	800c088 <_strtod_l+0x478>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800c3ac:	60c3      	str	r3, [r0, #12]
 800c3ae:	4631      	mov	r1, r6
 800c3b0:	f001 fed0 	bl	800e154 <__mcmp>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	da7d      	bge.n	800c4b4 <_strtod_l+0x8a4>
 800c3b8:	ea5a 0308 	orrs.w	r3, sl, r8
 800c3bc:	f040 80a3 	bne.w	800c506 <_strtod_l+0x8f6>
 800c3c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f040 809e 	bne.w	800c506 <_strtod_l+0x8f6>
 800c3ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3ce:	0d1b      	lsrs	r3, r3, #20
 800c3d0:	051b      	lsls	r3, r3, #20
 800c3d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c3d6:	f240 8096 	bls.w	800c506 <_strtod_l+0x8f6>
 800c3da:	696b      	ldr	r3, [r5, #20]
 800c3dc:	b91b      	cbnz	r3, 800c3e6 <_strtod_l+0x7d6>
 800c3de:	692b      	ldr	r3, [r5, #16]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	f340 8090 	ble.w	800c506 <_strtod_l+0x8f6>
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f001 fe42 	bl	800e074 <__lshift>
 800c3f0:	4631      	mov	r1, r6
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	f001 feae 	bl	800e154 <__mcmp>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	f340 8084 	ble.w	800c506 <_strtod_l+0x8f6>
 800c3fe:	9904      	ldr	r1, [sp, #16]
 800c400:	4a2b      	ldr	r2, [pc, #172]	; (800c4b0 <_strtod_l+0x8a0>)
 800c402:	464b      	mov	r3, r9
 800c404:	2900      	cmp	r1, #0
 800c406:	f000 809d 	beq.w	800c544 <_strtod_l+0x934>
 800c40a:	ea02 0109 	and.w	r1, r2, r9
 800c40e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c412:	f300 8097 	bgt.w	800c544 <_strtod_l+0x934>
 800c416:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c41a:	f77f aea5 	ble.w	800c168 <_strtod_l+0x558>
 800c41e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c4a0 <_strtod_l+0x890>
 800c422:	ec49 8b16 	vmov	d6, r8, r9
 800c426:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c42a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c42e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800c432:	4313      	orrs	r3, r2
 800c434:	bf08      	it	eq
 800c436:	2322      	moveq	r3, #34	; 0x22
 800c438:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c43c:	bf08      	it	eq
 800c43e:	6023      	streq	r3, [r4, #0]
 800c440:	e62c      	b.n	800c09c <_strtod_l+0x48c>
 800c442:	f04f 31ff 	mov.w	r1, #4294967295
 800c446:	fa01 f202 	lsl.w	r2, r1, r2
 800c44a:	ea02 0808 	and.w	r8, r2, r8
 800c44e:	e6d9      	b.n	800c204 <_strtod_l+0x5f4>
 800c450:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800c454:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c458:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800c45c:	33e2      	adds	r3, #226	; 0xe2
 800c45e:	fa00 f303 	lsl.w	r3, r0, r3
 800c462:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800c466:	e73f      	b.n	800c2e8 <_strtod_l+0x6d8>
 800c468:	2200      	movs	r2, #0
 800c46a:	2301      	movs	r3, #1
 800c46c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c470:	e73a      	b.n	800c2e8 <_strtod_l+0x6d8>
 800c472:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c474:	461a      	mov	r2, r3
 800c476:	4620      	mov	r0, r4
 800c478:	f001 fdfc 	bl	800e074 <__lshift>
 800c47c:	9012      	str	r0, [sp, #72]	; 0x48
 800c47e:	2800      	cmp	r0, #0
 800c480:	f47f af64 	bne.w	800c34c <_strtod_l+0x73c>
 800c484:	e600      	b.n	800c088 <_strtod_l+0x478>
 800c486:	bf00      	nop
 800c488:	94a03595 	.word	0x94a03595
 800c48c:	3fcfffff 	.word	0x3fcfffff
 800c490:	94a03595 	.word	0x94a03595
 800c494:	3fdfffff 	.word	0x3fdfffff
 800c498:	35afe535 	.word	0x35afe535
 800c49c:	3fe00000 	.word	0x3fe00000
 800c4a0:	00000000 	.word	0x00000000
 800c4a4:	39500000 	.word	0x39500000
 800c4a8:	0800f6c0 	.word	0x0800f6c0
 800c4ac:	fffffc02 	.word	0xfffffc02
 800c4b0:	7ff00000 	.word	0x7ff00000
 800c4b4:	46cb      	mov	fp, r9
 800c4b6:	d15f      	bne.n	800c578 <_strtod_l+0x968>
 800c4b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4bc:	f1ba 0f00 	cmp.w	sl, #0
 800c4c0:	d02a      	beq.n	800c518 <_strtod_l+0x908>
 800c4c2:	4aa7      	ldr	r2, [pc, #668]	; (800c760 <_strtod_l+0xb50>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d12b      	bne.n	800c520 <_strtod_l+0x910>
 800c4c8:	9b04      	ldr	r3, [sp, #16]
 800c4ca:	4642      	mov	r2, r8
 800c4cc:	b1fb      	cbz	r3, 800c50e <_strtod_l+0x8fe>
 800c4ce:	4ba5      	ldr	r3, [pc, #660]	; (800c764 <_strtod_l+0xb54>)
 800c4d0:	ea09 0303 	and.w	r3, r9, r3
 800c4d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c4d8:	f04f 31ff 	mov.w	r1, #4294967295
 800c4dc:	d81a      	bhi.n	800c514 <_strtod_l+0x904>
 800c4de:	0d1b      	lsrs	r3, r3, #20
 800c4e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c4e4:	fa01 f303 	lsl.w	r3, r1, r3
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d119      	bne.n	800c520 <_strtod_l+0x910>
 800c4ec:	4b9e      	ldr	r3, [pc, #632]	; (800c768 <_strtod_l+0xb58>)
 800c4ee:	459b      	cmp	fp, r3
 800c4f0:	d102      	bne.n	800c4f8 <_strtod_l+0x8e8>
 800c4f2:	3201      	adds	r2, #1
 800c4f4:	f43f adc8 	beq.w	800c088 <_strtod_l+0x478>
 800c4f8:	4b9a      	ldr	r3, [pc, #616]	; (800c764 <_strtod_l+0xb54>)
 800c4fa:	ea0b 0303 	and.w	r3, fp, r3
 800c4fe:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c502:	f04f 0800 	mov.w	r8, #0
 800c506:	9b04      	ldr	r3, [sp, #16]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d188      	bne.n	800c41e <_strtod_l+0x80e>
 800c50c:	e5c6      	b.n	800c09c <_strtod_l+0x48c>
 800c50e:	f04f 33ff 	mov.w	r3, #4294967295
 800c512:	e7e9      	b.n	800c4e8 <_strtod_l+0x8d8>
 800c514:	460b      	mov	r3, r1
 800c516:	e7e7      	b.n	800c4e8 <_strtod_l+0x8d8>
 800c518:	ea53 0308 	orrs.w	r3, r3, r8
 800c51c:	f43f af6f 	beq.w	800c3fe <_strtod_l+0x7ee>
 800c520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c522:	b1cb      	cbz	r3, 800c558 <_strtod_l+0x948>
 800c524:	ea13 0f0b 	tst.w	r3, fp
 800c528:	d0ed      	beq.n	800c506 <_strtod_l+0x8f6>
 800c52a:	9a04      	ldr	r2, [sp, #16]
 800c52c:	4640      	mov	r0, r8
 800c52e:	4649      	mov	r1, r9
 800c530:	f1ba 0f00 	cmp.w	sl, #0
 800c534:	d014      	beq.n	800c560 <_strtod_l+0x950>
 800c536:	f7ff fb51 	bl	800bbdc <sulp>
 800c53a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800c53e:	ec59 8b17 	vmov	r8, r9, d7
 800c542:	e7e0      	b.n	800c506 <_strtod_l+0x8f6>
 800c544:	4013      	ands	r3, r2
 800c546:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c54a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c54e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c552:	f04f 38ff 	mov.w	r8, #4294967295
 800c556:	e7d6      	b.n	800c506 <_strtod_l+0x8f6>
 800c558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c55a:	ea13 0f08 	tst.w	r3, r8
 800c55e:	e7e3      	b.n	800c528 <_strtod_l+0x918>
 800c560:	f7ff fb3c 	bl	800bbdc <sulp>
 800c564:	ee38 0b40 	vsub.f64	d0, d8, d0
 800c568:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c570:	ec59 8b10 	vmov	r8, r9, d0
 800c574:	d1c7      	bne.n	800c506 <_strtod_l+0x8f6>
 800c576:	e5f7      	b.n	800c168 <_strtod_l+0x558>
 800c578:	4631      	mov	r1, r6
 800c57a:	4628      	mov	r0, r5
 800c57c:	f001 ff68 	bl	800e450 <__ratio>
 800c580:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c584:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c58c:	d865      	bhi.n	800c65a <_strtod_l+0xa4a>
 800c58e:	f1ba 0f00 	cmp.w	sl, #0
 800c592:	d042      	beq.n	800c61a <_strtod_l+0xa0a>
 800c594:	4b75      	ldr	r3, [pc, #468]	; (800c76c <_strtod_l+0xb5c>)
 800c596:	2200      	movs	r2, #0
 800c598:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c59c:	4871      	ldr	r0, [pc, #452]	; (800c764 <_strtod_l+0xb54>)
 800c59e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800c778 <_strtod_l+0xb68>
 800c5a2:	ea0b 0100 	and.w	r1, fp, r0
 800c5a6:	4561      	cmp	r1, ip
 800c5a8:	f040 808e 	bne.w	800c6c8 <_strtod_l+0xab8>
 800c5ac:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800c5b0:	ec49 8b10 	vmov	d0, r8, r9
 800c5b4:	ec43 2b1c 	vmov	d12, r2, r3
 800c5b8:	910a      	str	r1, [sp, #40]	; 0x28
 800c5ba:	f001 fe71 	bl	800e2a0 <__ulp>
 800c5be:	ec49 8b1e 	vmov	d14, r8, r9
 800c5c2:	4868      	ldr	r0, [pc, #416]	; (800c764 <_strtod_l+0xb54>)
 800c5c4:	eeac eb00 	vfma.f64	d14, d12, d0
 800c5c8:	ee1e 3a90 	vmov	r3, s29
 800c5cc:	4a68      	ldr	r2, [pc, #416]	; (800c770 <_strtod_l+0xb60>)
 800c5ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c5d0:	4018      	ands	r0, r3
 800c5d2:	4290      	cmp	r0, r2
 800c5d4:	ec59 8b1e 	vmov	r8, r9, d14
 800c5d8:	d94e      	bls.n	800c678 <_strtod_l+0xa68>
 800c5da:	ee18 3a90 	vmov	r3, s17
 800c5de:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d104      	bne.n	800c5f0 <_strtod_l+0x9e0>
 800c5e6:	ee18 3a10 	vmov	r3, s16
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	f43f ad4c 	beq.w	800c088 <_strtod_l+0x478>
 800c5f0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800c768 <_strtod_l+0xb58>
 800c5f4:	f04f 38ff 	mov.w	r8, #4294967295
 800c5f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f001 fb1e 	bl	800dc3c <_Bfree>
 800c600:	4639      	mov	r1, r7
 800c602:	4620      	mov	r0, r4
 800c604:	f001 fb1a 	bl	800dc3c <_Bfree>
 800c608:	4631      	mov	r1, r6
 800c60a:	4620      	mov	r0, r4
 800c60c:	f001 fb16 	bl	800dc3c <_Bfree>
 800c610:	4629      	mov	r1, r5
 800c612:	4620      	mov	r0, r4
 800c614:	f001 fb12 	bl	800dc3c <_Bfree>
 800c618:	e619      	b.n	800c24e <_strtod_l+0x63e>
 800c61a:	f1b8 0f00 	cmp.w	r8, #0
 800c61e:	d112      	bne.n	800c646 <_strtod_l+0xa36>
 800c620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c624:	b9b3      	cbnz	r3, 800c654 <_strtod_l+0xa44>
 800c626:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c62a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c632:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c636:	bf58      	it	pl
 800c638:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800c63c:	eeb1 7b4d 	vneg.f64	d7, d13
 800c640:	ec53 2b17 	vmov	r2, r3, d7
 800c644:	e7aa      	b.n	800c59c <_strtod_l+0x98c>
 800c646:	f1b8 0f01 	cmp.w	r8, #1
 800c64a:	d103      	bne.n	800c654 <_strtod_l+0xa44>
 800c64c:	f1b9 0f00 	cmp.w	r9, #0
 800c650:	f43f ad8a 	beq.w	800c168 <_strtod_l+0x558>
 800c654:	4b47      	ldr	r3, [pc, #284]	; (800c774 <_strtod_l+0xb64>)
 800c656:	2200      	movs	r2, #0
 800c658:	e79e      	b.n	800c598 <_strtod_l+0x988>
 800c65a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c65e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c662:	f1ba 0f00 	cmp.w	sl, #0
 800c666:	d104      	bne.n	800c672 <_strtod_l+0xa62>
 800c668:	eeb1 7b4d 	vneg.f64	d7, d13
 800c66c:	ec53 2b17 	vmov	r2, r3, d7
 800c670:	e794      	b.n	800c59c <_strtod_l+0x98c>
 800c672:	eeb0 7b4d 	vmov.f64	d7, d13
 800c676:	e7f9      	b.n	800c66c <_strtod_l+0xa5c>
 800c678:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c67c:	9b04      	ldr	r3, [sp, #16]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1ba      	bne.n	800c5f8 <_strtod_l+0x9e8>
 800c682:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c686:	0d1b      	lsrs	r3, r3, #20
 800c688:	051b      	lsls	r3, r3, #20
 800c68a:	4299      	cmp	r1, r3
 800c68c:	d1b4      	bne.n	800c5f8 <_strtod_l+0x9e8>
 800c68e:	ec51 0b1d 	vmov	r0, r1, d13
 800c692:	f7f4 f851 	bl	8000738 <__aeabi_d2lz>
 800c696:	f7f4 f809 	bl	80006ac <__aeabi_l2d>
 800c69a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c69e:	ec41 0b17 	vmov	d7, r0, r1
 800c6a2:	ea43 0308 	orr.w	r3, r3, r8
 800c6a6:	ea53 030a 	orrs.w	r3, r3, sl
 800c6aa:	ee3d db47 	vsub.f64	d13, d13, d7
 800c6ae:	d03c      	beq.n	800c72a <_strtod_l+0xb1a>
 800c6b0:	eeb4 dbca 	vcmpe.f64	d13, d10
 800c6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b8:	f53f acf0 	bmi.w	800c09c <_strtod_l+0x48c>
 800c6bc:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800c6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6c4:	dd98      	ble.n	800c5f8 <_strtod_l+0x9e8>
 800c6c6:	e4e9      	b.n	800c09c <_strtod_l+0x48c>
 800c6c8:	9804      	ldr	r0, [sp, #16]
 800c6ca:	b1f0      	cbz	r0, 800c70a <_strtod_l+0xafa>
 800c6cc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800c6d0:	d81b      	bhi.n	800c70a <_strtod_l+0xafa>
 800c6d2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800c758 <_strtod_l+0xb48>
 800c6d6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800c6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6de:	d811      	bhi.n	800c704 <_strtod_l+0xaf4>
 800c6e0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800c6e4:	ee1d 3a10 	vmov	r3, s26
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	bf38      	it	cc
 800c6ec:	2301      	movcc	r3, #1
 800c6ee:	ee0d 3a10 	vmov	s26, r3
 800c6f2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800c6f6:	f1ba 0f00 	cmp.w	sl, #0
 800c6fa:	d113      	bne.n	800c724 <_strtod_l+0xb14>
 800c6fc:	eeb1 7b4d 	vneg.f64	d7, d13
 800c700:	ec53 2b17 	vmov	r2, r3, d7
 800c704:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800c708:	1a43      	subs	r3, r0, r1
 800c70a:	eeb0 0b48 	vmov.f64	d0, d8
 800c70e:	ec43 2b1c 	vmov	d12, r2, r3
 800c712:	910a      	str	r1, [sp, #40]	; 0x28
 800c714:	f001 fdc4 	bl	800e2a0 <__ulp>
 800c718:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c71a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800c71e:	ec59 8b18 	vmov	r8, r9, d8
 800c722:	e7ab      	b.n	800c67c <_strtod_l+0xa6c>
 800c724:	eeb0 7b4d 	vmov.f64	d7, d13
 800c728:	e7ea      	b.n	800c700 <_strtod_l+0xaf0>
 800c72a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800c72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c732:	f57f af61 	bpl.w	800c5f8 <_strtod_l+0x9e8>
 800c736:	e4b1      	b.n	800c09c <_strtod_l+0x48c>
 800c738:	2300      	movs	r3, #0
 800c73a:	9308      	str	r3, [sp, #32]
 800c73c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c73e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c740:	6013      	str	r3, [r2, #0]
 800c742:	f7ff baad 	b.w	800bca0 <_strtod_l+0x90>
 800c746:	2a65      	cmp	r2, #101	; 0x65
 800c748:	f43f ab9f 	beq.w	800be8a <_strtod_l+0x27a>
 800c74c:	2a45      	cmp	r2, #69	; 0x45
 800c74e:	f43f ab9c 	beq.w	800be8a <_strtod_l+0x27a>
 800c752:	2101      	movs	r1, #1
 800c754:	f7ff bbd4 	b.w	800bf00 <_strtod_l+0x2f0>
 800c758:	ffc00000 	.word	0xffc00000
 800c75c:	41dfffff 	.word	0x41dfffff
 800c760:	000fffff 	.word	0x000fffff
 800c764:	7ff00000 	.word	0x7ff00000
 800c768:	7fefffff 	.word	0x7fefffff
 800c76c:	3ff00000 	.word	0x3ff00000
 800c770:	7c9fffff 	.word	0x7c9fffff
 800c774:	bff00000 	.word	0xbff00000
 800c778:	7fe00000 	.word	0x7fe00000

0800c77c <_strtod_r>:
 800c77c:	4b01      	ldr	r3, [pc, #4]	; (800c784 <_strtod_r+0x8>)
 800c77e:	f7ff ba47 	b.w	800bc10 <_strtod_l>
 800c782:	bf00      	nop
 800c784:	24000078 	.word	0x24000078

0800c788 <_strtol_l.constprop.0>:
 800c788:	2b01      	cmp	r3, #1
 800c78a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c78e:	d001      	beq.n	800c794 <_strtol_l.constprop.0+0xc>
 800c790:	2b24      	cmp	r3, #36	; 0x24
 800c792:	d906      	bls.n	800c7a2 <_strtol_l.constprop.0+0x1a>
 800c794:	f7fe fb80 	bl	800ae98 <__errno>
 800c798:	2316      	movs	r3, #22
 800c79a:	6003      	str	r3, [r0, #0]
 800c79c:	2000      	movs	r0, #0
 800c79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c888 <_strtol_l.constprop.0+0x100>
 800c7a6:	460d      	mov	r5, r1
 800c7a8:	462e      	mov	r6, r5
 800c7aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c7b2:	f017 0708 	ands.w	r7, r7, #8
 800c7b6:	d1f7      	bne.n	800c7a8 <_strtol_l.constprop.0+0x20>
 800c7b8:	2c2d      	cmp	r4, #45	; 0x2d
 800c7ba:	d132      	bne.n	800c822 <_strtol_l.constprop.0+0x9a>
 800c7bc:	782c      	ldrb	r4, [r5, #0]
 800c7be:	2701      	movs	r7, #1
 800c7c0:	1cb5      	adds	r5, r6, #2
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d05b      	beq.n	800c87e <_strtol_l.constprop.0+0xf6>
 800c7c6:	2b10      	cmp	r3, #16
 800c7c8:	d109      	bne.n	800c7de <_strtol_l.constprop.0+0x56>
 800c7ca:	2c30      	cmp	r4, #48	; 0x30
 800c7cc:	d107      	bne.n	800c7de <_strtol_l.constprop.0+0x56>
 800c7ce:	782c      	ldrb	r4, [r5, #0]
 800c7d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c7d4:	2c58      	cmp	r4, #88	; 0x58
 800c7d6:	d14d      	bne.n	800c874 <_strtol_l.constprop.0+0xec>
 800c7d8:	786c      	ldrb	r4, [r5, #1]
 800c7da:	2310      	movs	r3, #16
 800c7dc:	3502      	adds	r5, #2
 800c7de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c7e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7e6:	f04f 0c00 	mov.w	ip, #0
 800c7ea:	fbb8 f9f3 	udiv	r9, r8, r3
 800c7ee:	4666      	mov	r6, ip
 800c7f0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c7f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c7f8:	f1be 0f09 	cmp.w	lr, #9
 800c7fc:	d816      	bhi.n	800c82c <_strtol_l.constprop.0+0xa4>
 800c7fe:	4674      	mov	r4, lr
 800c800:	42a3      	cmp	r3, r4
 800c802:	dd24      	ble.n	800c84e <_strtol_l.constprop.0+0xc6>
 800c804:	f1bc 0f00 	cmp.w	ip, #0
 800c808:	db1e      	blt.n	800c848 <_strtol_l.constprop.0+0xc0>
 800c80a:	45b1      	cmp	r9, r6
 800c80c:	d31c      	bcc.n	800c848 <_strtol_l.constprop.0+0xc0>
 800c80e:	d101      	bne.n	800c814 <_strtol_l.constprop.0+0x8c>
 800c810:	45a2      	cmp	sl, r4
 800c812:	db19      	blt.n	800c848 <_strtol_l.constprop.0+0xc0>
 800c814:	fb06 4603 	mla	r6, r6, r3, r4
 800c818:	f04f 0c01 	mov.w	ip, #1
 800c81c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c820:	e7e8      	b.n	800c7f4 <_strtol_l.constprop.0+0x6c>
 800c822:	2c2b      	cmp	r4, #43	; 0x2b
 800c824:	bf04      	itt	eq
 800c826:	782c      	ldrbeq	r4, [r5, #0]
 800c828:	1cb5      	addeq	r5, r6, #2
 800c82a:	e7ca      	b.n	800c7c2 <_strtol_l.constprop.0+0x3a>
 800c82c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c830:	f1be 0f19 	cmp.w	lr, #25
 800c834:	d801      	bhi.n	800c83a <_strtol_l.constprop.0+0xb2>
 800c836:	3c37      	subs	r4, #55	; 0x37
 800c838:	e7e2      	b.n	800c800 <_strtol_l.constprop.0+0x78>
 800c83a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c83e:	f1be 0f19 	cmp.w	lr, #25
 800c842:	d804      	bhi.n	800c84e <_strtol_l.constprop.0+0xc6>
 800c844:	3c57      	subs	r4, #87	; 0x57
 800c846:	e7db      	b.n	800c800 <_strtol_l.constprop.0+0x78>
 800c848:	f04f 3cff 	mov.w	ip, #4294967295
 800c84c:	e7e6      	b.n	800c81c <_strtol_l.constprop.0+0x94>
 800c84e:	f1bc 0f00 	cmp.w	ip, #0
 800c852:	da05      	bge.n	800c860 <_strtol_l.constprop.0+0xd8>
 800c854:	2322      	movs	r3, #34	; 0x22
 800c856:	6003      	str	r3, [r0, #0]
 800c858:	4646      	mov	r6, r8
 800c85a:	b942      	cbnz	r2, 800c86e <_strtol_l.constprop.0+0xe6>
 800c85c:	4630      	mov	r0, r6
 800c85e:	e79e      	b.n	800c79e <_strtol_l.constprop.0+0x16>
 800c860:	b107      	cbz	r7, 800c864 <_strtol_l.constprop.0+0xdc>
 800c862:	4276      	negs	r6, r6
 800c864:	2a00      	cmp	r2, #0
 800c866:	d0f9      	beq.n	800c85c <_strtol_l.constprop.0+0xd4>
 800c868:	f1bc 0f00 	cmp.w	ip, #0
 800c86c:	d000      	beq.n	800c870 <_strtol_l.constprop.0+0xe8>
 800c86e:	1e69      	subs	r1, r5, #1
 800c870:	6011      	str	r1, [r2, #0]
 800c872:	e7f3      	b.n	800c85c <_strtol_l.constprop.0+0xd4>
 800c874:	2430      	movs	r4, #48	; 0x30
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1b1      	bne.n	800c7de <_strtol_l.constprop.0+0x56>
 800c87a:	2308      	movs	r3, #8
 800c87c:	e7af      	b.n	800c7de <_strtol_l.constprop.0+0x56>
 800c87e:	2c30      	cmp	r4, #48	; 0x30
 800c880:	d0a5      	beq.n	800c7ce <_strtol_l.constprop.0+0x46>
 800c882:	230a      	movs	r3, #10
 800c884:	e7ab      	b.n	800c7de <_strtol_l.constprop.0+0x56>
 800c886:	bf00      	nop
 800c888:	0800f6e9 	.word	0x0800f6e9

0800c88c <_strtol_r>:
 800c88c:	f7ff bf7c 	b.w	800c788 <_strtol_l.constprop.0>

0800c890 <quorem>:
 800c890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c894:	6903      	ldr	r3, [r0, #16]
 800c896:	690c      	ldr	r4, [r1, #16]
 800c898:	42a3      	cmp	r3, r4
 800c89a:	4607      	mov	r7, r0
 800c89c:	f2c0 8081 	blt.w	800c9a2 <quorem+0x112>
 800c8a0:	3c01      	subs	r4, #1
 800c8a2:	f101 0814 	add.w	r8, r1, #20
 800c8a6:	f100 0514 	add.w	r5, r0, #20
 800c8aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8ae:	9301      	str	r3, [sp, #4]
 800c8b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c8b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c8c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c8c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c8c8:	d331      	bcc.n	800c92e <quorem+0x9e>
 800c8ca:	f04f 0e00 	mov.w	lr, #0
 800c8ce:	4640      	mov	r0, r8
 800c8d0:	46ac      	mov	ip, r5
 800c8d2:	46f2      	mov	sl, lr
 800c8d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c8d8:	b293      	uxth	r3, r2
 800c8da:	fb06 e303 	mla	r3, r6, r3, lr
 800c8de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	ebaa 0303 	sub.w	r3, sl, r3
 800c8e8:	f8dc a000 	ldr.w	sl, [ip]
 800c8ec:	0c12      	lsrs	r2, r2, #16
 800c8ee:	fa13 f38a 	uxtah	r3, r3, sl
 800c8f2:	fb06 e202 	mla	r2, r6, r2, lr
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	9b00      	ldr	r3, [sp, #0]
 800c8fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c8fe:	b292      	uxth	r2, r2
 800c900:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c904:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c908:	f8bd 3000 	ldrh.w	r3, [sp]
 800c90c:	4581      	cmp	r9, r0
 800c90e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c912:	f84c 3b04 	str.w	r3, [ip], #4
 800c916:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c91a:	d2db      	bcs.n	800c8d4 <quorem+0x44>
 800c91c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c920:	b92b      	cbnz	r3, 800c92e <quorem+0x9e>
 800c922:	9b01      	ldr	r3, [sp, #4]
 800c924:	3b04      	subs	r3, #4
 800c926:	429d      	cmp	r5, r3
 800c928:	461a      	mov	r2, r3
 800c92a:	d32e      	bcc.n	800c98a <quorem+0xfa>
 800c92c:	613c      	str	r4, [r7, #16]
 800c92e:	4638      	mov	r0, r7
 800c930:	f001 fc10 	bl	800e154 <__mcmp>
 800c934:	2800      	cmp	r0, #0
 800c936:	db24      	blt.n	800c982 <quorem+0xf2>
 800c938:	3601      	adds	r6, #1
 800c93a:	4628      	mov	r0, r5
 800c93c:	f04f 0c00 	mov.w	ip, #0
 800c940:	f858 2b04 	ldr.w	r2, [r8], #4
 800c944:	f8d0 e000 	ldr.w	lr, [r0]
 800c948:	b293      	uxth	r3, r2
 800c94a:	ebac 0303 	sub.w	r3, ip, r3
 800c94e:	0c12      	lsrs	r2, r2, #16
 800c950:	fa13 f38e 	uxtah	r3, r3, lr
 800c954:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c958:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c962:	45c1      	cmp	r9, r8
 800c964:	f840 3b04 	str.w	r3, [r0], #4
 800c968:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c96c:	d2e8      	bcs.n	800c940 <quorem+0xb0>
 800c96e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c976:	b922      	cbnz	r2, 800c982 <quorem+0xf2>
 800c978:	3b04      	subs	r3, #4
 800c97a:	429d      	cmp	r5, r3
 800c97c:	461a      	mov	r2, r3
 800c97e:	d30a      	bcc.n	800c996 <quorem+0x106>
 800c980:	613c      	str	r4, [r7, #16]
 800c982:	4630      	mov	r0, r6
 800c984:	b003      	add	sp, #12
 800c986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c98a:	6812      	ldr	r2, [r2, #0]
 800c98c:	3b04      	subs	r3, #4
 800c98e:	2a00      	cmp	r2, #0
 800c990:	d1cc      	bne.n	800c92c <quorem+0x9c>
 800c992:	3c01      	subs	r4, #1
 800c994:	e7c7      	b.n	800c926 <quorem+0x96>
 800c996:	6812      	ldr	r2, [r2, #0]
 800c998:	3b04      	subs	r3, #4
 800c99a:	2a00      	cmp	r2, #0
 800c99c:	d1f0      	bne.n	800c980 <quorem+0xf0>
 800c99e:	3c01      	subs	r4, #1
 800c9a0:	e7eb      	b.n	800c97a <quorem+0xea>
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	e7ee      	b.n	800c984 <quorem+0xf4>
	...

0800c9a8 <_dtoa_r>:
 800c9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ac:	ed2d 8b02 	vpush	{d8}
 800c9b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c9b2:	b091      	sub	sp, #68	; 0x44
 800c9b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c9b8:	ec59 8b10 	vmov	r8, r9, d0
 800c9bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c9be:	9106      	str	r1, [sp, #24]
 800c9c0:	4606      	mov	r6, r0
 800c9c2:	9208      	str	r2, [sp, #32]
 800c9c4:	930c      	str	r3, [sp, #48]	; 0x30
 800c9c6:	b975      	cbnz	r5, 800c9e6 <_dtoa_r+0x3e>
 800c9c8:	2010      	movs	r0, #16
 800c9ca:	f001 f8cf 	bl	800db6c <malloc>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	6270      	str	r0, [r6, #36]	; 0x24
 800c9d2:	b920      	cbnz	r0, 800c9de <_dtoa_r+0x36>
 800c9d4:	4baa      	ldr	r3, [pc, #680]	; (800cc80 <_dtoa_r+0x2d8>)
 800c9d6:	21ea      	movs	r1, #234	; 0xea
 800c9d8:	48aa      	ldr	r0, [pc, #680]	; (800cc84 <_dtoa_r+0x2dc>)
 800c9da:	f002 f83b 	bl	800ea54 <__assert_func>
 800c9de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c9e2:	6005      	str	r5, [r0, #0]
 800c9e4:	60c5      	str	r5, [r0, #12]
 800c9e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c9e8:	6819      	ldr	r1, [r3, #0]
 800c9ea:	b151      	cbz	r1, 800ca02 <_dtoa_r+0x5a>
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	604a      	str	r2, [r1, #4]
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	4093      	lsls	r3, r2
 800c9f4:	608b      	str	r3, [r1, #8]
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	f001 f920 	bl	800dc3c <_Bfree>
 800c9fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c9fe:	2200      	movs	r2, #0
 800ca00:	601a      	str	r2, [r3, #0]
 800ca02:	f1b9 0300 	subs.w	r3, r9, #0
 800ca06:	bfbb      	ittet	lt
 800ca08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ca0c:	9303      	strlt	r3, [sp, #12]
 800ca0e:	2300      	movge	r3, #0
 800ca10:	2201      	movlt	r2, #1
 800ca12:	bfac      	ite	ge
 800ca14:	6023      	strge	r3, [r4, #0]
 800ca16:	6022      	strlt	r2, [r4, #0]
 800ca18:	4b9b      	ldr	r3, [pc, #620]	; (800cc88 <_dtoa_r+0x2e0>)
 800ca1a:	9c03      	ldr	r4, [sp, #12]
 800ca1c:	43a3      	bics	r3, r4
 800ca1e:	d11c      	bne.n	800ca5a <_dtoa_r+0xb2>
 800ca20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca22:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca26:	6013      	str	r3, [r2, #0]
 800ca28:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ca2c:	ea53 0308 	orrs.w	r3, r3, r8
 800ca30:	f000 84fd 	beq.w	800d42e <_dtoa_r+0xa86>
 800ca34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca36:	b963      	cbnz	r3, 800ca52 <_dtoa_r+0xaa>
 800ca38:	4b94      	ldr	r3, [pc, #592]	; (800cc8c <_dtoa_r+0x2e4>)
 800ca3a:	e01f      	b.n	800ca7c <_dtoa_r+0xd4>
 800ca3c:	4b94      	ldr	r3, [pc, #592]	; (800cc90 <_dtoa_r+0x2e8>)
 800ca3e:	9301      	str	r3, [sp, #4]
 800ca40:	3308      	adds	r3, #8
 800ca42:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	9801      	ldr	r0, [sp, #4]
 800ca48:	b011      	add	sp, #68	; 0x44
 800ca4a:	ecbd 8b02 	vpop	{d8}
 800ca4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca52:	4b8e      	ldr	r3, [pc, #568]	; (800cc8c <_dtoa_r+0x2e4>)
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	3303      	adds	r3, #3
 800ca58:	e7f3      	b.n	800ca42 <_dtoa_r+0x9a>
 800ca5a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ca5e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ca62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca66:	d10b      	bne.n	800ca80 <_dtoa_r+0xd8>
 800ca68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	6013      	str	r3, [r2, #0]
 800ca6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f000 84d9 	beq.w	800d428 <_dtoa_r+0xa80>
 800ca76:	4887      	ldr	r0, [pc, #540]	; (800cc94 <_dtoa_r+0x2ec>)
 800ca78:	6018      	str	r0, [r3, #0]
 800ca7a:	1e43      	subs	r3, r0, #1
 800ca7c:	9301      	str	r3, [sp, #4]
 800ca7e:	e7e2      	b.n	800ca46 <_dtoa_r+0x9e>
 800ca80:	a90f      	add	r1, sp, #60	; 0x3c
 800ca82:	aa0e      	add	r2, sp, #56	; 0x38
 800ca84:	4630      	mov	r0, r6
 800ca86:	eeb0 0b48 	vmov.f64	d0, d8
 800ca8a:	f001 fc85 	bl	800e398 <__d2b>
 800ca8e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800ca92:	4605      	mov	r5, r0
 800ca94:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ca96:	2900      	cmp	r1, #0
 800ca98:	d046      	beq.n	800cb28 <_dtoa_r+0x180>
 800ca9a:	ee18 4a90 	vmov	r4, s17
 800ca9e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800caa2:	ec53 2b18 	vmov	r2, r3, d8
 800caa6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800caaa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800caae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cab2:	2400      	movs	r4, #0
 800cab4:	ec43 2b16 	vmov	d6, r2, r3
 800cab8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800cabc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800cc68 <_dtoa_r+0x2c0>
 800cac0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cac4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800cc70 <_dtoa_r+0x2c8>
 800cac8:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cacc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800cc78 <_dtoa_r+0x2d0>
 800cad0:	ee07 1a90 	vmov	s15, r1
 800cad4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cad8:	eeb0 7b46 	vmov.f64	d7, d6
 800cadc:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cae0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cae4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caec:	ee16 ba90 	vmov	fp, s13
 800caf0:	940a      	str	r4, [sp, #40]	; 0x28
 800caf2:	d508      	bpl.n	800cb06 <_dtoa_r+0x15e>
 800caf4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800caf8:	eeb4 6b47 	vcmp.f64	d6, d7
 800cafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb00:	bf18      	it	ne
 800cb02:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800cb06:	f1bb 0f16 	cmp.w	fp, #22
 800cb0a:	d82f      	bhi.n	800cb6c <_dtoa_r+0x1c4>
 800cb0c:	4b62      	ldr	r3, [pc, #392]	; (800cc98 <_dtoa_r+0x2f0>)
 800cb0e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cb12:	ed93 7b00 	vldr	d7, [r3]
 800cb16:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cb1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb1e:	d501      	bpl.n	800cb24 <_dtoa_r+0x17c>
 800cb20:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb24:	2300      	movs	r3, #0
 800cb26:	e022      	b.n	800cb6e <_dtoa_r+0x1c6>
 800cb28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cb2a:	4401      	add	r1, r0
 800cb2c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800cb30:	2b20      	cmp	r3, #32
 800cb32:	bfc1      	itttt	gt
 800cb34:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cb38:	fa04 f303 	lslgt.w	r3, r4, r3
 800cb3c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800cb40:	fa28 f804 	lsrgt.w	r8, r8, r4
 800cb44:	bfd6      	itet	le
 800cb46:	f1c3 0320 	rsble	r3, r3, #32
 800cb4a:	ea43 0808 	orrgt.w	r8, r3, r8
 800cb4e:	fa08 f803 	lslle.w	r8, r8, r3
 800cb52:	ee07 8a90 	vmov	s15, r8
 800cb56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cb5a:	3901      	subs	r1, #1
 800cb5c:	ee17 4a90 	vmov	r4, s15
 800cb60:	ec53 2b17 	vmov	r2, r3, d7
 800cb64:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800cb68:	2401      	movs	r4, #1
 800cb6a:	e7a3      	b.n	800cab4 <_dtoa_r+0x10c>
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb70:	1a43      	subs	r3, r0, r1
 800cb72:	1e5a      	subs	r2, r3, #1
 800cb74:	bf45      	ittet	mi
 800cb76:	f1c3 0301 	rsbmi	r3, r3, #1
 800cb7a:	9304      	strmi	r3, [sp, #16]
 800cb7c:	2300      	movpl	r3, #0
 800cb7e:	2300      	movmi	r3, #0
 800cb80:	9205      	str	r2, [sp, #20]
 800cb82:	bf54      	ite	pl
 800cb84:	9304      	strpl	r3, [sp, #16]
 800cb86:	9305      	strmi	r3, [sp, #20]
 800cb88:	f1bb 0f00 	cmp.w	fp, #0
 800cb8c:	db18      	blt.n	800cbc0 <_dtoa_r+0x218>
 800cb8e:	9b05      	ldr	r3, [sp, #20]
 800cb90:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800cb94:	445b      	add	r3, fp
 800cb96:	9305      	str	r3, [sp, #20]
 800cb98:	2300      	movs	r3, #0
 800cb9a:	9a06      	ldr	r2, [sp, #24]
 800cb9c:	2a09      	cmp	r2, #9
 800cb9e:	d849      	bhi.n	800cc34 <_dtoa_r+0x28c>
 800cba0:	2a05      	cmp	r2, #5
 800cba2:	bfc4      	itt	gt
 800cba4:	3a04      	subgt	r2, #4
 800cba6:	9206      	strgt	r2, [sp, #24]
 800cba8:	9a06      	ldr	r2, [sp, #24]
 800cbaa:	f1a2 0202 	sub.w	r2, r2, #2
 800cbae:	bfcc      	ite	gt
 800cbb0:	2400      	movgt	r4, #0
 800cbb2:	2401      	movle	r4, #1
 800cbb4:	2a03      	cmp	r2, #3
 800cbb6:	d848      	bhi.n	800cc4a <_dtoa_r+0x2a2>
 800cbb8:	e8df f002 	tbb	[pc, r2]
 800cbbc:	3a2c2e0b 	.word	0x3a2c2e0b
 800cbc0:	9b04      	ldr	r3, [sp, #16]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	eba3 030b 	sub.w	r3, r3, fp
 800cbc8:	9304      	str	r3, [sp, #16]
 800cbca:	9209      	str	r2, [sp, #36]	; 0x24
 800cbcc:	f1cb 0300 	rsb	r3, fp, #0
 800cbd0:	e7e3      	b.n	800cb9a <_dtoa_r+0x1f2>
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	9207      	str	r2, [sp, #28]
 800cbd6:	9a08      	ldr	r2, [sp, #32]
 800cbd8:	2a00      	cmp	r2, #0
 800cbda:	dc39      	bgt.n	800cc50 <_dtoa_r+0x2a8>
 800cbdc:	f04f 0a01 	mov.w	sl, #1
 800cbe0:	46d1      	mov	r9, sl
 800cbe2:	4652      	mov	r2, sl
 800cbe4:	f8cd a020 	str.w	sl, [sp, #32]
 800cbe8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800cbea:	2100      	movs	r1, #0
 800cbec:	6079      	str	r1, [r7, #4]
 800cbee:	2004      	movs	r0, #4
 800cbf0:	f100 0c14 	add.w	ip, r0, #20
 800cbf4:	4594      	cmp	ip, r2
 800cbf6:	6879      	ldr	r1, [r7, #4]
 800cbf8:	d92f      	bls.n	800cc5a <_dtoa_r+0x2b2>
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	930d      	str	r3, [sp, #52]	; 0x34
 800cbfe:	f000 ffdd 	bl	800dbbc <_Balloc>
 800cc02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc04:	9001      	str	r0, [sp, #4]
 800cc06:	4602      	mov	r2, r0
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d149      	bne.n	800cca0 <_dtoa_r+0x2f8>
 800cc0c:	4b23      	ldr	r3, [pc, #140]	; (800cc9c <_dtoa_r+0x2f4>)
 800cc0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cc12:	e6e1      	b.n	800c9d8 <_dtoa_r+0x30>
 800cc14:	2201      	movs	r2, #1
 800cc16:	e7dd      	b.n	800cbd4 <_dtoa_r+0x22c>
 800cc18:	2200      	movs	r2, #0
 800cc1a:	9207      	str	r2, [sp, #28]
 800cc1c:	9a08      	ldr	r2, [sp, #32]
 800cc1e:	eb0b 0a02 	add.w	sl, fp, r2
 800cc22:	f10a 0901 	add.w	r9, sl, #1
 800cc26:	464a      	mov	r2, r9
 800cc28:	2a01      	cmp	r2, #1
 800cc2a:	bfb8      	it	lt
 800cc2c:	2201      	movlt	r2, #1
 800cc2e:	e7db      	b.n	800cbe8 <_dtoa_r+0x240>
 800cc30:	2201      	movs	r2, #1
 800cc32:	e7f2      	b.n	800cc1a <_dtoa_r+0x272>
 800cc34:	2401      	movs	r4, #1
 800cc36:	2200      	movs	r2, #0
 800cc38:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800cc3c:	f04f 3aff 	mov.w	sl, #4294967295
 800cc40:	2100      	movs	r1, #0
 800cc42:	46d1      	mov	r9, sl
 800cc44:	2212      	movs	r2, #18
 800cc46:	9108      	str	r1, [sp, #32]
 800cc48:	e7ce      	b.n	800cbe8 <_dtoa_r+0x240>
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	9207      	str	r2, [sp, #28]
 800cc4e:	e7f5      	b.n	800cc3c <_dtoa_r+0x294>
 800cc50:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cc54:	46d1      	mov	r9, sl
 800cc56:	4652      	mov	r2, sl
 800cc58:	e7c6      	b.n	800cbe8 <_dtoa_r+0x240>
 800cc5a:	3101      	adds	r1, #1
 800cc5c:	6079      	str	r1, [r7, #4]
 800cc5e:	0040      	lsls	r0, r0, #1
 800cc60:	e7c6      	b.n	800cbf0 <_dtoa_r+0x248>
 800cc62:	bf00      	nop
 800cc64:	f3af 8000 	nop.w
 800cc68:	636f4361 	.word	0x636f4361
 800cc6c:	3fd287a7 	.word	0x3fd287a7
 800cc70:	8b60c8b3 	.word	0x8b60c8b3
 800cc74:	3fc68a28 	.word	0x3fc68a28
 800cc78:	509f79fb 	.word	0x509f79fb
 800cc7c:	3fd34413 	.word	0x3fd34413
 800cc80:	0800f7f6 	.word	0x0800f7f6
 800cc84:	0800f80d 	.word	0x0800f80d
 800cc88:	7ff00000 	.word	0x7ff00000
 800cc8c:	0800f7f2 	.word	0x0800f7f2
 800cc90:	0800f7e9 	.word	0x0800f7e9
 800cc94:	0800f669 	.word	0x0800f669
 800cc98:	0800f978 	.word	0x0800f978
 800cc9c:	0800f868 	.word	0x0800f868
 800cca0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800cca2:	9901      	ldr	r1, [sp, #4]
 800cca4:	6011      	str	r1, [r2, #0]
 800cca6:	f1b9 0f0e 	cmp.w	r9, #14
 800ccaa:	d86c      	bhi.n	800cd86 <_dtoa_r+0x3de>
 800ccac:	2c00      	cmp	r4, #0
 800ccae:	d06a      	beq.n	800cd86 <_dtoa_r+0x3de>
 800ccb0:	f1bb 0f00 	cmp.w	fp, #0
 800ccb4:	f340 80a0 	ble.w	800cdf8 <_dtoa_r+0x450>
 800ccb8:	49c1      	ldr	r1, [pc, #772]	; (800cfc0 <_dtoa_r+0x618>)
 800ccba:	f00b 020f 	and.w	r2, fp, #15
 800ccbe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ccc2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ccc6:	ed92 7b00 	vldr	d7, [r2]
 800ccca:	ea4f 112b 	mov.w	r1, fp, asr #4
 800ccce:	f000 8087 	beq.w	800cde0 <_dtoa_r+0x438>
 800ccd2:	4abc      	ldr	r2, [pc, #752]	; (800cfc4 <_dtoa_r+0x61c>)
 800ccd4:	ed92 6b08 	vldr	d6, [r2, #32]
 800ccd8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ccdc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cce0:	f001 010f 	and.w	r1, r1, #15
 800cce4:	2203      	movs	r2, #3
 800cce6:	48b7      	ldr	r0, [pc, #732]	; (800cfc4 <_dtoa_r+0x61c>)
 800cce8:	2900      	cmp	r1, #0
 800ccea:	d17b      	bne.n	800cde4 <_dtoa_r+0x43c>
 800ccec:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ccf0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ccf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ccf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccfa:	2900      	cmp	r1, #0
 800ccfc:	f000 80a2 	beq.w	800ce44 <_dtoa_r+0x49c>
 800cd00:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cd04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd08:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd10:	f140 8098 	bpl.w	800ce44 <_dtoa_r+0x49c>
 800cd14:	f1b9 0f00 	cmp.w	r9, #0
 800cd18:	f000 8094 	beq.w	800ce44 <_dtoa_r+0x49c>
 800cd1c:	f1ba 0f00 	cmp.w	sl, #0
 800cd20:	dd2f      	ble.n	800cd82 <_dtoa_r+0x3da>
 800cd22:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800cd26:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd2a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd2e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cd32:	3201      	adds	r2, #1
 800cd34:	4650      	mov	r0, sl
 800cd36:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cd3a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800cd3e:	ee07 2a90 	vmov	s15, r2
 800cd42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cd46:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cd4a:	ee15 4a90 	vmov	r4, s11
 800cd4e:	ec52 1b15 	vmov	r1, r2, d5
 800cd52:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d177      	bne.n	800ce4a <_dtoa_r+0x4a2>
 800cd5a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cd5e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cd62:	ec42 1b17 	vmov	d7, r1, r2
 800cd66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd6e:	f300 8263 	bgt.w	800d238 <_dtoa_r+0x890>
 800cd72:	eeb1 7b47 	vneg.f64	d7, d7
 800cd76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd7e:	f100 8258 	bmi.w	800d232 <_dtoa_r+0x88a>
 800cd82:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cd86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd88:	2a00      	cmp	r2, #0
 800cd8a:	f2c0 811d 	blt.w	800cfc8 <_dtoa_r+0x620>
 800cd8e:	f1bb 0f0e 	cmp.w	fp, #14
 800cd92:	f300 8119 	bgt.w	800cfc8 <_dtoa_r+0x620>
 800cd96:	4b8a      	ldr	r3, [pc, #552]	; (800cfc0 <_dtoa_r+0x618>)
 800cd98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cd9c:	ed93 6b00 	vldr	d6, [r3]
 800cda0:	9b08      	ldr	r3, [sp, #32]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f280 80b7 	bge.w	800cf16 <_dtoa_r+0x56e>
 800cda8:	f1b9 0f00 	cmp.w	r9, #0
 800cdac:	f300 80b3 	bgt.w	800cf16 <_dtoa_r+0x56e>
 800cdb0:	f040 823f 	bne.w	800d232 <_dtoa_r+0x88a>
 800cdb4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cdb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cdbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cdc0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cdc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc8:	464c      	mov	r4, r9
 800cdca:	464f      	mov	r7, r9
 800cdcc:	f280 8215 	bge.w	800d1fa <_dtoa_r+0x852>
 800cdd0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cdd4:	2331      	movs	r3, #49	; 0x31
 800cdd6:	f808 3b01 	strb.w	r3, [r8], #1
 800cdda:	f10b 0b01 	add.w	fp, fp, #1
 800cdde:	e211      	b.n	800d204 <_dtoa_r+0x85c>
 800cde0:	2202      	movs	r2, #2
 800cde2:	e780      	b.n	800cce6 <_dtoa_r+0x33e>
 800cde4:	07cc      	lsls	r4, r1, #31
 800cde6:	d504      	bpl.n	800cdf2 <_dtoa_r+0x44a>
 800cde8:	ed90 6b00 	vldr	d6, [r0]
 800cdec:	3201      	adds	r2, #1
 800cdee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cdf2:	1049      	asrs	r1, r1, #1
 800cdf4:	3008      	adds	r0, #8
 800cdf6:	e777      	b.n	800cce8 <_dtoa_r+0x340>
 800cdf8:	d022      	beq.n	800ce40 <_dtoa_r+0x498>
 800cdfa:	f1cb 0100 	rsb	r1, fp, #0
 800cdfe:	4a70      	ldr	r2, [pc, #448]	; (800cfc0 <_dtoa_r+0x618>)
 800ce00:	f001 000f 	and.w	r0, r1, #15
 800ce04:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ce08:	ed92 7b00 	vldr	d7, [r2]
 800ce0c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ce10:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce14:	486b      	ldr	r0, [pc, #428]	; (800cfc4 <_dtoa_r+0x61c>)
 800ce16:	1109      	asrs	r1, r1, #4
 800ce18:	2400      	movs	r4, #0
 800ce1a:	2202      	movs	r2, #2
 800ce1c:	b929      	cbnz	r1, 800ce2a <_dtoa_r+0x482>
 800ce1e:	2c00      	cmp	r4, #0
 800ce20:	f43f af6a 	beq.w	800ccf8 <_dtoa_r+0x350>
 800ce24:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce28:	e766      	b.n	800ccf8 <_dtoa_r+0x350>
 800ce2a:	07cf      	lsls	r7, r1, #31
 800ce2c:	d505      	bpl.n	800ce3a <_dtoa_r+0x492>
 800ce2e:	ed90 6b00 	vldr	d6, [r0]
 800ce32:	3201      	adds	r2, #1
 800ce34:	2401      	movs	r4, #1
 800ce36:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce3a:	1049      	asrs	r1, r1, #1
 800ce3c:	3008      	adds	r0, #8
 800ce3e:	e7ed      	b.n	800ce1c <_dtoa_r+0x474>
 800ce40:	2202      	movs	r2, #2
 800ce42:	e759      	b.n	800ccf8 <_dtoa_r+0x350>
 800ce44:	465f      	mov	r7, fp
 800ce46:	4648      	mov	r0, r9
 800ce48:	e775      	b.n	800cd36 <_dtoa_r+0x38e>
 800ce4a:	ec42 1b17 	vmov	d7, r1, r2
 800ce4e:	4a5c      	ldr	r2, [pc, #368]	; (800cfc0 <_dtoa_r+0x618>)
 800ce50:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ce54:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ce58:	9a01      	ldr	r2, [sp, #4]
 800ce5a:	1814      	adds	r4, r2, r0
 800ce5c:	9a07      	ldr	r2, [sp, #28]
 800ce5e:	b352      	cbz	r2, 800ceb6 <_dtoa_r+0x50e>
 800ce60:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ce64:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ce68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ce6c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ce70:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ce74:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ce78:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ce7c:	ee14 2a90 	vmov	r2, s9
 800ce80:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ce84:	3230      	adds	r2, #48	; 0x30
 800ce86:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ce8a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce92:	f808 2b01 	strb.w	r2, [r8], #1
 800ce96:	d439      	bmi.n	800cf0c <_dtoa_r+0x564>
 800ce98:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ce9c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea4:	d472      	bmi.n	800cf8c <_dtoa_r+0x5e4>
 800cea6:	45a0      	cmp	r8, r4
 800cea8:	f43f af6b 	beq.w	800cd82 <_dtoa_r+0x3da>
 800ceac:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ceb0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ceb4:	e7e0      	b.n	800ce78 <_dtoa_r+0x4d0>
 800ceb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ceba:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cebe:	4621      	mov	r1, r4
 800cec0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cec4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cec8:	ee14 2a90 	vmov	r2, s9
 800cecc:	3230      	adds	r2, #48	; 0x30
 800cece:	f808 2b01 	strb.w	r2, [r8], #1
 800ced2:	45a0      	cmp	r8, r4
 800ced4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ced8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cedc:	d118      	bne.n	800cf10 <_dtoa_r+0x568>
 800cede:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cee2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cee6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ceea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceee:	dc4d      	bgt.n	800cf8c <_dtoa_r+0x5e4>
 800cef0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cef4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cefc:	f57f af41 	bpl.w	800cd82 <_dtoa_r+0x3da>
 800cf00:	4688      	mov	r8, r1
 800cf02:	3901      	subs	r1, #1
 800cf04:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800cf08:	2b30      	cmp	r3, #48	; 0x30
 800cf0a:	d0f9      	beq.n	800cf00 <_dtoa_r+0x558>
 800cf0c:	46bb      	mov	fp, r7
 800cf0e:	e02a      	b.n	800cf66 <_dtoa_r+0x5be>
 800cf10:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cf14:	e7d6      	b.n	800cec4 <_dtoa_r+0x51c>
 800cf16:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf1a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800cf1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cf22:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cf26:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cf2a:	ee15 3a10 	vmov	r3, s10
 800cf2e:	3330      	adds	r3, #48	; 0x30
 800cf30:	f808 3b01 	strb.w	r3, [r8], #1
 800cf34:	9b01      	ldr	r3, [sp, #4]
 800cf36:	eba8 0303 	sub.w	r3, r8, r3
 800cf3a:	4599      	cmp	r9, r3
 800cf3c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cf40:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cf44:	d133      	bne.n	800cfae <_dtoa_r+0x606>
 800cf46:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cf4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cf4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf52:	dc1a      	bgt.n	800cf8a <_dtoa_r+0x5e2>
 800cf54:	eeb4 7b46 	vcmp.f64	d7, d6
 800cf58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf5c:	d103      	bne.n	800cf66 <_dtoa_r+0x5be>
 800cf5e:	ee15 3a10 	vmov	r3, s10
 800cf62:	07d9      	lsls	r1, r3, #31
 800cf64:	d411      	bmi.n	800cf8a <_dtoa_r+0x5e2>
 800cf66:	4629      	mov	r1, r5
 800cf68:	4630      	mov	r0, r6
 800cf6a:	f000 fe67 	bl	800dc3c <_Bfree>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf72:	f888 3000 	strb.w	r3, [r8]
 800cf76:	f10b 0301 	add.w	r3, fp, #1
 800cf7a:	6013      	str	r3, [r2, #0]
 800cf7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f43f ad61 	beq.w	800ca46 <_dtoa_r+0x9e>
 800cf84:	f8c3 8000 	str.w	r8, [r3]
 800cf88:	e55d      	b.n	800ca46 <_dtoa_r+0x9e>
 800cf8a:	465f      	mov	r7, fp
 800cf8c:	4643      	mov	r3, r8
 800cf8e:	4698      	mov	r8, r3
 800cf90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf94:	2a39      	cmp	r2, #57	; 0x39
 800cf96:	d106      	bne.n	800cfa6 <_dtoa_r+0x5fe>
 800cf98:	9a01      	ldr	r2, [sp, #4]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d1f7      	bne.n	800cf8e <_dtoa_r+0x5e6>
 800cf9e:	9901      	ldr	r1, [sp, #4]
 800cfa0:	2230      	movs	r2, #48	; 0x30
 800cfa2:	3701      	adds	r7, #1
 800cfa4:	700a      	strb	r2, [r1, #0]
 800cfa6:	781a      	ldrb	r2, [r3, #0]
 800cfa8:	3201      	adds	r2, #1
 800cfaa:	701a      	strb	r2, [r3, #0]
 800cfac:	e7ae      	b.n	800cf0c <_dtoa_r+0x564>
 800cfae:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cfb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfba:	d1b2      	bne.n	800cf22 <_dtoa_r+0x57a>
 800cfbc:	e7d3      	b.n	800cf66 <_dtoa_r+0x5be>
 800cfbe:	bf00      	nop
 800cfc0:	0800f978 	.word	0x0800f978
 800cfc4:	0800f950 	.word	0x0800f950
 800cfc8:	9907      	ldr	r1, [sp, #28]
 800cfca:	2900      	cmp	r1, #0
 800cfcc:	f000 80d0 	beq.w	800d170 <_dtoa_r+0x7c8>
 800cfd0:	9906      	ldr	r1, [sp, #24]
 800cfd2:	2901      	cmp	r1, #1
 800cfd4:	f300 80b4 	bgt.w	800d140 <_dtoa_r+0x798>
 800cfd8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cfda:	2900      	cmp	r1, #0
 800cfdc:	f000 80ac 	beq.w	800d138 <_dtoa_r+0x790>
 800cfe0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cfe4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cfe8:	461c      	mov	r4, r3
 800cfea:	930a      	str	r3, [sp, #40]	; 0x28
 800cfec:	9b04      	ldr	r3, [sp, #16]
 800cfee:	4413      	add	r3, r2
 800cff0:	9304      	str	r3, [sp, #16]
 800cff2:	9b05      	ldr	r3, [sp, #20]
 800cff4:	2101      	movs	r1, #1
 800cff6:	4413      	add	r3, r2
 800cff8:	4630      	mov	r0, r6
 800cffa:	9305      	str	r3, [sp, #20]
 800cffc:	f000 ff20 	bl	800de40 <__i2b>
 800d000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d002:	4607      	mov	r7, r0
 800d004:	f1b8 0f00 	cmp.w	r8, #0
 800d008:	dd0d      	ble.n	800d026 <_dtoa_r+0x67e>
 800d00a:	9a05      	ldr	r2, [sp, #20]
 800d00c:	2a00      	cmp	r2, #0
 800d00e:	dd0a      	ble.n	800d026 <_dtoa_r+0x67e>
 800d010:	4542      	cmp	r2, r8
 800d012:	9904      	ldr	r1, [sp, #16]
 800d014:	bfa8      	it	ge
 800d016:	4642      	movge	r2, r8
 800d018:	1a89      	subs	r1, r1, r2
 800d01a:	9104      	str	r1, [sp, #16]
 800d01c:	9905      	ldr	r1, [sp, #20]
 800d01e:	eba8 0802 	sub.w	r8, r8, r2
 800d022:	1a8a      	subs	r2, r1, r2
 800d024:	9205      	str	r2, [sp, #20]
 800d026:	b303      	cbz	r3, 800d06a <_dtoa_r+0x6c2>
 800d028:	9a07      	ldr	r2, [sp, #28]
 800d02a:	2a00      	cmp	r2, #0
 800d02c:	f000 80a5 	beq.w	800d17a <_dtoa_r+0x7d2>
 800d030:	2c00      	cmp	r4, #0
 800d032:	dd13      	ble.n	800d05c <_dtoa_r+0x6b4>
 800d034:	4639      	mov	r1, r7
 800d036:	4622      	mov	r2, r4
 800d038:	4630      	mov	r0, r6
 800d03a:	930d      	str	r3, [sp, #52]	; 0x34
 800d03c:	f000 ffc0 	bl	800dfc0 <__pow5mult>
 800d040:	462a      	mov	r2, r5
 800d042:	4601      	mov	r1, r0
 800d044:	4607      	mov	r7, r0
 800d046:	4630      	mov	r0, r6
 800d048:	f000 ff10 	bl	800de6c <__multiply>
 800d04c:	4629      	mov	r1, r5
 800d04e:	900a      	str	r0, [sp, #40]	; 0x28
 800d050:	4630      	mov	r0, r6
 800d052:	f000 fdf3 	bl	800dc3c <_Bfree>
 800d056:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d05a:	4615      	mov	r5, r2
 800d05c:	1b1a      	subs	r2, r3, r4
 800d05e:	d004      	beq.n	800d06a <_dtoa_r+0x6c2>
 800d060:	4629      	mov	r1, r5
 800d062:	4630      	mov	r0, r6
 800d064:	f000 ffac 	bl	800dfc0 <__pow5mult>
 800d068:	4605      	mov	r5, r0
 800d06a:	2101      	movs	r1, #1
 800d06c:	4630      	mov	r0, r6
 800d06e:	f000 fee7 	bl	800de40 <__i2b>
 800d072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d074:	2b00      	cmp	r3, #0
 800d076:	4604      	mov	r4, r0
 800d078:	f340 8081 	ble.w	800d17e <_dtoa_r+0x7d6>
 800d07c:	461a      	mov	r2, r3
 800d07e:	4601      	mov	r1, r0
 800d080:	4630      	mov	r0, r6
 800d082:	f000 ff9d 	bl	800dfc0 <__pow5mult>
 800d086:	9b06      	ldr	r3, [sp, #24]
 800d088:	2b01      	cmp	r3, #1
 800d08a:	4604      	mov	r4, r0
 800d08c:	dd7a      	ble.n	800d184 <_dtoa_r+0x7dc>
 800d08e:	2300      	movs	r3, #0
 800d090:	930a      	str	r3, [sp, #40]	; 0x28
 800d092:	6922      	ldr	r2, [r4, #16]
 800d094:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d098:	6910      	ldr	r0, [r2, #16]
 800d09a:	f000 fe81 	bl	800dda0 <__hi0bits>
 800d09e:	f1c0 0020 	rsb	r0, r0, #32
 800d0a2:	9b05      	ldr	r3, [sp, #20]
 800d0a4:	4418      	add	r0, r3
 800d0a6:	f010 001f 	ands.w	r0, r0, #31
 800d0aa:	f000 808c 	beq.w	800d1c6 <_dtoa_r+0x81e>
 800d0ae:	f1c0 0220 	rsb	r2, r0, #32
 800d0b2:	2a04      	cmp	r2, #4
 800d0b4:	f340 8085 	ble.w	800d1c2 <_dtoa_r+0x81a>
 800d0b8:	f1c0 001c 	rsb	r0, r0, #28
 800d0bc:	9b04      	ldr	r3, [sp, #16]
 800d0be:	4403      	add	r3, r0
 800d0c0:	9304      	str	r3, [sp, #16]
 800d0c2:	9b05      	ldr	r3, [sp, #20]
 800d0c4:	4403      	add	r3, r0
 800d0c6:	4480      	add	r8, r0
 800d0c8:	9305      	str	r3, [sp, #20]
 800d0ca:	9b04      	ldr	r3, [sp, #16]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	dd05      	ble.n	800d0dc <_dtoa_r+0x734>
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	f000 ffcd 	bl	800e074 <__lshift>
 800d0da:	4605      	mov	r5, r0
 800d0dc:	9b05      	ldr	r3, [sp, #20]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	dd05      	ble.n	800d0ee <_dtoa_r+0x746>
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	f000 ffc4 	bl	800e074 <__lshift>
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d06a      	beq.n	800d1ca <_dtoa_r+0x822>
 800d0f4:	4621      	mov	r1, r4
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	f001 f82c 	bl	800e154 <__mcmp>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	da64      	bge.n	800d1ca <_dtoa_r+0x822>
 800d100:	2300      	movs	r3, #0
 800d102:	4629      	mov	r1, r5
 800d104:	220a      	movs	r2, #10
 800d106:	4630      	mov	r0, r6
 800d108:	f000 fdba 	bl	800dc80 <__multadd>
 800d10c:	9b07      	ldr	r3, [sp, #28]
 800d10e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d112:	4605      	mov	r5, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	f000 8191 	beq.w	800d43c <_dtoa_r+0xa94>
 800d11a:	4639      	mov	r1, r7
 800d11c:	2300      	movs	r3, #0
 800d11e:	220a      	movs	r2, #10
 800d120:	4630      	mov	r0, r6
 800d122:	f000 fdad 	bl	800dc80 <__multadd>
 800d126:	f1ba 0f00 	cmp.w	sl, #0
 800d12a:	4607      	mov	r7, r0
 800d12c:	f300 808d 	bgt.w	800d24a <_dtoa_r+0x8a2>
 800d130:	9b06      	ldr	r3, [sp, #24]
 800d132:	2b02      	cmp	r3, #2
 800d134:	dc50      	bgt.n	800d1d8 <_dtoa_r+0x830>
 800d136:	e088      	b.n	800d24a <_dtoa_r+0x8a2>
 800d138:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d13a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d13e:	e751      	b.n	800cfe4 <_dtoa_r+0x63c>
 800d140:	f109 34ff 	add.w	r4, r9, #4294967295
 800d144:	42a3      	cmp	r3, r4
 800d146:	bfbf      	itttt	lt
 800d148:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800d14a:	1ae3      	sublt	r3, r4, r3
 800d14c:	18d2      	addlt	r2, r2, r3
 800d14e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800d150:	bfb6      	itet	lt
 800d152:	4623      	movlt	r3, r4
 800d154:	1b1c      	subge	r4, r3, r4
 800d156:	2400      	movlt	r4, #0
 800d158:	f1b9 0f00 	cmp.w	r9, #0
 800d15c:	bfb5      	itete	lt
 800d15e:	9a04      	ldrlt	r2, [sp, #16]
 800d160:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800d164:	eba2 0809 	sublt.w	r8, r2, r9
 800d168:	464a      	movge	r2, r9
 800d16a:	bfb8      	it	lt
 800d16c:	2200      	movlt	r2, #0
 800d16e:	e73c      	b.n	800cfea <_dtoa_r+0x642>
 800d170:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d174:	9f07      	ldr	r7, [sp, #28]
 800d176:	461c      	mov	r4, r3
 800d178:	e744      	b.n	800d004 <_dtoa_r+0x65c>
 800d17a:	461a      	mov	r2, r3
 800d17c:	e770      	b.n	800d060 <_dtoa_r+0x6b8>
 800d17e:	9b06      	ldr	r3, [sp, #24]
 800d180:	2b01      	cmp	r3, #1
 800d182:	dc18      	bgt.n	800d1b6 <_dtoa_r+0x80e>
 800d184:	9b02      	ldr	r3, [sp, #8]
 800d186:	b9b3      	cbnz	r3, 800d1b6 <_dtoa_r+0x80e>
 800d188:	9b03      	ldr	r3, [sp, #12]
 800d18a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d18e:	b9a2      	cbnz	r2, 800d1ba <_dtoa_r+0x812>
 800d190:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d194:	0d12      	lsrs	r2, r2, #20
 800d196:	0512      	lsls	r2, r2, #20
 800d198:	b18a      	cbz	r2, 800d1be <_dtoa_r+0x816>
 800d19a:	9b04      	ldr	r3, [sp, #16]
 800d19c:	3301      	adds	r3, #1
 800d19e:	9304      	str	r3, [sp, #16]
 800d1a0:	9b05      	ldr	r3, [sp, #20]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	9305      	str	r3, [sp, #20]
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	930a      	str	r3, [sp, #40]	; 0x28
 800d1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f47f af70 	bne.w	800d092 <_dtoa_r+0x6ea>
 800d1b2:	2001      	movs	r0, #1
 800d1b4:	e775      	b.n	800d0a2 <_dtoa_r+0x6fa>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	e7f6      	b.n	800d1a8 <_dtoa_r+0x800>
 800d1ba:	9b02      	ldr	r3, [sp, #8]
 800d1bc:	e7f4      	b.n	800d1a8 <_dtoa_r+0x800>
 800d1be:	920a      	str	r2, [sp, #40]	; 0x28
 800d1c0:	e7f3      	b.n	800d1aa <_dtoa_r+0x802>
 800d1c2:	d082      	beq.n	800d0ca <_dtoa_r+0x722>
 800d1c4:	4610      	mov	r0, r2
 800d1c6:	301c      	adds	r0, #28
 800d1c8:	e778      	b.n	800d0bc <_dtoa_r+0x714>
 800d1ca:	f1b9 0f00 	cmp.w	r9, #0
 800d1ce:	dc37      	bgt.n	800d240 <_dtoa_r+0x898>
 800d1d0:	9b06      	ldr	r3, [sp, #24]
 800d1d2:	2b02      	cmp	r3, #2
 800d1d4:	dd34      	ble.n	800d240 <_dtoa_r+0x898>
 800d1d6:	46ca      	mov	sl, r9
 800d1d8:	f1ba 0f00 	cmp.w	sl, #0
 800d1dc:	d10d      	bne.n	800d1fa <_dtoa_r+0x852>
 800d1de:	4621      	mov	r1, r4
 800d1e0:	4653      	mov	r3, sl
 800d1e2:	2205      	movs	r2, #5
 800d1e4:	4630      	mov	r0, r6
 800d1e6:	f000 fd4b 	bl	800dc80 <__multadd>
 800d1ea:	4601      	mov	r1, r0
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	f000 ffb0 	bl	800e154 <__mcmp>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	f73f adeb 	bgt.w	800cdd0 <_dtoa_r+0x428>
 800d1fa:	9b08      	ldr	r3, [sp, #32]
 800d1fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d200:	ea6f 0b03 	mvn.w	fp, r3
 800d204:	f04f 0900 	mov.w	r9, #0
 800d208:	4621      	mov	r1, r4
 800d20a:	4630      	mov	r0, r6
 800d20c:	f000 fd16 	bl	800dc3c <_Bfree>
 800d210:	2f00      	cmp	r7, #0
 800d212:	f43f aea8 	beq.w	800cf66 <_dtoa_r+0x5be>
 800d216:	f1b9 0f00 	cmp.w	r9, #0
 800d21a:	d005      	beq.n	800d228 <_dtoa_r+0x880>
 800d21c:	45b9      	cmp	r9, r7
 800d21e:	d003      	beq.n	800d228 <_dtoa_r+0x880>
 800d220:	4649      	mov	r1, r9
 800d222:	4630      	mov	r0, r6
 800d224:	f000 fd0a 	bl	800dc3c <_Bfree>
 800d228:	4639      	mov	r1, r7
 800d22a:	4630      	mov	r0, r6
 800d22c:	f000 fd06 	bl	800dc3c <_Bfree>
 800d230:	e699      	b.n	800cf66 <_dtoa_r+0x5be>
 800d232:	2400      	movs	r4, #0
 800d234:	4627      	mov	r7, r4
 800d236:	e7e0      	b.n	800d1fa <_dtoa_r+0x852>
 800d238:	46bb      	mov	fp, r7
 800d23a:	4604      	mov	r4, r0
 800d23c:	4607      	mov	r7, r0
 800d23e:	e5c7      	b.n	800cdd0 <_dtoa_r+0x428>
 800d240:	9b07      	ldr	r3, [sp, #28]
 800d242:	46ca      	mov	sl, r9
 800d244:	2b00      	cmp	r3, #0
 800d246:	f000 8100 	beq.w	800d44a <_dtoa_r+0xaa2>
 800d24a:	f1b8 0f00 	cmp.w	r8, #0
 800d24e:	dd05      	ble.n	800d25c <_dtoa_r+0x8b4>
 800d250:	4639      	mov	r1, r7
 800d252:	4642      	mov	r2, r8
 800d254:	4630      	mov	r0, r6
 800d256:	f000 ff0d 	bl	800e074 <__lshift>
 800d25a:	4607      	mov	r7, r0
 800d25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d05d      	beq.n	800d31e <_dtoa_r+0x976>
 800d262:	6879      	ldr	r1, [r7, #4]
 800d264:	4630      	mov	r0, r6
 800d266:	f000 fca9 	bl	800dbbc <_Balloc>
 800d26a:	4680      	mov	r8, r0
 800d26c:	b928      	cbnz	r0, 800d27a <_dtoa_r+0x8d2>
 800d26e:	4b82      	ldr	r3, [pc, #520]	; (800d478 <_dtoa_r+0xad0>)
 800d270:	4602      	mov	r2, r0
 800d272:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d276:	f7ff bbaf 	b.w	800c9d8 <_dtoa_r+0x30>
 800d27a:	693a      	ldr	r2, [r7, #16]
 800d27c:	3202      	adds	r2, #2
 800d27e:	0092      	lsls	r2, r2, #2
 800d280:	f107 010c 	add.w	r1, r7, #12
 800d284:	300c      	adds	r0, #12
 800d286:	f000 fc8b 	bl	800dba0 <memcpy>
 800d28a:	2201      	movs	r2, #1
 800d28c:	4641      	mov	r1, r8
 800d28e:	4630      	mov	r0, r6
 800d290:	f000 fef0 	bl	800e074 <__lshift>
 800d294:	9b01      	ldr	r3, [sp, #4]
 800d296:	3301      	adds	r3, #1
 800d298:	9304      	str	r3, [sp, #16]
 800d29a:	9b01      	ldr	r3, [sp, #4]
 800d29c:	4453      	add	r3, sl
 800d29e:	9308      	str	r3, [sp, #32]
 800d2a0:	9b02      	ldr	r3, [sp, #8]
 800d2a2:	f003 0301 	and.w	r3, r3, #1
 800d2a6:	46b9      	mov	r9, r7
 800d2a8:	9307      	str	r3, [sp, #28]
 800d2aa:	4607      	mov	r7, r0
 800d2ac:	9b04      	ldr	r3, [sp, #16]
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	9302      	str	r3, [sp, #8]
 800d2b6:	f7ff faeb 	bl	800c890 <quorem>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	3330      	adds	r3, #48	; 0x30
 800d2be:	9005      	str	r0, [sp, #20]
 800d2c0:	4649      	mov	r1, r9
 800d2c2:	4628      	mov	r0, r5
 800d2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c6:	f000 ff45 	bl	800e154 <__mcmp>
 800d2ca:	463a      	mov	r2, r7
 800d2cc:	4682      	mov	sl, r0
 800d2ce:	4621      	mov	r1, r4
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	f000 ff5b 	bl	800e18c <__mdiff>
 800d2d6:	68c2      	ldr	r2, [r0, #12]
 800d2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2da:	4680      	mov	r8, r0
 800d2dc:	bb0a      	cbnz	r2, 800d322 <_dtoa_r+0x97a>
 800d2de:	4601      	mov	r1, r0
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	f000 ff37 	bl	800e154 <__mcmp>
 800d2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	4641      	mov	r1, r8
 800d2ec:	4630      	mov	r0, r6
 800d2ee:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800d2f2:	f000 fca3 	bl	800dc3c <_Bfree>
 800d2f6:	9b06      	ldr	r3, [sp, #24]
 800d2f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2fa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d2fe:	ea43 0102 	orr.w	r1, r3, r2
 800d302:	9b07      	ldr	r3, [sp, #28]
 800d304:	430b      	orrs	r3, r1
 800d306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d308:	d10d      	bne.n	800d326 <_dtoa_r+0x97e>
 800d30a:	2b39      	cmp	r3, #57	; 0x39
 800d30c:	d029      	beq.n	800d362 <_dtoa_r+0x9ba>
 800d30e:	f1ba 0f00 	cmp.w	sl, #0
 800d312:	dd01      	ble.n	800d318 <_dtoa_r+0x970>
 800d314:	9b05      	ldr	r3, [sp, #20]
 800d316:	3331      	adds	r3, #49	; 0x31
 800d318:	9a02      	ldr	r2, [sp, #8]
 800d31a:	7013      	strb	r3, [r2, #0]
 800d31c:	e774      	b.n	800d208 <_dtoa_r+0x860>
 800d31e:	4638      	mov	r0, r7
 800d320:	e7b8      	b.n	800d294 <_dtoa_r+0x8ec>
 800d322:	2201      	movs	r2, #1
 800d324:	e7e1      	b.n	800d2ea <_dtoa_r+0x942>
 800d326:	f1ba 0f00 	cmp.w	sl, #0
 800d32a:	db06      	blt.n	800d33a <_dtoa_r+0x992>
 800d32c:	9906      	ldr	r1, [sp, #24]
 800d32e:	ea41 0a0a 	orr.w	sl, r1, sl
 800d332:	9907      	ldr	r1, [sp, #28]
 800d334:	ea5a 0101 	orrs.w	r1, sl, r1
 800d338:	d120      	bne.n	800d37c <_dtoa_r+0x9d4>
 800d33a:	2a00      	cmp	r2, #0
 800d33c:	ddec      	ble.n	800d318 <_dtoa_r+0x970>
 800d33e:	4629      	mov	r1, r5
 800d340:	2201      	movs	r2, #1
 800d342:	4630      	mov	r0, r6
 800d344:	9304      	str	r3, [sp, #16]
 800d346:	f000 fe95 	bl	800e074 <__lshift>
 800d34a:	4621      	mov	r1, r4
 800d34c:	4605      	mov	r5, r0
 800d34e:	f000 ff01 	bl	800e154 <__mcmp>
 800d352:	2800      	cmp	r0, #0
 800d354:	9b04      	ldr	r3, [sp, #16]
 800d356:	dc02      	bgt.n	800d35e <_dtoa_r+0x9b6>
 800d358:	d1de      	bne.n	800d318 <_dtoa_r+0x970>
 800d35a:	07da      	lsls	r2, r3, #31
 800d35c:	d5dc      	bpl.n	800d318 <_dtoa_r+0x970>
 800d35e:	2b39      	cmp	r3, #57	; 0x39
 800d360:	d1d8      	bne.n	800d314 <_dtoa_r+0x96c>
 800d362:	9a02      	ldr	r2, [sp, #8]
 800d364:	2339      	movs	r3, #57	; 0x39
 800d366:	7013      	strb	r3, [r2, #0]
 800d368:	4643      	mov	r3, r8
 800d36a:	4698      	mov	r8, r3
 800d36c:	3b01      	subs	r3, #1
 800d36e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d372:	2a39      	cmp	r2, #57	; 0x39
 800d374:	d051      	beq.n	800d41a <_dtoa_r+0xa72>
 800d376:	3201      	adds	r2, #1
 800d378:	701a      	strb	r2, [r3, #0]
 800d37a:	e745      	b.n	800d208 <_dtoa_r+0x860>
 800d37c:	2a00      	cmp	r2, #0
 800d37e:	dd03      	ble.n	800d388 <_dtoa_r+0x9e0>
 800d380:	2b39      	cmp	r3, #57	; 0x39
 800d382:	d0ee      	beq.n	800d362 <_dtoa_r+0x9ba>
 800d384:	3301      	adds	r3, #1
 800d386:	e7c7      	b.n	800d318 <_dtoa_r+0x970>
 800d388:	9a04      	ldr	r2, [sp, #16]
 800d38a:	9908      	ldr	r1, [sp, #32]
 800d38c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d390:	428a      	cmp	r2, r1
 800d392:	d02b      	beq.n	800d3ec <_dtoa_r+0xa44>
 800d394:	4629      	mov	r1, r5
 800d396:	2300      	movs	r3, #0
 800d398:	220a      	movs	r2, #10
 800d39a:	4630      	mov	r0, r6
 800d39c:	f000 fc70 	bl	800dc80 <__multadd>
 800d3a0:	45b9      	cmp	r9, r7
 800d3a2:	4605      	mov	r5, r0
 800d3a4:	f04f 0300 	mov.w	r3, #0
 800d3a8:	f04f 020a 	mov.w	r2, #10
 800d3ac:	4649      	mov	r1, r9
 800d3ae:	4630      	mov	r0, r6
 800d3b0:	d107      	bne.n	800d3c2 <_dtoa_r+0xa1a>
 800d3b2:	f000 fc65 	bl	800dc80 <__multadd>
 800d3b6:	4681      	mov	r9, r0
 800d3b8:	4607      	mov	r7, r0
 800d3ba:	9b04      	ldr	r3, [sp, #16]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	9304      	str	r3, [sp, #16]
 800d3c0:	e774      	b.n	800d2ac <_dtoa_r+0x904>
 800d3c2:	f000 fc5d 	bl	800dc80 <__multadd>
 800d3c6:	4639      	mov	r1, r7
 800d3c8:	4681      	mov	r9, r0
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	220a      	movs	r2, #10
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	f000 fc56 	bl	800dc80 <__multadd>
 800d3d4:	4607      	mov	r7, r0
 800d3d6:	e7f0      	b.n	800d3ba <_dtoa_r+0xa12>
 800d3d8:	f1ba 0f00 	cmp.w	sl, #0
 800d3dc:	9a01      	ldr	r2, [sp, #4]
 800d3de:	bfcc      	ite	gt
 800d3e0:	46d0      	movgt	r8, sl
 800d3e2:	f04f 0801 	movle.w	r8, #1
 800d3e6:	4490      	add	r8, r2
 800d3e8:	f04f 0900 	mov.w	r9, #0
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	9302      	str	r3, [sp, #8]
 800d3f4:	f000 fe3e 	bl	800e074 <__lshift>
 800d3f8:	4621      	mov	r1, r4
 800d3fa:	4605      	mov	r5, r0
 800d3fc:	f000 feaa 	bl	800e154 <__mcmp>
 800d400:	2800      	cmp	r0, #0
 800d402:	dcb1      	bgt.n	800d368 <_dtoa_r+0x9c0>
 800d404:	d102      	bne.n	800d40c <_dtoa_r+0xa64>
 800d406:	9b02      	ldr	r3, [sp, #8]
 800d408:	07db      	lsls	r3, r3, #31
 800d40a:	d4ad      	bmi.n	800d368 <_dtoa_r+0x9c0>
 800d40c:	4643      	mov	r3, r8
 800d40e:	4698      	mov	r8, r3
 800d410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d414:	2a30      	cmp	r2, #48	; 0x30
 800d416:	d0fa      	beq.n	800d40e <_dtoa_r+0xa66>
 800d418:	e6f6      	b.n	800d208 <_dtoa_r+0x860>
 800d41a:	9a01      	ldr	r2, [sp, #4]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d1a4      	bne.n	800d36a <_dtoa_r+0x9c2>
 800d420:	f10b 0b01 	add.w	fp, fp, #1
 800d424:	2331      	movs	r3, #49	; 0x31
 800d426:	e778      	b.n	800d31a <_dtoa_r+0x972>
 800d428:	4b14      	ldr	r3, [pc, #80]	; (800d47c <_dtoa_r+0xad4>)
 800d42a:	f7ff bb27 	b.w	800ca7c <_dtoa_r+0xd4>
 800d42e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d430:	2b00      	cmp	r3, #0
 800d432:	f47f ab03 	bne.w	800ca3c <_dtoa_r+0x94>
 800d436:	4b12      	ldr	r3, [pc, #72]	; (800d480 <_dtoa_r+0xad8>)
 800d438:	f7ff bb20 	b.w	800ca7c <_dtoa_r+0xd4>
 800d43c:	f1ba 0f00 	cmp.w	sl, #0
 800d440:	dc03      	bgt.n	800d44a <_dtoa_r+0xaa2>
 800d442:	9b06      	ldr	r3, [sp, #24]
 800d444:	2b02      	cmp	r3, #2
 800d446:	f73f aec7 	bgt.w	800d1d8 <_dtoa_r+0x830>
 800d44a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d44e:	4621      	mov	r1, r4
 800d450:	4628      	mov	r0, r5
 800d452:	f7ff fa1d 	bl	800c890 <quorem>
 800d456:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d45a:	f808 3b01 	strb.w	r3, [r8], #1
 800d45e:	9a01      	ldr	r2, [sp, #4]
 800d460:	eba8 0202 	sub.w	r2, r8, r2
 800d464:	4592      	cmp	sl, r2
 800d466:	ddb7      	ble.n	800d3d8 <_dtoa_r+0xa30>
 800d468:	4629      	mov	r1, r5
 800d46a:	2300      	movs	r3, #0
 800d46c:	220a      	movs	r2, #10
 800d46e:	4630      	mov	r0, r6
 800d470:	f000 fc06 	bl	800dc80 <__multadd>
 800d474:	4605      	mov	r5, r0
 800d476:	e7ea      	b.n	800d44e <_dtoa_r+0xaa6>
 800d478:	0800f868 	.word	0x0800f868
 800d47c:	0800f668 	.word	0x0800f668
 800d480:	0800f7e9 	.word	0x0800f7e9

0800d484 <rshift>:
 800d484:	6903      	ldr	r3, [r0, #16]
 800d486:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d48a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d48e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d492:	f100 0414 	add.w	r4, r0, #20
 800d496:	dd45      	ble.n	800d524 <rshift+0xa0>
 800d498:	f011 011f 	ands.w	r1, r1, #31
 800d49c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d4a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d4a4:	d10c      	bne.n	800d4c0 <rshift+0x3c>
 800d4a6:	f100 0710 	add.w	r7, r0, #16
 800d4aa:	4629      	mov	r1, r5
 800d4ac:	42b1      	cmp	r1, r6
 800d4ae:	d334      	bcc.n	800d51a <rshift+0x96>
 800d4b0:	1a9b      	subs	r3, r3, r2
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	1eea      	subs	r2, r5, #3
 800d4b6:	4296      	cmp	r6, r2
 800d4b8:	bf38      	it	cc
 800d4ba:	2300      	movcc	r3, #0
 800d4bc:	4423      	add	r3, r4
 800d4be:	e015      	b.n	800d4ec <rshift+0x68>
 800d4c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d4c4:	f1c1 0820 	rsb	r8, r1, #32
 800d4c8:	40cf      	lsrs	r7, r1
 800d4ca:	f105 0e04 	add.w	lr, r5, #4
 800d4ce:	46a1      	mov	r9, r4
 800d4d0:	4576      	cmp	r6, lr
 800d4d2:	46f4      	mov	ip, lr
 800d4d4:	d815      	bhi.n	800d502 <rshift+0x7e>
 800d4d6:	1a9a      	subs	r2, r3, r2
 800d4d8:	0092      	lsls	r2, r2, #2
 800d4da:	3a04      	subs	r2, #4
 800d4dc:	3501      	adds	r5, #1
 800d4de:	42ae      	cmp	r6, r5
 800d4e0:	bf38      	it	cc
 800d4e2:	2200      	movcc	r2, #0
 800d4e4:	18a3      	adds	r3, r4, r2
 800d4e6:	50a7      	str	r7, [r4, r2]
 800d4e8:	b107      	cbz	r7, 800d4ec <rshift+0x68>
 800d4ea:	3304      	adds	r3, #4
 800d4ec:	1b1a      	subs	r2, r3, r4
 800d4ee:	42a3      	cmp	r3, r4
 800d4f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d4f4:	bf08      	it	eq
 800d4f6:	2300      	moveq	r3, #0
 800d4f8:	6102      	str	r2, [r0, #16]
 800d4fa:	bf08      	it	eq
 800d4fc:	6143      	streq	r3, [r0, #20]
 800d4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d502:	f8dc c000 	ldr.w	ip, [ip]
 800d506:	fa0c fc08 	lsl.w	ip, ip, r8
 800d50a:	ea4c 0707 	orr.w	r7, ip, r7
 800d50e:	f849 7b04 	str.w	r7, [r9], #4
 800d512:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d516:	40cf      	lsrs	r7, r1
 800d518:	e7da      	b.n	800d4d0 <rshift+0x4c>
 800d51a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d51e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d522:	e7c3      	b.n	800d4ac <rshift+0x28>
 800d524:	4623      	mov	r3, r4
 800d526:	e7e1      	b.n	800d4ec <rshift+0x68>

0800d528 <__hexdig_fun>:
 800d528:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d52c:	2b09      	cmp	r3, #9
 800d52e:	d802      	bhi.n	800d536 <__hexdig_fun+0xe>
 800d530:	3820      	subs	r0, #32
 800d532:	b2c0      	uxtb	r0, r0
 800d534:	4770      	bx	lr
 800d536:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d53a:	2b05      	cmp	r3, #5
 800d53c:	d801      	bhi.n	800d542 <__hexdig_fun+0x1a>
 800d53e:	3847      	subs	r0, #71	; 0x47
 800d540:	e7f7      	b.n	800d532 <__hexdig_fun+0xa>
 800d542:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d546:	2b05      	cmp	r3, #5
 800d548:	d801      	bhi.n	800d54e <__hexdig_fun+0x26>
 800d54a:	3827      	subs	r0, #39	; 0x27
 800d54c:	e7f1      	b.n	800d532 <__hexdig_fun+0xa>
 800d54e:	2000      	movs	r0, #0
 800d550:	4770      	bx	lr
	...

0800d554 <__gethex>:
 800d554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d558:	ed2d 8b02 	vpush	{d8}
 800d55c:	b089      	sub	sp, #36	; 0x24
 800d55e:	ee08 0a10 	vmov	s16, r0
 800d562:	9304      	str	r3, [sp, #16]
 800d564:	4bb4      	ldr	r3, [pc, #720]	; (800d838 <__gethex+0x2e4>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	9301      	str	r3, [sp, #4]
 800d56a:	4618      	mov	r0, r3
 800d56c:	468b      	mov	fp, r1
 800d56e:	4690      	mov	r8, r2
 800d570:	f7f2 feb6 	bl	80002e0 <strlen>
 800d574:	9b01      	ldr	r3, [sp, #4]
 800d576:	f8db 2000 	ldr.w	r2, [fp]
 800d57a:	4403      	add	r3, r0
 800d57c:	4682      	mov	sl, r0
 800d57e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d582:	9305      	str	r3, [sp, #20]
 800d584:	1c93      	adds	r3, r2, #2
 800d586:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d58a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d58e:	32fe      	adds	r2, #254	; 0xfe
 800d590:	18d1      	adds	r1, r2, r3
 800d592:	461f      	mov	r7, r3
 800d594:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d598:	9100      	str	r1, [sp, #0]
 800d59a:	2830      	cmp	r0, #48	; 0x30
 800d59c:	d0f8      	beq.n	800d590 <__gethex+0x3c>
 800d59e:	f7ff ffc3 	bl	800d528 <__hexdig_fun>
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	d13a      	bne.n	800d61e <__gethex+0xca>
 800d5a8:	9901      	ldr	r1, [sp, #4]
 800d5aa:	4652      	mov	r2, sl
 800d5ac:	4638      	mov	r0, r7
 800d5ae:	f001 fa2f 	bl	800ea10 <strncmp>
 800d5b2:	4605      	mov	r5, r0
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	d168      	bne.n	800d68a <__gethex+0x136>
 800d5b8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d5bc:	eb07 060a 	add.w	r6, r7, sl
 800d5c0:	f7ff ffb2 	bl	800d528 <__hexdig_fun>
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	d062      	beq.n	800d68e <__gethex+0x13a>
 800d5c8:	4633      	mov	r3, r6
 800d5ca:	7818      	ldrb	r0, [r3, #0]
 800d5cc:	2830      	cmp	r0, #48	; 0x30
 800d5ce:	461f      	mov	r7, r3
 800d5d0:	f103 0301 	add.w	r3, r3, #1
 800d5d4:	d0f9      	beq.n	800d5ca <__gethex+0x76>
 800d5d6:	f7ff ffa7 	bl	800d528 <__hexdig_fun>
 800d5da:	2301      	movs	r3, #1
 800d5dc:	fab0 f480 	clz	r4, r0
 800d5e0:	0964      	lsrs	r4, r4, #5
 800d5e2:	4635      	mov	r5, r6
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	463a      	mov	r2, r7
 800d5e8:	4616      	mov	r6, r2
 800d5ea:	3201      	adds	r2, #1
 800d5ec:	7830      	ldrb	r0, [r6, #0]
 800d5ee:	f7ff ff9b 	bl	800d528 <__hexdig_fun>
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	d1f8      	bne.n	800d5e8 <__gethex+0x94>
 800d5f6:	9901      	ldr	r1, [sp, #4]
 800d5f8:	4652      	mov	r2, sl
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	f001 fa08 	bl	800ea10 <strncmp>
 800d600:	b980      	cbnz	r0, 800d624 <__gethex+0xd0>
 800d602:	b94d      	cbnz	r5, 800d618 <__gethex+0xc4>
 800d604:	eb06 050a 	add.w	r5, r6, sl
 800d608:	462a      	mov	r2, r5
 800d60a:	4616      	mov	r6, r2
 800d60c:	3201      	adds	r2, #1
 800d60e:	7830      	ldrb	r0, [r6, #0]
 800d610:	f7ff ff8a 	bl	800d528 <__hexdig_fun>
 800d614:	2800      	cmp	r0, #0
 800d616:	d1f8      	bne.n	800d60a <__gethex+0xb6>
 800d618:	1bad      	subs	r5, r5, r6
 800d61a:	00ad      	lsls	r5, r5, #2
 800d61c:	e004      	b.n	800d628 <__gethex+0xd4>
 800d61e:	2400      	movs	r4, #0
 800d620:	4625      	mov	r5, r4
 800d622:	e7e0      	b.n	800d5e6 <__gethex+0x92>
 800d624:	2d00      	cmp	r5, #0
 800d626:	d1f7      	bne.n	800d618 <__gethex+0xc4>
 800d628:	7833      	ldrb	r3, [r6, #0]
 800d62a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d62e:	2b50      	cmp	r3, #80	; 0x50
 800d630:	d13b      	bne.n	800d6aa <__gethex+0x156>
 800d632:	7873      	ldrb	r3, [r6, #1]
 800d634:	2b2b      	cmp	r3, #43	; 0x2b
 800d636:	d02c      	beq.n	800d692 <__gethex+0x13e>
 800d638:	2b2d      	cmp	r3, #45	; 0x2d
 800d63a:	d02e      	beq.n	800d69a <__gethex+0x146>
 800d63c:	1c71      	adds	r1, r6, #1
 800d63e:	f04f 0900 	mov.w	r9, #0
 800d642:	7808      	ldrb	r0, [r1, #0]
 800d644:	f7ff ff70 	bl	800d528 <__hexdig_fun>
 800d648:	1e43      	subs	r3, r0, #1
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	2b18      	cmp	r3, #24
 800d64e:	d82c      	bhi.n	800d6aa <__gethex+0x156>
 800d650:	f1a0 0210 	sub.w	r2, r0, #16
 800d654:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d658:	f7ff ff66 	bl	800d528 <__hexdig_fun>
 800d65c:	1e43      	subs	r3, r0, #1
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	2b18      	cmp	r3, #24
 800d662:	d91d      	bls.n	800d6a0 <__gethex+0x14c>
 800d664:	f1b9 0f00 	cmp.w	r9, #0
 800d668:	d000      	beq.n	800d66c <__gethex+0x118>
 800d66a:	4252      	negs	r2, r2
 800d66c:	4415      	add	r5, r2
 800d66e:	f8cb 1000 	str.w	r1, [fp]
 800d672:	b1e4      	cbz	r4, 800d6ae <__gethex+0x15a>
 800d674:	9b00      	ldr	r3, [sp, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	bf14      	ite	ne
 800d67a:	2700      	movne	r7, #0
 800d67c:	2706      	moveq	r7, #6
 800d67e:	4638      	mov	r0, r7
 800d680:	b009      	add	sp, #36	; 0x24
 800d682:	ecbd 8b02 	vpop	{d8}
 800d686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68a:	463e      	mov	r6, r7
 800d68c:	4625      	mov	r5, r4
 800d68e:	2401      	movs	r4, #1
 800d690:	e7ca      	b.n	800d628 <__gethex+0xd4>
 800d692:	f04f 0900 	mov.w	r9, #0
 800d696:	1cb1      	adds	r1, r6, #2
 800d698:	e7d3      	b.n	800d642 <__gethex+0xee>
 800d69a:	f04f 0901 	mov.w	r9, #1
 800d69e:	e7fa      	b.n	800d696 <__gethex+0x142>
 800d6a0:	230a      	movs	r3, #10
 800d6a2:	fb03 0202 	mla	r2, r3, r2, r0
 800d6a6:	3a10      	subs	r2, #16
 800d6a8:	e7d4      	b.n	800d654 <__gethex+0x100>
 800d6aa:	4631      	mov	r1, r6
 800d6ac:	e7df      	b.n	800d66e <__gethex+0x11a>
 800d6ae:	1bf3      	subs	r3, r6, r7
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	4621      	mov	r1, r4
 800d6b4:	2b07      	cmp	r3, #7
 800d6b6:	dc0b      	bgt.n	800d6d0 <__gethex+0x17c>
 800d6b8:	ee18 0a10 	vmov	r0, s16
 800d6bc:	f000 fa7e 	bl	800dbbc <_Balloc>
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	b940      	cbnz	r0, 800d6d6 <__gethex+0x182>
 800d6c4:	4b5d      	ldr	r3, [pc, #372]	; (800d83c <__gethex+0x2e8>)
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	21de      	movs	r1, #222	; 0xde
 800d6ca:	485d      	ldr	r0, [pc, #372]	; (800d840 <__gethex+0x2ec>)
 800d6cc:	f001 f9c2 	bl	800ea54 <__assert_func>
 800d6d0:	3101      	adds	r1, #1
 800d6d2:	105b      	asrs	r3, r3, #1
 800d6d4:	e7ee      	b.n	800d6b4 <__gethex+0x160>
 800d6d6:	f100 0914 	add.w	r9, r0, #20
 800d6da:	f04f 0b00 	mov.w	fp, #0
 800d6de:	f1ca 0301 	rsb	r3, sl, #1
 800d6e2:	f8cd 9008 	str.w	r9, [sp, #8]
 800d6e6:	f8cd b000 	str.w	fp, [sp]
 800d6ea:	9306      	str	r3, [sp, #24]
 800d6ec:	42b7      	cmp	r7, r6
 800d6ee:	d340      	bcc.n	800d772 <__gethex+0x21e>
 800d6f0:	9802      	ldr	r0, [sp, #8]
 800d6f2:	9b00      	ldr	r3, [sp, #0]
 800d6f4:	f840 3b04 	str.w	r3, [r0], #4
 800d6f8:	eba0 0009 	sub.w	r0, r0, r9
 800d6fc:	1080      	asrs	r0, r0, #2
 800d6fe:	0146      	lsls	r6, r0, #5
 800d700:	6120      	str	r0, [r4, #16]
 800d702:	4618      	mov	r0, r3
 800d704:	f000 fb4c 	bl	800dda0 <__hi0bits>
 800d708:	1a30      	subs	r0, r6, r0
 800d70a:	f8d8 6000 	ldr.w	r6, [r8]
 800d70e:	42b0      	cmp	r0, r6
 800d710:	dd63      	ble.n	800d7da <__gethex+0x286>
 800d712:	1b87      	subs	r7, r0, r6
 800d714:	4639      	mov	r1, r7
 800d716:	4620      	mov	r0, r4
 800d718:	f000 feed 	bl	800e4f6 <__any_on>
 800d71c:	4682      	mov	sl, r0
 800d71e:	b1a8      	cbz	r0, 800d74c <__gethex+0x1f8>
 800d720:	1e7b      	subs	r3, r7, #1
 800d722:	1159      	asrs	r1, r3, #5
 800d724:	f003 021f 	and.w	r2, r3, #31
 800d728:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d72c:	f04f 0a01 	mov.w	sl, #1
 800d730:	fa0a f202 	lsl.w	r2, sl, r2
 800d734:	420a      	tst	r2, r1
 800d736:	d009      	beq.n	800d74c <__gethex+0x1f8>
 800d738:	4553      	cmp	r3, sl
 800d73a:	dd05      	ble.n	800d748 <__gethex+0x1f4>
 800d73c:	1eb9      	subs	r1, r7, #2
 800d73e:	4620      	mov	r0, r4
 800d740:	f000 fed9 	bl	800e4f6 <__any_on>
 800d744:	2800      	cmp	r0, #0
 800d746:	d145      	bne.n	800d7d4 <__gethex+0x280>
 800d748:	f04f 0a02 	mov.w	sl, #2
 800d74c:	4639      	mov	r1, r7
 800d74e:	4620      	mov	r0, r4
 800d750:	f7ff fe98 	bl	800d484 <rshift>
 800d754:	443d      	add	r5, r7
 800d756:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d75a:	42ab      	cmp	r3, r5
 800d75c:	da4c      	bge.n	800d7f8 <__gethex+0x2a4>
 800d75e:	ee18 0a10 	vmov	r0, s16
 800d762:	4621      	mov	r1, r4
 800d764:	f000 fa6a 	bl	800dc3c <_Bfree>
 800d768:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d76a:	2300      	movs	r3, #0
 800d76c:	6013      	str	r3, [r2, #0]
 800d76e:	27a3      	movs	r7, #163	; 0xa3
 800d770:	e785      	b.n	800d67e <__gethex+0x12a>
 800d772:	1e73      	subs	r3, r6, #1
 800d774:	9a05      	ldr	r2, [sp, #20]
 800d776:	9303      	str	r3, [sp, #12]
 800d778:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d019      	beq.n	800d7b4 <__gethex+0x260>
 800d780:	f1bb 0f20 	cmp.w	fp, #32
 800d784:	d107      	bne.n	800d796 <__gethex+0x242>
 800d786:	9b02      	ldr	r3, [sp, #8]
 800d788:	9a00      	ldr	r2, [sp, #0]
 800d78a:	f843 2b04 	str.w	r2, [r3], #4
 800d78e:	9302      	str	r3, [sp, #8]
 800d790:	2300      	movs	r3, #0
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	469b      	mov	fp, r3
 800d796:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d79a:	f7ff fec5 	bl	800d528 <__hexdig_fun>
 800d79e:	9b00      	ldr	r3, [sp, #0]
 800d7a0:	f000 000f 	and.w	r0, r0, #15
 800d7a4:	fa00 f00b 	lsl.w	r0, r0, fp
 800d7a8:	4303      	orrs	r3, r0
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	f10b 0b04 	add.w	fp, fp, #4
 800d7b0:	9b03      	ldr	r3, [sp, #12]
 800d7b2:	e00d      	b.n	800d7d0 <__gethex+0x27c>
 800d7b4:	9b03      	ldr	r3, [sp, #12]
 800d7b6:	9a06      	ldr	r2, [sp, #24]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	42bb      	cmp	r3, r7
 800d7bc:	d3e0      	bcc.n	800d780 <__gethex+0x22c>
 800d7be:	4618      	mov	r0, r3
 800d7c0:	9901      	ldr	r1, [sp, #4]
 800d7c2:	9307      	str	r3, [sp, #28]
 800d7c4:	4652      	mov	r2, sl
 800d7c6:	f001 f923 	bl	800ea10 <strncmp>
 800d7ca:	9b07      	ldr	r3, [sp, #28]
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d1d7      	bne.n	800d780 <__gethex+0x22c>
 800d7d0:	461e      	mov	r6, r3
 800d7d2:	e78b      	b.n	800d6ec <__gethex+0x198>
 800d7d4:	f04f 0a03 	mov.w	sl, #3
 800d7d8:	e7b8      	b.n	800d74c <__gethex+0x1f8>
 800d7da:	da0a      	bge.n	800d7f2 <__gethex+0x29e>
 800d7dc:	1a37      	subs	r7, r6, r0
 800d7de:	4621      	mov	r1, r4
 800d7e0:	ee18 0a10 	vmov	r0, s16
 800d7e4:	463a      	mov	r2, r7
 800d7e6:	f000 fc45 	bl	800e074 <__lshift>
 800d7ea:	1bed      	subs	r5, r5, r7
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	f100 0914 	add.w	r9, r0, #20
 800d7f2:	f04f 0a00 	mov.w	sl, #0
 800d7f6:	e7ae      	b.n	800d756 <__gethex+0x202>
 800d7f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d7fc:	42a8      	cmp	r0, r5
 800d7fe:	dd72      	ble.n	800d8e6 <__gethex+0x392>
 800d800:	1b45      	subs	r5, r0, r5
 800d802:	42ae      	cmp	r6, r5
 800d804:	dc36      	bgt.n	800d874 <__gethex+0x320>
 800d806:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	d02a      	beq.n	800d864 <__gethex+0x310>
 800d80e:	2b03      	cmp	r3, #3
 800d810:	d02c      	beq.n	800d86c <__gethex+0x318>
 800d812:	2b01      	cmp	r3, #1
 800d814:	d11c      	bne.n	800d850 <__gethex+0x2fc>
 800d816:	42ae      	cmp	r6, r5
 800d818:	d11a      	bne.n	800d850 <__gethex+0x2fc>
 800d81a:	2e01      	cmp	r6, #1
 800d81c:	d112      	bne.n	800d844 <__gethex+0x2f0>
 800d81e:	9a04      	ldr	r2, [sp, #16]
 800d820:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d824:	6013      	str	r3, [r2, #0]
 800d826:	2301      	movs	r3, #1
 800d828:	6123      	str	r3, [r4, #16]
 800d82a:	f8c9 3000 	str.w	r3, [r9]
 800d82e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d830:	2762      	movs	r7, #98	; 0x62
 800d832:	601c      	str	r4, [r3, #0]
 800d834:	e723      	b.n	800d67e <__gethex+0x12a>
 800d836:	bf00      	nop
 800d838:	0800f8e0 	.word	0x0800f8e0
 800d83c:	0800f868 	.word	0x0800f868
 800d840:	0800f879 	.word	0x0800f879
 800d844:	1e71      	subs	r1, r6, #1
 800d846:	4620      	mov	r0, r4
 800d848:	f000 fe55 	bl	800e4f6 <__any_on>
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d1e6      	bne.n	800d81e <__gethex+0x2ca>
 800d850:	ee18 0a10 	vmov	r0, s16
 800d854:	4621      	mov	r1, r4
 800d856:	f000 f9f1 	bl	800dc3c <_Bfree>
 800d85a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d85c:	2300      	movs	r3, #0
 800d85e:	6013      	str	r3, [r2, #0]
 800d860:	2750      	movs	r7, #80	; 0x50
 800d862:	e70c      	b.n	800d67e <__gethex+0x12a>
 800d864:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1f2      	bne.n	800d850 <__gethex+0x2fc>
 800d86a:	e7d8      	b.n	800d81e <__gethex+0x2ca>
 800d86c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1d5      	bne.n	800d81e <__gethex+0x2ca>
 800d872:	e7ed      	b.n	800d850 <__gethex+0x2fc>
 800d874:	1e6f      	subs	r7, r5, #1
 800d876:	f1ba 0f00 	cmp.w	sl, #0
 800d87a:	d131      	bne.n	800d8e0 <__gethex+0x38c>
 800d87c:	b127      	cbz	r7, 800d888 <__gethex+0x334>
 800d87e:	4639      	mov	r1, r7
 800d880:	4620      	mov	r0, r4
 800d882:	f000 fe38 	bl	800e4f6 <__any_on>
 800d886:	4682      	mov	sl, r0
 800d888:	117b      	asrs	r3, r7, #5
 800d88a:	2101      	movs	r1, #1
 800d88c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d890:	f007 071f 	and.w	r7, r7, #31
 800d894:	fa01 f707 	lsl.w	r7, r1, r7
 800d898:	421f      	tst	r7, r3
 800d89a:	4629      	mov	r1, r5
 800d89c:	4620      	mov	r0, r4
 800d89e:	bf18      	it	ne
 800d8a0:	f04a 0a02 	orrne.w	sl, sl, #2
 800d8a4:	1b76      	subs	r6, r6, r5
 800d8a6:	f7ff fded 	bl	800d484 <rshift>
 800d8aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d8ae:	2702      	movs	r7, #2
 800d8b0:	f1ba 0f00 	cmp.w	sl, #0
 800d8b4:	d048      	beq.n	800d948 <__gethex+0x3f4>
 800d8b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d8ba:	2b02      	cmp	r3, #2
 800d8bc:	d015      	beq.n	800d8ea <__gethex+0x396>
 800d8be:	2b03      	cmp	r3, #3
 800d8c0:	d017      	beq.n	800d8f2 <__gethex+0x39e>
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d109      	bne.n	800d8da <__gethex+0x386>
 800d8c6:	f01a 0f02 	tst.w	sl, #2
 800d8ca:	d006      	beq.n	800d8da <__gethex+0x386>
 800d8cc:	f8d9 0000 	ldr.w	r0, [r9]
 800d8d0:	ea4a 0a00 	orr.w	sl, sl, r0
 800d8d4:	f01a 0f01 	tst.w	sl, #1
 800d8d8:	d10e      	bne.n	800d8f8 <__gethex+0x3a4>
 800d8da:	f047 0710 	orr.w	r7, r7, #16
 800d8de:	e033      	b.n	800d948 <__gethex+0x3f4>
 800d8e0:	f04f 0a01 	mov.w	sl, #1
 800d8e4:	e7d0      	b.n	800d888 <__gethex+0x334>
 800d8e6:	2701      	movs	r7, #1
 800d8e8:	e7e2      	b.n	800d8b0 <__gethex+0x35c>
 800d8ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8ec:	f1c3 0301 	rsb	r3, r3, #1
 800d8f0:	9315      	str	r3, [sp, #84]	; 0x54
 800d8f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d0f0      	beq.n	800d8da <__gethex+0x386>
 800d8f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d8fc:	f104 0314 	add.w	r3, r4, #20
 800d900:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d904:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d908:	f04f 0c00 	mov.w	ip, #0
 800d90c:	4618      	mov	r0, r3
 800d90e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d912:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d916:	d01c      	beq.n	800d952 <__gethex+0x3fe>
 800d918:	3201      	adds	r2, #1
 800d91a:	6002      	str	r2, [r0, #0]
 800d91c:	2f02      	cmp	r7, #2
 800d91e:	f104 0314 	add.w	r3, r4, #20
 800d922:	d13f      	bne.n	800d9a4 <__gethex+0x450>
 800d924:	f8d8 2000 	ldr.w	r2, [r8]
 800d928:	3a01      	subs	r2, #1
 800d92a:	42b2      	cmp	r2, r6
 800d92c:	d10a      	bne.n	800d944 <__gethex+0x3f0>
 800d92e:	1171      	asrs	r1, r6, #5
 800d930:	2201      	movs	r2, #1
 800d932:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d936:	f006 061f 	and.w	r6, r6, #31
 800d93a:	fa02 f606 	lsl.w	r6, r2, r6
 800d93e:	421e      	tst	r6, r3
 800d940:	bf18      	it	ne
 800d942:	4617      	movne	r7, r2
 800d944:	f047 0720 	orr.w	r7, r7, #32
 800d948:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d94a:	601c      	str	r4, [r3, #0]
 800d94c:	9b04      	ldr	r3, [sp, #16]
 800d94e:	601d      	str	r5, [r3, #0]
 800d950:	e695      	b.n	800d67e <__gethex+0x12a>
 800d952:	4299      	cmp	r1, r3
 800d954:	f843 cc04 	str.w	ip, [r3, #-4]
 800d958:	d8d8      	bhi.n	800d90c <__gethex+0x3b8>
 800d95a:	68a3      	ldr	r3, [r4, #8]
 800d95c:	459b      	cmp	fp, r3
 800d95e:	db19      	blt.n	800d994 <__gethex+0x440>
 800d960:	6861      	ldr	r1, [r4, #4]
 800d962:	ee18 0a10 	vmov	r0, s16
 800d966:	3101      	adds	r1, #1
 800d968:	f000 f928 	bl	800dbbc <_Balloc>
 800d96c:	4681      	mov	r9, r0
 800d96e:	b918      	cbnz	r0, 800d978 <__gethex+0x424>
 800d970:	4b1a      	ldr	r3, [pc, #104]	; (800d9dc <__gethex+0x488>)
 800d972:	4602      	mov	r2, r0
 800d974:	2184      	movs	r1, #132	; 0x84
 800d976:	e6a8      	b.n	800d6ca <__gethex+0x176>
 800d978:	6922      	ldr	r2, [r4, #16]
 800d97a:	3202      	adds	r2, #2
 800d97c:	f104 010c 	add.w	r1, r4, #12
 800d980:	0092      	lsls	r2, r2, #2
 800d982:	300c      	adds	r0, #12
 800d984:	f000 f90c 	bl	800dba0 <memcpy>
 800d988:	4621      	mov	r1, r4
 800d98a:	ee18 0a10 	vmov	r0, s16
 800d98e:	f000 f955 	bl	800dc3c <_Bfree>
 800d992:	464c      	mov	r4, r9
 800d994:	6923      	ldr	r3, [r4, #16]
 800d996:	1c5a      	adds	r2, r3, #1
 800d998:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d99c:	6122      	str	r2, [r4, #16]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	615a      	str	r2, [r3, #20]
 800d9a2:	e7bb      	b.n	800d91c <__gethex+0x3c8>
 800d9a4:	6922      	ldr	r2, [r4, #16]
 800d9a6:	455a      	cmp	r2, fp
 800d9a8:	dd0b      	ble.n	800d9c2 <__gethex+0x46e>
 800d9aa:	2101      	movs	r1, #1
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	f7ff fd69 	bl	800d484 <rshift>
 800d9b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d9b6:	3501      	adds	r5, #1
 800d9b8:	42ab      	cmp	r3, r5
 800d9ba:	f6ff aed0 	blt.w	800d75e <__gethex+0x20a>
 800d9be:	2701      	movs	r7, #1
 800d9c0:	e7c0      	b.n	800d944 <__gethex+0x3f0>
 800d9c2:	f016 061f 	ands.w	r6, r6, #31
 800d9c6:	d0fa      	beq.n	800d9be <__gethex+0x46a>
 800d9c8:	4453      	add	r3, sl
 800d9ca:	f1c6 0620 	rsb	r6, r6, #32
 800d9ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d9d2:	f000 f9e5 	bl	800dda0 <__hi0bits>
 800d9d6:	42b0      	cmp	r0, r6
 800d9d8:	dbe7      	blt.n	800d9aa <__gethex+0x456>
 800d9da:	e7f0      	b.n	800d9be <__gethex+0x46a>
 800d9dc:	0800f868 	.word	0x0800f868

0800d9e0 <L_shift>:
 800d9e0:	f1c2 0208 	rsb	r2, r2, #8
 800d9e4:	0092      	lsls	r2, r2, #2
 800d9e6:	b570      	push	{r4, r5, r6, lr}
 800d9e8:	f1c2 0620 	rsb	r6, r2, #32
 800d9ec:	6843      	ldr	r3, [r0, #4]
 800d9ee:	6804      	ldr	r4, [r0, #0]
 800d9f0:	fa03 f506 	lsl.w	r5, r3, r6
 800d9f4:	432c      	orrs	r4, r5
 800d9f6:	40d3      	lsrs	r3, r2
 800d9f8:	6004      	str	r4, [r0, #0]
 800d9fa:	f840 3f04 	str.w	r3, [r0, #4]!
 800d9fe:	4288      	cmp	r0, r1
 800da00:	d3f4      	bcc.n	800d9ec <L_shift+0xc>
 800da02:	bd70      	pop	{r4, r5, r6, pc}

0800da04 <__match>:
 800da04:	b530      	push	{r4, r5, lr}
 800da06:	6803      	ldr	r3, [r0, #0]
 800da08:	3301      	adds	r3, #1
 800da0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da0e:	b914      	cbnz	r4, 800da16 <__match+0x12>
 800da10:	6003      	str	r3, [r0, #0]
 800da12:	2001      	movs	r0, #1
 800da14:	bd30      	pop	{r4, r5, pc}
 800da16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800da1e:	2d19      	cmp	r5, #25
 800da20:	bf98      	it	ls
 800da22:	3220      	addls	r2, #32
 800da24:	42a2      	cmp	r2, r4
 800da26:	d0f0      	beq.n	800da0a <__match+0x6>
 800da28:	2000      	movs	r0, #0
 800da2a:	e7f3      	b.n	800da14 <__match+0x10>

0800da2c <__hexnan>:
 800da2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da30:	680b      	ldr	r3, [r1, #0]
 800da32:	115e      	asrs	r6, r3, #5
 800da34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800da38:	f013 031f 	ands.w	r3, r3, #31
 800da3c:	b087      	sub	sp, #28
 800da3e:	bf18      	it	ne
 800da40:	3604      	addne	r6, #4
 800da42:	2500      	movs	r5, #0
 800da44:	1f37      	subs	r7, r6, #4
 800da46:	4690      	mov	r8, r2
 800da48:	6802      	ldr	r2, [r0, #0]
 800da4a:	9301      	str	r3, [sp, #4]
 800da4c:	4682      	mov	sl, r0
 800da4e:	f846 5c04 	str.w	r5, [r6, #-4]
 800da52:	46b9      	mov	r9, r7
 800da54:	463c      	mov	r4, r7
 800da56:	9502      	str	r5, [sp, #8]
 800da58:	46ab      	mov	fp, r5
 800da5a:	7851      	ldrb	r1, [r2, #1]
 800da5c:	1c53      	adds	r3, r2, #1
 800da5e:	9303      	str	r3, [sp, #12]
 800da60:	b341      	cbz	r1, 800dab4 <__hexnan+0x88>
 800da62:	4608      	mov	r0, r1
 800da64:	9205      	str	r2, [sp, #20]
 800da66:	9104      	str	r1, [sp, #16]
 800da68:	f7ff fd5e 	bl	800d528 <__hexdig_fun>
 800da6c:	2800      	cmp	r0, #0
 800da6e:	d14f      	bne.n	800db10 <__hexnan+0xe4>
 800da70:	9904      	ldr	r1, [sp, #16]
 800da72:	9a05      	ldr	r2, [sp, #20]
 800da74:	2920      	cmp	r1, #32
 800da76:	d818      	bhi.n	800daaa <__hexnan+0x7e>
 800da78:	9b02      	ldr	r3, [sp, #8]
 800da7a:	459b      	cmp	fp, r3
 800da7c:	dd13      	ble.n	800daa6 <__hexnan+0x7a>
 800da7e:	454c      	cmp	r4, r9
 800da80:	d206      	bcs.n	800da90 <__hexnan+0x64>
 800da82:	2d07      	cmp	r5, #7
 800da84:	dc04      	bgt.n	800da90 <__hexnan+0x64>
 800da86:	462a      	mov	r2, r5
 800da88:	4649      	mov	r1, r9
 800da8a:	4620      	mov	r0, r4
 800da8c:	f7ff ffa8 	bl	800d9e0 <L_shift>
 800da90:	4544      	cmp	r4, r8
 800da92:	d950      	bls.n	800db36 <__hexnan+0x10a>
 800da94:	2300      	movs	r3, #0
 800da96:	f1a4 0904 	sub.w	r9, r4, #4
 800da9a:	f844 3c04 	str.w	r3, [r4, #-4]
 800da9e:	f8cd b008 	str.w	fp, [sp, #8]
 800daa2:	464c      	mov	r4, r9
 800daa4:	461d      	mov	r5, r3
 800daa6:	9a03      	ldr	r2, [sp, #12]
 800daa8:	e7d7      	b.n	800da5a <__hexnan+0x2e>
 800daaa:	2929      	cmp	r1, #41	; 0x29
 800daac:	d156      	bne.n	800db5c <__hexnan+0x130>
 800daae:	3202      	adds	r2, #2
 800dab0:	f8ca 2000 	str.w	r2, [sl]
 800dab4:	f1bb 0f00 	cmp.w	fp, #0
 800dab8:	d050      	beq.n	800db5c <__hexnan+0x130>
 800daba:	454c      	cmp	r4, r9
 800dabc:	d206      	bcs.n	800dacc <__hexnan+0xa0>
 800dabe:	2d07      	cmp	r5, #7
 800dac0:	dc04      	bgt.n	800dacc <__hexnan+0xa0>
 800dac2:	462a      	mov	r2, r5
 800dac4:	4649      	mov	r1, r9
 800dac6:	4620      	mov	r0, r4
 800dac8:	f7ff ff8a 	bl	800d9e0 <L_shift>
 800dacc:	4544      	cmp	r4, r8
 800dace:	d934      	bls.n	800db3a <__hexnan+0x10e>
 800dad0:	f1a8 0204 	sub.w	r2, r8, #4
 800dad4:	4623      	mov	r3, r4
 800dad6:	f853 1b04 	ldr.w	r1, [r3], #4
 800dada:	f842 1f04 	str.w	r1, [r2, #4]!
 800dade:	429f      	cmp	r7, r3
 800dae0:	d2f9      	bcs.n	800dad6 <__hexnan+0xaa>
 800dae2:	1b3b      	subs	r3, r7, r4
 800dae4:	f023 0303 	bic.w	r3, r3, #3
 800dae8:	3304      	adds	r3, #4
 800daea:	3401      	adds	r4, #1
 800daec:	3e03      	subs	r6, #3
 800daee:	42b4      	cmp	r4, r6
 800daf0:	bf88      	it	hi
 800daf2:	2304      	movhi	r3, #4
 800daf4:	4443      	add	r3, r8
 800daf6:	2200      	movs	r2, #0
 800daf8:	f843 2b04 	str.w	r2, [r3], #4
 800dafc:	429f      	cmp	r7, r3
 800dafe:	d2fb      	bcs.n	800daf8 <__hexnan+0xcc>
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	b91b      	cbnz	r3, 800db0c <__hexnan+0xe0>
 800db04:	4547      	cmp	r7, r8
 800db06:	d127      	bne.n	800db58 <__hexnan+0x12c>
 800db08:	2301      	movs	r3, #1
 800db0a:	603b      	str	r3, [r7, #0]
 800db0c:	2005      	movs	r0, #5
 800db0e:	e026      	b.n	800db5e <__hexnan+0x132>
 800db10:	3501      	adds	r5, #1
 800db12:	2d08      	cmp	r5, #8
 800db14:	f10b 0b01 	add.w	fp, fp, #1
 800db18:	dd06      	ble.n	800db28 <__hexnan+0xfc>
 800db1a:	4544      	cmp	r4, r8
 800db1c:	d9c3      	bls.n	800daa6 <__hexnan+0x7a>
 800db1e:	2300      	movs	r3, #0
 800db20:	f844 3c04 	str.w	r3, [r4, #-4]
 800db24:	2501      	movs	r5, #1
 800db26:	3c04      	subs	r4, #4
 800db28:	6822      	ldr	r2, [r4, #0]
 800db2a:	f000 000f 	and.w	r0, r0, #15
 800db2e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800db32:	6022      	str	r2, [r4, #0]
 800db34:	e7b7      	b.n	800daa6 <__hexnan+0x7a>
 800db36:	2508      	movs	r5, #8
 800db38:	e7b5      	b.n	800daa6 <__hexnan+0x7a>
 800db3a:	9b01      	ldr	r3, [sp, #4]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d0df      	beq.n	800db00 <__hexnan+0xd4>
 800db40:	f04f 32ff 	mov.w	r2, #4294967295
 800db44:	f1c3 0320 	rsb	r3, r3, #32
 800db48:	fa22 f303 	lsr.w	r3, r2, r3
 800db4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800db50:	401a      	ands	r2, r3
 800db52:	f846 2c04 	str.w	r2, [r6, #-4]
 800db56:	e7d3      	b.n	800db00 <__hexnan+0xd4>
 800db58:	3f04      	subs	r7, #4
 800db5a:	e7d1      	b.n	800db00 <__hexnan+0xd4>
 800db5c:	2004      	movs	r0, #4
 800db5e:	b007      	add	sp, #28
 800db60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db64 <_localeconv_r>:
 800db64:	4800      	ldr	r0, [pc, #0]	; (800db68 <_localeconv_r+0x4>)
 800db66:	4770      	bx	lr
 800db68:	24000168 	.word	0x24000168

0800db6c <malloc>:
 800db6c:	4b02      	ldr	r3, [pc, #8]	; (800db78 <malloc+0xc>)
 800db6e:	4601      	mov	r1, r0
 800db70:	6818      	ldr	r0, [r3, #0]
 800db72:	f000 bd63 	b.w	800e63c <_malloc_r>
 800db76:	bf00      	nop
 800db78:	24000010 	.word	0x24000010

0800db7c <__ascii_mbtowc>:
 800db7c:	b082      	sub	sp, #8
 800db7e:	b901      	cbnz	r1, 800db82 <__ascii_mbtowc+0x6>
 800db80:	a901      	add	r1, sp, #4
 800db82:	b142      	cbz	r2, 800db96 <__ascii_mbtowc+0x1a>
 800db84:	b14b      	cbz	r3, 800db9a <__ascii_mbtowc+0x1e>
 800db86:	7813      	ldrb	r3, [r2, #0]
 800db88:	600b      	str	r3, [r1, #0]
 800db8a:	7812      	ldrb	r2, [r2, #0]
 800db8c:	1e10      	subs	r0, r2, #0
 800db8e:	bf18      	it	ne
 800db90:	2001      	movne	r0, #1
 800db92:	b002      	add	sp, #8
 800db94:	4770      	bx	lr
 800db96:	4610      	mov	r0, r2
 800db98:	e7fb      	b.n	800db92 <__ascii_mbtowc+0x16>
 800db9a:	f06f 0001 	mvn.w	r0, #1
 800db9e:	e7f8      	b.n	800db92 <__ascii_mbtowc+0x16>

0800dba0 <memcpy>:
 800dba0:	440a      	add	r2, r1
 800dba2:	4291      	cmp	r1, r2
 800dba4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dba8:	d100      	bne.n	800dbac <memcpy+0xc>
 800dbaa:	4770      	bx	lr
 800dbac:	b510      	push	{r4, lr}
 800dbae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbb6:	4291      	cmp	r1, r2
 800dbb8:	d1f9      	bne.n	800dbae <memcpy+0xe>
 800dbba:	bd10      	pop	{r4, pc}

0800dbbc <_Balloc>:
 800dbbc:	b570      	push	{r4, r5, r6, lr}
 800dbbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dbc0:	4604      	mov	r4, r0
 800dbc2:	460d      	mov	r5, r1
 800dbc4:	b976      	cbnz	r6, 800dbe4 <_Balloc+0x28>
 800dbc6:	2010      	movs	r0, #16
 800dbc8:	f7ff ffd0 	bl	800db6c <malloc>
 800dbcc:	4602      	mov	r2, r0
 800dbce:	6260      	str	r0, [r4, #36]	; 0x24
 800dbd0:	b920      	cbnz	r0, 800dbdc <_Balloc+0x20>
 800dbd2:	4b18      	ldr	r3, [pc, #96]	; (800dc34 <_Balloc+0x78>)
 800dbd4:	4818      	ldr	r0, [pc, #96]	; (800dc38 <_Balloc+0x7c>)
 800dbd6:	2166      	movs	r1, #102	; 0x66
 800dbd8:	f000 ff3c 	bl	800ea54 <__assert_func>
 800dbdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbe0:	6006      	str	r6, [r0, #0]
 800dbe2:	60c6      	str	r6, [r0, #12]
 800dbe4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dbe6:	68f3      	ldr	r3, [r6, #12]
 800dbe8:	b183      	cbz	r3, 800dc0c <_Balloc+0x50>
 800dbea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dbf2:	b9b8      	cbnz	r0, 800dc24 <_Balloc+0x68>
 800dbf4:	2101      	movs	r1, #1
 800dbf6:	fa01 f605 	lsl.w	r6, r1, r5
 800dbfa:	1d72      	adds	r2, r6, #5
 800dbfc:	0092      	lsls	r2, r2, #2
 800dbfe:	4620      	mov	r0, r4
 800dc00:	f000 fc9a 	bl	800e538 <_calloc_r>
 800dc04:	b160      	cbz	r0, 800dc20 <_Balloc+0x64>
 800dc06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dc0a:	e00e      	b.n	800dc2a <_Balloc+0x6e>
 800dc0c:	2221      	movs	r2, #33	; 0x21
 800dc0e:	2104      	movs	r1, #4
 800dc10:	4620      	mov	r0, r4
 800dc12:	f000 fc91 	bl	800e538 <_calloc_r>
 800dc16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc18:	60f0      	str	r0, [r6, #12]
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d1e4      	bne.n	800dbea <_Balloc+0x2e>
 800dc20:	2000      	movs	r0, #0
 800dc22:	bd70      	pop	{r4, r5, r6, pc}
 800dc24:	6802      	ldr	r2, [r0, #0]
 800dc26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc30:	e7f7      	b.n	800dc22 <_Balloc+0x66>
 800dc32:	bf00      	nop
 800dc34:	0800f7f6 	.word	0x0800f7f6
 800dc38:	0800f8f4 	.word	0x0800f8f4

0800dc3c <_Bfree>:
 800dc3c:	b570      	push	{r4, r5, r6, lr}
 800dc3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dc40:	4605      	mov	r5, r0
 800dc42:	460c      	mov	r4, r1
 800dc44:	b976      	cbnz	r6, 800dc64 <_Bfree+0x28>
 800dc46:	2010      	movs	r0, #16
 800dc48:	f7ff ff90 	bl	800db6c <malloc>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	6268      	str	r0, [r5, #36]	; 0x24
 800dc50:	b920      	cbnz	r0, 800dc5c <_Bfree+0x20>
 800dc52:	4b09      	ldr	r3, [pc, #36]	; (800dc78 <_Bfree+0x3c>)
 800dc54:	4809      	ldr	r0, [pc, #36]	; (800dc7c <_Bfree+0x40>)
 800dc56:	218a      	movs	r1, #138	; 0x8a
 800dc58:	f000 fefc 	bl	800ea54 <__assert_func>
 800dc5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc60:	6006      	str	r6, [r0, #0]
 800dc62:	60c6      	str	r6, [r0, #12]
 800dc64:	b13c      	cbz	r4, 800dc76 <_Bfree+0x3a>
 800dc66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dc68:	6862      	ldr	r2, [r4, #4]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc70:	6021      	str	r1, [r4, #0]
 800dc72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc76:	bd70      	pop	{r4, r5, r6, pc}
 800dc78:	0800f7f6 	.word	0x0800f7f6
 800dc7c:	0800f8f4 	.word	0x0800f8f4

0800dc80 <__multadd>:
 800dc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc84:	690d      	ldr	r5, [r1, #16]
 800dc86:	4607      	mov	r7, r0
 800dc88:	460c      	mov	r4, r1
 800dc8a:	461e      	mov	r6, r3
 800dc8c:	f101 0c14 	add.w	ip, r1, #20
 800dc90:	2000      	movs	r0, #0
 800dc92:	f8dc 3000 	ldr.w	r3, [ip]
 800dc96:	b299      	uxth	r1, r3
 800dc98:	fb02 6101 	mla	r1, r2, r1, r6
 800dc9c:	0c1e      	lsrs	r6, r3, #16
 800dc9e:	0c0b      	lsrs	r3, r1, #16
 800dca0:	fb02 3306 	mla	r3, r2, r6, r3
 800dca4:	b289      	uxth	r1, r1
 800dca6:	3001      	adds	r0, #1
 800dca8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dcac:	4285      	cmp	r5, r0
 800dcae:	f84c 1b04 	str.w	r1, [ip], #4
 800dcb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dcb6:	dcec      	bgt.n	800dc92 <__multadd+0x12>
 800dcb8:	b30e      	cbz	r6, 800dcfe <__multadd+0x7e>
 800dcba:	68a3      	ldr	r3, [r4, #8]
 800dcbc:	42ab      	cmp	r3, r5
 800dcbe:	dc19      	bgt.n	800dcf4 <__multadd+0x74>
 800dcc0:	6861      	ldr	r1, [r4, #4]
 800dcc2:	4638      	mov	r0, r7
 800dcc4:	3101      	adds	r1, #1
 800dcc6:	f7ff ff79 	bl	800dbbc <_Balloc>
 800dcca:	4680      	mov	r8, r0
 800dccc:	b928      	cbnz	r0, 800dcda <__multadd+0x5a>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	4b0c      	ldr	r3, [pc, #48]	; (800dd04 <__multadd+0x84>)
 800dcd2:	480d      	ldr	r0, [pc, #52]	; (800dd08 <__multadd+0x88>)
 800dcd4:	21b5      	movs	r1, #181	; 0xb5
 800dcd6:	f000 febd 	bl	800ea54 <__assert_func>
 800dcda:	6922      	ldr	r2, [r4, #16]
 800dcdc:	3202      	adds	r2, #2
 800dcde:	f104 010c 	add.w	r1, r4, #12
 800dce2:	0092      	lsls	r2, r2, #2
 800dce4:	300c      	adds	r0, #12
 800dce6:	f7ff ff5b 	bl	800dba0 <memcpy>
 800dcea:	4621      	mov	r1, r4
 800dcec:	4638      	mov	r0, r7
 800dcee:	f7ff ffa5 	bl	800dc3c <_Bfree>
 800dcf2:	4644      	mov	r4, r8
 800dcf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dcf8:	3501      	adds	r5, #1
 800dcfa:	615e      	str	r6, [r3, #20]
 800dcfc:	6125      	str	r5, [r4, #16]
 800dcfe:	4620      	mov	r0, r4
 800dd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd04:	0800f868 	.word	0x0800f868
 800dd08:	0800f8f4 	.word	0x0800f8f4

0800dd0c <__s2b>:
 800dd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd10:	460c      	mov	r4, r1
 800dd12:	4615      	mov	r5, r2
 800dd14:	461f      	mov	r7, r3
 800dd16:	2209      	movs	r2, #9
 800dd18:	3308      	adds	r3, #8
 800dd1a:	4606      	mov	r6, r0
 800dd1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd20:	2100      	movs	r1, #0
 800dd22:	2201      	movs	r2, #1
 800dd24:	429a      	cmp	r2, r3
 800dd26:	db09      	blt.n	800dd3c <__s2b+0x30>
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f7ff ff47 	bl	800dbbc <_Balloc>
 800dd2e:	b940      	cbnz	r0, 800dd42 <__s2b+0x36>
 800dd30:	4602      	mov	r2, r0
 800dd32:	4b19      	ldr	r3, [pc, #100]	; (800dd98 <__s2b+0x8c>)
 800dd34:	4819      	ldr	r0, [pc, #100]	; (800dd9c <__s2b+0x90>)
 800dd36:	21ce      	movs	r1, #206	; 0xce
 800dd38:	f000 fe8c 	bl	800ea54 <__assert_func>
 800dd3c:	0052      	lsls	r2, r2, #1
 800dd3e:	3101      	adds	r1, #1
 800dd40:	e7f0      	b.n	800dd24 <__s2b+0x18>
 800dd42:	9b08      	ldr	r3, [sp, #32]
 800dd44:	6143      	str	r3, [r0, #20]
 800dd46:	2d09      	cmp	r5, #9
 800dd48:	f04f 0301 	mov.w	r3, #1
 800dd4c:	6103      	str	r3, [r0, #16]
 800dd4e:	dd16      	ble.n	800dd7e <__s2b+0x72>
 800dd50:	f104 0909 	add.w	r9, r4, #9
 800dd54:	46c8      	mov	r8, r9
 800dd56:	442c      	add	r4, r5
 800dd58:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dd5c:	4601      	mov	r1, r0
 800dd5e:	3b30      	subs	r3, #48	; 0x30
 800dd60:	220a      	movs	r2, #10
 800dd62:	4630      	mov	r0, r6
 800dd64:	f7ff ff8c 	bl	800dc80 <__multadd>
 800dd68:	45a0      	cmp	r8, r4
 800dd6a:	d1f5      	bne.n	800dd58 <__s2b+0x4c>
 800dd6c:	f1a5 0408 	sub.w	r4, r5, #8
 800dd70:	444c      	add	r4, r9
 800dd72:	1b2d      	subs	r5, r5, r4
 800dd74:	1963      	adds	r3, r4, r5
 800dd76:	42bb      	cmp	r3, r7
 800dd78:	db04      	blt.n	800dd84 <__s2b+0x78>
 800dd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd7e:	340a      	adds	r4, #10
 800dd80:	2509      	movs	r5, #9
 800dd82:	e7f6      	b.n	800dd72 <__s2b+0x66>
 800dd84:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd88:	4601      	mov	r1, r0
 800dd8a:	3b30      	subs	r3, #48	; 0x30
 800dd8c:	220a      	movs	r2, #10
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f7ff ff76 	bl	800dc80 <__multadd>
 800dd94:	e7ee      	b.n	800dd74 <__s2b+0x68>
 800dd96:	bf00      	nop
 800dd98:	0800f868 	.word	0x0800f868
 800dd9c:	0800f8f4 	.word	0x0800f8f4

0800dda0 <__hi0bits>:
 800dda0:	0c03      	lsrs	r3, r0, #16
 800dda2:	041b      	lsls	r3, r3, #16
 800dda4:	b9d3      	cbnz	r3, 800dddc <__hi0bits+0x3c>
 800dda6:	0400      	lsls	r0, r0, #16
 800dda8:	2310      	movs	r3, #16
 800ddaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ddae:	bf04      	itt	eq
 800ddb0:	0200      	lsleq	r0, r0, #8
 800ddb2:	3308      	addeq	r3, #8
 800ddb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ddb8:	bf04      	itt	eq
 800ddba:	0100      	lsleq	r0, r0, #4
 800ddbc:	3304      	addeq	r3, #4
 800ddbe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ddc2:	bf04      	itt	eq
 800ddc4:	0080      	lsleq	r0, r0, #2
 800ddc6:	3302      	addeq	r3, #2
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	db05      	blt.n	800ddd8 <__hi0bits+0x38>
 800ddcc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ddd0:	f103 0301 	add.w	r3, r3, #1
 800ddd4:	bf08      	it	eq
 800ddd6:	2320      	moveq	r3, #32
 800ddd8:	4618      	mov	r0, r3
 800ddda:	4770      	bx	lr
 800dddc:	2300      	movs	r3, #0
 800ddde:	e7e4      	b.n	800ddaa <__hi0bits+0xa>

0800dde0 <__lo0bits>:
 800dde0:	6803      	ldr	r3, [r0, #0]
 800dde2:	f013 0207 	ands.w	r2, r3, #7
 800dde6:	4601      	mov	r1, r0
 800dde8:	d00b      	beq.n	800de02 <__lo0bits+0x22>
 800ddea:	07da      	lsls	r2, r3, #31
 800ddec:	d423      	bmi.n	800de36 <__lo0bits+0x56>
 800ddee:	0798      	lsls	r0, r3, #30
 800ddf0:	bf49      	itett	mi
 800ddf2:	085b      	lsrmi	r3, r3, #1
 800ddf4:	089b      	lsrpl	r3, r3, #2
 800ddf6:	2001      	movmi	r0, #1
 800ddf8:	600b      	strmi	r3, [r1, #0]
 800ddfa:	bf5c      	itt	pl
 800ddfc:	600b      	strpl	r3, [r1, #0]
 800ddfe:	2002      	movpl	r0, #2
 800de00:	4770      	bx	lr
 800de02:	b298      	uxth	r0, r3
 800de04:	b9a8      	cbnz	r0, 800de32 <__lo0bits+0x52>
 800de06:	0c1b      	lsrs	r3, r3, #16
 800de08:	2010      	movs	r0, #16
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	b90a      	cbnz	r2, 800de12 <__lo0bits+0x32>
 800de0e:	3008      	adds	r0, #8
 800de10:	0a1b      	lsrs	r3, r3, #8
 800de12:	071a      	lsls	r2, r3, #28
 800de14:	bf04      	itt	eq
 800de16:	091b      	lsreq	r3, r3, #4
 800de18:	3004      	addeq	r0, #4
 800de1a:	079a      	lsls	r2, r3, #30
 800de1c:	bf04      	itt	eq
 800de1e:	089b      	lsreq	r3, r3, #2
 800de20:	3002      	addeq	r0, #2
 800de22:	07da      	lsls	r2, r3, #31
 800de24:	d403      	bmi.n	800de2e <__lo0bits+0x4e>
 800de26:	085b      	lsrs	r3, r3, #1
 800de28:	f100 0001 	add.w	r0, r0, #1
 800de2c:	d005      	beq.n	800de3a <__lo0bits+0x5a>
 800de2e:	600b      	str	r3, [r1, #0]
 800de30:	4770      	bx	lr
 800de32:	4610      	mov	r0, r2
 800de34:	e7e9      	b.n	800de0a <__lo0bits+0x2a>
 800de36:	2000      	movs	r0, #0
 800de38:	4770      	bx	lr
 800de3a:	2020      	movs	r0, #32
 800de3c:	4770      	bx	lr
	...

0800de40 <__i2b>:
 800de40:	b510      	push	{r4, lr}
 800de42:	460c      	mov	r4, r1
 800de44:	2101      	movs	r1, #1
 800de46:	f7ff feb9 	bl	800dbbc <_Balloc>
 800de4a:	4602      	mov	r2, r0
 800de4c:	b928      	cbnz	r0, 800de5a <__i2b+0x1a>
 800de4e:	4b05      	ldr	r3, [pc, #20]	; (800de64 <__i2b+0x24>)
 800de50:	4805      	ldr	r0, [pc, #20]	; (800de68 <__i2b+0x28>)
 800de52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800de56:	f000 fdfd 	bl	800ea54 <__assert_func>
 800de5a:	2301      	movs	r3, #1
 800de5c:	6144      	str	r4, [r0, #20]
 800de5e:	6103      	str	r3, [r0, #16]
 800de60:	bd10      	pop	{r4, pc}
 800de62:	bf00      	nop
 800de64:	0800f868 	.word	0x0800f868
 800de68:	0800f8f4 	.word	0x0800f8f4

0800de6c <__multiply>:
 800de6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de70:	4691      	mov	r9, r2
 800de72:	690a      	ldr	r2, [r1, #16]
 800de74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de78:	429a      	cmp	r2, r3
 800de7a:	bfb8      	it	lt
 800de7c:	460b      	movlt	r3, r1
 800de7e:	460c      	mov	r4, r1
 800de80:	bfbc      	itt	lt
 800de82:	464c      	movlt	r4, r9
 800de84:	4699      	movlt	r9, r3
 800de86:	6927      	ldr	r7, [r4, #16]
 800de88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800de8c:	68a3      	ldr	r3, [r4, #8]
 800de8e:	6861      	ldr	r1, [r4, #4]
 800de90:	eb07 060a 	add.w	r6, r7, sl
 800de94:	42b3      	cmp	r3, r6
 800de96:	b085      	sub	sp, #20
 800de98:	bfb8      	it	lt
 800de9a:	3101      	addlt	r1, #1
 800de9c:	f7ff fe8e 	bl	800dbbc <_Balloc>
 800dea0:	b930      	cbnz	r0, 800deb0 <__multiply+0x44>
 800dea2:	4602      	mov	r2, r0
 800dea4:	4b44      	ldr	r3, [pc, #272]	; (800dfb8 <__multiply+0x14c>)
 800dea6:	4845      	ldr	r0, [pc, #276]	; (800dfbc <__multiply+0x150>)
 800dea8:	f240 115d 	movw	r1, #349	; 0x15d
 800deac:	f000 fdd2 	bl	800ea54 <__assert_func>
 800deb0:	f100 0514 	add.w	r5, r0, #20
 800deb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800deb8:	462b      	mov	r3, r5
 800deba:	2200      	movs	r2, #0
 800debc:	4543      	cmp	r3, r8
 800debe:	d321      	bcc.n	800df04 <__multiply+0x98>
 800dec0:	f104 0314 	add.w	r3, r4, #20
 800dec4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dec8:	f109 0314 	add.w	r3, r9, #20
 800decc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ded0:	9202      	str	r2, [sp, #8]
 800ded2:	1b3a      	subs	r2, r7, r4
 800ded4:	3a15      	subs	r2, #21
 800ded6:	f022 0203 	bic.w	r2, r2, #3
 800deda:	3204      	adds	r2, #4
 800dedc:	f104 0115 	add.w	r1, r4, #21
 800dee0:	428f      	cmp	r7, r1
 800dee2:	bf38      	it	cc
 800dee4:	2204      	movcc	r2, #4
 800dee6:	9201      	str	r2, [sp, #4]
 800dee8:	9a02      	ldr	r2, [sp, #8]
 800deea:	9303      	str	r3, [sp, #12]
 800deec:	429a      	cmp	r2, r3
 800deee:	d80c      	bhi.n	800df0a <__multiply+0x9e>
 800def0:	2e00      	cmp	r6, #0
 800def2:	dd03      	ble.n	800defc <__multiply+0x90>
 800def4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800def8:	2b00      	cmp	r3, #0
 800defa:	d05a      	beq.n	800dfb2 <__multiply+0x146>
 800defc:	6106      	str	r6, [r0, #16]
 800defe:	b005      	add	sp, #20
 800df00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df04:	f843 2b04 	str.w	r2, [r3], #4
 800df08:	e7d8      	b.n	800debc <__multiply+0x50>
 800df0a:	f8b3 a000 	ldrh.w	sl, [r3]
 800df0e:	f1ba 0f00 	cmp.w	sl, #0
 800df12:	d024      	beq.n	800df5e <__multiply+0xf2>
 800df14:	f104 0e14 	add.w	lr, r4, #20
 800df18:	46a9      	mov	r9, r5
 800df1a:	f04f 0c00 	mov.w	ip, #0
 800df1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800df22:	f8d9 1000 	ldr.w	r1, [r9]
 800df26:	fa1f fb82 	uxth.w	fp, r2
 800df2a:	b289      	uxth	r1, r1
 800df2c:	fb0a 110b 	mla	r1, sl, fp, r1
 800df30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800df34:	f8d9 2000 	ldr.w	r2, [r9]
 800df38:	4461      	add	r1, ip
 800df3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df3e:	fb0a c20b 	mla	r2, sl, fp, ip
 800df42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df46:	b289      	uxth	r1, r1
 800df48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df4c:	4577      	cmp	r7, lr
 800df4e:	f849 1b04 	str.w	r1, [r9], #4
 800df52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df56:	d8e2      	bhi.n	800df1e <__multiply+0xb2>
 800df58:	9a01      	ldr	r2, [sp, #4]
 800df5a:	f845 c002 	str.w	ip, [r5, r2]
 800df5e:	9a03      	ldr	r2, [sp, #12]
 800df60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800df64:	3304      	adds	r3, #4
 800df66:	f1b9 0f00 	cmp.w	r9, #0
 800df6a:	d020      	beq.n	800dfae <__multiply+0x142>
 800df6c:	6829      	ldr	r1, [r5, #0]
 800df6e:	f104 0c14 	add.w	ip, r4, #20
 800df72:	46ae      	mov	lr, r5
 800df74:	f04f 0a00 	mov.w	sl, #0
 800df78:	f8bc b000 	ldrh.w	fp, [ip]
 800df7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800df80:	fb09 220b 	mla	r2, r9, fp, r2
 800df84:	4492      	add	sl, r2
 800df86:	b289      	uxth	r1, r1
 800df88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800df8c:	f84e 1b04 	str.w	r1, [lr], #4
 800df90:	f85c 2b04 	ldr.w	r2, [ip], #4
 800df94:	f8be 1000 	ldrh.w	r1, [lr]
 800df98:	0c12      	lsrs	r2, r2, #16
 800df9a:	fb09 1102 	mla	r1, r9, r2, r1
 800df9e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dfa2:	4567      	cmp	r7, ip
 800dfa4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dfa8:	d8e6      	bhi.n	800df78 <__multiply+0x10c>
 800dfaa:	9a01      	ldr	r2, [sp, #4]
 800dfac:	50a9      	str	r1, [r5, r2]
 800dfae:	3504      	adds	r5, #4
 800dfb0:	e79a      	b.n	800dee8 <__multiply+0x7c>
 800dfb2:	3e01      	subs	r6, #1
 800dfb4:	e79c      	b.n	800def0 <__multiply+0x84>
 800dfb6:	bf00      	nop
 800dfb8:	0800f868 	.word	0x0800f868
 800dfbc:	0800f8f4 	.word	0x0800f8f4

0800dfc0 <__pow5mult>:
 800dfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfc4:	4615      	mov	r5, r2
 800dfc6:	f012 0203 	ands.w	r2, r2, #3
 800dfca:	4606      	mov	r6, r0
 800dfcc:	460f      	mov	r7, r1
 800dfce:	d007      	beq.n	800dfe0 <__pow5mult+0x20>
 800dfd0:	4c25      	ldr	r4, [pc, #148]	; (800e068 <__pow5mult+0xa8>)
 800dfd2:	3a01      	subs	r2, #1
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dfda:	f7ff fe51 	bl	800dc80 <__multadd>
 800dfde:	4607      	mov	r7, r0
 800dfe0:	10ad      	asrs	r5, r5, #2
 800dfe2:	d03d      	beq.n	800e060 <__pow5mult+0xa0>
 800dfe4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dfe6:	b97c      	cbnz	r4, 800e008 <__pow5mult+0x48>
 800dfe8:	2010      	movs	r0, #16
 800dfea:	f7ff fdbf 	bl	800db6c <malloc>
 800dfee:	4602      	mov	r2, r0
 800dff0:	6270      	str	r0, [r6, #36]	; 0x24
 800dff2:	b928      	cbnz	r0, 800e000 <__pow5mult+0x40>
 800dff4:	4b1d      	ldr	r3, [pc, #116]	; (800e06c <__pow5mult+0xac>)
 800dff6:	481e      	ldr	r0, [pc, #120]	; (800e070 <__pow5mult+0xb0>)
 800dff8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dffc:	f000 fd2a 	bl	800ea54 <__assert_func>
 800e000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e004:	6004      	str	r4, [r0, #0]
 800e006:	60c4      	str	r4, [r0, #12]
 800e008:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e00c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e010:	b94c      	cbnz	r4, 800e026 <__pow5mult+0x66>
 800e012:	f240 2171 	movw	r1, #625	; 0x271
 800e016:	4630      	mov	r0, r6
 800e018:	f7ff ff12 	bl	800de40 <__i2b>
 800e01c:	2300      	movs	r3, #0
 800e01e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e022:	4604      	mov	r4, r0
 800e024:	6003      	str	r3, [r0, #0]
 800e026:	f04f 0900 	mov.w	r9, #0
 800e02a:	07eb      	lsls	r3, r5, #31
 800e02c:	d50a      	bpl.n	800e044 <__pow5mult+0x84>
 800e02e:	4639      	mov	r1, r7
 800e030:	4622      	mov	r2, r4
 800e032:	4630      	mov	r0, r6
 800e034:	f7ff ff1a 	bl	800de6c <__multiply>
 800e038:	4639      	mov	r1, r7
 800e03a:	4680      	mov	r8, r0
 800e03c:	4630      	mov	r0, r6
 800e03e:	f7ff fdfd 	bl	800dc3c <_Bfree>
 800e042:	4647      	mov	r7, r8
 800e044:	106d      	asrs	r5, r5, #1
 800e046:	d00b      	beq.n	800e060 <__pow5mult+0xa0>
 800e048:	6820      	ldr	r0, [r4, #0]
 800e04a:	b938      	cbnz	r0, 800e05c <__pow5mult+0x9c>
 800e04c:	4622      	mov	r2, r4
 800e04e:	4621      	mov	r1, r4
 800e050:	4630      	mov	r0, r6
 800e052:	f7ff ff0b 	bl	800de6c <__multiply>
 800e056:	6020      	str	r0, [r4, #0]
 800e058:	f8c0 9000 	str.w	r9, [r0]
 800e05c:	4604      	mov	r4, r0
 800e05e:	e7e4      	b.n	800e02a <__pow5mult+0x6a>
 800e060:	4638      	mov	r0, r7
 800e062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e066:	bf00      	nop
 800e068:	0800fa40 	.word	0x0800fa40
 800e06c:	0800f7f6 	.word	0x0800f7f6
 800e070:	0800f8f4 	.word	0x0800f8f4

0800e074 <__lshift>:
 800e074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e078:	460c      	mov	r4, r1
 800e07a:	6849      	ldr	r1, [r1, #4]
 800e07c:	6923      	ldr	r3, [r4, #16]
 800e07e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e082:	68a3      	ldr	r3, [r4, #8]
 800e084:	4607      	mov	r7, r0
 800e086:	4691      	mov	r9, r2
 800e088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e08c:	f108 0601 	add.w	r6, r8, #1
 800e090:	42b3      	cmp	r3, r6
 800e092:	db0b      	blt.n	800e0ac <__lshift+0x38>
 800e094:	4638      	mov	r0, r7
 800e096:	f7ff fd91 	bl	800dbbc <_Balloc>
 800e09a:	4605      	mov	r5, r0
 800e09c:	b948      	cbnz	r0, 800e0b2 <__lshift+0x3e>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	4b2a      	ldr	r3, [pc, #168]	; (800e14c <__lshift+0xd8>)
 800e0a2:	482b      	ldr	r0, [pc, #172]	; (800e150 <__lshift+0xdc>)
 800e0a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e0a8:	f000 fcd4 	bl	800ea54 <__assert_func>
 800e0ac:	3101      	adds	r1, #1
 800e0ae:	005b      	lsls	r3, r3, #1
 800e0b0:	e7ee      	b.n	800e090 <__lshift+0x1c>
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	f100 0114 	add.w	r1, r0, #20
 800e0b8:	f100 0210 	add.w	r2, r0, #16
 800e0bc:	4618      	mov	r0, r3
 800e0be:	4553      	cmp	r3, sl
 800e0c0:	db37      	blt.n	800e132 <__lshift+0xbe>
 800e0c2:	6920      	ldr	r0, [r4, #16]
 800e0c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e0c8:	f104 0314 	add.w	r3, r4, #20
 800e0cc:	f019 091f 	ands.w	r9, r9, #31
 800e0d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e0d8:	d02f      	beq.n	800e13a <__lshift+0xc6>
 800e0da:	f1c9 0e20 	rsb	lr, r9, #32
 800e0de:	468a      	mov	sl, r1
 800e0e0:	f04f 0c00 	mov.w	ip, #0
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	fa02 f209 	lsl.w	r2, r2, r9
 800e0ea:	ea42 020c 	orr.w	r2, r2, ip
 800e0ee:	f84a 2b04 	str.w	r2, [sl], #4
 800e0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0f6:	4298      	cmp	r0, r3
 800e0f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e0fc:	d8f2      	bhi.n	800e0e4 <__lshift+0x70>
 800e0fe:	1b03      	subs	r3, r0, r4
 800e100:	3b15      	subs	r3, #21
 800e102:	f023 0303 	bic.w	r3, r3, #3
 800e106:	3304      	adds	r3, #4
 800e108:	f104 0215 	add.w	r2, r4, #21
 800e10c:	4290      	cmp	r0, r2
 800e10e:	bf38      	it	cc
 800e110:	2304      	movcc	r3, #4
 800e112:	f841 c003 	str.w	ip, [r1, r3]
 800e116:	f1bc 0f00 	cmp.w	ip, #0
 800e11a:	d001      	beq.n	800e120 <__lshift+0xac>
 800e11c:	f108 0602 	add.w	r6, r8, #2
 800e120:	3e01      	subs	r6, #1
 800e122:	4638      	mov	r0, r7
 800e124:	612e      	str	r6, [r5, #16]
 800e126:	4621      	mov	r1, r4
 800e128:	f7ff fd88 	bl	800dc3c <_Bfree>
 800e12c:	4628      	mov	r0, r5
 800e12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e132:	f842 0f04 	str.w	r0, [r2, #4]!
 800e136:	3301      	adds	r3, #1
 800e138:	e7c1      	b.n	800e0be <__lshift+0x4a>
 800e13a:	3904      	subs	r1, #4
 800e13c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e140:	f841 2f04 	str.w	r2, [r1, #4]!
 800e144:	4298      	cmp	r0, r3
 800e146:	d8f9      	bhi.n	800e13c <__lshift+0xc8>
 800e148:	e7ea      	b.n	800e120 <__lshift+0xac>
 800e14a:	bf00      	nop
 800e14c:	0800f868 	.word	0x0800f868
 800e150:	0800f8f4 	.word	0x0800f8f4

0800e154 <__mcmp>:
 800e154:	b530      	push	{r4, r5, lr}
 800e156:	6902      	ldr	r2, [r0, #16]
 800e158:	690c      	ldr	r4, [r1, #16]
 800e15a:	1b12      	subs	r2, r2, r4
 800e15c:	d10e      	bne.n	800e17c <__mcmp+0x28>
 800e15e:	f100 0314 	add.w	r3, r0, #20
 800e162:	3114      	adds	r1, #20
 800e164:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e168:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e16c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e170:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e174:	42a5      	cmp	r5, r4
 800e176:	d003      	beq.n	800e180 <__mcmp+0x2c>
 800e178:	d305      	bcc.n	800e186 <__mcmp+0x32>
 800e17a:	2201      	movs	r2, #1
 800e17c:	4610      	mov	r0, r2
 800e17e:	bd30      	pop	{r4, r5, pc}
 800e180:	4283      	cmp	r3, r0
 800e182:	d3f3      	bcc.n	800e16c <__mcmp+0x18>
 800e184:	e7fa      	b.n	800e17c <__mcmp+0x28>
 800e186:	f04f 32ff 	mov.w	r2, #4294967295
 800e18a:	e7f7      	b.n	800e17c <__mcmp+0x28>

0800e18c <__mdiff>:
 800e18c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e190:	460c      	mov	r4, r1
 800e192:	4606      	mov	r6, r0
 800e194:	4611      	mov	r1, r2
 800e196:	4620      	mov	r0, r4
 800e198:	4690      	mov	r8, r2
 800e19a:	f7ff ffdb 	bl	800e154 <__mcmp>
 800e19e:	1e05      	subs	r5, r0, #0
 800e1a0:	d110      	bne.n	800e1c4 <__mdiff+0x38>
 800e1a2:	4629      	mov	r1, r5
 800e1a4:	4630      	mov	r0, r6
 800e1a6:	f7ff fd09 	bl	800dbbc <_Balloc>
 800e1aa:	b930      	cbnz	r0, 800e1ba <__mdiff+0x2e>
 800e1ac:	4b3a      	ldr	r3, [pc, #232]	; (800e298 <__mdiff+0x10c>)
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	f240 2132 	movw	r1, #562	; 0x232
 800e1b4:	4839      	ldr	r0, [pc, #228]	; (800e29c <__mdiff+0x110>)
 800e1b6:	f000 fc4d 	bl	800ea54 <__assert_func>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e1c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c4:	bfa4      	itt	ge
 800e1c6:	4643      	movge	r3, r8
 800e1c8:	46a0      	movge	r8, r4
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e1d0:	bfa6      	itte	ge
 800e1d2:	461c      	movge	r4, r3
 800e1d4:	2500      	movge	r5, #0
 800e1d6:	2501      	movlt	r5, #1
 800e1d8:	f7ff fcf0 	bl	800dbbc <_Balloc>
 800e1dc:	b920      	cbnz	r0, 800e1e8 <__mdiff+0x5c>
 800e1de:	4b2e      	ldr	r3, [pc, #184]	; (800e298 <__mdiff+0x10c>)
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e1e6:	e7e5      	b.n	800e1b4 <__mdiff+0x28>
 800e1e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e1ec:	6926      	ldr	r6, [r4, #16]
 800e1ee:	60c5      	str	r5, [r0, #12]
 800e1f0:	f104 0914 	add.w	r9, r4, #20
 800e1f4:	f108 0514 	add.w	r5, r8, #20
 800e1f8:	f100 0e14 	add.w	lr, r0, #20
 800e1fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e200:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e204:	f108 0210 	add.w	r2, r8, #16
 800e208:	46f2      	mov	sl, lr
 800e20a:	2100      	movs	r1, #0
 800e20c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e210:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e214:	fa1f f883 	uxth.w	r8, r3
 800e218:	fa11 f18b 	uxtah	r1, r1, fp
 800e21c:	0c1b      	lsrs	r3, r3, #16
 800e21e:	eba1 0808 	sub.w	r8, r1, r8
 800e222:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e226:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e22a:	fa1f f888 	uxth.w	r8, r8
 800e22e:	1419      	asrs	r1, r3, #16
 800e230:	454e      	cmp	r6, r9
 800e232:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e236:	f84a 3b04 	str.w	r3, [sl], #4
 800e23a:	d8e7      	bhi.n	800e20c <__mdiff+0x80>
 800e23c:	1b33      	subs	r3, r6, r4
 800e23e:	3b15      	subs	r3, #21
 800e240:	f023 0303 	bic.w	r3, r3, #3
 800e244:	3304      	adds	r3, #4
 800e246:	3415      	adds	r4, #21
 800e248:	42a6      	cmp	r6, r4
 800e24a:	bf38      	it	cc
 800e24c:	2304      	movcc	r3, #4
 800e24e:	441d      	add	r5, r3
 800e250:	4473      	add	r3, lr
 800e252:	469e      	mov	lr, r3
 800e254:	462e      	mov	r6, r5
 800e256:	4566      	cmp	r6, ip
 800e258:	d30e      	bcc.n	800e278 <__mdiff+0xec>
 800e25a:	f10c 0203 	add.w	r2, ip, #3
 800e25e:	1b52      	subs	r2, r2, r5
 800e260:	f022 0203 	bic.w	r2, r2, #3
 800e264:	3d03      	subs	r5, #3
 800e266:	45ac      	cmp	ip, r5
 800e268:	bf38      	it	cc
 800e26a:	2200      	movcc	r2, #0
 800e26c:	441a      	add	r2, r3
 800e26e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e272:	b17b      	cbz	r3, 800e294 <__mdiff+0x108>
 800e274:	6107      	str	r7, [r0, #16]
 800e276:	e7a3      	b.n	800e1c0 <__mdiff+0x34>
 800e278:	f856 8b04 	ldr.w	r8, [r6], #4
 800e27c:	fa11 f288 	uxtah	r2, r1, r8
 800e280:	1414      	asrs	r4, r2, #16
 800e282:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e286:	b292      	uxth	r2, r2
 800e288:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e28c:	f84e 2b04 	str.w	r2, [lr], #4
 800e290:	1421      	asrs	r1, r4, #16
 800e292:	e7e0      	b.n	800e256 <__mdiff+0xca>
 800e294:	3f01      	subs	r7, #1
 800e296:	e7ea      	b.n	800e26e <__mdiff+0xe2>
 800e298:	0800f868 	.word	0x0800f868
 800e29c:	0800f8f4 	.word	0x0800f8f4

0800e2a0 <__ulp>:
 800e2a0:	b082      	sub	sp, #8
 800e2a2:	ed8d 0b00 	vstr	d0, [sp]
 800e2a6:	9b01      	ldr	r3, [sp, #4]
 800e2a8:	4912      	ldr	r1, [pc, #72]	; (800e2f4 <__ulp+0x54>)
 800e2aa:	4019      	ands	r1, r3
 800e2ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e2b0:	2900      	cmp	r1, #0
 800e2b2:	dd05      	ble.n	800e2c0 <__ulp+0x20>
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	ec43 2b10 	vmov	d0, r2, r3
 800e2bc:	b002      	add	sp, #8
 800e2be:	4770      	bx	lr
 800e2c0:	4249      	negs	r1, r1
 800e2c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e2c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e2ca:	f04f 0200 	mov.w	r2, #0
 800e2ce:	f04f 0300 	mov.w	r3, #0
 800e2d2:	da04      	bge.n	800e2de <__ulp+0x3e>
 800e2d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e2d8:	fa41 f300 	asr.w	r3, r1, r0
 800e2dc:	e7ec      	b.n	800e2b8 <__ulp+0x18>
 800e2de:	f1a0 0114 	sub.w	r1, r0, #20
 800e2e2:	291e      	cmp	r1, #30
 800e2e4:	bfda      	itte	le
 800e2e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e2ea:	fa20 f101 	lsrle.w	r1, r0, r1
 800e2ee:	2101      	movgt	r1, #1
 800e2f0:	460a      	mov	r2, r1
 800e2f2:	e7e1      	b.n	800e2b8 <__ulp+0x18>
 800e2f4:	7ff00000 	.word	0x7ff00000

0800e2f8 <__b2d>:
 800e2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2fa:	6905      	ldr	r5, [r0, #16]
 800e2fc:	f100 0714 	add.w	r7, r0, #20
 800e300:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e304:	1f2e      	subs	r6, r5, #4
 800e306:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e30a:	4620      	mov	r0, r4
 800e30c:	f7ff fd48 	bl	800dda0 <__hi0bits>
 800e310:	f1c0 0320 	rsb	r3, r0, #32
 800e314:	280a      	cmp	r0, #10
 800e316:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e394 <__b2d+0x9c>
 800e31a:	600b      	str	r3, [r1, #0]
 800e31c:	dc14      	bgt.n	800e348 <__b2d+0x50>
 800e31e:	f1c0 0e0b 	rsb	lr, r0, #11
 800e322:	fa24 f10e 	lsr.w	r1, r4, lr
 800e326:	42b7      	cmp	r7, r6
 800e328:	ea41 030c 	orr.w	r3, r1, ip
 800e32c:	bf34      	ite	cc
 800e32e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e332:	2100      	movcs	r1, #0
 800e334:	3015      	adds	r0, #21
 800e336:	fa04 f000 	lsl.w	r0, r4, r0
 800e33a:	fa21 f10e 	lsr.w	r1, r1, lr
 800e33e:	ea40 0201 	orr.w	r2, r0, r1
 800e342:	ec43 2b10 	vmov	d0, r2, r3
 800e346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e348:	42b7      	cmp	r7, r6
 800e34a:	bf3a      	itte	cc
 800e34c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e350:	f1a5 0608 	subcc.w	r6, r5, #8
 800e354:	2100      	movcs	r1, #0
 800e356:	380b      	subs	r0, #11
 800e358:	d017      	beq.n	800e38a <__b2d+0x92>
 800e35a:	f1c0 0c20 	rsb	ip, r0, #32
 800e35e:	fa04 f500 	lsl.w	r5, r4, r0
 800e362:	42be      	cmp	r6, r7
 800e364:	fa21 f40c 	lsr.w	r4, r1, ip
 800e368:	ea45 0504 	orr.w	r5, r5, r4
 800e36c:	bf8c      	ite	hi
 800e36e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e372:	2400      	movls	r4, #0
 800e374:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e378:	fa01 f000 	lsl.w	r0, r1, r0
 800e37c:	fa24 f40c 	lsr.w	r4, r4, ip
 800e380:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e384:	ea40 0204 	orr.w	r2, r0, r4
 800e388:	e7db      	b.n	800e342 <__b2d+0x4a>
 800e38a:	ea44 030c 	orr.w	r3, r4, ip
 800e38e:	460a      	mov	r2, r1
 800e390:	e7d7      	b.n	800e342 <__b2d+0x4a>
 800e392:	bf00      	nop
 800e394:	3ff00000 	.word	0x3ff00000

0800e398 <__d2b>:
 800e398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e39c:	4689      	mov	r9, r1
 800e39e:	2101      	movs	r1, #1
 800e3a0:	ec57 6b10 	vmov	r6, r7, d0
 800e3a4:	4690      	mov	r8, r2
 800e3a6:	f7ff fc09 	bl	800dbbc <_Balloc>
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	b930      	cbnz	r0, 800e3bc <__d2b+0x24>
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	4b25      	ldr	r3, [pc, #148]	; (800e448 <__d2b+0xb0>)
 800e3b2:	4826      	ldr	r0, [pc, #152]	; (800e44c <__d2b+0xb4>)
 800e3b4:	f240 310a 	movw	r1, #778	; 0x30a
 800e3b8:	f000 fb4c 	bl	800ea54 <__assert_func>
 800e3bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e3c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e3c4:	bb35      	cbnz	r5, 800e414 <__d2b+0x7c>
 800e3c6:	2e00      	cmp	r6, #0
 800e3c8:	9301      	str	r3, [sp, #4]
 800e3ca:	d028      	beq.n	800e41e <__d2b+0x86>
 800e3cc:	4668      	mov	r0, sp
 800e3ce:	9600      	str	r6, [sp, #0]
 800e3d0:	f7ff fd06 	bl	800dde0 <__lo0bits>
 800e3d4:	9900      	ldr	r1, [sp, #0]
 800e3d6:	b300      	cbz	r0, 800e41a <__d2b+0x82>
 800e3d8:	9a01      	ldr	r2, [sp, #4]
 800e3da:	f1c0 0320 	rsb	r3, r0, #32
 800e3de:	fa02 f303 	lsl.w	r3, r2, r3
 800e3e2:	430b      	orrs	r3, r1
 800e3e4:	40c2      	lsrs	r2, r0
 800e3e6:	6163      	str	r3, [r4, #20]
 800e3e8:	9201      	str	r2, [sp, #4]
 800e3ea:	9b01      	ldr	r3, [sp, #4]
 800e3ec:	61a3      	str	r3, [r4, #24]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	bf14      	ite	ne
 800e3f2:	2202      	movne	r2, #2
 800e3f4:	2201      	moveq	r2, #1
 800e3f6:	6122      	str	r2, [r4, #16]
 800e3f8:	b1d5      	cbz	r5, 800e430 <__d2b+0x98>
 800e3fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e3fe:	4405      	add	r5, r0
 800e400:	f8c9 5000 	str.w	r5, [r9]
 800e404:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e408:	f8c8 0000 	str.w	r0, [r8]
 800e40c:	4620      	mov	r0, r4
 800e40e:	b003      	add	sp, #12
 800e410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e418:	e7d5      	b.n	800e3c6 <__d2b+0x2e>
 800e41a:	6161      	str	r1, [r4, #20]
 800e41c:	e7e5      	b.n	800e3ea <__d2b+0x52>
 800e41e:	a801      	add	r0, sp, #4
 800e420:	f7ff fcde 	bl	800dde0 <__lo0bits>
 800e424:	9b01      	ldr	r3, [sp, #4]
 800e426:	6163      	str	r3, [r4, #20]
 800e428:	2201      	movs	r2, #1
 800e42a:	6122      	str	r2, [r4, #16]
 800e42c:	3020      	adds	r0, #32
 800e42e:	e7e3      	b.n	800e3f8 <__d2b+0x60>
 800e430:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e434:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e438:	f8c9 0000 	str.w	r0, [r9]
 800e43c:	6918      	ldr	r0, [r3, #16]
 800e43e:	f7ff fcaf 	bl	800dda0 <__hi0bits>
 800e442:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e446:	e7df      	b.n	800e408 <__d2b+0x70>
 800e448:	0800f868 	.word	0x0800f868
 800e44c:	0800f8f4 	.word	0x0800f8f4

0800e450 <__ratio>:
 800e450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e454:	4688      	mov	r8, r1
 800e456:	4669      	mov	r1, sp
 800e458:	4681      	mov	r9, r0
 800e45a:	f7ff ff4d 	bl	800e2f8 <__b2d>
 800e45e:	a901      	add	r1, sp, #4
 800e460:	4640      	mov	r0, r8
 800e462:	ec55 4b10 	vmov	r4, r5, d0
 800e466:	ee10 aa10 	vmov	sl, s0
 800e46a:	f7ff ff45 	bl	800e2f8 <__b2d>
 800e46e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e472:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e476:	1a59      	subs	r1, r3, r1
 800e478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e47c:	1ad3      	subs	r3, r2, r3
 800e47e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e482:	ec57 6b10 	vmov	r6, r7, d0
 800e486:	2b00      	cmp	r3, #0
 800e488:	bfd6      	itet	le
 800e48a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e48e:	462a      	movgt	r2, r5
 800e490:	463a      	movle	r2, r7
 800e492:	46ab      	mov	fp, r5
 800e494:	bfd6      	itet	le
 800e496:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e49a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e49e:	ee00 3a90 	vmovle	s1, r3
 800e4a2:	ec4b ab17 	vmov	d7, sl, fp
 800e4a6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e4aa:	b003      	add	sp, #12
 800e4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e4b0 <__copybits>:
 800e4b0:	3901      	subs	r1, #1
 800e4b2:	b570      	push	{r4, r5, r6, lr}
 800e4b4:	1149      	asrs	r1, r1, #5
 800e4b6:	6914      	ldr	r4, [r2, #16]
 800e4b8:	3101      	adds	r1, #1
 800e4ba:	f102 0314 	add.w	r3, r2, #20
 800e4be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e4c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e4c6:	1f05      	subs	r5, r0, #4
 800e4c8:	42a3      	cmp	r3, r4
 800e4ca:	d30c      	bcc.n	800e4e6 <__copybits+0x36>
 800e4cc:	1aa3      	subs	r3, r4, r2
 800e4ce:	3b11      	subs	r3, #17
 800e4d0:	f023 0303 	bic.w	r3, r3, #3
 800e4d4:	3211      	adds	r2, #17
 800e4d6:	42a2      	cmp	r2, r4
 800e4d8:	bf88      	it	hi
 800e4da:	2300      	movhi	r3, #0
 800e4dc:	4418      	add	r0, r3
 800e4de:	2300      	movs	r3, #0
 800e4e0:	4288      	cmp	r0, r1
 800e4e2:	d305      	bcc.n	800e4f0 <__copybits+0x40>
 800e4e4:	bd70      	pop	{r4, r5, r6, pc}
 800e4e6:	f853 6b04 	ldr.w	r6, [r3], #4
 800e4ea:	f845 6f04 	str.w	r6, [r5, #4]!
 800e4ee:	e7eb      	b.n	800e4c8 <__copybits+0x18>
 800e4f0:	f840 3b04 	str.w	r3, [r0], #4
 800e4f4:	e7f4      	b.n	800e4e0 <__copybits+0x30>

0800e4f6 <__any_on>:
 800e4f6:	f100 0214 	add.w	r2, r0, #20
 800e4fa:	6900      	ldr	r0, [r0, #16]
 800e4fc:	114b      	asrs	r3, r1, #5
 800e4fe:	4298      	cmp	r0, r3
 800e500:	b510      	push	{r4, lr}
 800e502:	db11      	blt.n	800e528 <__any_on+0x32>
 800e504:	dd0a      	ble.n	800e51c <__any_on+0x26>
 800e506:	f011 011f 	ands.w	r1, r1, #31
 800e50a:	d007      	beq.n	800e51c <__any_on+0x26>
 800e50c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e510:	fa24 f001 	lsr.w	r0, r4, r1
 800e514:	fa00 f101 	lsl.w	r1, r0, r1
 800e518:	428c      	cmp	r4, r1
 800e51a:	d10b      	bne.n	800e534 <__any_on+0x3e>
 800e51c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e520:	4293      	cmp	r3, r2
 800e522:	d803      	bhi.n	800e52c <__any_on+0x36>
 800e524:	2000      	movs	r0, #0
 800e526:	bd10      	pop	{r4, pc}
 800e528:	4603      	mov	r3, r0
 800e52a:	e7f7      	b.n	800e51c <__any_on+0x26>
 800e52c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e530:	2900      	cmp	r1, #0
 800e532:	d0f5      	beq.n	800e520 <__any_on+0x2a>
 800e534:	2001      	movs	r0, #1
 800e536:	e7f6      	b.n	800e526 <__any_on+0x30>

0800e538 <_calloc_r>:
 800e538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e53a:	fba1 2402 	umull	r2, r4, r1, r2
 800e53e:	b94c      	cbnz	r4, 800e554 <_calloc_r+0x1c>
 800e540:	4611      	mov	r1, r2
 800e542:	9201      	str	r2, [sp, #4]
 800e544:	f000 f87a 	bl	800e63c <_malloc_r>
 800e548:	9a01      	ldr	r2, [sp, #4]
 800e54a:	4605      	mov	r5, r0
 800e54c:	b930      	cbnz	r0, 800e55c <_calloc_r+0x24>
 800e54e:	4628      	mov	r0, r5
 800e550:	b003      	add	sp, #12
 800e552:	bd30      	pop	{r4, r5, pc}
 800e554:	220c      	movs	r2, #12
 800e556:	6002      	str	r2, [r0, #0]
 800e558:	2500      	movs	r5, #0
 800e55a:	e7f8      	b.n	800e54e <_calloc_r+0x16>
 800e55c:	4621      	mov	r1, r4
 800e55e:	f7fc fcc5 	bl	800aeec <memset>
 800e562:	e7f4      	b.n	800e54e <_calloc_r+0x16>

0800e564 <_free_r>:
 800e564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e566:	2900      	cmp	r1, #0
 800e568:	d044      	beq.n	800e5f4 <_free_r+0x90>
 800e56a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e56e:	9001      	str	r0, [sp, #4]
 800e570:	2b00      	cmp	r3, #0
 800e572:	f1a1 0404 	sub.w	r4, r1, #4
 800e576:	bfb8      	it	lt
 800e578:	18e4      	addlt	r4, r4, r3
 800e57a:	f000 fab5 	bl	800eae8 <__malloc_lock>
 800e57e:	4a1e      	ldr	r2, [pc, #120]	; (800e5f8 <_free_r+0x94>)
 800e580:	9801      	ldr	r0, [sp, #4]
 800e582:	6813      	ldr	r3, [r2, #0]
 800e584:	b933      	cbnz	r3, 800e594 <_free_r+0x30>
 800e586:	6063      	str	r3, [r4, #4]
 800e588:	6014      	str	r4, [r2, #0]
 800e58a:	b003      	add	sp, #12
 800e58c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e590:	f000 bab0 	b.w	800eaf4 <__malloc_unlock>
 800e594:	42a3      	cmp	r3, r4
 800e596:	d908      	bls.n	800e5aa <_free_r+0x46>
 800e598:	6825      	ldr	r5, [r4, #0]
 800e59a:	1961      	adds	r1, r4, r5
 800e59c:	428b      	cmp	r3, r1
 800e59e:	bf01      	itttt	eq
 800e5a0:	6819      	ldreq	r1, [r3, #0]
 800e5a2:	685b      	ldreq	r3, [r3, #4]
 800e5a4:	1949      	addeq	r1, r1, r5
 800e5a6:	6021      	streq	r1, [r4, #0]
 800e5a8:	e7ed      	b.n	800e586 <_free_r+0x22>
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	b10b      	cbz	r3, 800e5b4 <_free_r+0x50>
 800e5b0:	42a3      	cmp	r3, r4
 800e5b2:	d9fa      	bls.n	800e5aa <_free_r+0x46>
 800e5b4:	6811      	ldr	r1, [r2, #0]
 800e5b6:	1855      	adds	r5, r2, r1
 800e5b8:	42a5      	cmp	r5, r4
 800e5ba:	d10b      	bne.n	800e5d4 <_free_r+0x70>
 800e5bc:	6824      	ldr	r4, [r4, #0]
 800e5be:	4421      	add	r1, r4
 800e5c0:	1854      	adds	r4, r2, r1
 800e5c2:	42a3      	cmp	r3, r4
 800e5c4:	6011      	str	r1, [r2, #0]
 800e5c6:	d1e0      	bne.n	800e58a <_free_r+0x26>
 800e5c8:	681c      	ldr	r4, [r3, #0]
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	6053      	str	r3, [r2, #4]
 800e5ce:	4421      	add	r1, r4
 800e5d0:	6011      	str	r1, [r2, #0]
 800e5d2:	e7da      	b.n	800e58a <_free_r+0x26>
 800e5d4:	d902      	bls.n	800e5dc <_free_r+0x78>
 800e5d6:	230c      	movs	r3, #12
 800e5d8:	6003      	str	r3, [r0, #0]
 800e5da:	e7d6      	b.n	800e58a <_free_r+0x26>
 800e5dc:	6825      	ldr	r5, [r4, #0]
 800e5de:	1961      	adds	r1, r4, r5
 800e5e0:	428b      	cmp	r3, r1
 800e5e2:	bf04      	itt	eq
 800e5e4:	6819      	ldreq	r1, [r3, #0]
 800e5e6:	685b      	ldreq	r3, [r3, #4]
 800e5e8:	6063      	str	r3, [r4, #4]
 800e5ea:	bf04      	itt	eq
 800e5ec:	1949      	addeq	r1, r1, r5
 800e5ee:	6021      	streq	r1, [r4, #0]
 800e5f0:	6054      	str	r4, [r2, #4]
 800e5f2:	e7ca      	b.n	800e58a <_free_r+0x26>
 800e5f4:	b003      	add	sp, #12
 800e5f6:	bd30      	pop	{r4, r5, pc}
 800e5f8:	24000520 	.word	0x24000520

0800e5fc <sbrk_aligned>:
 800e5fc:	b570      	push	{r4, r5, r6, lr}
 800e5fe:	4e0e      	ldr	r6, [pc, #56]	; (800e638 <sbrk_aligned+0x3c>)
 800e600:	460c      	mov	r4, r1
 800e602:	6831      	ldr	r1, [r6, #0]
 800e604:	4605      	mov	r5, r0
 800e606:	b911      	cbnz	r1, 800e60e <sbrk_aligned+0x12>
 800e608:	f000 f9f2 	bl	800e9f0 <_sbrk_r>
 800e60c:	6030      	str	r0, [r6, #0]
 800e60e:	4621      	mov	r1, r4
 800e610:	4628      	mov	r0, r5
 800e612:	f000 f9ed 	bl	800e9f0 <_sbrk_r>
 800e616:	1c43      	adds	r3, r0, #1
 800e618:	d00a      	beq.n	800e630 <sbrk_aligned+0x34>
 800e61a:	1cc4      	adds	r4, r0, #3
 800e61c:	f024 0403 	bic.w	r4, r4, #3
 800e620:	42a0      	cmp	r0, r4
 800e622:	d007      	beq.n	800e634 <sbrk_aligned+0x38>
 800e624:	1a21      	subs	r1, r4, r0
 800e626:	4628      	mov	r0, r5
 800e628:	f000 f9e2 	bl	800e9f0 <_sbrk_r>
 800e62c:	3001      	adds	r0, #1
 800e62e:	d101      	bne.n	800e634 <sbrk_aligned+0x38>
 800e630:	f04f 34ff 	mov.w	r4, #4294967295
 800e634:	4620      	mov	r0, r4
 800e636:	bd70      	pop	{r4, r5, r6, pc}
 800e638:	24000524 	.word	0x24000524

0800e63c <_malloc_r>:
 800e63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e640:	1ccd      	adds	r5, r1, #3
 800e642:	f025 0503 	bic.w	r5, r5, #3
 800e646:	3508      	adds	r5, #8
 800e648:	2d0c      	cmp	r5, #12
 800e64a:	bf38      	it	cc
 800e64c:	250c      	movcc	r5, #12
 800e64e:	2d00      	cmp	r5, #0
 800e650:	4607      	mov	r7, r0
 800e652:	db01      	blt.n	800e658 <_malloc_r+0x1c>
 800e654:	42a9      	cmp	r1, r5
 800e656:	d905      	bls.n	800e664 <_malloc_r+0x28>
 800e658:	230c      	movs	r3, #12
 800e65a:	603b      	str	r3, [r7, #0]
 800e65c:	2600      	movs	r6, #0
 800e65e:	4630      	mov	r0, r6
 800e660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e664:	4e2e      	ldr	r6, [pc, #184]	; (800e720 <_malloc_r+0xe4>)
 800e666:	f000 fa3f 	bl	800eae8 <__malloc_lock>
 800e66a:	6833      	ldr	r3, [r6, #0]
 800e66c:	461c      	mov	r4, r3
 800e66e:	bb34      	cbnz	r4, 800e6be <_malloc_r+0x82>
 800e670:	4629      	mov	r1, r5
 800e672:	4638      	mov	r0, r7
 800e674:	f7ff ffc2 	bl	800e5fc <sbrk_aligned>
 800e678:	1c43      	adds	r3, r0, #1
 800e67a:	4604      	mov	r4, r0
 800e67c:	d14d      	bne.n	800e71a <_malloc_r+0xde>
 800e67e:	6834      	ldr	r4, [r6, #0]
 800e680:	4626      	mov	r6, r4
 800e682:	2e00      	cmp	r6, #0
 800e684:	d140      	bne.n	800e708 <_malloc_r+0xcc>
 800e686:	6823      	ldr	r3, [r4, #0]
 800e688:	4631      	mov	r1, r6
 800e68a:	4638      	mov	r0, r7
 800e68c:	eb04 0803 	add.w	r8, r4, r3
 800e690:	f000 f9ae 	bl	800e9f0 <_sbrk_r>
 800e694:	4580      	cmp	r8, r0
 800e696:	d13a      	bne.n	800e70e <_malloc_r+0xd2>
 800e698:	6821      	ldr	r1, [r4, #0]
 800e69a:	3503      	adds	r5, #3
 800e69c:	1a6d      	subs	r5, r5, r1
 800e69e:	f025 0503 	bic.w	r5, r5, #3
 800e6a2:	3508      	adds	r5, #8
 800e6a4:	2d0c      	cmp	r5, #12
 800e6a6:	bf38      	it	cc
 800e6a8:	250c      	movcc	r5, #12
 800e6aa:	4629      	mov	r1, r5
 800e6ac:	4638      	mov	r0, r7
 800e6ae:	f7ff ffa5 	bl	800e5fc <sbrk_aligned>
 800e6b2:	3001      	adds	r0, #1
 800e6b4:	d02b      	beq.n	800e70e <_malloc_r+0xd2>
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	442b      	add	r3, r5
 800e6ba:	6023      	str	r3, [r4, #0]
 800e6bc:	e00e      	b.n	800e6dc <_malloc_r+0xa0>
 800e6be:	6822      	ldr	r2, [r4, #0]
 800e6c0:	1b52      	subs	r2, r2, r5
 800e6c2:	d41e      	bmi.n	800e702 <_malloc_r+0xc6>
 800e6c4:	2a0b      	cmp	r2, #11
 800e6c6:	d916      	bls.n	800e6f6 <_malloc_r+0xba>
 800e6c8:	1961      	adds	r1, r4, r5
 800e6ca:	42a3      	cmp	r3, r4
 800e6cc:	6025      	str	r5, [r4, #0]
 800e6ce:	bf18      	it	ne
 800e6d0:	6059      	strne	r1, [r3, #4]
 800e6d2:	6863      	ldr	r3, [r4, #4]
 800e6d4:	bf08      	it	eq
 800e6d6:	6031      	streq	r1, [r6, #0]
 800e6d8:	5162      	str	r2, [r4, r5]
 800e6da:	604b      	str	r3, [r1, #4]
 800e6dc:	4638      	mov	r0, r7
 800e6de:	f104 060b 	add.w	r6, r4, #11
 800e6e2:	f000 fa07 	bl	800eaf4 <__malloc_unlock>
 800e6e6:	f026 0607 	bic.w	r6, r6, #7
 800e6ea:	1d23      	adds	r3, r4, #4
 800e6ec:	1af2      	subs	r2, r6, r3
 800e6ee:	d0b6      	beq.n	800e65e <_malloc_r+0x22>
 800e6f0:	1b9b      	subs	r3, r3, r6
 800e6f2:	50a3      	str	r3, [r4, r2]
 800e6f4:	e7b3      	b.n	800e65e <_malloc_r+0x22>
 800e6f6:	6862      	ldr	r2, [r4, #4]
 800e6f8:	42a3      	cmp	r3, r4
 800e6fa:	bf0c      	ite	eq
 800e6fc:	6032      	streq	r2, [r6, #0]
 800e6fe:	605a      	strne	r2, [r3, #4]
 800e700:	e7ec      	b.n	800e6dc <_malloc_r+0xa0>
 800e702:	4623      	mov	r3, r4
 800e704:	6864      	ldr	r4, [r4, #4]
 800e706:	e7b2      	b.n	800e66e <_malloc_r+0x32>
 800e708:	4634      	mov	r4, r6
 800e70a:	6876      	ldr	r6, [r6, #4]
 800e70c:	e7b9      	b.n	800e682 <_malloc_r+0x46>
 800e70e:	230c      	movs	r3, #12
 800e710:	603b      	str	r3, [r7, #0]
 800e712:	4638      	mov	r0, r7
 800e714:	f000 f9ee 	bl	800eaf4 <__malloc_unlock>
 800e718:	e7a1      	b.n	800e65e <_malloc_r+0x22>
 800e71a:	6025      	str	r5, [r4, #0]
 800e71c:	e7de      	b.n	800e6dc <_malloc_r+0xa0>
 800e71e:	bf00      	nop
 800e720:	24000520 	.word	0x24000520

0800e724 <__ssputs_r>:
 800e724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e728:	688e      	ldr	r6, [r1, #8]
 800e72a:	429e      	cmp	r6, r3
 800e72c:	4682      	mov	sl, r0
 800e72e:	460c      	mov	r4, r1
 800e730:	4690      	mov	r8, r2
 800e732:	461f      	mov	r7, r3
 800e734:	d838      	bhi.n	800e7a8 <__ssputs_r+0x84>
 800e736:	898a      	ldrh	r2, [r1, #12]
 800e738:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e73c:	d032      	beq.n	800e7a4 <__ssputs_r+0x80>
 800e73e:	6825      	ldr	r5, [r4, #0]
 800e740:	6909      	ldr	r1, [r1, #16]
 800e742:	eba5 0901 	sub.w	r9, r5, r1
 800e746:	6965      	ldr	r5, [r4, #20]
 800e748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e74c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e750:	3301      	adds	r3, #1
 800e752:	444b      	add	r3, r9
 800e754:	106d      	asrs	r5, r5, #1
 800e756:	429d      	cmp	r5, r3
 800e758:	bf38      	it	cc
 800e75a:	461d      	movcc	r5, r3
 800e75c:	0553      	lsls	r3, r2, #21
 800e75e:	d531      	bpl.n	800e7c4 <__ssputs_r+0xa0>
 800e760:	4629      	mov	r1, r5
 800e762:	f7ff ff6b 	bl	800e63c <_malloc_r>
 800e766:	4606      	mov	r6, r0
 800e768:	b950      	cbnz	r0, 800e780 <__ssputs_r+0x5c>
 800e76a:	230c      	movs	r3, #12
 800e76c:	f8ca 3000 	str.w	r3, [sl]
 800e770:	89a3      	ldrh	r3, [r4, #12]
 800e772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e776:	81a3      	strh	r3, [r4, #12]
 800e778:	f04f 30ff 	mov.w	r0, #4294967295
 800e77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e780:	6921      	ldr	r1, [r4, #16]
 800e782:	464a      	mov	r2, r9
 800e784:	f7ff fa0c 	bl	800dba0 <memcpy>
 800e788:	89a3      	ldrh	r3, [r4, #12]
 800e78a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e78e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e792:	81a3      	strh	r3, [r4, #12]
 800e794:	6126      	str	r6, [r4, #16]
 800e796:	6165      	str	r5, [r4, #20]
 800e798:	444e      	add	r6, r9
 800e79a:	eba5 0509 	sub.w	r5, r5, r9
 800e79e:	6026      	str	r6, [r4, #0]
 800e7a0:	60a5      	str	r5, [r4, #8]
 800e7a2:	463e      	mov	r6, r7
 800e7a4:	42be      	cmp	r6, r7
 800e7a6:	d900      	bls.n	800e7aa <__ssputs_r+0x86>
 800e7a8:	463e      	mov	r6, r7
 800e7aa:	6820      	ldr	r0, [r4, #0]
 800e7ac:	4632      	mov	r2, r6
 800e7ae:	4641      	mov	r1, r8
 800e7b0:	f000 f980 	bl	800eab4 <memmove>
 800e7b4:	68a3      	ldr	r3, [r4, #8]
 800e7b6:	1b9b      	subs	r3, r3, r6
 800e7b8:	60a3      	str	r3, [r4, #8]
 800e7ba:	6823      	ldr	r3, [r4, #0]
 800e7bc:	4433      	add	r3, r6
 800e7be:	6023      	str	r3, [r4, #0]
 800e7c0:	2000      	movs	r0, #0
 800e7c2:	e7db      	b.n	800e77c <__ssputs_r+0x58>
 800e7c4:	462a      	mov	r2, r5
 800e7c6:	f000 f99b 	bl	800eb00 <_realloc_r>
 800e7ca:	4606      	mov	r6, r0
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	d1e1      	bne.n	800e794 <__ssputs_r+0x70>
 800e7d0:	6921      	ldr	r1, [r4, #16]
 800e7d2:	4650      	mov	r0, sl
 800e7d4:	f7ff fec6 	bl	800e564 <_free_r>
 800e7d8:	e7c7      	b.n	800e76a <__ssputs_r+0x46>
	...

0800e7dc <_svfiprintf_r>:
 800e7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e0:	4698      	mov	r8, r3
 800e7e2:	898b      	ldrh	r3, [r1, #12]
 800e7e4:	061b      	lsls	r3, r3, #24
 800e7e6:	b09d      	sub	sp, #116	; 0x74
 800e7e8:	4607      	mov	r7, r0
 800e7ea:	460d      	mov	r5, r1
 800e7ec:	4614      	mov	r4, r2
 800e7ee:	d50e      	bpl.n	800e80e <_svfiprintf_r+0x32>
 800e7f0:	690b      	ldr	r3, [r1, #16]
 800e7f2:	b963      	cbnz	r3, 800e80e <_svfiprintf_r+0x32>
 800e7f4:	2140      	movs	r1, #64	; 0x40
 800e7f6:	f7ff ff21 	bl	800e63c <_malloc_r>
 800e7fa:	6028      	str	r0, [r5, #0]
 800e7fc:	6128      	str	r0, [r5, #16]
 800e7fe:	b920      	cbnz	r0, 800e80a <_svfiprintf_r+0x2e>
 800e800:	230c      	movs	r3, #12
 800e802:	603b      	str	r3, [r7, #0]
 800e804:	f04f 30ff 	mov.w	r0, #4294967295
 800e808:	e0d1      	b.n	800e9ae <_svfiprintf_r+0x1d2>
 800e80a:	2340      	movs	r3, #64	; 0x40
 800e80c:	616b      	str	r3, [r5, #20]
 800e80e:	2300      	movs	r3, #0
 800e810:	9309      	str	r3, [sp, #36]	; 0x24
 800e812:	2320      	movs	r3, #32
 800e814:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e818:	f8cd 800c 	str.w	r8, [sp, #12]
 800e81c:	2330      	movs	r3, #48	; 0x30
 800e81e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e9c8 <_svfiprintf_r+0x1ec>
 800e822:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e826:	f04f 0901 	mov.w	r9, #1
 800e82a:	4623      	mov	r3, r4
 800e82c:	469a      	mov	sl, r3
 800e82e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e832:	b10a      	cbz	r2, 800e838 <_svfiprintf_r+0x5c>
 800e834:	2a25      	cmp	r2, #37	; 0x25
 800e836:	d1f9      	bne.n	800e82c <_svfiprintf_r+0x50>
 800e838:	ebba 0b04 	subs.w	fp, sl, r4
 800e83c:	d00b      	beq.n	800e856 <_svfiprintf_r+0x7a>
 800e83e:	465b      	mov	r3, fp
 800e840:	4622      	mov	r2, r4
 800e842:	4629      	mov	r1, r5
 800e844:	4638      	mov	r0, r7
 800e846:	f7ff ff6d 	bl	800e724 <__ssputs_r>
 800e84a:	3001      	adds	r0, #1
 800e84c:	f000 80aa 	beq.w	800e9a4 <_svfiprintf_r+0x1c8>
 800e850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e852:	445a      	add	r2, fp
 800e854:	9209      	str	r2, [sp, #36]	; 0x24
 800e856:	f89a 3000 	ldrb.w	r3, [sl]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	f000 80a2 	beq.w	800e9a4 <_svfiprintf_r+0x1c8>
 800e860:	2300      	movs	r3, #0
 800e862:	f04f 32ff 	mov.w	r2, #4294967295
 800e866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e86a:	f10a 0a01 	add.w	sl, sl, #1
 800e86e:	9304      	str	r3, [sp, #16]
 800e870:	9307      	str	r3, [sp, #28]
 800e872:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e876:	931a      	str	r3, [sp, #104]	; 0x68
 800e878:	4654      	mov	r4, sl
 800e87a:	2205      	movs	r2, #5
 800e87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e880:	4851      	ldr	r0, [pc, #324]	; (800e9c8 <_svfiprintf_r+0x1ec>)
 800e882:	f7f1 fd35 	bl	80002f0 <memchr>
 800e886:	9a04      	ldr	r2, [sp, #16]
 800e888:	b9d8      	cbnz	r0, 800e8c2 <_svfiprintf_r+0xe6>
 800e88a:	06d0      	lsls	r0, r2, #27
 800e88c:	bf44      	itt	mi
 800e88e:	2320      	movmi	r3, #32
 800e890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e894:	0711      	lsls	r1, r2, #28
 800e896:	bf44      	itt	mi
 800e898:	232b      	movmi	r3, #43	; 0x2b
 800e89a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e89e:	f89a 3000 	ldrb.w	r3, [sl]
 800e8a2:	2b2a      	cmp	r3, #42	; 0x2a
 800e8a4:	d015      	beq.n	800e8d2 <_svfiprintf_r+0xf6>
 800e8a6:	9a07      	ldr	r2, [sp, #28]
 800e8a8:	4654      	mov	r4, sl
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	f04f 0c0a 	mov.w	ip, #10
 800e8b0:	4621      	mov	r1, r4
 800e8b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8b6:	3b30      	subs	r3, #48	; 0x30
 800e8b8:	2b09      	cmp	r3, #9
 800e8ba:	d94e      	bls.n	800e95a <_svfiprintf_r+0x17e>
 800e8bc:	b1b0      	cbz	r0, 800e8ec <_svfiprintf_r+0x110>
 800e8be:	9207      	str	r2, [sp, #28]
 800e8c0:	e014      	b.n	800e8ec <_svfiprintf_r+0x110>
 800e8c2:	eba0 0308 	sub.w	r3, r0, r8
 800e8c6:	fa09 f303 	lsl.w	r3, r9, r3
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	9304      	str	r3, [sp, #16]
 800e8ce:	46a2      	mov	sl, r4
 800e8d0:	e7d2      	b.n	800e878 <_svfiprintf_r+0x9c>
 800e8d2:	9b03      	ldr	r3, [sp, #12]
 800e8d4:	1d19      	adds	r1, r3, #4
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	9103      	str	r1, [sp, #12]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	bfbb      	ittet	lt
 800e8de:	425b      	neglt	r3, r3
 800e8e0:	f042 0202 	orrlt.w	r2, r2, #2
 800e8e4:	9307      	strge	r3, [sp, #28]
 800e8e6:	9307      	strlt	r3, [sp, #28]
 800e8e8:	bfb8      	it	lt
 800e8ea:	9204      	strlt	r2, [sp, #16]
 800e8ec:	7823      	ldrb	r3, [r4, #0]
 800e8ee:	2b2e      	cmp	r3, #46	; 0x2e
 800e8f0:	d10c      	bne.n	800e90c <_svfiprintf_r+0x130>
 800e8f2:	7863      	ldrb	r3, [r4, #1]
 800e8f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e8f6:	d135      	bne.n	800e964 <_svfiprintf_r+0x188>
 800e8f8:	9b03      	ldr	r3, [sp, #12]
 800e8fa:	1d1a      	adds	r2, r3, #4
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	9203      	str	r2, [sp, #12]
 800e900:	2b00      	cmp	r3, #0
 800e902:	bfb8      	it	lt
 800e904:	f04f 33ff 	movlt.w	r3, #4294967295
 800e908:	3402      	adds	r4, #2
 800e90a:	9305      	str	r3, [sp, #20]
 800e90c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e9d8 <_svfiprintf_r+0x1fc>
 800e910:	7821      	ldrb	r1, [r4, #0]
 800e912:	2203      	movs	r2, #3
 800e914:	4650      	mov	r0, sl
 800e916:	f7f1 fceb 	bl	80002f0 <memchr>
 800e91a:	b140      	cbz	r0, 800e92e <_svfiprintf_r+0x152>
 800e91c:	2340      	movs	r3, #64	; 0x40
 800e91e:	eba0 000a 	sub.w	r0, r0, sl
 800e922:	fa03 f000 	lsl.w	r0, r3, r0
 800e926:	9b04      	ldr	r3, [sp, #16]
 800e928:	4303      	orrs	r3, r0
 800e92a:	3401      	adds	r4, #1
 800e92c:	9304      	str	r3, [sp, #16]
 800e92e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e932:	4826      	ldr	r0, [pc, #152]	; (800e9cc <_svfiprintf_r+0x1f0>)
 800e934:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e938:	2206      	movs	r2, #6
 800e93a:	f7f1 fcd9 	bl	80002f0 <memchr>
 800e93e:	2800      	cmp	r0, #0
 800e940:	d038      	beq.n	800e9b4 <_svfiprintf_r+0x1d8>
 800e942:	4b23      	ldr	r3, [pc, #140]	; (800e9d0 <_svfiprintf_r+0x1f4>)
 800e944:	bb1b      	cbnz	r3, 800e98e <_svfiprintf_r+0x1b2>
 800e946:	9b03      	ldr	r3, [sp, #12]
 800e948:	3307      	adds	r3, #7
 800e94a:	f023 0307 	bic.w	r3, r3, #7
 800e94e:	3308      	adds	r3, #8
 800e950:	9303      	str	r3, [sp, #12]
 800e952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e954:	4433      	add	r3, r6
 800e956:	9309      	str	r3, [sp, #36]	; 0x24
 800e958:	e767      	b.n	800e82a <_svfiprintf_r+0x4e>
 800e95a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e95e:	460c      	mov	r4, r1
 800e960:	2001      	movs	r0, #1
 800e962:	e7a5      	b.n	800e8b0 <_svfiprintf_r+0xd4>
 800e964:	2300      	movs	r3, #0
 800e966:	3401      	adds	r4, #1
 800e968:	9305      	str	r3, [sp, #20]
 800e96a:	4619      	mov	r1, r3
 800e96c:	f04f 0c0a 	mov.w	ip, #10
 800e970:	4620      	mov	r0, r4
 800e972:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e976:	3a30      	subs	r2, #48	; 0x30
 800e978:	2a09      	cmp	r2, #9
 800e97a:	d903      	bls.n	800e984 <_svfiprintf_r+0x1a8>
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d0c5      	beq.n	800e90c <_svfiprintf_r+0x130>
 800e980:	9105      	str	r1, [sp, #20]
 800e982:	e7c3      	b.n	800e90c <_svfiprintf_r+0x130>
 800e984:	fb0c 2101 	mla	r1, ip, r1, r2
 800e988:	4604      	mov	r4, r0
 800e98a:	2301      	movs	r3, #1
 800e98c:	e7f0      	b.n	800e970 <_svfiprintf_r+0x194>
 800e98e:	ab03      	add	r3, sp, #12
 800e990:	9300      	str	r3, [sp, #0]
 800e992:	462a      	mov	r2, r5
 800e994:	4b0f      	ldr	r3, [pc, #60]	; (800e9d4 <_svfiprintf_r+0x1f8>)
 800e996:	a904      	add	r1, sp, #16
 800e998:	4638      	mov	r0, r7
 800e99a:	f7fc fb41 	bl	800b020 <_printf_float>
 800e99e:	1c42      	adds	r2, r0, #1
 800e9a0:	4606      	mov	r6, r0
 800e9a2:	d1d6      	bne.n	800e952 <_svfiprintf_r+0x176>
 800e9a4:	89ab      	ldrh	r3, [r5, #12]
 800e9a6:	065b      	lsls	r3, r3, #25
 800e9a8:	f53f af2c 	bmi.w	800e804 <_svfiprintf_r+0x28>
 800e9ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9ae:	b01d      	add	sp, #116	; 0x74
 800e9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b4:	ab03      	add	r3, sp, #12
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	462a      	mov	r2, r5
 800e9ba:	4b06      	ldr	r3, [pc, #24]	; (800e9d4 <_svfiprintf_r+0x1f8>)
 800e9bc:	a904      	add	r1, sp, #16
 800e9be:	4638      	mov	r0, r7
 800e9c0:	f7fc fdba 	bl	800b538 <_printf_i>
 800e9c4:	e7eb      	b.n	800e99e <_svfiprintf_r+0x1c2>
 800e9c6:	bf00      	nop
 800e9c8:	0800fa4c 	.word	0x0800fa4c
 800e9cc:	0800fa56 	.word	0x0800fa56
 800e9d0:	0800b021 	.word	0x0800b021
 800e9d4:	0800e725 	.word	0x0800e725
 800e9d8:	0800fa52 	.word	0x0800fa52
 800e9dc:	00000000 	.word	0x00000000

0800e9e0 <nan>:
 800e9e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e9e8 <nan+0x8>
 800e9e4:	4770      	bx	lr
 800e9e6:	bf00      	nop
 800e9e8:	00000000 	.word	0x00000000
 800e9ec:	7ff80000 	.word	0x7ff80000

0800e9f0 <_sbrk_r>:
 800e9f0:	b538      	push	{r3, r4, r5, lr}
 800e9f2:	4d06      	ldr	r5, [pc, #24]	; (800ea0c <_sbrk_r+0x1c>)
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	4604      	mov	r4, r0
 800e9f8:	4608      	mov	r0, r1
 800e9fa:	602b      	str	r3, [r5, #0]
 800e9fc:	f7f2 fe24 	bl	8001648 <_sbrk>
 800ea00:	1c43      	adds	r3, r0, #1
 800ea02:	d102      	bne.n	800ea0a <_sbrk_r+0x1a>
 800ea04:	682b      	ldr	r3, [r5, #0]
 800ea06:	b103      	cbz	r3, 800ea0a <_sbrk_r+0x1a>
 800ea08:	6023      	str	r3, [r4, #0]
 800ea0a:	bd38      	pop	{r3, r4, r5, pc}
 800ea0c:	24000528 	.word	0x24000528

0800ea10 <strncmp>:
 800ea10:	b510      	push	{r4, lr}
 800ea12:	b17a      	cbz	r2, 800ea34 <strncmp+0x24>
 800ea14:	4603      	mov	r3, r0
 800ea16:	3901      	subs	r1, #1
 800ea18:	1884      	adds	r4, r0, r2
 800ea1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ea1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ea22:	4290      	cmp	r0, r2
 800ea24:	d101      	bne.n	800ea2a <strncmp+0x1a>
 800ea26:	42a3      	cmp	r3, r4
 800ea28:	d101      	bne.n	800ea2e <strncmp+0x1e>
 800ea2a:	1a80      	subs	r0, r0, r2
 800ea2c:	bd10      	pop	{r4, pc}
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	d1f3      	bne.n	800ea1a <strncmp+0xa>
 800ea32:	e7fa      	b.n	800ea2a <strncmp+0x1a>
 800ea34:	4610      	mov	r0, r2
 800ea36:	e7f9      	b.n	800ea2c <strncmp+0x1c>

0800ea38 <__ascii_wctomb>:
 800ea38:	b149      	cbz	r1, 800ea4e <__ascii_wctomb+0x16>
 800ea3a:	2aff      	cmp	r2, #255	; 0xff
 800ea3c:	bf85      	ittet	hi
 800ea3e:	238a      	movhi	r3, #138	; 0x8a
 800ea40:	6003      	strhi	r3, [r0, #0]
 800ea42:	700a      	strbls	r2, [r1, #0]
 800ea44:	f04f 30ff 	movhi.w	r0, #4294967295
 800ea48:	bf98      	it	ls
 800ea4a:	2001      	movls	r0, #1
 800ea4c:	4770      	bx	lr
 800ea4e:	4608      	mov	r0, r1
 800ea50:	4770      	bx	lr
	...

0800ea54 <__assert_func>:
 800ea54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea56:	4614      	mov	r4, r2
 800ea58:	461a      	mov	r2, r3
 800ea5a:	4b09      	ldr	r3, [pc, #36]	; (800ea80 <__assert_func+0x2c>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4605      	mov	r5, r0
 800ea60:	68d8      	ldr	r0, [r3, #12]
 800ea62:	b14c      	cbz	r4, 800ea78 <__assert_func+0x24>
 800ea64:	4b07      	ldr	r3, [pc, #28]	; (800ea84 <__assert_func+0x30>)
 800ea66:	9100      	str	r1, [sp, #0]
 800ea68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea6c:	4906      	ldr	r1, [pc, #24]	; (800ea88 <__assert_func+0x34>)
 800ea6e:	462b      	mov	r3, r5
 800ea70:	f000 f80e 	bl	800ea90 <fiprintf>
 800ea74:	f000 fa8c 	bl	800ef90 <abort>
 800ea78:	4b04      	ldr	r3, [pc, #16]	; (800ea8c <__assert_func+0x38>)
 800ea7a:	461c      	mov	r4, r3
 800ea7c:	e7f3      	b.n	800ea66 <__assert_func+0x12>
 800ea7e:	bf00      	nop
 800ea80:	24000010 	.word	0x24000010
 800ea84:	0800fa5d 	.word	0x0800fa5d
 800ea88:	0800fa6a 	.word	0x0800fa6a
 800ea8c:	0800fa98 	.word	0x0800fa98

0800ea90 <fiprintf>:
 800ea90:	b40e      	push	{r1, r2, r3}
 800ea92:	b503      	push	{r0, r1, lr}
 800ea94:	4601      	mov	r1, r0
 800ea96:	ab03      	add	r3, sp, #12
 800ea98:	4805      	ldr	r0, [pc, #20]	; (800eab0 <fiprintf+0x20>)
 800ea9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea9e:	6800      	ldr	r0, [r0, #0]
 800eaa0:	9301      	str	r3, [sp, #4]
 800eaa2:	f000 f885 	bl	800ebb0 <_vfiprintf_r>
 800eaa6:	b002      	add	sp, #8
 800eaa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eaac:	b003      	add	sp, #12
 800eaae:	4770      	bx	lr
 800eab0:	24000010 	.word	0x24000010

0800eab4 <memmove>:
 800eab4:	4288      	cmp	r0, r1
 800eab6:	b510      	push	{r4, lr}
 800eab8:	eb01 0402 	add.w	r4, r1, r2
 800eabc:	d902      	bls.n	800eac4 <memmove+0x10>
 800eabe:	4284      	cmp	r4, r0
 800eac0:	4623      	mov	r3, r4
 800eac2:	d807      	bhi.n	800ead4 <memmove+0x20>
 800eac4:	1e43      	subs	r3, r0, #1
 800eac6:	42a1      	cmp	r1, r4
 800eac8:	d008      	beq.n	800eadc <memmove+0x28>
 800eaca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eace:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ead2:	e7f8      	b.n	800eac6 <memmove+0x12>
 800ead4:	4402      	add	r2, r0
 800ead6:	4601      	mov	r1, r0
 800ead8:	428a      	cmp	r2, r1
 800eada:	d100      	bne.n	800eade <memmove+0x2a>
 800eadc:	bd10      	pop	{r4, pc}
 800eade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eae6:	e7f7      	b.n	800ead8 <memmove+0x24>

0800eae8 <__malloc_lock>:
 800eae8:	4801      	ldr	r0, [pc, #4]	; (800eaf0 <__malloc_lock+0x8>)
 800eaea:	f000 bc11 	b.w	800f310 <__retarget_lock_acquire_recursive>
 800eaee:	bf00      	nop
 800eaf0:	2400052c 	.word	0x2400052c

0800eaf4 <__malloc_unlock>:
 800eaf4:	4801      	ldr	r0, [pc, #4]	; (800eafc <__malloc_unlock+0x8>)
 800eaf6:	f000 bc0c 	b.w	800f312 <__retarget_lock_release_recursive>
 800eafa:	bf00      	nop
 800eafc:	2400052c 	.word	0x2400052c

0800eb00 <_realloc_r>:
 800eb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb04:	4680      	mov	r8, r0
 800eb06:	4614      	mov	r4, r2
 800eb08:	460e      	mov	r6, r1
 800eb0a:	b921      	cbnz	r1, 800eb16 <_realloc_r+0x16>
 800eb0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb10:	4611      	mov	r1, r2
 800eb12:	f7ff bd93 	b.w	800e63c <_malloc_r>
 800eb16:	b92a      	cbnz	r2, 800eb24 <_realloc_r+0x24>
 800eb18:	f7ff fd24 	bl	800e564 <_free_r>
 800eb1c:	4625      	mov	r5, r4
 800eb1e:	4628      	mov	r0, r5
 800eb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb24:	f000 fc5c 	bl	800f3e0 <_malloc_usable_size_r>
 800eb28:	4284      	cmp	r4, r0
 800eb2a:	4607      	mov	r7, r0
 800eb2c:	d802      	bhi.n	800eb34 <_realloc_r+0x34>
 800eb2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eb32:	d812      	bhi.n	800eb5a <_realloc_r+0x5a>
 800eb34:	4621      	mov	r1, r4
 800eb36:	4640      	mov	r0, r8
 800eb38:	f7ff fd80 	bl	800e63c <_malloc_r>
 800eb3c:	4605      	mov	r5, r0
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	d0ed      	beq.n	800eb1e <_realloc_r+0x1e>
 800eb42:	42bc      	cmp	r4, r7
 800eb44:	4622      	mov	r2, r4
 800eb46:	4631      	mov	r1, r6
 800eb48:	bf28      	it	cs
 800eb4a:	463a      	movcs	r2, r7
 800eb4c:	f7ff f828 	bl	800dba0 <memcpy>
 800eb50:	4631      	mov	r1, r6
 800eb52:	4640      	mov	r0, r8
 800eb54:	f7ff fd06 	bl	800e564 <_free_r>
 800eb58:	e7e1      	b.n	800eb1e <_realloc_r+0x1e>
 800eb5a:	4635      	mov	r5, r6
 800eb5c:	e7df      	b.n	800eb1e <_realloc_r+0x1e>

0800eb5e <__sfputc_r>:
 800eb5e:	6893      	ldr	r3, [r2, #8]
 800eb60:	3b01      	subs	r3, #1
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	b410      	push	{r4}
 800eb66:	6093      	str	r3, [r2, #8]
 800eb68:	da08      	bge.n	800eb7c <__sfputc_r+0x1e>
 800eb6a:	6994      	ldr	r4, [r2, #24]
 800eb6c:	42a3      	cmp	r3, r4
 800eb6e:	db01      	blt.n	800eb74 <__sfputc_r+0x16>
 800eb70:	290a      	cmp	r1, #10
 800eb72:	d103      	bne.n	800eb7c <__sfputc_r+0x1e>
 800eb74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb78:	f000 b94a 	b.w	800ee10 <__swbuf_r>
 800eb7c:	6813      	ldr	r3, [r2, #0]
 800eb7e:	1c58      	adds	r0, r3, #1
 800eb80:	6010      	str	r0, [r2, #0]
 800eb82:	7019      	strb	r1, [r3, #0]
 800eb84:	4608      	mov	r0, r1
 800eb86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb8a:	4770      	bx	lr

0800eb8c <__sfputs_r>:
 800eb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb8e:	4606      	mov	r6, r0
 800eb90:	460f      	mov	r7, r1
 800eb92:	4614      	mov	r4, r2
 800eb94:	18d5      	adds	r5, r2, r3
 800eb96:	42ac      	cmp	r4, r5
 800eb98:	d101      	bne.n	800eb9e <__sfputs_r+0x12>
 800eb9a:	2000      	movs	r0, #0
 800eb9c:	e007      	b.n	800ebae <__sfputs_r+0x22>
 800eb9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eba2:	463a      	mov	r2, r7
 800eba4:	4630      	mov	r0, r6
 800eba6:	f7ff ffda 	bl	800eb5e <__sfputc_r>
 800ebaa:	1c43      	adds	r3, r0, #1
 800ebac:	d1f3      	bne.n	800eb96 <__sfputs_r+0xa>
 800ebae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ebb0 <_vfiprintf_r>:
 800ebb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb4:	460d      	mov	r5, r1
 800ebb6:	b09d      	sub	sp, #116	; 0x74
 800ebb8:	4614      	mov	r4, r2
 800ebba:	4698      	mov	r8, r3
 800ebbc:	4606      	mov	r6, r0
 800ebbe:	b118      	cbz	r0, 800ebc8 <_vfiprintf_r+0x18>
 800ebc0:	6983      	ldr	r3, [r0, #24]
 800ebc2:	b90b      	cbnz	r3, 800ebc8 <_vfiprintf_r+0x18>
 800ebc4:	f000 fb06 	bl	800f1d4 <__sinit>
 800ebc8:	4b89      	ldr	r3, [pc, #548]	; (800edf0 <_vfiprintf_r+0x240>)
 800ebca:	429d      	cmp	r5, r3
 800ebcc:	d11b      	bne.n	800ec06 <_vfiprintf_r+0x56>
 800ebce:	6875      	ldr	r5, [r6, #4]
 800ebd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebd2:	07d9      	lsls	r1, r3, #31
 800ebd4:	d405      	bmi.n	800ebe2 <_vfiprintf_r+0x32>
 800ebd6:	89ab      	ldrh	r3, [r5, #12]
 800ebd8:	059a      	lsls	r2, r3, #22
 800ebda:	d402      	bmi.n	800ebe2 <_vfiprintf_r+0x32>
 800ebdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebde:	f000 fb97 	bl	800f310 <__retarget_lock_acquire_recursive>
 800ebe2:	89ab      	ldrh	r3, [r5, #12]
 800ebe4:	071b      	lsls	r3, r3, #28
 800ebe6:	d501      	bpl.n	800ebec <_vfiprintf_r+0x3c>
 800ebe8:	692b      	ldr	r3, [r5, #16]
 800ebea:	b9eb      	cbnz	r3, 800ec28 <_vfiprintf_r+0x78>
 800ebec:	4629      	mov	r1, r5
 800ebee:	4630      	mov	r0, r6
 800ebf0:	f000 f960 	bl	800eeb4 <__swsetup_r>
 800ebf4:	b1c0      	cbz	r0, 800ec28 <_vfiprintf_r+0x78>
 800ebf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebf8:	07dc      	lsls	r4, r3, #31
 800ebfa:	d50e      	bpl.n	800ec1a <_vfiprintf_r+0x6a>
 800ebfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ec00:	b01d      	add	sp, #116	; 0x74
 800ec02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec06:	4b7b      	ldr	r3, [pc, #492]	; (800edf4 <_vfiprintf_r+0x244>)
 800ec08:	429d      	cmp	r5, r3
 800ec0a:	d101      	bne.n	800ec10 <_vfiprintf_r+0x60>
 800ec0c:	68b5      	ldr	r5, [r6, #8]
 800ec0e:	e7df      	b.n	800ebd0 <_vfiprintf_r+0x20>
 800ec10:	4b79      	ldr	r3, [pc, #484]	; (800edf8 <_vfiprintf_r+0x248>)
 800ec12:	429d      	cmp	r5, r3
 800ec14:	bf08      	it	eq
 800ec16:	68f5      	ldreq	r5, [r6, #12]
 800ec18:	e7da      	b.n	800ebd0 <_vfiprintf_r+0x20>
 800ec1a:	89ab      	ldrh	r3, [r5, #12]
 800ec1c:	0598      	lsls	r0, r3, #22
 800ec1e:	d4ed      	bmi.n	800ebfc <_vfiprintf_r+0x4c>
 800ec20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec22:	f000 fb76 	bl	800f312 <__retarget_lock_release_recursive>
 800ec26:	e7e9      	b.n	800ebfc <_vfiprintf_r+0x4c>
 800ec28:	2300      	movs	r3, #0
 800ec2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec2c:	2320      	movs	r3, #32
 800ec2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec32:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec36:	2330      	movs	r3, #48	; 0x30
 800ec38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800edfc <_vfiprintf_r+0x24c>
 800ec3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec40:	f04f 0901 	mov.w	r9, #1
 800ec44:	4623      	mov	r3, r4
 800ec46:	469a      	mov	sl, r3
 800ec48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec4c:	b10a      	cbz	r2, 800ec52 <_vfiprintf_r+0xa2>
 800ec4e:	2a25      	cmp	r2, #37	; 0x25
 800ec50:	d1f9      	bne.n	800ec46 <_vfiprintf_r+0x96>
 800ec52:	ebba 0b04 	subs.w	fp, sl, r4
 800ec56:	d00b      	beq.n	800ec70 <_vfiprintf_r+0xc0>
 800ec58:	465b      	mov	r3, fp
 800ec5a:	4622      	mov	r2, r4
 800ec5c:	4629      	mov	r1, r5
 800ec5e:	4630      	mov	r0, r6
 800ec60:	f7ff ff94 	bl	800eb8c <__sfputs_r>
 800ec64:	3001      	adds	r0, #1
 800ec66:	f000 80aa 	beq.w	800edbe <_vfiprintf_r+0x20e>
 800ec6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec6c:	445a      	add	r2, fp
 800ec6e:	9209      	str	r2, [sp, #36]	; 0x24
 800ec70:	f89a 3000 	ldrb.w	r3, [sl]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f000 80a2 	beq.w	800edbe <_vfiprintf_r+0x20e>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec84:	f10a 0a01 	add.w	sl, sl, #1
 800ec88:	9304      	str	r3, [sp, #16]
 800ec8a:	9307      	str	r3, [sp, #28]
 800ec8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec90:	931a      	str	r3, [sp, #104]	; 0x68
 800ec92:	4654      	mov	r4, sl
 800ec94:	2205      	movs	r2, #5
 800ec96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec9a:	4858      	ldr	r0, [pc, #352]	; (800edfc <_vfiprintf_r+0x24c>)
 800ec9c:	f7f1 fb28 	bl	80002f0 <memchr>
 800eca0:	9a04      	ldr	r2, [sp, #16]
 800eca2:	b9d8      	cbnz	r0, 800ecdc <_vfiprintf_r+0x12c>
 800eca4:	06d1      	lsls	r1, r2, #27
 800eca6:	bf44      	itt	mi
 800eca8:	2320      	movmi	r3, #32
 800ecaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecae:	0713      	lsls	r3, r2, #28
 800ecb0:	bf44      	itt	mi
 800ecb2:	232b      	movmi	r3, #43	; 0x2b
 800ecb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecb8:	f89a 3000 	ldrb.w	r3, [sl]
 800ecbc:	2b2a      	cmp	r3, #42	; 0x2a
 800ecbe:	d015      	beq.n	800ecec <_vfiprintf_r+0x13c>
 800ecc0:	9a07      	ldr	r2, [sp, #28]
 800ecc2:	4654      	mov	r4, sl
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	f04f 0c0a 	mov.w	ip, #10
 800ecca:	4621      	mov	r1, r4
 800eccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecd0:	3b30      	subs	r3, #48	; 0x30
 800ecd2:	2b09      	cmp	r3, #9
 800ecd4:	d94e      	bls.n	800ed74 <_vfiprintf_r+0x1c4>
 800ecd6:	b1b0      	cbz	r0, 800ed06 <_vfiprintf_r+0x156>
 800ecd8:	9207      	str	r2, [sp, #28]
 800ecda:	e014      	b.n	800ed06 <_vfiprintf_r+0x156>
 800ecdc:	eba0 0308 	sub.w	r3, r0, r8
 800ece0:	fa09 f303 	lsl.w	r3, r9, r3
 800ece4:	4313      	orrs	r3, r2
 800ece6:	9304      	str	r3, [sp, #16]
 800ece8:	46a2      	mov	sl, r4
 800ecea:	e7d2      	b.n	800ec92 <_vfiprintf_r+0xe2>
 800ecec:	9b03      	ldr	r3, [sp, #12]
 800ecee:	1d19      	adds	r1, r3, #4
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	9103      	str	r1, [sp, #12]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	bfbb      	ittet	lt
 800ecf8:	425b      	neglt	r3, r3
 800ecfa:	f042 0202 	orrlt.w	r2, r2, #2
 800ecfe:	9307      	strge	r3, [sp, #28]
 800ed00:	9307      	strlt	r3, [sp, #28]
 800ed02:	bfb8      	it	lt
 800ed04:	9204      	strlt	r2, [sp, #16]
 800ed06:	7823      	ldrb	r3, [r4, #0]
 800ed08:	2b2e      	cmp	r3, #46	; 0x2e
 800ed0a:	d10c      	bne.n	800ed26 <_vfiprintf_r+0x176>
 800ed0c:	7863      	ldrb	r3, [r4, #1]
 800ed0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ed10:	d135      	bne.n	800ed7e <_vfiprintf_r+0x1ce>
 800ed12:	9b03      	ldr	r3, [sp, #12]
 800ed14:	1d1a      	adds	r2, r3, #4
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	9203      	str	r2, [sp, #12]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	bfb8      	it	lt
 800ed1e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed22:	3402      	adds	r4, #2
 800ed24:	9305      	str	r3, [sp, #20]
 800ed26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ee0c <_vfiprintf_r+0x25c>
 800ed2a:	7821      	ldrb	r1, [r4, #0]
 800ed2c:	2203      	movs	r2, #3
 800ed2e:	4650      	mov	r0, sl
 800ed30:	f7f1 fade 	bl	80002f0 <memchr>
 800ed34:	b140      	cbz	r0, 800ed48 <_vfiprintf_r+0x198>
 800ed36:	2340      	movs	r3, #64	; 0x40
 800ed38:	eba0 000a 	sub.w	r0, r0, sl
 800ed3c:	fa03 f000 	lsl.w	r0, r3, r0
 800ed40:	9b04      	ldr	r3, [sp, #16]
 800ed42:	4303      	orrs	r3, r0
 800ed44:	3401      	adds	r4, #1
 800ed46:	9304      	str	r3, [sp, #16]
 800ed48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed4c:	482c      	ldr	r0, [pc, #176]	; (800ee00 <_vfiprintf_r+0x250>)
 800ed4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed52:	2206      	movs	r2, #6
 800ed54:	f7f1 facc 	bl	80002f0 <memchr>
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	d03f      	beq.n	800eddc <_vfiprintf_r+0x22c>
 800ed5c:	4b29      	ldr	r3, [pc, #164]	; (800ee04 <_vfiprintf_r+0x254>)
 800ed5e:	bb1b      	cbnz	r3, 800eda8 <_vfiprintf_r+0x1f8>
 800ed60:	9b03      	ldr	r3, [sp, #12]
 800ed62:	3307      	adds	r3, #7
 800ed64:	f023 0307 	bic.w	r3, r3, #7
 800ed68:	3308      	adds	r3, #8
 800ed6a:	9303      	str	r3, [sp, #12]
 800ed6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed6e:	443b      	add	r3, r7
 800ed70:	9309      	str	r3, [sp, #36]	; 0x24
 800ed72:	e767      	b.n	800ec44 <_vfiprintf_r+0x94>
 800ed74:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed78:	460c      	mov	r4, r1
 800ed7a:	2001      	movs	r0, #1
 800ed7c:	e7a5      	b.n	800ecca <_vfiprintf_r+0x11a>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	3401      	adds	r4, #1
 800ed82:	9305      	str	r3, [sp, #20]
 800ed84:	4619      	mov	r1, r3
 800ed86:	f04f 0c0a 	mov.w	ip, #10
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed90:	3a30      	subs	r2, #48	; 0x30
 800ed92:	2a09      	cmp	r2, #9
 800ed94:	d903      	bls.n	800ed9e <_vfiprintf_r+0x1ee>
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d0c5      	beq.n	800ed26 <_vfiprintf_r+0x176>
 800ed9a:	9105      	str	r1, [sp, #20]
 800ed9c:	e7c3      	b.n	800ed26 <_vfiprintf_r+0x176>
 800ed9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800eda2:	4604      	mov	r4, r0
 800eda4:	2301      	movs	r3, #1
 800eda6:	e7f0      	b.n	800ed8a <_vfiprintf_r+0x1da>
 800eda8:	ab03      	add	r3, sp, #12
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	462a      	mov	r2, r5
 800edae:	4b16      	ldr	r3, [pc, #88]	; (800ee08 <_vfiprintf_r+0x258>)
 800edb0:	a904      	add	r1, sp, #16
 800edb2:	4630      	mov	r0, r6
 800edb4:	f7fc f934 	bl	800b020 <_printf_float>
 800edb8:	4607      	mov	r7, r0
 800edba:	1c78      	adds	r0, r7, #1
 800edbc:	d1d6      	bne.n	800ed6c <_vfiprintf_r+0x1bc>
 800edbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edc0:	07d9      	lsls	r1, r3, #31
 800edc2:	d405      	bmi.n	800edd0 <_vfiprintf_r+0x220>
 800edc4:	89ab      	ldrh	r3, [r5, #12]
 800edc6:	059a      	lsls	r2, r3, #22
 800edc8:	d402      	bmi.n	800edd0 <_vfiprintf_r+0x220>
 800edca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edcc:	f000 faa1 	bl	800f312 <__retarget_lock_release_recursive>
 800edd0:	89ab      	ldrh	r3, [r5, #12]
 800edd2:	065b      	lsls	r3, r3, #25
 800edd4:	f53f af12 	bmi.w	800ebfc <_vfiprintf_r+0x4c>
 800edd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edda:	e711      	b.n	800ec00 <_vfiprintf_r+0x50>
 800eddc:	ab03      	add	r3, sp, #12
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	462a      	mov	r2, r5
 800ede2:	4b09      	ldr	r3, [pc, #36]	; (800ee08 <_vfiprintf_r+0x258>)
 800ede4:	a904      	add	r1, sp, #16
 800ede6:	4630      	mov	r0, r6
 800ede8:	f7fc fba6 	bl	800b538 <_printf_i>
 800edec:	e7e4      	b.n	800edb8 <_vfiprintf_r+0x208>
 800edee:	bf00      	nop
 800edf0:	0800fabc 	.word	0x0800fabc
 800edf4:	0800fadc 	.word	0x0800fadc
 800edf8:	0800fa9c 	.word	0x0800fa9c
 800edfc:	0800fa4c 	.word	0x0800fa4c
 800ee00:	0800fa56 	.word	0x0800fa56
 800ee04:	0800b021 	.word	0x0800b021
 800ee08:	0800eb8d 	.word	0x0800eb8d
 800ee0c:	0800fa52 	.word	0x0800fa52

0800ee10 <__swbuf_r>:
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee12:	460e      	mov	r6, r1
 800ee14:	4614      	mov	r4, r2
 800ee16:	4605      	mov	r5, r0
 800ee18:	b118      	cbz	r0, 800ee22 <__swbuf_r+0x12>
 800ee1a:	6983      	ldr	r3, [r0, #24]
 800ee1c:	b90b      	cbnz	r3, 800ee22 <__swbuf_r+0x12>
 800ee1e:	f000 f9d9 	bl	800f1d4 <__sinit>
 800ee22:	4b21      	ldr	r3, [pc, #132]	; (800eea8 <__swbuf_r+0x98>)
 800ee24:	429c      	cmp	r4, r3
 800ee26:	d12b      	bne.n	800ee80 <__swbuf_r+0x70>
 800ee28:	686c      	ldr	r4, [r5, #4]
 800ee2a:	69a3      	ldr	r3, [r4, #24]
 800ee2c:	60a3      	str	r3, [r4, #8]
 800ee2e:	89a3      	ldrh	r3, [r4, #12]
 800ee30:	071a      	lsls	r2, r3, #28
 800ee32:	d52f      	bpl.n	800ee94 <__swbuf_r+0x84>
 800ee34:	6923      	ldr	r3, [r4, #16]
 800ee36:	b36b      	cbz	r3, 800ee94 <__swbuf_r+0x84>
 800ee38:	6923      	ldr	r3, [r4, #16]
 800ee3a:	6820      	ldr	r0, [r4, #0]
 800ee3c:	1ac0      	subs	r0, r0, r3
 800ee3e:	6963      	ldr	r3, [r4, #20]
 800ee40:	b2f6      	uxtb	r6, r6
 800ee42:	4283      	cmp	r3, r0
 800ee44:	4637      	mov	r7, r6
 800ee46:	dc04      	bgt.n	800ee52 <__swbuf_r+0x42>
 800ee48:	4621      	mov	r1, r4
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f000 f92e 	bl	800f0ac <_fflush_r>
 800ee50:	bb30      	cbnz	r0, 800eea0 <__swbuf_r+0x90>
 800ee52:	68a3      	ldr	r3, [r4, #8]
 800ee54:	3b01      	subs	r3, #1
 800ee56:	60a3      	str	r3, [r4, #8]
 800ee58:	6823      	ldr	r3, [r4, #0]
 800ee5a:	1c5a      	adds	r2, r3, #1
 800ee5c:	6022      	str	r2, [r4, #0]
 800ee5e:	701e      	strb	r6, [r3, #0]
 800ee60:	6963      	ldr	r3, [r4, #20]
 800ee62:	3001      	adds	r0, #1
 800ee64:	4283      	cmp	r3, r0
 800ee66:	d004      	beq.n	800ee72 <__swbuf_r+0x62>
 800ee68:	89a3      	ldrh	r3, [r4, #12]
 800ee6a:	07db      	lsls	r3, r3, #31
 800ee6c:	d506      	bpl.n	800ee7c <__swbuf_r+0x6c>
 800ee6e:	2e0a      	cmp	r6, #10
 800ee70:	d104      	bne.n	800ee7c <__swbuf_r+0x6c>
 800ee72:	4621      	mov	r1, r4
 800ee74:	4628      	mov	r0, r5
 800ee76:	f000 f919 	bl	800f0ac <_fflush_r>
 800ee7a:	b988      	cbnz	r0, 800eea0 <__swbuf_r+0x90>
 800ee7c:	4638      	mov	r0, r7
 800ee7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee80:	4b0a      	ldr	r3, [pc, #40]	; (800eeac <__swbuf_r+0x9c>)
 800ee82:	429c      	cmp	r4, r3
 800ee84:	d101      	bne.n	800ee8a <__swbuf_r+0x7a>
 800ee86:	68ac      	ldr	r4, [r5, #8]
 800ee88:	e7cf      	b.n	800ee2a <__swbuf_r+0x1a>
 800ee8a:	4b09      	ldr	r3, [pc, #36]	; (800eeb0 <__swbuf_r+0xa0>)
 800ee8c:	429c      	cmp	r4, r3
 800ee8e:	bf08      	it	eq
 800ee90:	68ec      	ldreq	r4, [r5, #12]
 800ee92:	e7ca      	b.n	800ee2a <__swbuf_r+0x1a>
 800ee94:	4621      	mov	r1, r4
 800ee96:	4628      	mov	r0, r5
 800ee98:	f000 f80c 	bl	800eeb4 <__swsetup_r>
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	d0cb      	beq.n	800ee38 <__swbuf_r+0x28>
 800eea0:	f04f 37ff 	mov.w	r7, #4294967295
 800eea4:	e7ea      	b.n	800ee7c <__swbuf_r+0x6c>
 800eea6:	bf00      	nop
 800eea8:	0800fabc 	.word	0x0800fabc
 800eeac:	0800fadc 	.word	0x0800fadc
 800eeb0:	0800fa9c 	.word	0x0800fa9c

0800eeb4 <__swsetup_r>:
 800eeb4:	4b32      	ldr	r3, [pc, #200]	; (800ef80 <__swsetup_r+0xcc>)
 800eeb6:	b570      	push	{r4, r5, r6, lr}
 800eeb8:	681d      	ldr	r5, [r3, #0]
 800eeba:	4606      	mov	r6, r0
 800eebc:	460c      	mov	r4, r1
 800eebe:	b125      	cbz	r5, 800eeca <__swsetup_r+0x16>
 800eec0:	69ab      	ldr	r3, [r5, #24]
 800eec2:	b913      	cbnz	r3, 800eeca <__swsetup_r+0x16>
 800eec4:	4628      	mov	r0, r5
 800eec6:	f000 f985 	bl	800f1d4 <__sinit>
 800eeca:	4b2e      	ldr	r3, [pc, #184]	; (800ef84 <__swsetup_r+0xd0>)
 800eecc:	429c      	cmp	r4, r3
 800eece:	d10f      	bne.n	800eef0 <__swsetup_r+0x3c>
 800eed0:	686c      	ldr	r4, [r5, #4]
 800eed2:	89a3      	ldrh	r3, [r4, #12]
 800eed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eed8:	0719      	lsls	r1, r3, #28
 800eeda:	d42c      	bmi.n	800ef36 <__swsetup_r+0x82>
 800eedc:	06dd      	lsls	r5, r3, #27
 800eede:	d411      	bmi.n	800ef04 <__swsetup_r+0x50>
 800eee0:	2309      	movs	r3, #9
 800eee2:	6033      	str	r3, [r6, #0]
 800eee4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eee8:	81a3      	strh	r3, [r4, #12]
 800eeea:	f04f 30ff 	mov.w	r0, #4294967295
 800eeee:	e03e      	b.n	800ef6e <__swsetup_r+0xba>
 800eef0:	4b25      	ldr	r3, [pc, #148]	; (800ef88 <__swsetup_r+0xd4>)
 800eef2:	429c      	cmp	r4, r3
 800eef4:	d101      	bne.n	800eefa <__swsetup_r+0x46>
 800eef6:	68ac      	ldr	r4, [r5, #8]
 800eef8:	e7eb      	b.n	800eed2 <__swsetup_r+0x1e>
 800eefa:	4b24      	ldr	r3, [pc, #144]	; (800ef8c <__swsetup_r+0xd8>)
 800eefc:	429c      	cmp	r4, r3
 800eefe:	bf08      	it	eq
 800ef00:	68ec      	ldreq	r4, [r5, #12]
 800ef02:	e7e6      	b.n	800eed2 <__swsetup_r+0x1e>
 800ef04:	0758      	lsls	r0, r3, #29
 800ef06:	d512      	bpl.n	800ef2e <__swsetup_r+0x7a>
 800ef08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef0a:	b141      	cbz	r1, 800ef1e <__swsetup_r+0x6a>
 800ef0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef10:	4299      	cmp	r1, r3
 800ef12:	d002      	beq.n	800ef1a <__swsetup_r+0x66>
 800ef14:	4630      	mov	r0, r6
 800ef16:	f7ff fb25 	bl	800e564 <_free_r>
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	6363      	str	r3, [r4, #52]	; 0x34
 800ef1e:	89a3      	ldrh	r3, [r4, #12]
 800ef20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef24:	81a3      	strh	r3, [r4, #12]
 800ef26:	2300      	movs	r3, #0
 800ef28:	6063      	str	r3, [r4, #4]
 800ef2a:	6923      	ldr	r3, [r4, #16]
 800ef2c:	6023      	str	r3, [r4, #0]
 800ef2e:	89a3      	ldrh	r3, [r4, #12]
 800ef30:	f043 0308 	orr.w	r3, r3, #8
 800ef34:	81a3      	strh	r3, [r4, #12]
 800ef36:	6923      	ldr	r3, [r4, #16]
 800ef38:	b94b      	cbnz	r3, 800ef4e <__swsetup_r+0x9a>
 800ef3a:	89a3      	ldrh	r3, [r4, #12]
 800ef3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef44:	d003      	beq.n	800ef4e <__swsetup_r+0x9a>
 800ef46:	4621      	mov	r1, r4
 800ef48:	4630      	mov	r0, r6
 800ef4a:	f000 fa09 	bl	800f360 <__smakebuf_r>
 800ef4e:	89a0      	ldrh	r0, [r4, #12]
 800ef50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef54:	f010 0301 	ands.w	r3, r0, #1
 800ef58:	d00a      	beq.n	800ef70 <__swsetup_r+0xbc>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	60a3      	str	r3, [r4, #8]
 800ef5e:	6963      	ldr	r3, [r4, #20]
 800ef60:	425b      	negs	r3, r3
 800ef62:	61a3      	str	r3, [r4, #24]
 800ef64:	6923      	ldr	r3, [r4, #16]
 800ef66:	b943      	cbnz	r3, 800ef7a <__swsetup_r+0xc6>
 800ef68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef6c:	d1ba      	bne.n	800eee4 <__swsetup_r+0x30>
 800ef6e:	bd70      	pop	{r4, r5, r6, pc}
 800ef70:	0781      	lsls	r1, r0, #30
 800ef72:	bf58      	it	pl
 800ef74:	6963      	ldrpl	r3, [r4, #20]
 800ef76:	60a3      	str	r3, [r4, #8]
 800ef78:	e7f4      	b.n	800ef64 <__swsetup_r+0xb0>
 800ef7a:	2000      	movs	r0, #0
 800ef7c:	e7f7      	b.n	800ef6e <__swsetup_r+0xba>
 800ef7e:	bf00      	nop
 800ef80:	24000010 	.word	0x24000010
 800ef84:	0800fabc 	.word	0x0800fabc
 800ef88:	0800fadc 	.word	0x0800fadc
 800ef8c:	0800fa9c 	.word	0x0800fa9c

0800ef90 <abort>:
 800ef90:	b508      	push	{r3, lr}
 800ef92:	2006      	movs	r0, #6
 800ef94:	f000 fa54 	bl	800f440 <raise>
 800ef98:	2001      	movs	r0, #1
 800ef9a:	f7f2 fadd 	bl	8001558 <_exit>
	...

0800efa0 <__sflush_r>:
 800efa0:	898a      	ldrh	r2, [r1, #12]
 800efa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa6:	4605      	mov	r5, r0
 800efa8:	0710      	lsls	r0, r2, #28
 800efaa:	460c      	mov	r4, r1
 800efac:	d458      	bmi.n	800f060 <__sflush_r+0xc0>
 800efae:	684b      	ldr	r3, [r1, #4]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	dc05      	bgt.n	800efc0 <__sflush_r+0x20>
 800efb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	dc02      	bgt.n	800efc0 <__sflush_r+0x20>
 800efba:	2000      	movs	r0, #0
 800efbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efc2:	2e00      	cmp	r6, #0
 800efc4:	d0f9      	beq.n	800efba <__sflush_r+0x1a>
 800efc6:	2300      	movs	r3, #0
 800efc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800efcc:	682f      	ldr	r7, [r5, #0]
 800efce:	602b      	str	r3, [r5, #0]
 800efd0:	d032      	beq.n	800f038 <__sflush_r+0x98>
 800efd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800efd4:	89a3      	ldrh	r3, [r4, #12]
 800efd6:	075a      	lsls	r2, r3, #29
 800efd8:	d505      	bpl.n	800efe6 <__sflush_r+0x46>
 800efda:	6863      	ldr	r3, [r4, #4]
 800efdc:	1ac0      	subs	r0, r0, r3
 800efde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800efe0:	b10b      	cbz	r3, 800efe6 <__sflush_r+0x46>
 800efe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800efe4:	1ac0      	subs	r0, r0, r3
 800efe6:	2300      	movs	r3, #0
 800efe8:	4602      	mov	r2, r0
 800efea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efec:	6a21      	ldr	r1, [r4, #32]
 800efee:	4628      	mov	r0, r5
 800eff0:	47b0      	blx	r6
 800eff2:	1c43      	adds	r3, r0, #1
 800eff4:	89a3      	ldrh	r3, [r4, #12]
 800eff6:	d106      	bne.n	800f006 <__sflush_r+0x66>
 800eff8:	6829      	ldr	r1, [r5, #0]
 800effa:	291d      	cmp	r1, #29
 800effc:	d82c      	bhi.n	800f058 <__sflush_r+0xb8>
 800effe:	4a2a      	ldr	r2, [pc, #168]	; (800f0a8 <__sflush_r+0x108>)
 800f000:	40ca      	lsrs	r2, r1
 800f002:	07d6      	lsls	r6, r2, #31
 800f004:	d528      	bpl.n	800f058 <__sflush_r+0xb8>
 800f006:	2200      	movs	r2, #0
 800f008:	6062      	str	r2, [r4, #4]
 800f00a:	04d9      	lsls	r1, r3, #19
 800f00c:	6922      	ldr	r2, [r4, #16]
 800f00e:	6022      	str	r2, [r4, #0]
 800f010:	d504      	bpl.n	800f01c <__sflush_r+0x7c>
 800f012:	1c42      	adds	r2, r0, #1
 800f014:	d101      	bne.n	800f01a <__sflush_r+0x7a>
 800f016:	682b      	ldr	r3, [r5, #0]
 800f018:	b903      	cbnz	r3, 800f01c <__sflush_r+0x7c>
 800f01a:	6560      	str	r0, [r4, #84]	; 0x54
 800f01c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f01e:	602f      	str	r7, [r5, #0]
 800f020:	2900      	cmp	r1, #0
 800f022:	d0ca      	beq.n	800efba <__sflush_r+0x1a>
 800f024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f028:	4299      	cmp	r1, r3
 800f02a:	d002      	beq.n	800f032 <__sflush_r+0x92>
 800f02c:	4628      	mov	r0, r5
 800f02e:	f7ff fa99 	bl	800e564 <_free_r>
 800f032:	2000      	movs	r0, #0
 800f034:	6360      	str	r0, [r4, #52]	; 0x34
 800f036:	e7c1      	b.n	800efbc <__sflush_r+0x1c>
 800f038:	6a21      	ldr	r1, [r4, #32]
 800f03a:	2301      	movs	r3, #1
 800f03c:	4628      	mov	r0, r5
 800f03e:	47b0      	blx	r6
 800f040:	1c41      	adds	r1, r0, #1
 800f042:	d1c7      	bne.n	800efd4 <__sflush_r+0x34>
 800f044:	682b      	ldr	r3, [r5, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d0c4      	beq.n	800efd4 <__sflush_r+0x34>
 800f04a:	2b1d      	cmp	r3, #29
 800f04c:	d001      	beq.n	800f052 <__sflush_r+0xb2>
 800f04e:	2b16      	cmp	r3, #22
 800f050:	d101      	bne.n	800f056 <__sflush_r+0xb6>
 800f052:	602f      	str	r7, [r5, #0]
 800f054:	e7b1      	b.n	800efba <__sflush_r+0x1a>
 800f056:	89a3      	ldrh	r3, [r4, #12]
 800f058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f05c:	81a3      	strh	r3, [r4, #12]
 800f05e:	e7ad      	b.n	800efbc <__sflush_r+0x1c>
 800f060:	690f      	ldr	r7, [r1, #16]
 800f062:	2f00      	cmp	r7, #0
 800f064:	d0a9      	beq.n	800efba <__sflush_r+0x1a>
 800f066:	0793      	lsls	r3, r2, #30
 800f068:	680e      	ldr	r6, [r1, #0]
 800f06a:	bf08      	it	eq
 800f06c:	694b      	ldreq	r3, [r1, #20]
 800f06e:	600f      	str	r7, [r1, #0]
 800f070:	bf18      	it	ne
 800f072:	2300      	movne	r3, #0
 800f074:	eba6 0807 	sub.w	r8, r6, r7
 800f078:	608b      	str	r3, [r1, #8]
 800f07a:	f1b8 0f00 	cmp.w	r8, #0
 800f07e:	dd9c      	ble.n	800efba <__sflush_r+0x1a>
 800f080:	6a21      	ldr	r1, [r4, #32]
 800f082:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f084:	4643      	mov	r3, r8
 800f086:	463a      	mov	r2, r7
 800f088:	4628      	mov	r0, r5
 800f08a:	47b0      	blx	r6
 800f08c:	2800      	cmp	r0, #0
 800f08e:	dc06      	bgt.n	800f09e <__sflush_r+0xfe>
 800f090:	89a3      	ldrh	r3, [r4, #12]
 800f092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f096:	81a3      	strh	r3, [r4, #12]
 800f098:	f04f 30ff 	mov.w	r0, #4294967295
 800f09c:	e78e      	b.n	800efbc <__sflush_r+0x1c>
 800f09e:	4407      	add	r7, r0
 800f0a0:	eba8 0800 	sub.w	r8, r8, r0
 800f0a4:	e7e9      	b.n	800f07a <__sflush_r+0xda>
 800f0a6:	bf00      	nop
 800f0a8:	20400001 	.word	0x20400001

0800f0ac <_fflush_r>:
 800f0ac:	b538      	push	{r3, r4, r5, lr}
 800f0ae:	690b      	ldr	r3, [r1, #16]
 800f0b0:	4605      	mov	r5, r0
 800f0b2:	460c      	mov	r4, r1
 800f0b4:	b913      	cbnz	r3, 800f0bc <_fflush_r+0x10>
 800f0b6:	2500      	movs	r5, #0
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	bd38      	pop	{r3, r4, r5, pc}
 800f0bc:	b118      	cbz	r0, 800f0c6 <_fflush_r+0x1a>
 800f0be:	6983      	ldr	r3, [r0, #24]
 800f0c0:	b90b      	cbnz	r3, 800f0c6 <_fflush_r+0x1a>
 800f0c2:	f000 f887 	bl	800f1d4 <__sinit>
 800f0c6:	4b14      	ldr	r3, [pc, #80]	; (800f118 <_fflush_r+0x6c>)
 800f0c8:	429c      	cmp	r4, r3
 800f0ca:	d11b      	bne.n	800f104 <_fflush_r+0x58>
 800f0cc:	686c      	ldr	r4, [r5, #4]
 800f0ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d0ef      	beq.n	800f0b6 <_fflush_r+0xa>
 800f0d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f0d8:	07d0      	lsls	r0, r2, #31
 800f0da:	d404      	bmi.n	800f0e6 <_fflush_r+0x3a>
 800f0dc:	0599      	lsls	r1, r3, #22
 800f0de:	d402      	bmi.n	800f0e6 <_fflush_r+0x3a>
 800f0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0e2:	f000 f915 	bl	800f310 <__retarget_lock_acquire_recursive>
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	4621      	mov	r1, r4
 800f0ea:	f7ff ff59 	bl	800efa0 <__sflush_r>
 800f0ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0f0:	07da      	lsls	r2, r3, #31
 800f0f2:	4605      	mov	r5, r0
 800f0f4:	d4e0      	bmi.n	800f0b8 <_fflush_r+0xc>
 800f0f6:	89a3      	ldrh	r3, [r4, #12]
 800f0f8:	059b      	lsls	r3, r3, #22
 800f0fa:	d4dd      	bmi.n	800f0b8 <_fflush_r+0xc>
 800f0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0fe:	f000 f908 	bl	800f312 <__retarget_lock_release_recursive>
 800f102:	e7d9      	b.n	800f0b8 <_fflush_r+0xc>
 800f104:	4b05      	ldr	r3, [pc, #20]	; (800f11c <_fflush_r+0x70>)
 800f106:	429c      	cmp	r4, r3
 800f108:	d101      	bne.n	800f10e <_fflush_r+0x62>
 800f10a:	68ac      	ldr	r4, [r5, #8]
 800f10c:	e7df      	b.n	800f0ce <_fflush_r+0x22>
 800f10e:	4b04      	ldr	r3, [pc, #16]	; (800f120 <_fflush_r+0x74>)
 800f110:	429c      	cmp	r4, r3
 800f112:	bf08      	it	eq
 800f114:	68ec      	ldreq	r4, [r5, #12]
 800f116:	e7da      	b.n	800f0ce <_fflush_r+0x22>
 800f118:	0800fabc 	.word	0x0800fabc
 800f11c:	0800fadc 	.word	0x0800fadc
 800f120:	0800fa9c 	.word	0x0800fa9c

0800f124 <std>:
 800f124:	2300      	movs	r3, #0
 800f126:	b510      	push	{r4, lr}
 800f128:	4604      	mov	r4, r0
 800f12a:	e9c0 3300 	strd	r3, r3, [r0]
 800f12e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f132:	6083      	str	r3, [r0, #8]
 800f134:	8181      	strh	r1, [r0, #12]
 800f136:	6643      	str	r3, [r0, #100]	; 0x64
 800f138:	81c2      	strh	r2, [r0, #14]
 800f13a:	6183      	str	r3, [r0, #24]
 800f13c:	4619      	mov	r1, r3
 800f13e:	2208      	movs	r2, #8
 800f140:	305c      	adds	r0, #92	; 0x5c
 800f142:	f7fb fed3 	bl	800aeec <memset>
 800f146:	4b05      	ldr	r3, [pc, #20]	; (800f15c <std+0x38>)
 800f148:	6263      	str	r3, [r4, #36]	; 0x24
 800f14a:	4b05      	ldr	r3, [pc, #20]	; (800f160 <std+0x3c>)
 800f14c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f14e:	4b05      	ldr	r3, [pc, #20]	; (800f164 <std+0x40>)
 800f150:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f152:	4b05      	ldr	r3, [pc, #20]	; (800f168 <std+0x44>)
 800f154:	6224      	str	r4, [r4, #32]
 800f156:	6323      	str	r3, [r4, #48]	; 0x30
 800f158:	bd10      	pop	{r4, pc}
 800f15a:	bf00      	nop
 800f15c:	0800f479 	.word	0x0800f479
 800f160:	0800f49b 	.word	0x0800f49b
 800f164:	0800f4d3 	.word	0x0800f4d3
 800f168:	0800f4f7 	.word	0x0800f4f7

0800f16c <_cleanup_r>:
 800f16c:	4901      	ldr	r1, [pc, #4]	; (800f174 <_cleanup_r+0x8>)
 800f16e:	f000 b8af 	b.w	800f2d0 <_fwalk_reent>
 800f172:	bf00      	nop
 800f174:	0800f0ad 	.word	0x0800f0ad

0800f178 <__sfmoreglue>:
 800f178:	b570      	push	{r4, r5, r6, lr}
 800f17a:	2268      	movs	r2, #104	; 0x68
 800f17c:	1e4d      	subs	r5, r1, #1
 800f17e:	4355      	muls	r5, r2
 800f180:	460e      	mov	r6, r1
 800f182:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f186:	f7ff fa59 	bl	800e63c <_malloc_r>
 800f18a:	4604      	mov	r4, r0
 800f18c:	b140      	cbz	r0, 800f1a0 <__sfmoreglue+0x28>
 800f18e:	2100      	movs	r1, #0
 800f190:	e9c0 1600 	strd	r1, r6, [r0]
 800f194:	300c      	adds	r0, #12
 800f196:	60a0      	str	r0, [r4, #8]
 800f198:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f19c:	f7fb fea6 	bl	800aeec <memset>
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	bd70      	pop	{r4, r5, r6, pc}

0800f1a4 <__sfp_lock_acquire>:
 800f1a4:	4801      	ldr	r0, [pc, #4]	; (800f1ac <__sfp_lock_acquire+0x8>)
 800f1a6:	f000 b8b3 	b.w	800f310 <__retarget_lock_acquire_recursive>
 800f1aa:	bf00      	nop
 800f1ac:	2400052d 	.word	0x2400052d

0800f1b0 <__sfp_lock_release>:
 800f1b0:	4801      	ldr	r0, [pc, #4]	; (800f1b8 <__sfp_lock_release+0x8>)
 800f1b2:	f000 b8ae 	b.w	800f312 <__retarget_lock_release_recursive>
 800f1b6:	bf00      	nop
 800f1b8:	2400052d 	.word	0x2400052d

0800f1bc <__sinit_lock_acquire>:
 800f1bc:	4801      	ldr	r0, [pc, #4]	; (800f1c4 <__sinit_lock_acquire+0x8>)
 800f1be:	f000 b8a7 	b.w	800f310 <__retarget_lock_acquire_recursive>
 800f1c2:	bf00      	nop
 800f1c4:	2400052e 	.word	0x2400052e

0800f1c8 <__sinit_lock_release>:
 800f1c8:	4801      	ldr	r0, [pc, #4]	; (800f1d0 <__sinit_lock_release+0x8>)
 800f1ca:	f000 b8a2 	b.w	800f312 <__retarget_lock_release_recursive>
 800f1ce:	bf00      	nop
 800f1d0:	2400052e 	.word	0x2400052e

0800f1d4 <__sinit>:
 800f1d4:	b510      	push	{r4, lr}
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	f7ff fff0 	bl	800f1bc <__sinit_lock_acquire>
 800f1dc:	69a3      	ldr	r3, [r4, #24]
 800f1de:	b11b      	cbz	r3, 800f1e8 <__sinit+0x14>
 800f1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1e4:	f7ff bff0 	b.w	800f1c8 <__sinit_lock_release>
 800f1e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f1ec:	6523      	str	r3, [r4, #80]	; 0x50
 800f1ee:	4b13      	ldr	r3, [pc, #76]	; (800f23c <__sinit+0x68>)
 800f1f0:	4a13      	ldr	r2, [pc, #76]	; (800f240 <__sinit+0x6c>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f1f6:	42a3      	cmp	r3, r4
 800f1f8:	bf04      	itt	eq
 800f1fa:	2301      	moveq	r3, #1
 800f1fc:	61a3      	streq	r3, [r4, #24]
 800f1fe:	4620      	mov	r0, r4
 800f200:	f000 f820 	bl	800f244 <__sfp>
 800f204:	6060      	str	r0, [r4, #4]
 800f206:	4620      	mov	r0, r4
 800f208:	f000 f81c 	bl	800f244 <__sfp>
 800f20c:	60a0      	str	r0, [r4, #8]
 800f20e:	4620      	mov	r0, r4
 800f210:	f000 f818 	bl	800f244 <__sfp>
 800f214:	2200      	movs	r2, #0
 800f216:	60e0      	str	r0, [r4, #12]
 800f218:	2104      	movs	r1, #4
 800f21a:	6860      	ldr	r0, [r4, #4]
 800f21c:	f7ff ff82 	bl	800f124 <std>
 800f220:	68a0      	ldr	r0, [r4, #8]
 800f222:	2201      	movs	r2, #1
 800f224:	2109      	movs	r1, #9
 800f226:	f7ff ff7d 	bl	800f124 <std>
 800f22a:	68e0      	ldr	r0, [r4, #12]
 800f22c:	2202      	movs	r2, #2
 800f22e:	2112      	movs	r1, #18
 800f230:	f7ff ff78 	bl	800f124 <std>
 800f234:	2301      	movs	r3, #1
 800f236:	61a3      	str	r3, [r4, #24]
 800f238:	e7d2      	b.n	800f1e0 <__sinit+0xc>
 800f23a:	bf00      	nop
 800f23c:	0800f654 	.word	0x0800f654
 800f240:	0800f16d 	.word	0x0800f16d

0800f244 <__sfp>:
 800f244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f246:	4607      	mov	r7, r0
 800f248:	f7ff ffac 	bl	800f1a4 <__sfp_lock_acquire>
 800f24c:	4b1e      	ldr	r3, [pc, #120]	; (800f2c8 <__sfp+0x84>)
 800f24e:	681e      	ldr	r6, [r3, #0]
 800f250:	69b3      	ldr	r3, [r6, #24]
 800f252:	b913      	cbnz	r3, 800f25a <__sfp+0x16>
 800f254:	4630      	mov	r0, r6
 800f256:	f7ff ffbd 	bl	800f1d4 <__sinit>
 800f25a:	3648      	adds	r6, #72	; 0x48
 800f25c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f260:	3b01      	subs	r3, #1
 800f262:	d503      	bpl.n	800f26c <__sfp+0x28>
 800f264:	6833      	ldr	r3, [r6, #0]
 800f266:	b30b      	cbz	r3, 800f2ac <__sfp+0x68>
 800f268:	6836      	ldr	r6, [r6, #0]
 800f26a:	e7f7      	b.n	800f25c <__sfp+0x18>
 800f26c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f270:	b9d5      	cbnz	r5, 800f2a8 <__sfp+0x64>
 800f272:	4b16      	ldr	r3, [pc, #88]	; (800f2cc <__sfp+0x88>)
 800f274:	60e3      	str	r3, [r4, #12]
 800f276:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f27a:	6665      	str	r5, [r4, #100]	; 0x64
 800f27c:	f000 f847 	bl	800f30e <__retarget_lock_init_recursive>
 800f280:	f7ff ff96 	bl	800f1b0 <__sfp_lock_release>
 800f284:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f288:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f28c:	6025      	str	r5, [r4, #0]
 800f28e:	61a5      	str	r5, [r4, #24]
 800f290:	2208      	movs	r2, #8
 800f292:	4629      	mov	r1, r5
 800f294:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f298:	f7fb fe28 	bl	800aeec <memset>
 800f29c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f2a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2a8:	3468      	adds	r4, #104	; 0x68
 800f2aa:	e7d9      	b.n	800f260 <__sfp+0x1c>
 800f2ac:	2104      	movs	r1, #4
 800f2ae:	4638      	mov	r0, r7
 800f2b0:	f7ff ff62 	bl	800f178 <__sfmoreglue>
 800f2b4:	4604      	mov	r4, r0
 800f2b6:	6030      	str	r0, [r6, #0]
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	d1d5      	bne.n	800f268 <__sfp+0x24>
 800f2bc:	f7ff ff78 	bl	800f1b0 <__sfp_lock_release>
 800f2c0:	230c      	movs	r3, #12
 800f2c2:	603b      	str	r3, [r7, #0]
 800f2c4:	e7ee      	b.n	800f2a4 <__sfp+0x60>
 800f2c6:	bf00      	nop
 800f2c8:	0800f654 	.word	0x0800f654
 800f2cc:	ffff0001 	.word	0xffff0001

0800f2d0 <_fwalk_reent>:
 800f2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2d4:	4606      	mov	r6, r0
 800f2d6:	4688      	mov	r8, r1
 800f2d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f2dc:	2700      	movs	r7, #0
 800f2de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2e2:	f1b9 0901 	subs.w	r9, r9, #1
 800f2e6:	d505      	bpl.n	800f2f4 <_fwalk_reent+0x24>
 800f2e8:	6824      	ldr	r4, [r4, #0]
 800f2ea:	2c00      	cmp	r4, #0
 800f2ec:	d1f7      	bne.n	800f2de <_fwalk_reent+0xe>
 800f2ee:	4638      	mov	r0, r7
 800f2f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2f4:	89ab      	ldrh	r3, [r5, #12]
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	d907      	bls.n	800f30a <_fwalk_reent+0x3a>
 800f2fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f2fe:	3301      	adds	r3, #1
 800f300:	d003      	beq.n	800f30a <_fwalk_reent+0x3a>
 800f302:	4629      	mov	r1, r5
 800f304:	4630      	mov	r0, r6
 800f306:	47c0      	blx	r8
 800f308:	4307      	orrs	r7, r0
 800f30a:	3568      	adds	r5, #104	; 0x68
 800f30c:	e7e9      	b.n	800f2e2 <_fwalk_reent+0x12>

0800f30e <__retarget_lock_init_recursive>:
 800f30e:	4770      	bx	lr

0800f310 <__retarget_lock_acquire_recursive>:
 800f310:	4770      	bx	lr

0800f312 <__retarget_lock_release_recursive>:
 800f312:	4770      	bx	lr

0800f314 <__swhatbuf_r>:
 800f314:	b570      	push	{r4, r5, r6, lr}
 800f316:	460e      	mov	r6, r1
 800f318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f31c:	2900      	cmp	r1, #0
 800f31e:	b096      	sub	sp, #88	; 0x58
 800f320:	4614      	mov	r4, r2
 800f322:	461d      	mov	r5, r3
 800f324:	da08      	bge.n	800f338 <__swhatbuf_r+0x24>
 800f326:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f32a:	2200      	movs	r2, #0
 800f32c:	602a      	str	r2, [r5, #0]
 800f32e:	061a      	lsls	r2, r3, #24
 800f330:	d410      	bmi.n	800f354 <__swhatbuf_r+0x40>
 800f332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f336:	e00e      	b.n	800f356 <__swhatbuf_r+0x42>
 800f338:	466a      	mov	r2, sp
 800f33a:	f000 f903 	bl	800f544 <_fstat_r>
 800f33e:	2800      	cmp	r0, #0
 800f340:	dbf1      	blt.n	800f326 <__swhatbuf_r+0x12>
 800f342:	9a01      	ldr	r2, [sp, #4]
 800f344:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f348:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f34c:	425a      	negs	r2, r3
 800f34e:	415a      	adcs	r2, r3
 800f350:	602a      	str	r2, [r5, #0]
 800f352:	e7ee      	b.n	800f332 <__swhatbuf_r+0x1e>
 800f354:	2340      	movs	r3, #64	; 0x40
 800f356:	2000      	movs	r0, #0
 800f358:	6023      	str	r3, [r4, #0]
 800f35a:	b016      	add	sp, #88	; 0x58
 800f35c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f360 <__smakebuf_r>:
 800f360:	898b      	ldrh	r3, [r1, #12]
 800f362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f364:	079d      	lsls	r5, r3, #30
 800f366:	4606      	mov	r6, r0
 800f368:	460c      	mov	r4, r1
 800f36a:	d507      	bpl.n	800f37c <__smakebuf_r+0x1c>
 800f36c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f370:	6023      	str	r3, [r4, #0]
 800f372:	6123      	str	r3, [r4, #16]
 800f374:	2301      	movs	r3, #1
 800f376:	6163      	str	r3, [r4, #20]
 800f378:	b002      	add	sp, #8
 800f37a:	bd70      	pop	{r4, r5, r6, pc}
 800f37c:	ab01      	add	r3, sp, #4
 800f37e:	466a      	mov	r2, sp
 800f380:	f7ff ffc8 	bl	800f314 <__swhatbuf_r>
 800f384:	9900      	ldr	r1, [sp, #0]
 800f386:	4605      	mov	r5, r0
 800f388:	4630      	mov	r0, r6
 800f38a:	f7ff f957 	bl	800e63c <_malloc_r>
 800f38e:	b948      	cbnz	r0, 800f3a4 <__smakebuf_r+0x44>
 800f390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f394:	059a      	lsls	r2, r3, #22
 800f396:	d4ef      	bmi.n	800f378 <__smakebuf_r+0x18>
 800f398:	f023 0303 	bic.w	r3, r3, #3
 800f39c:	f043 0302 	orr.w	r3, r3, #2
 800f3a0:	81a3      	strh	r3, [r4, #12]
 800f3a2:	e7e3      	b.n	800f36c <__smakebuf_r+0xc>
 800f3a4:	4b0d      	ldr	r3, [pc, #52]	; (800f3dc <__smakebuf_r+0x7c>)
 800f3a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3a8:	89a3      	ldrh	r3, [r4, #12]
 800f3aa:	6020      	str	r0, [r4, #0]
 800f3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3b0:	81a3      	strh	r3, [r4, #12]
 800f3b2:	9b00      	ldr	r3, [sp, #0]
 800f3b4:	6163      	str	r3, [r4, #20]
 800f3b6:	9b01      	ldr	r3, [sp, #4]
 800f3b8:	6120      	str	r0, [r4, #16]
 800f3ba:	b15b      	cbz	r3, 800f3d4 <__smakebuf_r+0x74>
 800f3bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	f000 f8d1 	bl	800f568 <_isatty_r>
 800f3c6:	b128      	cbz	r0, 800f3d4 <__smakebuf_r+0x74>
 800f3c8:	89a3      	ldrh	r3, [r4, #12]
 800f3ca:	f023 0303 	bic.w	r3, r3, #3
 800f3ce:	f043 0301 	orr.w	r3, r3, #1
 800f3d2:	81a3      	strh	r3, [r4, #12]
 800f3d4:	89a0      	ldrh	r0, [r4, #12]
 800f3d6:	4305      	orrs	r5, r0
 800f3d8:	81a5      	strh	r5, [r4, #12]
 800f3da:	e7cd      	b.n	800f378 <__smakebuf_r+0x18>
 800f3dc:	0800f16d 	.word	0x0800f16d

0800f3e0 <_malloc_usable_size_r>:
 800f3e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3e4:	1f18      	subs	r0, r3, #4
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	bfbc      	itt	lt
 800f3ea:	580b      	ldrlt	r3, [r1, r0]
 800f3ec:	18c0      	addlt	r0, r0, r3
 800f3ee:	4770      	bx	lr

0800f3f0 <_raise_r>:
 800f3f0:	291f      	cmp	r1, #31
 800f3f2:	b538      	push	{r3, r4, r5, lr}
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	460d      	mov	r5, r1
 800f3f8:	d904      	bls.n	800f404 <_raise_r+0x14>
 800f3fa:	2316      	movs	r3, #22
 800f3fc:	6003      	str	r3, [r0, #0]
 800f3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f402:	bd38      	pop	{r3, r4, r5, pc}
 800f404:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f406:	b112      	cbz	r2, 800f40e <_raise_r+0x1e>
 800f408:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f40c:	b94b      	cbnz	r3, 800f422 <_raise_r+0x32>
 800f40e:	4620      	mov	r0, r4
 800f410:	f000 f830 	bl	800f474 <_getpid_r>
 800f414:	462a      	mov	r2, r5
 800f416:	4601      	mov	r1, r0
 800f418:	4620      	mov	r0, r4
 800f41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f41e:	f000 b817 	b.w	800f450 <_kill_r>
 800f422:	2b01      	cmp	r3, #1
 800f424:	d00a      	beq.n	800f43c <_raise_r+0x4c>
 800f426:	1c59      	adds	r1, r3, #1
 800f428:	d103      	bne.n	800f432 <_raise_r+0x42>
 800f42a:	2316      	movs	r3, #22
 800f42c:	6003      	str	r3, [r0, #0]
 800f42e:	2001      	movs	r0, #1
 800f430:	e7e7      	b.n	800f402 <_raise_r+0x12>
 800f432:	2400      	movs	r4, #0
 800f434:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f438:	4628      	mov	r0, r5
 800f43a:	4798      	blx	r3
 800f43c:	2000      	movs	r0, #0
 800f43e:	e7e0      	b.n	800f402 <_raise_r+0x12>

0800f440 <raise>:
 800f440:	4b02      	ldr	r3, [pc, #8]	; (800f44c <raise+0xc>)
 800f442:	4601      	mov	r1, r0
 800f444:	6818      	ldr	r0, [r3, #0]
 800f446:	f7ff bfd3 	b.w	800f3f0 <_raise_r>
 800f44a:	bf00      	nop
 800f44c:	24000010 	.word	0x24000010

0800f450 <_kill_r>:
 800f450:	b538      	push	{r3, r4, r5, lr}
 800f452:	4d07      	ldr	r5, [pc, #28]	; (800f470 <_kill_r+0x20>)
 800f454:	2300      	movs	r3, #0
 800f456:	4604      	mov	r4, r0
 800f458:	4608      	mov	r0, r1
 800f45a:	4611      	mov	r1, r2
 800f45c:	602b      	str	r3, [r5, #0]
 800f45e:	f7f2 f86b 	bl	8001538 <_kill>
 800f462:	1c43      	adds	r3, r0, #1
 800f464:	d102      	bne.n	800f46c <_kill_r+0x1c>
 800f466:	682b      	ldr	r3, [r5, #0]
 800f468:	b103      	cbz	r3, 800f46c <_kill_r+0x1c>
 800f46a:	6023      	str	r3, [r4, #0]
 800f46c:	bd38      	pop	{r3, r4, r5, pc}
 800f46e:	bf00      	nop
 800f470:	24000528 	.word	0x24000528

0800f474 <_getpid_r>:
 800f474:	f7f2 b858 	b.w	8001528 <_getpid>

0800f478 <__sread>:
 800f478:	b510      	push	{r4, lr}
 800f47a:	460c      	mov	r4, r1
 800f47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f480:	f000 f894 	bl	800f5ac <_read_r>
 800f484:	2800      	cmp	r0, #0
 800f486:	bfab      	itete	ge
 800f488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f48a:	89a3      	ldrhlt	r3, [r4, #12]
 800f48c:	181b      	addge	r3, r3, r0
 800f48e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f492:	bfac      	ite	ge
 800f494:	6563      	strge	r3, [r4, #84]	; 0x54
 800f496:	81a3      	strhlt	r3, [r4, #12]
 800f498:	bd10      	pop	{r4, pc}

0800f49a <__swrite>:
 800f49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f49e:	461f      	mov	r7, r3
 800f4a0:	898b      	ldrh	r3, [r1, #12]
 800f4a2:	05db      	lsls	r3, r3, #23
 800f4a4:	4605      	mov	r5, r0
 800f4a6:	460c      	mov	r4, r1
 800f4a8:	4616      	mov	r6, r2
 800f4aa:	d505      	bpl.n	800f4b8 <__swrite+0x1e>
 800f4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4b0:	2302      	movs	r3, #2
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	f000 f868 	bl	800f588 <_lseek_r>
 800f4b8:	89a3      	ldrh	r3, [r4, #12]
 800f4ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f4c2:	81a3      	strh	r3, [r4, #12]
 800f4c4:	4632      	mov	r2, r6
 800f4c6:	463b      	mov	r3, r7
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ce:	f000 b817 	b.w	800f500 <_write_r>

0800f4d2 <__sseek>:
 800f4d2:	b510      	push	{r4, lr}
 800f4d4:	460c      	mov	r4, r1
 800f4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4da:	f000 f855 	bl	800f588 <_lseek_r>
 800f4de:	1c43      	adds	r3, r0, #1
 800f4e0:	89a3      	ldrh	r3, [r4, #12]
 800f4e2:	bf15      	itete	ne
 800f4e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f4e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f4ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f4ee:	81a3      	strheq	r3, [r4, #12]
 800f4f0:	bf18      	it	ne
 800f4f2:	81a3      	strhne	r3, [r4, #12]
 800f4f4:	bd10      	pop	{r4, pc}

0800f4f6 <__sclose>:
 800f4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4fa:	f000 b813 	b.w	800f524 <_close_r>
	...

0800f500 <_write_r>:
 800f500:	b538      	push	{r3, r4, r5, lr}
 800f502:	4d07      	ldr	r5, [pc, #28]	; (800f520 <_write_r+0x20>)
 800f504:	4604      	mov	r4, r0
 800f506:	4608      	mov	r0, r1
 800f508:	4611      	mov	r1, r2
 800f50a:	2200      	movs	r2, #0
 800f50c:	602a      	str	r2, [r5, #0]
 800f50e:	461a      	mov	r2, r3
 800f510:	f7f2 f849 	bl	80015a6 <_write>
 800f514:	1c43      	adds	r3, r0, #1
 800f516:	d102      	bne.n	800f51e <_write_r+0x1e>
 800f518:	682b      	ldr	r3, [r5, #0]
 800f51a:	b103      	cbz	r3, 800f51e <_write_r+0x1e>
 800f51c:	6023      	str	r3, [r4, #0]
 800f51e:	bd38      	pop	{r3, r4, r5, pc}
 800f520:	24000528 	.word	0x24000528

0800f524 <_close_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	4d06      	ldr	r5, [pc, #24]	; (800f540 <_close_r+0x1c>)
 800f528:	2300      	movs	r3, #0
 800f52a:	4604      	mov	r4, r0
 800f52c:	4608      	mov	r0, r1
 800f52e:	602b      	str	r3, [r5, #0]
 800f530:	f7f2 f855 	bl	80015de <_close>
 800f534:	1c43      	adds	r3, r0, #1
 800f536:	d102      	bne.n	800f53e <_close_r+0x1a>
 800f538:	682b      	ldr	r3, [r5, #0]
 800f53a:	b103      	cbz	r3, 800f53e <_close_r+0x1a>
 800f53c:	6023      	str	r3, [r4, #0]
 800f53e:	bd38      	pop	{r3, r4, r5, pc}
 800f540:	24000528 	.word	0x24000528

0800f544 <_fstat_r>:
 800f544:	b538      	push	{r3, r4, r5, lr}
 800f546:	4d07      	ldr	r5, [pc, #28]	; (800f564 <_fstat_r+0x20>)
 800f548:	2300      	movs	r3, #0
 800f54a:	4604      	mov	r4, r0
 800f54c:	4608      	mov	r0, r1
 800f54e:	4611      	mov	r1, r2
 800f550:	602b      	str	r3, [r5, #0]
 800f552:	f7f2 f850 	bl	80015f6 <_fstat>
 800f556:	1c43      	adds	r3, r0, #1
 800f558:	d102      	bne.n	800f560 <_fstat_r+0x1c>
 800f55a:	682b      	ldr	r3, [r5, #0]
 800f55c:	b103      	cbz	r3, 800f560 <_fstat_r+0x1c>
 800f55e:	6023      	str	r3, [r4, #0]
 800f560:	bd38      	pop	{r3, r4, r5, pc}
 800f562:	bf00      	nop
 800f564:	24000528 	.word	0x24000528

0800f568 <_isatty_r>:
 800f568:	b538      	push	{r3, r4, r5, lr}
 800f56a:	4d06      	ldr	r5, [pc, #24]	; (800f584 <_isatty_r+0x1c>)
 800f56c:	2300      	movs	r3, #0
 800f56e:	4604      	mov	r4, r0
 800f570:	4608      	mov	r0, r1
 800f572:	602b      	str	r3, [r5, #0]
 800f574:	f7f2 f84f 	bl	8001616 <_isatty>
 800f578:	1c43      	adds	r3, r0, #1
 800f57a:	d102      	bne.n	800f582 <_isatty_r+0x1a>
 800f57c:	682b      	ldr	r3, [r5, #0]
 800f57e:	b103      	cbz	r3, 800f582 <_isatty_r+0x1a>
 800f580:	6023      	str	r3, [r4, #0]
 800f582:	bd38      	pop	{r3, r4, r5, pc}
 800f584:	24000528 	.word	0x24000528

0800f588 <_lseek_r>:
 800f588:	b538      	push	{r3, r4, r5, lr}
 800f58a:	4d07      	ldr	r5, [pc, #28]	; (800f5a8 <_lseek_r+0x20>)
 800f58c:	4604      	mov	r4, r0
 800f58e:	4608      	mov	r0, r1
 800f590:	4611      	mov	r1, r2
 800f592:	2200      	movs	r2, #0
 800f594:	602a      	str	r2, [r5, #0]
 800f596:	461a      	mov	r2, r3
 800f598:	f7f2 f848 	bl	800162c <_lseek>
 800f59c:	1c43      	adds	r3, r0, #1
 800f59e:	d102      	bne.n	800f5a6 <_lseek_r+0x1e>
 800f5a0:	682b      	ldr	r3, [r5, #0]
 800f5a2:	b103      	cbz	r3, 800f5a6 <_lseek_r+0x1e>
 800f5a4:	6023      	str	r3, [r4, #0]
 800f5a6:	bd38      	pop	{r3, r4, r5, pc}
 800f5a8:	24000528 	.word	0x24000528

0800f5ac <_read_r>:
 800f5ac:	b538      	push	{r3, r4, r5, lr}
 800f5ae:	4d07      	ldr	r5, [pc, #28]	; (800f5cc <_read_r+0x20>)
 800f5b0:	4604      	mov	r4, r0
 800f5b2:	4608      	mov	r0, r1
 800f5b4:	4611      	mov	r1, r2
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	602a      	str	r2, [r5, #0]
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	f7f1 ffd6 	bl	800156c <_read>
 800f5c0:	1c43      	adds	r3, r0, #1
 800f5c2:	d102      	bne.n	800f5ca <_read_r+0x1e>
 800f5c4:	682b      	ldr	r3, [r5, #0]
 800f5c6:	b103      	cbz	r3, 800f5ca <_read_r+0x1e>
 800f5c8:	6023      	str	r3, [r4, #0]
 800f5ca:	bd38      	pop	{r3, r4, r5, pc}
 800f5cc:	24000528 	.word	0x24000528

0800f5d0 <_init>:
 800f5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5d2:	bf00      	nop
 800f5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5d6:	bc08      	pop	{r3}
 800f5d8:	469e      	mov	lr, r3
 800f5da:	4770      	bx	lr

0800f5dc <_fini>:
 800f5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5de:	bf00      	nop
 800f5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5e2:	bc08      	pop	{r3}
 800f5e4:	469e      	mov	lr, r3
 800f5e6:	4770      	bx	lr
