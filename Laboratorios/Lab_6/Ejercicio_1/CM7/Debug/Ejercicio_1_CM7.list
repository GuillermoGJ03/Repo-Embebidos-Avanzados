
Ejercicio_1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be68  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800c108  0800c108  0001c108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5fc  0800c5fc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5fc  0800c5fc  0001c5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c604  0800c604  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c604  0800c604  0001c604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c608  0800c608  0001c608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800c60c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  240001e4  0800c7f0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000344  0800c7f0  00020344  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015492  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002604  00000000  00000000  000356a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00037ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00038c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b820  00000000  00000000  00039b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a3a  00000000  00000000  00075380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018de2f  00000000  00000000  00088dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00216be9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000568c  00000000  00000000  00216c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c0f0 	.word	0x0800c0f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800c0f0 	.word	0x0800c0f0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <SystemInit+0xfc>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <SystemInit+0xfc>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0xfc>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <SystemInit+0xfc>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <SystemInit+0x100>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d807      	bhi.n	8000ab8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <SystemInit+0x100>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 030f 	bic.w	r3, r3, #15
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x100>)
 8000ab2:	f043 0307 	orr.w	r3, r3, #7
 8000ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemInit+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <SystemInit+0x104>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x104>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <SystemInit+0x104>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	492c      	ldr	r1, [pc, #176]	; (8000b80 <SystemInit+0x104>)
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <SystemInit+0x108>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SystemInit+0x100>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SystemInit+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 030f 	bic.w	r3, r3, #15
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <SystemInit+0x100>)
 8000aec:	f043 0307 	orr.w	r3, r3, #7
 8000af0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemInit+0x104>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemInit+0x104>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemInit+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemInit+0x104>)
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemInit+0x10c>)
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SystemInit+0x104>)
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <SystemInit+0x110>)
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SystemInit+0x104>)
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <SystemInit+0x114>)
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <SystemInit+0x104>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SystemInit+0x104>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SystemInit+0x114>)
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <SystemInit+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SystemInit+0x104>)
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <SystemInit+0x114>)
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <SystemInit+0x104>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <SystemInit+0x104>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <SystemInit+0x104>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x118>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SystemInit+0x118>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <SystemInit+0x11c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x120>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b5e:	d202      	bcs.n	8000b66 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x124>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SystemInit+0x128>)
 8000b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b6c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	52002000 	.word	0x52002000
 8000b80:	58024400 	.word	0x58024400
 8000b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b88:	02020200 	.word	0x02020200
 8000b8c:	01ff0000 	.word	0x01ff0000
 8000b90:	01010280 	.word	0x01010280
 8000b94:	580000c0 	.word	0x580000c0
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bb4:	bf00      	nop
 8000bb6:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <main+0xc8>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <main+0x24>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dcf4      	bgt.n	8000bb6 <main+0xe>
  if ( timeout < 0 )
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	da01      	bge.n	8000bd6 <main+0x2e>
  {
  Error_Handler();
 8000bd2:	f000 fa05 	bl	8000fe0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f000 fc13 	bl	8001400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f851 	bl	8000c80 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <main+0xc8>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <main+0xc8>)
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <main+0xc8>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f002 fc09 	bl	8003414 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f002 fc1f 	bl	8003448 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c10:	bf00      	nop
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <main+0xc8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d104      	bne.n	8000c28 <main+0x80>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	dcf4      	bgt.n	8000c12 <main+0x6a>
if ( timeout < 0 )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da01      	bge.n	8000c32 <main+0x8a>
{
Error_Handler();
 8000c2e:	f000 f9d7 	bl	8000fe0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c32:	f000 f96d 	bl	8000f10 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c36:	f000 f91f 	bl	8000e78 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000c3a:	f000 f8a5 	bl	8000d88 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <main+0xcc>)
 8000c40:	f001 f850 	bl	8001ce4 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 10);
 8000c44:	210a      	movs	r1, #10
 8000c46:	480b      	ldr	r0, [pc, #44]	; (8000c74 <main+0xcc>)
 8000c48:	f001 f94a 	bl	8001ee0 <HAL_ADC_PollForConversion>
      adc_read = HAL_ADC_GetValue(&hadc1);
 8000c4c:	4809      	ldr	r0, [pc, #36]	; (8000c74 <main+0xcc>)
 8000c4e:	f001 fa3b 	bl	80020c8 <HAL_ADC_GetValue>
 8000c52:	4603      	mov	r3, r0
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <main+0xd0>)
 8000c58:	701a      	strb	r2, [r3, #0]
      HAL_ADC_Stop(&hadc1);
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <main+0xcc>)
 8000c5c:	f001 f90c 	bl	8001e78 <HAL_ADC_Stop>

      printUART_int("Valor ADC: %u \r\n", adc_read);
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <main+0xd0>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <main+0xd4>)
 8000c68:	f000 f99a 	bl	8000fa0 <printUART_int>
	  HAL_ADC_Start(&hadc1);
 8000c6c:	e7e7      	b.n	8000c3e <main+0x96>
 8000c6e:	bf00      	nop
 8000c70:	58024400 	.word	0x58024400
 8000c74:	24000200 	.word	0x24000200
 8000c78:	24000328 	.word	0x24000328
 8000c7c:	0800c108 	.word	0x0800c108

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b09c      	sub	sp, #112	; 0x70
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	224c      	movs	r2, #76	; 0x4c
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f006 febe 	bl	8007a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2220      	movs	r2, #32
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f006 feb8 	bl	8007a10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ca0:	2004      	movs	r0, #4
 8000ca2:	f002 fbe5 	bl	8003470 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <SystemClock_Config+0xfc>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a33      	ldr	r2, [pc, #204]	; (8000d7c <SystemClock_Config+0xfc>)
 8000cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cb4:	6193      	str	r3, [r2, #24]
 8000cb6:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <SystemClock_Config+0xfc>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <SystemClock_Config+0x100>)
 8000cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc4:	4a2e      	ldr	r2, [pc, #184]	; (8000d80 <SystemClock_Config+0x100>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <SystemClock_Config+0x100>)
 8000cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cd8:	bf00      	nop
 8000cda:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <SystemClock_Config+0xfc>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ce6:	d1f8      	bne.n	8000cda <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <SystemClock_Config+0x104>)
 8000cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cec:	f023 0303 	bic.w	r3, r3, #3
 8000cf0:	4a24      	ldr	r2, [pc, #144]	; (8000d84 <SystemClock_Config+0x104>)
 8000cf2:	f043 0302 	orr.w	r3, r3, #2
 8000cf6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cfc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d06:	2302      	movs	r3, #2
 8000d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000d0e:	2378      	movs	r3, #120	; 0x78
 8000d10:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d16:	2302      	movs	r3, #2
 8000d18:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d1e:	230c      	movs	r3, #12
 8000d20:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 fbf8 	bl	8003524 <HAL_RCC_OscConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000d3a:	f000 f951 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3e:	233f      	movs	r3, #63	; 0x3f
 8000d40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d42:	2303      	movs	r3, #3
 8000d44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d4e:	2340      	movs	r3, #64	; 0x40
 8000d50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d52:	2340      	movs	r3, #64	; 0x40
 8000d54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d5c:	2340      	movs	r3, #64	; 0x40
 8000d5e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2104      	movs	r1, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 f80b 	bl	8003d80 <HAL_RCC_ClockConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000d70:	f000 f936 	bl	8000fe0 <Error_Handler>
  }
}
 8000d74:	bf00      	nop
 8000d76:	3770      	adds	r7, #112	; 0x70
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	58024800 	.word	0x58024800
 8000d80:	58000400 	.word	0x58000400
 8000d84:	58024400 	.word	0x58024400

08000d88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dac:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000dae:	4a30      	ldr	r2, [pc, #192]	; (8000e70 <MX_ADC1_Init+0xe8>)
 8000db0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000db8:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000dba:	2210      	movs	r2, #16
 8000dbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc4:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dca:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e08:	4818      	ldr	r0, [pc, #96]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000e0a:	f000 fdc9 	bl	80019a0 <HAL_ADC_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e14:	f000 f8e4 	bl	8000fe0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4812      	ldr	r0, [pc, #72]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000e24:	f001 ff84 	bl	8002d30 <HAL_ADCEx_MultiModeConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e2e:	f000 f8d7 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_ADC1_Init+0xec>)
 8000e34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e36:	2306      	movs	r3, #6
 8000e38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e3e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e42:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e44:	2304      	movs	r3, #4
 8000e46:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_ADC1_Init+0xe4>)
 8000e56:	f001 f945 	bl	80020e4 <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000e60:	f000 f8be 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	24000200 	.word	0x24000200
 8000e70:	40022000 	.word	0x40022000
 8000e74:	08600004 	.word	0x08600004

08000e78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e7c:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000e7e:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <MX_USART3_UART_Init+0x94>)
 8000e80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ec0:	4811      	ldr	r0, [pc, #68]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000ec2:	f005 fc75 	bl	80067b0 <HAL_UART_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ecc:	f000 f888 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	480d      	ldr	r0, [pc, #52]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000ed4:	f006 fca8 	bl	8007828 <HAL_UARTEx_SetTxFifoThreshold>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ede:	f000 f87f 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000ee6:	f006 fcdd 	bl	80078a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ef0:	f000 f876 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_USART3_UART_Init+0x90>)
 8000ef6:	f006 fc5e 	bl	80077b6 <HAL_UARTEx_DisableFifoMode>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f00:	f000 f86e 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	24000264 	.word	0x24000264
 8000f0c:	40004800 	.word	0x40004800

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <MX_GPIO_Init+0x8c>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <MX_GPIO_Init+0x8c>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <MX_GPIO_Init+0x8c>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_GPIO_Init+0x8c>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <MX_GPIO_Init+0x8c>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_GPIO_Init+0x8c>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_GPIO_Init+0x8c>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <MX_GPIO_Init+0x8c>)
 8000f5a:	f043 0320 	orr.w	r3, r3, #32
 8000f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_GPIO_Init+0x8c>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	f003 0320 	and.w	r3, r3, #32
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <MX_GPIO_Init+0x8c>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <MX_GPIO_Init+0x8c>)
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_GPIO_Init+0x8c>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	58024400 	.word	0x58024400

08000fa0 <printUART_int>:

/* USER CODE BEGIN 4 */
static void printUART_int(char *string, int var){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	uart_buf_len = sprintf(uart_buf, string, var);
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <printUART_int+0x34>)
 8000fb0:	f007 fb84 	bl	80086bc <siprintf>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <printUART_int+0x38>)
 8000fba:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <printUART_int+0x38>)
 8000fbe:	881a      	ldrh	r2, [r3, #0]
 8000fc0:	2364      	movs	r3, #100	; 0x64
 8000fc2:	4904      	ldr	r1, [pc, #16]	; (8000fd4 <printUART_int+0x34>)
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <printUART_int+0x3c>)
 8000fc6:	f005 fc43 	bl	8006850 <HAL_UART_Transmit>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	240002f4 	.word	0x240002f4
 8000fd8:	24000326 	.word	0x24000326
 8000fdc:	24000264 	.word	0x24000264

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>
	...

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_MspInit+0x30>)
 8000ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff8:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x30>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x30>)
 8001004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	58024400 	.word	0x58024400

08001020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0b8      	sub	sp, #224	; 0xe0
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	22bc      	movs	r2, #188	; 0xbc
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f006 fce5 	bl	8007a10 <memset>
  if(hadc->Instance==ADC1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a2a      	ldr	r2, [pc, #168]	; (80010f4 <HAL_ADC_MspInit+0xd4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d14d      	bne.n	80010ec <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001050:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001054:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 800105a:	2313      	movs	r3, #19
 800105c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800105e:	2302      	movs	r3, #2
 8001060:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001062:	2302      	movs	r3, #2
 8001064:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001066:	2302      	movs	r3, #2
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800106a:	23c0      	movs	r3, #192	; 0xc0
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800106e:	2320      	movs	r3, #32
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4618      	mov	r0, r3
 8001082:	f003 fa09 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800108c:	f7ff ffa8 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_ADC_MspInit+0xd8>)
 8001092:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001096:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <HAL_ADC_MspInit+0xd8>)
 8001098:	f043 0320 	orr.w	r3, r3, #32
 800109c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_ADC_MspInit+0xd8>)
 80010a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_ADC_MspInit+0xd8>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b4:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <HAL_ADC_MspInit+0xd8>)
 80010b6:	f043 0320 	orr.w	r3, r3, #32
 80010ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_ADC_MspInit+0xd8>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	f003 0320 	and.w	r3, r3, #32
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d4:	2303      	movs	r3, #3
 80010d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010e4:	4619      	mov	r1, r3
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_ADC_MspInit+0xdc>)
 80010e8:	f001 ffe4 	bl	80030b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	37e0      	adds	r7, #224	; 0xe0
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40022000 	.word	0x40022000
 80010f8:	58024400 	.word	0x58024400
 80010fc:	58021400 	.word	0x58021400

08001100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0b8      	sub	sp, #224	; 0xe0
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	22bc      	movs	r2, #188	; 0xbc
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f006 fc75 	bl	8007a10 <memset>
  if(huart->Instance==USART3)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a25      	ldr	r2, [pc, #148]	; (80011c0 <HAL_UART_MspInit+0xc0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d142      	bne.n	80011b6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4618      	mov	r0, r3
 8001140:	f003 f9aa 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800114a:	f7ff ff49 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_UART_MspInit+0xc4>)
 8001150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001154:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <HAL_UART_MspInit+0xc4>)
 8001156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_UART_MspInit+0xc4>)
 8001160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_UART_MspInit+0xc4>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001172:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <HAL_UART_MspInit+0xc4>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_UART_MspInit+0xc4>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800118a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800118e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011a4:	2307      	movs	r3, #7
 80011a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <HAL_UART_MspInit+0xc8>)
 80011b2:	f001 ff7f 	bl	80030b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	37e0      	adds	r7, #224	; 0xe0
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40004800 	.word	0x40004800
 80011c4:	58024400 	.word	0x58024400
 80011c8:	58020c00 	.word	0x58020c00

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <NMI_Handler+0x4>

080011d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <MemManage_Handler+0x4>

080011de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001218:	f000 f964 	bl	80014e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
	return 1;
 8001224:	2301      	movs	r3, #1
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <_kill>:

int _kill(int pid, int sig)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800123a:	f006 fbbf 	bl	80079bc <__errno>
 800123e:	4603      	mov	r3, r0
 8001240:	2216      	movs	r2, #22
 8001242:	601a      	str	r2, [r3, #0]
	return -1;
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <_exit>:

void _exit (int status)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ffe7 	bl	8001230 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001262:	e7fe      	b.n	8001262 <_exit+0x12>

08001264 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	e00a      	b.n	800128c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001276:	f3af 8000 	nop.w
 800127a:	4601      	mov	r1, r0
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	60ba      	str	r2, [r7, #8]
 8001282:	b2ca      	uxtb	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbf0      	blt.n	8001276 <_read+0x12>
	}

return len;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e009      	b.n	80012c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	60ba      	str	r2, [r7, #8]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3301      	adds	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dbf1      	blt.n	80012b0 <_write+0x12>
	}
	return len;
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_close>:

int _close(int file)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
	return -1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_isatty>:

int _isatty(int file)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
	return 1;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
	return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001348:	4a14      	ldr	r2, [pc, #80]	; (800139c <_sbrk+0x5c>)
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <_sbrk+0x60>)
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <_sbrk+0x64>)
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <_sbrk+0x68>)
 8001360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	429a      	cmp	r2, r3
 800136e:	d207      	bcs.n	8001380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001370:	f006 fb24 	bl	80079bc <__errno>
 8001374:	4603      	mov	r3, r0
 8001376:	220c      	movs	r2, #12
 8001378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	e009      	b.n	8001394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <_sbrk+0x64>)
 8001390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	24080000 	.word	0x24080000
 80013a0:	00000400 	.word	0x00000400
 80013a4:	2400032c 	.word	0x2400032c
 80013a8:	24000348 	.word	0x24000348

080013ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013b0:	f7ff fb64 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013b6:	490d      	ldr	r1, [pc, #52]	; (80013ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013cc:	4c0a      	ldr	r4, [pc, #40]	; (80013f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013da:	f006 faf5 	bl	80079c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013de:	f7ff fbe3 	bl	8000ba8 <main>
  bx  lr
 80013e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013ec:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 80013f0:	0800c60c 	.word	0x0800c60c
  ldr r2, =_sbss
 80013f4:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 80013f8:	24000344 	.word	0x24000344

080013fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC3_IRQHandler>
	...

08001400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001406:	2003      	movs	r0, #3
 8001408:	f001 fe22 	bl	8003050 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800140c:	f002 fe6e 	bl	80040ec <HAL_RCC_GetSysClockFreq>
 8001410:	4602      	mov	r2, r0
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_Init+0x68>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	4913      	ldr	r1, [pc, #76]	; (800146c <HAL_Init+0x6c>)
 800141e:	5ccb      	ldrb	r3, [r1, r3]
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_Init+0x68>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_Init+0x6c>)
 8001434:	5cd3      	ldrb	r3, [r2, r3]
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
 8001440:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <HAL_Init+0x70>)
 8001442:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001444:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <HAL_Init+0x74>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800144a:	2000      	movs	r0, #0
 800144c:	f000 f814 	bl	8001478 <HAL_InitTick>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e002      	b.n	8001460 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800145a:	f7ff fdc7 	bl	8000fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	58024400 	.word	0x58024400
 800146c:	0800c11c 	.word	0x0800c11c
 8001470:	24000004 	.word	0x24000004
 8001474:	24000000 	.word	0x24000000

08001478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_InitTick+0x60>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e021      	b.n	80014d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_InitTick+0x64>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_InitTick+0x60>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 fdf9 	bl	800309a <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00e      	b.n	80014d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d80a      	bhi.n	80014ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f001 fdd1 	bl	8003066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c4:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <HAL_InitTick+0x68>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e000      	b.n	80014d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2400000c 	.word	0x2400000c
 80014dc:	24000000 	.word	0x24000000
 80014e0:	24000008 	.word	0x24000008

080014e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	2400000c 	.word	0x2400000c
 8001508:	24000330 	.word	0x24000330

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	24000330 	.word	0x24000330

08001524 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetREVID+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	0c1b      	lsrs	r3, r3, #16
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	5c001000 	.word	0x5c001000

0800153c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	609a      	str	r2, [r3, #8]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3360      	adds	r3, #96	; 0x60
 80015b6:	461a      	mov	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	430b      	orrs	r3, r1
 80015d2:	431a      	orrs	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	431a      	orrs	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	611a      	str	r2, [r3, #16]
}
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001616:	b480      	push	{r7}
 8001618:	b087      	sub	sp, #28
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3360      	adds	r3, #96	; 0x60
 8001626:	461a      	mov	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	431a      	orrs	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	601a      	str	r2, [r3, #0]
  }
}
 8001640:	bf00      	nop
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001672:	b480      	push	{r7}
 8001674:	b087      	sub	sp, #28
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3330      	adds	r3, #48	; 0x30
 8001682:	461a      	mov	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	4413      	add	r3, r2
 8001690:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	f003 031f 	and.w	r3, r3, #31
 800169c:	211f      	movs	r1, #31
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	401a      	ands	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	0e9b      	lsrs	r3, r3, #26
 80016aa:	f003 011f 	and.w	r1, r3, #31
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	431a      	orrs	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016be:	bf00      	nop
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b087      	sub	sp, #28
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3314      	adds	r3, #20
 80016da:	461a      	mov	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	0e5b      	lsrs	r3, r3, #25
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	4413      	add	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	0d1b      	lsrs	r3, r3, #20
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	2107      	movs	r1, #7
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	401a      	ands	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	0d1b      	lsrs	r3, r3, #20
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	431a      	orrs	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001714:	bf00      	nop
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001738:	43db      	mvns	r3, r3
 800173a:	401a      	ands	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0318 	and.w	r3, r3, #24
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001744:	40d9      	lsrs	r1, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	400b      	ands	r3, r1
 800174a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800174e:	431a      	orrs	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	000fffff 	.word	0x000fffff

08001768 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 031f 	and.w	r3, r3, #31
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6093      	str	r3, [r2, #8]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	5fffffc0 	.word	0x5fffffc0

080017c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017d8:	d101      	bne.n	80017de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <LL_ADC_EnableInternalRegulator+0x24>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	6fffffc0 	.word	0x6fffffc0

08001814 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001828:	d101      	bne.n	800182e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <LL_ADC_Enable+0x24>)
 800184a:	4013      	ands	r3, r2
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	7fffffc0 	.word	0x7fffffc0

08001864 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <LL_ADC_Disable+0x24>)
 8001872:	4013      	ands	r3, r2
 8001874:	f043 0202 	orr.w	r2, r3, #2
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	7fffffc0 	.word	0x7fffffc0

0800188c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <LL_ADC_IsEnabled+0x18>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <LL_ADC_IsEnabled+0x1a>
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d101      	bne.n	80018ca <LL_ADC_IsDisableOngoing+0x18>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <LL_ADC_IsDisableOngoing+0x1a>
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <LL_ADC_REG_StartConversion+0x24>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	f043 0204 	orr.w	r2, r3, #4
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	7fffffc0 	.word	0x7fffffc0

08001900 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <LL_ADC_REG_StopConversion+0x24>)
 800190e:	4013      	ands	r3, r2
 8001910:	f043 0210 	orr.w	r2, r3, #16
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	7fffffc0 	.word	0x7fffffc0

08001928 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b04      	cmp	r3, #4
 800193a:	d101      	bne.n	8001940 <LL_ADC_REG_IsConversionOngoing+0x18>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <LL_ADC_INJ_StopConversion+0x24>)
 800195e:	4013      	ands	r3, r2
 8001960:	f043 0220 	orr.w	r2, r3, #32
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	7fffffc0 	.word	0x7fffffc0

08001978 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b08      	cmp	r3, #8
 800198a:	d101      	bne.n	8001990 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e18f      	b.n	8001cda <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d109      	bne.n	80019dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fb29 	bl	8001020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff feef 	bl	80017c4 <LL_ADC_IsDeepPowerDownEnabled>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d004      	beq.n	80019f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fed5 	bl	80017a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff0a 	bl	8001814 <LL_ADC_IsInternalRegulatorEnabled>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d114      	bne.n	8001a30 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff feee 	bl	80017ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a10:	4b87      	ldr	r3, [pc, #540]	; (8001c30 <HAL_ADC_Init+0x290>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	099b      	lsrs	r3, r3, #6
 8001a16:	4a87      	ldr	r2, [pc, #540]	; (8001c34 <HAL_ADC_Init+0x294>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	3301      	adds	r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a22:	e002      	b.n	8001a2a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f9      	bne.n	8001a24 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff feed 	bl	8001814 <LL_ADC_IsInternalRegulatorEnabled>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10d      	bne.n	8001a5c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	f043 0210 	orr.w	r2, r3, #16
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	f043 0201 	orr.w	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff61 	bl	8001928 <LL_ADC_REG_IsConversionOngoing>
 8001a66:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 8129 	bne.w	8001cc8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f040 8125 	bne.w	8001cc8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a82:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a86:	f043 0202 	orr.w	r2, r3, #2
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fefa 	bl	800188c <LL_ADC_IsEnabled>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d136      	bne.n	8001b0c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a65      	ldr	r2, [pc, #404]	; (8001c38 <HAL_ADC_Init+0x298>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d004      	beq.n	8001ab2 <HAL_ADC_Init+0x112>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a63      	ldr	r2, [pc, #396]	; (8001c3c <HAL_ADC_Init+0x29c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d10e      	bne.n	8001ad0 <HAL_ADC_Init+0x130>
 8001ab2:	4861      	ldr	r0, [pc, #388]	; (8001c38 <HAL_ADC_Init+0x298>)
 8001ab4:	f7ff feea 	bl	800188c <LL_ADC_IsEnabled>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	4860      	ldr	r0, [pc, #384]	; (8001c3c <HAL_ADC_Init+0x29c>)
 8001abc:	f7ff fee6 	bl	800188c <LL_ADC_IsEnabled>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4323      	orrs	r3, r4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	e008      	b.n	8001ae2 <HAL_ADC_Init+0x142>
 8001ad0:	485b      	ldr	r0, [pc, #364]	; (8001c40 <HAL_ADC_Init+0x2a0>)
 8001ad2:	f7ff fedb 	bl	800188c <LL_ADC_IsEnabled>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d012      	beq.n	8001b0c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a53      	ldr	r2, [pc, #332]	; (8001c38 <HAL_ADC_Init+0x298>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d004      	beq.n	8001afa <HAL_ADC_Init+0x15a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a51      	ldr	r2, [pc, #324]	; (8001c3c <HAL_ADC_Init+0x29c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_Init+0x15e>
 8001afa:	4a52      	ldr	r2, [pc, #328]	; (8001c44 <HAL_ADC_Init+0x2a4>)
 8001afc:	e000      	b.n	8001b00 <HAL_ADC_Init+0x160>
 8001afe:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <HAL_ADC_Init+0x2a8>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f7ff fd18 	bl	800153c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001b0c:	f7ff fd0a 	bl	8001524 <HAL_GetREVID>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d914      	bls.n	8001b44 <HAL_ADC_Init+0x1a4>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b10      	cmp	r3, #16
 8001b20:	d110      	bne.n	8001b44 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7d5b      	ldrb	r3, [r3, #21]
 8001b26:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b2c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b32:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7f1b      	ldrb	r3, [r3, #28]
 8001b38:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001b3a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b3c:	f043 030c 	orr.w	r3, r3, #12
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	e00d      	b.n	8001b60 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7d5b      	ldrb	r3, [r3, #21]
 8001b48:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b4e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b54:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7f1b      	ldrb	r3, [r3, #28]
 8001b5a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7f1b      	ldrb	r3, [r3, #28]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d106      	bne.n	8001b76 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	045b      	lsls	r3, r3, #17
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <HAL_ADC_Init+0x2ac>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	69b9      	ldr	r1, [r7, #24]
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff febc 	bl	8001928 <LL_ADC_REG_IsConversionOngoing>
 8001bb0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fede 	bl	8001978 <LL_ADC_INJ_IsConversionOngoing>
 8001bbc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d15f      	bne.n	8001c84 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d15c      	bne.n	8001c84 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7d1b      	ldrb	r3, [r3, #20]
 8001bce:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <HAL_ADC_Init+0x2b0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	69b9      	ldr	r1, [r7, #24]
 8001be8:	430b      	orrs	r3, r1
 8001bea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d130      	bne.n	8001c58 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <HAL_ADC_Init+0x2b4>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c0a:	3a01      	subs	r2, #1
 8001c0c:	0411      	lsls	r1, r2, #16
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c12:	4311      	orrs	r1, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c18:	4311      	orrs	r1, r2
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	611a      	str	r2, [r3, #16]
 8001c2c:	e01c      	b.n	8001c68 <HAL_ADC_Init+0x2c8>
 8001c2e:	bf00      	nop
 8001c30:	24000000 	.word	0x24000000
 8001c34:	053e2d63 	.word	0x053e2d63
 8001c38:	40022000 	.word	0x40022000
 8001c3c:	40022100 	.word	0x40022100
 8001c40:	58026000 	.word	0x58026000
 8001c44:	40022300 	.word	0x40022300
 8001c48:	58026300 	.word	0x58026300
 8001c4c:	fff0c003 	.word	0xfff0c003
 8001c50:	ffffbffc 	.word	0xffffbffc
 8001c54:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 ff26 	bl	8002ad0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f023 010f 	bic.w	r1, r3, #15
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	1e5a      	subs	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca4:	e007      	b.n	8001cb6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 020f 	bic.w	r2, r2, #15
 8001cb4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cba:	f023 0303 	bic.w	r3, r3, #3
 8001cbe:	f043 0201 	orr.w	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54
 8001cc6:	e007      	b.n	8001cd8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ccc:	f043 0210 	orr.w	r2, r3, #16
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd90      	pop	{r4, r7, pc}
 8001ce2:	bf00      	nop

08001ce4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a5c      	ldr	r2, [pc, #368]	; (8001e64 <HAL_ADC_Start+0x180>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d004      	beq.n	8001d00 <HAL_ADC_Start+0x1c>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a5b      	ldr	r2, [pc, #364]	; (8001e68 <HAL_ADC_Start+0x184>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_Start+0x20>
 8001d00:	4b5a      	ldr	r3, [pc, #360]	; (8001e6c <HAL_ADC_Start+0x188>)
 8001d02:	e000      	b.n	8001d06 <HAL_ADC_Start+0x22>
 8001d04:	4b5a      	ldr	r3, [pc, #360]	; (8001e70 <HAL_ADC_Start+0x18c>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fd2e 	bl	8001768 <LL_ADC_GetMultimode>
 8001d0c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fe08 	bl	8001928 <LL_ADC_REG_IsConversionOngoing>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 809a 	bne.w	8001e54 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Start+0x4a>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e095      	b.n	8001e5a <HAL_ADC_Start+0x176>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fde0 	bl	80028fc <ADC_Enable>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 8081 	bne.w	8001e4a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d4c:	4b49      	ldr	r3, [pc, #292]	; (8001e74 <HAL_ADC_Start+0x190>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a42      	ldr	r2, [pc, #264]	; (8001e68 <HAL_ADC_Start+0x184>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d002      	beq.n	8001d68 <HAL_ADC_Start+0x84>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	e000      	b.n	8001d6a <HAL_ADC_Start+0x86>
 8001d68:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <HAL_ADC_Start+0x180>)
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d002      	beq.n	8001d78 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d90:	d106      	bne.n	8001da0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	f023 0206 	bic.w	r2, r3, #6
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	659a      	str	r2, [r3, #88]	; 0x58
 8001d9e:	e002      	b.n	8001da6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	221c      	movs	r2, #28
 8001dac:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a2b      	ldr	r2, [pc, #172]	; (8001e68 <HAL_ADC_Start+0x184>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d002      	beq.n	8001dc6 <HAL_ADC_Start+0xe2>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	e000      	b.n	8001dc8 <HAL_ADC_Start+0xe4>
 8001dc6:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <HAL_ADC_Start+0x180>)
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d008      	beq.n	8001de2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d002      	beq.n	8001de2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2b09      	cmp	r3, #9
 8001de0:	d114      	bne.n	8001e0c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d007      	beq.n	8001e00 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fd67 	bl	80018d8 <LL_ADC_REG_StartConversion>
 8001e0a:	e025      	b.n	8001e58 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_ADC_Start+0x184>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d002      	beq.n	8001e28 <HAL_ADC_Start+0x144>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	e000      	b.n	8001e2a <HAL_ADC_Start+0x146>
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_ADC_Start+0x180>)
 8001e2a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00f      	beq.n	8001e58 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54
 8001e48:	e006      	b.n	8001e58 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e52:	e001      	b.n	8001e58 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e54:	2302      	movs	r3, #2
 8001e56:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000
 8001e68:	40022100 	.word	0x40022100
 8001e6c:	40022300 	.word	0x40022300
 8001e70:	58026300 	.word	0x58026300
 8001e74:	fffff0fe 	.word	0xfffff0fe

08001e78 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_Stop+0x16>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e021      	b.n	8001ed2 <HAL_ADC_Stop+0x5a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e96:	2103      	movs	r1, #3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fc73 	bl	8002784 <ADC_ConversionStop>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10f      	bne.n	8001ec8 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fdb1 	bl	8002a10 <ADC_Disable>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d107      	bne.n	8001ec8 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_ADC_Stop+0x64>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	ffffeefe 	.word	0xffffeefe

08001ee0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a72      	ldr	r2, [pc, #456]	; (80020b8 <HAL_ADC_PollForConversion+0x1d8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d004      	beq.n	8001efe <HAL_ADC_PollForConversion+0x1e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a70      	ldr	r2, [pc, #448]	; (80020bc <HAL_ADC_PollForConversion+0x1dc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_PollForConversion+0x22>
 8001efe:	4b70      	ldr	r3, [pc, #448]	; (80020c0 <HAL_ADC_PollForConversion+0x1e0>)
 8001f00:	e000      	b.n	8001f04 <HAL_ADC_PollForConversion+0x24>
 8001f02:	4b70      	ldr	r3, [pc, #448]	; (80020c4 <HAL_ADC_PollForConversion+0x1e4>)
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fc2f 	bl	8001768 <LL_ADC_GetMultimode>
 8001f0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d102      	bne.n	8001f1a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f14:	2308      	movs	r3, #8
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	e037      	b.n	8001f8a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d002      	beq.n	8001f2c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b09      	cmp	r3, #9
 8001f2a:	d111      	bne.n	8001f50 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f043 0220 	orr.w	r2, r3, #32
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0b1      	b.n	80020ae <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001f4e:	e01c      	b.n	8001f8a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a58      	ldr	r2, [pc, #352]	; (80020b8 <HAL_ADC_PollForConversion+0x1d8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d004      	beq.n	8001f64 <HAL_ADC_PollForConversion+0x84>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a57      	ldr	r2, [pc, #348]	; (80020bc <HAL_ADC_PollForConversion+0x1dc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_PollForConversion+0x88>
 8001f64:	4b56      	ldr	r3, [pc, #344]	; (80020c0 <HAL_ADC_PollForConversion+0x1e0>)
 8001f66:	e000      	b.n	8001f6a <HAL_ADC_PollForConversion+0x8a>
 8001f68:	4b56      	ldr	r3, [pc, #344]	; (80020c4 <HAL_ADC_PollForConversion+0x1e4>)
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fc0a 	bl	8001784 <LL_ADC_GetMultiDMATransfer>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7a:	f043 0220 	orr.w	r2, r3, #32
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e093      	b.n	80020ae <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f86:	2304      	movs	r3, #4
 8001f88:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f8a:	f7ff fabf 	bl	800150c <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f90:	e021      	b.n	8001fd6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d01d      	beq.n	8001fd6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f9a:	f7ff fab7 	bl	800150c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d302      	bcc.n	8001fb0 <HAL_ADC_PollForConversion+0xd0>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d112      	bne.n	8001fd6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	f043 0204 	orr.w	r2, r3, #4
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e06b      	b.n	80020ae <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0d6      	beq.n	8001f92 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fb29 	bl	800164c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01c      	beq.n	800203a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7d5b      	ldrb	r3, [r3, #21]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d118      	bne.n	800203a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b08      	cmp	r3, #8
 8002014:	d111      	bne.n	800203a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d105      	bne.n	800203a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <HAL_ADC_PollForConversion+0x1dc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d002      	beq.n	800204a <HAL_ADC_PollForConversion+0x16a>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	e000      	b.n	800204c <HAL_ADC_PollForConversion+0x16c>
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_ADC_PollForConversion+0x1d8>)
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	4293      	cmp	r3, r2
 8002052:	d008      	beq.n	8002066 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b05      	cmp	r3, #5
 800205e:	d002      	beq.n	8002066 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b09      	cmp	r3, #9
 8002064:	d104      	bne.n	8002070 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	e00c      	b.n	800208a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a11      	ldr	r2, [pc, #68]	; (80020bc <HAL_ADC_PollForConversion+0x1dc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d002      	beq.n	8002080 <HAL_ADC_PollForConversion+0x1a0>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	e000      	b.n	8002082 <HAL_ADC_PollForConversion+0x1a2>
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_ADC_PollForConversion+0x1d8>)
 8002082:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	2b08      	cmp	r3, #8
 800208e:	d104      	bne.n	800209a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2208      	movs	r2, #8
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e008      	b.n	80020ac <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d103      	bne.n	80020ac <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	220c      	movs	r2, #12
 80020aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40022100 	.word	0x40022100
 80020c0:	40022300 	.word	0x40022300
 80020c4:	58026300 	.word	0x58026300

080020c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b0a1      	sub	sp, #132	; 0x84
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4a9d      	ldr	r2, [pc, #628]	; (8002374 <HAL_ADC_ConfigChannel+0x290>)
 80020fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_ADC_ConfigChannel+0x2a>
 800210a:	2302      	movs	r3, #2
 800210c:	e321      	b.n	8002752 <HAL_ADC_ConfigChannel+0x66e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fc04 	bl	8001928 <LL_ADC_REG_IsConversionOngoing>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 8306 	bne.w	8002734 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002130:	2b00      	cmp	r3, #0
 8002132:	d108      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x62>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0e9b      	lsrs	r3, r3, #26
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2201      	movs	r2, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	e016      	b.n	8002174 <HAL_ADC_ConfigChannel+0x90>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002156:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800215e:	2320      	movs	r3, #32
 8002160:	e003      	b.n	800216a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	2201      	movs	r2, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	69d1      	ldr	r1, [r2, #28]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	430b      	orrs	r3, r1
 8002180:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6859      	ldr	r1, [r3, #4]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	f7ff fa6f 	bl	8001672 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fbc5 	bl	8001928 <LL_ADC_REG_IsConversionOngoing>
 800219e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fbe7 	bl	8001978 <LL_ADC_INJ_IsConversionOngoing>
 80021aa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 80b3 	bne.w	800231a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 80af 	bne.w	800231a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	461a      	mov	r2, r3
 80021ca:	f7ff fa7e 	bl	80016ca <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021ce:	4b6a      	ldr	r3, [pc, #424]	; (8002378 <HAL_ADC_ConfigChannel+0x294>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80021d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021da:	d10b      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x110>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	e01d      	b.n	8002230 <HAL_ADC_ConfigChannel+0x14c>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10b      	bne.n	800221a <HAL_ADC_ConfigChannel+0x136>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	e00a      	b.n	8002230 <HAL_ADC_ConfigChannel+0x14c>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b04      	cmp	r3, #4
 8002238:	d027      	beq.n	800228a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6919      	ldr	r1, [r3, #16]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002248:	f7ff f9ac 	bl	80015a4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6919      	ldr	r1, [r3, #16]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	7e5b      	ldrb	r3, [r3, #25]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d102      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x17e>
 800225c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002260:	e000      	b.n	8002264 <HAL_ADC_ConfigChannel+0x180>
 8002262:	2300      	movs	r3, #0
 8002264:	461a      	mov	r2, r3
 8002266:	f7ff f9d6 	bl	8001616 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6919      	ldr	r1, [r3, #16]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	7e1b      	ldrb	r3, [r3, #24]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d102      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x19c>
 800227a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800227e:	e000      	b.n	8002282 <HAL_ADC_ConfigChannel+0x19e>
 8002280:	2300      	movs	r3, #0
 8002282:	461a      	mov	r2, r3
 8002284:	f7ff f9ae 	bl	80015e4 <LL_ADC_SetDataRightShift>
 8002288:	e047      	b.n	800231a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002290:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	069b      	lsls	r3, r3, #26
 800229a:	429a      	cmp	r2, r3
 800229c:	d107      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022ac:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	069b      	lsls	r3, r3, #26
 80022be:	429a      	cmp	r2, r3
 80022c0:	d107      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022d0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	069b      	lsls	r3, r3, #26
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d107      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022f4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	069b      	lsls	r3, r3, #26
 8002306:	429a      	cmp	r2, r3
 8002308:	d107      	bne.n	800231a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002318:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fab4 	bl	800188c <LL_ADC_IsEnabled>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 820d 	bne.w	8002746 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6819      	ldr	r1, [r3, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	461a      	mov	r2, r3
 800233a:	f7ff f9f1 	bl	8001720 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	4a0c      	ldr	r2, [pc, #48]	; (8002374 <HAL_ADC_ConfigChannel+0x290>)
 8002344:	4293      	cmp	r3, r2
 8002346:	f040 8133 	bne.w	80025b0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002356:	2b00      	cmp	r3, #0
 8002358:	d110      	bne.n	800237c <HAL_ADC_ConfigChannel+0x298>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0e9b      	lsrs	r3, r3, #26
 8002360:	3301      	adds	r3, #1
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2b09      	cmp	r3, #9
 8002368:	bf94      	ite	ls
 800236a:	2301      	movls	r3, #1
 800236c:	2300      	movhi	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	e01e      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x2cc>
 8002372:	bf00      	nop
 8002374:	47ff0000 	.word	0x47ff0000
 8002378:	5c001000 	.word	0x5c001000
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800238a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800238c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800238e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002394:	2320      	movs	r3, #32
 8002396:	e003      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	3301      	adds	r3, #1
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	2b09      	cmp	r3, #9
 80023a8:	bf94      	ite	ls
 80023aa:	2301      	movls	r3, #1
 80023ac:	2300      	movhi	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d079      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d107      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x2ec>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	3301      	adds	r3, #1
 80023c8:	069b      	lsls	r3, r3, #26
 80023ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ce:	e015      	b.n	80023fc <HAL_ADC_ConfigChannel+0x318>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80023de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80023e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80023e8:	2320      	movs	r3, #32
 80023ea:	e003      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80023ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	3301      	adds	r3, #1
 80023f6:	069b      	lsls	r3, r3, #26
 80023f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_ADC_ConfigChannel+0x338>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0e9b      	lsrs	r3, r3, #26
 800240e:	3301      	adds	r3, #1
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	2101      	movs	r1, #1
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	e017      	b.n	800244c <HAL_ADC_ConfigChannel+0x368>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800242a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800242e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002434:	2320      	movs	r3, #32
 8002436:	e003      	b.n	8002440 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	3301      	adds	r3, #1
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	ea42 0103 	orr.w	r1, r2, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x38e>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	3301      	adds	r3, #1
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	051b      	lsls	r3, r3, #20
 8002470:	e018      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x3c0>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800248a:	2320      	movs	r3, #32
 800248c:	e003      	b.n	8002496 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800248e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	3301      	adds	r3, #1
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a4:	430b      	orrs	r3, r1
 80024a6:	e07e      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d107      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x3e0>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	3301      	adds	r3, #1
 80024bc:	069b      	lsls	r3, r3, #26
 80024be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c2:	e015      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x40c>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80024dc:	2320      	movs	r3, #32
 80024de:	e003      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	069b      	lsls	r3, r3, #26
 80024ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d109      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x42c>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0e9b      	lsrs	r3, r3, #26
 8002502:	3301      	adds	r3, #1
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2101      	movs	r1, #1
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	e017      	b.n	8002540 <HAL_ADC_ConfigChannel+0x45c>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	61bb      	str	r3, [r7, #24]
  return result;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002528:	2320      	movs	r3, #32
 800252a:	e003      	b.n	8002534 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f003 031f 	and.w	r3, r3, #31
 800253a:	2101      	movs	r1, #1
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	ea42 0103 	orr.w	r1, r2, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10d      	bne.n	800256c <HAL_ADC_ConfigChannel+0x488>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	3301      	adds	r3, #1
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	3b1e      	subs	r3, #30
 8002564:	051b      	lsls	r3, r3, #20
 8002566:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800256a:	e01b      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x4c0>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	60fb      	str	r3, [r7, #12]
  return result;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002584:	2320      	movs	r3, #32
 8002586:	e003      	b.n	8002590 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	f003 021f 	and.w	r2, r3, #31
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	3b1e      	subs	r3, #30
 800259e:	051b      	lsls	r3, r3, #20
 80025a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a4:	430b      	orrs	r3, r1
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	6892      	ldr	r2, [r2, #8]
 80025aa:	4619      	mov	r1, r3
 80025ac:	f7ff f88d 	bl	80016ca <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f280 80c6 	bge.w	8002746 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a67      	ldr	r2, [pc, #412]	; (800275c <HAL_ADC_ConfigChannel+0x678>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d004      	beq.n	80025ce <HAL_ADC_ConfigChannel+0x4ea>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a65      	ldr	r2, [pc, #404]	; (8002760 <HAL_ADC_ConfigChannel+0x67c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x4ee>
 80025ce:	4b65      	ldr	r3, [pc, #404]	; (8002764 <HAL_ADC_ConfigChannel+0x680>)
 80025d0:	e000      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x4f0>
 80025d2:	4b65      	ldr	r3, [pc, #404]	; (8002768 <HAL_ADC_ConfigChannel+0x684>)
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe ffd7 	bl	8001588 <LL_ADC_GetCommonPathInternalCh>
 80025da:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a5e      	ldr	r2, [pc, #376]	; (800275c <HAL_ADC_ConfigChannel+0x678>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d004      	beq.n	80025f0 <HAL_ADC_ConfigChannel+0x50c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a5d      	ldr	r2, [pc, #372]	; (8002760 <HAL_ADC_ConfigChannel+0x67c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d10e      	bne.n	800260e <HAL_ADC_ConfigChannel+0x52a>
 80025f0:	485a      	ldr	r0, [pc, #360]	; (800275c <HAL_ADC_ConfigChannel+0x678>)
 80025f2:	f7ff f94b 	bl	800188c <LL_ADC_IsEnabled>
 80025f6:	4604      	mov	r4, r0
 80025f8:	4859      	ldr	r0, [pc, #356]	; (8002760 <HAL_ADC_ConfigChannel+0x67c>)
 80025fa:	f7ff f947 	bl	800188c <LL_ADC_IsEnabled>
 80025fe:	4603      	mov	r3, r0
 8002600:	4323      	orrs	r3, r4
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf0c      	ite	eq
 8002606:	2301      	moveq	r3, #1
 8002608:	2300      	movne	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	e008      	b.n	8002620 <HAL_ADC_ConfigChannel+0x53c>
 800260e:	4857      	ldr	r0, [pc, #348]	; (800276c <HAL_ADC_ConfigChannel+0x688>)
 8002610:	f7ff f93c 	bl	800188c <LL_ADC_IsEnabled>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d07d      	beq.n	8002720 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a51      	ldr	r2, [pc, #324]	; (8002770 <HAL_ADC_ConfigChannel+0x68c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d130      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x5ac>
 800262e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d12b      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a4b      	ldr	r2, [pc, #300]	; (800276c <HAL_ADC_ConfigChannel+0x688>)
 800263e:	4293      	cmp	r3, r2
 8002640:	f040 8081 	bne.w	8002746 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a44      	ldr	r2, [pc, #272]	; (800275c <HAL_ADC_ConfigChannel+0x678>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d004      	beq.n	8002658 <HAL_ADC_ConfigChannel+0x574>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a43      	ldr	r2, [pc, #268]	; (8002760 <HAL_ADC_ConfigChannel+0x67c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d101      	bne.n	800265c <HAL_ADC_ConfigChannel+0x578>
 8002658:	4a42      	ldr	r2, [pc, #264]	; (8002764 <HAL_ADC_ConfigChannel+0x680>)
 800265a:	e000      	b.n	800265e <HAL_ADC_ConfigChannel+0x57a>
 800265c:	4a42      	ldr	r2, [pc, #264]	; (8002768 <HAL_ADC_ConfigChannel+0x684>)
 800265e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002660:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f7fe ff7b 	bl	8001562 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800266c:	4b41      	ldr	r3, [pc, #260]	; (8002774 <HAL_ADC_ConfigChannel+0x690>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	4a41      	ldr	r2, [pc, #260]	; (8002778 <HAL_ADC_ConfigChannel+0x694>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002680:	e002      	b.n	8002688 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3b01      	subs	r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f9      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800268e:	e05a      	b.n	8002746 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a39      	ldr	r2, [pc, #228]	; (800277c <HAL_ADC_ConfigChannel+0x698>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d11e      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x5f4>
 800269a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800269c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d119      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a30      	ldr	r2, [pc, #192]	; (800276c <HAL_ADC_ConfigChannel+0x688>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d14b      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a2a      	ldr	r2, [pc, #168]	; (800275c <HAL_ADC_ConfigChannel+0x678>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d004      	beq.n	80026c2 <HAL_ADC_ConfigChannel+0x5de>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a28      	ldr	r2, [pc, #160]	; (8002760 <HAL_ADC_ConfigChannel+0x67c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x5e2>
 80026c2:	4a28      	ldr	r2, [pc, #160]	; (8002764 <HAL_ADC_ConfigChannel+0x680>)
 80026c4:	e000      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x5e4>
 80026c6:	4a28      	ldr	r2, [pc, #160]	; (8002768 <HAL_ADC_ConfigChannel+0x684>)
 80026c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ce:	4619      	mov	r1, r3
 80026d0:	4610      	mov	r0, r2
 80026d2:	f7fe ff46 	bl	8001562 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026d6:	e036      	b.n	8002746 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a28      	ldr	r2, [pc, #160]	; (8002780 <HAL_ADC_ConfigChannel+0x69c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d131      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x662>
 80026e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d12c      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1e      	ldr	r2, [pc, #120]	; (800276c <HAL_ADC_ConfigChannel+0x688>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d127      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a18      	ldr	r2, [pc, #96]	; (800275c <HAL_ADC_ConfigChannel+0x678>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d004      	beq.n	800270a <HAL_ADC_ConfigChannel+0x626>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a16      	ldr	r2, [pc, #88]	; (8002760 <HAL_ADC_ConfigChannel+0x67c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d101      	bne.n	800270e <HAL_ADC_ConfigChannel+0x62a>
 800270a:	4a16      	ldr	r2, [pc, #88]	; (8002764 <HAL_ADC_ConfigChannel+0x680>)
 800270c:	e000      	b.n	8002710 <HAL_ADC_ConfigChannel+0x62c>
 800270e:	4a16      	ldr	r2, [pc, #88]	; (8002768 <HAL_ADC_ConfigChannel+0x684>)
 8002710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002712:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002716:	4619      	mov	r1, r3
 8002718:	4610      	mov	r0, r2
 800271a:	f7fe ff22 	bl	8001562 <LL_ADC_SetCommonPathInternalCh>
 800271e:	e012      	b.n	8002746 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f043 0220 	orr.w	r2, r3, #32
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002732:	e008      	b.n	8002746 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	f043 0220 	orr.w	r2, r3, #32
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800274e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002752:	4618      	mov	r0, r3
 8002754:	3784      	adds	r7, #132	; 0x84
 8002756:	46bd      	mov	sp, r7
 8002758:	bd90      	pop	{r4, r7, pc}
 800275a:	bf00      	nop
 800275c:	40022000 	.word	0x40022000
 8002760:	40022100 	.word	0x40022100
 8002764:	40022300 	.word	0x40022300
 8002768:	58026300 	.word	0x58026300
 800276c:	58026000 	.word	0x58026000
 8002770:	cb840000 	.word	0xcb840000
 8002774:	24000000 	.word	0x24000000
 8002778:	053e2d63 	.word	0x053e2d63
 800277c:	c7520000 	.word	0xc7520000
 8002780:	cfb80000 	.word	0xcfb80000

08002784 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff f8c4 	bl	8001928 <LL_ADC_REG_IsConversionOngoing>
 80027a0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff f8e6 	bl	8001978 <LL_ADC_INJ_IsConversionOngoing>
 80027ac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d103      	bne.n	80027bc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8098 	beq.w	80028ec <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d02a      	beq.n	8002820 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7d5b      	ldrb	r3, [r3, #21]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d126      	bne.n	8002820 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7d1b      	ldrb	r3, [r3, #20]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d122      	bne.n	8002820 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80027da:	2301      	movs	r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80027de:	e014      	b.n	800280a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	4a45      	ldr	r2, [pc, #276]	; (80028f8 <ADC_ConversionStop+0x174>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d90d      	bls.n	8002804 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	f043 0210 	orr.w	r2, r3, #16
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e074      	b.n	80028ee <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	3301      	adds	r3, #1
 8002808:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	d1e3      	bne.n	80027e0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2240      	movs	r2, #64	; 0x40
 800281e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d014      	beq.n	8002850 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f87c 	bl	8001928 <LL_ADC_REG_IsConversionOngoing>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00c      	beq.n	8002850 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f839 	bl	80018b2 <LL_ADC_IsDisableOngoing>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d104      	bne.n	8002850 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff f858 	bl	8001900 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d014      	beq.n	8002880 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff f88c 	bl	8001978 <LL_ADC_INJ_IsConversionOngoing>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00c      	beq.n	8002880 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f821 	bl	80018b2 <LL_ADC_IsDisableOngoing>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d104      	bne.n	8002880 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f868 	bl	8001950 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d005      	beq.n	8002892 <ADC_ConversionStop+0x10e>
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b03      	cmp	r3, #3
 800288a:	d105      	bne.n	8002898 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800288c:	230c      	movs	r3, #12
 800288e:	617b      	str	r3, [r7, #20]
        break;
 8002890:	e005      	b.n	800289e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002892:	2308      	movs	r3, #8
 8002894:	617b      	str	r3, [r7, #20]
        break;
 8002896:	e002      	b.n	800289e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002898:	2304      	movs	r3, #4
 800289a:	617b      	str	r3, [r7, #20]
        break;
 800289c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800289e:	f7fe fe35 	bl	800150c <HAL_GetTick>
 80028a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028a4:	e01b      	b.n	80028de <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028a6:	f7fe fe31 	bl	800150c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b05      	cmp	r3, #5
 80028b2:	d914      	bls.n	80028de <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	f043 0210 	orr.w	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	f043 0201 	orr.w	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e007      	b.n	80028ee <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1dc      	bne.n	80028a6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	000cdbff 	.word	0x000cdbff

080028fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe ffbf 	bl	800188c <LL_ADC_IsEnabled>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d16e      	bne.n	80029f2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	4b38      	ldr	r3, [pc, #224]	; (80029fc <ADC_Enable+0x100>)
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f043 0210 	orr.w	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	f043 0201 	orr.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e05a      	b.n	80029f4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe ff7a 	bl	800183c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002948:	f7fe fde0 	bl	800150c <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a2b      	ldr	r2, [pc, #172]	; (8002a00 <ADC_Enable+0x104>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d004      	beq.n	8002962 <ADC_Enable+0x66>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a29      	ldr	r2, [pc, #164]	; (8002a04 <ADC_Enable+0x108>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <ADC_Enable+0x6a>
 8002962:	4b29      	ldr	r3, [pc, #164]	; (8002a08 <ADC_Enable+0x10c>)
 8002964:	e000      	b.n	8002968 <ADC_Enable+0x6c>
 8002966:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <ADC_Enable+0x110>)
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fefd 	bl	8001768 <LL_ADC_GetMultimode>
 800296e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a23      	ldr	r2, [pc, #140]	; (8002a04 <ADC_Enable+0x108>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d002      	beq.n	8002980 <ADC_Enable+0x84>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	e000      	b.n	8002982 <ADC_Enable+0x86>
 8002980:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <ADC_Enable+0x104>)
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	4293      	cmp	r3, r2
 8002988:	d02c      	beq.n	80029e4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d130      	bne.n	80029f2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002990:	e028      	b.n	80029e4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe ff78 	bl	800188c <LL_ADC_IsEnabled>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d104      	bne.n	80029ac <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe ff48 	bl	800183c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029ac:	f7fe fdae 	bl	800150c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d914      	bls.n	80029e4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d00d      	beq.n	80029e4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	f043 0210 	orr.w	r2, r3, #16
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	f043 0201 	orr.w	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e007      	b.n	80029f4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d1cf      	bne.n	8002992 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	8000003f 	.word	0x8000003f
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40022100 	.word	0x40022100
 8002a08:	40022300 	.word	0x40022300
 8002a0c:	58026300 	.word	0x58026300

08002a10 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe ff48 	bl	80018b2 <LL_ADC_IsDisableOngoing>
 8002a22:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe ff2f 	bl	800188c <LL_ADC_IsEnabled>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d047      	beq.n	8002ac4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d144      	bne.n	8002ac4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 030d 	and.w	r3, r3, #13
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d10c      	bne.n	8002a62 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe ff09 	bl	8001864 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2203      	movs	r2, #3
 8002a58:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a5a:	f7fe fd57 	bl	800150c <HAL_GetTick>
 8002a5e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a60:	e029      	b.n	8002ab6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	f043 0210 	orr.w	r2, r3, #16
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e023      	b.n	8002ac6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a7e:	f7fe fd45 	bl	800150c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d914      	bls.n	8002ab6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	f043 0210 	orr.w	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e007      	b.n	8002ac6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1dc      	bne.n	8002a7e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a79      	ldr	r2, [pc, #484]	; (8002cc4 <ADC_ConfigureBoostMode+0x1f4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d004      	beq.n	8002aec <ADC_ConfigureBoostMode+0x1c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a78      	ldr	r2, [pc, #480]	; (8002cc8 <ADC_ConfigureBoostMode+0x1f8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d109      	bne.n	8002b00 <ADC_ConfigureBoostMode+0x30>
 8002aec:	4b77      	ldr	r3, [pc, #476]	; (8002ccc <ADC_ConfigureBoostMode+0x1fc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e008      	b.n	8002b12 <ADC_ConfigureBoostMode+0x42>
 8002b00:	4b73      	ldr	r3, [pc, #460]	; (8002cd0 <ADC_ConfigureBoostMode+0x200>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf14      	ite	ne
 8002b0c:	2301      	movne	r3, #1
 8002b0e:	2300      	moveq	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d01c      	beq.n	8002b50 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b16:	f001 fc63 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8002b1a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b24:	d010      	beq.n	8002b48 <ADC_ConfigureBoostMode+0x78>
 8002b26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b2a:	d871      	bhi.n	8002c10 <ADC_ConfigureBoostMode+0x140>
 8002b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b30:	d002      	beq.n	8002b38 <ADC_ConfigureBoostMode+0x68>
 8002b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b36:	d16b      	bne.n	8002c10 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	0c1b      	lsrs	r3, r3, #16
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	60fb      	str	r3, [r7, #12]
        break;
 8002b46:	e066      	b.n	8002c16 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	60fb      	str	r3, [r7, #12]
        break;
 8002b4e:	e062      	b.n	8002c16 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b50:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b54:	f002 fbe6 	bl	8005324 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b58:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b62:	d051      	beq.n	8002c08 <ADC_ConfigureBoostMode+0x138>
 8002b64:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b68:	d854      	bhi.n	8002c14 <ADC_ConfigureBoostMode+0x144>
 8002b6a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b6e:	d047      	beq.n	8002c00 <ADC_ConfigureBoostMode+0x130>
 8002b70:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b74:	d84e      	bhi.n	8002c14 <ADC_ConfigureBoostMode+0x144>
 8002b76:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b7a:	d03d      	beq.n	8002bf8 <ADC_ConfigureBoostMode+0x128>
 8002b7c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b80:	d848      	bhi.n	8002c14 <ADC_ConfigureBoostMode+0x144>
 8002b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b86:	d033      	beq.n	8002bf0 <ADC_ConfigureBoostMode+0x120>
 8002b88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b8c:	d842      	bhi.n	8002c14 <ADC_ConfigureBoostMode+0x144>
 8002b8e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b92:	d029      	beq.n	8002be8 <ADC_ConfigureBoostMode+0x118>
 8002b94:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b98:	d83c      	bhi.n	8002c14 <ADC_ConfigureBoostMode+0x144>
 8002b9a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b9e:	d01a      	beq.n	8002bd6 <ADC_ConfigureBoostMode+0x106>
 8002ba0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002ba4:	d836      	bhi.n	8002c14 <ADC_ConfigureBoostMode+0x144>
 8002ba6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002baa:	d014      	beq.n	8002bd6 <ADC_ConfigureBoostMode+0x106>
 8002bac:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002bb0:	d830      	bhi.n	8002c14 <ADC_ConfigureBoostMode+0x144>
 8002bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bb6:	d00e      	beq.n	8002bd6 <ADC_ConfigureBoostMode+0x106>
 8002bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bbc:	d82a      	bhi.n	8002c14 <ADC_ConfigureBoostMode+0x144>
 8002bbe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bc2:	d008      	beq.n	8002bd6 <ADC_ConfigureBoostMode+0x106>
 8002bc4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bc8:	d824      	bhi.n	8002c14 <ADC_ConfigureBoostMode+0x144>
 8002bca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bce:	d002      	beq.n	8002bd6 <ADC_ConfigureBoostMode+0x106>
 8002bd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bd4:	d11e      	bne.n	8002c14 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	0c9b      	lsrs	r3, r3, #18
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	60fb      	str	r3, [r7, #12]
        break;
 8002be6:	e016      	b.n	8002c16 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	60fb      	str	r3, [r7, #12]
        break;
 8002bee:	e012      	b.n	8002c16 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	60fb      	str	r3, [r7, #12]
        break;
 8002bf6:	e00e      	b.n	8002c16 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	099b      	lsrs	r3, r3, #6
 8002bfc:	60fb      	str	r3, [r7, #12]
        break;
 8002bfe:	e00a      	b.n	8002c16 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	09db      	lsrs	r3, r3, #7
 8002c04:	60fb      	str	r3, [r7, #12]
        break;
 8002c06:	e006      	b.n	8002c16 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	60fb      	str	r3, [r7, #12]
        break;
 8002c0e:	e002      	b.n	8002c16 <ADC_ConfigureBoostMode+0x146>
        break;
 8002c10:	bf00      	nop
 8002c12:	e000      	b.n	8002c16 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002c14:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002c16:	f7fe fc85 	bl	8001524 <HAL_GetREVID>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d815      	bhi.n	8002c50 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a2b      	ldr	r2, [pc, #172]	; (8002cd4 <ADC_ConfigureBoostMode+0x204>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d908      	bls.n	8002c3e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c3a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c3c:	e03e      	b.n	8002cbc <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c4c:	609a      	str	r2, [r3, #8]
}
 8002c4e:	e035      	b.n	8002cbc <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	085b      	lsrs	r3, r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4a1f      	ldr	r2, [pc, #124]	; (8002cd8 <ADC_ConfigureBoostMode+0x208>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d808      	bhi.n	8002c70 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c6c:	609a      	str	r2, [r3, #8]
}
 8002c6e:	e025      	b.n	8002cbc <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4a1a      	ldr	r2, [pc, #104]	; (8002cdc <ADC_ConfigureBoostMode+0x20c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d80a      	bhi.n	8002c8e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c8a:	609a      	str	r2, [r3, #8]
}
 8002c8c:	e016      	b.n	8002cbc <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <ADC_ConfigureBoostMode+0x210>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d80a      	bhi.n	8002cac <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca8:	609a      	str	r2, [r3, #8]
}
 8002caa:	e007      	b.n	8002cbc <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002cba:	609a      	str	r2, [r3, #8]
}
 8002cbc:	bf00      	nop
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40022000 	.word	0x40022000
 8002cc8:	40022100 	.word	0x40022100
 8002ccc:	40022300 	.word	0x40022300
 8002cd0:	58026300 	.word	0x58026300
 8002cd4:	01312d00 	.word	0x01312d00
 8002cd8:	005f5e10 	.word	0x005f5e10
 8002cdc:	00bebc20 	.word	0x00bebc20
 8002ce0:	017d7840 	.word	0x017d7840

08002ce4 <LL_ADC_IsEnabled>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <LL_ADC_IsEnabled+0x18>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <LL_ADC_IsEnabled+0x1a>
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_ADC_REG_IsConversionOngoing>:
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d101      	bne.n	8002d22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b09f      	sub	sp, #124	; 0x7c
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e0be      	b.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a5c      	ldr	r2, [pc, #368]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d102      	bne.n	8002d6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d68:	4b5b      	ldr	r3, [pc, #364]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	e001      	b.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10b      	bne.n	8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7c:	f043 0220 	orr.w	r2, r3, #32
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e09d      	b.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ffb9 	bl	8002d0a <LL_ADC_REG_IsConversionOngoing>
 8002d98:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ffb3 	bl	8002d0a <LL_ADC_REG_IsConversionOngoing>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d17f      	bne.n	8002eaa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002daa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d17c      	bne.n	8002eaa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a47      	ldr	r2, [pc, #284]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d004      	beq.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a46      	ldr	r2, [pc, #280]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002dc4:	4b45      	ldr	r3, [pc, #276]	; (8002edc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002dc6:	e000      	b.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002dc8:	4b45      	ldr	r3, [pc, #276]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002dca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d039      	beq.n	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a3a      	ldr	r2, [pc, #232]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a38      	ldr	r2, [pc, #224]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d10e      	bne.n	8002e18 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002dfa:	4836      	ldr	r0, [pc, #216]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dfc:	f7ff ff72 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002e00:	4604      	mov	r4, r0
 8002e02:	4835      	ldr	r0, [pc, #212]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e04:	f7ff ff6e 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4323      	orrs	r3, r4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e008      	b.n	8002e2a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002e18:	4832      	ldr	r0, [pc, #200]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002e1a:	f7ff ff63 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d047      	beq.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	6811      	ldr	r1, [r2, #0]
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	6892      	ldr	r2, [r2, #8]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	431a      	orrs	r2, r3
 8002e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e44:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e46:	e03a      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e52:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1e      	ldr	r2, [pc, #120]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d10e      	bne.n	8002e86 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002e68:	481a      	ldr	r0, [pc, #104]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e6a:	f7ff ff3b 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002e6e:	4604      	mov	r4, r0
 8002e70:	4819      	ldr	r0, [pc, #100]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e72:	f7ff ff37 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4323      	orrs	r3, r4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf0c      	ite	eq
 8002e7e:	2301      	moveq	r3, #1
 8002e80:	2300      	movne	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	e008      	b.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002e86:	4817      	ldr	r0, [pc, #92]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002e88:	f7ff ff2c 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bf0c      	ite	eq
 8002e92:	2301      	moveq	r3, #1
 8002e94:	2300      	movne	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d010      	beq.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ea6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ea8:	e009      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ebc:	e000      	b.n	8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ebe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ec8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	377c      	adds	r7, #124	; 0x7c
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd90      	pop	{r4, r7, pc}
 8002ed4:	40022000 	.word	0x40022000
 8002ed8:	40022100 	.word	0x40022100
 8002edc:	40022300 	.word	0x40022300
 8002ee0:	58026300 	.word	0x58026300
 8002ee4:	58026000 	.word	0x58026000
 8002ee8:	fffff0e0 	.word	0xfffff0e0

08002eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <__NVIC_SetPriorityGrouping+0x40>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1a:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <__NVIC_SetPriorityGrouping+0x40>)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	60d3      	str	r3, [r2, #12]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	e000ed00 	.word	0xe000ed00
 8002f30:	05fa0000 	.word	0x05fa0000

08002f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <__NVIC_GetPriorityGrouping+0x18>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	f003 0307 	and.w	r3, r3, #7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	db0a      	blt.n	8002f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	490c      	ldr	r1, [pc, #48]	; (8002f9c <__NVIC_SetPriority+0x4c>)
 8002f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f6e:	0112      	lsls	r2, r2, #4
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	440b      	add	r3, r1
 8002f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f78:	e00a      	b.n	8002f90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4908      	ldr	r1, [pc, #32]	; (8002fa0 <__NVIC_SetPriority+0x50>)
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	3b04      	subs	r3, #4
 8002f88:	0112      	lsls	r2, r2, #4
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	761a      	strb	r2, [r3, #24]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000e100 	.word	0xe000e100
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f1c3 0307 	rsb	r3, r3, #7
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	bf28      	it	cs
 8002fc2:	2304      	movcs	r3, #4
 8002fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d902      	bls.n	8002fd4 <NVIC_EncodePriority+0x30>
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3b03      	subs	r3, #3
 8002fd2:	e000      	b.n	8002fd6 <NVIC_EncodePriority+0x32>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43d9      	mvns	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ffc:	4313      	orrs	r3, r2
         );
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3724      	adds	r7, #36	; 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800301c:	d301      	bcc.n	8003022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800301e:	2301      	movs	r3, #1
 8003020:	e00f      	b.n	8003042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003022:	4a0a      	ldr	r2, [pc, #40]	; (800304c <SysTick_Config+0x40>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800302a:	210f      	movs	r1, #15
 800302c:	f04f 30ff 	mov.w	r0, #4294967295
 8003030:	f7ff ff8e 	bl	8002f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <SysTick_Config+0x40>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303a:	4b04      	ldr	r3, [pc, #16]	; (800304c <SysTick_Config+0x40>)
 800303c:	2207      	movs	r2, #7
 800303e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	e000e010 	.word	0xe000e010

08003050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff47 	bl	8002eec <__NVIC_SetPriorityGrouping>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	4603      	mov	r3, r0
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003074:	f7ff ff5e 	bl	8002f34 <__NVIC_GetPriorityGrouping>
 8003078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	6978      	ldr	r0, [r7, #20]
 8003080:	f7ff ff90 	bl	8002fa4 <NVIC_EncodePriority>
 8003084:	4602      	mov	r2, r0
 8003086:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff5f 	bl	8002f50 <__NVIC_SetPriority>
}
 8003092:	bf00      	nop
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff ffb2 	bl	800300c <SysTick_Config>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80030c2:	4b89      	ldr	r3, [pc, #548]	; (80032e8 <HAL_GPIO_Init+0x234>)
 80030c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030c6:	e194      	b.n	80033f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	2101      	movs	r1, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8186 	beq.w	80033ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d005      	beq.n	80030f8 <HAL_GPIO_Init+0x44>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d130      	bne.n	800315a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2203      	movs	r2, #3
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800312e:	2201      	movs	r2, #1
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	091b      	lsrs	r3, r3, #4
 8003144:	f003 0201 	and.w	r2, r3, #1
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	2b03      	cmp	r3, #3
 8003164:	d017      	beq.n	8003196 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	2203      	movs	r2, #3
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d123      	bne.n	80031ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	08da      	lsrs	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3208      	adds	r2, #8
 80031aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	220f      	movs	r2, #15
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	08da      	lsrs	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3208      	adds	r2, #8
 80031e4:	69b9      	ldr	r1, [r7, #24]
 80031e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	2203      	movs	r2, #3
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0203 	and.w	r2, r3, #3
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80e0 	beq.w	80033ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322c:	4b2f      	ldr	r3, [pc, #188]	; (80032ec <HAL_GPIO_Init+0x238>)
 800322e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003232:	4a2e      	ldr	r2, [pc, #184]	; (80032ec <HAL_GPIO_Init+0x238>)
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800323c:	4b2b      	ldr	r3, [pc, #172]	; (80032ec <HAL_GPIO_Init+0x238>)
 800323e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800324a:	4a29      	ldr	r2, [pc, #164]	; (80032f0 <HAL_GPIO_Init+0x23c>)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	089b      	lsrs	r3, r3, #2
 8003250:	3302      	adds	r3, #2
 8003252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	220f      	movs	r2, #15
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <HAL_GPIO_Init+0x240>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d052      	beq.n	800331c <HAL_GPIO_Init+0x268>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <HAL_GPIO_Init+0x244>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d031      	beq.n	80032e2 <HAL_GPIO_Init+0x22e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a1e      	ldr	r2, [pc, #120]	; (80032fc <HAL_GPIO_Init+0x248>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d02b      	beq.n	80032de <HAL_GPIO_Init+0x22a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <HAL_GPIO_Init+0x24c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d025      	beq.n	80032da <HAL_GPIO_Init+0x226>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <HAL_GPIO_Init+0x250>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01f      	beq.n	80032d6 <HAL_GPIO_Init+0x222>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <HAL_GPIO_Init+0x254>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d019      	beq.n	80032d2 <HAL_GPIO_Init+0x21e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_GPIO_Init+0x258>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <HAL_GPIO_Init+0x21a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <HAL_GPIO_Init+0x25c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00d      	beq.n	80032ca <HAL_GPIO_Init+0x216>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a18      	ldr	r2, [pc, #96]	; (8003314 <HAL_GPIO_Init+0x260>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d007      	beq.n	80032c6 <HAL_GPIO_Init+0x212>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a17      	ldr	r2, [pc, #92]	; (8003318 <HAL_GPIO_Init+0x264>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <HAL_GPIO_Init+0x20e>
 80032be:	2309      	movs	r3, #9
 80032c0:	e02d      	b.n	800331e <HAL_GPIO_Init+0x26a>
 80032c2:	230a      	movs	r3, #10
 80032c4:	e02b      	b.n	800331e <HAL_GPIO_Init+0x26a>
 80032c6:	2308      	movs	r3, #8
 80032c8:	e029      	b.n	800331e <HAL_GPIO_Init+0x26a>
 80032ca:	2307      	movs	r3, #7
 80032cc:	e027      	b.n	800331e <HAL_GPIO_Init+0x26a>
 80032ce:	2306      	movs	r3, #6
 80032d0:	e025      	b.n	800331e <HAL_GPIO_Init+0x26a>
 80032d2:	2305      	movs	r3, #5
 80032d4:	e023      	b.n	800331e <HAL_GPIO_Init+0x26a>
 80032d6:	2304      	movs	r3, #4
 80032d8:	e021      	b.n	800331e <HAL_GPIO_Init+0x26a>
 80032da:	2303      	movs	r3, #3
 80032dc:	e01f      	b.n	800331e <HAL_GPIO_Init+0x26a>
 80032de:	2302      	movs	r3, #2
 80032e0:	e01d      	b.n	800331e <HAL_GPIO_Init+0x26a>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e01b      	b.n	800331e <HAL_GPIO_Init+0x26a>
 80032e6:	bf00      	nop
 80032e8:	58000080 	.word	0x58000080
 80032ec:	58024400 	.word	0x58024400
 80032f0:	58000400 	.word	0x58000400
 80032f4:	58020000 	.word	0x58020000
 80032f8:	58020400 	.word	0x58020400
 80032fc:	58020800 	.word	0x58020800
 8003300:	58020c00 	.word	0x58020c00
 8003304:	58021000 	.word	0x58021000
 8003308:	58021400 	.word	0x58021400
 800330c:	58021800 	.word	0x58021800
 8003310:	58021c00 	.word	0x58021c00
 8003314:	58022000 	.word	0x58022000
 8003318:	58022400 	.word	0x58022400
 800331c:	2300      	movs	r3, #0
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	f002 0203 	and.w	r2, r2, #3
 8003324:	0092      	lsls	r2, r2, #2
 8003326:	4093      	lsls	r3, r2
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800332e:	4938      	ldr	r1, [pc, #224]	; (8003410 <HAL_GPIO_Init+0x35c>)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	089b      	lsrs	r3, r3, #2
 8003334:	3302      	adds	r3, #2
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800333c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003362:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800336a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	3301      	adds	r3, #1
 80033f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f47f ae63 	bne.w	80030c8 <HAL_GPIO_Init+0x14>
  }
}
 8003402:	bf00      	nop
 8003404:	bf00      	nop
 8003406:	3724      	adds	r7, #36	; 0x24
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	58000400 	.word	0x58000400

08003414 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800341c:	4a08      	ldr	r2, [pc, #32]	; (8003440 <HAL_HSEM_FastTake+0x2c>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3320      	adds	r3, #32
 8003422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003426:	4a07      	ldr	r2, [pc, #28]	; (8003444 <HAL_HSEM_FastTake+0x30>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d101      	bne.n	8003430 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	e000      	b.n	8003432 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	58026400 	.word	0x58026400
 8003444:	80000300 	.word	0x80000300

08003448 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003452:	4906      	ldr	r1, [pc, #24]	; (800346c <HAL_HSEM_Release+0x24>)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	58026400 	.word	0x58026400

08003470 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003478:	4b29      	ldr	r3, [pc, #164]	; (8003520 <HAL_PWREx_ConfigSupply+0xb0>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	2b06      	cmp	r3, #6
 8003482:	d00a      	beq.n	800349a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003484:	4b26      	ldr	r3, [pc, #152]	; (8003520 <HAL_PWREx_ConfigSupply+0xb0>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	429a      	cmp	r2, r3
 8003490:	d001      	beq.n	8003496 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e040      	b.n	8003518 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	e03e      	b.n	8003518 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800349a:	4b21      	ldr	r3, [pc, #132]	; (8003520 <HAL_PWREx_ConfigSupply+0xb0>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80034a2:	491f      	ldr	r1, [pc, #124]	; (8003520 <HAL_PWREx_ConfigSupply+0xb0>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80034aa:	f7fe f82f 	bl	800150c <HAL_GetTick>
 80034ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034b0:	e009      	b.n	80034c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034b2:	f7fe f82b 	bl	800150c <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034c0:	d901      	bls.n	80034c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e028      	b.n	8003518 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034c6:	4b16      	ldr	r3, [pc, #88]	; (8003520 <HAL_PWREx_ConfigSupply+0xb0>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d2:	d1ee      	bne.n	80034b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b1e      	cmp	r3, #30
 80034d8:	d008      	beq.n	80034ec <HAL_PWREx_ConfigSupply+0x7c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b2e      	cmp	r3, #46	; 0x2e
 80034de:	d005      	beq.n	80034ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b1d      	cmp	r3, #29
 80034e4:	d002      	beq.n	80034ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b2d      	cmp	r3, #45	; 0x2d
 80034ea:	d114      	bne.n	8003516 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80034ec:	f7fe f80e 	bl	800150c <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80034f2:	e009      	b.n	8003508 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034f4:	f7fe f80a 	bl	800150c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003502:	d901      	bls.n	8003508 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e007      	b.n	8003518 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_PWREx_ConfigSupply+0xb0>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003514:	d1ee      	bne.n	80034f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	58024800 	.word	0x58024800

08003524 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08c      	sub	sp, #48	; 0x30
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f000 bc1d 	b.w	8003d72 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8087 	beq.w	8003654 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003546:	4b99      	ldr	r3, [pc, #612]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003550:	4b96      	ldr	r3, [pc, #600]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	2b10      	cmp	r3, #16
 800355a:	d007      	beq.n	800356c <HAL_RCC_OscConfig+0x48>
 800355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355e:	2b18      	cmp	r3, #24
 8003560:	d110      	bne.n	8003584 <HAL_RCC_OscConfig+0x60>
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d10b      	bne.n	8003584 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356c:	4b8f      	ldr	r3, [pc, #572]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d06c      	beq.n	8003652 <HAL_RCC_OscConfig+0x12e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d168      	bne.n	8003652 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e3f6      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d106      	bne.n	800359c <HAL_RCC_OscConfig+0x78>
 800358e:	4b87      	ldr	r3, [pc, #540]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a86      	ldr	r2, [pc, #536]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e02e      	b.n	80035fa <HAL_RCC_OscConfig+0xd6>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10c      	bne.n	80035be <HAL_RCC_OscConfig+0x9a>
 80035a4:	4b81      	ldr	r3, [pc, #516]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a80      	ldr	r2, [pc, #512]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b7e      	ldr	r3, [pc, #504]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a7d      	ldr	r2, [pc, #500]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80035b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	e01d      	b.n	80035fa <HAL_RCC_OscConfig+0xd6>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c6:	d10c      	bne.n	80035e2 <HAL_RCC_OscConfig+0xbe>
 80035c8:	4b78      	ldr	r3, [pc, #480]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a77      	ldr	r2, [pc, #476]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80035ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b75      	ldr	r3, [pc, #468]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a74      	ldr	r2, [pc, #464]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80035da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	e00b      	b.n	80035fa <HAL_RCC_OscConfig+0xd6>
 80035e2:	4b72      	ldr	r3, [pc, #456]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a71      	ldr	r2, [pc, #452]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80035e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	4b6f      	ldr	r3, [pc, #444]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a6e      	ldr	r2, [pc, #440]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80035f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d013      	beq.n	800362a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003602:	f7fd ff83 	bl	800150c <HAL_GetTick>
 8003606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800360a:	f7fd ff7f 	bl	800150c <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b64      	cmp	r3, #100	; 0x64
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e3aa      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800361c:	4b63      	ldr	r3, [pc, #396]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0xe6>
 8003628:	e014      	b.n	8003654 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fd ff6f 	bl	800150c <HAL_GetTick>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003632:	f7fd ff6b 	bl	800150c <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b64      	cmp	r3, #100	; 0x64
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e396      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003644:	4b59      	ldr	r3, [pc, #356]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f0      	bne.n	8003632 <HAL_RCC_OscConfig+0x10e>
 8003650:	e000      	b.n	8003654 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003652:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80cb 	beq.w	80037f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003662:	4b52      	ldr	r3, [pc, #328]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800366a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800366c:	4b4f      	ldr	r3, [pc, #316]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <HAL_RCC_OscConfig+0x164>
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	2b18      	cmp	r3, #24
 800367c:	d156      	bne.n	800372c <HAL_RCC_OscConfig+0x208>
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d151      	bne.n	800372c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003688:	4b48      	ldr	r3, [pc, #288]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_OscConfig+0x17c>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e368      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036a0:	4b42      	ldr	r3, [pc, #264]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f023 0219 	bic.w	r2, r3, #25
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	493f      	ldr	r1, [pc, #252]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036b2:	f7fd ff2b 	bl	800150c <HAL_GetTick>
 80036b6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ba:	f7fd ff27 	bl	800150c <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e352      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036cc:	4b37      	ldr	r3, [pc, #220]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d8:	f7fd ff24 	bl	8001524 <HAL_GetREVID>
 80036dc:	4603      	mov	r3, r0
 80036de:	f241 0203 	movw	r2, #4099	; 0x1003
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d817      	bhi.n	8003716 <HAL_RCC_OscConfig+0x1f2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b40      	cmp	r3, #64	; 0x40
 80036ec:	d108      	bne.n	8003700 <HAL_RCC_OscConfig+0x1dc>
 80036ee:	4b2f      	ldr	r3, [pc, #188]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80036f6:	4a2d      	ldr	r2, [pc, #180]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80036f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036fe:	e07b      	b.n	80037f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003700:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	031b      	lsls	r3, r3, #12
 800370e:	4927      	ldr	r1, [pc, #156]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003714:	e070      	b.n	80037f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003716:	4b25      	ldr	r3, [pc, #148]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	061b      	lsls	r3, r3, #24
 8003724:	4921      	ldr	r1, [pc, #132]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800372a:	e065      	b.n	80037f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d048      	beq.n	80037c6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003734:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 0219 	bic.w	r2, r3, #25
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	491a      	ldr	r1, [pc, #104]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fd fee1 	bl	800150c <HAL_GetTick>
 800374a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800374e:	f7fd fedd 	bl	800150c <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e308      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003760:	4b12      	ldr	r3, [pc, #72]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376c:	f7fd feda 	bl	8001524 <HAL_GetREVID>
 8003770:	4603      	mov	r3, r0
 8003772:	f241 0203 	movw	r2, #4099	; 0x1003
 8003776:	4293      	cmp	r3, r2
 8003778:	d81a      	bhi.n	80037b0 <HAL_RCC_OscConfig+0x28c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d108      	bne.n	8003794 <HAL_RCC_OscConfig+0x270>
 8003782:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800378a:	4a08      	ldr	r2, [pc, #32]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 800378c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003790:	6053      	str	r3, [r2, #4]
 8003792:	e031      	b.n	80037f8 <HAL_RCC_OscConfig+0x2d4>
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	031b      	lsls	r3, r3, #12
 80037a2:	4902      	ldr	r1, [pc, #8]	; (80037ac <HAL_RCC_OscConfig+0x288>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
 80037a8:	e026      	b.n	80037f8 <HAL_RCC_OscConfig+0x2d4>
 80037aa:	bf00      	nop
 80037ac:	58024400 	.word	0x58024400
 80037b0:	4b9a      	ldr	r3, [pc, #616]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	061b      	lsls	r3, r3, #24
 80037be:	4997      	ldr	r1, [pc, #604]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	604b      	str	r3, [r1, #4]
 80037c4:	e018      	b.n	80037f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c6:	4b95      	ldr	r3, [pc, #596]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a94      	ldr	r2, [pc, #592]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80037cc:	f023 0301 	bic.w	r3, r3, #1
 80037d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fd fe9b 	bl	800150c <HAL_GetTick>
 80037d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037da:	f7fd fe97 	bl	800150c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e2c2      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037ec:	4b8b      	ldr	r3, [pc, #556]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f0      	bne.n	80037da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80a9 	beq.w	8003958 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003806:	4b85      	ldr	r3, [pc, #532]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800380e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003810:	4b82      	ldr	r3, [pc, #520]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d007      	beq.n	800382c <HAL_RCC_OscConfig+0x308>
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b18      	cmp	r3, #24
 8003820:	d13a      	bne.n	8003898 <HAL_RCC_OscConfig+0x374>
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d135      	bne.n	8003898 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800382c:	4b7b      	ldr	r3, [pc, #492]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_RCC_OscConfig+0x320>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	2b80      	cmp	r3, #128	; 0x80
 800383e:	d001      	beq.n	8003844 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e296      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003844:	f7fd fe6e 	bl	8001524 <HAL_GetREVID>
 8003848:	4603      	mov	r3, r0
 800384a:	f241 0203 	movw	r2, #4099	; 0x1003
 800384e:	4293      	cmp	r3, r2
 8003850:	d817      	bhi.n	8003882 <HAL_RCC_OscConfig+0x35e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	2b20      	cmp	r3, #32
 8003858:	d108      	bne.n	800386c <HAL_RCC_OscConfig+0x348>
 800385a:	4b70      	ldr	r3, [pc, #448]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003862:	4a6e      	ldr	r2, [pc, #440]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 8003864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003868:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800386a:	e075      	b.n	8003958 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800386c:	4b6b      	ldr	r3, [pc, #428]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	069b      	lsls	r3, r3, #26
 800387a:	4968      	ldr	r1, [pc, #416]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003880:	e06a      	b.n	8003958 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003882:	4b66      	ldr	r3, [pc, #408]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	4962      	ldr	r1, [pc, #392]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 8003892:	4313      	orrs	r3, r2
 8003894:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003896:	e05f      	b.n	8003958 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d042      	beq.n	8003926 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038a0:	4b5e      	ldr	r3, [pc, #376]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a5d      	ldr	r2, [pc, #372]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80038a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fd fe2e 	bl	800150c <HAL_GetTick>
 80038b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80038b4:	f7fd fe2a 	bl	800150c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e255      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038c6:	4b55      	ldr	r3, [pc, #340]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038d2:	f7fd fe27 	bl	8001524 <HAL_GetREVID>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80038dc:	4293      	cmp	r3, r2
 80038de:	d817      	bhi.n	8003910 <HAL_RCC_OscConfig+0x3ec>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d108      	bne.n	80038fa <HAL_RCC_OscConfig+0x3d6>
 80038e8:	4b4c      	ldr	r3, [pc, #304]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038f0:	4a4a      	ldr	r2, [pc, #296]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80038f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038f6:	6053      	str	r3, [r2, #4]
 80038f8:	e02e      	b.n	8003958 <HAL_RCC_OscConfig+0x434>
 80038fa:	4b48      	ldr	r3, [pc, #288]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	069b      	lsls	r3, r3, #26
 8003908:	4944      	ldr	r1, [pc, #272]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]
 800390e:	e023      	b.n	8003958 <HAL_RCC_OscConfig+0x434>
 8003910:	4b42      	ldr	r3, [pc, #264]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	493f      	ldr	r1, [pc, #252]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 8003920:	4313      	orrs	r3, r2
 8003922:	60cb      	str	r3, [r1, #12]
 8003924:	e018      	b.n	8003958 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003926:	4b3d      	ldr	r3, [pc, #244]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a3c      	ldr	r2, [pc, #240]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 800392c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fd fdeb 	bl	800150c <HAL_GetTick>
 8003936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800393a:	f7fd fde7 	bl	800150c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e212      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800394c:	4b33      	ldr	r3, [pc, #204]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d036      	beq.n	80039d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d019      	beq.n	80039a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 800396e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003970:	4a2a      	ldr	r2, [pc, #168]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fd fdc8 	bl	800150c <HAL_GetTick>
 800397c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003980:	f7fd fdc4 	bl	800150c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e1ef      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003992:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x45c>
 800399e:	e018      	b.n	80039d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a0:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80039a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a4:	4a1d      	ldr	r2, [pc, #116]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7fd fdae 	bl	800150c <HAL_GetTick>
 80039b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b4:	f7fd fdaa 	bl	800150c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1d5      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039c6:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80039c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d039      	beq.n	8003a52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d01c      	beq.n	8003a20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039e6:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a0c      	ldr	r2, [pc, #48]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80039ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039f2:	f7fd fd8b 	bl	800150c <HAL_GetTick>
 80039f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80039fa:	f7fd fd87 	bl	800150c <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e1b2      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x4d6>
 8003a18:	e01b      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
 8003a1a:	bf00      	nop
 8003a1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a20:	4b9b      	ldr	r3, [pc, #620]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a9a      	ldr	r2, [pc, #616]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a2c:	f7fd fd6e 	bl	800150c <HAL_GetTick>
 8003a30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a34:	f7fd fd6a 	bl	800150c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e195      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a46:	4b92      	ldr	r3, [pc, #584]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8081 	beq.w	8003b62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a60:	4b8c      	ldr	r3, [pc, #560]	; (8003c94 <HAL_RCC_OscConfig+0x770>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a8b      	ldr	r2, [pc, #556]	; (8003c94 <HAL_RCC_OscConfig+0x770>)
 8003a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a6c:	f7fd fd4e 	bl	800150c <HAL_GetTick>
 8003a70:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a74:	f7fd fd4a 	bl	800150c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	; 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e175      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a86:	4b83      	ldr	r3, [pc, #524]	; (8003c94 <HAL_RCC_OscConfig+0x770>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d106      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x584>
 8003a9a:	4b7d      	ldr	r3, [pc, #500]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	4a7c      	ldr	r2, [pc, #496]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa6:	e02d      	b.n	8003b04 <HAL_RCC_OscConfig+0x5e0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10c      	bne.n	8003aca <HAL_RCC_OscConfig+0x5a6>
 8003ab0:	4b77      	ldr	r3, [pc, #476]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	4a76      	ldr	r2, [pc, #472]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	6713      	str	r3, [r2, #112]	; 0x70
 8003abc:	4b74      	ldr	r3, [pc, #464]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	4a73      	ldr	r2, [pc, #460]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003ac2:	f023 0304 	bic.w	r3, r3, #4
 8003ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac8:	e01c      	b.n	8003b04 <HAL_RCC_OscConfig+0x5e0>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0x5c8>
 8003ad2:	4b6f      	ldr	r3, [pc, #444]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	4a6e      	ldr	r2, [pc, #440]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003ad8:	f043 0304 	orr.w	r3, r3, #4
 8003adc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ade:	4b6c      	ldr	r3, [pc, #432]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	4a6b      	ldr	r2, [pc, #428]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aea:	e00b      	b.n	8003b04 <HAL_RCC_OscConfig+0x5e0>
 8003aec:	4b68      	ldr	r3, [pc, #416]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	4a67      	ldr	r2, [pc, #412]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003af2:	f023 0301 	bic.w	r3, r3, #1
 8003af6:	6713      	str	r3, [r2, #112]	; 0x70
 8003af8:	4b65      	ldr	r3, [pc, #404]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	4a64      	ldr	r2, [pc, #400]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003afe:	f023 0304 	bic.w	r3, r3, #4
 8003b02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d015      	beq.n	8003b38 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0c:	f7fd fcfe 	bl	800150c <HAL_GetTick>
 8003b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b14:	f7fd fcfa 	bl	800150c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e123      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b2a:	4b59      	ldr	r3, [pc, #356]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0ee      	beq.n	8003b14 <HAL_RCC_OscConfig+0x5f0>
 8003b36:	e014      	b.n	8003b62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fd fce8 	bl	800150c <HAL_GetTick>
 8003b3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b40:	f7fd fce4 	bl	800150c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e10d      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b56:	4b4e      	ldr	r3, [pc, #312]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1ee      	bne.n	8003b40 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8102 	beq.w	8003d70 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b6c:	4b48      	ldr	r3, [pc, #288]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b74:	2b18      	cmp	r3, #24
 8003b76:	f000 80bd 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	f040 809e 	bne.w	8003cc0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b84:	4b42      	ldr	r3, [pc, #264]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a41      	ldr	r2, [pc, #260]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fd fcbc 	bl	800150c <HAL_GetTick>
 8003b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b98:	f7fd fcb8 	bl	800150c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e0e3      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003baa:	4b39      	ldr	r3, [pc, #228]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb6:	4b36      	ldr	r3, [pc, #216]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bba:	4b37      	ldr	r3, [pc, #220]	; (8003c98 <HAL_RCC_OscConfig+0x774>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bc6:	0112      	lsls	r2, r2, #4
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	4931      	ldr	r1, [pc, #196]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	628b      	str	r3, [r1, #40]	; 0x28
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bde:	3b01      	subs	r3, #1
 8003be0:	025b      	lsls	r3, r3, #9
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	3b01      	subs	r3, #1
 8003bec:	041b      	lsls	r3, r3, #16
 8003bee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	061b      	lsls	r3, r3, #24
 8003bfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c00:	4923      	ldr	r1, [pc, #140]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003c06:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c12:	4b1f      	ldr	r3, [pc, #124]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c16:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <HAL_RCC_OscConfig+0x778>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c1e:	00d2      	lsls	r2, r2, #3
 8003c20:	491b      	ldr	r1, [pc, #108]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	f023 020c 	bic.w	r2, r3, #12
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	4917      	ldr	r1, [pc, #92]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	f023 0202 	bic.w	r2, r3, #2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c44:	4912      	ldr	r1, [pc, #72]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c4a:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c56:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003c6e:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	4a07      	ldr	r2, [pc, #28]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a04      	ldr	r2, [pc, #16]	; (8003c90 <HAL_RCC_OscConfig+0x76c>)
 8003c80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c86:	f7fd fc41 	bl	800150c <HAL_GetTick>
 8003c8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c8c:	e011      	b.n	8003cb2 <HAL_RCC_OscConfig+0x78e>
 8003c8e:	bf00      	nop
 8003c90:	58024400 	.word	0x58024400
 8003c94:	58024800 	.word	0x58024800
 8003c98:	fffffc0c 	.word	0xfffffc0c
 8003c9c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca0:	f7fd fc34 	bl	800150c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e05f      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cb2:	4b32      	ldr	r3, [pc, #200]	; (8003d7c <HAL_RCC_OscConfig+0x858>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x77c>
 8003cbe:	e057      	b.n	8003d70 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc0:	4b2e      	ldr	r3, [pc, #184]	; (8003d7c <HAL_RCC_OscConfig+0x858>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a2d      	ldr	r2, [pc, #180]	; (8003d7c <HAL_RCC_OscConfig+0x858>)
 8003cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fd fc1e 	bl	800150c <HAL_GetTick>
 8003cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7fd fc1a 	bl	800150c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e045      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ce6:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <HAL_RCC_OscConfig+0x858>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x7b0>
 8003cf2:	e03d      	b.n	8003d70 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003cf4:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <HAL_RCC_OscConfig+0x858>)
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003cfa:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <HAL_RCC_OscConfig+0x858>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d031      	beq.n	8003d6c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f003 0203 	and.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d12a      	bne.n	8003d6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d122      	bne.n	8003d6c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d11a      	bne.n	8003d6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	0a5b      	lsrs	r3, r3, #9
 8003d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d42:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d111      	bne.n	8003d6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	0c1b      	lsrs	r3, r3, #16
 8003d4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d108      	bne.n	8003d6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	0e1b      	lsrs	r3, r3, #24
 8003d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3730      	adds	r7, #48	; 0x30
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	58024400 	.word	0x58024400

08003d80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e19c      	b.n	80040ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d94:	4b8a      	ldr	r3, [pc, #552]	; (8003fc0 <HAL_RCC_ClockConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d910      	bls.n	8003dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b87      	ldr	r3, [pc, #540]	; (8003fc0 <HAL_RCC_ClockConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 020f 	bic.w	r2, r3, #15
 8003daa:	4985      	ldr	r1, [pc, #532]	; (8003fc0 <HAL_RCC_ClockConfig+0x240>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b83      	ldr	r3, [pc, #524]	; (8003fc0 <HAL_RCC_ClockConfig+0x240>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e184      	b.n	80040ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d010      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	4b7b      	ldr	r3, [pc, #492]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d908      	bls.n	8003df2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003de0:	4b78      	ldr	r3, [pc, #480]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	4975      	ldr	r1, [pc, #468]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d010      	beq.n	8003e20 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	4b70      	ldr	r3, [pc, #448]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d908      	bls.n	8003e20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e0e:	4b6d      	ldr	r3, [pc, #436]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	496a      	ldr	r1, [pc, #424]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d010      	beq.n	8003e4e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699a      	ldr	r2, [r3, #24]
 8003e30:	4b64      	ldr	r3, [pc, #400]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d908      	bls.n	8003e4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e3c:	4b61      	ldr	r3, [pc, #388]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	495e      	ldr	r1, [pc, #376]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d010      	beq.n	8003e7c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	4b59      	ldr	r3, [pc, #356]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d908      	bls.n	8003e7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e6a:	4b56      	ldr	r3, [pc, #344]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	4953      	ldr	r1, [pc, #332]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d010      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	4b4d      	ldr	r3, [pc, #308]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d908      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e98:	4b4a      	ldr	r3, [pc, #296]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f023 020f 	bic.w	r2, r3, #15
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4947      	ldr	r1, [pc, #284]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d055      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003eb6:	4b43      	ldr	r3, [pc, #268]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	4940      	ldr	r1, [pc, #256]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d107      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ed0:	4b3c      	ldr	r3, [pc, #240]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d121      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0f6      	b.n	80040ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ee8:	4b36      	ldr	r3, [pc, #216]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d115      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0ea      	b.n	80040ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f00:	4b30      	ldr	r3, [pc, #192]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0de      	b.n	80040ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f10:	4b2c      	ldr	r3, [pc, #176]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0d6      	b.n	80040ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f20:	4b28      	ldr	r3, [pc, #160]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f023 0207 	bic.w	r2, r3, #7
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	4925      	ldr	r1, [pc, #148]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f32:	f7fd faeb 	bl	800150c <HAL_GetTick>
 8003f36:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f38:	e00a      	b.n	8003f50 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3a:	f7fd fae7 	bl	800150c <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e0be      	b.n	80040ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f50:	4b1c      	ldr	r3, [pc, #112]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d1eb      	bne.n	8003f3a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d010      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d208      	bcs.n	8003f90 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f7e:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f023 020f 	bic.w	r2, r3, #15
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	490e      	ldr	r1, [pc, #56]	; (8003fc4 <HAL_RCC_ClockConfig+0x244>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_ClockConfig+0x240>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d214      	bcs.n	8003fc8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_RCC_ClockConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 020f 	bic.w	r2, r3, #15
 8003fa6:	4906      	ldr	r1, [pc, #24]	; (8003fc0 <HAL_RCC_ClockConfig+0x240>)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <HAL_RCC_ClockConfig+0x240>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e086      	b.n	80040ce <HAL_RCC_ClockConfig+0x34e>
 8003fc0:	52002000 	.word	0x52002000
 8003fc4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d010      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	4b3f      	ldr	r3, [pc, #252]	; (80040d8 <HAL_RCC_ClockConfig+0x358>)
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d208      	bcs.n	8003ff6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fe4:	4b3c      	ldr	r3, [pc, #240]	; (80040d8 <HAL_RCC_ClockConfig+0x358>)
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	4939      	ldr	r1, [pc, #228]	; (80040d8 <HAL_RCC_ClockConfig+0x358>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d010      	beq.n	8004024 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695a      	ldr	r2, [r3, #20]
 8004006:	4b34      	ldr	r3, [pc, #208]	; (80040d8 <HAL_RCC_ClockConfig+0x358>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800400e:	429a      	cmp	r2, r3
 8004010:	d208      	bcs.n	8004024 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004012:	4b31      	ldr	r3, [pc, #196]	; (80040d8 <HAL_RCC_ClockConfig+0x358>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	492e      	ldr	r1, [pc, #184]	; (80040d8 <HAL_RCC_ClockConfig+0x358>)
 8004020:	4313      	orrs	r3, r2
 8004022:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	d010      	beq.n	8004052 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699a      	ldr	r2, [r3, #24]
 8004034:	4b28      	ldr	r3, [pc, #160]	; (80040d8 <HAL_RCC_ClockConfig+0x358>)
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800403c:	429a      	cmp	r2, r3
 800403e:	d208      	bcs.n	8004052 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004040:	4b25      	ldr	r3, [pc, #148]	; (80040d8 <HAL_RCC_ClockConfig+0x358>)
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	4922      	ldr	r1, [pc, #136]	; (80040d8 <HAL_RCC_ClockConfig+0x358>)
 800404e:	4313      	orrs	r3, r2
 8004050:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d010      	beq.n	8004080 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69da      	ldr	r2, [r3, #28]
 8004062:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <HAL_RCC_ClockConfig+0x358>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800406a:	429a      	cmp	r2, r3
 800406c:	d208      	bcs.n	8004080 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800406e:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <HAL_RCC_ClockConfig+0x358>)
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	4917      	ldr	r1, [pc, #92]	; (80040d8 <HAL_RCC_ClockConfig+0x358>)
 800407c:	4313      	orrs	r3, r2
 800407e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004080:	f000 f834 	bl	80040ec <HAL_RCC_GetSysClockFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <HAL_RCC_ClockConfig+0x358>)
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	0a1b      	lsrs	r3, r3, #8
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	4912      	ldr	r1, [pc, #72]	; (80040dc <HAL_RCC_ClockConfig+0x35c>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
 800409c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <HAL_RCC_ClockConfig+0x358>)
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	4a0d      	ldr	r2, [pc, #52]	; (80040dc <HAL_RCC_ClockConfig+0x35c>)
 80040a8:	5cd3      	ldrb	r3, [r2, r3]
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
 80040b4:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <HAL_RCC_ClockConfig+0x360>)
 80040b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040b8:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <HAL_RCC_ClockConfig+0x364>)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <HAL_RCC_ClockConfig+0x368>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fd f9d8 	bl	8001478 <HAL_InitTick>
 80040c8:	4603      	mov	r3, r0
 80040ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	58024400 	.word	0x58024400
 80040dc:	0800c11c 	.word	0x0800c11c
 80040e0:	24000004 	.word	0x24000004
 80040e4:	24000000 	.word	0x24000000
 80040e8:	24000008 	.word	0x24000008

080040ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b089      	sub	sp, #36	; 0x24
 80040f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f2:	4bb3      	ldr	r3, [pc, #716]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040fa:	2b18      	cmp	r3, #24
 80040fc:	f200 8155 	bhi.w	80043aa <HAL_RCC_GetSysClockFreq+0x2be>
 8004100:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004106:	bf00      	nop
 8004108:	0800416d 	.word	0x0800416d
 800410c:	080043ab 	.word	0x080043ab
 8004110:	080043ab 	.word	0x080043ab
 8004114:	080043ab 	.word	0x080043ab
 8004118:	080043ab 	.word	0x080043ab
 800411c:	080043ab 	.word	0x080043ab
 8004120:	080043ab 	.word	0x080043ab
 8004124:	080043ab 	.word	0x080043ab
 8004128:	08004193 	.word	0x08004193
 800412c:	080043ab 	.word	0x080043ab
 8004130:	080043ab 	.word	0x080043ab
 8004134:	080043ab 	.word	0x080043ab
 8004138:	080043ab 	.word	0x080043ab
 800413c:	080043ab 	.word	0x080043ab
 8004140:	080043ab 	.word	0x080043ab
 8004144:	080043ab 	.word	0x080043ab
 8004148:	08004199 	.word	0x08004199
 800414c:	080043ab 	.word	0x080043ab
 8004150:	080043ab 	.word	0x080043ab
 8004154:	080043ab 	.word	0x080043ab
 8004158:	080043ab 	.word	0x080043ab
 800415c:	080043ab 	.word	0x080043ab
 8004160:	080043ab 	.word	0x080043ab
 8004164:	080043ab 	.word	0x080043ab
 8004168:	0800419f 	.word	0x0800419f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800416c:	4b94      	ldr	r3, [pc, #592]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d009      	beq.n	800418c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004178:	4b91      	ldr	r3, [pc, #580]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	08db      	lsrs	r3, r3, #3
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	4a90      	ldr	r2, [pc, #576]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004184:	fa22 f303 	lsr.w	r3, r2, r3
 8004188:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800418a:	e111      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800418c:	4b8d      	ldr	r3, [pc, #564]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800418e:	61bb      	str	r3, [r7, #24]
    break;
 8004190:	e10e      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004192:	4b8d      	ldr	r3, [pc, #564]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004194:	61bb      	str	r3, [r7, #24]
    break;
 8004196:	e10b      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004198:	4b8c      	ldr	r3, [pc, #560]	; (80043cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800419a:	61bb      	str	r3, [r7, #24]
    break;
 800419c:	e108      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800419e:	4b88      	ldr	r3, [pc, #544]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80041a8:	4b85      	ldr	r3, [pc, #532]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80041b4:	4b82      	ldr	r3, [pc, #520]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80041be:	4b80      	ldr	r3, [pc, #512]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	08db      	lsrs	r3, r3, #3
 80041c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80e1 	beq.w	80043a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	f000 8083 	beq.w	80042f0 <HAL_RCC_GetSysClockFreq+0x204>
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	f200 80a1 	bhi.w	8004334 <HAL_RCC_GetSysClockFreq+0x248>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x114>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d056      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80041fe:	e099      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004200:	4b6f      	ldr	r3, [pc, #444]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d02d      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800420c:	4b6c      	ldr	r3, [pc, #432]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	08db      	lsrs	r3, r3, #3
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	4a6b      	ldr	r2, [pc, #428]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
 800421c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	ee07 3a90 	vmov	s15, r3
 8004224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004236:	4b62      	ldr	r3, [pc, #392]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423e:	ee07 3a90 	vmov	s15, r3
 8004242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004246:	ed97 6a02 	vldr	s12, [r7, #8]
 800424a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80043d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800424e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800425a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800425e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004262:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004266:	e087      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004272:	eddf 6a58 	vldr	s13, [pc, #352]	; 80043d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800427a:	4b51      	ldr	r3, [pc, #324]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800428a:	ed97 6a02 	vldr	s12, [r7, #8]
 800428e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80043d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800429a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800429e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042aa:	e065      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80043d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80042ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042be:	4b40      	ldr	r3, [pc, #256]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80042d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80043d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ee:	e043      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80043dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80042fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004302:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004312:	ed97 6a02 	vldr	s12, [r7, #8]
 8004316:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80043d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800431a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004332:	e021      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004346:	4b1e      	ldr	r3, [pc, #120]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004356:	ed97 6a02 	vldr	s12, [r7, #8]
 800435a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80043d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800435e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004376:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004378:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	0a5b      	lsrs	r3, r3, #9
 800437e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004382:	3301      	adds	r3, #1
 8004384:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	ee07 3a90 	vmov	s15, r3
 800438c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004390:	edd7 6a07 	vldr	s13, [r7, #28]
 8004394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800439c:	ee17 3a90 	vmov	r3, s15
 80043a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80043a2:	e005      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61bb      	str	r3, [r7, #24]
    break;
 80043a8:	e002      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043ac:	61bb      	str	r3, [r7, #24]
    break;
 80043ae:	bf00      	nop
  }

  return sysclockfreq;
 80043b0:	69bb      	ldr	r3, [r7, #24]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3724      	adds	r7, #36	; 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	58024400 	.word	0x58024400
 80043c4:	03d09000 	.word	0x03d09000
 80043c8:	003d0900 	.word	0x003d0900
 80043cc:	007a1200 	.word	0x007a1200
 80043d0:	46000000 	.word	0x46000000
 80043d4:	4c742400 	.word	0x4c742400
 80043d8:	4a742400 	.word	0x4a742400
 80043dc:	4af42400 	.word	0x4af42400

080043e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043e6:	f7ff fe81 	bl	80040ec <HAL_RCC_GetSysClockFreq>
 80043ea:	4602      	mov	r2, r0
 80043ec:	4b10      	ldr	r3, [pc, #64]	; (8004430 <HAL_RCC_GetHCLKFreq+0x50>)
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	0a1b      	lsrs	r3, r3, #8
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	490f      	ldr	r1, [pc, #60]	; (8004434 <HAL_RCC_GetHCLKFreq+0x54>)
 80043f8:	5ccb      	ldrb	r3, [r1, r3]
 80043fa:	f003 031f 	and.w	r3, r3, #31
 80043fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004402:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <HAL_RCC_GetHCLKFreq+0x50>)
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	4a09      	ldr	r2, [pc, #36]	; (8004434 <HAL_RCC_GetHCLKFreq+0x54>)
 800440e:	5cd3      	ldrb	r3, [r2, r3]
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	fa22 f303 	lsr.w	r3, r2, r3
 800441a:	4a07      	ldr	r2, [pc, #28]	; (8004438 <HAL_RCC_GetHCLKFreq+0x58>)
 800441c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800441e:	4a07      	ldr	r2, [pc, #28]	; (800443c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004424:	4b04      	ldr	r3, [pc, #16]	; (8004438 <HAL_RCC_GetHCLKFreq+0x58>)
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	58024400 	.word	0x58024400
 8004434:	0800c11c 	.word	0x0800c11c
 8004438:	24000004 	.word	0x24000004
 800443c:	24000000 	.word	0x24000000

08004440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004444:	f7ff ffcc 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8004448:	4602      	mov	r2, r0
 800444a:	4b06      	ldr	r3, [pc, #24]	; (8004464 <HAL_RCC_GetPCLK1Freq+0x24>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	091b      	lsrs	r3, r3, #4
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	4904      	ldr	r1, [pc, #16]	; (8004468 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004456:	5ccb      	ldrb	r3, [r1, r3]
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004460:	4618      	mov	r0, r3
 8004462:	bd80      	pop	{r7, pc}
 8004464:	58024400 	.word	0x58024400
 8004468:	0800c11c 	.word	0x0800c11c

0800446c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004470:	f7ff ffb6 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8004474:	4602      	mov	r2, r0
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	4904      	ldr	r1, [pc, #16]	; (8004494 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004482:	5ccb      	ldrb	r3, [r1, r3]
 8004484:	f003 031f 	and.w	r3, r3, #31
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	58024400 	.word	0x58024400
 8004494:	0800c11c 	.word	0x0800c11c

08004498 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044a0:	2300      	movs	r3, #0
 80044a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044a4:	2300      	movs	r3, #0
 80044a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d03f      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044bc:	d02a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044c2:	d824      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044c8:	d018      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ce:	d81e      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044d8:	d007      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044da:	e018      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044dc:	4ba3      	ldr	r3, [pc, #652]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	4aa2      	ldr	r2, [pc, #648]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044e8:	e015      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3304      	adds	r3, #4
 80044ee:	2102      	movs	r1, #2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f001 fff9 	bl	80064e8 <RCCEx_PLL2_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044fa:	e00c      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3324      	adds	r3, #36	; 0x24
 8004500:	2102      	movs	r1, #2
 8004502:	4618      	mov	r0, r3
 8004504:	f002 f8a2 	bl	800664c <RCCEx_PLL3_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800450c:	e003      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	75fb      	strb	r3, [r7, #23]
      break;
 8004512:	e000      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800451c:	4b93      	ldr	r3, [pc, #588]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004528:	4990      	ldr	r1, [pc, #576]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800452a:	4313      	orrs	r3, r2
 800452c:	650b      	str	r3, [r1, #80]	; 0x50
 800452e:	e001      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d03d      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	2b04      	cmp	r3, #4
 8004546:	d826      	bhi.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004548:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454e:	bf00      	nop
 8004550:	08004565 	.word	0x08004565
 8004554:	08004573 	.word	0x08004573
 8004558:	08004585 	.word	0x08004585
 800455c:	0800459d 	.word	0x0800459d
 8004560:	0800459d 	.word	0x0800459d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004564:	4b81      	ldr	r3, [pc, #516]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	4a80      	ldr	r2, [pc, #512]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800456a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800456e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004570:	e015      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3304      	adds	r3, #4
 8004576:	2100      	movs	r1, #0
 8004578:	4618      	mov	r0, r3
 800457a:	f001 ffb5 	bl	80064e8 <RCCEx_PLL2_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004582:	e00c      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3324      	adds	r3, #36	; 0x24
 8004588:	2100      	movs	r1, #0
 800458a:	4618      	mov	r0, r3
 800458c:	f002 f85e 	bl	800664c <RCCEx_PLL3_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004594:	e003      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	75fb      	strb	r3, [r7, #23]
      break;
 800459a:	e000      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800459c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d109      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045a4:	4b71      	ldr	r3, [pc, #452]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a8:	f023 0207 	bic.w	r2, r3, #7
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b0:	496e      	ldr	r1, [pc, #440]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	650b      	str	r3, [r1, #80]	; 0x50
 80045b6:	e001      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
 80045ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d042      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d0:	d02b      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80045d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d6:	d825      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80045d8:	2bc0      	cmp	r3, #192	; 0xc0
 80045da:	d028      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045dc:	2bc0      	cmp	r3, #192	; 0xc0
 80045de:	d821      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80045e0:	2b80      	cmp	r3, #128	; 0x80
 80045e2:	d016      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80045e4:	2b80      	cmp	r3, #128	; 0x80
 80045e6:	d81d      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d007      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80045f0:	e018      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f2:	4b5e      	ldr	r3, [pc, #376]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	4a5d      	ldr	r2, [pc, #372]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80045fe:	e017      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3304      	adds	r3, #4
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f001 ff6e 	bl	80064e8 <RCCEx_PLL2_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004610:	e00e      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3324      	adds	r3, #36	; 0x24
 8004616:	2100      	movs	r1, #0
 8004618:	4618      	mov	r0, r3
 800461a:	f002 f817 	bl	800664c <RCCEx_PLL3_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004622:	e005      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	75fb      	strb	r3, [r7, #23]
      break;
 8004628:	e002      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800462a:	bf00      	nop
 800462c:	e000      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800462e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004636:	4b4d      	ldr	r3, [pc, #308]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004642:	494a      	ldr	r1, [pc, #296]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004644:	4313      	orrs	r3, r2
 8004646:	650b      	str	r3, [r1, #80]	; 0x50
 8004648:	e001      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004656:	2b00      	cmp	r3, #0
 8004658:	d049      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004664:	d030      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004666:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800466a:	d82a      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800466c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004670:	d02c      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004672:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004676:	d824      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004678:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800467c:	d018      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800467e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004682:	d81e      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800468c:	d007      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800468e:	e018      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004690:	4b36      	ldr	r3, [pc, #216]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	4a35      	ldr	r2, [pc, #212]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800469a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800469c:	e017      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	2100      	movs	r1, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f001 ff1f 	bl	80064e8 <RCCEx_PLL2_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80046ae:	e00e      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3324      	adds	r3, #36	; 0x24
 80046b4:	2100      	movs	r1, #0
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 ffc8 	bl	800664c <RCCEx_PLL3_Config>
 80046bc:	4603      	mov	r3, r0
 80046be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046c0:	e005      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	75fb      	strb	r3, [r7, #23]
      break;
 80046c6:	e002      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80046c8:	bf00      	nop
 80046ca:	e000      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80046cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10a      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80046d4:	4b25      	ldr	r3, [pc, #148]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046e2:	4922      	ldr	r1, [pc, #136]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	658b      	str	r3, [r1, #88]	; 0x58
 80046e8:	e001      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
 80046ec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d04b      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004700:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004704:	d030      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004706:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800470a:	d82a      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800470c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004710:	d02e      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004712:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004716:	d824      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004718:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800471c:	d018      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800471e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004722:	d81e      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800472c:	d007      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800472e:	e018      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004730:	4b0e      	ldr	r3, [pc, #56]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	4a0d      	ldr	r2, [pc, #52]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800473a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800473c:	e019      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3304      	adds	r3, #4
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f001 fecf 	bl	80064e8 <RCCEx_PLL2_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800474e:	e010      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3324      	adds	r3, #36	; 0x24
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f001 ff78 	bl	800664c <RCCEx_PLL3_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004760:	e007      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	75fb      	strb	r3, [r7, #23]
      break;
 8004766:	e004      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004768:	bf00      	nop
 800476a:	e002      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800476c:	58024400 	.word	0x58024400
      break;
 8004770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004772:	7dfb      	ldrb	r3, [r7, #23]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10a      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004778:	4b99      	ldr	r3, [pc, #612]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800477a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004786:	4996      	ldr	r1, [pc, #600]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004788:	4313      	orrs	r3, r2
 800478a:	658b      	str	r3, [r1, #88]	; 0x58
 800478c:	e001      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d032      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a2:	2b30      	cmp	r3, #48	; 0x30
 80047a4:	d01c      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80047a6:	2b30      	cmp	r3, #48	; 0x30
 80047a8:	d817      	bhi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d00c      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d813      	bhi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d016      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d10f      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ba:	4b89      	ldr	r3, [pc, #548]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	4a88      	ldr	r2, [pc, #544]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80047c6:	e00e      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	2102      	movs	r1, #2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 fe8a 	bl	80064e8 <RCCEx_PLL2_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80047d8:	e005      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	75fb      	strb	r3, [r7, #23]
      break;
 80047de:	e002      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80047e0:	bf00      	nop
 80047e2:	e000      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80047e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047ec:	4b7c      	ldr	r3, [pc, #496]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f8:	4979      	ldr	r1, [pc, #484]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047fe:	e001      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004800:	7dfb      	ldrb	r3, [r7, #23]
 8004802:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d047      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004818:	d030      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800481a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800481e:	d82a      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004820:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004824:	d02c      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004826:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800482a:	d824      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800482c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004830:	d018      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004836:	d81e      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800483c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004840:	d007      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004842:	e018      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004844:	4b66      	ldr	r3, [pc, #408]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	4a65      	ldr	r2, [pc, #404]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800484a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800484e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004850:	e017      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3304      	adds	r3, #4
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f001 fe45 	bl	80064e8 <RCCEx_PLL2_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004862:	e00e      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3324      	adds	r3, #36	; 0x24
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f001 feee 	bl	800664c <RCCEx_PLL3_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004874:	e005      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
      break;
 800487a:	e002      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800487c:	bf00      	nop
 800487e:	e000      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004882:	7dfb      	ldrb	r3, [r7, #23]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004888:	4b55      	ldr	r3, [pc, #340]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800488a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004894:	4952      	ldr	r1, [pc, #328]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004896:	4313      	orrs	r3, r2
 8004898:	650b      	str	r3, [r1, #80]	; 0x50
 800489a:	e001      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489c:	7dfb      	ldrb	r3, [r7, #23]
 800489e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d049      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048b4:	d02e      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80048b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048ba:	d828      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80048bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048c0:	d02a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80048c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048c6:	d822      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80048c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048cc:	d026      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80048ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048d2:	d81c      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80048d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048d8:	d010      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x464>
 80048da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048de:	d816      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01d      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80048e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e8:	d111      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3304      	adds	r3, #4
 80048ee:	2101      	movs	r1, #1
 80048f0:	4618      	mov	r0, r3
 80048f2:	f001 fdf9 	bl	80064e8 <RCCEx_PLL2_Config>
 80048f6:	4603      	mov	r3, r0
 80048f8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80048fa:	e012      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3324      	adds	r3, #36	; 0x24
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f001 fea2 	bl	800664c <RCCEx_PLL3_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800490c:	e009      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	75fb      	strb	r3, [r7, #23]
      break;
 8004912:	e006      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004914:	bf00      	nop
 8004916:	e004      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004918:	bf00      	nop
 800491a:	e002      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800491c:	bf00      	nop
 800491e:	e000      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004922:	7dfb      	ldrb	r3, [r7, #23]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004928:	4b2d      	ldr	r3, [pc, #180]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800492a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004934:	492a      	ldr	r1, [pc, #168]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004936:	4313      	orrs	r3, r2
 8004938:	650b      	str	r3, [r1, #80]	; 0x50
 800493a:	e001      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493c:	7dfb      	ldrb	r3, [r7, #23]
 800493e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d04d      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004956:	d02e      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004958:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800495c:	d828      	bhi.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800495e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004962:	d02a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004968:	d822      	bhi.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800496a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800496e:	d026      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004970:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004974:	d81c      	bhi.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800497a:	d010      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800497c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004980:	d816      	bhi.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01d      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800498a:	d111      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3304      	adds	r3, #4
 8004990:	2101      	movs	r1, #1
 8004992:	4618      	mov	r0, r3
 8004994:	f001 fda8 	bl	80064e8 <RCCEx_PLL2_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800499c:	e012      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3324      	adds	r3, #36	; 0x24
 80049a2:	2101      	movs	r1, #1
 80049a4:	4618      	mov	r0, r3
 80049a6:	f001 fe51 	bl	800664c <RCCEx_PLL3_Config>
 80049aa:	4603      	mov	r3, r0
 80049ac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80049ae:	e009      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	75fb      	strb	r3, [r7, #23]
      break;
 80049b4:	e006      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80049b6:	bf00      	nop
 80049b8:	e004      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80049ba:	bf00      	nop
 80049bc:	e002      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80049be:	bf00      	nop
 80049c0:	e000      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80049c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049d8:	4901      	ldr	r1, [pc, #4]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	658b      	str	r3, [r1, #88]	; 0x58
 80049de:	e003      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80049e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
 80049e6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02f      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049fc:	d00e      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x584>
 80049fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a02:	d814      	bhi.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d015      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004a08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a0c:	d10f      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a0e:	4baf      	ldr	r3, [pc, #700]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	4aae      	ldr	r2, [pc, #696]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a1a:	e00c      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	2101      	movs	r1, #1
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 fd60 	bl	80064e8 <RCCEx_PLL2_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a2c:	e003      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	75fb      	strb	r3, [r7, #23]
      break;
 8004a32:	e000      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a3c:	4ba3      	ldr	r3, [pc, #652]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a48:	49a0      	ldr	r1, [pc, #640]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	650b      	str	r3, [r1, #80]	; 0x50
 8004a4e:	e001      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a50:	7dfb      	ldrb	r3, [r7, #23]
 8004a52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d032      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d81b      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004a68:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6e:	bf00      	nop
 8004a70:	08004aa7 	.word	0x08004aa7
 8004a74:	08004a81 	.word	0x08004a81
 8004a78:	08004a8f 	.word	0x08004a8f
 8004a7c:	08004aa7 	.word	0x08004aa7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a80:	4b92      	ldr	r3, [pc, #584]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	4a91      	ldr	r2, [pc, #580]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004a8c:	e00c      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3304      	adds	r3, #4
 8004a92:	2102      	movs	r1, #2
 8004a94:	4618      	mov	r0, r3
 8004a96:	f001 fd27 	bl	80064e8 <RCCEx_PLL2_Config>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004a9e:	e003      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8004aa4:	e000      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004aae:	4b87      	ldr	r3, [pc, #540]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab2:	f023 0203 	bic.w	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	4984      	ldr	r1, [pc, #528]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ac0:	e001      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
 8004ac4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8086 	beq.w	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ad4:	4b7e      	ldr	r3, [pc, #504]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a7d      	ldr	r2, [pc, #500]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ade:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ae0:	f7fc fd14 	bl	800150c <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ae6:	e009      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae8:	f7fc fd10 	bl	800150c <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	; 0x64
 8004af4:	d902      	bls.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	75fb      	strb	r3, [r7, #23]
        break;
 8004afa:	e005      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004afc:	4b74      	ldr	r3, [pc, #464]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0ef      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d166      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b0e:	4b6f      	ldr	r3, [pc, #444]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b18:	4053      	eors	r3, r2
 8004b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d013      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b22:	4b6a      	ldr	r3, [pc, #424]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b2c:	4b67      	ldr	r3, [pc, #412]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b30:	4a66      	ldr	r2, [pc, #408]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b36:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b38:	4b64      	ldr	r3, [pc, #400]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3c:	4a63      	ldr	r2, [pc, #396]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b42:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004b44:	4a61      	ldr	r2, [pc, #388]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b54:	d115      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b56:	f7fc fcd9 	bl	800150c <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b5c:	e00b      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5e:	f7fc fcd5 	bl	800150c <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d902      	bls.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	75fb      	strb	r3, [r7, #23]
            break;
 8004b74:	e005      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b76:	4b55      	ldr	r3, [pc, #340]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0ed      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d126      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b96:	d10d      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004b98:	4b4c      	ldr	r3, [pc, #304]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ba6:	0919      	lsrs	r1, r3, #4
 8004ba8:	4b4a      	ldr	r3, [pc, #296]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004baa:	400b      	ands	r3, r1
 8004bac:	4947      	ldr	r1, [pc, #284]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	610b      	str	r3, [r1, #16]
 8004bb2:	e005      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004bb4:	4b45      	ldr	r3, [pc, #276]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	4a44      	ldr	r2, [pc, #272]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004bbe:	6113      	str	r3, [r2, #16]
 8004bc0:	4b42      	ldr	r3, [pc, #264]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bce:	493f      	ldr	r1, [pc, #252]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	670b      	str	r3, [r1, #112]	; 0x70
 8004bd4:	e004      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
 8004bd8:	75bb      	strb	r3, [r7, #22]
 8004bda:	e001      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
 8004bde:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8085 	beq.w	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bf2:	2b28      	cmp	r3, #40	; 0x28
 8004bf4:	d866      	bhi.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004bf6:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004cd9 	.word	0x08004cd9
 8004c00:	08004cc5 	.word	0x08004cc5
 8004c04:	08004cc5 	.word	0x08004cc5
 8004c08:	08004cc5 	.word	0x08004cc5
 8004c0c:	08004cc5 	.word	0x08004cc5
 8004c10:	08004cc5 	.word	0x08004cc5
 8004c14:	08004cc5 	.word	0x08004cc5
 8004c18:	08004cc5 	.word	0x08004cc5
 8004c1c:	08004ca1 	.word	0x08004ca1
 8004c20:	08004cc5 	.word	0x08004cc5
 8004c24:	08004cc5 	.word	0x08004cc5
 8004c28:	08004cc5 	.word	0x08004cc5
 8004c2c:	08004cc5 	.word	0x08004cc5
 8004c30:	08004cc5 	.word	0x08004cc5
 8004c34:	08004cc5 	.word	0x08004cc5
 8004c38:	08004cc5 	.word	0x08004cc5
 8004c3c:	08004cb3 	.word	0x08004cb3
 8004c40:	08004cc5 	.word	0x08004cc5
 8004c44:	08004cc5 	.word	0x08004cc5
 8004c48:	08004cc5 	.word	0x08004cc5
 8004c4c:	08004cc5 	.word	0x08004cc5
 8004c50:	08004cc5 	.word	0x08004cc5
 8004c54:	08004cc5 	.word	0x08004cc5
 8004c58:	08004cc5 	.word	0x08004cc5
 8004c5c:	08004cd9 	.word	0x08004cd9
 8004c60:	08004cc5 	.word	0x08004cc5
 8004c64:	08004cc5 	.word	0x08004cc5
 8004c68:	08004cc5 	.word	0x08004cc5
 8004c6c:	08004cc5 	.word	0x08004cc5
 8004c70:	08004cc5 	.word	0x08004cc5
 8004c74:	08004cc5 	.word	0x08004cc5
 8004c78:	08004cc5 	.word	0x08004cc5
 8004c7c:	08004cd9 	.word	0x08004cd9
 8004c80:	08004cc5 	.word	0x08004cc5
 8004c84:	08004cc5 	.word	0x08004cc5
 8004c88:	08004cc5 	.word	0x08004cc5
 8004c8c:	08004cc5 	.word	0x08004cc5
 8004c90:	08004cc5 	.word	0x08004cc5
 8004c94:	08004cc5 	.word	0x08004cc5
 8004c98:	08004cc5 	.word	0x08004cc5
 8004c9c:	08004cd9 	.word	0x08004cd9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f001 fc1e 	bl	80064e8 <RCCEx_PLL2_Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004cb0:	e013      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3324      	adds	r3, #36	; 0x24
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 fcc7 	bl	800664c <RCCEx_PLL3_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004cc2:	e00a      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8004cc8:	e007      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004cca:	bf00      	nop
 8004ccc:	58024400 	.word	0x58024400
 8004cd0:	58024800 	.word	0x58024800
 8004cd4:	00ffffcf 	.word	0x00ffffcf
      break;
 8004cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004ce0:	4b96      	ldr	r3, [pc, #600]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cec:	4993      	ldr	r1, [pc, #588]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	654b      	str	r3, [r1, #84]	; 0x54
 8004cf2:	e001      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf4:	7dfb      	ldrb	r3, [r7, #23]
 8004cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d038      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d08:	2b05      	cmp	r3, #5
 8004d0a:	d821      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004d0c:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d57 	.word	0x08004d57
 8004d18:	08004d2d 	.word	0x08004d2d
 8004d1c:	08004d3f 	.word	0x08004d3f
 8004d20:	08004d57 	.word	0x08004d57
 8004d24:	08004d57 	.word	0x08004d57
 8004d28:	08004d57 	.word	0x08004d57
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	2101      	movs	r1, #1
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 fbd8 	bl	80064e8 <RCCEx_PLL2_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d3c:	e00c      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3324      	adds	r3, #36	; 0x24
 8004d42:	2101      	movs	r1, #1
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 fc81 	bl	800664c <RCCEx_PLL3_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d4e:	e003      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	75fb      	strb	r3, [r7, #23]
      break;
 8004d54:	e000      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d58:	7dfb      	ldrb	r3, [r7, #23]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d109      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d5e:	4b77      	ldr	r3, [pc, #476]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	f023 0207 	bic.w	r2, r3, #7
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d6a:	4974      	ldr	r1, [pc, #464]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	654b      	str	r3, [r1, #84]	; 0x54
 8004d70:	e001      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
 8004d74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d03a      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d88:	2b05      	cmp	r3, #5
 8004d8a:	d821      	bhi.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004d8c:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004dd7 	.word	0x08004dd7
 8004d98:	08004dad 	.word	0x08004dad
 8004d9c:	08004dbf 	.word	0x08004dbf
 8004da0:	08004dd7 	.word	0x08004dd7
 8004da4:	08004dd7 	.word	0x08004dd7
 8004da8:	08004dd7 	.word	0x08004dd7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	2101      	movs	r1, #1
 8004db2:	4618      	mov	r0, r3
 8004db4:	f001 fb98 	bl	80064e8 <RCCEx_PLL2_Config>
 8004db8:	4603      	mov	r3, r0
 8004dba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004dbc:	e00c      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3324      	adds	r3, #36	; 0x24
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 fc41 	bl	800664c <RCCEx_PLL3_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004dce:	e003      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd4:	e000      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dde:	4b57      	ldr	r3, [pc, #348]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de2:	f023 0207 	bic.w	r2, r3, #7
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dec:	4953      	ldr	r1, [pc, #332]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	658b      	str	r3, [r1, #88]	; 0x58
 8004df2:	e001      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d04b      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e0e:	d02e      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e14:	d828      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1a:	d02a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e20:	d822      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004e22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e26:	d026      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004e28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e2c:	d81c      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e32:	d010      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e38:	d816      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01d      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e42:	d111      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3304      	adds	r3, #4
 8004e48:	2100      	movs	r1, #0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f001 fb4c 	bl	80064e8 <RCCEx_PLL2_Config>
 8004e50:	4603      	mov	r3, r0
 8004e52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004e54:	e012      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3324      	adds	r3, #36	; 0x24
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 fbf5 	bl	800664c <RCCEx_PLL3_Config>
 8004e62:	4603      	mov	r3, r0
 8004e64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004e66:	e009      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e6c:	e006      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e004      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e72:	bf00      	nop
 8004e74:	e002      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e7c:	7dfb      	ldrb	r3, [r7, #23]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e82:	4b2e      	ldr	r3, [pc, #184]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e90:	492a      	ldr	r1, [pc, #168]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	654b      	str	r3, [r1, #84]	; 0x54
 8004e96:	e001      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
 8004e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d04d      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004eb2:	d02e      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004eb4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004eb8:	d828      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ebe:	d02a      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec4:	d822      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004ec6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eca:	d026      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ed0:	d81c      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed6:	d010      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004edc:	d816      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01d      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee6:	d111      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3304      	adds	r3, #4
 8004eec:	2100      	movs	r1, #0
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 fafa 	bl	80064e8 <RCCEx_PLL2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ef8:	e012      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3324      	adds	r3, #36	; 0x24
 8004efe:	2102      	movs	r1, #2
 8004f00:	4618      	mov	r0, r3
 8004f02:	f001 fba3 	bl	800664c <RCCEx_PLL3_Config>
 8004f06:	4603      	mov	r3, r0
 8004f08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004f0a:	e009      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f10:	e006      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004f12:	bf00      	nop
 8004f14:	e004      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004f16:	bf00      	nop
 8004f18:	e002      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e000      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10c      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f26:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f34:	4901      	ldr	r1, [pc, #4]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	658b      	str	r3, [r1, #88]	; 0x58
 8004f3a:	e003      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004f3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
 8004f42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d04b      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f5a:	d02e      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004f5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f60:	d828      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f66:	d02a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6c:	d822      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f72:	d026      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004f74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f78:	d81c      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f7e:	d010      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f84:	d816      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d01d      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8e:	d111      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	2100      	movs	r1, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f001 faa6 	bl	80064e8 <RCCEx_PLL2_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004fa0:	e012      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3324      	adds	r3, #36	; 0x24
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f001 fb4f 	bl	800664c <RCCEx_PLL3_Config>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004fb2:	e009      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb8:	e006      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e004      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e002      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004fc2:	bf00      	nop
 8004fc4:	e000      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10a      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004fce:	4b9d      	ldr	r3, [pc, #628]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fdc:	4999      	ldr	r1, [pc, #612]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	658b      	str	r3, [r1, #88]	; 0x58
 8004fe2:	e001      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
 8004fe6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01a      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffe:	d10a      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3324      	adds	r3, #36	; 0x24
 8005004:	2102      	movs	r1, #2
 8005006:	4618      	mov	r0, r3
 8005008:	f001 fb20 	bl	800664c <RCCEx_PLL3_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005016:	4b8b      	ldr	r3, [pc, #556]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005024:	4987      	ldr	r1, [pc, #540]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005026:	4313      	orrs	r3, r2
 8005028:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0310 	and.w	r3, r3, #16
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01a      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800503c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005040:	d10a      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3324      	adds	r3, #36	; 0x24
 8005046:	2102      	movs	r1, #2
 8005048:	4618      	mov	r0, r3
 800504a:	f001 faff 	bl	800664c <RCCEx_PLL3_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005058:	4b7a      	ldr	r3, [pc, #488]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800505a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005066:	4977      	ldr	r1, [pc, #476]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005068:	4313      	orrs	r3, r2
 800506a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d034      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800507e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005082:	d01d      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005088:	d817      	bhi.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800508e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005092:	d009      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005094:	e011      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3304      	adds	r3, #4
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f001 fa23 	bl	80064e8 <RCCEx_PLL2_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80050a6:	e00c      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3324      	adds	r3, #36	; 0x24
 80050ac:	2102      	movs	r1, #2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f001 facc 	bl	800664c <RCCEx_PLL3_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80050b8:	e003      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	75fb      	strb	r3, [r7, #23]
      break;
 80050be:	e000      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80050c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10a      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050c8:	4b5e      	ldr	r3, [pc, #376]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050d6:	495b      	ldr	r1, [pc, #364]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	658b      	str	r3, [r1, #88]	; 0x58
 80050dc:	e001      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d033      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050f8:	d01c      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80050fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050fe:	d816      	bhi.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005104:	d003      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800510a:	d007      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800510c:	e00f      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800510e:	4b4d      	ldr	r3, [pc, #308]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	4a4c      	ldr	r2, [pc, #304]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005118:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800511a:	e00c      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3324      	adds	r3, #36	; 0x24
 8005120:	2101      	movs	r1, #1
 8005122:	4618      	mov	r0, r3
 8005124:	f001 fa92 	bl	800664c <RCCEx_PLL3_Config>
 8005128:	4603      	mov	r3, r0
 800512a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800512c:	e003      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	75fb      	strb	r3, [r7, #23]
      break;
 8005132:	e000      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005136:	7dfb      	ldrb	r3, [r7, #23]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800513c:	4b41      	ldr	r3, [pc, #260]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005140:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800514a:	493e      	ldr	r1, [pc, #248]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800514c:	4313      	orrs	r3, r2
 800514e:	654b      	str	r3, [r1, #84]	; 0x54
 8005150:	e001      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d029      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800516a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800516e:	d007      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005170:	e00f      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005172:	4b34      	ldr	r3, [pc, #208]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	4a33      	ldr	r2, [pc, #204]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800517c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800517e:	e00b      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3304      	adds	r3, #4
 8005184:	2102      	movs	r1, #2
 8005186:	4618      	mov	r0, r3
 8005188:	f001 f9ae 	bl	80064e8 <RCCEx_PLL2_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005190:	e002      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	75fb      	strb	r3, [r7, #23]
      break;
 8005196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800519e:	4b29      	ldr	r3, [pc, #164]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051aa:	4926      	ldr	r1, [pc, #152]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80051b0:	e001      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
 80051b4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3324      	adds	r3, #36	; 0x24
 80051c6:	2102      	movs	r1, #2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f001 fa3f 	bl	800664c <RCCEx_PLL3_Config>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d033      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ec:	d017      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80051ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051f2:	d811      	bhi.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80051f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f8:	d013      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80051fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fe:	d80b      	bhi.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d010      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005208:	d106      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800520a:	4b0e      	ldr	r3, [pc, #56]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	4a0d      	ldr	r2, [pc, #52]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005214:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005216:	e007      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	75fb      	strb	r3, [r7, #23]
      break;
 800521c:	e004      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800521e:	bf00      	nop
 8005220:	e002      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005222:	bf00      	nop
 8005224:	e000      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005226:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10c      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800522e:	4b05      	ldr	r3, [pc, #20]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005232:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800523a:	4902      	ldr	r1, [pc, #8]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800523c:	4313      	orrs	r3, r2
 800523e:	654b      	str	r3, [r1, #84]	; 0x54
 8005240:	e004      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005242:	bf00      	nop
 8005244:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005248:	7dfb      	ldrb	r3, [r7, #23]
 800524a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d008      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005258:	4b31      	ldr	r3, [pc, #196]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800525a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005264:	492e      	ldr	r1, [pc, #184]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005266:	4313      	orrs	r3, r2
 8005268:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005276:	4b2a      	ldr	r3, [pc, #168]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005284:	4926      	ldr	r1, [pc, #152]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005286:	4313      	orrs	r3, r2
 8005288:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005296:	4b22      	ldr	r3, [pc, #136]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052a2:	491f      	ldr	r1, [pc, #124]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052b4:	4b1a      	ldr	r3, [pc, #104]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	4a19      	ldr	r2, [pc, #100]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052be:	6113      	str	r3, [r2, #16]
 80052c0:	4b17      	ldr	r3, [pc, #92]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80052ca:	4915      	ldr	r1, [pc, #84]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	da08      	bge.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80052d8:	4b11      	ldr	r3, [pc, #68]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e4:	490e      	ldr	r1, [pc, #56]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	4906      	ldr	r1, [pc, #24]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005306:	4313      	orrs	r3, r2
 8005308:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800530a:	7dbb      	ldrb	r3, [r7, #22]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	e000      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	58024400 	.word	0x58024400

08005324 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b090      	sub	sp, #64	; 0x40
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005332:	f040 8095 	bne.w	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005336:	4b97      	ldr	r3, [pc, #604]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	2b04      	cmp	r3, #4
 8005344:	f200 8088 	bhi.w	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005365 	.word	0x08005365
 8005354:	0800538d 	.word	0x0800538d
 8005358:	080053b5 	.word	0x080053b5
 800535c:	08005451 	.word	0x08005451
 8005360:	080053dd 	.word	0x080053dd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005364:	4b8b      	ldr	r3, [pc, #556]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005370:	d108      	bne.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005376:	4618      	mov	r0, r3
 8005378:	f000 ff64 	bl	8006244 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005380:	f000 bc94 	b.w	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005388:	f000 bc90 	b.w	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800538c:	4b81      	ldr	r3, [pc, #516]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005398:	d108      	bne.n	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800539a:	f107 0318 	add.w	r3, r7, #24
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fca8 	bl	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053a8:	f000 bc80 	b.w	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053b0:	f000 bc7c 	b.w	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053b4:	4b77      	ldr	r3, [pc, #476]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c0:	d108      	bne.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053c2:	f107 030c 	add.w	r3, r7, #12
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fde8 	bl	8005f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053d0:	f000 bc6c 	b.w	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053d8:	f000 bc68 	b.w	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80053dc:	4b6d      	ldr	r3, [pc, #436]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053e4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053e6:	4b6b      	ldr	r3, [pc, #428]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d10c      	bne.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80053f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d109      	bne.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053f8:	4b66      	ldr	r3, [pc, #408]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	08db      	lsrs	r3, r3, #3
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	4a65      	ldr	r2, [pc, #404]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
 8005408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800540a:	e01f      	b.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800540c:	4b61      	ldr	r3, [pc, #388]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005418:	d106      	bne.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800541a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005420:	d102      	bne.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005422:	4b5e      	ldr	r3, [pc, #376]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005426:	e011      	b.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005428:	4b5a      	ldr	r3, [pc, #360]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005434:	d106      	bne.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800543c:	d102      	bne.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800543e:	4b58      	ldr	r3, [pc, #352]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005442:	e003      	b.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005448:	f000 bc30 	b.w	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800544c:	f000 bc2e 	b.w	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005450:	4b54      	ldr	r3, [pc, #336]	; (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005452:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005454:	f000 bc2a 	b.w	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800545c:	f000 bc26 	b.w	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005466:	f040 809f 	bne.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800546a:	4b4a      	ldr	r3, [pc, #296]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800546c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005472:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547a:	d04d      	beq.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005482:	f200 8084 	bhi.w	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	2bc0      	cmp	r3, #192	; 0xc0
 800548a:	d07d      	beq.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	2bc0      	cmp	r3, #192	; 0xc0
 8005490:	d87d      	bhi.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	2b80      	cmp	r3, #128	; 0x80
 8005496:	d02d      	beq.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	2b80      	cmp	r3, #128	; 0x80
 800549c:	d877      	bhi.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	2b40      	cmp	r3, #64	; 0x40
 80054a8:	d012      	beq.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80054aa:	e070      	b.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054ac:	4b39      	ldr	r3, [pc, #228]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054b8:	d107      	bne.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fec0 	bl	8006244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054c8:	e3f0      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054ce:	e3ed      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054d0:	4b30      	ldr	r3, [pc, #192]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054dc:	d107      	bne.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054de:	f107 0318 	add.w	r3, r7, #24
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fc06 	bl	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054ec:	e3de      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054f2:	e3db      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054f4:	4b27      	ldr	r3, [pc, #156]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005500:	d107      	bne.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005502:	f107 030c 	add.w	r3, r7, #12
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fd48 	bl	8005f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005510:	e3cc      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005516:	e3c9      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005518:	4b1e      	ldr	r3, [pc, #120]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800551a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800551c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005520:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005522:	4b1c      	ldr	r3, [pc, #112]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b04      	cmp	r3, #4
 800552c:	d10c      	bne.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005534:	4b17      	ldr	r3, [pc, #92]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	08db      	lsrs	r3, r3, #3
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	4a16      	ldr	r2, [pc, #88]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005546:	e01e      	b.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005548:	4b12      	ldr	r3, [pc, #72]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005554:	d106      	bne.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005558:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800555c:	d102      	bne.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800555e:	4b0f      	ldr	r3, [pc, #60]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005562:	e010      	b.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005570:	d106      	bne.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005578:	d102      	bne.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800557a:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800557c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800557e:	e002      	b.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005584:	e392      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005586:	e391      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800558a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800558c:	e38e      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800558e:	2300      	movs	r3, #0
 8005590:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005592:	e38b      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005594:	58024400 	.word	0x58024400
 8005598:	03d09000 	.word	0x03d09000
 800559c:	003d0900 	.word	0x003d0900
 80055a0:	007a1200 	.word	0x007a1200
 80055a4:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ae:	f040 809c 	bne.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80055b2:	4b9d      	ldr	r3, [pc, #628]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80055b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80055ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055c2:	d054      	beq.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055ca:	f200 808b 	bhi.w	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055d4:	f000 8083 	beq.w	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055de:	f200 8081 	bhi.w	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055e8:	d02f      	beq.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f0:	d878      	bhi.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d004      	beq.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055fe:	d012      	beq.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8005600:	e070      	b.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005602:	4b89      	ldr	r3, [pc, #548]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800560e:	d107      	bne.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fe15 	bl	8006244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800561e:	e345      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005624:	e342      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005626:	4b80      	ldr	r3, [pc, #512]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800562e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005632:	d107      	bne.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005634:	f107 0318 	add.w	r3, r7, #24
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fb5b 	bl	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005642:	e333      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005648:	e330      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800564a:	4b77      	ldr	r3, [pc, #476]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005656:	d107      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005658:	f107 030c 	add.w	r3, r7, #12
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fc9d 	bl	8005f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005666:	e321      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800566c:	e31e      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800566e:	4b6e      	ldr	r3, [pc, #440]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005672:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005676:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005678:	4b6b      	ldr	r3, [pc, #428]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b04      	cmp	r3, #4
 8005682:	d10c      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800568a:	4b67      	ldr	r3, [pc, #412]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	08db      	lsrs	r3, r3, #3
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	4a65      	ldr	r2, [pc, #404]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005696:	fa22 f303 	lsr.w	r3, r2, r3
 800569a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800569c:	e01e      	b.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800569e:	4b62      	ldr	r3, [pc, #392]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056aa:	d106      	bne.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056b2:	d102      	bne.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80056b4:	4b5e      	ldr	r3, [pc, #376]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b8:	e010      	b.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056ba:	4b5b      	ldr	r3, [pc, #364]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056c6:	d106      	bne.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80056c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ce:	d102      	bne.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80056d0:	4b58      	ldr	r3, [pc, #352]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d4:	e002      	b.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80056da:	e2e7      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80056dc:	e2e6      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80056de:	4b56      	ldr	r3, [pc, #344]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80056e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056e2:	e2e3      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056e8:	e2e0      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f0:	f040 80a7 	bne.w	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80056f4:	4b4c      	ldr	r3, [pc, #304]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80056fc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005704:	d055      	beq.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800570c:	f200 8096 	bhi.w	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005716:	f000 8084 	beq.w	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005720:	f200 808c 	bhi.w	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800572a:	d030      	beq.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005732:	f200 8083 	bhi.w	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005742:	d012      	beq.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005744:	e07a      	b.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005746:	4b38      	ldr	r3, [pc, #224]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005752:	d107      	bne.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fd73 	bl	8006244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005762:	e2a3      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005768:	e2a0      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800576a:	4b2f      	ldr	r3, [pc, #188]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005776:	d107      	bne.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005778:	f107 0318 	add.w	r3, r7, #24
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fab9 	bl	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005786:	e291      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800578c:	e28e      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800578e:	4b26      	ldr	r3, [pc, #152]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800579a:	d107      	bne.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800579c:	f107 030c 	add.w	r3, r7, #12
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fbfb 	bl	8005f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057aa:	e27f      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057b0:	e27c      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80057b2:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80057b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057bc:	4b1a      	ldr	r3, [pc, #104]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d10c      	bne.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80057c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d109      	bne.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057ce:	4b16      	ldr	r3, [pc, #88]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	08db      	lsrs	r3, r3, #3
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	4a14      	ldr	r2, [pc, #80]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80057da:	fa22 f303 	lsr.w	r3, r2, r3
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e0:	e01e      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057e2:	4b11      	ldr	r3, [pc, #68]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ee:	d106      	bne.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80057f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057f6:	d102      	bne.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80057f8:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057fc:	e010      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057fe:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800580a:	d106      	bne.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800580c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005812:	d102      	bne.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005814:	4b07      	ldr	r3, [pc, #28]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005818:	e002      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800581e:	e245      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005820:	e244      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005822:	4b05      	ldr	r3, [pc, #20]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005824:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005826:	e241      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005828:	58024400 	.word	0x58024400
 800582c:	03d09000 	.word	0x03d09000
 8005830:	003d0900 	.word	0x003d0900
 8005834:	007a1200 	.word	0x007a1200
 8005838:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005840:	e234      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005848:	f040 809c 	bne.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800584c:	4b9b      	ldr	r3, [pc, #620]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800584e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005850:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005854:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800585c:	d054      	beq.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005864:	f200 808b 	bhi.w	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800586e:	f000 8083 	beq.w	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005878:	f200 8081 	bhi.w	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005882:	d02f      	beq.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8005884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800588a:	d878      	bhi.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	2b00      	cmp	r3, #0
 8005890:	d004      	beq.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005898:	d012      	beq.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800589a:	e070      	b.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800589c:	4b87      	ldr	r3, [pc, #540]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058a8:	d107      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fcc8 	bl	8006244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058b8:	e1f8      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058be:	e1f5      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058c0:	4b7e      	ldr	r3, [pc, #504]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058cc:	d107      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ce:	f107 0318 	add.w	r3, r7, #24
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fa0e 	bl	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058dc:	e1e6      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058e2:	e1e3      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058e4:	4b75      	ldr	r3, [pc, #468]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058f0:	d107      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058f2:	f107 030c 	add.w	r3, r7, #12
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fb50 	bl	8005f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005900:	e1d4      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005902:	2300      	movs	r3, #0
 8005904:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005906:	e1d1      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005908:	4b6c      	ldr	r3, [pc, #432]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800590a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005910:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005912:	4b6a      	ldr	r3, [pc, #424]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b04      	cmp	r3, #4
 800591c:	d10c      	bne.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800591e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005924:	4b65      	ldr	r3, [pc, #404]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	08db      	lsrs	r3, r3, #3
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	4a64      	ldr	r2, [pc, #400]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8005930:	fa22 f303 	lsr.w	r3, r2, r3
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005936:	e01e      	b.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005938:	4b60      	ldr	r3, [pc, #384]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005944:	d106      	bne.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800594c:	d102      	bne.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800594e:	4b5d      	ldr	r3, [pc, #372]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8005950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005952:	e010      	b.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005954:	4b59      	ldr	r3, [pc, #356]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005960:	d106      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005968:	d102      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800596a:	4b57      	ldr	r3, [pc, #348]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596e:	e002      	b.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005974:	e19a      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005976:	e199      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005978:	4b54      	ldr	r3, [pc, #336]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800597c:	e196      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005982:	e193      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800598a:	d173      	bne.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800598c:	4b4b      	ldr	r3, [pc, #300]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800598e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005994:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800599c:	d02f      	beq.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059a4:	d863      	bhi.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b2:	d012      	beq.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80059b4:	e05b      	b.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059b6:	4b41      	ldr	r3, [pc, #260]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c2:	d107      	bne.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c4:	f107 0318 	add.w	r3, r7, #24
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 f993 	bl	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059d2:	e16b      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059d8:	e168      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059da:	4b38      	ldr	r3, [pc, #224]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059e6:	d107      	bne.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059e8:	f107 030c 	add.w	r3, r7, #12
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fad5 	bl	8005f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059f6:	e159      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059fc:	e156      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80059fe:	4b2f      	ldr	r3, [pc, #188]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a08:	4b2c      	ldr	r3, [pc, #176]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d10c      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8005a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d109      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a1a:	4b28      	ldr	r3, [pc, #160]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	08db      	lsrs	r3, r3, #3
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	4a26      	ldr	r2, [pc, #152]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8005a26:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a2c:	e01e      	b.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a2e:	4b23      	ldr	r3, [pc, #140]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a3a:	d106      	bne.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a42:	d102      	bne.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005a44:	4b1f      	ldr	r3, [pc, #124]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a48:	e010      	b.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a4a:	4b1c      	ldr	r3, [pc, #112]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a56:	d106      	bne.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8005a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5e:	d102      	bne.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a60:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a64:	e002      	b.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005a6a:	e11f      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005a6c:	e11e      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a72:	e11b      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a7a:	d13e      	bne.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005a7c:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a84:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d004      	beq.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a92:	d01d      	beq.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005a94:	e02e      	b.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aa2:	d107      	bne.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fbcb 	bl	8006244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ab2:	e0fb      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ab8:	e0f8      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005aba:	bf00      	nop
 8005abc:	58024400 	.word	0x58024400
 8005ac0:	03d09000 	.word	0x03d09000
 8005ac4:	003d0900 	.word	0x003d0900
 8005ac8:	007a1200 	.word	0x007a1200
 8005acc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ad0:	4b79      	ldr	r3, [pc, #484]	; (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005adc:	d107      	bne.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ade:	f107 0318 	add.w	r3, r7, #24
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 f906 	bl	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005aec:	e0de      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005af2:	e0db      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005af8:	e0d8      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b00:	f040 8085 	bne.w	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005b04:	4b6c      	ldr	r3, [pc, #432]	; (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b08:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005b0c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b14:	d06b      	beq.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b1c:	d874      	bhi.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b24:	d056      	beq.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2c:	d86c      	bhi.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b34:	d03b      	beq.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b3c:	d864      	bhi.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b44:	d021      	beq.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b4c:	d85c      	bhi.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d004      	beq.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b5a:	d004      	beq.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005b5c:	e054      	b.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005b5e:	f000 f8b3 	bl	8005cc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b62:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005b64:	e0a2      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b66:	4b54      	ldr	r3, [pc, #336]	; (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b72:	d107      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b74:	f107 0318 	add.w	r3, r7, #24
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 f8bb 	bl	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b82:	e093      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005b84:	2300      	movs	r3, #0
 8005b86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b88:	e090      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b8a:	4b4b      	ldr	r3, [pc, #300]	; (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b96:	d107      	bne.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b98:	f107 030c 	add.w	r3, r7, #12
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 f9fd 	bl	8005f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ba6:	e081      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bac:	e07e      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bae:	4b42      	ldr	r3, [pc, #264]	; (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d109      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bba:	4b3f      	ldr	r3, [pc, #252]	; (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	08db      	lsrs	r3, r3, #3
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	4a3d      	ldr	r2, [pc, #244]	; (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005bcc:	e06e      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bd2:	e06b      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005bd4:	4b38      	ldr	r3, [pc, #224]	; (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be0:	d102      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8005be2:	4b37      	ldr	r3, [pc, #220]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005be4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005be6:	e061      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bec:	e05e      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005bee:	4b32      	ldr	r3, [pc, #200]	; (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bfa:	d102      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8005bfc:	4b31      	ldr	r3, [pc, #196]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c00:	e054      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c06:	e051      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c0c:	e04e      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c14:	d148      	bne.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005c16:	4b28      	ldr	r3, [pc, #160]	; (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c1e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c26:	d02a      	beq.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c2e:	d838      	bhi.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d004      	beq.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c3c:	d00d      	beq.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8005c3e:	e030      	b.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c40:	4b1d      	ldr	r3, [pc, #116]	; (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c4c:	d102      	bne.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8005c4e:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005c50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c52:	e02b      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005c54:	2300      	movs	r3, #0
 8005c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c58:	e028      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c5a:	4b17      	ldr	r3, [pc, #92]	; (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c66:	d107      	bne.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fae9 	bl	8006244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c76:	e019      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c7c:	e016      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c7e:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c8a:	d107      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c8c:	f107 0318 	add.w	r3, r7, #24
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 f82f 	bl	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c9a:	e007      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ca0:	e004      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ca6:	e001      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3740      	adds	r7, #64	; 0x40
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	58024400 	.word	0x58024400
 8005cbc:	03d09000 	.word	0x03d09000
 8005cc0:	003d0900 	.word	0x003d0900
 8005cc4:	007a1200 	.word	0x007a1200

08005cc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005ccc:	f7fe fb88 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4b06      	ldr	r3, [pc, #24]	; (8005cec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	091b      	lsrs	r3, r3, #4
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	4904      	ldr	r1, [pc, #16]	; (8005cf0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005cde:	5ccb      	ldrb	r3, [r1, r3]
 8005ce0:	f003 031f 	and.w	r3, r3, #31
 8005ce4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	58024400 	.word	0x58024400
 8005cf0:	0800c11c 	.word	0x0800c11c

08005cf4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b089      	sub	sp, #36	; 0x24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cfc:	4ba1      	ldr	r3, [pc, #644]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d00:	f003 0303 	and.w	r3, r3, #3
 8005d04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005d06:	4b9f      	ldr	r3, [pc, #636]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	0b1b      	lsrs	r3, r3, #12
 8005d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d12:	4b9c      	ldr	r3, [pc, #624]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	091b      	lsrs	r3, r3, #4
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005d1e:	4b99      	ldr	r3, [pc, #612]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	08db      	lsrs	r3, r3, #3
 8005d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	fb02 f303 	mul.w	r3, r2, r3
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8111 	beq.w	8005f64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	f000 8083 	beq.w	8005e50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	f200 80a1 	bhi.w	8005e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d056      	beq.n	8005e0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d5e:	e099      	b.n	8005e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d60:	4b88      	ldr	r3, [pc, #544]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d02d      	beq.n	8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d6c:	4b85      	ldr	r3, [pc, #532]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	08db      	lsrs	r3, r3, #3
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	4a84      	ldr	r2, [pc, #528]	; (8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	ee07 3a90 	vmov	s15, r3
 8005d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d96:	4b7b      	ldr	r3, [pc, #492]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005daa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005dc6:	e087      	b.n	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dda:	4b6a      	ldr	r3, [pc, #424]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e0a:	e065      	b.n	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1e:	4b59      	ldr	r3, [pc, #356]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e4e:	e043      	b.n	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e62:	4b48      	ldr	r3, [pc, #288]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e92:	e021      	b.n	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea6:	4b37      	ldr	r3, [pc, #220]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eae:	ee07 3a90 	vmov	s15, r3
 8005eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ed6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005ed8:	4b2a      	ldr	r3, [pc, #168]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	0a5b      	lsrs	r3, r3, #9
 8005ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005efe:	ee17 2a90 	vmov	r2, s15
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005f06:	4b1f      	ldr	r3, [pc, #124]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	0c1b      	lsrs	r3, r3, #16
 8005f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f10:	ee07 3a90 	vmov	s15, r3
 8005f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f2c:	ee17 2a90 	vmov	r2, s15
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005f34:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	0e1b      	lsrs	r3, r3, #24
 8005f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f5a:	ee17 2a90 	vmov	r2, s15
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f62:	e008      	b.n	8005f76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	609a      	str	r2, [r3, #8]
}
 8005f76:	bf00      	nop
 8005f78:	3724      	adds	r7, #36	; 0x24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	58024400 	.word	0x58024400
 8005f88:	03d09000 	.word	0x03d09000
 8005f8c:	46000000 	.word	0x46000000
 8005f90:	4c742400 	.word	0x4c742400
 8005f94:	4a742400 	.word	0x4a742400
 8005f98:	4af42400 	.word	0x4af42400

08005f9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b089      	sub	sp, #36	; 0x24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fa4:	4ba1      	ldr	r3, [pc, #644]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	f003 0303 	and.w	r3, r3, #3
 8005fac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005fae:	4b9f      	ldr	r3, [pc, #636]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	0d1b      	lsrs	r3, r3, #20
 8005fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005fba:	4b9c      	ldr	r3, [pc, #624]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	0a1b      	lsrs	r3, r3, #8
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005fc6:	4b99      	ldr	r3, [pc, #612]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fca:	08db      	lsrs	r3, r3, #3
 8005fcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 8111 	beq.w	800620c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	f000 8083 	beq.w	80060f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	f200 80a1 	bhi.w	800613c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d056      	beq.n	80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006006:	e099      	b.n	800613c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006008:	4b88      	ldr	r3, [pc, #544]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b00      	cmp	r3, #0
 8006012:	d02d      	beq.n	8006070 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006014:	4b85      	ldr	r3, [pc, #532]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	08db      	lsrs	r3, r3, #3
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	4a84      	ldr	r2, [pc, #528]	; (8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006020:	fa22 f303 	lsr.w	r3, r2, r3
 8006024:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	ee07 3a90 	vmov	s15, r3
 800602c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603e:	4b7b      	ldr	r3, [pc, #492]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006052:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800606e:	e087      	b.n	8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006238 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800607e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006082:	4b6a      	ldr	r3, [pc, #424]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006092:	ed97 6a03 	vldr	s12, [r7, #12]
 8006096:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800609a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060b2:	e065      	b.n	8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800623c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c6:	4b59      	ldr	r3, [pc, #356]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060f6:	e043      	b.n	8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006102:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610a:	4b48      	ldr	r3, [pc, #288]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611a:	ed97 6a03 	vldr	s12, [r7, #12]
 800611e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800612e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006136:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800613a:	e021      	b.n	8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006146:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800623c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800614a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614e:	4b37      	ldr	r3, [pc, #220]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006162:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800616a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800616e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800617a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800617e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006180:	4b2a      	ldr	r3, [pc, #168]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	0a5b      	lsrs	r3, r3, #9
 8006186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006192:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006196:	ee37 7a87 	vadd.f32	s14, s15, s14
 800619a:	edd7 6a07 	vldr	s13, [r7, #28]
 800619e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a6:	ee17 2a90 	vmov	r2, s15
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80061ae:	4b1f      	ldr	r3, [pc, #124]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	0c1b      	lsrs	r3, r3, #16
 80061b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80061cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d4:	ee17 2a90 	vmov	r2, s15
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80061dc:	4b13      	ldr	r3, [pc, #76]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	0e1b      	lsrs	r3, r3, #24
 80061e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80061fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006202:	ee17 2a90 	vmov	r2, s15
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800620a:	e008      	b.n	800621e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	609a      	str	r2, [r3, #8]
}
 800621e:	bf00      	nop
 8006220:	3724      	adds	r7, #36	; 0x24
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	58024400 	.word	0x58024400
 8006230:	03d09000 	.word	0x03d09000
 8006234:	46000000 	.word	0x46000000
 8006238:	4c742400 	.word	0x4c742400
 800623c:	4a742400 	.word	0x4a742400
 8006240:	4af42400 	.word	0x4af42400

08006244 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006244:	b480      	push	{r7}
 8006246:	b089      	sub	sp, #36	; 0x24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800624c:	4ba0      	ldr	r3, [pc, #640]	; (80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006256:	4b9e      	ldr	r3, [pc, #632]	; (80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	091b      	lsrs	r3, r3, #4
 800625c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006260:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006262:	4b9b      	ldr	r3, [pc, #620]	; (80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800626c:	4b98      	ldr	r3, [pc, #608]	; (80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800626e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006270:	08db      	lsrs	r3, r3, #3
 8006272:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	fb02 f303 	mul.w	r3, r2, r3
 800627c:	ee07 3a90 	vmov	s15, r3
 8006280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006284:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 8111 	beq.w	80064b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b02      	cmp	r3, #2
 8006294:	f000 8083 	beq.w	800639e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	2b02      	cmp	r3, #2
 800629c:	f200 80a1 	bhi.w	80063e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d056      	beq.n	800635a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80062ac:	e099      	b.n	80063e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ae:	4b88      	ldr	r3, [pc, #544]	; (80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d02d      	beq.n	8006316 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062ba:	4b85      	ldr	r3, [pc, #532]	; (80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	08db      	lsrs	r3, r3, #3
 80062c0:	f003 0303 	and.w	r3, r3, #3
 80062c4:	4a83      	ldr	r2, [pc, #524]	; (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80062c6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ca:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	ee07 3a90 	vmov	s15, r3
 80062d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	ee07 3a90 	vmov	s15, r3
 80062dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062e4:	4b7a      	ldr	r3, [pc, #488]	; (80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ec:	ee07 3a90 	vmov	s15, r3
 80062f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80062f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80064d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800630c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006310:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006314:	e087      	b.n	8006426 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006320:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80064dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006328:	4b69      	ldr	r3, [pc, #420]	; (80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800632a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006330:	ee07 3a90 	vmov	s15, r3
 8006334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006338:	ed97 6a03 	vldr	s12, [r7, #12]
 800633c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80064d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006340:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006344:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006348:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800634c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006354:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006358:	e065      	b.n	8006426 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	ee07 3a90 	vmov	s15, r3
 8006360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006364:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80064e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006368:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800636c:	4b58      	ldr	r3, [pc, #352]	; (80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006374:	ee07 3a90 	vmov	s15, r3
 8006378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800637c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006380:	eddf 5a55 	vldr	s11, [pc, #340]	; 80064d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006384:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006388:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800638c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006390:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006398:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800639c:	e043      	b.n	8006426 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	ee07 3a90 	vmov	s15, r3
 80063a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80063ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b0:	4b47      	ldr	r3, [pc, #284]	; (80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b8:	ee07 3a90 	vmov	s15, r3
 80063bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80063c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80064d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063e0:	e021      	b.n	8006426 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	ee07 3a90 	vmov	s15, r3
 80063e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80064dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80063f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f4:	4b36      	ldr	r3, [pc, #216]	; (80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fc:	ee07 3a90 	vmov	s15, r3
 8006400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006404:	ed97 6a03 	vldr	s12, [r7, #12]
 8006408:	eddf 5a33 	vldr	s11, [pc, #204]	; 80064d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800640c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006414:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800641c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006420:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006424:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006426:	4b2a      	ldr	r3, [pc, #168]	; (80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	0a5b      	lsrs	r3, r3, #9
 800642c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006430:	ee07 3a90 	vmov	s15, r3
 8006434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800643c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006440:	edd7 6a07 	vldr	s13, [r7, #28]
 8006444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800644c:	ee17 2a90 	vmov	r2, s15
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006454:	4b1e      	ldr	r3, [pc, #120]	; (80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	0c1b      	lsrs	r3, r3, #16
 800645a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800646a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800646e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800647a:	ee17 2a90 	vmov	r2, s15
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006482:	4b13      	ldr	r3, [pc, #76]	; (80064d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	0e1b      	lsrs	r3, r3, #24
 8006488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006494:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006498:	ee37 7a87 	vadd.f32	s14, s15, s14
 800649c:	edd7 6a07 	vldr	s13, [r7, #28]
 80064a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064a8:	ee17 2a90 	vmov	r2, s15
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80064b0:	e008      	b.n	80064c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	609a      	str	r2, [r3, #8]
}
 80064c4:	bf00      	nop
 80064c6:	3724      	adds	r7, #36	; 0x24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	58024400 	.word	0x58024400
 80064d4:	03d09000 	.word	0x03d09000
 80064d8:	46000000 	.word	0x46000000
 80064dc:	4c742400 	.word	0x4c742400
 80064e0:	4a742400 	.word	0x4a742400
 80064e4:	4af42400 	.word	0x4af42400

080064e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064f6:	4b53      	ldr	r3, [pc, #332]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 80064f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d101      	bne.n	8006506 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e099      	b.n	800663a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006506:	4b4f      	ldr	r3, [pc, #316]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a4e      	ldr	r2, [pc, #312]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 800650c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006512:	f7fa fffb 	bl	800150c <HAL_GetTick>
 8006516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006518:	e008      	b.n	800652c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800651a:	f7fa fff7 	bl	800150c <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e086      	b.n	800663a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800652c:	4b45      	ldr	r3, [pc, #276]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1f0      	bne.n	800651a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006538:	4b42      	ldr	r3, [pc, #264]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 800653a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	031b      	lsls	r3, r3, #12
 8006546:	493f      	ldr	r1, [pc, #252]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 8006548:	4313      	orrs	r3, r2
 800654a:	628b      	str	r3, [r1, #40]	; 0x28
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	3b01      	subs	r3, #1
 8006552:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	3b01      	subs	r3, #1
 800655c:	025b      	lsls	r3, r3, #9
 800655e:	b29b      	uxth	r3, r3
 8006560:	431a      	orrs	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	3b01      	subs	r3, #1
 8006568:	041b      	lsls	r3, r3, #16
 800656a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	3b01      	subs	r3, #1
 8006576:	061b      	lsls	r3, r3, #24
 8006578:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800657c:	4931      	ldr	r1, [pc, #196]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 800657e:	4313      	orrs	r3, r2
 8006580:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006582:	4b30      	ldr	r3, [pc, #192]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006586:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	492d      	ldr	r1, [pc, #180]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 8006590:	4313      	orrs	r3, r2
 8006592:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006594:	4b2b      	ldr	r3, [pc, #172]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	f023 0220 	bic.w	r2, r3, #32
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	4928      	ldr	r1, [pc, #160]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80065a6:	4b27      	ldr	r3, [pc, #156]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	4a26      	ldr	r2, [pc, #152]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 80065ac:	f023 0310 	bic.w	r3, r3, #16
 80065b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80065b2:	4b24      	ldr	r3, [pc, #144]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 80065b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065b6:	4b24      	ldr	r3, [pc, #144]	; (8006648 <RCCEx_PLL2_Config+0x160>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	69d2      	ldr	r2, [r2, #28]
 80065be:	00d2      	lsls	r2, r2, #3
 80065c0:	4920      	ldr	r1, [pc, #128]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80065c6:	4b1f      	ldr	r3, [pc, #124]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 80065c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ca:	4a1e      	ldr	r2, [pc, #120]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 80065cc:	f043 0310 	orr.w	r3, r3, #16
 80065d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80065d8:	4b1a      	ldr	r3, [pc, #104]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	4a19      	ldr	r2, [pc, #100]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 80065de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065e4:	e00f      	b.n	8006606 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d106      	bne.n	80065fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80065ec:	4b15      	ldr	r3, [pc, #84]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	4a14      	ldr	r2, [pc, #80]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 80065f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065f8:	e005      	b.n	8006606 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80065fa:	4b12      	ldr	r3, [pc, #72]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fe:	4a11      	ldr	r2, [pc, #68]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 8006600:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006604:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006606:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a0e      	ldr	r2, [pc, #56]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 800660c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006612:	f7fa ff7b 	bl	800150c <HAL_GetTick>
 8006616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006618:	e008      	b.n	800662c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800661a:	f7fa ff77 	bl	800150c <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b02      	cmp	r3, #2
 8006626:	d901      	bls.n	800662c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e006      	b.n	800663a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800662c:	4b05      	ldr	r3, [pc, #20]	; (8006644 <RCCEx_PLL2_Config+0x15c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0f0      	beq.n	800661a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	58024400 	.word	0x58024400
 8006648:	ffff0007 	.word	0xffff0007

0800664c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800665a:	4b53      	ldr	r3, [pc, #332]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 800665c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665e:	f003 0303 	and.w	r3, r3, #3
 8006662:	2b03      	cmp	r3, #3
 8006664:	d101      	bne.n	800666a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e099      	b.n	800679e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800666a:	4b4f      	ldr	r3, [pc, #316]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a4e      	ldr	r2, [pc, #312]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 8006670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006676:	f7fa ff49 	bl	800150c <HAL_GetTick>
 800667a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800667c:	e008      	b.n	8006690 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800667e:	f7fa ff45 	bl	800150c <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e086      	b.n	800679e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006690:	4b45      	ldr	r3, [pc, #276]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1f0      	bne.n	800667e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800669c:	4b42      	ldr	r3, [pc, #264]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 800669e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	051b      	lsls	r3, r3, #20
 80066aa:	493f      	ldr	r1, [pc, #252]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	628b      	str	r3, [r1, #40]	; 0x28
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	3b01      	subs	r3, #1
 80066c0:	025b      	lsls	r3, r3, #9
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	041b      	lsls	r3, r3, #16
 80066ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	3b01      	subs	r3, #1
 80066da:	061b      	lsls	r3, r3, #24
 80066dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066e0:	4931      	ldr	r1, [pc, #196]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80066e6:	4b30      	ldr	r3, [pc, #192]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	492d      	ldr	r1, [pc, #180]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066f8:	4b2b      	ldr	r3, [pc, #172]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	4928      	ldr	r1, [pc, #160]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 8006706:	4313      	orrs	r3, r2
 8006708:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800670a:	4b27      	ldr	r3, [pc, #156]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 800670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670e:	4a26      	ldr	r2, [pc, #152]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 8006710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006714:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006716:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 8006718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800671a:	4b24      	ldr	r3, [pc, #144]	; (80067ac <RCCEx_PLL3_Config+0x160>)
 800671c:	4013      	ands	r3, r2
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	69d2      	ldr	r2, [r2, #28]
 8006722:	00d2      	lsls	r2, r2, #3
 8006724:	4920      	ldr	r1, [pc, #128]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 8006726:	4313      	orrs	r3, r2
 8006728:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800672a:	4b1f      	ldr	r3, [pc, #124]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	4a1e      	ldr	r2, [pc, #120]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 8006730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d106      	bne.n	800674a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800673c:	4b1a      	ldr	r3, [pc, #104]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	4a19      	ldr	r2, [pc, #100]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 8006742:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006746:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006748:	e00f      	b.n	800676a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d106      	bne.n	800675e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006750:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	4a14      	ldr	r2, [pc, #80]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 8006756:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800675a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800675c:	e005      	b.n	800676a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800675e:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	4a11      	ldr	r2, [pc, #68]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 8006764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006768:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800676a:	4b0f      	ldr	r3, [pc, #60]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a0e      	ldr	r2, [pc, #56]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 8006770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006776:	f7fa fec9 	bl	800150c <HAL_GetTick>
 800677a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800677c:	e008      	b.n	8006790 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800677e:	f7fa fec5 	bl	800150c <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e006      	b.n	800679e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006790:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <RCCEx_PLL3_Config+0x15c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0f0      	beq.n	800677e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	58024400 	.word	0x58024400
 80067ac:	ffff0007 	.word	0xffff0007

080067b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e042      	b.n	8006848 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d106      	bne.n	80067da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7fa fc93 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2224      	movs	r2, #36	; 0x24
 80067de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0201 	bic.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f8c2 	bl	800697c <UART_SetConfig>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d101      	bne.n	8006802 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e022      	b.n	8006848 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fe1e 	bl	800744c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800681e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800682e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0201 	orr.w	r2, r2, #1
 800683e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fea5 	bl	8007590 <UART_CheckIdleState>
 8006846:	4603      	mov	r3, r0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08a      	sub	sp, #40	; 0x28
 8006854:	af02      	add	r7, sp, #8
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	603b      	str	r3, [r7, #0]
 800685c:	4613      	mov	r3, r2
 800685e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006866:	2b20      	cmp	r3, #32
 8006868:	f040 8083 	bne.w	8006972 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <HAL_UART_Transmit+0x28>
 8006872:	88fb      	ldrh	r3, [r7, #6]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e07b      	b.n	8006974 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006882:	2b01      	cmp	r3, #1
 8006884:	d101      	bne.n	800688a <HAL_UART_Transmit+0x3a>
 8006886:	2302      	movs	r3, #2
 8006888:	e074      	b.n	8006974 <HAL_UART_Transmit+0x124>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2221      	movs	r2, #33	; 0x21
 800689e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068a2:	f7fa fe33 	bl	800150c <HAL_GetTick>
 80068a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	88fa      	ldrh	r2, [r7, #6]
 80068ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	88fa      	ldrh	r2, [r7, #6]
 80068b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c0:	d108      	bne.n	80068d4 <HAL_UART_Transmit+0x84>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d104      	bne.n	80068d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	e003      	b.n	80068dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80068e4:	e02c      	b.n	8006940 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2200      	movs	r2, #0
 80068ee:	2180      	movs	r1, #128	; 0x80
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 fe98 	bl	8007626 <UART_WaitOnFlagUntilTimeout>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e039      	b.n	8006974 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10b      	bne.n	800691e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006914:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	3302      	adds	r3, #2
 800691a:	61bb      	str	r3, [r7, #24]
 800691c:	e007      	b.n	800692e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	781a      	ldrb	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	3301      	adds	r3, #1
 800692c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006946:	b29b      	uxth	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1cc      	bne.n	80068e6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2200      	movs	r2, #0
 8006954:	2140      	movs	r1, #64	; 0x40
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 fe65 	bl	8007626 <UART_WaitOnFlagUntilTimeout>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e006      	b.n	8006974 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	e000      	b.n	8006974 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006972:	2302      	movs	r3, #2
  }
}
 8006974:	4618      	mov	r0, r3
 8006976:	3720      	adds	r7, #32
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800697c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006980:	b092      	sub	sp, #72	; 0x48
 8006982:	af00      	add	r7, sp, #0
 8006984:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	431a      	orrs	r2, r3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	431a      	orrs	r2, r3
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	4bbe      	ldr	r3, [pc, #760]	; (8006ca4 <UART_SetConfig+0x328>)
 80069ac:	4013      	ands	r3, r2
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	6812      	ldr	r2, [r2, #0]
 80069b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069b4:	430b      	orrs	r3, r1
 80069b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4ab3      	ldr	r2, [pc, #716]	; (8006ca8 <UART_SetConfig+0x32c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d004      	beq.n	80069e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069e4:	4313      	orrs	r3, r2
 80069e6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	4baf      	ldr	r3, [pc, #700]	; (8006cac <UART_SetConfig+0x330>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a02:	f023 010f 	bic.w	r1, r3, #15
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4aa6      	ldr	r2, [pc, #664]	; (8006cb0 <UART_SetConfig+0x334>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d177      	bne.n	8006b0c <UART_SetConfig+0x190>
 8006a1c:	4ba5      	ldr	r3, [pc, #660]	; (8006cb4 <UART_SetConfig+0x338>)
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a24:	2b28      	cmp	r3, #40	; 0x28
 8006a26:	d86d      	bhi.n	8006b04 <UART_SetConfig+0x188>
 8006a28:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <UART_SetConfig+0xb4>)
 8006a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006ad5 	.word	0x08006ad5
 8006a34:	08006b05 	.word	0x08006b05
 8006a38:	08006b05 	.word	0x08006b05
 8006a3c:	08006b05 	.word	0x08006b05
 8006a40:	08006b05 	.word	0x08006b05
 8006a44:	08006b05 	.word	0x08006b05
 8006a48:	08006b05 	.word	0x08006b05
 8006a4c:	08006b05 	.word	0x08006b05
 8006a50:	08006add 	.word	0x08006add
 8006a54:	08006b05 	.word	0x08006b05
 8006a58:	08006b05 	.word	0x08006b05
 8006a5c:	08006b05 	.word	0x08006b05
 8006a60:	08006b05 	.word	0x08006b05
 8006a64:	08006b05 	.word	0x08006b05
 8006a68:	08006b05 	.word	0x08006b05
 8006a6c:	08006b05 	.word	0x08006b05
 8006a70:	08006ae5 	.word	0x08006ae5
 8006a74:	08006b05 	.word	0x08006b05
 8006a78:	08006b05 	.word	0x08006b05
 8006a7c:	08006b05 	.word	0x08006b05
 8006a80:	08006b05 	.word	0x08006b05
 8006a84:	08006b05 	.word	0x08006b05
 8006a88:	08006b05 	.word	0x08006b05
 8006a8c:	08006b05 	.word	0x08006b05
 8006a90:	08006aed 	.word	0x08006aed
 8006a94:	08006b05 	.word	0x08006b05
 8006a98:	08006b05 	.word	0x08006b05
 8006a9c:	08006b05 	.word	0x08006b05
 8006aa0:	08006b05 	.word	0x08006b05
 8006aa4:	08006b05 	.word	0x08006b05
 8006aa8:	08006b05 	.word	0x08006b05
 8006aac:	08006b05 	.word	0x08006b05
 8006ab0:	08006af5 	.word	0x08006af5
 8006ab4:	08006b05 	.word	0x08006b05
 8006ab8:	08006b05 	.word	0x08006b05
 8006abc:	08006b05 	.word	0x08006b05
 8006ac0:	08006b05 	.word	0x08006b05
 8006ac4:	08006b05 	.word	0x08006b05
 8006ac8:	08006b05 	.word	0x08006b05
 8006acc:	08006b05 	.word	0x08006b05
 8006ad0:	08006afd 	.word	0x08006afd
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ada:	e222      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006adc:	2304      	movs	r3, #4
 8006ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ae2:	e21e      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aea:	e21a      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006aec:	2310      	movs	r3, #16
 8006aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af2:	e216      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006af4:	2320      	movs	r3, #32
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afa:	e212      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006afc:	2340      	movs	r3, #64	; 0x40
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b02:	e20e      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006b04:	2380      	movs	r3, #128	; 0x80
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0a:	e20a      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a69      	ldr	r2, [pc, #420]	; (8006cb8 <UART_SetConfig+0x33c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d130      	bne.n	8006b78 <UART_SetConfig+0x1fc>
 8006b16:	4b67      	ldr	r3, [pc, #412]	; (8006cb4 <UART_SetConfig+0x338>)
 8006b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	2b05      	cmp	r3, #5
 8006b20:	d826      	bhi.n	8006b70 <UART_SetConfig+0x1f4>
 8006b22:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <UART_SetConfig+0x1ac>)
 8006b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b28:	08006b41 	.word	0x08006b41
 8006b2c:	08006b49 	.word	0x08006b49
 8006b30:	08006b51 	.word	0x08006b51
 8006b34:	08006b59 	.word	0x08006b59
 8006b38:	08006b61 	.word	0x08006b61
 8006b3c:	08006b69 	.word	0x08006b69
 8006b40:	2300      	movs	r3, #0
 8006b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b46:	e1ec      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006b48:	2304      	movs	r3, #4
 8006b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b4e:	e1e8      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006b50:	2308      	movs	r3, #8
 8006b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b56:	e1e4      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006b58:	2310      	movs	r3, #16
 8006b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b5e:	e1e0      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006b60:	2320      	movs	r3, #32
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b66:	e1dc      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006b68:	2340      	movs	r3, #64	; 0x40
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6e:	e1d8      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006b70:	2380      	movs	r3, #128	; 0x80
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b76:	e1d4      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a4f      	ldr	r2, [pc, #316]	; (8006cbc <UART_SetConfig+0x340>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d130      	bne.n	8006be4 <UART_SetConfig+0x268>
 8006b82:	4b4c      	ldr	r3, [pc, #304]	; (8006cb4 <UART_SetConfig+0x338>)
 8006b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	2b05      	cmp	r3, #5
 8006b8c:	d826      	bhi.n	8006bdc <UART_SetConfig+0x260>
 8006b8e:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <UART_SetConfig+0x218>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006bad 	.word	0x08006bad
 8006b98:	08006bb5 	.word	0x08006bb5
 8006b9c:	08006bbd 	.word	0x08006bbd
 8006ba0:	08006bc5 	.word	0x08006bc5
 8006ba4:	08006bcd 	.word	0x08006bcd
 8006ba8:	08006bd5 	.word	0x08006bd5
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bb2:	e1b6      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bba:	e1b2      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006bbc:	2308      	movs	r3, #8
 8006bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bc2:	e1ae      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bca:	e1aa      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006bcc:	2320      	movs	r3, #32
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bd2:	e1a6      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006bd4:	2340      	movs	r3, #64	; 0x40
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bda:	e1a2      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006bdc:	2380      	movs	r3, #128	; 0x80
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be2:	e19e      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a35      	ldr	r2, [pc, #212]	; (8006cc0 <UART_SetConfig+0x344>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d130      	bne.n	8006c50 <UART_SetConfig+0x2d4>
 8006bee:	4b31      	ldr	r3, [pc, #196]	; (8006cb4 <UART_SetConfig+0x338>)
 8006bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	2b05      	cmp	r3, #5
 8006bf8:	d826      	bhi.n	8006c48 <UART_SetConfig+0x2cc>
 8006bfa:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <UART_SetConfig+0x284>)
 8006bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c00:	08006c19 	.word	0x08006c19
 8006c04:	08006c21 	.word	0x08006c21
 8006c08:	08006c29 	.word	0x08006c29
 8006c0c:	08006c31 	.word	0x08006c31
 8006c10:	08006c39 	.word	0x08006c39
 8006c14:	08006c41 	.word	0x08006c41
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1e:	e180      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006c20:	2304      	movs	r3, #4
 8006c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c26:	e17c      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006c28:	2308      	movs	r3, #8
 8006c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c2e:	e178      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006c30:	2310      	movs	r3, #16
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c36:	e174      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006c38:	2320      	movs	r3, #32
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c3e:	e170      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006c40:	2340      	movs	r3, #64	; 0x40
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c46:	e16c      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006c48:	2380      	movs	r3, #128	; 0x80
 8006c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c4e:	e168      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a1b      	ldr	r2, [pc, #108]	; (8006cc4 <UART_SetConfig+0x348>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d142      	bne.n	8006ce0 <UART_SetConfig+0x364>
 8006c5a:	4b16      	ldr	r3, [pc, #88]	; (8006cb4 <UART_SetConfig+0x338>)
 8006c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	2b05      	cmp	r3, #5
 8006c64:	d838      	bhi.n	8006cd8 <UART_SetConfig+0x35c>
 8006c66:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <UART_SetConfig+0x2f0>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006c85 	.word	0x08006c85
 8006c70:	08006c8d 	.word	0x08006c8d
 8006c74:	08006c95 	.word	0x08006c95
 8006c78:	08006c9d 	.word	0x08006c9d
 8006c7c:	08006cc9 	.word	0x08006cc9
 8006c80:	08006cd1 	.word	0x08006cd1
 8006c84:	2300      	movs	r3, #0
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8a:	e14a      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c92:	e146      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006c94:	2308      	movs	r3, #8
 8006c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c9a:	e142      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006c9c:	2310      	movs	r3, #16
 8006c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ca2:	e13e      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006ca4:	cfff69f3 	.word	0xcfff69f3
 8006ca8:	58000c00 	.word	0x58000c00
 8006cac:	11fff4ff 	.word	0x11fff4ff
 8006cb0:	40011000 	.word	0x40011000
 8006cb4:	58024400 	.word	0x58024400
 8006cb8:	40004400 	.word	0x40004400
 8006cbc:	40004800 	.word	0x40004800
 8006cc0:	40004c00 	.word	0x40004c00
 8006cc4:	40005000 	.word	0x40005000
 8006cc8:	2320      	movs	r3, #32
 8006cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cce:	e128      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006cd0:	2340      	movs	r3, #64	; 0x40
 8006cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cd6:	e124      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006cd8:	2380      	movs	r3, #128	; 0x80
 8006cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cde:	e120      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4acb      	ldr	r2, [pc, #812]	; (8007014 <UART_SetConfig+0x698>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d176      	bne.n	8006dd8 <UART_SetConfig+0x45c>
 8006cea:	4bcb      	ldr	r3, [pc, #812]	; (8007018 <UART_SetConfig+0x69c>)
 8006cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cf2:	2b28      	cmp	r3, #40	; 0x28
 8006cf4:	d86c      	bhi.n	8006dd0 <UART_SetConfig+0x454>
 8006cf6:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <UART_SetConfig+0x380>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006da1 	.word	0x08006da1
 8006d00:	08006dd1 	.word	0x08006dd1
 8006d04:	08006dd1 	.word	0x08006dd1
 8006d08:	08006dd1 	.word	0x08006dd1
 8006d0c:	08006dd1 	.word	0x08006dd1
 8006d10:	08006dd1 	.word	0x08006dd1
 8006d14:	08006dd1 	.word	0x08006dd1
 8006d18:	08006dd1 	.word	0x08006dd1
 8006d1c:	08006da9 	.word	0x08006da9
 8006d20:	08006dd1 	.word	0x08006dd1
 8006d24:	08006dd1 	.word	0x08006dd1
 8006d28:	08006dd1 	.word	0x08006dd1
 8006d2c:	08006dd1 	.word	0x08006dd1
 8006d30:	08006dd1 	.word	0x08006dd1
 8006d34:	08006dd1 	.word	0x08006dd1
 8006d38:	08006dd1 	.word	0x08006dd1
 8006d3c:	08006db1 	.word	0x08006db1
 8006d40:	08006dd1 	.word	0x08006dd1
 8006d44:	08006dd1 	.word	0x08006dd1
 8006d48:	08006dd1 	.word	0x08006dd1
 8006d4c:	08006dd1 	.word	0x08006dd1
 8006d50:	08006dd1 	.word	0x08006dd1
 8006d54:	08006dd1 	.word	0x08006dd1
 8006d58:	08006dd1 	.word	0x08006dd1
 8006d5c:	08006db9 	.word	0x08006db9
 8006d60:	08006dd1 	.word	0x08006dd1
 8006d64:	08006dd1 	.word	0x08006dd1
 8006d68:	08006dd1 	.word	0x08006dd1
 8006d6c:	08006dd1 	.word	0x08006dd1
 8006d70:	08006dd1 	.word	0x08006dd1
 8006d74:	08006dd1 	.word	0x08006dd1
 8006d78:	08006dd1 	.word	0x08006dd1
 8006d7c:	08006dc1 	.word	0x08006dc1
 8006d80:	08006dd1 	.word	0x08006dd1
 8006d84:	08006dd1 	.word	0x08006dd1
 8006d88:	08006dd1 	.word	0x08006dd1
 8006d8c:	08006dd1 	.word	0x08006dd1
 8006d90:	08006dd1 	.word	0x08006dd1
 8006d94:	08006dd1 	.word	0x08006dd1
 8006d98:	08006dd1 	.word	0x08006dd1
 8006d9c:	08006dc9 	.word	0x08006dc9
 8006da0:	2301      	movs	r3, #1
 8006da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006da6:	e0bc      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006da8:	2304      	movs	r3, #4
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dae:	e0b8      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006db0:	2308      	movs	r3, #8
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db6:	e0b4      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006db8:	2310      	movs	r3, #16
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dbe:	e0b0      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006dc0:	2320      	movs	r3, #32
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc6:	e0ac      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006dc8:	2340      	movs	r3, #64	; 0x40
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dce:	e0a8      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006dd0:	2380      	movs	r3, #128	; 0x80
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd6:	e0a4      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a8f      	ldr	r2, [pc, #572]	; (800701c <UART_SetConfig+0x6a0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d130      	bne.n	8006e44 <UART_SetConfig+0x4c8>
 8006de2:	4b8d      	ldr	r3, [pc, #564]	; (8007018 <UART_SetConfig+0x69c>)
 8006de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	2b05      	cmp	r3, #5
 8006dec:	d826      	bhi.n	8006e3c <UART_SetConfig+0x4c0>
 8006dee:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <UART_SetConfig+0x478>)
 8006df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df4:	08006e0d 	.word	0x08006e0d
 8006df8:	08006e15 	.word	0x08006e15
 8006dfc:	08006e1d 	.word	0x08006e1d
 8006e00:	08006e25 	.word	0x08006e25
 8006e04:	08006e2d 	.word	0x08006e2d
 8006e08:	08006e35 	.word	0x08006e35
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e12:	e086      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006e14:	2304      	movs	r3, #4
 8006e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1a:	e082      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e22:	e07e      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006e24:	2310      	movs	r3, #16
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2a:	e07a      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006e2c:	2320      	movs	r3, #32
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e32:	e076      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006e34:	2340      	movs	r3, #64	; 0x40
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3a:	e072      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006e3c:	2380      	movs	r3, #128	; 0x80
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e42:	e06e      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a75      	ldr	r2, [pc, #468]	; (8007020 <UART_SetConfig+0x6a4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d130      	bne.n	8006eb0 <UART_SetConfig+0x534>
 8006e4e:	4b72      	ldr	r3, [pc, #456]	; (8007018 <UART_SetConfig+0x69c>)
 8006e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	2b05      	cmp	r3, #5
 8006e58:	d826      	bhi.n	8006ea8 <UART_SetConfig+0x52c>
 8006e5a:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <UART_SetConfig+0x4e4>)
 8006e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e60:	08006e79 	.word	0x08006e79
 8006e64:	08006e81 	.word	0x08006e81
 8006e68:	08006e89 	.word	0x08006e89
 8006e6c:	08006e91 	.word	0x08006e91
 8006e70:	08006e99 	.word	0x08006e99
 8006e74:	08006ea1 	.word	0x08006ea1
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7e:	e050      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006e80:	2304      	movs	r3, #4
 8006e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e86:	e04c      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006e88:	2308      	movs	r3, #8
 8006e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8e:	e048      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006e90:	2310      	movs	r3, #16
 8006e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e96:	e044      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006e98:	2320      	movs	r3, #32
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e9e:	e040      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006ea0:	2340      	movs	r3, #64	; 0x40
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea6:	e03c      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006ea8:	2380      	movs	r3, #128	; 0x80
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eae:	e038      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a5b      	ldr	r2, [pc, #364]	; (8007024 <UART_SetConfig+0x6a8>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d130      	bne.n	8006f1c <UART_SetConfig+0x5a0>
 8006eba:	4b57      	ldr	r3, [pc, #348]	; (8007018 <UART_SetConfig+0x69c>)
 8006ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ebe:	f003 0307 	and.w	r3, r3, #7
 8006ec2:	2b05      	cmp	r3, #5
 8006ec4:	d826      	bhi.n	8006f14 <UART_SetConfig+0x598>
 8006ec6:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <UART_SetConfig+0x550>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006ee5 	.word	0x08006ee5
 8006ed0:	08006eed 	.word	0x08006eed
 8006ed4:	08006ef5 	.word	0x08006ef5
 8006ed8:	08006efd 	.word	0x08006efd
 8006edc:	08006f05 	.word	0x08006f05
 8006ee0:	08006f0d 	.word	0x08006f0d
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eea:	e01a      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006eec:	2304      	movs	r3, #4
 8006eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef2:	e016      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006ef4:	2308      	movs	r3, #8
 8006ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efa:	e012      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006efc:	2310      	movs	r3, #16
 8006efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f02:	e00e      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006f04:	2320      	movs	r3, #32
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f0a:	e00a      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006f0c:	2340      	movs	r3, #64	; 0x40
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f12:	e006      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006f14:	2380      	movs	r3, #128	; 0x80
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1a:	e002      	b.n	8006f22 <UART_SetConfig+0x5a6>
 8006f1c:	2380      	movs	r3, #128	; 0x80
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a3f      	ldr	r2, [pc, #252]	; (8007024 <UART_SetConfig+0x6a8>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	f040 80f8 	bne.w	800711e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	dc46      	bgt.n	8006fc4 <UART_SetConfig+0x648>
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	f2c0 8082 	blt.w	8007040 <UART_SetConfig+0x6c4>
 8006f3c:	3b02      	subs	r3, #2
 8006f3e:	2b1e      	cmp	r3, #30
 8006f40:	d87e      	bhi.n	8007040 <UART_SetConfig+0x6c4>
 8006f42:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <UART_SetConfig+0x5cc>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006fcb 	.word	0x08006fcb
 8006f4c:	08007041 	.word	0x08007041
 8006f50:	08006fd3 	.word	0x08006fd3
 8006f54:	08007041 	.word	0x08007041
 8006f58:	08007041 	.word	0x08007041
 8006f5c:	08007041 	.word	0x08007041
 8006f60:	08006fe3 	.word	0x08006fe3
 8006f64:	08007041 	.word	0x08007041
 8006f68:	08007041 	.word	0x08007041
 8006f6c:	08007041 	.word	0x08007041
 8006f70:	08007041 	.word	0x08007041
 8006f74:	08007041 	.word	0x08007041
 8006f78:	08007041 	.word	0x08007041
 8006f7c:	08007041 	.word	0x08007041
 8006f80:	08006ff3 	.word	0x08006ff3
 8006f84:	08007041 	.word	0x08007041
 8006f88:	08007041 	.word	0x08007041
 8006f8c:	08007041 	.word	0x08007041
 8006f90:	08007041 	.word	0x08007041
 8006f94:	08007041 	.word	0x08007041
 8006f98:	08007041 	.word	0x08007041
 8006f9c:	08007041 	.word	0x08007041
 8006fa0:	08007041 	.word	0x08007041
 8006fa4:	08007041 	.word	0x08007041
 8006fa8:	08007041 	.word	0x08007041
 8006fac:	08007041 	.word	0x08007041
 8006fb0:	08007041 	.word	0x08007041
 8006fb4:	08007041 	.word	0x08007041
 8006fb8:	08007041 	.word	0x08007041
 8006fbc:	08007041 	.word	0x08007041
 8006fc0:	08007033 	.word	0x08007033
 8006fc4:	2b40      	cmp	r3, #64	; 0x40
 8006fc6:	d037      	beq.n	8007038 <UART_SetConfig+0x6bc>
 8006fc8:	e03a      	b.n	8007040 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006fca:	f7fe fe7d 	bl	8005cc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006fce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fd0:	e03c      	b.n	800704c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fe8c 	bl	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fe0:	e034      	b.n	800704c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fe2:	f107 0318 	add.w	r3, r7, #24
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe ffd8 	bl	8005f9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ff0:	e02c      	b.n	800704c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ff2:	4b09      	ldr	r3, [pc, #36]	; (8007018 <UART_SetConfig+0x69c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d016      	beq.n	800702c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ffe:	4b06      	ldr	r3, [pc, #24]	; (8007018 <UART_SetConfig+0x69c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	08db      	lsrs	r3, r3, #3
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	4a07      	ldr	r2, [pc, #28]	; (8007028 <UART_SetConfig+0x6ac>)
 800700a:	fa22 f303 	lsr.w	r3, r2, r3
 800700e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007010:	e01c      	b.n	800704c <UART_SetConfig+0x6d0>
 8007012:	bf00      	nop
 8007014:	40011400 	.word	0x40011400
 8007018:	58024400 	.word	0x58024400
 800701c:	40007800 	.word	0x40007800
 8007020:	40007c00 	.word	0x40007c00
 8007024:	58000c00 	.word	0x58000c00
 8007028:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800702c:	4b9d      	ldr	r3, [pc, #628]	; (80072a4 <UART_SetConfig+0x928>)
 800702e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007030:	e00c      	b.n	800704c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007032:	4b9d      	ldr	r3, [pc, #628]	; (80072a8 <UART_SetConfig+0x92c>)
 8007034:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007036:	e009      	b.n	800704c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800703e:	e005      	b.n	800704c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800704a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800704c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 81de 	beq.w	8007410 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	4a94      	ldr	r2, [pc, #592]	; (80072ac <UART_SetConfig+0x930>)
 800705a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800705e:	461a      	mov	r2, r3
 8007060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007062:	fbb3 f3f2 	udiv	r3, r3, r2
 8007066:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	4413      	add	r3, r2
 8007072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007074:	429a      	cmp	r2, r3
 8007076:	d305      	bcc.n	8007084 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800707e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007080:	429a      	cmp	r2, r3
 8007082:	d903      	bls.n	800708c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800708a:	e1c1      	b.n	8007410 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800708c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708e:	2200      	movs	r2, #0
 8007090:	60bb      	str	r3, [r7, #8]
 8007092:	60fa      	str	r2, [r7, #12]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	4a84      	ldr	r2, [pc, #528]	; (80072ac <UART_SetConfig+0x930>)
 800709a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	2200      	movs	r2, #0
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	607a      	str	r2, [r7, #4]
 80070a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070ae:	f7f9 fb2b 	bl	8000708 <__aeabi_uldivmod>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4610      	mov	r0, r2
 80070b8:	4619      	mov	r1, r3
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	020b      	lsls	r3, r1, #8
 80070c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070c8:	0202      	lsls	r2, r0, #8
 80070ca:	6979      	ldr	r1, [r7, #20]
 80070cc:	6849      	ldr	r1, [r1, #4]
 80070ce:	0849      	lsrs	r1, r1, #1
 80070d0:	2000      	movs	r0, #0
 80070d2:	460c      	mov	r4, r1
 80070d4:	4605      	mov	r5, r0
 80070d6:	eb12 0804 	adds.w	r8, r2, r4
 80070da:	eb43 0905 	adc.w	r9, r3, r5
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	469a      	mov	sl, r3
 80070e6:	4693      	mov	fp, r2
 80070e8:	4652      	mov	r2, sl
 80070ea:	465b      	mov	r3, fp
 80070ec:	4640      	mov	r0, r8
 80070ee:	4649      	mov	r1, r9
 80070f0:	f7f9 fb0a 	bl	8000708 <__aeabi_uldivmod>
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	4613      	mov	r3, r2
 80070fa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007102:	d308      	bcc.n	8007116 <UART_SetConfig+0x79a>
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800710a:	d204      	bcs.n	8007116 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007112:	60da      	str	r2, [r3, #12]
 8007114:	e17c      	b.n	8007410 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800711c:	e178      	b.n	8007410 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007126:	f040 80c5 	bne.w	80072b4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800712a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800712e:	2b20      	cmp	r3, #32
 8007130:	dc48      	bgt.n	80071c4 <UART_SetConfig+0x848>
 8007132:	2b00      	cmp	r3, #0
 8007134:	db7b      	blt.n	800722e <UART_SetConfig+0x8b2>
 8007136:	2b20      	cmp	r3, #32
 8007138:	d879      	bhi.n	800722e <UART_SetConfig+0x8b2>
 800713a:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <UART_SetConfig+0x7c4>)
 800713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007140:	080071cb 	.word	0x080071cb
 8007144:	080071d3 	.word	0x080071d3
 8007148:	0800722f 	.word	0x0800722f
 800714c:	0800722f 	.word	0x0800722f
 8007150:	080071db 	.word	0x080071db
 8007154:	0800722f 	.word	0x0800722f
 8007158:	0800722f 	.word	0x0800722f
 800715c:	0800722f 	.word	0x0800722f
 8007160:	080071eb 	.word	0x080071eb
 8007164:	0800722f 	.word	0x0800722f
 8007168:	0800722f 	.word	0x0800722f
 800716c:	0800722f 	.word	0x0800722f
 8007170:	0800722f 	.word	0x0800722f
 8007174:	0800722f 	.word	0x0800722f
 8007178:	0800722f 	.word	0x0800722f
 800717c:	0800722f 	.word	0x0800722f
 8007180:	080071fb 	.word	0x080071fb
 8007184:	0800722f 	.word	0x0800722f
 8007188:	0800722f 	.word	0x0800722f
 800718c:	0800722f 	.word	0x0800722f
 8007190:	0800722f 	.word	0x0800722f
 8007194:	0800722f 	.word	0x0800722f
 8007198:	0800722f 	.word	0x0800722f
 800719c:	0800722f 	.word	0x0800722f
 80071a0:	0800722f 	.word	0x0800722f
 80071a4:	0800722f 	.word	0x0800722f
 80071a8:	0800722f 	.word	0x0800722f
 80071ac:	0800722f 	.word	0x0800722f
 80071b0:	0800722f 	.word	0x0800722f
 80071b4:	0800722f 	.word	0x0800722f
 80071b8:	0800722f 	.word	0x0800722f
 80071bc:	0800722f 	.word	0x0800722f
 80071c0:	08007221 	.word	0x08007221
 80071c4:	2b40      	cmp	r3, #64	; 0x40
 80071c6:	d02e      	beq.n	8007226 <UART_SetConfig+0x8aa>
 80071c8:	e031      	b.n	800722e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ca:	f7fd f939 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 80071ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071d0:	e033      	b.n	800723a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071d2:	f7fd f94b 	bl	800446c <HAL_RCC_GetPCLK2Freq>
 80071d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071d8:	e02f      	b.n	800723a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fd88 	bl	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e8:	e027      	b.n	800723a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071ea:	f107 0318 	add.w	r3, r7, #24
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fe fed4 	bl	8005f9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071f8:	e01f      	b.n	800723a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071fa:	4b2d      	ldr	r3, [pc, #180]	; (80072b0 <UART_SetConfig+0x934>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d009      	beq.n	800721a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007206:	4b2a      	ldr	r3, [pc, #168]	; (80072b0 <UART_SetConfig+0x934>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	08db      	lsrs	r3, r3, #3
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	4a24      	ldr	r2, [pc, #144]	; (80072a4 <UART_SetConfig+0x928>)
 8007212:	fa22 f303 	lsr.w	r3, r2, r3
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007218:	e00f      	b.n	800723a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800721a:	4b22      	ldr	r3, [pc, #136]	; (80072a4 <UART_SetConfig+0x928>)
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800721e:	e00c      	b.n	800723a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007220:	4b21      	ldr	r3, [pc, #132]	; (80072a8 <UART_SetConfig+0x92c>)
 8007222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007224:	e009      	b.n	800723a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800722a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800722c:	e005      	b.n	800723a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007238:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800723a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80e7 	beq.w	8007410 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	4a19      	ldr	r2, [pc, #100]	; (80072ac <UART_SetConfig+0x930>)
 8007248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800724c:	461a      	mov	r2, r3
 800724e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007250:	fbb3 f3f2 	udiv	r3, r3, r2
 8007254:	005a      	lsls	r2, r3, #1
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	085b      	lsrs	r3, r3, #1
 800725c:	441a      	add	r2, r3
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	fbb2 f3f3 	udiv	r3, r2, r3
 8007266:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	2b0f      	cmp	r3, #15
 800726c:	d916      	bls.n	800729c <UART_SetConfig+0x920>
 800726e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007274:	d212      	bcs.n	800729c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007278:	b29b      	uxth	r3, r3
 800727a:	f023 030f 	bic.w	r3, r3, #15
 800727e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	085b      	lsrs	r3, r3, #1
 8007284:	b29b      	uxth	r3, r3
 8007286:	f003 0307 	and.w	r3, r3, #7
 800728a:	b29a      	uxth	r2, r3
 800728c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800728e:	4313      	orrs	r3, r2
 8007290:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007298:	60da      	str	r2, [r3, #12]
 800729a:	e0b9      	b.n	8007410 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80072a2:	e0b5      	b.n	8007410 <UART_SetConfig+0xa94>
 80072a4:	03d09000 	.word	0x03d09000
 80072a8:	003d0900 	.word	0x003d0900
 80072ac:	0800c12c 	.word	0x0800c12c
 80072b0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80072b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072b8:	2b20      	cmp	r3, #32
 80072ba:	dc49      	bgt.n	8007350 <UART_SetConfig+0x9d4>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	db7c      	blt.n	80073ba <UART_SetConfig+0xa3e>
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	d87a      	bhi.n	80073ba <UART_SetConfig+0xa3e>
 80072c4:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <UART_SetConfig+0x950>)
 80072c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ca:	bf00      	nop
 80072cc:	08007357 	.word	0x08007357
 80072d0:	0800735f 	.word	0x0800735f
 80072d4:	080073bb 	.word	0x080073bb
 80072d8:	080073bb 	.word	0x080073bb
 80072dc:	08007367 	.word	0x08007367
 80072e0:	080073bb 	.word	0x080073bb
 80072e4:	080073bb 	.word	0x080073bb
 80072e8:	080073bb 	.word	0x080073bb
 80072ec:	08007377 	.word	0x08007377
 80072f0:	080073bb 	.word	0x080073bb
 80072f4:	080073bb 	.word	0x080073bb
 80072f8:	080073bb 	.word	0x080073bb
 80072fc:	080073bb 	.word	0x080073bb
 8007300:	080073bb 	.word	0x080073bb
 8007304:	080073bb 	.word	0x080073bb
 8007308:	080073bb 	.word	0x080073bb
 800730c:	08007387 	.word	0x08007387
 8007310:	080073bb 	.word	0x080073bb
 8007314:	080073bb 	.word	0x080073bb
 8007318:	080073bb 	.word	0x080073bb
 800731c:	080073bb 	.word	0x080073bb
 8007320:	080073bb 	.word	0x080073bb
 8007324:	080073bb 	.word	0x080073bb
 8007328:	080073bb 	.word	0x080073bb
 800732c:	080073bb 	.word	0x080073bb
 8007330:	080073bb 	.word	0x080073bb
 8007334:	080073bb 	.word	0x080073bb
 8007338:	080073bb 	.word	0x080073bb
 800733c:	080073bb 	.word	0x080073bb
 8007340:	080073bb 	.word	0x080073bb
 8007344:	080073bb 	.word	0x080073bb
 8007348:	080073bb 	.word	0x080073bb
 800734c:	080073ad 	.word	0x080073ad
 8007350:	2b40      	cmp	r3, #64	; 0x40
 8007352:	d02e      	beq.n	80073b2 <UART_SetConfig+0xa36>
 8007354:	e031      	b.n	80073ba <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007356:	f7fd f873 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 800735a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800735c:	e033      	b.n	80073c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800735e:	f7fd f885 	bl	800446c <HAL_RCC_GetPCLK2Freq>
 8007362:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007364:	e02f      	b.n	80073c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe fcc2 	bl	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007374:	e027      	b.n	80073c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007376:	f107 0318 	add.w	r3, r7, #24
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe fe0e 	bl	8005f9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007384:	e01f      	b.n	80073c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007386:	4b2d      	ldr	r3, [pc, #180]	; (800743c <UART_SetConfig+0xac0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007392:	4b2a      	ldr	r3, [pc, #168]	; (800743c <UART_SetConfig+0xac0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	08db      	lsrs	r3, r3, #3
 8007398:	f003 0303 	and.w	r3, r3, #3
 800739c:	4a28      	ldr	r2, [pc, #160]	; (8007440 <UART_SetConfig+0xac4>)
 800739e:	fa22 f303 	lsr.w	r3, r2, r3
 80073a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073a4:	e00f      	b.n	80073c6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80073a6:	4b26      	ldr	r3, [pc, #152]	; (8007440 <UART_SetConfig+0xac4>)
 80073a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073aa:	e00c      	b.n	80073c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073ac:	4b25      	ldr	r3, [pc, #148]	; (8007444 <UART_SetConfig+0xac8>)
 80073ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073b0:	e009      	b.n	80073c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073b8:	e005      	b.n	80073c6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80073c4:	bf00      	nop
    }

    if (pclk != 0U)
 80073c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d021      	beq.n	8007410 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	4a1d      	ldr	r2, [pc, #116]	; (8007448 <UART_SetConfig+0xacc>)
 80073d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073d6:	461a      	mov	r2, r3
 80073d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073da:	fbb3 f2f2 	udiv	r2, r3, r2
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	441a      	add	r2, r3
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	2b0f      	cmp	r3, #15
 80073f4:	d909      	bls.n	800740a <UART_SetConfig+0xa8e>
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073fc:	d205      	bcs.n	800740a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	b29a      	uxth	r2, r3
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	60da      	str	r2, [r3, #12]
 8007408:	e002      	b.n	8007410 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2201      	movs	r2, #1
 8007414:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2201      	movs	r2, #1
 800741c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	2200      	movs	r2, #0
 8007424:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2200      	movs	r2, #0
 800742a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800742c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007430:	4618      	mov	r0, r3
 8007432:	3748      	adds	r7, #72	; 0x48
 8007434:	46bd      	mov	sp, r7
 8007436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800743a:	bf00      	nop
 800743c:	58024400 	.word	0x58024400
 8007440:	03d09000 	.word	0x03d09000
 8007444:	003d0900 	.word	0x003d0900
 8007448:	0800c12c 	.word	0x0800c12c

0800744c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074be:	f003 0308 	and.w	r3, r3, #8
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	f003 0310 	and.w	r3, r3, #16
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007528:	2b00      	cmp	r3, #0
 800752a:	d01a      	beq.n	8007562 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800754a:	d10a      	bne.n	8007562 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00a      	beq.n	8007584 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	605a      	str	r2, [r3, #4]
  }
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af02      	add	r7, sp, #8
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075a0:	f7f9 ffb4 	bl	800150c <HAL_GetTick>
 80075a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0308 	and.w	r3, r3, #8
 80075b0:	2b08      	cmp	r3, #8
 80075b2:	d10e      	bne.n	80075d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f82f 	bl	8007626 <UART_WaitOnFlagUntilTimeout>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e025      	b.n	800761e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d10e      	bne.n	80075fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f819 	bl	8007626 <UART_WaitOnFlagUntilTimeout>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e00f      	b.n	800761e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2220      	movs	r2, #32
 800760a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b09c      	sub	sp, #112	; 0x70
 800762a:	af00      	add	r7, sp, #0
 800762c:	60f8      	str	r0, [r7, #12]
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	603b      	str	r3, [r7, #0]
 8007632:	4613      	mov	r3, r2
 8007634:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007636:	e0a9      	b.n	800778c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800763a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763e:	f000 80a5 	beq.w	800778c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007642:	f7f9 ff63 	bl	800150c <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800764e:	429a      	cmp	r2, r3
 8007650:	d302      	bcc.n	8007658 <UART_WaitOnFlagUntilTimeout+0x32>
 8007652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007654:	2b00      	cmp	r3, #0
 8007656:	d140      	bne.n	80076da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007668:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800766c:	667b      	str	r3, [r7, #100]	; 0x64
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007676:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007678:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800767c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e6      	bne.n	8007658 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3308      	adds	r3, #8
 8007690:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007694:	e853 3f00 	ldrex	r3, [r3]
 8007698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800769a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769c:	f023 0301 	bic.w	r3, r3, #1
 80076a0:	663b      	str	r3, [r7, #96]	; 0x60
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3308      	adds	r3, #8
 80076a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80076ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076b2:	e841 2300 	strex	r3, r2, [r1]
 80076b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1e5      	bne.n	800768a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e069      	b.n	80077ae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d051      	beq.n	800778c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076f6:	d149      	bne.n	800778c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007700:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	e853 3f00 	ldrex	r3, [r3]
 800770e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007716:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007720:	637b      	str	r3, [r7, #52]	; 0x34
 8007722:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007724:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007728:	e841 2300 	strex	r3, r2, [r1]
 800772c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800772e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e6      	bne.n	8007702 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3308      	adds	r3, #8
 800773a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	e853 3f00 	ldrex	r3, [r3]
 8007742:	613b      	str	r3, [r7, #16]
   return(result);
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f023 0301 	bic.w	r3, r3, #1
 800774a:	66bb      	str	r3, [r7, #104]	; 0x68
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3308      	adds	r3, #8
 8007752:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007754:	623a      	str	r2, [r7, #32]
 8007756:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007758:	69f9      	ldr	r1, [r7, #28]
 800775a:	6a3a      	ldr	r2, [r7, #32]
 800775c:	e841 2300 	strex	r3, r2, [r1]
 8007760:	61bb      	str	r3, [r7, #24]
   return(result);
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e5      	bne.n	8007734 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2220      	movs	r2, #32
 800776c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2220      	movs	r2, #32
 8007774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2220      	movs	r2, #32
 800777c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e010      	b.n	80077ae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	69da      	ldr	r2, [r3, #28]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	4013      	ands	r3, r2
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	429a      	cmp	r2, r3
 800779a:	bf0c      	ite	eq
 800779c:	2301      	moveq	r3, #1
 800779e:	2300      	movne	r3, #0
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	461a      	mov	r2, r3
 80077a4:	79fb      	ldrb	r3, [r7, #7]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	f43f af46 	beq.w	8007638 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3770      	adds	r7, #112	; 0x70
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b085      	sub	sp, #20
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d101      	bne.n	80077cc <HAL_UARTEx_DisableFifoMode+0x16>
 80077c8:	2302      	movs	r3, #2
 80077ca:	e027      	b.n	800781c <HAL_UARTEx_DisableFifoMode+0x66>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2224      	movs	r2, #36	; 0x24
 80077d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0201 	bic.w	r2, r2, #1
 80077f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80077fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2220      	movs	r2, #32
 800780e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007838:	2b01      	cmp	r3, #1
 800783a:	d101      	bne.n	8007840 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800783c:	2302      	movs	r3, #2
 800783e:	e02d      	b.n	800789c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2224      	movs	r2, #36	; 0x24
 800784c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0201 	bic.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f84f 	bl	8007920 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2220      	movs	r2, #32
 800788e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d101      	bne.n	80078bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e02d      	b.n	8007918 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2224      	movs	r2, #36	; 0x24
 80078c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0201 	bic.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f811 	bl	8007920 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800792c:	2b00      	cmp	r3, #0
 800792e:	d108      	bne.n	8007942 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007940:	e031      	b.n	80079a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007942:	2310      	movs	r3, #16
 8007944:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007946:	2310      	movs	r3, #16
 8007948:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	0e5b      	lsrs	r3, r3, #25
 8007952:	b2db      	uxtb	r3, r3
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	0f5b      	lsrs	r3, r3, #29
 8007962:	b2db      	uxtb	r3, r3
 8007964:	f003 0307 	and.w	r3, r3, #7
 8007968:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	7b3a      	ldrb	r2, [r7, #12]
 800796e:	4911      	ldr	r1, [pc, #68]	; (80079b4 <UARTEx_SetNbDataToProcess+0x94>)
 8007970:	5c8a      	ldrb	r2, [r1, r2]
 8007972:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007976:	7b3a      	ldrb	r2, [r7, #12]
 8007978:	490f      	ldr	r1, [pc, #60]	; (80079b8 <UARTEx_SetNbDataToProcess+0x98>)
 800797a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800797c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007980:	b29a      	uxth	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	7b7a      	ldrb	r2, [r7, #13]
 800798c:	4909      	ldr	r1, [pc, #36]	; (80079b4 <UARTEx_SetNbDataToProcess+0x94>)
 800798e:	5c8a      	ldrb	r2, [r1, r2]
 8007990:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007994:	7b7a      	ldrb	r2, [r7, #13]
 8007996:	4908      	ldr	r1, [pc, #32]	; (80079b8 <UARTEx_SetNbDataToProcess+0x98>)
 8007998:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800799a:	fb93 f3f2 	sdiv	r3, r3, r2
 800799e:	b29a      	uxth	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80079a6:	bf00      	nop
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	0800c144 	.word	0x0800c144
 80079b8:	0800c14c 	.word	0x0800c14c

080079bc <__errno>:
 80079bc:	4b01      	ldr	r3, [pc, #4]	; (80079c4 <__errno+0x8>)
 80079be:	6818      	ldr	r0, [r3, #0]
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	24000010 	.word	0x24000010

080079c8 <__libc_init_array>:
 80079c8:	b570      	push	{r4, r5, r6, lr}
 80079ca:	4d0d      	ldr	r5, [pc, #52]	; (8007a00 <__libc_init_array+0x38>)
 80079cc:	4c0d      	ldr	r4, [pc, #52]	; (8007a04 <__libc_init_array+0x3c>)
 80079ce:	1b64      	subs	r4, r4, r5
 80079d0:	10a4      	asrs	r4, r4, #2
 80079d2:	2600      	movs	r6, #0
 80079d4:	42a6      	cmp	r6, r4
 80079d6:	d109      	bne.n	80079ec <__libc_init_array+0x24>
 80079d8:	4d0b      	ldr	r5, [pc, #44]	; (8007a08 <__libc_init_array+0x40>)
 80079da:	4c0c      	ldr	r4, [pc, #48]	; (8007a0c <__libc_init_array+0x44>)
 80079dc:	f004 fb88 	bl	800c0f0 <_init>
 80079e0:	1b64      	subs	r4, r4, r5
 80079e2:	10a4      	asrs	r4, r4, #2
 80079e4:	2600      	movs	r6, #0
 80079e6:	42a6      	cmp	r6, r4
 80079e8:	d105      	bne.n	80079f6 <__libc_init_array+0x2e>
 80079ea:	bd70      	pop	{r4, r5, r6, pc}
 80079ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80079f0:	4798      	blx	r3
 80079f2:	3601      	adds	r6, #1
 80079f4:	e7ee      	b.n	80079d4 <__libc_init_array+0xc>
 80079f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079fa:	4798      	blx	r3
 80079fc:	3601      	adds	r6, #1
 80079fe:	e7f2      	b.n	80079e6 <__libc_init_array+0x1e>
 8007a00:	0800c604 	.word	0x0800c604
 8007a04:	0800c604 	.word	0x0800c604
 8007a08:	0800c604 	.word	0x0800c604
 8007a0c:	0800c608 	.word	0x0800c608

08007a10 <memset>:
 8007a10:	4402      	add	r2, r0
 8007a12:	4603      	mov	r3, r0
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d100      	bne.n	8007a1a <memset+0xa>
 8007a18:	4770      	bx	lr
 8007a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a1e:	e7f9      	b.n	8007a14 <memset+0x4>

08007a20 <__cvt>:
 8007a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a22:	ed2d 8b02 	vpush	{d8}
 8007a26:	eeb0 8b40 	vmov.f64	d8, d0
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	4617      	mov	r7, r2
 8007a2e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007a30:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007a32:	ee18 2a90 	vmov	r2, s17
 8007a36:	f025 0520 	bic.w	r5, r5, #32
 8007a3a:	2a00      	cmp	r2, #0
 8007a3c:	bfb6      	itet	lt
 8007a3e:	222d      	movlt	r2, #45	; 0x2d
 8007a40:	2200      	movge	r2, #0
 8007a42:	eeb1 8b40 	vneglt.f64	d8, d0
 8007a46:	2d46      	cmp	r5, #70	; 0x46
 8007a48:	460c      	mov	r4, r1
 8007a4a:	701a      	strb	r2, [r3, #0]
 8007a4c:	d004      	beq.n	8007a58 <__cvt+0x38>
 8007a4e:	2d45      	cmp	r5, #69	; 0x45
 8007a50:	d100      	bne.n	8007a54 <__cvt+0x34>
 8007a52:	3401      	adds	r4, #1
 8007a54:	2102      	movs	r1, #2
 8007a56:	e000      	b.n	8007a5a <__cvt+0x3a>
 8007a58:	2103      	movs	r1, #3
 8007a5a:	ab03      	add	r3, sp, #12
 8007a5c:	9301      	str	r3, [sp, #4]
 8007a5e:	ab02      	add	r3, sp, #8
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	4622      	mov	r2, r4
 8007a64:	4633      	mov	r3, r6
 8007a66:	eeb0 0b48 	vmov.f64	d0, d8
 8007a6a:	f001 fd2d 	bl	80094c8 <_dtoa_r>
 8007a6e:	2d47      	cmp	r5, #71	; 0x47
 8007a70:	d101      	bne.n	8007a76 <__cvt+0x56>
 8007a72:	07fb      	lsls	r3, r7, #31
 8007a74:	d51a      	bpl.n	8007aac <__cvt+0x8c>
 8007a76:	2d46      	cmp	r5, #70	; 0x46
 8007a78:	eb00 0204 	add.w	r2, r0, r4
 8007a7c:	d10c      	bne.n	8007a98 <__cvt+0x78>
 8007a7e:	7803      	ldrb	r3, [r0, #0]
 8007a80:	2b30      	cmp	r3, #48	; 0x30
 8007a82:	d107      	bne.n	8007a94 <__cvt+0x74>
 8007a84:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a8c:	bf1c      	itt	ne
 8007a8e:	f1c4 0401 	rsbne	r4, r4, #1
 8007a92:	6034      	strne	r4, [r6, #0]
 8007a94:	6833      	ldr	r3, [r6, #0]
 8007a96:	441a      	add	r2, r3
 8007a98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa0:	bf08      	it	eq
 8007aa2:	9203      	streq	r2, [sp, #12]
 8007aa4:	2130      	movs	r1, #48	; 0x30
 8007aa6:	9b03      	ldr	r3, [sp, #12]
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d307      	bcc.n	8007abc <__cvt+0x9c>
 8007aac:	9b03      	ldr	r3, [sp, #12]
 8007aae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ab0:	1a1b      	subs	r3, r3, r0
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	b005      	add	sp, #20
 8007ab6:	ecbd 8b02 	vpop	{d8}
 8007aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007abc:	1c5c      	adds	r4, r3, #1
 8007abe:	9403      	str	r4, [sp, #12]
 8007ac0:	7019      	strb	r1, [r3, #0]
 8007ac2:	e7f0      	b.n	8007aa6 <__cvt+0x86>

08007ac4 <__exponent>:
 8007ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2900      	cmp	r1, #0
 8007aca:	bfb8      	it	lt
 8007acc:	4249      	neglt	r1, r1
 8007ace:	f803 2b02 	strb.w	r2, [r3], #2
 8007ad2:	bfb4      	ite	lt
 8007ad4:	222d      	movlt	r2, #45	; 0x2d
 8007ad6:	222b      	movge	r2, #43	; 0x2b
 8007ad8:	2909      	cmp	r1, #9
 8007ada:	7042      	strb	r2, [r0, #1]
 8007adc:	dd2a      	ble.n	8007b34 <__exponent+0x70>
 8007ade:	f10d 0407 	add.w	r4, sp, #7
 8007ae2:	46a4      	mov	ip, r4
 8007ae4:	270a      	movs	r7, #10
 8007ae6:	46a6      	mov	lr, r4
 8007ae8:	460a      	mov	r2, r1
 8007aea:	fb91 f6f7 	sdiv	r6, r1, r7
 8007aee:	fb07 1516 	mls	r5, r7, r6, r1
 8007af2:	3530      	adds	r5, #48	; 0x30
 8007af4:	2a63      	cmp	r2, #99	; 0x63
 8007af6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007afa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007afe:	4631      	mov	r1, r6
 8007b00:	dcf1      	bgt.n	8007ae6 <__exponent+0x22>
 8007b02:	3130      	adds	r1, #48	; 0x30
 8007b04:	f1ae 0502 	sub.w	r5, lr, #2
 8007b08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007b0c:	1c44      	adds	r4, r0, #1
 8007b0e:	4629      	mov	r1, r5
 8007b10:	4561      	cmp	r1, ip
 8007b12:	d30a      	bcc.n	8007b2a <__exponent+0x66>
 8007b14:	f10d 0209 	add.w	r2, sp, #9
 8007b18:	eba2 020e 	sub.w	r2, r2, lr
 8007b1c:	4565      	cmp	r5, ip
 8007b1e:	bf88      	it	hi
 8007b20:	2200      	movhi	r2, #0
 8007b22:	4413      	add	r3, r2
 8007b24:	1a18      	subs	r0, r3, r0
 8007b26:	b003      	add	sp, #12
 8007b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007b32:	e7ed      	b.n	8007b10 <__exponent+0x4c>
 8007b34:	2330      	movs	r3, #48	; 0x30
 8007b36:	3130      	adds	r1, #48	; 0x30
 8007b38:	7083      	strb	r3, [r0, #2]
 8007b3a:	70c1      	strb	r1, [r0, #3]
 8007b3c:	1d03      	adds	r3, r0, #4
 8007b3e:	e7f1      	b.n	8007b24 <__exponent+0x60>

08007b40 <_printf_float>:
 8007b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b44:	b08b      	sub	sp, #44	; 0x2c
 8007b46:	460c      	mov	r4, r1
 8007b48:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007b4c:	4616      	mov	r6, r2
 8007b4e:	461f      	mov	r7, r3
 8007b50:	4605      	mov	r5, r0
 8007b52:	f002 fd97 	bl	800a684 <_localeconv_r>
 8007b56:	f8d0 b000 	ldr.w	fp, [r0]
 8007b5a:	4658      	mov	r0, fp
 8007b5c:	f7f8 fbc0 	bl	80002e0 <strlen>
 8007b60:	2300      	movs	r3, #0
 8007b62:	9308      	str	r3, [sp, #32]
 8007b64:	f8d8 3000 	ldr.w	r3, [r8]
 8007b68:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007b6c:	6822      	ldr	r2, [r4, #0]
 8007b6e:	3307      	adds	r3, #7
 8007b70:	f023 0307 	bic.w	r3, r3, #7
 8007b74:	f103 0108 	add.w	r1, r3, #8
 8007b78:	f8c8 1000 	str.w	r1, [r8]
 8007b7c:	4682      	mov	sl, r0
 8007b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b82:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007b86:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007de8 <_printf_float+0x2a8>
 8007b8a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007b8e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007b92:	eeb4 6b47 	vcmp.f64	d6, d7
 8007b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b9a:	dd24      	ble.n	8007be6 <_printf_float+0xa6>
 8007b9c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba4:	d502      	bpl.n	8007bac <_printf_float+0x6c>
 8007ba6:	232d      	movs	r3, #45	; 0x2d
 8007ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bac:	4b90      	ldr	r3, [pc, #576]	; (8007df0 <_printf_float+0x2b0>)
 8007bae:	4891      	ldr	r0, [pc, #580]	; (8007df4 <_printf_float+0x2b4>)
 8007bb0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007bb4:	bf94      	ite	ls
 8007bb6:	4698      	movls	r8, r3
 8007bb8:	4680      	movhi	r8, r0
 8007bba:	2303      	movs	r3, #3
 8007bbc:	6123      	str	r3, [r4, #16]
 8007bbe:	f022 0204 	bic.w	r2, r2, #4
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	6022      	str	r2, [r4, #0]
 8007bc6:	9304      	str	r3, [sp, #16]
 8007bc8:	9700      	str	r7, [sp, #0]
 8007bca:	4633      	mov	r3, r6
 8007bcc:	aa09      	add	r2, sp, #36	; 0x24
 8007bce:	4621      	mov	r1, r4
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f000 f9d3 	bl	8007f7c <_printf_common>
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	f040 808a 	bne.w	8007cf0 <_printf_float+0x1b0>
 8007bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007be0:	b00b      	add	sp, #44	; 0x2c
 8007be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be6:	eeb4 0b40 	vcmp.f64	d0, d0
 8007bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bee:	d709      	bvc.n	8007c04 <_printf_float+0xc4>
 8007bf0:	ee10 3a90 	vmov	r3, s1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	bfbc      	itt	lt
 8007bf8:	232d      	movlt	r3, #45	; 0x2d
 8007bfa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007bfe:	487e      	ldr	r0, [pc, #504]	; (8007df8 <_printf_float+0x2b8>)
 8007c00:	4b7e      	ldr	r3, [pc, #504]	; (8007dfc <_printf_float+0x2bc>)
 8007c02:	e7d5      	b.n	8007bb0 <_printf_float+0x70>
 8007c04:	6863      	ldr	r3, [r4, #4]
 8007c06:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007c0a:	9104      	str	r1, [sp, #16]
 8007c0c:	1c59      	adds	r1, r3, #1
 8007c0e:	d13c      	bne.n	8007c8a <_printf_float+0x14a>
 8007c10:	2306      	movs	r3, #6
 8007c12:	6063      	str	r3, [r4, #4]
 8007c14:	2300      	movs	r3, #0
 8007c16:	9303      	str	r3, [sp, #12]
 8007c18:	ab08      	add	r3, sp, #32
 8007c1a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007c1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c22:	ab07      	add	r3, sp, #28
 8007c24:	6861      	ldr	r1, [r4, #4]
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	6022      	str	r2, [r4, #0]
 8007c2a:	f10d 031b 	add.w	r3, sp, #27
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f7ff fef6 	bl	8007a20 <__cvt>
 8007c34:	9b04      	ldr	r3, [sp, #16]
 8007c36:	9907      	ldr	r1, [sp, #28]
 8007c38:	2b47      	cmp	r3, #71	; 0x47
 8007c3a:	4680      	mov	r8, r0
 8007c3c:	d108      	bne.n	8007c50 <_printf_float+0x110>
 8007c3e:	1cc8      	adds	r0, r1, #3
 8007c40:	db02      	blt.n	8007c48 <_printf_float+0x108>
 8007c42:	6863      	ldr	r3, [r4, #4]
 8007c44:	4299      	cmp	r1, r3
 8007c46:	dd41      	ble.n	8007ccc <_printf_float+0x18c>
 8007c48:	f1a9 0902 	sub.w	r9, r9, #2
 8007c4c:	fa5f f989 	uxtb.w	r9, r9
 8007c50:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007c54:	d820      	bhi.n	8007c98 <_printf_float+0x158>
 8007c56:	3901      	subs	r1, #1
 8007c58:	464a      	mov	r2, r9
 8007c5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c5e:	9107      	str	r1, [sp, #28]
 8007c60:	f7ff ff30 	bl	8007ac4 <__exponent>
 8007c64:	9a08      	ldr	r2, [sp, #32]
 8007c66:	9004      	str	r0, [sp, #16]
 8007c68:	1813      	adds	r3, r2, r0
 8007c6a:	2a01      	cmp	r2, #1
 8007c6c:	6123      	str	r3, [r4, #16]
 8007c6e:	dc02      	bgt.n	8007c76 <_printf_float+0x136>
 8007c70:	6822      	ldr	r2, [r4, #0]
 8007c72:	07d2      	lsls	r2, r2, #31
 8007c74:	d501      	bpl.n	8007c7a <_printf_float+0x13a>
 8007c76:	3301      	adds	r3, #1
 8007c78:	6123      	str	r3, [r4, #16]
 8007c7a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0a2      	beq.n	8007bc8 <_printf_float+0x88>
 8007c82:	232d      	movs	r3, #45	; 0x2d
 8007c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c88:	e79e      	b.n	8007bc8 <_printf_float+0x88>
 8007c8a:	9904      	ldr	r1, [sp, #16]
 8007c8c:	2947      	cmp	r1, #71	; 0x47
 8007c8e:	d1c1      	bne.n	8007c14 <_printf_float+0xd4>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1bf      	bne.n	8007c14 <_printf_float+0xd4>
 8007c94:	2301      	movs	r3, #1
 8007c96:	e7bc      	b.n	8007c12 <_printf_float+0xd2>
 8007c98:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007c9c:	d118      	bne.n	8007cd0 <_printf_float+0x190>
 8007c9e:	2900      	cmp	r1, #0
 8007ca0:	6863      	ldr	r3, [r4, #4]
 8007ca2:	dd0b      	ble.n	8007cbc <_printf_float+0x17c>
 8007ca4:	6121      	str	r1, [r4, #16]
 8007ca6:	b913      	cbnz	r3, 8007cae <_printf_float+0x16e>
 8007ca8:	6822      	ldr	r2, [r4, #0]
 8007caa:	07d0      	lsls	r0, r2, #31
 8007cac:	d502      	bpl.n	8007cb4 <_printf_float+0x174>
 8007cae:	3301      	adds	r3, #1
 8007cb0:	440b      	add	r3, r1
 8007cb2:	6123      	str	r3, [r4, #16]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007cb8:	9304      	str	r3, [sp, #16]
 8007cba:	e7de      	b.n	8007c7a <_printf_float+0x13a>
 8007cbc:	b913      	cbnz	r3, 8007cc4 <_printf_float+0x184>
 8007cbe:	6822      	ldr	r2, [r4, #0]
 8007cc0:	07d2      	lsls	r2, r2, #31
 8007cc2:	d501      	bpl.n	8007cc8 <_printf_float+0x188>
 8007cc4:	3302      	adds	r3, #2
 8007cc6:	e7f4      	b.n	8007cb2 <_printf_float+0x172>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e7f2      	b.n	8007cb2 <_printf_float+0x172>
 8007ccc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007cd0:	9b08      	ldr	r3, [sp, #32]
 8007cd2:	4299      	cmp	r1, r3
 8007cd4:	db05      	blt.n	8007ce2 <_printf_float+0x1a2>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	6121      	str	r1, [r4, #16]
 8007cda:	07d8      	lsls	r0, r3, #31
 8007cdc:	d5ea      	bpl.n	8007cb4 <_printf_float+0x174>
 8007cde:	1c4b      	adds	r3, r1, #1
 8007ce0:	e7e7      	b.n	8007cb2 <_printf_float+0x172>
 8007ce2:	2900      	cmp	r1, #0
 8007ce4:	bfd4      	ite	le
 8007ce6:	f1c1 0202 	rsble	r2, r1, #2
 8007cea:	2201      	movgt	r2, #1
 8007cec:	4413      	add	r3, r2
 8007cee:	e7e0      	b.n	8007cb2 <_printf_float+0x172>
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	055a      	lsls	r2, r3, #21
 8007cf4:	d407      	bmi.n	8007d06 <_printf_float+0x1c6>
 8007cf6:	6923      	ldr	r3, [r4, #16]
 8007cf8:	4642      	mov	r2, r8
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	47b8      	blx	r7
 8007d00:	3001      	adds	r0, #1
 8007d02:	d12a      	bne.n	8007d5a <_printf_float+0x21a>
 8007d04:	e76a      	b.n	8007bdc <_printf_float+0x9c>
 8007d06:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007d0a:	f240 80e2 	bls.w	8007ed2 <_printf_float+0x392>
 8007d0e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007d12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d1a:	d133      	bne.n	8007d84 <_printf_float+0x244>
 8007d1c:	4a38      	ldr	r2, [pc, #224]	; (8007e00 <_printf_float+0x2c0>)
 8007d1e:	2301      	movs	r3, #1
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	47b8      	blx	r7
 8007d26:	3001      	adds	r0, #1
 8007d28:	f43f af58 	beq.w	8007bdc <_printf_float+0x9c>
 8007d2c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	db02      	blt.n	8007d3a <_printf_float+0x1fa>
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	07d8      	lsls	r0, r3, #31
 8007d38:	d50f      	bpl.n	8007d5a <_printf_float+0x21a>
 8007d3a:	4653      	mov	r3, sl
 8007d3c:	465a      	mov	r2, fp
 8007d3e:	4631      	mov	r1, r6
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b8      	blx	r7
 8007d44:	3001      	adds	r0, #1
 8007d46:	f43f af49 	beq.w	8007bdc <_printf_float+0x9c>
 8007d4a:	f04f 0800 	mov.w	r8, #0
 8007d4e:	f104 091a 	add.w	r9, r4, #26
 8007d52:	9b08      	ldr	r3, [sp, #32]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	4543      	cmp	r3, r8
 8007d58:	dc09      	bgt.n	8007d6e <_printf_float+0x22e>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	079b      	lsls	r3, r3, #30
 8007d5e:	f100 8108 	bmi.w	8007f72 <_printf_float+0x432>
 8007d62:	68e0      	ldr	r0, [r4, #12]
 8007d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d66:	4298      	cmp	r0, r3
 8007d68:	bfb8      	it	lt
 8007d6a:	4618      	movlt	r0, r3
 8007d6c:	e738      	b.n	8007be0 <_printf_float+0xa0>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	464a      	mov	r2, r9
 8007d72:	4631      	mov	r1, r6
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b8      	blx	r7
 8007d78:	3001      	adds	r0, #1
 8007d7a:	f43f af2f 	beq.w	8007bdc <_printf_float+0x9c>
 8007d7e:	f108 0801 	add.w	r8, r8, #1
 8007d82:	e7e6      	b.n	8007d52 <_printf_float+0x212>
 8007d84:	9b07      	ldr	r3, [sp, #28]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	dc3c      	bgt.n	8007e04 <_printf_float+0x2c4>
 8007d8a:	4a1d      	ldr	r2, [pc, #116]	; (8007e00 <_printf_float+0x2c0>)
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	4631      	mov	r1, r6
 8007d90:	4628      	mov	r0, r5
 8007d92:	47b8      	blx	r7
 8007d94:	3001      	adds	r0, #1
 8007d96:	f43f af21 	beq.w	8007bdc <_printf_float+0x9c>
 8007d9a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	d102      	bne.n	8007da8 <_printf_float+0x268>
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	07d9      	lsls	r1, r3, #31
 8007da6:	d5d8      	bpl.n	8007d5a <_printf_float+0x21a>
 8007da8:	4653      	mov	r3, sl
 8007daa:	465a      	mov	r2, fp
 8007dac:	4631      	mov	r1, r6
 8007dae:	4628      	mov	r0, r5
 8007db0:	47b8      	blx	r7
 8007db2:	3001      	adds	r0, #1
 8007db4:	f43f af12 	beq.w	8007bdc <_printf_float+0x9c>
 8007db8:	f04f 0900 	mov.w	r9, #0
 8007dbc:	f104 0a1a 	add.w	sl, r4, #26
 8007dc0:	9b07      	ldr	r3, [sp, #28]
 8007dc2:	425b      	negs	r3, r3
 8007dc4:	454b      	cmp	r3, r9
 8007dc6:	dc01      	bgt.n	8007dcc <_printf_float+0x28c>
 8007dc8:	9b08      	ldr	r3, [sp, #32]
 8007dca:	e795      	b.n	8007cf8 <_printf_float+0x1b8>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	4652      	mov	r2, sl
 8007dd0:	4631      	mov	r1, r6
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	47b8      	blx	r7
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	f43f af00 	beq.w	8007bdc <_printf_float+0x9c>
 8007ddc:	f109 0901 	add.w	r9, r9, #1
 8007de0:	e7ee      	b.n	8007dc0 <_printf_float+0x280>
 8007de2:	bf00      	nop
 8007de4:	f3af 8000 	nop.w
 8007de8:	ffffffff 	.word	0xffffffff
 8007dec:	7fefffff 	.word	0x7fefffff
 8007df0:	0800c158 	.word	0x0800c158
 8007df4:	0800c15c 	.word	0x0800c15c
 8007df8:	0800c164 	.word	0x0800c164
 8007dfc:	0800c160 	.word	0x0800c160
 8007e00:	0800c168 	.word	0x0800c168
 8007e04:	9a08      	ldr	r2, [sp, #32]
 8007e06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	bfa8      	it	ge
 8007e0c:	461a      	movge	r2, r3
 8007e0e:	2a00      	cmp	r2, #0
 8007e10:	4691      	mov	r9, r2
 8007e12:	dc38      	bgt.n	8007e86 <_printf_float+0x346>
 8007e14:	2300      	movs	r3, #0
 8007e16:	9305      	str	r3, [sp, #20]
 8007e18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e1c:	f104 021a 	add.w	r2, r4, #26
 8007e20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e22:	9905      	ldr	r1, [sp, #20]
 8007e24:	9304      	str	r3, [sp, #16]
 8007e26:	eba3 0309 	sub.w	r3, r3, r9
 8007e2a:	428b      	cmp	r3, r1
 8007e2c:	dc33      	bgt.n	8007e96 <_printf_float+0x356>
 8007e2e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	db3c      	blt.n	8007eb0 <_printf_float+0x370>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	07da      	lsls	r2, r3, #31
 8007e3a:	d439      	bmi.n	8007eb0 <_printf_float+0x370>
 8007e3c:	9b08      	ldr	r3, [sp, #32]
 8007e3e:	9a04      	ldr	r2, [sp, #16]
 8007e40:	9907      	ldr	r1, [sp, #28]
 8007e42:	1a9a      	subs	r2, r3, r2
 8007e44:	eba3 0901 	sub.w	r9, r3, r1
 8007e48:	4591      	cmp	r9, r2
 8007e4a:	bfa8      	it	ge
 8007e4c:	4691      	movge	r9, r2
 8007e4e:	f1b9 0f00 	cmp.w	r9, #0
 8007e52:	dc35      	bgt.n	8007ec0 <_printf_float+0x380>
 8007e54:	f04f 0800 	mov.w	r8, #0
 8007e58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e5c:	f104 0a1a 	add.w	sl, r4, #26
 8007e60:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	eba3 0309 	sub.w	r3, r3, r9
 8007e6a:	4543      	cmp	r3, r8
 8007e6c:	f77f af75 	ble.w	8007d5a <_printf_float+0x21a>
 8007e70:	2301      	movs	r3, #1
 8007e72:	4652      	mov	r2, sl
 8007e74:	4631      	mov	r1, r6
 8007e76:	4628      	mov	r0, r5
 8007e78:	47b8      	blx	r7
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	f43f aeae 	beq.w	8007bdc <_printf_float+0x9c>
 8007e80:	f108 0801 	add.w	r8, r8, #1
 8007e84:	e7ec      	b.n	8007e60 <_printf_float+0x320>
 8007e86:	4613      	mov	r3, r2
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4642      	mov	r2, r8
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	47b8      	blx	r7
 8007e90:	3001      	adds	r0, #1
 8007e92:	d1bf      	bne.n	8007e14 <_printf_float+0x2d4>
 8007e94:	e6a2      	b.n	8007bdc <_printf_float+0x9c>
 8007e96:	2301      	movs	r3, #1
 8007e98:	4631      	mov	r1, r6
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	9204      	str	r2, [sp, #16]
 8007e9e:	47b8      	blx	r7
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	f43f ae9b 	beq.w	8007bdc <_printf_float+0x9c>
 8007ea6:	9b05      	ldr	r3, [sp, #20]
 8007ea8:	9a04      	ldr	r2, [sp, #16]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	9305      	str	r3, [sp, #20]
 8007eae:	e7b7      	b.n	8007e20 <_printf_float+0x2e0>
 8007eb0:	4653      	mov	r3, sl
 8007eb2:	465a      	mov	r2, fp
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	47b8      	blx	r7
 8007eba:	3001      	adds	r0, #1
 8007ebc:	d1be      	bne.n	8007e3c <_printf_float+0x2fc>
 8007ebe:	e68d      	b.n	8007bdc <_printf_float+0x9c>
 8007ec0:	9a04      	ldr	r2, [sp, #16]
 8007ec2:	464b      	mov	r3, r9
 8007ec4:	4442      	add	r2, r8
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	4628      	mov	r0, r5
 8007eca:	47b8      	blx	r7
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d1c1      	bne.n	8007e54 <_printf_float+0x314>
 8007ed0:	e684      	b.n	8007bdc <_printf_float+0x9c>
 8007ed2:	9a08      	ldr	r2, [sp, #32]
 8007ed4:	2a01      	cmp	r2, #1
 8007ed6:	dc01      	bgt.n	8007edc <_printf_float+0x39c>
 8007ed8:	07db      	lsls	r3, r3, #31
 8007eda:	d537      	bpl.n	8007f4c <_printf_float+0x40c>
 8007edc:	2301      	movs	r3, #1
 8007ede:	4642      	mov	r2, r8
 8007ee0:	4631      	mov	r1, r6
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	47b8      	blx	r7
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	f43f ae78 	beq.w	8007bdc <_printf_float+0x9c>
 8007eec:	4653      	mov	r3, sl
 8007eee:	465a      	mov	r2, fp
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	47b8      	blx	r7
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	f43f ae70 	beq.w	8007bdc <_printf_float+0x9c>
 8007efc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007f00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f08:	d01b      	beq.n	8007f42 <_printf_float+0x402>
 8007f0a:	9b08      	ldr	r3, [sp, #32]
 8007f0c:	f108 0201 	add.w	r2, r8, #1
 8007f10:	3b01      	subs	r3, #1
 8007f12:	4631      	mov	r1, r6
 8007f14:	4628      	mov	r0, r5
 8007f16:	47b8      	blx	r7
 8007f18:	3001      	adds	r0, #1
 8007f1a:	d10e      	bne.n	8007f3a <_printf_float+0x3fa>
 8007f1c:	e65e      	b.n	8007bdc <_printf_float+0x9c>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	464a      	mov	r2, r9
 8007f22:	4631      	mov	r1, r6
 8007f24:	4628      	mov	r0, r5
 8007f26:	47b8      	blx	r7
 8007f28:	3001      	adds	r0, #1
 8007f2a:	f43f ae57 	beq.w	8007bdc <_printf_float+0x9c>
 8007f2e:	f108 0801 	add.w	r8, r8, #1
 8007f32:	9b08      	ldr	r3, [sp, #32]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	4543      	cmp	r3, r8
 8007f38:	dcf1      	bgt.n	8007f1e <_printf_float+0x3de>
 8007f3a:	9b04      	ldr	r3, [sp, #16]
 8007f3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f40:	e6db      	b.n	8007cfa <_printf_float+0x1ba>
 8007f42:	f04f 0800 	mov.w	r8, #0
 8007f46:	f104 091a 	add.w	r9, r4, #26
 8007f4a:	e7f2      	b.n	8007f32 <_printf_float+0x3f2>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	4642      	mov	r2, r8
 8007f50:	e7df      	b.n	8007f12 <_printf_float+0x3d2>
 8007f52:	2301      	movs	r3, #1
 8007f54:	464a      	mov	r2, r9
 8007f56:	4631      	mov	r1, r6
 8007f58:	4628      	mov	r0, r5
 8007f5a:	47b8      	blx	r7
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	f43f ae3d 	beq.w	8007bdc <_printf_float+0x9c>
 8007f62:	f108 0801 	add.w	r8, r8, #1
 8007f66:	68e3      	ldr	r3, [r4, #12]
 8007f68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f6a:	1a5b      	subs	r3, r3, r1
 8007f6c:	4543      	cmp	r3, r8
 8007f6e:	dcf0      	bgt.n	8007f52 <_printf_float+0x412>
 8007f70:	e6f7      	b.n	8007d62 <_printf_float+0x222>
 8007f72:	f04f 0800 	mov.w	r8, #0
 8007f76:	f104 0919 	add.w	r9, r4, #25
 8007f7a:	e7f4      	b.n	8007f66 <_printf_float+0x426>

08007f7c <_printf_common>:
 8007f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	4616      	mov	r6, r2
 8007f82:	4699      	mov	r9, r3
 8007f84:	688a      	ldr	r2, [r1, #8]
 8007f86:	690b      	ldr	r3, [r1, #16]
 8007f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	bfb8      	it	lt
 8007f90:	4613      	movlt	r3, r2
 8007f92:	6033      	str	r3, [r6, #0]
 8007f94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f98:	4607      	mov	r7, r0
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	b10a      	cbz	r2, 8007fa2 <_printf_common+0x26>
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	6033      	str	r3, [r6, #0]
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	0699      	lsls	r1, r3, #26
 8007fa6:	bf42      	ittt	mi
 8007fa8:	6833      	ldrmi	r3, [r6, #0]
 8007faa:	3302      	addmi	r3, #2
 8007fac:	6033      	strmi	r3, [r6, #0]
 8007fae:	6825      	ldr	r5, [r4, #0]
 8007fb0:	f015 0506 	ands.w	r5, r5, #6
 8007fb4:	d106      	bne.n	8007fc4 <_printf_common+0x48>
 8007fb6:	f104 0a19 	add.w	sl, r4, #25
 8007fba:	68e3      	ldr	r3, [r4, #12]
 8007fbc:	6832      	ldr	r2, [r6, #0]
 8007fbe:	1a9b      	subs	r3, r3, r2
 8007fc0:	42ab      	cmp	r3, r5
 8007fc2:	dc26      	bgt.n	8008012 <_printf_common+0x96>
 8007fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fc8:	1e13      	subs	r3, r2, #0
 8007fca:	6822      	ldr	r2, [r4, #0]
 8007fcc:	bf18      	it	ne
 8007fce:	2301      	movne	r3, #1
 8007fd0:	0692      	lsls	r2, r2, #26
 8007fd2:	d42b      	bmi.n	800802c <_printf_common+0xb0>
 8007fd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fd8:	4649      	mov	r1, r9
 8007fda:	4638      	mov	r0, r7
 8007fdc:	47c0      	blx	r8
 8007fde:	3001      	adds	r0, #1
 8007fe0:	d01e      	beq.n	8008020 <_printf_common+0xa4>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	68e5      	ldr	r5, [r4, #12]
 8007fe6:	6832      	ldr	r2, [r6, #0]
 8007fe8:	f003 0306 	and.w	r3, r3, #6
 8007fec:	2b04      	cmp	r3, #4
 8007fee:	bf08      	it	eq
 8007ff0:	1aad      	subeq	r5, r5, r2
 8007ff2:	68a3      	ldr	r3, [r4, #8]
 8007ff4:	6922      	ldr	r2, [r4, #16]
 8007ff6:	bf0c      	ite	eq
 8007ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ffc:	2500      	movne	r5, #0
 8007ffe:	4293      	cmp	r3, r2
 8008000:	bfc4      	itt	gt
 8008002:	1a9b      	subgt	r3, r3, r2
 8008004:	18ed      	addgt	r5, r5, r3
 8008006:	2600      	movs	r6, #0
 8008008:	341a      	adds	r4, #26
 800800a:	42b5      	cmp	r5, r6
 800800c:	d11a      	bne.n	8008044 <_printf_common+0xc8>
 800800e:	2000      	movs	r0, #0
 8008010:	e008      	b.n	8008024 <_printf_common+0xa8>
 8008012:	2301      	movs	r3, #1
 8008014:	4652      	mov	r2, sl
 8008016:	4649      	mov	r1, r9
 8008018:	4638      	mov	r0, r7
 800801a:	47c0      	blx	r8
 800801c:	3001      	adds	r0, #1
 800801e:	d103      	bne.n	8008028 <_printf_common+0xac>
 8008020:	f04f 30ff 	mov.w	r0, #4294967295
 8008024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008028:	3501      	adds	r5, #1
 800802a:	e7c6      	b.n	8007fba <_printf_common+0x3e>
 800802c:	18e1      	adds	r1, r4, r3
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	2030      	movs	r0, #48	; 0x30
 8008032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008036:	4422      	add	r2, r4
 8008038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800803c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008040:	3302      	adds	r3, #2
 8008042:	e7c7      	b.n	8007fd4 <_printf_common+0x58>
 8008044:	2301      	movs	r3, #1
 8008046:	4622      	mov	r2, r4
 8008048:	4649      	mov	r1, r9
 800804a:	4638      	mov	r0, r7
 800804c:	47c0      	blx	r8
 800804e:	3001      	adds	r0, #1
 8008050:	d0e6      	beq.n	8008020 <_printf_common+0xa4>
 8008052:	3601      	adds	r6, #1
 8008054:	e7d9      	b.n	800800a <_printf_common+0x8e>
	...

08008058 <_printf_i>:
 8008058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800805c:	7e0f      	ldrb	r7, [r1, #24]
 800805e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008060:	2f78      	cmp	r7, #120	; 0x78
 8008062:	4691      	mov	r9, r2
 8008064:	4680      	mov	r8, r0
 8008066:	460c      	mov	r4, r1
 8008068:	469a      	mov	sl, r3
 800806a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800806e:	d807      	bhi.n	8008080 <_printf_i+0x28>
 8008070:	2f62      	cmp	r7, #98	; 0x62
 8008072:	d80a      	bhi.n	800808a <_printf_i+0x32>
 8008074:	2f00      	cmp	r7, #0
 8008076:	f000 80d8 	beq.w	800822a <_printf_i+0x1d2>
 800807a:	2f58      	cmp	r7, #88	; 0x58
 800807c:	f000 80a3 	beq.w	80081c6 <_printf_i+0x16e>
 8008080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008088:	e03a      	b.n	8008100 <_printf_i+0xa8>
 800808a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800808e:	2b15      	cmp	r3, #21
 8008090:	d8f6      	bhi.n	8008080 <_printf_i+0x28>
 8008092:	a101      	add	r1, pc, #4	; (adr r1, 8008098 <_printf_i+0x40>)
 8008094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008098:	080080f1 	.word	0x080080f1
 800809c:	08008105 	.word	0x08008105
 80080a0:	08008081 	.word	0x08008081
 80080a4:	08008081 	.word	0x08008081
 80080a8:	08008081 	.word	0x08008081
 80080ac:	08008081 	.word	0x08008081
 80080b0:	08008105 	.word	0x08008105
 80080b4:	08008081 	.word	0x08008081
 80080b8:	08008081 	.word	0x08008081
 80080bc:	08008081 	.word	0x08008081
 80080c0:	08008081 	.word	0x08008081
 80080c4:	08008211 	.word	0x08008211
 80080c8:	08008135 	.word	0x08008135
 80080cc:	080081f3 	.word	0x080081f3
 80080d0:	08008081 	.word	0x08008081
 80080d4:	08008081 	.word	0x08008081
 80080d8:	08008233 	.word	0x08008233
 80080dc:	08008081 	.word	0x08008081
 80080e0:	08008135 	.word	0x08008135
 80080e4:	08008081 	.word	0x08008081
 80080e8:	08008081 	.word	0x08008081
 80080ec:	080081fb 	.word	0x080081fb
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	1d1a      	adds	r2, r3, #4
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	602a      	str	r2, [r5, #0]
 80080f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008100:	2301      	movs	r3, #1
 8008102:	e0a3      	b.n	800824c <_printf_i+0x1f4>
 8008104:	6820      	ldr	r0, [r4, #0]
 8008106:	6829      	ldr	r1, [r5, #0]
 8008108:	0606      	lsls	r6, r0, #24
 800810a:	f101 0304 	add.w	r3, r1, #4
 800810e:	d50a      	bpl.n	8008126 <_printf_i+0xce>
 8008110:	680e      	ldr	r6, [r1, #0]
 8008112:	602b      	str	r3, [r5, #0]
 8008114:	2e00      	cmp	r6, #0
 8008116:	da03      	bge.n	8008120 <_printf_i+0xc8>
 8008118:	232d      	movs	r3, #45	; 0x2d
 800811a:	4276      	negs	r6, r6
 800811c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008120:	485e      	ldr	r0, [pc, #376]	; (800829c <_printf_i+0x244>)
 8008122:	230a      	movs	r3, #10
 8008124:	e019      	b.n	800815a <_printf_i+0x102>
 8008126:	680e      	ldr	r6, [r1, #0]
 8008128:	602b      	str	r3, [r5, #0]
 800812a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800812e:	bf18      	it	ne
 8008130:	b236      	sxthne	r6, r6
 8008132:	e7ef      	b.n	8008114 <_printf_i+0xbc>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	6820      	ldr	r0, [r4, #0]
 8008138:	1d19      	adds	r1, r3, #4
 800813a:	6029      	str	r1, [r5, #0]
 800813c:	0601      	lsls	r1, r0, #24
 800813e:	d501      	bpl.n	8008144 <_printf_i+0xec>
 8008140:	681e      	ldr	r6, [r3, #0]
 8008142:	e002      	b.n	800814a <_printf_i+0xf2>
 8008144:	0646      	lsls	r6, r0, #25
 8008146:	d5fb      	bpl.n	8008140 <_printf_i+0xe8>
 8008148:	881e      	ldrh	r6, [r3, #0]
 800814a:	4854      	ldr	r0, [pc, #336]	; (800829c <_printf_i+0x244>)
 800814c:	2f6f      	cmp	r7, #111	; 0x6f
 800814e:	bf0c      	ite	eq
 8008150:	2308      	moveq	r3, #8
 8008152:	230a      	movne	r3, #10
 8008154:	2100      	movs	r1, #0
 8008156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800815a:	6865      	ldr	r5, [r4, #4]
 800815c:	60a5      	str	r5, [r4, #8]
 800815e:	2d00      	cmp	r5, #0
 8008160:	bfa2      	ittt	ge
 8008162:	6821      	ldrge	r1, [r4, #0]
 8008164:	f021 0104 	bicge.w	r1, r1, #4
 8008168:	6021      	strge	r1, [r4, #0]
 800816a:	b90e      	cbnz	r6, 8008170 <_printf_i+0x118>
 800816c:	2d00      	cmp	r5, #0
 800816e:	d04d      	beq.n	800820c <_printf_i+0x1b4>
 8008170:	4615      	mov	r5, r2
 8008172:	fbb6 f1f3 	udiv	r1, r6, r3
 8008176:	fb03 6711 	mls	r7, r3, r1, r6
 800817a:	5dc7      	ldrb	r7, [r0, r7]
 800817c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008180:	4637      	mov	r7, r6
 8008182:	42bb      	cmp	r3, r7
 8008184:	460e      	mov	r6, r1
 8008186:	d9f4      	bls.n	8008172 <_printf_i+0x11a>
 8008188:	2b08      	cmp	r3, #8
 800818a:	d10b      	bne.n	80081a4 <_printf_i+0x14c>
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	07de      	lsls	r6, r3, #31
 8008190:	d508      	bpl.n	80081a4 <_printf_i+0x14c>
 8008192:	6923      	ldr	r3, [r4, #16]
 8008194:	6861      	ldr	r1, [r4, #4]
 8008196:	4299      	cmp	r1, r3
 8008198:	bfde      	ittt	le
 800819a:	2330      	movle	r3, #48	; 0x30
 800819c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081a4:	1b52      	subs	r2, r2, r5
 80081a6:	6122      	str	r2, [r4, #16]
 80081a8:	f8cd a000 	str.w	sl, [sp]
 80081ac:	464b      	mov	r3, r9
 80081ae:	aa03      	add	r2, sp, #12
 80081b0:	4621      	mov	r1, r4
 80081b2:	4640      	mov	r0, r8
 80081b4:	f7ff fee2 	bl	8007f7c <_printf_common>
 80081b8:	3001      	adds	r0, #1
 80081ba:	d14c      	bne.n	8008256 <_printf_i+0x1fe>
 80081bc:	f04f 30ff 	mov.w	r0, #4294967295
 80081c0:	b004      	add	sp, #16
 80081c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c6:	4835      	ldr	r0, [pc, #212]	; (800829c <_printf_i+0x244>)
 80081c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081cc:	6829      	ldr	r1, [r5, #0]
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80081d4:	6029      	str	r1, [r5, #0]
 80081d6:	061d      	lsls	r5, r3, #24
 80081d8:	d514      	bpl.n	8008204 <_printf_i+0x1ac>
 80081da:	07df      	lsls	r7, r3, #31
 80081dc:	bf44      	itt	mi
 80081de:	f043 0320 	orrmi.w	r3, r3, #32
 80081e2:	6023      	strmi	r3, [r4, #0]
 80081e4:	b91e      	cbnz	r6, 80081ee <_printf_i+0x196>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	f023 0320 	bic.w	r3, r3, #32
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	2310      	movs	r3, #16
 80081f0:	e7b0      	b.n	8008154 <_printf_i+0xfc>
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	f043 0320 	orr.w	r3, r3, #32
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	2378      	movs	r3, #120	; 0x78
 80081fc:	4828      	ldr	r0, [pc, #160]	; (80082a0 <_printf_i+0x248>)
 80081fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008202:	e7e3      	b.n	80081cc <_printf_i+0x174>
 8008204:	0659      	lsls	r1, r3, #25
 8008206:	bf48      	it	mi
 8008208:	b2b6      	uxthmi	r6, r6
 800820a:	e7e6      	b.n	80081da <_printf_i+0x182>
 800820c:	4615      	mov	r5, r2
 800820e:	e7bb      	b.n	8008188 <_printf_i+0x130>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	6826      	ldr	r6, [r4, #0]
 8008214:	6961      	ldr	r1, [r4, #20]
 8008216:	1d18      	adds	r0, r3, #4
 8008218:	6028      	str	r0, [r5, #0]
 800821a:	0635      	lsls	r5, r6, #24
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	d501      	bpl.n	8008224 <_printf_i+0x1cc>
 8008220:	6019      	str	r1, [r3, #0]
 8008222:	e002      	b.n	800822a <_printf_i+0x1d2>
 8008224:	0670      	lsls	r0, r6, #25
 8008226:	d5fb      	bpl.n	8008220 <_printf_i+0x1c8>
 8008228:	8019      	strh	r1, [r3, #0]
 800822a:	2300      	movs	r3, #0
 800822c:	6123      	str	r3, [r4, #16]
 800822e:	4615      	mov	r5, r2
 8008230:	e7ba      	b.n	80081a8 <_printf_i+0x150>
 8008232:	682b      	ldr	r3, [r5, #0]
 8008234:	1d1a      	adds	r2, r3, #4
 8008236:	602a      	str	r2, [r5, #0]
 8008238:	681d      	ldr	r5, [r3, #0]
 800823a:	6862      	ldr	r2, [r4, #4]
 800823c:	2100      	movs	r1, #0
 800823e:	4628      	mov	r0, r5
 8008240:	f7f8 f856 	bl	80002f0 <memchr>
 8008244:	b108      	cbz	r0, 800824a <_printf_i+0x1f2>
 8008246:	1b40      	subs	r0, r0, r5
 8008248:	6060      	str	r0, [r4, #4]
 800824a:	6863      	ldr	r3, [r4, #4]
 800824c:	6123      	str	r3, [r4, #16]
 800824e:	2300      	movs	r3, #0
 8008250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008254:	e7a8      	b.n	80081a8 <_printf_i+0x150>
 8008256:	6923      	ldr	r3, [r4, #16]
 8008258:	462a      	mov	r2, r5
 800825a:	4649      	mov	r1, r9
 800825c:	4640      	mov	r0, r8
 800825e:	47d0      	blx	sl
 8008260:	3001      	adds	r0, #1
 8008262:	d0ab      	beq.n	80081bc <_printf_i+0x164>
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	079b      	lsls	r3, r3, #30
 8008268:	d413      	bmi.n	8008292 <_printf_i+0x23a>
 800826a:	68e0      	ldr	r0, [r4, #12]
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	4298      	cmp	r0, r3
 8008270:	bfb8      	it	lt
 8008272:	4618      	movlt	r0, r3
 8008274:	e7a4      	b.n	80081c0 <_printf_i+0x168>
 8008276:	2301      	movs	r3, #1
 8008278:	4632      	mov	r2, r6
 800827a:	4649      	mov	r1, r9
 800827c:	4640      	mov	r0, r8
 800827e:	47d0      	blx	sl
 8008280:	3001      	adds	r0, #1
 8008282:	d09b      	beq.n	80081bc <_printf_i+0x164>
 8008284:	3501      	adds	r5, #1
 8008286:	68e3      	ldr	r3, [r4, #12]
 8008288:	9903      	ldr	r1, [sp, #12]
 800828a:	1a5b      	subs	r3, r3, r1
 800828c:	42ab      	cmp	r3, r5
 800828e:	dcf2      	bgt.n	8008276 <_printf_i+0x21e>
 8008290:	e7eb      	b.n	800826a <_printf_i+0x212>
 8008292:	2500      	movs	r5, #0
 8008294:	f104 0619 	add.w	r6, r4, #25
 8008298:	e7f5      	b.n	8008286 <_printf_i+0x22e>
 800829a:	bf00      	nop
 800829c:	0800c16a 	.word	0x0800c16a
 80082a0:	0800c17b 	.word	0x0800c17b

080082a4 <_scanf_float>:
 80082a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a8:	b087      	sub	sp, #28
 80082aa:	4617      	mov	r7, r2
 80082ac:	9303      	str	r3, [sp, #12]
 80082ae:	688b      	ldr	r3, [r1, #8]
 80082b0:	1e5a      	subs	r2, r3, #1
 80082b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80082b6:	bf83      	ittte	hi
 80082b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80082bc:	195b      	addhi	r3, r3, r5
 80082be:	9302      	strhi	r3, [sp, #8]
 80082c0:	2300      	movls	r3, #0
 80082c2:	bf86      	itte	hi
 80082c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80082c8:	608b      	strhi	r3, [r1, #8]
 80082ca:	9302      	strls	r3, [sp, #8]
 80082cc:	680b      	ldr	r3, [r1, #0]
 80082ce:	468b      	mov	fp, r1
 80082d0:	2500      	movs	r5, #0
 80082d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80082d6:	f84b 3b1c 	str.w	r3, [fp], #28
 80082da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80082de:	4680      	mov	r8, r0
 80082e0:	460c      	mov	r4, r1
 80082e2:	465e      	mov	r6, fp
 80082e4:	46aa      	mov	sl, r5
 80082e6:	46a9      	mov	r9, r5
 80082e8:	9501      	str	r5, [sp, #4]
 80082ea:	68a2      	ldr	r2, [r4, #8]
 80082ec:	b152      	cbz	r2, 8008304 <_scanf_float+0x60>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b4e      	cmp	r3, #78	; 0x4e
 80082f4:	d864      	bhi.n	80083c0 <_scanf_float+0x11c>
 80082f6:	2b40      	cmp	r3, #64	; 0x40
 80082f8:	d83c      	bhi.n	8008374 <_scanf_float+0xd0>
 80082fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80082fe:	b2c8      	uxtb	r0, r1
 8008300:	280e      	cmp	r0, #14
 8008302:	d93a      	bls.n	800837a <_scanf_float+0xd6>
 8008304:	f1b9 0f00 	cmp.w	r9, #0
 8008308:	d003      	beq.n	8008312 <_scanf_float+0x6e>
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008316:	f1ba 0f01 	cmp.w	sl, #1
 800831a:	f200 8113 	bhi.w	8008544 <_scanf_float+0x2a0>
 800831e:	455e      	cmp	r6, fp
 8008320:	f200 8105 	bhi.w	800852e <_scanf_float+0x28a>
 8008324:	2501      	movs	r5, #1
 8008326:	4628      	mov	r0, r5
 8008328:	b007      	add	sp, #28
 800832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008332:	2a0d      	cmp	r2, #13
 8008334:	d8e6      	bhi.n	8008304 <_scanf_float+0x60>
 8008336:	a101      	add	r1, pc, #4	; (adr r1, 800833c <_scanf_float+0x98>)
 8008338:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800833c:	0800847b 	.word	0x0800847b
 8008340:	08008305 	.word	0x08008305
 8008344:	08008305 	.word	0x08008305
 8008348:	08008305 	.word	0x08008305
 800834c:	080084db 	.word	0x080084db
 8008350:	080084b3 	.word	0x080084b3
 8008354:	08008305 	.word	0x08008305
 8008358:	08008305 	.word	0x08008305
 800835c:	08008489 	.word	0x08008489
 8008360:	08008305 	.word	0x08008305
 8008364:	08008305 	.word	0x08008305
 8008368:	08008305 	.word	0x08008305
 800836c:	08008305 	.word	0x08008305
 8008370:	08008441 	.word	0x08008441
 8008374:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008378:	e7db      	b.n	8008332 <_scanf_float+0x8e>
 800837a:	290e      	cmp	r1, #14
 800837c:	d8c2      	bhi.n	8008304 <_scanf_float+0x60>
 800837e:	a001      	add	r0, pc, #4	; (adr r0, 8008384 <_scanf_float+0xe0>)
 8008380:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008384:	08008433 	.word	0x08008433
 8008388:	08008305 	.word	0x08008305
 800838c:	08008433 	.word	0x08008433
 8008390:	080084c7 	.word	0x080084c7
 8008394:	08008305 	.word	0x08008305
 8008398:	080083e1 	.word	0x080083e1
 800839c:	0800841d 	.word	0x0800841d
 80083a0:	0800841d 	.word	0x0800841d
 80083a4:	0800841d 	.word	0x0800841d
 80083a8:	0800841d 	.word	0x0800841d
 80083ac:	0800841d 	.word	0x0800841d
 80083b0:	0800841d 	.word	0x0800841d
 80083b4:	0800841d 	.word	0x0800841d
 80083b8:	0800841d 	.word	0x0800841d
 80083bc:	0800841d 	.word	0x0800841d
 80083c0:	2b6e      	cmp	r3, #110	; 0x6e
 80083c2:	d809      	bhi.n	80083d8 <_scanf_float+0x134>
 80083c4:	2b60      	cmp	r3, #96	; 0x60
 80083c6:	d8b2      	bhi.n	800832e <_scanf_float+0x8a>
 80083c8:	2b54      	cmp	r3, #84	; 0x54
 80083ca:	d077      	beq.n	80084bc <_scanf_float+0x218>
 80083cc:	2b59      	cmp	r3, #89	; 0x59
 80083ce:	d199      	bne.n	8008304 <_scanf_float+0x60>
 80083d0:	2d07      	cmp	r5, #7
 80083d2:	d197      	bne.n	8008304 <_scanf_float+0x60>
 80083d4:	2508      	movs	r5, #8
 80083d6:	e029      	b.n	800842c <_scanf_float+0x188>
 80083d8:	2b74      	cmp	r3, #116	; 0x74
 80083da:	d06f      	beq.n	80084bc <_scanf_float+0x218>
 80083dc:	2b79      	cmp	r3, #121	; 0x79
 80083de:	e7f6      	b.n	80083ce <_scanf_float+0x12a>
 80083e0:	6821      	ldr	r1, [r4, #0]
 80083e2:	05c8      	lsls	r0, r1, #23
 80083e4:	d51a      	bpl.n	800841c <_scanf_float+0x178>
 80083e6:	9b02      	ldr	r3, [sp, #8]
 80083e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80083ec:	6021      	str	r1, [r4, #0]
 80083ee:	f109 0901 	add.w	r9, r9, #1
 80083f2:	b11b      	cbz	r3, 80083fc <_scanf_float+0x158>
 80083f4:	3b01      	subs	r3, #1
 80083f6:	3201      	adds	r2, #1
 80083f8:	9302      	str	r3, [sp, #8]
 80083fa:	60a2      	str	r2, [r4, #8]
 80083fc:	68a3      	ldr	r3, [r4, #8]
 80083fe:	3b01      	subs	r3, #1
 8008400:	60a3      	str	r3, [r4, #8]
 8008402:	6923      	ldr	r3, [r4, #16]
 8008404:	3301      	adds	r3, #1
 8008406:	6123      	str	r3, [r4, #16]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3b01      	subs	r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	607b      	str	r3, [r7, #4]
 8008410:	f340 8084 	ble.w	800851c <_scanf_float+0x278>
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	3301      	adds	r3, #1
 8008418:	603b      	str	r3, [r7, #0]
 800841a:	e766      	b.n	80082ea <_scanf_float+0x46>
 800841c:	eb1a 0f05 	cmn.w	sl, r5
 8008420:	f47f af70 	bne.w	8008304 <_scanf_float+0x60>
 8008424:	6822      	ldr	r2, [r4, #0]
 8008426:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800842a:	6022      	str	r2, [r4, #0]
 800842c:	f806 3b01 	strb.w	r3, [r6], #1
 8008430:	e7e4      	b.n	80083fc <_scanf_float+0x158>
 8008432:	6822      	ldr	r2, [r4, #0]
 8008434:	0610      	lsls	r0, r2, #24
 8008436:	f57f af65 	bpl.w	8008304 <_scanf_float+0x60>
 800843a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800843e:	e7f4      	b.n	800842a <_scanf_float+0x186>
 8008440:	f1ba 0f00 	cmp.w	sl, #0
 8008444:	d10e      	bne.n	8008464 <_scanf_float+0x1c0>
 8008446:	f1b9 0f00 	cmp.w	r9, #0
 800844a:	d10e      	bne.n	800846a <_scanf_float+0x1c6>
 800844c:	6822      	ldr	r2, [r4, #0]
 800844e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008452:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008456:	d108      	bne.n	800846a <_scanf_float+0x1c6>
 8008458:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800845c:	6022      	str	r2, [r4, #0]
 800845e:	f04f 0a01 	mov.w	sl, #1
 8008462:	e7e3      	b.n	800842c <_scanf_float+0x188>
 8008464:	f1ba 0f02 	cmp.w	sl, #2
 8008468:	d055      	beq.n	8008516 <_scanf_float+0x272>
 800846a:	2d01      	cmp	r5, #1
 800846c:	d002      	beq.n	8008474 <_scanf_float+0x1d0>
 800846e:	2d04      	cmp	r5, #4
 8008470:	f47f af48 	bne.w	8008304 <_scanf_float+0x60>
 8008474:	3501      	adds	r5, #1
 8008476:	b2ed      	uxtb	r5, r5
 8008478:	e7d8      	b.n	800842c <_scanf_float+0x188>
 800847a:	f1ba 0f01 	cmp.w	sl, #1
 800847e:	f47f af41 	bne.w	8008304 <_scanf_float+0x60>
 8008482:	f04f 0a02 	mov.w	sl, #2
 8008486:	e7d1      	b.n	800842c <_scanf_float+0x188>
 8008488:	b97d      	cbnz	r5, 80084aa <_scanf_float+0x206>
 800848a:	f1b9 0f00 	cmp.w	r9, #0
 800848e:	f47f af3c 	bne.w	800830a <_scanf_float+0x66>
 8008492:	6822      	ldr	r2, [r4, #0]
 8008494:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008498:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800849c:	f47f af39 	bne.w	8008312 <_scanf_float+0x6e>
 80084a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084a4:	6022      	str	r2, [r4, #0]
 80084a6:	2501      	movs	r5, #1
 80084a8:	e7c0      	b.n	800842c <_scanf_float+0x188>
 80084aa:	2d03      	cmp	r5, #3
 80084ac:	d0e2      	beq.n	8008474 <_scanf_float+0x1d0>
 80084ae:	2d05      	cmp	r5, #5
 80084b0:	e7de      	b.n	8008470 <_scanf_float+0x1cc>
 80084b2:	2d02      	cmp	r5, #2
 80084b4:	f47f af26 	bne.w	8008304 <_scanf_float+0x60>
 80084b8:	2503      	movs	r5, #3
 80084ba:	e7b7      	b.n	800842c <_scanf_float+0x188>
 80084bc:	2d06      	cmp	r5, #6
 80084be:	f47f af21 	bne.w	8008304 <_scanf_float+0x60>
 80084c2:	2507      	movs	r5, #7
 80084c4:	e7b2      	b.n	800842c <_scanf_float+0x188>
 80084c6:	6822      	ldr	r2, [r4, #0]
 80084c8:	0591      	lsls	r1, r2, #22
 80084ca:	f57f af1b 	bpl.w	8008304 <_scanf_float+0x60>
 80084ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80084d2:	6022      	str	r2, [r4, #0]
 80084d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80084d8:	e7a8      	b.n	800842c <_scanf_float+0x188>
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80084e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80084e4:	d006      	beq.n	80084f4 <_scanf_float+0x250>
 80084e6:	0550      	lsls	r0, r2, #21
 80084e8:	f57f af0c 	bpl.w	8008304 <_scanf_float+0x60>
 80084ec:	f1b9 0f00 	cmp.w	r9, #0
 80084f0:	f43f af0f 	beq.w	8008312 <_scanf_float+0x6e>
 80084f4:	0591      	lsls	r1, r2, #22
 80084f6:	bf58      	it	pl
 80084f8:	9901      	ldrpl	r1, [sp, #4]
 80084fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084fe:	bf58      	it	pl
 8008500:	eba9 0101 	subpl.w	r1, r9, r1
 8008504:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008508:	bf58      	it	pl
 800850a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800850e:	6022      	str	r2, [r4, #0]
 8008510:	f04f 0900 	mov.w	r9, #0
 8008514:	e78a      	b.n	800842c <_scanf_float+0x188>
 8008516:	f04f 0a03 	mov.w	sl, #3
 800851a:	e787      	b.n	800842c <_scanf_float+0x188>
 800851c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008520:	4639      	mov	r1, r7
 8008522:	4640      	mov	r0, r8
 8008524:	4798      	blx	r3
 8008526:	2800      	cmp	r0, #0
 8008528:	f43f aedf 	beq.w	80082ea <_scanf_float+0x46>
 800852c:	e6ea      	b.n	8008304 <_scanf_float+0x60>
 800852e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008532:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008536:	463a      	mov	r2, r7
 8008538:	4640      	mov	r0, r8
 800853a:	4798      	blx	r3
 800853c:	6923      	ldr	r3, [r4, #16]
 800853e:	3b01      	subs	r3, #1
 8008540:	6123      	str	r3, [r4, #16]
 8008542:	e6ec      	b.n	800831e <_scanf_float+0x7a>
 8008544:	1e6b      	subs	r3, r5, #1
 8008546:	2b06      	cmp	r3, #6
 8008548:	d825      	bhi.n	8008596 <_scanf_float+0x2f2>
 800854a:	2d02      	cmp	r5, #2
 800854c:	d836      	bhi.n	80085bc <_scanf_float+0x318>
 800854e:	455e      	cmp	r6, fp
 8008550:	f67f aee8 	bls.w	8008324 <_scanf_float+0x80>
 8008554:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008558:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800855c:	463a      	mov	r2, r7
 800855e:	4640      	mov	r0, r8
 8008560:	4798      	blx	r3
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	3b01      	subs	r3, #1
 8008566:	6123      	str	r3, [r4, #16]
 8008568:	e7f1      	b.n	800854e <_scanf_float+0x2aa>
 800856a:	9802      	ldr	r0, [sp, #8]
 800856c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008570:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008574:	9002      	str	r0, [sp, #8]
 8008576:	463a      	mov	r2, r7
 8008578:	4640      	mov	r0, r8
 800857a:	4798      	blx	r3
 800857c:	6923      	ldr	r3, [r4, #16]
 800857e:	3b01      	subs	r3, #1
 8008580:	6123      	str	r3, [r4, #16]
 8008582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008586:	fa5f fa8a 	uxtb.w	sl, sl
 800858a:	f1ba 0f02 	cmp.w	sl, #2
 800858e:	d1ec      	bne.n	800856a <_scanf_float+0x2c6>
 8008590:	3d03      	subs	r5, #3
 8008592:	b2ed      	uxtb	r5, r5
 8008594:	1b76      	subs	r6, r6, r5
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	05da      	lsls	r2, r3, #23
 800859a:	d52f      	bpl.n	80085fc <_scanf_float+0x358>
 800859c:	055b      	lsls	r3, r3, #21
 800859e:	d510      	bpl.n	80085c2 <_scanf_float+0x31e>
 80085a0:	455e      	cmp	r6, fp
 80085a2:	f67f aebf 	bls.w	8008324 <_scanf_float+0x80>
 80085a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085ae:	463a      	mov	r2, r7
 80085b0:	4640      	mov	r0, r8
 80085b2:	4798      	blx	r3
 80085b4:	6923      	ldr	r3, [r4, #16]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	6123      	str	r3, [r4, #16]
 80085ba:	e7f1      	b.n	80085a0 <_scanf_float+0x2fc>
 80085bc:	46aa      	mov	sl, r5
 80085be:	9602      	str	r6, [sp, #8]
 80085c0:	e7df      	b.n	8008582 <_scanf_float+0x2de>
 80085c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80085c6:	6923      	ldr	r3, [r4, #16]
 80085c8:	2965      	cmp	r1, #101	; 0x65
 80085ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80085ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80085d2:	6123      	str	r3, [r4, #16]
 80085d4:	d00c      	beq.n	80085f0 <_scanf_float+0x34c>
 80085d6:	2945      	cmp	r1, #69	; 0x45
 80085d8:	d00a      	beq.n	80085f0 <_scanf_float+0x34c>
 80085da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085de:	463a      	mov	r2, r7
 80085e0:	4640      	mov	r0, r8
 80085e2:	4798      	blx	r3
 80085e4:	6923      	ldr	r3, [r4, #16]
 80085e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	1eb5      	subs	r5, r6, #2
 80085ee:	6123      	str	r3, [r4, #16]
 80085f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085f4:	463a      	mov	r2, r7
 80085f6:	4640      	mov	r0, r8
 80085f8:	4798      	blx	r3
 80085fa:	462e      	mov	r6, r5
 80085fc:	6825      	ldr	r5, [r4, #0]
 80085fe:	f015 0510 	ands.w	r5, r5, #16
 8008602:	d14e      	bne.n	80086a2 <_scanf_float+0x3fe>
 8008604:	7035      	strb	r5, [r6, #0]
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800860c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008610:	d119      	bne.n	8008646 <_scanf_float+0x3a2>
 8008612:	9b01      	ldr	r3, [sp, #4]
 8008614:	454b      	cmp	r3, r9
 8008616:	eba3 0209 	sub.w	r2, r3, r9
 800861a:	d121      	bne.n	8008660 <_scanf_float+0x3bc>
 800861c:	2200      	movs	r2, #0
 800861e:	4659      	mov	r1, fp
 8008620:	4640      	mov	r0, r8
 8008622:	f000 fe3b 	bl	800929c <_strtod_r>
 8008626:	6822      	ldr	r2, [r4, #0]
 8008628:	9b03      	ldr	r3, [sp, #12]
 800862a:	f012 0f02 	tst.w	r2, #2
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	d021      	beq.n	8008676 <_scanf_float+0x3d2>
 8008632:	9903      	ldr	r1, [sp, #12]
 8008634:	1d1a      	adds	r2, r3, #4
 8008636:	600a      	str	r2, [r1, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	ed83 0b00 	vstr	d0, [r3]
 800863e:	68e3      	ldr	r3, [r4, #12]
 8008640:	3301      	adds	r3, #1
 8008642:	60e3      	str	r3, [r4, #12]
 8008644:	e66f      	b.n	8008326 <_scanf_float+0x82>
 8008646:	9b04      	ldr	r3, [sp, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0e7      	beq.n	800861c <_scanf_float+0x378>
 800864c:	9905      	ldr	r1, [sp, #20]
 800864e:	230a      	movs	r3, #10
 8008650:	462a      	mov	r2, r5
 8008652:	3101      	adds	r1, #1
 8008654:	4640      	mov	r0, r8
 8008656:	f000 fea9 	bl	80093ac <_strtol_r>
 800865a:	9b04      	ldr	r3, [sp, #16]
 800865c:	9e05      	ldr	r6, [sp, #20]
 800865e:	1ac2      	subs	r2, r0, r3
 8008660:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008664:	429e      	cmp	r6, r3
 8008666:	bf28      	it	cs
 8008668:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800866c:	490e      	ldr	r1, [pc, #56]	; (80086a8 <_scanf_float+0x404>)
 800866e:	4630      	mov	r0, r6
 8008670:	f000 f824 	bl	80086bc <siprintf>
 8008674:	e7d2      	b.n	800861c <_scanf_float+0x378>
 8008676:	9903      	ldr	r1, [sp, #12]
 8008678:	f012 0f04 	tst.w	r2, #4
 800867c:	f103 0204 	add.w	r2, r3, #4
 8008680:	600a      	str	r2, [r1, #0]
 8008682:	d1d9      	bne.n	8008638 <_scanf_float+0x394>
 8008684:	eeb4 0b40 	vcmp.f64	d0, d0
 8008688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800868c:	681e      	ldr	r6, [r3, #0]
 800868e:	d705      	bvc.n	800869c <_scanf_float+0x3f8>
 8008690:	4806      	ldr	r0, [pc, #24]	; (80086ac <_scanf_float+0x408>)
 8008692:	f000 f80d 	bl	80086b0 <nanf>
 8008696:	ed86 0a00 	vstr	s0, [r6]
 800869a:	e7d0      	b.n	800863e <_scanf_float+0x39a>
 800869c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80086a0:	e7f9      	b.n	8008696 <_scanf_float+0x3f2>
 80086a2:	2500      	movs	r5, #0
 80086a4:	e63f      	b.n	8008326 <_scanf_float+0x82>
 80086a6:	bf00      	nop
 80086a8:	0800c18c 	.word	0x0800c18c
 80086ac:	0800c598 	.word	0x0800c598

080086b0 <nanf>:
 80086b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80086b8 <nanf+0x8>
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	7fc00000 	.word	0x7fc00000

080086bc <siprintf>:
 80086bc:	b40e      	push	{r1, r2, r3}
 80086be:	b500      	push	{lr}
 80086c0:	b09c      	sub	sp, #112	; 0x70
 80086c2:	ab1d      	add	r3, sp, #116	; 0x74
 80086c4:	9002      	str	r0, [sp, #8]
 80086c6:	9006      	str	r0, [sp, #24]
 80086c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086cc:	4809      	ldr	r0, [pc, #36]	; (80086f4 <siprintf+0x38>)
 80086ce:	9107      	str	r1, [sp, #28]
 80086d0:	9104      	str	r1, [sp, #16]
 80086d2:	4909      	ldr	r1, [pc, #36]	; (80086f8 <siprintf+0x3c>)
 80086d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d8:	9105      	str	r1, [sp, #20]
 80086da:	6800      	ldr	r0, [r0, #0]
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	a902      	add	r1, sp, #8
 80086e0:	f002 fe0c 	bl	800b2fc <_svfiprintf_r>
 80086e4:	9b02      	ldr	r3, [sp, #8]
 80086e6:	2200      	movs	r2, #0
 80086e8:	701a      	strb	r2, [r3, #0]
 80086ea:	b01c      	add	sp, #112	; 0x70
 80086ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80086f0:	b003      	add	sp, #12
 80086f2:	4770      	bx	lr
 80086f4:	24000010 	.word	0x24000010
 80086f8:	ffff0208 	.word	0xffff0208

080086fc <sulp>:
 80086fc:	b570      	push	{r4, r5, r6, lr}
 80086fe:	4604      	mov	r4, r0
 8008700:	460d      	mov	r5, r1
 8008702:	4616      	mov	r6, r2
 8008704:	ec45 4b10 	vmov	d0, r4, r5
 8008708:	f002 fb5a 	bl	800adc0 <__ulp>
 800870c:	b17e      	cbz	r6, 800872e <sulp+0x32>
 800870e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008712:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008716:	2b00      	cmp	r3, #0
 8008718:	dd09      	ble.n	800872e <sulp+0x32>
 800871a:	051b      	lsls	r3, r3, #20
 800871c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008720:	2000      	movs	r0, #0
 8008722:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008726:	ec41 0b17 	vmov	d7, r0, r1
 800872a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800872e:	bd70      	pop	{r4, r5, r6, pc}

08008730 <_strtod_l>:
 8008730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	ed2d 8b0e 	vpush	{d8-d14}
 8008738:	b097      	sub	sp, #92	; 0x5c
 800873a:	461f      	mov	r7, r3
 800873c:	2300      	movs	r3, #0
 800873e:	9312      	str	r3, [sp, #72]	; 0x48
 8008740:	4ba1      	ldr	r3, [pc, #644]	; (80089c8 <_strtod_l+0x298>)
 8008742:	920d      	str	r2, [sp, #52]	; 0x34
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	9307      	str	r3, [sp, #28]
 8008748:	4604      	mov	r4, r0
 800874a:	4618      	mov	r0, r3
 800874c:	468b      	mov	fp, r1
 800874e:	f7f7 fdc7 	bl	80002e0 <strlen>
 8008752:	f04f 0800 	mov.w	r8, #0
 8008756:	4605      	mov	r5, r0
 8008758:	f04f 0900 	mov.w	r9, #0
 800875c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008760:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008762:	7813      	ldrb	r3, [r2, #0]
 8008764:	2b2b      	cmp	r3, #43	; 0x2b
 8008766:	d04d      	beq.n	8008804 <_strtod_l+0xd4>
 8008768:	d83a      	bhi.n	80087e0 <_strtod_l+0xb0>
 800876a:	2b0d      	cmp	r3, #13
 800876c:	d833      	bhi.n	80087d6 <_strtod_l+0xa6>
 800876e:	2b08      	cmp	r3, #8
 8008770:	d833      	bhi.n	80087da <_strtod_l+0xaa>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d03d      	beq.n	80087f2 <_strtod_l+0xc2>
 8008776:	2300      	movs	r3, #0
 8008778:	9308      	str	r3, [sp, #32]
 800877a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800877c:	7833      	ldrb	r3, [r6, #0]
 800877e:	2b30      	cmp	r3, #48	; 0x30
 8008780:	f040 80b0 	bne.w	80088e4 <_strtod_l+0x1b4>
 8008784:	7873      	ldrb	r3, [r6, #1]
 8008786:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800878a:	2b58      	cmp	r3, #88	; 0x58
 800878c:	d167      	bne.n	800885e <_strtod_l+0x12e>
 800878e:	9b08      	ldr	r3, [sp, #32]
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	ab12      	add	r3, sp, #72	; 0x48
 8008794:	9702      	str	r7, [sp, #8]
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	4a8c      	ldr	r2, [pc, #560]	; (80089cc <_strtod_l+0x29c>)
 800879a:	ab13      	add	r3, sp, #76	; 0x4c
 800879c:	a911      	add	r1, sp, #68	; 0x44
 800879e:	4620      	mov	r0, r4
 80087a0:	f001 fc68 	bl	800a074 <__gethex>
 80087a4:	f010 0507 	ands.w	r5, r0, #7
 80087a8:	4607      	mov	r7, r0
 80087aa:	d005      	beq.n	80087b8 <_strtod_l+0x88>
 80087ac:	2d06      	cmp	r5, #6
 80087ae:	d12b      	bne.n	8008808 <_strtod_l+0xd8>
 80087b0:	3601      	adds	r6, #1
 80087b2:	2300      	movs	r3, #0
 80087b4:	9611      	str	r6, [sp, #68]	; 0x44
 80087b6:	9308      	str	r3, [sp, #32]
 80087b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f040 854e 	bne.w	800925c <_strtod_l+0xb2c>
 80087c0:	9b08      	ldr	r3, [sp, #32]
 80087c2:	b1e3      	cbz	r3, 80087fe <_strtod_l+0xce>
 80087c4:	ec49 8b17 	vmov	d7, r8, r9
 80087c8:	eeb1 0b47 	vneg.f64	d0, d7
 80087cc:	b017      	add	sp, #92	; 0x5c
 80087ce:	ecbd 8b0e 	vpop	{d8-d14}
 80087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d6:	2b20      	cmp	r3, #32
 80087d8:	d1cd      	bne.n	8008776 <_strtod_l+0x46>
 80087da:	3201      	adds	r2, #1
 80087dc:	9211      	str	r2, [sp, #68]	; 0x44
 80087de:	e7bf      	b.n	8008760 <_strtod_l+0x30>
 80087e0:	2b2d      	cmp	r3, #45	; 0x2d
 80087e2:	d1c8      	bne.n	8008776 <_strtod_l+0x46>
 80087e4:	2301      	movs	r3, #1
 80087e6:	9308      	str	r3, [sp, #32]
 80087e8:	1c53      	adds	r3, r2, #1
 80087ea:	9311      	str	r3, [sp, #68]	; 0x44
 80087ec:	7853      	ldrb	r3, [r2, #1]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1c3      	bne.n	800877a <_strtod_l+0x4a>
 80087f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087f4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f040 852d 	bne.w	8009258 <_strtod_l+0xb28>
 80087fe:	ec49 8b10 	vmov	d0, r8, r9
 8008802:	e7e3      	b.n	80087cc <_strtod_l+0x9c>
 8008804:	2300      	movs	r3, #0
 8008806:	e7ee      	b.n	80087e6 <_strtod_l+0xb6>
 8008808:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800880a:	b13a      	cbz	r2, 800881c <_strtod_l+0xec>
 800880c:	2135      	movs	r1, #53	; 0x35
 800880e:	a814      	add	r0, sp, #80	; 0x50
 8008810:	f002 fbde 	bl	800afd0 <__copybits>
 8008814:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008816:	4620      	mov	r0, r4
 8008818:	f001 ffa0 	bl	800a75c <_Bfree>
 800881c:	3d01      	subs	r5, #1
 800881e:	2d04      	cmp	r5, #4
 8008820:	d806      	bhi.n	8008830 <_strtod_l+0x100>
 8008822:	e8df f005 	tbb	[pc, r5]
 8008826:	030a      	.short	0x030a
 8008828:	1714      	.short	0x1714
 800882a:	0a          	.byte	0x0a
 800882b:	00          	.byte	0x00
 800882c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008830:	073f      	lsls	r7, r7, #28
 8008832:	d5c1      	bpl.n	80087b8 <_strtod_l+0x88>
 8008834:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008838:	e7be      	b.n	80087b8 <_strtod_l+0x88>
 800883a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800883e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008840:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008844:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008848:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800884c:	e7f0      	b.n	8008830 <_strtod_l+0x100>
 800884e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80089d0 <_strtod_l+0x2a0>
 8008852:	e7ed      	b.n	8008830 <_strtod_l+0x100>
 8008854:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008858:	f04f 38ff 	mov.w	r8, #4294967295
 800885c:	e7e8      	b.n	8008830 <_strtod_l+0x100>
 800885e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	9211      	str	r2, [sp, #68]	; 0x44
 8008864:	785b      	ldrb	r3, [r3, #1]
 8008866:	2b30      	cmp	r3, #48	; 0x30
 8008868:	d0f9      	beq.n	800885e <_strtod_l+0x12e>
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0a4      	beq.n	80087b8 <_strtod_l+0x88>
 800886e:	2301      	movs	r3, #1
 8008870:	f04f 0a00 	mov.w	sl, #0
 8008874:	9304      	str	r3, [sp, #16]
 8008876:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008878:	930a      	str	r3, [sp, #40]	; 0x28
 800887a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800887e:	f8cd a018 	str.w	sl, [sp, #24]
 8008882:	220a      	movs	r2, #10
 8008884:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008886:	7807      	ldrb	r7, [r0, #0]
 8008888:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800888c:	b2d9      	uxtb	r1, r3
 800888e:	2909      	cmp	r1, #9
 8008890:	d92a      	bls.n	80088e8 <_strtod_l+0x1b8>
 8008892:	9907      	ldr	r1, [sp, #28]
 8008894:	462a      	mov	r2, r5
 8008896:	f002 fe4b 	bl	800b530 <strncmp>
 800889a:	2800      	cmp	r0, #0
 800889c:	d033      	beq.n	8008906 <_strtod_l+0x1d6>
 800889e:	2000      	movs	r0, #0
 80088a0:	9b06      	ldr	r3, [sp, #24]
 80088a2:	463a      	mov	r2, r7
 80088a4:	4601      	mov	r1, r0
 80088a6:	4607      	mov	r7, r0
 80088a8:	2a65      	cmp	r2, #101	; 0x65
 80088aa:	d001      	beq.n	80088b0 <_strtod_l+0x180>
 80088ac:	2a45      	cmp	r2, #69	; 0x45
 80088ae:	d117      	bne.n	80088e0 <_strtod_l+0x1b0>
 80088b0:	b91b      	cbnz	r3, 80088ba <_strtod_l+0x18a>
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	4303      	orrs	r3, r0
 80088b6:	d09c      	beq.n	80087f2 <_strtod_l+0xc2>
 80088b8:	2300      	movs	r3, #0
 80088ba:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80088be:	f10b 0201 	add.w	r2, fp, #1
 80088c2:	9211      	str	r2, [sp, #68]	; 0x44
 80088c4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80088c8:	2a2b      	cmp	r2, #43	; 0x2b
 80088ca:	d071      	beq.n	80089b0 <_strtod_l+0x280>
 80088cc:	2a2d      	cmp	r2, #45	; 0x2d
 80088ce:	d077      	beq.n	80089c0 <_strtod_l+0x290>
 80088d0:	f04f 0e00 	mov.w	lr, #0
 80088d4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80088d8:	2d09      	cmp	r5, #9
 80088da:	d97f      	bls.n	80089dc <_strtod_l+0x2ac>
 80088dc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80088e0:	2500      	movs	r5, #0
 80088e2:	e09b      	b.n	8008a1c <_strtod_l+0x2ec>
 80088e4:	2300      	movs	r3, #0
 80088e6:	e7c3      	b.n	8008870 <_strtod_l+0x140>
 80088e8:	9906      	ldr	r1, [sp, #24]
 80088ea:	2908      	cmp	r1, #8
 80088ec:	bfdd      	ittte	le
 80088ee:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80088f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80088f4:	9309      	strle	r3, [sp, #36]	; 0x24
 80088f6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80088fa:	9b06      	ldr	r3, [sp, #24]
 80088fc:	3001      	adds	r0, #1
 80088fe:	3301      	adds	r3, #1
 8008900:	9306      	str	r3, [sp, #24]
 8008902:	9011      	str	r0, [sp, #68]	; 0x44
 8008904:	e7be      	b.n	8008884 <_strtod_l+0x154>
 8008906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008908:	195a      	adds	r2, r3, r5
 800890a:	9211      	str	r2, [sp, #68]	; 0x44
 800890c:	5d5a      	ldrb	r2, [r3, r5]
 800890e:	9b06      	ldr	r3, [sp, #24]
 8008910:	b3a3      	cbz	r3, 800897c <_strtod_l+0x24c>
 8008912:	4607      	mov	r7, r0
 8008914:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008918:	2909      	cmp	r1, #9
 800891a:	d912      	bls.n	8008942 <_strtod_l+0x212>
 800891c:	2101      	movs	r1, #1
 800891e:	e7c3      	b.n	80088a8 <_strtod_l+0x178>
 8008920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008922:	1c5a      	adds	r2, r3, #1
 8008924:	9211      	str	r2, [sp, #68]	; 0x44
 8008926:	785a      	ldrb	r2, [r3, #1]
 8008928:	3001      	adds	r0, #1
 800892a:	2a30      	cmp	r2, #48	; 0x30
 800892c:	d0f8      	beq.n	8008920 <_strtod_l+0x1f0>
 800892e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008932:	2b08      	cmp	r3, #8
 8008934:	f200 8497 	bhi.w	8009266 <_strtod_l+0xb36>
 8008938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800893a:	930a      	str	r3, [sp, #40]	; 0x28
 800893c:	4607      	mov	r7, r0
 800893e:	2000      	movs	r0, #0
 8008940:	4603      	mov	r3, r0
 8008942:	3a30      	subs	r2, #48	; 0x30
 8008944:	f100 0101 	add.w	r1, r0, #1
 8008948:	d012      	beq.n	8008970 <_strtod_l+0x240>
 800894a:	440f      	add	r7, r1
 800894c:	eb00 0c03 	add.w	ip, r0, r3
 8008950:	4619      	mov	r1, r3
 8008952:	250a      	movs	r5, #10
 8008954:	4561      	cmp	r1, ip
 8008956:	d113      	bne.n	8008980 <_strtod_l+0x250>
 8008958:	1819      	adds	r1, r3, r0
 800895a:	2908      	cmp	r1, #8
 800895c:	f103 0301 	add.w	r3, r3, #1
 8008960:	4403      	add	r3, r0
 8008962:	dc1c      	bgt.n	800899e <_strtod_l+0x26e>
 8008964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008966:	210a      	movs	r1, #10
 8008968:	fb01 2200 	mla	r2, r1, r0, r2
 800896c:	9209      	str	r2, [sp, #36]	; 0x24
 800896e:	2100      	movs	r1, #0
 8008970:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008972:	1c50      	adds	r0, r2, #1
 8008974:	9011      	str	r0, [sp, #68]	; 0x44
 8008976:	7852      	ldrb	r2, [r2, #1]
 8008978:	4608      	mov	r0, r1
 800897a:	e7cb      	b.n	8008914 <_strtod_l+0x1e4>
 800897c:	9806      	ldr	r0, [sp, #24]
 800897e:	e7d4      	b.n	800892a <_strtod_l+0x1fa>
 8008980:	2908      	cmp	r1, #8
 8008982:	dc04      	bgt.n	800898e <_strtod_l+0x25e>
 8008984:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008986:	436e      	muls	r6, r5
 8008988:	9609      	str	r6, [sp, #36]	; 0x24
 800898a:	3101      	adds	r1, #1
 800898c:	e7e2      	b.n	8008954 <_strtod_l+0x224>
 800898e:	f101 0e01 	add.w	lr, r1, #1
 8008992:	f1be 0f10 	cmp.w	lr, #16
 8008996:	bfd8      	it	le
 8008998:	fb05 fa0a 	mulle.w	sl, r5, sl
 800899c:	e7f5      	b.n	800898a <_strtod_l+0x25a>
 800899e:	2b10      	cmp	r3, #16
 80089a0:	bfdc      	itt	le
 80089a2:	210a      	movle	r1, #10
 80089a4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80089a8:	e7e1      	b.n	800896e <_strtod_l+0x23e>
 80089aa:	2700      	movs	r7, #0
 80089ac:	2101      	movs	r1, #1
 80089ae:	e780      	b.n	80088b2 <_strtod_l+0x182>
 80089b0:	f04f 0e00 	mov.w	lr, #0
 80089b4:	f10b 0202 	add.w	r2, fp, #2
 80089b8:	9211      	str	r2, [sp, #68]	; 0x44
 80089ba:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80089be:	e789      	b.n	80088d4 <_strtod_l+0x1a4>
 80089c0:	f04f 0e01 	mov.w	lr, #1
 80089c4:	e7f6      	b.n	80089b4 <_strtod_l+0x284>
 80089c6:	bf00      	nop
 80089c8:	0800c3e0 	.word	0x0800c3e0
 80089cc:	0800c194 	.word	0x0800c194
 80089d0:	7ff00000 	.word	0x7ff00000
 80089d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80089d6:	1c55      	adds	r5, r2, #1
 80089d8:	9511      	str	r5, [sp, #68]	; 0x44
 80089da:	7852      	ldrb	r2, [r2, #1]
 80089dc:	2a30      	cmp	r2, #48	; 0x30
 80089de:	d0f9      	beq.n	80089d4 <_strtod_l+0x2a4>
 80089e0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80089e4:	2d08      	cmp	r5, #8
 80089e6:	f63f af7b 	bhi.w	80088e0 <_strtod_l+0x1b0>
 80089ea:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80089ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80089f0:	9207      	str	r2, [sp, #28]
 80089f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80089f4:	1c55      	adds	r5, r2, #1
 80089f6:	9511      	str	r5, [sp, #68]	; 0x44
 80089f8:	7852      	ldrb	r2, [r2, #1]
 80089fa:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80089fe:	2e09      	cmp	r6, #9
 8008a00:	d937      	bls.n	8008a72 <_strtod_l+0x342>
 8008a02:	9e07      	ldr	r6, [sp, #28]
 8008a04:	1bad      	subs	r5, r5, r6
 8008a06:	2d08      	cmp	r5, #8
 8008a08:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008a0c:	dc02      	bgt.n	8008a14 <_strtod_l+0x2e4>
 8008a0e:	4565      	cmp	r5, ip
 8008a10:	bfa8      	it	ge
 8008a12:	4665      	movge	r5, ip
 8008a14:	f1be 0f00 	cmp.w	lr, #0
 8008a18:	d000      	beq.n	8008a1c <_strtod_l+0x2ec>
 8008a1a:	426d      	negs	r5, r5
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d14d      	bne.n	8008abc <_strtod_l+0x38c>
 8008a20:	9b04      	ldr	r3, [sp, #16]
 8008a22:	4303      	orrs	r3, r0
 8008a24:	f47f aec8 	bne.w	80087b8 <_strtod_l+0x88>
 8008a28:	2900      	cmp	r1, #0
 8008a2a:	f47f aee2 	bne.w	80087f2 <_strtod_l+0xc2>
 8008a2e:	2a69      	cmp	r2, #105	; 0x69
 8008a30:	d027      	beq.n	8008a82 <_strtod_l+0x352>
 8008a32:	dc24      	bgt.n	8008a7e <_strtod_l+0x34e>
 8008a34:	2a49      	cmp	r2, #73	; 0x49
 8008a36:	d024      	beq.n	8008a82 <_strtod_l+0x352>
 8008a38:	2a4e      	cmp	r2, #78	; 0x4e
 8008a3a:	f47f aeda 	bne.w	80087f2 <_strtod_l+0xc2>
 8008a3e:	4996      	ldr	r1, [pc, #600]	; (8008c98 <_strtod_l+0x568>)
 8008a40:	a811      	add	r0, sp, #68	; 0x44
 8008a42:	f001 fd6f 	bl	800a524 <__match>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f43f aed3 	beq.w	80087f2 <_strtod_l+0xc2>
 8008a4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	2b28      	cmp	r3, #40	; 0x28
 8008a52:	d12d      	bne.n	8008ab0 <_strtod_l+0x380>
 8008a54:	4991      	ldr	r1, [pc, #580]	; (8008c9c <_strtod_l+0x56c>)
 8008a56:	aa14      	add	r2, sp, #80	; 0x50
 8008a58:	a811      	add	r0, sp, #68	; 0x44
 8008a5a:	f001 fd77 	bl	800a54c <__hexnan>
 8008a5e:	2805      	cmp	r0, #5
 8008a60:	d126      	bne.n	8008ab0 <_strtod_l+0x380>
 8008a62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a64:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008a68:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008a6c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008a70:	e6a2      	b.n	80087b8 <_strtod_l+0x88>
 8008a72:	250a      	movs	r5, #10
 8008a74:	fb05 250c 	mla	r5, r5, ip, r2
 8008a78:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008a7c:	e7b9      	b.n	80089f2 <_strtod_l+0x2c2>
 8008a7e:	2a6e      	cmp	r2, #110	; 0x6e
 8008a80:	e7db      	b.n	8008a3a <_strtod_l+0x30a>
 8008a82:	4987      	ldr	r1, [pc, #540]	; (8008ca0 <_strtod_l+0x570>)
 8008a84:	a811      	add	r0, sp, #68	; 0x44
 8008a86:	f001 fd4d 	bl	800a524 <__match>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	f43f aeb1 	beq.w	80087f2 <_strtod_l+0xc2>
 8008a90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a92:	4984      	ldr	r1, [pc, #528]	; (8008ca4 <_strtod_l+0x574>)
 8008a94:	3b01      	subs	r3, #1
 8008a96:	a811      	add	r0, sp, #68	; 0x44
 8008a98:	9311      	str	r3, [sp, #68]	; 0x44
 8008a9a:	f001 fd43 	bl	800a524 <__match>
 8008a9e:	b910      	cbnz	r0, 8008aa6 <_strtod_l+0x376>
 8008aa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	9311      	str	r3, [sp, #68]	; 0x44
 8008aa6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8008cb8 <_strtod_l+0x588>
 8008aaa:	f04f 0800 	mov.w	r8, #0
 8008aae:	e683      	b.n	80087b8 <_strtod_l+0x88>
 8008ab0:	487d      	ldr	r0, [pc, #500]	; (8008ca8 <_strtod_l+0x578>)
 8008ab2:	f002 fd25 	bl	800b500 <nan>
 8008ab6:	ec59 8b10 	vmov	r8, r9, d0
 8008aba:	e67d      	b.n	80087b8 <_strtod_l+0x88>
 8008abc:	1bea      	subs	r2, r5, r7
 8008abe:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8008ac2:	9207      	str	r2, [sp, #28]
 8008ac4:	9a06      	ldr	r2, [sp, #24]
 8008ac6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	bf08      	it	eq
 8008ace:	461a      	moveq	r2, r3
 8008ad0:	2b10      	cmp	r3, #16
 8008ad2:	9206      	str	r2, [sp, #24]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	bfa8      	it	ge
 8008ad8:	2210      	movge	r2, #16
 8008ada:	2b09      	cmp	r3, #9
 8008adc:	ec59 8b17 	vmov	r8, r9, d7
 8008ae0:	dd0c      	ble.n	8008afc <_strtod_l+0x3cc>
 8008ae2:	4972      	ldr	r1, [pc, #456]	; (8008cac <_strtod_l+0x57c>)
 8008ae4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008ae8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8008aec:	ee06 aa90 	vmov	s13, sl
 8008af0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008af4:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008af8:	ec59 8b16 	vmov	r8, r9, d6
 8008afc:	2b0f      	cmp	r3, #15
 8008afe:	dc36      	bgt.n	8008b6e <_strtod_l+0x43e>
 8008b00:	9907      	ldr	r1, [sp, #28]
 8008b02:	2900      	cmp	r1, #0
 8008b04:	f43f ae58 	beq.w	80087b8 <_strtod_l+0x88>
 8008b08:	dd23      	ble.n	8008b52 <_strtod_l+0x422>
 8008b0a:	2916      	cmp	r1, #22
 8008b0c:	dc0b      	bgt.n	8008b26 <_strtod_l+0x3f6>
 8008b0e:	4b67      	ldr	r3, [pc, #412]	; (8008cac <_strtod_l+0x57c>)
 8008b10:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008b14:	ed93 7b00 	vldr	d7, [r3]
 8008b18:	ec49 8b16 	vmov	d6, r8, r9
 8008b1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b20:	ec59 8b17 	vmov	r8, r9, d7
 8008b24:	e648      	b.n	80087b8 <_strtod_l+0x88>
 8008b26:	9807      	ldr	r0, [sp, #28]
 8008b28:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008b2c:	4281      	cmp	r1, r0
 8008b2e:	db1e      	blt.n	8008b6e <_strtod_l+0x43e>
 8008b30:	4a5e      	ldr	r2, [pc, #376]	; (8008cac <_strtod_l+0x57c>)
 8008b32:	f1c3 030f 	rsb	r3, r3, #15
 8008b36:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008b3a:	ed91 7b00 	vldr	d7, [r1]
 8008b3e:	ec49 8b16 	vmov	d6, r8, r9
 8008b42:	1ac3      	subs	r3, r0, r3
 8008b44:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008b48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b4c:	ed92 6b00 	vldr	d6, [r2]
 8008b50:	e7e4      	b.n	8008b1c <_strtod_l+0x3ec>
 8008b52:	9907      	ldr	r1, [sp, #28]
 8008b54:	3116      	adds	r1, #22
 8008b56:	db0a      	blt.n	8008b6e <_strtod_l+0x43e>
 8008b58:	4b54      	ldr	r3, [pc, #336]	; (8008cac <_strtod_l+0x57c>)
 8008b5a:	1b7d      	subs	r5, r7, r5
 8008b5c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008b60:	ed95 7b00 	vldr	d7, [r5]
 8008b64:	ec49 8b16 	vmov	d6, r8, r9
 8008b68:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008b6c:	e7d8      	b.n	8008b20 <_strtod_l+0x3f0>
 8008b6e:	9907      	ldr	r1, [sp, #28]
 8008b70:	1a9a      	subs	r2, r3, r2
 8008b72:	440a      	add	r2, r1
 8008b74:	2a00      	cmp	r2, #0
 8008b76:	dd6f      	ble.n	8008c58 <_strtod_l+0x528>
 8008b78:	f012 000f 	ands.w	r0, r2, #15
 8008b7c:	d00a      	beq.n	8008b94 <_strtod_l+0x464>
 8008b7e:	494b      	ldr	r1, [pc, #300]	; (8008cac <_strtod_l+0x57c>)
 8008b80:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008b84:	ed91 7b00 	vldr	d7, [r1]
 8008b88:	ec49 8b16 	vmov	d6, r8, r9
 8008b8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b90:	ec59 8b17 	vmov	r8, r9, d7
 8008b94:	f032 020f 	bics.w	r2, r2, #15
 8008b98:	d04f      	beq.n	8008c3a <_strtod_l+0x50a>
 8008b9a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008b9e:	dd22      	ble.n	8008be6 <_strtod_l+0x4b6>
 8008ba0:	2500      	movs	r5, #0
 8008ba2:	462e      	mov	r6, r5
 8008ba4:	9506      	str	r5, [sp, #24]
 8008ba6:	462f      	mov	r7, r5
 8008ba8:	2322      	movs	r3, #34	; 0x22
 8008baa:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008cb8 <_strtod_l+0x588>
 8008bae:	6023      	str	r3, [r4, #0]
 8008bb0:	f04f 0800 	mov.w	r8, #0
 8008bb4:	9b06      	ldr	r3, [sp, #24]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f43f adfe 	beq.w	80087b8 <_strtod_l+0x88>
 8008bbc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f001 fdcc 	bl	800a75c <_Bfree>
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f001 fdc8 	bl	800a75c <_Bfree>
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f001 fdc4 	bl	800a75c <_Bfree>
 8008bd4:	9906      	ldr	r1, [sp, #24]
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f001 fdc0 	bl	800a75c <_Bfree>
 8008bdc:	4629      	mov	r1, r5
 8008bde:	4620      	mov	r0, r4
 8008be0:	f001 fdbc 	bl	800a75c <_Bfree>
 8008be4:	e5e8      	b.n	80087b8 <_strtod_l+0x88>
 8008be6:	2000      	movs	r0, #0
 8008be8:	ec49 8b17 	vmov	d7, r8, r9
 8008bec:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8008cb0 <_strtod_l+0x580>
 8008bf0:	1112      	asrs	r2, r2, #4
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	2a01      	cmp	r2, #1
 8008bf6:	dc23      	bgt.n	8008c40 <_strtod_l+0x510>
 8008bf8:	b108      	cbz	r0, 8008bfe <_strtod_l+0x4ce>
 8008bfa:	ec59 8b17 	vmov	r8, r9, d7
 8008bfe:	4a2c      	ldr	r2, [pc, #176]	; (8008cb0 <_strtod_l+0x580>)
 8008c00:	482c      	ldr	r0, [pc, #176]	; (8008cb4 <_strtod_l+0x584>)
 8008c02:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008c06:	ed92 7b00 	vldr	d7, [r2]
 8008c0a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008c0e:	ec49 8b16 	vmov	d6, r8, r9
 8008c12:	4a29      	ldr	r2, [pc, #164]	; (8008cb8 <_strtod_l+0x588>)
 8008c14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c18:	ee17 1a90 	vmov	r1, s15
 8008c1c:	400a      	ands	r2, r1
 8008c1e:	4282      	cmp	r2, r0
 8008c20:	ec59 8b17 	vmov	r8, r9, d7
 8008c24:	d8bc      	bhi.n	8008ba0 <_strtod_l+0x470>
 8008c26:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008c2a:	4282      	cmp	r2, r0
 8008c2c:	bf86      	itte	hi
 8008c2e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008cbc <_strtod_l+0x58c>
 8008c32:	f04f 38ff 	movhi.w	r8, #4294967295
 8008c36:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	9204      	str	r2, [sp, #16]
 8008c3e:	e078      	b.n	8008d32 <_strtod_l+0x602>
 8008c40:	07d6      	lsls	r6, r2, #31
 8008c42:	d504      	bpl.n	8008c4e <_strtod_l+0x51e>
 8008c44:	ed9c 6b00 	vldr	d6, [ip]
 8008c48:	2001      	movs	r0, #1
 8008c4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c4e:	3101      	adds	r1, #1
 8008c50:	1052      	asrs	r2, r2, #1
 8008c52:	f10c 0c08 	add.w	ip, ip, #8
 8008c56:	e7cd      	b.n	8008bf4 <_strtod_l+0x4c4>
 8008c58:	d0ef      	beq.n	8008c3a <_strtod_l+0x50a>
 8008c5a:	4252      	negs	r2, r2
 8008c5c:	f012 000f 	ands.w	r0, r2, #15
 8008c60:	d00a      	beq.n	8008c78 <_strtod_l+0x548>
 8008c62:	4912      	ldr	r1, [pc, #72]	; (8008cac <_strtod_l+0x57c>)
 8008c64:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008c68:	ed91 7b00 	vldr	d7, [r1]
 8008c6c:	ec49 8b16 	vmov	d6, r8, r9
 8008c70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008c74:	ec59 8b17 	vmov	r8, r9, d7
 8008c78:	1112      	asrs	r2, r2, #4
 8008c7a:	d0de      	beq.n	8008c3a <_strtod_l+0x50a>
 8008c7c:	2a1f      	cmp	r2, #31
 8008c7e:	dd1f      	ble.n	8008cc0 <_strtod_l+0x590>
 8008c80:	2500      	movs	r5, #0
 8008c82:	462e      	mov	r6, r5
 8008c84:	9506      	str	r5, [sp, #24]
 8008c86:	462f      	mov	r7, r5
 8008c88:	2322      	movs	r3, #34	; 0x22
 8008c8a:	f04f 0800 	mov.w	r8, #0
 8008c8e:	f04f 0900 	mov.w	r9, #0
 8008c92:	6023      	str	r3, [r4, #0]
 8008c94:	e78e      	b.n	8008bb4 <_strtod_l+0x484>
 8008c96:	bf00      	nop
 8008c98:	0800c165 	.word	0x0800c165
 8008c9c:	0800c1a8 	.word	0x0800c1a8
 8008ca0:	0800c15d 	.word	0x0800c15d
 8008ca4:	0800c2ec 	.word	0x0800c2ec
 8008ca8:	0800c598 	.word	0x0800c598
 8008cac:	0800c478 	.word	0x0800c478
 8008cb0:	0800c450 	.word	0x0800c450
 8008cb4:	7ca00000 	.word	0x7ca00000
 8008cb8:	7ff00000 	.word	0x7ff00000
 8008cbc:	7fefffff 	.word	0x7fefffff
 8008cc0:	f012 0110 	ands.w	r1, r2, #16
 8008cc4:	bf18      	it	ne
 8008cc6:	216a      	movne	r1, #106	; 0x6a
 8008cc8:	9104      	str	r1, [sp, #16]
 8008cca:	ec49 8b17 	vmov	d7, r8, r9
 8008cce:	49be      	ldr	r1, [pc, #760]	; (8008fc8 <_strtod_l+0x898>)
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	07d6      	lsls	r6, r2, #31
 8008cd4:	d504      	bpl.n	8008ce0 <_strtod_l+0x5b0>
 8008cd6:	ed91 6b00 	vldr	d6, [r1]
 8008cda:	2001      	movs	r0, #1
 8008cdc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ce0:	1052      	asrs	r2, r2, #1
 8008ce2:	f101 0108 	add.w	r1, r1, #8
 8008ce6:	d1f4      	bne.n	8008cd2 <_strtod_l+0x5a2>
 8008ce8:	b108      	cbz	r0, 8008cee <_strtod_l+0x5be>
 8008cea:	ec59 8b17 	vmov	r8, r9, d7
 8008cee:	9a04      	ldr	r2, [sp, #16]
 8008cf0:	b1c2      	cbz	r2, 8008d24 <_strtod_l+0x5f4>
 8008cf2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8008cf6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8008cfa:	2a00      	cmp	r2, #0
 8008cfc:	4648      	mov	r0, r9
 8008cfe:	dd11      	ble.n	8008d24 <_strtod_l+0x5f4>
 8008d00:	2a1f      	cmp	r2, #31
 8008d02:	f340 812e 	ble.w	8008f62 <_strtod_l+0x832>
 8008d06:	2a34      	cmp	r2, #52	; 0x34
 8008d08:	bfde      	ittt	le
 8008d0a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8008d0e:	f04f 32ff 	movle.w	r2, #4294967295
 8008d12:	fa02 f101 	lslle.w	r1, r2, r1
 8008d16:	f04f 0800 	mov.w	r8, #0
 8008d1a:	bfcc      	ite	gt
 8008d1c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008d20:	ea01 0900 	andle.w	r9, r1, r0
 8008d24:	ec49 8b17 	vmov	d7, r8, r9
 8008d28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d30:	d0a6      	beq.n	8008c80 <_strtod_l+0x550>
 8008d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d34:	9200      	str	r2, [sp, #0]
 8008d36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d38:	9a06      	ldr	r2, [sp, #24]
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f001 fd76 	bl	800a82c <__s2b>
 8008d40:	9006      	str	r0, [sp, #24]
 8008d42:	2800      	cmp	r0, #0
 8008d44:	f43f af2c 	beq.w	8008ba0 <_strtod_l+0x470>
 8008d48:	9b07      	ldr	r3, [sp, #28]
 8008d4a:	1b7d      	subs	r5, r7, r5
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	bfb4      	ite	lt
 8008d50:	462b      	movlt	r3, r5
 8008d52:	2300      	movge	r3, #0
 8008d54:	9309      	str	r3, [sp, #36]	; 0x24
 8008d56:	9b07      	ldr	r3, [sp, #28]
 8008d58:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8008fa8 <_strtod_l+0x878>
 8008d5c:	ed9f ab94 	vldr	d10, [pc, #592]	; 8008fb0 <_strtod_l+0x880>
 8008d60:	ed9f bb95 	vldr	d11, [pc, #596]	; 8008fb8 <_strtod_l+0x888>
 8008d64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008d68:	2500      	movs	r5, #0
 8008d6a:	930c      	str	r3, [sp, #48]	; 0x30
 8008d6c:	462e      	mov	r6, r5
 8008d6e:	9b06      	ldr	r3, [sp, #24]
 8008d70:	4620      	mov	r0, r4
 8008d72:	6859      	ldr	r1, [r3, #4]
 8008d74:	f001 fcb2 	bl	800a6dc <_Balloc>
 8008d78:	4607      	mov	r7, r0
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	f43f af14 	beq.w	8008ba8 <_strtod_l+0x478>
 8008d80:	9b06      	ldr	r3, [sp, #24]
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	3202      	adds	r2, #2
 8008d86:	f103 010c 	add.w	r1, r3, #12
 8008d8a:	0092      	lsls	r2, r2, #2
 8008d8c:	300c      	adds	r0, #12
 8008d8e:	f001 fc97 	bl	800a6c0 <memcpy>
 8008d92:	ec49 8b10 	vmov	d0, r8, r9
 8008d96:	aa14      	add	r2, sp, #80	; 0x50
 8008d98:	a913      	add	r1, sp, #76	; 0x4c
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f002 f88c 	bl	800aeb8 <__d2b>
 8008da0:	ec49 8b18 	vmov	d8, r8, r9
 8008da4:	9012      	str	r0, [sp, #72]	; 0x48
 8008da6:	2800      	cmp	r0, #0
 8008da8:	f43f aefe 	beq.w	8008ba8 <_strtod_l+0x478>
 8008dac:	2101      	movs	r1, #1
 8008dae:	4620      	mov	r0, r4
 8008db0:	f001 fdd6 	bl	800a960 <__i2b>
 8008db4:	4606      	mov	r6, r0
 8008db6:	2800      	cmp	r0, #0
 8008db8:	f43f aef6 	beq.w	8008ba8 <_strtod_l+0x478>
 8008dbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dbe:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	bfab      	itete	ge
 8008dc4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8008dc6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008dc8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008dcc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008dd0:	bfac      	ite	ge
 8008dd2:	eb03 0b02 	addge.w	fp, r3, r2
 8008dd6:	eba2 0a03 	sublt.w	sl, r2, r3
 8008dda:	9a04      	ldr	r2, [sp, #16]
 8008ddc:	1a9b      	subs	r3, r3, r2
 8008dde:	440b      	add	r3, r1
 8008de0:	4a7a      	ldr	r2, [pc, #488]	; (8008fcc <_strtod_l+0x89c>)
 8008de2:	3b01      	subs	r3, #1
 8008de4:	4293      	cmp	r3, r2
 8008de6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008dea:	f280 80cd 	bge.w	8008f88 <_strtod_l+0x858>
 8008dee:	1ad2      	subs	r2, r2, r3
 8008df0:	2a1f      	cmp	r2, #31
 8008df2:	eba1 0102 	sub.w	r1, r1, r2
 8008df6:	f04f 0001 	mov.w	r0, #1
 8008dfa:	f300 80b9 	bgt.w	8008f70 <_strtod_l+0x840>
 8008dfe:	fa00 f302 	lsl.w	r3, r0, r2
 8008e02:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e04:	2300      	movs	r3, #0
 8008e06:	930a      	str	r3, [sp, #40]	; 0x28
 8008e08:	eb0b 0301 	add.w	r3, fp, r1
 8008e0c:	9a04      	ldr	r2, [sp, #16]
 8008e0e:	459b      	cmp	fp, r3
 8008e10:	448a      	add	sl, r1
 8008e12:	4492      	add	sl, r2
 8008e14:	465a      	mov	r2, fp
 8008e16:	bfa8      	it	ge
 8008e18:	461a      	movge	r2, r3
 8008e1a:	4552      	cmp	r2, sl
 8008e1c:	bfa8      	it	ge
 8008e1e:	4652      	movge	r2, sl
 8008e20:	2a00      	cmp	r2, #0
 8008e22:	bfc2      	ittt	gt
 8008e24:	1a9b      	subgt	r3, r3, r2
 8008e26:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008e2a:	ebab 0b02 	subgt.w	fp, fp, r2
 8008e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e30:	2a00      	cmp	r2, #0
 8008e32:	dd18      	ble.n	8008e66 <_strtod_l+0x736>
 8008e34:	4631      	mov	r1, r6
 8008e36:	4620      	mov	r0, r4
 8008e38:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e3a:	f001 fe51 	bl	800aae0 <__pow5mult>
 8008e3e:	4606      	mov	r6, r0
 8008e40:	2800      	cmp	r0, #0
 8008e42:	f43f aeb1 	beq.w	8008ba8 <_strtod_l+0x478>
 8008e46:	4601      	mov	r1, r0
 8008e48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f001 fd9e 	bl	800a98c <__multiply>
 8008e50:	900e      	str	r0, [sp, #56]	; 0x38
 8008e52:	2800      	cmp	r0, #0
 8008e54:	f43f aea8 	beq.w	8008ba8 <_strtod_l+0x478>
 8008e58:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f001 fc7e 	bl	800a75c <_Bfree>
 8008e60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e64:	9212      	str	r2, [sp, #72]	; 0x48
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f300 8093 	bgt.w	8008f92 <_strtod_l+0x862>
 8008e6c:	9b07      	ldr	r3, [sp, #28]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	dd08      	ble.n	8008e84 <_strtod_l+0x754>
 8008e72:	4639      	mov	r1, r7
 8008e74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e76:	4620      	mov	r0, r4
 8008e78:	f001 fe32 	bl	800aae0 <__pow5mult>
 8008e7c:	4607      	mov	r7, r0
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	f43f ae92 	beq.w	8008ba8 <_strtod_l+0x478>
 8008e84:	f1ba 0f00 	cmp.w	sl, #0
 8008e88:	dd08      	ble.n	8008e9c <_strtod_l+0x76c>
 8008e8a:	4639      	mov	r1, r7
 8008e8c:	4652      	mov	r2, sl
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f001 fe80 	bl	800ab94 <__lshift>
 8008e94:	4607      	mov	r7, r0
 8008e96:	2800      	cmp	r0, #0
 8008e98:	f43f ae86 	beq.w	8008ba8 <_strtod_l+0x478>
 8008e9c:	f1bb 0f00 	cmp.w	fp, #0
 8008ea0:	dd08      	ble.n	8008eb4 <_strtod_l+0x784>
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	465a      	mov	r2, fp
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f001 fe74 	bl	800ab94 <__lshift>
 8008eac:	4606      	mov	r6, r0
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	f43f ae7a 	beq.w	8008ba8 <_strtod_l+0x478>
 8008eb4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008eb6:	463a      	mov	r2, r7
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f001 fef7 	bl	800acac <__mdiff>
 8008ebe:	4605      	mov	r5, r0
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	f43f ae71 	beq.w	8008ba8 <_strtod_l+0x478>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008ecc:	60c3      	str	r3, [r0, #12]
 8008ece:	4631      	mov	r1, r6
 8008ed0:	f001 fed0 	bl	800ac74 <__mcmp>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	da7d      	bge.n	8008fd4 <_strtod_l+0x8a4>
 8008ed8:	ea5a 0308 	orrs.w	r3, sl, r8
 8008edc:	f040 80a3 	bne.w	8009026 <_strtod_l+0x8f6>
 8008ee0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f040 809e 	bne.w	8009026 <_strtod_l+0x8f6>
 8008eea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008eee:	0d1b      	lsrs	r3, r3, #20
 8008ef0:	051b      	lsls	r3, r3, #20
 8008ef2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008ef6:	f240 8096 	bls.w	8009026 <_strtod_l+0x8f6>
 8008efa:	696b      	ldr	r3, [r5, #20]
 8008efc:	b91b      	cbnz	r3, 8008f06 <_strtod_l+0x7d6>
 8008efe:	692b      	ldr	r3, [r5, #16]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	f340 8090 	ble.w	8009026 <_strtod_l+0x8f6>
 8008f06:	4629      	mov	r1, r5
 8008f08:	2201      	movs	r2, #1
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f001 fe42 	bl	800ab94 <__lshift>
 8008f10:	4631      	mov	r1, r6
 8008f12:	4605      	mov	r5, r0
 8008f14:	f001 feae 	bl	800ac74 <__mcmp>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	f340 8084 	ble.w	8009026 <_strtod_l+0x8f6>
 8008f1e:	9904      	ldr	r1, [sp, #16]
 8008f20:	4a2b      	ldr	r2, [pc, #172]	; (8008fd0 <_strtod_l+0x8a0>)
 8008f22:	464b      	mov	r3, r9
 8008f24:	2900      	cmp	r1, #0
 8008f26:	f000 809d 	beq.w	8009064 <_strtod_l+0x934>
 8008f2a:	ea02 0109 	and.w	r1, r2, r9
 8008f2e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008f32:	f300 8097 	bgt.w	8009064 <_strtod_l+0x934>
 8008f36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008f3a:	f77f aea5 	ble.w	8008c88 <_strtod_l+0x558>
 8008f3e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008fc0 <_strtod_l+0x890>
 8008f42:	ec49 8b16 	vmov	d6, r8, r9
 8008f46:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008f4a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008f4e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	bf08      	it	eq
 8008f56:	2322      	moveq	r3, #34	; 0x22
 8008f58:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008f5c:	bf08      	it	eq
 8008f5e:	6023      	streq	r3, [r4, #0]
 8008f60:	e62c      	b.n	8008bbc <_strtod_l+0x48c>
 8008f62:	f04f 31ff 	mov.w	r1, #4294967295
 8008f66:	fa01 f202 	lsl.w	r2, r1, r2
 8008f6a:	ea02 0808 	and.w	r8, r2, r8
 8008f6e:	e6d9      	b.n	8008d24 <_strtod_l+0x5f4>
 8008f70:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008f74:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008f78:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008f7c:	33e2      	adds	r3, #226	; 0xe2
 8008f7e:	fa00 f303 	lsl.w	r3, r0, r3
 8008f82:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008f86:	e73f      	b.n	8008e08 <_strtod_l+0x6d8>
 8008f88:	2200      	movs	r2, #0
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008f90:	e73a      	b.n	8008e08 <_strtod_l+0x6d8>
 8008f92:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008f94:	461a      	mov	r2, r3
 8008f96:	4620      	mov	r0, r4
 8008f98:	f001 fdfc 	bl	800ab94 <__lshift>
 8008f9c:	9012      	str	r0, [sp, #72]	; 0x48
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	f47f af64 	bne.w	8008e6c <_strtod_l+0x73c>
 8008fa4:	e600      	b.n	8008ba8 <_strtod_l+0x478>
 8008fa6:	bf00      	nop
 8008fa8:	94a03595 	.word	0x94a03595
 8008fac:	3fcfffff 	.word	0x3fcfffff
 8008fb0:	94a03595 	.word	0x94a03595
 8008fb4:	3fdfffff 	.word	0x3fdfffff
 8008fb8:	35afe535 	.word	0x35afe535
 8008fbc:	3fe00000 	.word	0x3fe00000
 8008fc0:	00000000 	.word	0x00000000
 8008fc4:	39500000 	.word	0x39500000
 8008fc8:	0800c1c0 	.word	0x0800c1c0
 8008fcc:	fffffc02 	.word	0xfffffc02
 8008fd0:	7ff00000 	.word	0x7ff00000
 8008fd4:	46cb      	mov	fp, r9
 8008fd6:	d15f      	bne.n	8009098 <_strtod_l+0x968>
 8008fd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fdc:	f1ba 0f00 	cmp.w	sl, #0
 8008fe0:	d02a      	beq.n	8009038 <_strtod_l+0x908>
 8008fe2:	4aa7      	ldr	r2, [pc, #668]	; (8009280 <_strtod_l+0xb50>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d12b      	bne.n	8009040 <_strtod_l+0x910>
 8008fe8:	9b04      	ldr	r3, [sp, #16]
 8008fea:	4642      	mov	r2, r8
 8008fec:	b1fb      	cbz	r3, 800902e <_strtod_l+0x8fe>
 8008fee:	4ba5      	ldr	r3, [pc, #660]	; (8009284 <_strtod_l+0xb54>)
 8008ff0:	ea09 0303 	and.w	r3, r9, r3
 8008ff4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8008ffc:	d81a      	bhi.n	8009034 <_strtod_l+0x904>
 8008ffe:	0d1b      	lsrs	r3, r3, #20
 8009000:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009004:	fa01 f303 	lsl.w	r3, r1, r3
 8009008:	429a      	cmp	r2, r3
 800900a:	d119      	bne.n	8009040 <_strtod_l+0x910>
 800900c:	4b9e      	ldr	r3, [pc, #632]	; (8009288 <_strtod_l+0xb58>)
 800900e:	459b      	cmp	fp, r3
 8009010:	d102      	bne.n	8009018 <_strtod_l+0x8e8>
 8009012:	3201      	adds	r2, #1
 8009014:	f43f adc8 	beq.w	8008ba8 <_strtod_l+0x478>
 8009018:	4b9a      	ldr	r3, [pc, #616]	; (8009284 <_strtod_l+0xb54>)
 800901a:	ea0b 0303 	and.w	r3, fp, r3
 800901e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009022:	f04f 0800 	mov.w	r8, #0
 8009026:	9b04      	ldr	r3, [sp, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d188      	bne.n	8008f3e <_strtod_l+0x80e>
 800902c:	e5c6      	b.n	8008bbc <_strtod_l+0x48c>
 800902e:	f04f 33ff 	mov.w	r3, #4294967295
 8009032:	e7e9      	b.n	8009008 <_strtod_l+0x8d8>
 8009034:	460b      	mov	r3, r1
 8009036:	e7e7      	b.n	8009008 <_strtod_l+0x8d8>
 8009038:	ea53 0308 	orrs.w	r3, r3, r8
 800903c:	f43f af6f 	beq.w	8008f1e <_strtod_l+0x7ee>
 8009040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009042:	b1cb      	cbz	r3, 8009078 <_strtod_l+0x948>
 8009044:	ea13 0f0b 	tst.w	r3, fp
 8009048:	d0ed      	beq.n	8009026 <_strtod_l+0x8f6>
 800904a:	9a04      	ldr	r2, [sp, #16]
 800904c:	4640      	mov	r0, r8
 800904e:	4649      	mov	r1, r9
 8009050:	f1ba 0f00 	cmp.w	sl, #0
 8009054:	d014      	beq.n	8009080 <_strtod_l+0x950>
 8009056:	f7ff fb51 	bl	80086fc <sulp>
 800905a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800905e:	ec59 8b17 	vmov	r8, r9, d7
 8009062:	e7e0      	b.n	8009026 <_strtod_l+0x8f6>
 8009064:	4013      	ands	r3, r2
 8009066:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800906a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800906e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009072:	f04f 38ff 	mov.w	r8, #4294967295
 8009076:	e7d6      	b.n	8009026 <_strtod_l+0x8f6>
 8009078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800907a:	ea13 0f08 	tst.w	r3, r8
 800907e:	e7e3      	b.n	8009048 <_strtod_l+0x918>
 8009080:	f7ff fb3c 	bl	80086fc <sulp>
 8009084:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009088:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800908c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009090:	ec59 8b10 	vmov	r8, r9, d0
 8009094:	d1c7      	bne.n	8009026 <_strtod_l+0x8f6>
 8009096:	e5f7      	b.n	8008c88 <_strtod_l+0x558>
 8009098:	4631      	mov	r1, r6
 800909a:	4628      	mov	r0, r5
 800909c:	f001 ff68 	bl	800af70 <__ratio>
 80090a0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80090a4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80090a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ac:	d865      	bhi.n	800917a <_strtod_l+0xa4a>
 80090ae:	f1ba 0f00 	cmp.w	sl, #0
 80090b2:	d042      	beq.n	800913a <_strtod_l+0xa0a>
 80090b4:	4b75      	ldr	r3, [pc, #468]	; (800928c <_strtod_l+0xb5c>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80090bc:	4871      	ldr	r0, [pc, #452]	; (8009284 <_strtod_l+0xb54>)
 80090be:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009298 <_strtod_l+0xb68>
 80090c2:	ea0b 0100 	and.w	r1, fp, r0
 80090c6:	4561      	cmp	r1, ip
 80090c8:	f040 808e 	bne.w	80091e8 <_strtod_l+0xab8>
 80090cc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80090d0:	ec49 8b10 	vmov	d0, r8, r9
 80090d4:	ec43 2b1c 	vmov	d12, r2, r3
 80090d8:	910a      	str	r1, [sp, #40]	; 0x28
 80090da:	f001 fe71 	bl	800adc0 <__ulp>
 80090de:	ec49 8b1e 	vmov	d14, r8, r9
 80090e2:	4868      	ldr	r0, [pc, #416]	; (8009284 <_strtod_l+0xb54>)
 80090e4:	eeac eb00 	vfma.f64	d14, d12, d0
 80090e8:	ee1e 3a90 	vmov	r3, s29
 80090ec:	4a68      	ldr	r2, [pc, #416]	; (8009290 <_strtod_l+0xb60>)
 80090ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090f0:	4018      	ands	r0, r3
 80090f2:	4290      	cmp	r0, r2
 80090f4:	ec59 8b1e 	vmov	r8, r9, d14
 80090f8:	d94e      	bls.n	8009198 <_strtod_l+0xa68>
 80090fa:	ee18 3a90 	vmov	r3, s17
 80090fe:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009102:	4293      	cmp	r3, r2
 8009104:	d104      	bne.n	8009110 <_strtod_l+0x9e0>
 8009106:	ee18 3a10 	vmov	r3, s16
 800910a:	3301      	adds	r3, #1
 800910c:	f43f ad4c 	beq.w	8008ba8 <_strtod_l+0x478>
 8009110:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009288 <_strtod_l+0xb58>
 8009114:	f04f 38ff 	mov.w	r8, #4294967295
 8009118:	9912      	ldr	r1, [sp, #72]	; 0x48
 800911a:	4620      	mov	r0, r4
 800911c:	f001 fb1e 	bl	800a75c <_Bfree>
 8009120:	4639      	mov	r1, r7
 8009122:	4620      	mov	r0, r4
 8009124:	f001 fb1a 	bl	800a75c <_Bfree>
 8009128:	4631      	mov	r1, r6
 800912a:	4620      	mov	r0, r4
 800912c:	f001 fb16 	bl	800a75c <_Bfree>
 8009130:	4629      	mov	r1, r5
 8009132:	4620      	mov	r0, r4
 8009134:	f001 fb12 	bl	800a75c <_Bfree>
 8009138:	e619      	b.n	8008d6e <_strtod_l+0x63e>
 800913a:	f1b8 0f00 	cmp.w	r8, #0
 800913e:	d112      	bne.n	8009166 <_strtod_l+0xa36>
 8009140:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009144:	b9b3      	cbnz	r3, 8009174 <_strtod_l+0xa44>
 8009146:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800914a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800914e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009152:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009156:	bf58      	it	pl
 8009158:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800915c:	eeb1 7b4d 	vneg.f64	d7, d13
 8009160:	ec53 2b17 	vmov	r2, r3, d7
 8009164:	e7aa      	b.n	80090bc <_strtod_l+0x98c>
 8009166:	f1b8 0f01 	cmp.w	r8, #1
 800916a:	d103      	bne.n	8009174 <_strtod_l+0xa44>
 800916c:	f1b9 0f00 	cmp.w	r9, #0
 8009170:	f43f ad8a 	beq.w	8008c88 <_strtod_l+0x558>
 8009174:	4b47      	ldr	r3, [pc, #284]	; (8009294 <_strtod_l+0xb64>)
 8009176:	2200      	movs	r2, #0
 8009178:	e79e      	b.n	80090b8 <_strtod_l+0x988>
 800917a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800917e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8009182:	f1ba 0f00 	cmp.w	sl, #0
 8009186:	d104      	bne.n	8009192 <_strtod_l+0xa62>
 8009188:	eeb1 7b4d 	vneg.f64	d7, d13
 800918c:	ec53 2b17 	vmov	r2, r3, d7
 8009190:	e794      	b.n	80090bc <_strtod_l+0x98c>
 8009192:	eeb0 7b4d 	vmov.f64	d7, d13
 8009196:	e7f9      	b.n	800918c <_strtod_l+0xa5c>
 8009198:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800919c:	9b04      	ldr	r3, [sp, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1ba      	bne.n	8009118 <_strtod_l+0x9e8>
 80091a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091a6:	0d1b      	lsrs	r3, r3, #20
 80091a8:	051b      	lsls	r3, r3, #20
 80091aa:	4299      	cmp	r1, r3
 80091ac:	d1b4      	bne.n	8009118 <_strtod_l+0x9e8>
 80091ae:	ec51 0b1d 	vmov	r0, r1, d13
 80091b2:	f7f7 fac1 	bl	8000738 <__aeabi_d2lz>
 80091b6:	f7f7 fa79 	bl	80006ac <__aeabi_l2d>
 80091ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091be:	ec41 0b17 	vmov	d7, r0, r1
 80091c2:	ea43 0308 	orr.w	r3, r3, r8
 80091c6:	ea53 030a 	orrs.w	r3, r3, sl
 80091ca:	ee3d db47 	vsub.f64	d13, d13, d7
 80091ce:	d03c      	beq.n	800924a <_strtod_l+0xb1a>
 80091d0:	eeb4 dbca 	vcmpe.f64	d13, d10
 80091d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d8:	f53f acf0 	bmi.w	8008bbc <_strtod_l+0x48c>
 80091dc:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80091e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e4:	dd98      	ble.n	8009118 <_strtod_l+0x9e8>
 80091e6:	e4e9      	b.n	8008bbc <_strtod_l+0x48c>
 80091e8:	9804      	ldr	r0, [sp, #16]
 80091ea:	b1f0      	cbz	r0, 800922a <_strtod_l+0xafa>
 80091ec:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80091f0:	d81b      	bhi.n	800922a <_strtod_l+0xafa>
 80091f2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009278 <_strtod_l+0xb48>
 80091f6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80091fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091fe:	d811      	bhi.n	8009224 <_strtod_l+0xaf4>
 8009200:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8009204:	ee1d 3a10 	vmov	r3, s26
 8009208:	2b01      	cmp	r3, #1
 800920a:	bf38      	it	cc
 800920c:	2301      	movcc	r3, #1
 800920e:	ee0d 3a10 	vmov	s26, r3
 8009212:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8009216:	f1ba 0f00 	cmp.w	sl, #0
 800921a:	d113      	bne.n	8009244 <_strtod_l+0xb14>
 800921c:	eeb1 7b4d 	vneg.f64	d7, d13
 8009220:	ec53 2b17 	vmov	r2, r3, d7
 8009224:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8009228:	1a43      	subs	r3, r0, r1
 800922a:	eeb0 0b48 	vmov.f64	d0, d8
 800922e:	ec43 2b1c 	vmov	d12, r2, r3
 8009232:	910a      	str	r1, [sp, #40]	; 0x28
 8009234:	f001 fdc4 	bl	800adc0 <__ulp>
 8009238:	990a      	ldr	r1, [sp, #40]	; 0x28
 800923a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800923e:	ec59 8b18 	vmov	r8, r9, d8
 8009242:	e7ab      	b.n	800919c <_strtod_l+0xa6c>
 8009244:	eeb0 7b4d 	vmov.f64	d7, d13
 8009248:	e7ea      	b.n	8009220 <_strtod_l+0xaf0>
 800924a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800924e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009252:	f57f af61 	bpl.w	8009118 <_strtod_l+0x9e8>
 8009256:	e4b1      	b.n	8008bbc <_strtod_l+0x48c>
 8009258:	2300      	movs	r3, #0
 800925a:	9308      	str	r3, [sp, #32]
 800925c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800925e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009260:	6013      	str	r3, [r2, #0]
 8009262:	f7ff baad 	b.w	80087c0 <_strtod_l+0x90>
 8009266:	2a65      	cmp	r2, #101	; 0x65
 8009268:	f43f ab9f 	beq.w	80089aa <_strtod_l+0x27a>
 800926c:	2a45      	cmp	r2, #69	; 0x45
 800926e:	f43f ab9c 	beq.w	80089aa <_strtod_l+0x27a>
 8009272:	2101      	movs	r1, #1
 8009274:	f7ff bbd4 	b.w	8008a20 <_strtod_l+0x2f0>
 8009278:	ffc00000 	.word	0xffc00000
 800927c:	41dfffff 	.word	0x41dfffff
 8009280:	000fffff 	.word	0x000fffff
 8009284:	7ff00000 	.word	0x7ff00000
 8009288:	7fefffff 	.word	0x7fefffff
 800928c:	3ff00000 	.word	0x3ff00000
 8009290:	7c9fffff 	.word	0x7c9fffff
 8009294:	bff00000 	.word	0xbff00000
 8009298:	7fe00000 	.word	0x7fe00000

0800929c <_strtod_r>:
 800929c:	4b01      	ldr	r3, [pc, #4]	; (80092a4 <_strtod_r+0x8>)
 800929e:	f7ff ba47 	b.w	8008730 <_strtod_l>
 80092a2:	bf00      	nop
 80092a4:	24000078 	.word	0x24000078

080092a8 <_strtol_l.constprop.0>:
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ae:	d001      	beq.n	80092b4 <_strtol_l.constprop.0+0xc>
 80092b0:	2b24      	cmp	r3, #36	; 0x24
 80092b2:	d906      	bls.n	80092c2 <_strtol_l.constprop.0+0x1a>
 80092b4:	f7fe fb82 	bl	80079bc <__errno>
 80092b8:	2316      	movs	r3, #22
 80092ba:	6003      	str	r3, [r0, #0]
 80092bc:	2000      	movs	r0, #0
 80092be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80093a8 <_strtol_l.constprop.0+0x100>
 80092c6:	460d      	mov	r5, r1
 80092c8:	462e      	mov	r6, r5
 80092ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092ce:	f814 700c 	ldrb.w	r7, [r4, ip]
 80092d2:	f017 0708 	ands.w	r7, r7, #8
 80092d6:	d1f7      	bne.n	80092c8 <_strtol_l.constprop.0+0x20>
 80092d8:	2c2d      	cmp	r4, #45	; 0x2d
 80092da:	d132      	bne.n	8009342 <_strtol_l.constprop.0+0x9a>
 80092dc:	782c      	ldrb	r4, [r5, #0]
 80092de:	2701      	movs	r7, #1
 80092e0:	1cb5      	adds	r5, r6, #2
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d05b      	beq.n	800939e <_strtol_l.constprop.0+0xf6>
 80092e6:	2b10      	cmp	r3, #16
 80092e8:	d109      	bne.n	80092fe <_strtol_l.constprop.0+0x56>
 80092ea:	2c30      	cmp	r4, #48	; 0x30
 80092ec:	d107      	bne.n	80092fe <_strtol_l.constprop.0+0x56>
 80092ee:	782c      	ldrb	r4, [r5, #0]
 80092f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80092f4:	2c58      	cmp	r4, #88	; 0x58
 80092f6:	d14d      	bne.n	8009394 <_strtol_l.constprop.0+0xec>
 80092f8:	786c      	ldrb	r4, [r5, #1]
 80092fa:	2310      	movs	r3, #16
 80092fc:	3502      	adds	r5, #2
 80092fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009302:	f108 38ff 	add.w	r8, r8, #4294967295
 8009306:	f04f 0c00 	mov.w	ip, #0
 800930a:	fbb8 f9f3 	udiv	r9, r8, r3
 800930e:	4666      	mov	r6, ip
 8009310:	fb03 8a19 	mls	sl, r3, r9, r8
 8009314:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009318:	f1be 0f09 	cmp.w	lr, #9
 800931c:	d816      	bhi.n	800934c <_strtol_l.constprop.0+0xa4>
 800931e:	4674      	mov	r4, lr
 8009320:	42a3      	cmp	r3, r4
 8009322:	dd24      	ble.n	800936e <_strtol_l.constprop.0+0xc6>
 8009324:	f1bc 0f00 	cmp.w	ip, #0
 8009328:	db1e      	blt.n	8009368 <_strtol_l.constprop.0+0xc0>
 800932a:	45b1      	cmp	r9, r6
 800932c:	d31c      	bcc.n	8009368 <_strtol_l.constprop.0+0xc0>
 800932e:	d101      	bne.n	8009334 <_strtol_l.constprop.0+0x8c>
 8009330:	45a2      	cmp	sl, r4
 8009332:	db19      	blt.n	8009368 <_strtol_l.constprop.0+0xc0>
 8009334:	fb06 4603 	mla	r6, r6, r3, r4
 8009338:	f04f 0c01 	mov.w	ip, #1
 800933c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009340:	e7e8      	b.n	8009314 <_strtol_l.constprop.0+0x6c>
 8009342:	2c2b      	cmp	r4, #43	; 0x2b
 8009344:	bf04      	itt	eq
 8009346:	782c      	ldrbeq	r4, [r5, #0]
 8009348:	1cb5      	addeq	r5, r6, #2
 800934a:	e7ca      	b.n	80092e2 <_strtol_l.constprop.0+0x3a>
 800934c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009350:	f1be 0f19 	cmp.w	lr, #25
 8009354:	d801      	bhi.n	800935a <_strtol_l.constprop.0+0xb2>
 8009356:	3c37      	subs	r4, #55	; 0x37
 8009358:	e7e2      	b.n	8009320 <_strtol_l.constprop.0+0x78>
 800935a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800935e:	f1be 0f19 	cmp.w	lr, #25
 8009362:	d804      	bhi.n	800936e <_strtol_l.constprop.0+0xc6>
 8009364:	3c57      	subs	r4, #87	; 0x57
 8009366:	e7db      	b.n	8009320 <_strtol_l.constprop.0+0x78>
 8009368:	f04f 3cff 	mov.w	ip, #4294967295
 800936c:	e7e6      	b.n	800933c <_strtol_l.constprop.0+0x94>
 800936e:	f1bc 0f00 	cmp.w	ip, #0
 8009372:	da05      	bge.n	8009380 <_strtol_l.constprop.0+0xd8>
 8009374:	2322      	movs	r3, #34	; 0x22
 8009376:	6003      	str	r3, [r0, #0]
 8009378:	4646      	mov	r6, r8
 800937a:	b942      	cbnz	r2, 800938e <_strtol_l.constprop.0+0xe6>
 800937c:	4630      	mov	r0, r6
 800937e:	e79e      	b.n	80092be <_strtol_l.constprop.0+0x16>
 8009380:	b107      	cbz	r7, 8009384 <_strtol_l.constprop.0+0xdc>
 8009382:	4276      	negs	r6, r6
 8009384:	2a00      	cmp	r2, #0
 8009386:	d0f9      	beq.n	800937c <_strtol_l.constprop.0+0xd4>
 8009388:	f1bc 0f00 	cmp.w	ip, #0
 800938c:	d000      	beq.n	8009390 <_strtol_l.constprop.0+0xe8>
 800938e:	1e69      	subs	r1, r5, #1
 8009390:	6011      	str	r1, [r2, #0]
 8009392:	e7f3      	b.n	800937c <_strtol_l.constprop.0+0xd4>
 8009394:	2430      	movs	r4, #48	; 0x30
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1b1      	bne.n	80092fe <_strtol_l.constprop.0+0x56>
 800939a:	2308      	movs	r3, #8
 800939c:	e7af      	b.n	80092fe <_strtol_l.constprop.0+0x56>
 800939e:	2c30      	cmp	r4, #48	; 0x30
 80093a0:	d0a5      	beq.n	80092ee <_strtol_l.constprop.0+0x46>
 80093a2:	230a      	movs	r3, #10
 80093a4:	e7ab      	b.n	80092fe <_strtol_l.constprop.0+0x56>
 80093a6:	bf00      	nop
 80093a8:	0800c1e9 	.word	0x0800c1e9

080093ac <_strtol_r>:
 80093ac:	f7ff bf7c 	b.w	80092a8 <_strtol_l.constprop.0>

080093b0 <quorem>:
 80093b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	6903      	ldr	r3, [r0, #16]
 80093b6:	690c      	ldr	r4, [r1, #16]
 80093b8:	42a3      	cmp	r3, r4
 80093ba:	4607      	mov	r7, r0
 80093bc:	f2c0 8081 	blt.w	80094c2 <quorem+0x112>
 80093c0:	3c01      	subs	r4, #1
 80093c2:	f101 0814 	add.w	r8, r1, #20
 80093c6:	f100 0514 	add.w	r5, r0, #20
 80093ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ce:	9301      	str	r3, [sp, #4]
 80093d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093d8:	3301      	adds	r3, #1
 80093da:	429a      	cmp	r2, r3
 80093dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80093e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80093e8:	d331      	bcc.n	800944e <quorem+0x9e>
 80093ea:	f04f 0e00 	mov.w	lr, #0
 80093ee:	4640      	mov	r0, r8
 80093f0:	46ac      	mov	ip, r5
 80093f2:	46f2      	mov	sl, lr
 80093f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80093f8:	b293      	uxth	r3, r2
 80093fa:	fb06 e303 	mla	r3, r6, r3, lr
 80093fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009402:	b29b      	uxth	r3, r3
 8009404:	ebaa 0303 	sub.w	r3, sl, r3
 8009408:	f8dc a000 	ldr.w	sl, [ip]
 800940c:	0c12      	lsrs	r2, r2, #16
 800940e:	fa13 f38a 	uxtah	r3, r3, sl
 8009412:	fb06 e202 	mla	r2, r6, r2, lr
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	9b00      	ldr	r3, [sp, #0]
 800941a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800941e:	b292      	uxth	r2, r2
 8009420:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009428:	f8bd 3000 	ldrh.w	r3, [sp]
 800942c:	4581      	cmp	r9, r0
 800942e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009432:	f84c 3b04 	str.w	r3, [ip], #4
 8009436:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800943a:	d2db      	bcs.n	80093f4 <quorem+0x44>
 800943c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009440:	b92b      	cbnz	r3, 800944e <quorem+0x9e>
 8009442:	9b01      	ldr	r3, [sp, #4]
 8009444:	3b04      	subs	r3, #4
 8009446:	429d      	cmp	r5, r3
 8009448:	461a      	mov	r2, r3
 800944a:	d32e      	bcc.n	80094aa <quorem+0xfa>
 800944c:	613c      	str	r4, [r7, #16]
 800944e:	4638      	mov	r0, r7
 8009450:	f001 fc10 	bl	800ac74 <__mcmp>
 8009454:	2800      	cmp	r0, #0
 8009456:	db24      	blt.n	80094a2 <quorem+0xf2>
 8009458:	3601      	adds	r6, #1
 800945a:	4628      	mov	r0, r5
 800945c:	f04f 0c00 	mov.w	ip, #0
 8009460:	f858 2b04 	ldr.w	r2, [r8], #4
 8009464:	f8d0 e000 	ldr.w	lr, [r0]
 8009468:	b293      	uxth	r3, r2
 800946a:	ebac 0303 	sub.w	r3, ip, r3
 800946e:	0c12      	lsrs	r2, r2, #16
 8009470:	fa13 f38e 	uxtah	r3, r3, lr
 8009474:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009478:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800947c:	b29b      	uxth	r3, r3
 800947e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009482:	45c1      	cmp	r9, r8
 8009484:	f840 3b04 	str.w	r3, [r0], #4
 8009488:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800948c:	d2e8      	bcs.n	8009460 <quorem+0xb0>
 800948e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009496:	b922      	cbnz	r2, 80094a2 <quorem+0xf2>
 8009498:	3b04      	subs	r3, #4
 800949a:	429d      	cmp	r5, r3
 800949c:	461a      	mov	r2, r3
 800949e:	d30a      	bcc.n	80094b6 <quorem+0x106>
 80094a0:	613c      	str	r4, [r7, #16]
 80094a2:	4630      	mov	r0, r6
 80094a4:	b003      	add	sp, #12
 80094a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094aa:	6812      	ldr	r2, [r2, #0]
 80094ac:	3b04      	subs	r3, #4
 80094ae:	2a00      	cmp	r2, #0
 80094b0:	d1cc      	bne.n	800944c <quorem+0x9c>
 80094b2:	3c01      	subs	r4, #1
 80094b4:	e7c7      	b.n	8009446 <quorem+0x96>
 80094b6:	6812      	ldr	r2, [r2, #0]
 80094b8:	3b04      	subs	r3, #4
 80094ba:	2a00      	cmp	r2, #0
 80094bc:	d1f0      	bne.n	80094a0 <quorem+0xf0>
 80094be:	3c01      	subs	r4, #1
 80094c0:	e7eb      	b.n	800949a <quorem+0xea>
 80094c2:	2000      	movs	r0, #0
 80094c4:	e7ee      	b.n	80094a4 <quorem+0xf4>
	...

080094c8 <_dtoa_r>:
 80094c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	ed2d 8b02 	vpush	{d8}
 80094d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094d2:	b091      	sub	sp, #68	; 0x44
 80094d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80094d8:	ec59 8b10 	vmov	r8, r9, d0
 80094dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80094de:	9106      	str	r1, [sp, #24]
 80094e0:	4606      	mov	r6, r0
 80094e2:	9208      	str	r2, [sp, #32]
 80094e4:	930c      	str	r3, [sp, #48]	; 0x30
 80094e6:	b975      	cbnz	r5, 8009506 <_dtoa_r+0x3e>
 80094e8:	2010      	movs	r0, #16
 80094ea:	f001 f8cf 	bl	800a68c <malloc>
 80094ee:	4602      	mov	r2, r0
 80094f0:	6270      	str	r0, [r6, #36]	; 0x24
 80094f2:	b920      	cbnz	r0, 80094fe <_dtoa_r+0x36>
 80094f4:	4baa      	ldr	r3, [pc, #680]	; (80097a0 <_dtoa_r+0x2d8>)
 80094f6:	21ea      	movs	r1, #234	; 0xea
 80094f8:	48aa      	ldr	r0, [pc, #680]	; (80097a4 <_dtoa_r+0x2dc>)
 80094fa:	f002 f83b 	bl	800b574 <__assert_func>
 80094fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009502:	6005      	str	r5, [r0, #0]
 8009504:	60c5      	str	r5, [r0, #12]
 8009506:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009508:	6819      	ldr	r1, [r3, #0]
 800950a:	b151      	cbz	r1, 8009522 <_dtoa_r+0x5a>
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	604a      	str	r2, [r1, #4]
 8009510:	2301      	movs	r3, #1
 8009512:	4093      	lsls	r3, r2
 8009514:	608b      	str	r3, [r1, #8]
 8009516:	4630      	mov	r0, r6
 8009518:	f001 f920 	bl	800a75c <_Bfree>
 800951c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800951e:	2200      	movs	r2, #0
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	f1b9 0300 	subs.w	r3, r9, #0
 8009526:	bfbb      	ittet	lt
 8009528:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800952c:	9303      	strlt	r3, [sp, #12]
 800952e:	2300      	movge	r3, #0
 8009530:	2201      	movlt	r2, #1
 8009532:	bfac      	ite	ge
 8009534:	6023      	strge	r3, [r4, #0]
 8009536:	6022      	strlt	r2, [r4, #0]
 8009538:	4b9b      	ldr	r3, [pc, #620]	; (80097a8 <_dtoa_r+0x2e0>)
 800953a:	9c03      	ldr	r4, [sp, #12]
 800953c:	43a3      	bics	r3, r4
 800953e:	d11c      	bne.n	800957a <_dtoa_r+0xb2>
 8009540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009542:	f242 730f 	movw	r3, #9999	; 0x270f
 8009546:	6013      	str	r3, [r2, #0]
 8009548:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800954c:	ea53 0308 	orrs.w	r3, r3, r8
 8009550:	f000 84fd 	beq.w	8009f4e <_dtoa_r+0xa86>
 8009554:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009556:	b963      	cbnz	r3, 8009572 <_dtoa_r+0xaa>
 8009558:	4b94      	ldr	r3, [pc, #592]	; (80097ac <_dtoa_r+0x2e4>)
 800955a:	e01f      	b.n	800959c <_dtoa_r+0xd4>
 800955c:	4b94      	ldr	r3, [pc, #592]	; (80097b0 <_dtoa_r+0x2e8>)
 800955e:	9301      	str	r3, [sp, #4]
 8009560:	3308      	adds	r3, #8
 8009562:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	9801      	ldr	r0, [sp, #4]
 8009568:	b011      	add	sp, #68	; 0x44
 800956a:	ecbd 8b02 	vpop	{d8}
 800956e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009572:	4b8e      	ldr	r3, [pc, #568]	; (80097ac <_dtoa_r+0x2e4>)
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	3303      	adds	r3, #3
 8009578:	e7f3      	b.n	8009562 <_dtoa_r+0x9a>
 800957a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800957e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009586:	d10b      	bne.n	80095a0 <_dtoa_r+0xd8>
 8009588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800958a:	2301      	movs	r3, #1
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 84d9 	beq.w	8009f48 <_dtoa_r+0xa80>
 8009596:	4887      	ldr	r0, [pc, #540]	; (80097b4 <_dtoa_r+0x2ec>)
 8009598:	6018      	str	r0, [r3, #0]
 800959a:	1e43      	subs	r3, r0, #1
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	e7e2      	b.n	8009566 <_dtoa_r+0x9e>
 80095a0:	a90f      	add	r1, sp, #60	; 0x3c
 80095a2:	aa0e      	add	r2, sp, #56	; 0x38
 80095a4:	4630      	mov	r0, r6
 80095a6:	eeb0 0b48 	vmov.f64	d0, d8
 80095aa:	f001 fc85 	bl	800aeb8 <__d2b>
 80095ae:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80095b2:	4605      	mov	r5, r0
 80095b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80095b6:	2900      	cmp	r1, #0
 80095b8:	d046      	beq.n	8009648 <_dtoa_r+0x180>
 80095ba:	ee18 4a90 	vmov	r4, s17
 80095be:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80095c2:	ec53 2b18 	vmov	r2, r3, d8
 80095c6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80095ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80095ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80095d2:	2400      	movs	r4, #0
 80095d4:	ec43 2b16 	vmov	d6, r2, r3
 80095d8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80095dc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009788 <_dtoa_r+0x2c0>
 80095e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80095e4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009790 <_dtoa_r+0x2c8>
 80095e8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80095ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009798 <_dtoa_r+0x2d0>
 80095f0:	ee07 1a90 	vmov	s15, r1
 80095f4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80095f8:	eeb0 7b46 	vmov.f64	d7, d6
 80095fc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009600:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009604:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960c:	ee16 ba90 	vmov	fp, s13
 8009610:	940a      	str	r4, [sp, #40]	; 0x28
 8009612:	d508      	bpl.n	8009626 <_dtoa_r+0x15e>
 8009614:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009618:	eeb4 6b47 	vcmp.f64	d6, d7
 800961c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009620:	bf18      	it	ne
 8009622:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009626:	f1bb 0f16 	cmp.w	fp, #22
 800962a:	d82f      	bhi.n	800968c <_dtoa_r+0x1c4>
 800962c:	4b62      	ldr	r3, [pc, #392]	; (80097b8 <_dtoa_r+0x2f0>)
 800962e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009632:	ed93 7b00 	vldr	d7, [r3]
 8009636:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800963a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963e:	d501      	bpl.n	8009644 <_dtoa_r+0x17c>
 8009640:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009644:	2300      	movs	r3, #0
 8009646:	e022      	b.n	800968e <_dtoa_r+0x1c6>
 8009648:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800964a:	4401      	add	r1, r0
 800964c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009650:	2b20      	cmp	r3, #32
 8009652:	bfc1      	itttt	gt
 8009654:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009658:	fa04 f303 	lslgt.w	r3, r4, r3
 800965c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009660:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009664:	bfd6      	itet	le
 8009666:	f1c3 0320 	rsble	r3, r3, #32
 800966a:	ea43 0808 	orrgt.w	r8, r3, r8
 800966e:	fa08 f803 	lslle.w	r8, r8, r3
 8009672:	ee07 8a90 	vmov	s15, r8
 8009676:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800967a:	3901      	subs	r1, #1
 800967c:	ee17 4a90 	vmov	r4, s15
 8009680:	ec53 2b17 	vmov	r2, r3, d7
 8009684:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009688:	2401      	movs	r4, #1
 800968a:	e7a3      	b.n	80095d4 <_dtoa_r+0x10c>
 800968c:	2301      	movs	r3, #1
 800968e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009690:	1a43      	subs	r3, r0, r1
 8009692:	1e5a      	subs	r2, r3, #1
 8009694:	bf45      	ittet	mi
 8009696:	f1c3 0301 	rsbmi	r3, r3, #1
 800969a:	9304      	strmi	r3, [sp, #16]
 800969c:	2300      	movpl	r3, #0
 800969e:	2300      	movmi	r3, #0
 80096a0:	9205      	str	r2, [sp, #20]
 80096a2:	bf54      	ite	pl
 80096a4:	9304      	strpl	r3, [sp, #16]
 80096a6:	9305      	strmi	r3, [sp, #20]
 80096a8:	f1bb 0f00 	cmp.w	fp, #0
 80096ac:	db18      	blt.n	80096e0 <_dtoa_r+0x218>
 80096ae:	9b05      	ldr	r3, [sp, #20]
 80096b0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80096b4:	445b      	add	r3, fp
 80096b6:	9305      	str	r3, [sp, #20]
 80096b8:	2300      	movs	r3, #0
 80096ba:	9a06      	ldr	r2, [sp, #24]
 80096bc:	2a09      	cmp	r2, #9
 80096be:	d849      	bhi.n	8009754 <_dtoa_r+0x28c>
 80096c0:	2a05      	cmp	r2, #5
 80096c2:	bfc4      	itt	gt
 80096c4:	3a04      	subgt	r2, #4
 80096c6:	9206      	strgt	r2, [sp, #24]
 80096c8:	9a06      	ldr	r2, [sp, #24]
 80096ca:	f1a2 0202 	sub.w	r2, r2, #2
 80096ce:	bfcc      	ite	gt
 80096d0:	2400      	movgt	r4, #0
 80096d2:	2401      	movle	r4, #1
 80096d4:	2a03      	cmp	r2, #3
 80096d6:	d848      	bhi.n	800976a <_dtoa_r+0x2a2>
 80096d8:	e8df f002 	tbb	[pc, r2]
 80096dc:	3a2c2e0b 	.word	0x3a2c2e0b
 80096e0:	9b04      	ldr	r3, [sp, #16]
 80096e2:	2200      	movs	r2, #0
 80096e4:	eba3 030b 	sub.w	r3, r3, fp
 80096e8:	9304      	str	r3, [sp, #16]
 80096ea:	9209      	str	r2, [sp, #36]	; 0x24
 80096ec:	f1cb 0300 	rsb	r3, fp, #0
 80096f0:	e7e3      	b.n	80096ba <_dtoa_r+0x1f2>
 80096f2:	2200      	movs	r2, #0
 80096f4:	9207      	str	r2, [sp, #28]
 80096f6:	9a08      	ldr	r2, [sp, #32]
 80096f8:	2a00      	cmp	r2, #0
 80096fa:	dc39      	bgt.n	8009770 <_dtoa_r+0x2a8>
 80096fc:	f04f 0a01 	mov.w	sl, #1
 8009700:	46d1      	mov	r9, sl
 8009702:	4652      	mov	r2, sl
 8009704:	f8cd a020 	str.w	sl, [sp, #32]
 8009708:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800970a:	2100      	movs	r1, #0
 800970c:	6079      	str	r1, [r7, #4]
 800970e:	2004      	movs	r0, #4
 8009710:	f100 0c14 	add.w	ip, r0, #20
 8009714:	4594      	cmp	ip, r2
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	d92f      	bls.n	800977a <_dtoa_r+0x2b2>
 800971a:	4630      	mov	r0, r6
 800971c:	930d      	str	r3, [sp, #52]	; 0x34
 800971e:	f000 ffdd 	bl	800a6dc <_Balloc>
 8009722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009724:	9001      	str	r0, [sp, #4]
 8009726:	4602      	mov	r2, r0
 8009728:	2800      	cmp	r0, #0
 800972a:	d149      	bne.n	80097c0 <_dtoa_r+0x2f8>
 800972c:	4b23      	ldr	r3, [pc, #140]	; (80097bc <_dtoa_r+0x2f4>)
 800972e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009732:	e6e1      	b.n	80094f8 <_dtoa_r+0x30>
 8009734:	2201      	movs	r2, #1
 8009736:	e7dd      	b.n	80096f4 <_dtoa_r+0x22c>
 8009738:	2200      	movs	r2, #0
 800973a:	9207      	str	r2, [sp, #28]
 800973c:	9a08      	ldr	r2, [sp, #32]
 800973e:	eb0b 0a02 	add.w	sl, fp, r2
 8009742:	f10a 0901 	add.w	r9, sl, #1
 8009746:	464a      	mov	r2, r9
 8009748:	2a01      	cmp	r2, #1
 800974a:	bfb8      	it	lt
 800974c:	2201      	movlt	r2, #1
 800974e:	e7db      	b.n	8009708 <_dtoa_r+0x240>
 8009750:	2201      	movs	r2, #1
 8009752:	e7f2      	b.n	800973a <_dtoa_r+0x272>
 8009754:	2401      	movs	r4, #1
 8009756:	2200      	movs	r2, #0
 8009758:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800975c:	f04f 3aff 	mov.w	sl, #4294967295
 8009760:	2100      	movs	r1, #0
 8009762:	46d1      	mov	r9, sl
 8009764:	2212      	movs	r2, #18
 8009766:	9108      	str	r1, [sp, #32]
 8009768:	e7ce      	b.n	8009708 <_dtoa_r+0x240>
 800976a:	2201      	movs	r2, #1
 800976c:	9207      	str	r2, [sp, #28]
 800976e:	e7f5      	b.n	800975c <_dtoa_r+0x294>
 8009770:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009774:	46d1      	mov	r9, sl
 8009776:	4652      	mov	r2, sl
 8009778:	e7c6      	b.n	8009708 <_dtoa_r+0x240>
 800977a:	3101      	adds	r1, #1
 800977c:	6079      	str	r1, [r7, #4]
 800977e:	0040      	lsls	r0, r0, #1
 8009780:	e7c6      	b.n	8009710 <_dtoa_r+0x248>
 8009782:	bf00      	nop
 8009784:	f3af 8000 	nop.w
 8009788:	636f4361 	.word	0x636f4361
 800978c:	3fd287a7 	.word	0x3fd287a7
 8009790:	8b60c8b3 	.word	0x8b60c8b3
 8009794:	3fc68a28 	.word	0x3fc68a28
 8009798:	509f79fb 	.word	0x509f79fb
 800979c:	3fd34413 	.word	0x3fd34413
 80097a0:	0800c2f6 	.word	0x0800c2f6
 80097a4:	0800c30d 	.word	0x0800c30d
 80097a8:	7ff00000 	.word	0x7ff00000
 80097ac:	0800c2f2 	.word	0x0800c2f2
 80097b0:	0800c2e9 	.word	0x0800c2e9
 80097b4:	0800c169 	.word	0x0800c169
 80097b8:	0800c478 	.word	0x0800c478
 80097bc:	0800c368 	.word	0x0800c368
 80097c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80097c2:	9901      	ldr	r1, [sp, #4]
 80097c4:	6011      	str	r1, [r2, #0]
 80097c6:	f1b9 0f0e 	cmp.w	r9, #14
 80097ca:	d86c      	bhi.n	80098a6 <_dtoa_r+0x3de>
 80097cc:	2c00      	cmp	r4, #0
 80097ce:	d06a      	beq.n	80098a6 <_dtoa_r+0x3de>
 80097d0:	f1bb 0f00 	cmp.w	fp, #0
 80097d4:	f340 80a0 	ble.w	8009918 <_dtoa_r+0x450>
 80097d8:	49c1      	ldr	r1, [pc, #772]	; (8009ae0 <_dtoa_r+0x618>)
 80097da:	f00b 020f 	and.w	r2, fp, #15
 80097de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80097e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80097e6:	ed92 7b00 	vldr	d7, [r2]
 80097ea:	ea4f 112b 	mov.w	r1, fp, asr #4
 80097ee:	f000 8087 	beq.w	8009900 <_dtoa_r+0x438>
 80097f2:	4abc      	ldr	r2, [pc, #752]	; (8009ae4 <_dtoa_r+0x61c>)
 80097f4:	ed92 6b08 	vldr	d6, [r2, #32]
 80097f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80097fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009800:	f001 010f 	and.w	r1, r1, #15
 8009804:	2203      	movs	r2, #3
 8009806:	48b7      	ldr	r0, [pc, #732]	; (8009ae4 <_dtoa_r+0x61c>)
 8009808:	2900      	cmp	r1, #0
 800980a:	d17b      	bne.n	8009904 <_dtoa_r+0x43c>
 800980c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009810:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009814:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800981a:	2900      	cmp	r1, #0
 800981c:	f000 80a2 	beq.w	8009964 <_dtoa_r+0x49c>
 8009820:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009824:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009828:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800982c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009830:	f140 8098 	bpl.w	8009964 <_dtoa_r+0x49c>
 8009834:	f1b9 0f00 	cmp.w	r9, #0
 8009838:	f000 8094 	beq.w	8009964 <_dtoa_r+0x49c>
 800983c:	f1ba 0f00 	cmp.w	sl, #0
 8009840:	dd2f      	ble.n	80098a2 <_dtoa_r+0x3da>
 8009842:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009846:	ee27 7b06 	vmul.f64	d7, d7, d6
 800984a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800984e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009852:	3201      	adds	r2, #1
 8009854:	4650      	mov	r0, sl
 8009856:	ed9d 6b02 	vldr	d6, [sp, #8]
 800985a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800985e:	ee07 2a90 	vmov	s15, r2
 8009862:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009866:	eea7 5b06 	vfma.f64	d5, d7, d6
 800986a:	ee15 4a90 	vmov	r4, s11
 800986e:	ec52 1b15 	vmov	r1, r2, d5
 8009872:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009876:	2800      	cmp	r0, #0
 8009878:	d177      	bne.n	800996a <_dtoa_r+0x4a2>
 800987a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800987e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009882:	ec42 1b17 	vmov	d7, r1, r2
 8009886:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800988a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800988e:	f300 8263 	bgt.w	8009d58 <_dtoa_r+0x890>
 8009892:	eeb1 7b47 	vneg.f64	d7, d7
 8009896:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800989a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800989e:	f100 8258 	bmi.w	8009d52 <_dtoa_r+0x88a>
 80098a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80098a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098a8:	2a00      	cmp	r2, #0
 80098aa:	f2c0 811d 	blt.w	8009ae8 <_dtoa_r+0x620>
 80098ae:	f1bb 0f0e 	cmp.w	fp, #14
 80098b2:	f300 8119 	bgt.w	8009ae8 <_dtoa_r+0x620>
 80098b6:	4b8a      	ldr	r3, [pc, #552]	; (8009ae0 <_dtoa_r+0x618>)
 80098b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80098bc:	ed93 6b00 	vldr	d6, [r3]
 80098c0:	9b08      	ldr	r3, [sp, #32]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f280 80b7 	bge.w	8009a36 <_dtoa_r+0x56e>
 80098c8:	f1b9 0f00 	cmp.w	r9, #0
 80098cc:	f300 80b3 	bgt.w	8009a36 <_dtoa_r+0x56e>
 80098d0:	f040 823f 	bne.w	8009d52 <_dtoa_r+0x88a>
 80098d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80098d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80098dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80098e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e8:	464c      	mov	r4, r9
 80098ea:	464f      	mov	r7, r9
 80098ec:	f280 8215 	bge.w	8009d1a <_dtoa_r+0x852>
 80098f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80098f4:	2331      	movs	r3, #49	; 0x31
 80098f6:	f808 3b01 	strb.w	r3, [r8], #1
 80098fa:	f10b 0b01 	add.w	fp, fp, #1
 80098fe:	e211      	b.n	8009d24 <_dtoa_r+0x85c>
 8009900:	2202      	movs	r2, #2
 8009902:	e780      	b.n	8009806 <_dtoa_r+0x33e>
 8009904:	07cc      	lsls	r4, r1, #31
 8009906:	d504      	bpl.n	8009912 <_dtoa_r+0x44a>
 8009908:	ed90 6b00 	vldr	d6, [r0]
 800990c:	3201      	adds	r2, #1
 800990e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009912:	1049      	asrs	r1, r1, #1
 8009914:	3008      	adds	r0, #8
 8009916:	e777      	b.n	8009808 <_dtoa_r+0x340>
 8009918:	d022      	beq.n	8009960 <_dtoa_r+0x498>
 800991a:	f1cb 0100 	rsb	r1, fp, #0
 800991e:	4a70      	ldr	r2, [pc, #448]	; (8009ae0 <_dtoa_r+0x618>)
 8009920:	f001 000f 	and.w	r0, r1, #15
 8009924:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009928:	ed92 7b00 	vldr	d7, [r2]
 800992c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009930:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009934:	486b      	ldr	r0, [pc, #428]	; (8009ae4 <_dtoa_r+0x61c>)
 8009936:	1109      	asrs	r1, r1, #4
 8009938:	2400      	movs	r4, #0
 800993a:	2202      	movs	r2, #2
 800993c:	b929      	cbnz	r1, 800994a <_dtoa_r+0x482>
 800993e:	2c00      	cmp	r4, #0
 8009940:	f43f af6a 	beq.w	8009818 <_dtoa_r+0x350>
 8009944:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009948:	e766      	b.n	8009818 <_dtoa_r+0x350>
 800994a:	07cf      	lsls	r7, r1, #31
 800994c:	d505      	bpl.n	800995a <_dtoa_r+0x492>
 800994e:	ed90 6b00 	vldr	d6, [r0]
 8009952:	3201      	adds	r2, #1
 8009954:	2401      	movs	r4, #1
 8009956:	ee27 7b06 	vmul.f64	d7, d7, d6
 800995a:	1049      	asrs	r1, r1, #1
 800995c:	3008      	adds	r0, #8
 800995e:	e7ed      	b.n	800993c <_dtoa_r+0x474>
 8009960:	2202      	movs	r2, #2
 8009962:	e759      	b.n	8009818 <_dtoa_r+0x350>
 8009964:	465f      	mov	r7, fp
 8009966:	4648      	mov	r0, r9
 8009968:	e775      	b.n	8009856 <_dtoa_r+0x38e>
 800996a:	ec42 1b17 	vmov	d7, r1, r2
 800996e:	4a5c      	ldr	r2, [pc, #368]	; (8009ae0 <_dtoa_r+0x618>)
 8009970:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009974:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009978:	9a01      	ldr	r2, [sp, #4]
 800997a:	1814      	adds	r4, r2, r0
 800997c:	9a07      	ldr	r2, [sp, #28]
 800997e:	b352      	cbz	r2, 80099d6 <_dtoa_r+0x50e>
 8009980:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009984:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009988:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800998c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009990:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009994:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009998:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800999c:	ee14 2a90 	vmov	r2, s9
 80099a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80099a4:	3230      	adds	r2, #48	; 0x30
 80099a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80099aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b2:	f808 2b01 	strb.w	r2, [r8], #1
 80099b6:	d439      	bmi.n	8009a2c <_dtoa_r+0x564>
 80099b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80099bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80099c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c4:	d472      	bmi.n	8009aac <_dtoa_r+0x5e4>
 80099c6:	45a0      	cmp	r8, r4
 80099c8:	f43f af6b 	beq.w	80098a2 <_dtoa_r+0x3da>
 80099cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80099d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80099d4:	e7e0      	b.n	8009998 <_dtoa_r+0x4d0>
 80099d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80099da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80099de:	4621      	mov	r1, r4
 80099e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80099e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80099e8:	ee14 2a90 	vmov	r2, s9
 80099ec:	3230      	adds	r2, #48	; 0x30
 80099ee:	f808 2b01 	strb.w	r2, [r8], #1
 80099f2:	45a0      	cmp	r8, r4
 80099f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80099f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80099fc:	d118      	bne.n	8009a30 <_dtoa_r+0x568>
 80099fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009a02:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009a06:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a0e:	dc4d      	bgt.n	8009aac <_dtoa_r+0x5e4>
 8009a10:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009a14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a1c:	f57f af41 	bpl.w	80098a2 <_dtoa_r+0x3da>
 8009a20:	4688      	mov	r8, r1
 8009a22:	3901      	subs	r1, #1
 8009a24:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009a28:	2b30      	cmp	r3, #48	; 0x30
 8009a2a:	d0f9      	beq.n	8009a20 <_dtoa_r+0x558>
 8009a2c:	46bb      	mov	fp, r7
 8009a2e:	e02a      	b.n	8009a86 <_dtoa_r+0x5be>
 8009a30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009a34:	e7d6      	b.n	80099e4 <_dtoa_r+0x51c>
 8009a36:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a3a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009a3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a42:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009a46:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009a4a:	ee15 3a10 	vmov	r3, s10
 8009a4e:	3330      	adds	r3, #48	; 0x30
 8009a50:	f808 3b01 	strb.w	r3, [r8], #1
 8009a54:	9b01      	ldr	r3, [sp, #4]
 8009a56:	eba8 0303 	sub.w	r3, r8, r3
 8009a5a:	4599      	cmp	r9, r3
 8009a5c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009a60:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009a64:	d133      	bne.n	8009ace <_dtoa_r+0x606>
 8009a66:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009a6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a72:	dc1a      	bgt.n	8009aaa <_dtoa_r+0x5e2>
 8009a74:	eeb4 7b46 	vcmp.f64	d7, d6
 8009a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7c:	d103      	bne.n	8009a86 <_dtoa_r+0x5be>
 8009a7e:	ee15 3a10 	vmov	r3, s10
 8009a82:	07d9      	lsls	r1, r3, #31
 8009a84:	d411      	bmi.n	8009aaa <_dtoa_r+0x5e2>
 8009a86:	4629      	mov	r1, r5
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f000 fe67 	bl	800a75c <_Bfree>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a92:	f888 3000 	strb.w	r3, [r8]
 8009a96:	f10b 0301 	add.w	r3, fp, #1
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f43f ad61 	beq.w	8009566 <_dtoa_r+0x9e>
 8009aa4:	f8c3 8000 	str.w	r8, [r3]
 8009aa8:	e55d      	b.n	8009566 <_dtoa_r+0x9e>
 8009aaa:	465f      	mov	r7, fp
 8009aac:	4643      	mov	r3, r8
 8009aae:	4698      	mov	r8, r3
 8009ab0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ab4:	2a39      	cmp	r2, #57	; 0x39
 8009ab6:	d106      	bne.n	8009ac6 <_dtoa_r+0x5fe>
 8009ab8:	9a01      	ldr	r2, [sp, #4]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d1f7      	bne.n	8009aae <_dtoa_r+0x5e6>
 8009abe:	9901      	ldr	r1, [sp, #4]
 8009ac0:	2230      	movs	r2, #48	; 0x30
 8009ac2:	3701      	adds	r7, #1
 8009ac4:	700a      	strb	r2, [r1, #0]
 8009ac6:	781a      	ldrb	r2, [r3, #0]
 8009ac8:	3201      	adds	r2, #1
 8009aca:	701a      	strb	r2, [r3, #0]
 8009acc:	e7ae      	b.n	8009a2c <_dtoa_r+0x564>
 8009ace:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009ad2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ada:	d1b2      	bne.n	8009a42 <_dtoa_r+0x57a>
 8009adc:	e7d3      	b.n	8009a86 <_dtoa_r+0x5be>
 8009ade:	bf00      	nop
 8009ae0:	0800c478 	.word	0x0800c478
 8009ae4:	0800c450 	.word	0x0800c450
 8009ae8:	9907      	ldr	r1, [sp, #28]
 8009aea:	2900      	cmp	r1, #0
 8009aec:	f000 80d0 	beq.w	8009c90 <_dtoa_r+0x7c8>
 8009af0:	9906      	ldr	r1, [sp, #24]
 8009af2:	2901      	cmp	r1, #1
 8009af4:	f300 80b4 	bgt.w	8009c60 <_dtoa_r+0x798>
 8009af8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009afa:	2900      	cmp	r1, #0
 8009afc:	f000 80ac 	beq.w	8009c58 <_dtoa_r+0x790>
 8009b00:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009b04:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009b08:	461c      	mov	r4, r3
 8009b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8009b0c:	9b04      	ldr	r3, [sp, #16]
 8009b0e:	4413      	add	r3, r2
 8009b10:	9304      	str	r3, [sp, #16]
 8009b12:	9b05      	ldr	r3, [sp, #20]
 8009b14:	2101      	movs	r1, #1
 8009b16:	4413      	add	r3, r2
 8009b18:	4630      	mov	r0, r6
 8009b1a:	9305      	str	r3, [sp, #20]
 8009b1c:	f000 ff20 	bl	800a960 <__i2b>
 8009b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b22:	4607      	mov	r7, r0
 8009b24:	f1b8 0f00 	cmp.w	r8, #0
 8009b28:	dd0d      	ble.n	8009b46 <_dtoa_r+0x67e>
 8009b2a:	9a05      	ldr	r2, [sp, #20]
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	dd0a      	ble.n	8009b46 <_dtoa_r+0x67e>
 8009b30:	4542      	cmp	r2, r8
 8009b32:	9904      	ldr	r1, [sp, #16]
 8009b34:	bfa8      	it	ge
 8009b36:	4642      	movge	r2, r8
 8009b38:	1a89      	subs	r1, r1, r2
 8009b3a:	9104      	str	r1, [sp, #16]
 8009b3c:	9905      	ldr	r1, [sp, #20]
 8009b3e:	eba8 0802 	sub.w	r8, r8, r2
 8009b42:	1a8a      	subs	r2, r1, r2
 8009b44:	9205      	str	r2, [sp, #20]
 8009b46:	b303      	cbz	r3, 8009b8a <_dtoa_r+0x6c2>
 8009b48:	9a07      	ldr	r2, [sp, #28]
 8009b4a:	2a00      	cmp	r2, #0
 8009b4c:	f000 80a5 	beq.w	8009c9a <_dtoa_r+0x7d2>
 8009b50:	2c00      	cmp	r4, #0
 8009b52:	dd13      	ble.n	8009b7c <_dtoa_r+0x6b4>
 8009b54:	4639      	mov	r1, r7
 8009b56:	4622      	mov	r2, r4
 8009b58:	4630      	mov	r0, r6
 8009b5a:	930d      	str	r3, [sp, #52]	; 0x34
 8009b5c:	f000 ffc0 	bl	800aae0 <__pow5mult>
 8009b60:	462a      	mov	r2, r5
 8009b62:	4601      	mov	r1, r0
 8009b64:	4607      	mov	r7, r0
 8009b66:	4630      	mov	r0, r6
 8009b68:	f000 ff10 	bl	800a98c <__multiply>
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	900a      	str	r0, [sp, #40]	; 0x28
 8009b70:	4630      	mov	r0, r6
 8009b72:	f000 fdf3 	bl	800a75c <_Bfree>
 8009b76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b7a:	4615      	mov	r5, r2
 8009b7c:	1b1a      	subs	r2, r3, r4
 8009b7e:	d004      	beq.n	8009b8a <_dtoa_r+0x6c2>
 8009b80:	4629      	mov	r1, r5
 8009b82:	4630      	mov	r0, r6
 8009b84:	f000 ffac 	bl	800aae0 <__pow5mult>
 8009b88:	4605      	mov	r5, r0
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f000 fee7 	bl	800a960 <__i2b>
 8009b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	4604      	mov	r4, r0
 8009b98:	f340 8081 	ble.w	8009c9e <_dtoa_r+0x7d6>
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	4601      	mov	r1, r0
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f000 ff9d 	bl	800aae0 <__pow5mult>
 8009ba6:	9b06      	ldr	r3, [sp, #24]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	4604      	mov	r4, r0
 8009bac:	dd7a      	ble.n	8009ca4 <_dtoa_r+0x7dc>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	930a      	str	r3, [sp, #40]	; 0x28
 8009bb2:	6922      	ldr	r2, [r4, #16]
 8009bb4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009bb8:	6910      	ldr	r0, [r2, #16]
 8009bba:	f000 fe81 	bl	800a8c0 <__hi0bits>
 8009bbe:	f1c0 0020 	rsb	r0, r0, #32
 8009bc2:	9b05      	ldr	r3, [sp, #20]
 8009bc4:	4418      	add	r0, r3
 8009bc6:	f010 001f 	ands.w	r0, r0, #31
 8009bca:	f000 808c 	beq.w	8009ce6 <_dtoa_r+0x81e>
 8009bce:	f1c0 0220 	rsb	r2, r0, #32
 8009bd2:	2a04      	cmp	r2, #4
 8009bd4:	f340 8085 	ble.w	8009ce2 <_dtoa_r+0x81a>
 8009bd8:	f1c0 001c 	rsb	r0, r0, #28
 8009bdc:	9b04      	ldr	r3, [sp, #16]
 8009bde:	4403      	add	r3, r0
 8009be0:	9304      	str	r3, [sp, #16]
 8009be2:	9b05      	ldr	r3, [sp, #20]
 8009be4:	4403      	add	r3, r0
 8009be6:	4480      	add	r8, r0
 8009be8:	9305      	str	r3, [sp, #20]
 8009bea:	9b04      	ldr	r3, [sp, #16]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	dd05      	ble.n	8009bfc <_dtoa_r+0x734>
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f000 ffcd 	bl	800ab94 <__lshift>
 8009bfa:	4605      	mov	r5, r0
 8009bfc:	9b05      	ldr	r3, [sp, #20]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	dd05      	ble.n	8009c0e <_dtoa_r+0x746>
 8009c02:	4621      	mov	r1, r4
 8009c04:	461a      	mov	r2, r3
 8009c06:	4630      	mov	r0, r6
 8009c08:	f000 ffc4 	bl	800ab94 <__lshift>
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d06a      	beq.n	8009cea <_dtoa_r+0x822>
 8009c14:	4621      	mov	r1, r4
 8009c16:	4628      	mov	r0, r5
 8009c18:	f001 f82c 	bl	800ac74 <__mcmp>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	da64      	bge.n	8009cea <_dtoa_r+0x822>
 8009c20:	2300      	movs	r3, #0
 8009c22:	4629      	mov	r1, r5
 8009c24:	220a      	movs	r2, #10
 8009c26:	4630      	mov	r0, r6
 8009c28:	f000 fdba 	bl	800a7a0 <__multadd>
 8009c2c:	9b07      	ldr	r3, [sp, #28]
 8009c2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c32:	4605      	mov	r5, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 8191 	beq.w	8009f5c <_dtoa_r+0xa94>
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	220a      	movs	r2, #10
 8009c40:	4630      	mov	r0, r6
 8009c42:	f000 fdad 	bl	800a7a0 <__multadd>
 8009c46:	f1ba 0f00 	cmp.w	sl, #0
 8009c4a:	4607      	mov	r7, r0
 8009c4c:	f300 808d 	bgt.w	8009d6a <_dtoa_r+0x8a2>
 8009c50:	9b06      	ldr	r3, [sp, #24]
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	dc50      	bgt.n	8009cf8 <_dtoa_r+0x830>
 8009c56:	e088      	b.n	8009d6a <_dtoa_r+0x8a2>
 8009c58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c5e:	e751      	b.n	8009b04 <_dtoa_r+0x63c>
 8009c60:	f109 34ff 	add.w	r4, r9, #4294967295
 8009c64:	42a3      	cmp	r3, r4
 8009c66:	bfbf      	itttt	lt
 8009c68:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009c6a:	1ae3      	sublt	r3, r4, r3
 8009c6c:	18d2      	addlt	r2, r2, r3
 8009c6e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009c70:	bfb6      	itet	lt
 8009c72:	4623      	movlt	r3, r4
 8009c74:	1b1c      	subge	r4, r3, r4
 8009c76:	2400      	movlt	r4, #0
 8009c78:	f1b9 0f00 	cmp.w	r9, #0
 8009c7c:	bfb5      	itete	lt
 8009c7e:	9a04      	ldrlt	r2, [sp, #16]
 8009c80:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009c84:	eba2 0809 	sublt.w	r8, r2, r9
 8009c88:	464a      	movge	r2, r9
 8009c8a:	bfb8      	it	lt
 8009c8c:	2200      	movlt	r2, #0
 8009c8e:	e73c      	b.n	8009b0a <_dtoa_r+0x642>
 8009c90:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009c94:	9f07      	ldr	r7, [sp, #28]
 8009c96:	461c      	mov	r4, r3
 8009c98:	e744      	b.n	8009b24 <_dtoa_r+0x65c>
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	e770      	b.n	8009b80 <_dtoa_r+0x6b8>
 8009c9e:	9b06      	ldr	r3, [sp, #24]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	dc18      	bgt.n	8009cd6 <_dtoa_r+0x80e>
 8009ca4:	9b02      	ldr	r3, [sp, #8]
 8009ca6:	b9b3      	cbnz	r3, 8009cd6 <_dtoa_r+0x80e>
 8009ca8:	9b03      	ldr	r3, [sp, #12]
 8009caa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009cae:	b9a2      	cbnz	r2, 8009cda <_dtoa_r+0x812>
 8009cb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009cb4:	0d12      	lsrs	r2, r2, #20
 8009cb6:	0512      	lsls	r2, r2, #20
 8009cb8:	b18a      	cbz	r2, 8009cde <_dtoa_r+0x816>
 8009cba:	9b04      	ldr	r3, [sp, #16]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	9304      	str	r3, [sp, #16]
 8009cc0:	9b05      	ldr	r3, [sp, #20]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	9305      	str	r3, [sp, #20]
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8009cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f47f af70 	bne.w	8009bb2 <_dtoa_r+0x6ea>
 8009cd2:	2001      	movs	r0, #1
 8009cd4:	e775      	b.n	8009bc2 <_dtoa_r+0x6fa>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e7f6      	b.n	8009cc8 <_dtoa_r+0x800>
 8009cda:	9b02      	ldr	r3, [sp, #8]
 8009cdc:	e7f4      	b.n	8009cc8 <_dtoa_r+0x800>
 8009cde:	920a      	str	r2, [sp, #40]	; 0x28
 8009ce0:	e7f3      	b.n	8009cca <_dtoa_r+0x802>
 8009ce2:	d082      	beq.n	8009bea <_dtoa_r+0x722>
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	301c      	adds	r0, #28
 8009ce8:	e778      	b.n	8009bdc <_dtoa_r+0x714>
 8009cea:	f1b9 0f00 	cmp.w	r9, #0
 8009cee:	dc37      	bgt.n	8009d60 <_dtoa_r+0x898>
 8009cf0:	9b06      	ldr	r3, [sp, #24]
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	dd34      	ble.n	8009d60 <_dtoa_r+0x898>
 8009cf6:	46ca      	mov	sl, r9
 8009cf8:	f1ba 0f00 	cmp.w	sl, #0
 8009cfc:	d10d      	bne.n	8009d1a <_dtoa_r+0x852>
 8009cfe:	4621      	mov	r1, r4
 8009d00:	4653      	mov	r3, sl
 8009d02:	2205      	movs	r2, #5
 8009d04:	4630      	mov	r0, r6
 8009d06:	f000 fd4b 	bl	800a7a0 <__multadd>
 8009d0a:	4601      	mov	r1, r0
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	4628      	mov	r0, r5
 8009d10:	f000 ffb0 	bl	800ac74 <__mcmp>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	f73f adeb 	bgt.w	80098f0 <_dtoa_r+0x428>
 8009d1a:	9b08      	ldr	r3, [sp, #32]
 8009d1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d20:	ea6f 0b03 	mvn.w	fp, r3
 8009d24:	f04f 0900 	mov.w	r9, #0
 8009d28:	4621      	mov	r1, r4
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f000 fd16 	bl	800a75c <_Bfree>
 8009d30:	2f00      	cmp	r7, #0
 8009d32:	f43f aea8 	beq.w	8009a86 <_dtoa_r+0x5be>
 8009d36:	f1b9 0f00 	cmp.w	r9, #0
 8009d3a:	d005      	beq.n	8009d48 <_dtoa_r+0x880>
 8009d3c:	45b9      	cmp	r9, r7
 8009d3e:	d003      	beq.n	8009d48 <_dtoa_r+0x880>
 8009d40:	4649      	mov	r1, r9
 8009d42:	4630      	mov	r0, r6
 8009d44:	f000 fd0a 	bl	800a75c <_Bfree>
 8009d48:	4639      	mov	r1, r7
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f000 fd06 	bl	800a75c <_Bfree>
 8009d50:	e699      	b.n	8009a86 <_dtoa_r+0x5be>
 8009d52:	2400      	movs	r4, #0
 8009d54:	4627      	mov	r7, r4
 8009d56:	e7e0      	b.n	8009d1a <_dtoa_r+0x852>
 8009d58:	46bb      	mov	fp, r7
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	4607      	mov	r7, r0
 8009d5e:	e5c7      	b.n	80098f0 <_dtoa_r+0x428>
 8009d60:	9b07      	ldr	r3, [sp, #28]
 8009d62:	46ca      	mov	sl, r9
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 8100 	beq.w	8009f6a <_dtoa_r+0xaa2>
 8009d6a:	f1b8 0f00 	cmp.w	r8, #0
 8009d6e:	dd05      	ble.n	8009d7c <_dtoa_r+0x8b4>
 8009d70:	4639      	mov	r1, r7
 8009d72:	4642      	mov	r2, r8
 8009d74:	4630      	mov	r0, r6
 8009d76:	f000 ff0d 	bl	800ab94 <__lshift>
 8009d7a:	4607      	mov	r7, r0
 8009d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d05d      	beq.n	8009e3e <_dtoa_r+0x976>
 8009d82:	6879      	ldr	r1, [r7, #4]
 8009d84:	4630      	mov	r0, r6
 8009d86:	f000 fca9 	bl	800a6dc <_Balloc>
 8009d8a:	4680      	mov	r8, r0
 8009d8c:	b928      	cbnz	r0, 8009d9a <_dtoa_r+0x8d2>
 8009d8e:	4b82      	ldr	r3, [pc, #520]	; (8009f98 <_dtoa_r+0xad0>)
 8009d90:	4602      	mov	r2, r0
 8009d92:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d96:	f7ff bbaf 	b.w	80094f8 <_dtoa_r+0x30>
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	3202      	adds	r2, #2
 8009d9e:	0092      	lsls	r2, r2, #2
 8009da0:	f107 010c 	add.w	r1, r7, #12
 8009da4:	300c      	adds	r0, #12
 8009da6:	f000 fc8b 	bl	800a6c0 <memcpy>
 8009daa:	2201      	movs	r2, #1
 8009dac:	4641      	mov	r1, r8
 8009dae:	4630      	mov	r0, r6
 8009db0:	f000 fef0 	bl	800ab94 <__lshift>
 8009db4:	9b01      	ldr	r3, [sp, #4]
 8009db6:	3301      	adds	r3, #1
 8009db8:	9304      	str	r3, [sp, #16]
 8009dba:	9b01      	ldr	r3, [sp, #4]
 8009dbc:	4453      	add	r3, sl
 8009dbe:	9308      	str	r3, [sp, #32]
 8009dc0:	9b02      	ldr	r3, [sp, #8]
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	46b9      	mov	r9, r7
 8009dc8:	9307      	str	r3, [sp, #28]
 8009dca:	4607      	mov	r7, r0
 8009dcc:	9b04      	ldr	r3, [sp, #16]
 8009dce:	4621      	mov	r1, r4
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	9302      	str	r3, [sp, #8]
 8009dd6:	f7ff faeb 	bl	80093b0 <quorem>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	3330      	adds	r3, #48	; 0x30
 8009dde:	9005      	str	r0, [sp, #20]
 8009de0:	4649      	mov	r1, r9
 8009de2:	4628      	mov	r0, r5
 8009de4:	9309      	str	r3, [sp, #36]	; 0x24
 8009de6:	f000 ff45 	bl	800ac74 <__mcmp>
 8009dea:	463a      	mov	r2, r7
 8009dec:	4682      	mov	sl, r0
 8009dee:	4621      	mov	r1, r4
 8009df0:	4630      	mov	r0, r6
 8009df2:	f000 ff5b 	bl	800acac <__mdiff>
 8009df6:	68c2      	ldr	r2, [r0, #12]
 8009df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dfa:	4680      	mov	r8, r0
 8009dfc:	bb0a      	cbnz	r2, 8009e42 <_dtoa_r+0x97a>
 8009dfe:	4601      	mov	r1, r0
 8009e00:	4628      	mov	r0, r5
 8009e02:	f000 ff37 	bl	800ac74 <__mcmp>
 8009e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e08:	4602      	mov	r2, r0
 8009e0a:	4641      	mov	r1, r8
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009e12:	f000 fca3 	bl	800a75c <_Bfree>
 8009e16:	9b06      	ldr	r3, [sp, #24]
 8009e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e1a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009e1e:	ea43 0102 	orr.w	r1, r3, r2
 8009e22:	9b07      	ldr	r3, [sp, #28]
 8009e24:	430b      	orrs	r3, r1
 8009e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e28:	d10d      	bne.n	8009e46 <_dtoa_r+0x97e>
 8009e2a:	2b39      	cmp	r3, #57	; 0x39
 8009e2c:	d029      	beq.n	8009e82 <_dtoa_r+0x9ba>
 8009e2e:	f1ba 0f00 	cmp.w	sl, #0
 8009e32:	dd01      	ble.n	8009e38 <_dtoa_r+0x970>
 8009e34:	9b05      	ldr	r3, [sp, #20]
 8009e36:	3331      	adds	r3, #49	; 0x31
 8009e38:	9a02      	ldr	r2, [sp, #8]
 8009e3a:	7013      	strb	r3, [r2, #0]
 8009e3c:	e774      	b.n	8009d28 <_dtoa_r+0x860>
 8009e3e:	4638      	mov	r0, r7
 8009e40:	e7b8      	b.n	8009db4 <_dtoa_r+0x8ec>
 8009e42:	2201      	movs	r2, #1
 8009e44:	e7e1      	b.n	8009e0a <_dtoa_r+0x942>
 8009e46:	f1ba 0f00 	cmp.w	sl, #0
 8009e4a:	db06      	blt.n	8009e5a <_dtoa_r+0x992>
 8009e4c:	9906      	ldr	r1, [sp, #24]
 8009e4e:	ea41 0a0a 	orr.w	sl, r1, sl
 8009e52:	9907      	ldr	r1, [sp, #28]
 8009e54:	ea5a 0101 	orrs.w	r1, sl, r1
 8009e58:	d120      	bne.n	8009e9c <_dtoa_r+0x9d4>
 8009e5a:	2a00      	cmp	r2, #0
 8009e5c:	ddec      	ble.n	8009e38 <_dtoa_r+0x970>
 8009e5e:	4629      	mov	r1, r5
 8009e60:	2201      	movs	r2, #1
 8009e62:	4630      	mov	r0, r6
 8009e64:	9304      	str	r3, [sp, #16]
 8009e66:	f000 fe95 	bl	800ab94 <__lshift>
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	f000 ff01 	bl	800ac74 <__mcmp>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	9b04      	ldr	r3, [sp, #16]
 8009e76:	dc02      	bgt.n	8009e7e <_dtoa_r+0x9b6>
 8009e78:	d1de      	bne.n	8009e38 <_dtoa_r+0x970>
 8009e7a:	07da      	lsls	r2, r3, #31
 8009e7c:	d5dc      	bpl.n	8009e38 <_dtoa_r+0x970>
 8009e7e:	2b39      	cmp	r3, #57	; 0x39
 8009e80:	d1d8      	bne.n	8009e34 <_dtoa_r+0x96c>
 8009e82:	9a02      	ldr	r2, [sp, #8]
 8009e84:	2339      	movs	r3, #57	; 0x39
 8009e86:	7013      	strb	r3, [r2, #0]
 8009e88:	4643      	mov	r3, r8
 8009e8a:	4698      	mov	r8, r3
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009e92:	2a39      	cmp	r2, #57	; 0x39
 8009e94:	d051      	beq.n	8009f3a <_dtoa_r+0xa72>
 8009e96:	3201      	adds	r2, #1
 8009e98:	701a      	strb	r2, [r3, #0]
 8009e9a:	e745      	b.n	8009d28 <_dtoa_r+0x860>
 8009e9c:	2a00      	cmp	r2, #0
 8009e9e:	dd03      	ble.n	8009ea8 <_dtoa_r+0x9e0>
 8009ea0:	2b39      	cmp	r3, #57	; 0x39
 8009ea2:	d0ee      	beq.n	8009e82 <_dtoa_r+0x9ba>
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	e7c7      	b.n	8009e38 <_dtoa_r+0x970>
 8009ea8:	9a04      	ldr	r2, [sp, #16]
 8009eaa:	9908      	ldr	r1, [sp, #32]
 8009eac:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009eb0:	428a      	cmp	r2, r1
 8009eb2:	d02b      	beq.n	8009f0c <_dtoa_r+0xa44>
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	220a      	movs	r2, #10
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f000 fc70 	bl	800a7a0 <__multadd>
 8009ec0:	45b9      	cmp	r9, r7
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	f04f 0300 	mov.w	r3, #0
 8009ec8:	f04f 020a 	mov.w	r2, #10
 8009ecc:	4649      	mov	r1, r9
 8009ece:	4630      	mov	r0, r6
 8009ed0:	d107      	bne.n	8009ee2 <_dtoa_r+0xa1a>
 8009ed2:	f000 fc65 	bl	800a7a0 <__multadd>
 8009ed6:	4681      	mov	r9, r0
 8009ed8:	4607      	mov	r7, r0
 8009eda:	9b04      	ldr	r3, [sp, #16]
 8009edc:	3301      	adds	r3, #1
 8009ede:	9304      	str	r3, [sp, #16]
 8009ee0:	e774      	b.n	8009dcc <_dtoa_r+0x904>
 8009ee2:	f000 fc5d 	bl	800a7a0 <__multadd>
 8009ee6:	4639      	mov	r1, r7
 8009ee8:	4681      	mov	r9, r0
 8009eea:	2300      	movs	r3, #0
 8009eec:	220a      	movs	r2, #10
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f000 fc56 	bl	800a7a0 <__multadd>
 8009ef4:	4607      	mov	r7, r0
 8009ef6:	e7f0      	b.n	8009eda <_dtoa_r+0xa12>
 8009ef8:	f1ba 0f00 	cmp.w	sl, #0
 8009efc:	9a01      	ldr	r2, [sp, #4]
 8009efe:	bfcc      	ite	gt
 8009f00:	46d0      	movgt	r8, sl
 8009f02:	f04f 0801 	movle.w	r8, #1
 8009f06:	4490      	add	r8, r2
 8009f08:	f04f 0900 	mov.w	r9, #0
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	2201      	movs	r2, #1
 8009f10:	4630      	mov	r0, r6
 8009f12:	9302      	str	r3, [sp, #8]
 8009f14:	f000 fe3e 	bl	800ab94 <__lshift>
 8009f18:	4621      	mov	r1, r4
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	f000 feaa 	bl	800ac74 <__mcmp>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	dcb1      	bgt.n	8009e88 <_dtoa_r+0x9c0>
 8009f24:	d102      	bne.n	8009f2c <_dtoa_r+0xa64>
 8009f26:	9b02      	ldr	r3, [sp, #8]
 8009f28:	07db      	lsls	r3, r3, #31
 8009f2a:	d4ad      	bmi.n	8009e88 <_dtoa_r+0x9c0>
 8009f2c:	4643      	mov	r3, r8
 8009f2e:	4698      	mov	r8, r3
 8009f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f34:	2a30      	cmp	r2, #48	; 0x30
 8009f36:	d0fa      	beq.n	8009f2e <_dtoa_r+0xa66>
 8009f38:	e6f6      	b.n	8009d28 <_dtoa_r+0x860>
 8009f3a:	9a01      	ldr	r2, [sp, #4]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d1a4      	bne.n	8009e8a <_dtoa_r+0x9c2>
 8009f40:	f10b 0b01 	add.w	fp, fp, #1
 8009f44:	2331      	movs	r3, #49	; 0x31
 8009f46:	e778      	b.n	8009e3a <_dtoa_r+0x972>
 8009f48:	4b14      	ldr	r3, [pc, #80]	; (8009f9c <_dtoa_r+0xad4>)
 8009f4a:	f7ff bb27 	b.w	800959c <_dtoa_r+0xd4>
 8009f4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f47f ab03 	bne.w	800955c <_dtoa_r+0x94>
 8009f56:	4b12      	ldr	r3, [pc, #72]	; (8009fa0 <_dtoa_r+0xad8>)
 8009f58:	f7ff bb20 	b.w	800959c <_dtoa_r+0xd4>
 8009f5c:	f1ba 0f00 	cmp.w	sl, #0
 8009f60:	dc03      	bgt.n	8009f6a <_dtoa_r+0xaa2>
 8009f62:	9b06      	ldr	r3, [sp, #24]
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	f73f aec7 	bgt.w	8009cf8 <_dtoa_r+0x830>
 8009f6a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009f6e:	4621      	mov	r1, r4
 8009f70:	4628      	mov	r0, r5
 8009f72:	f7ff fa1d 	bl	80093b0 <quorem>
 8009f76:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009f7a:	f808 3b01 	strb.w	r3, [r8], #1
 8009f7e:	9a01      	ldr	r2, [sp, #4]
 8009f80:	eba8 0202 	sub.w	r2, r8, r2
 8009f84:	4592      	cmp	sl, r2
 8009f86:	ddb7      	ble.n	8009ef8 <_dtoa_r+0xa30>
 8009f88:	4629      	mov	r1, r5
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	220a      	movs	r2, #10
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f000 fc06 	bl	800a7a0 <__multadd>
 8009f94:	4605      	mov	r5, r0
 8009f96:	e7ea      	b.n	8009f6e <_dtoa_r+0xaa6>
 8009f98:	0800c368 	.word	0x0800c368
 8009f9c:	0800c168 	.word	0x0800c168
 8009fa0:	0800c2e9 	.word	0x0800c2e9

08009fa4 <rshift>:
 8009fa4:	6903      	ldr	r3, [r0, #16]
 8009fa6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009faa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fae:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009fb2:	f100 0414 	add.w	r4, r0, #20
 8009fb6:	dd45      	ble.n	800a044 <rshift+0xa0>
 8009fb8:	f011 011f 	ands.w	r1, r1, #31
 8009fbc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009fc0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009fc4:	d10c      	bne.n	8009fe0 <rshift+0x3c>
 8009fc6:	f100 0710 	add.w	r7, r0, #16
 8009fca:	4629      	mov	r1, r5
 8009fcc:	42b1      	cmp	r1, r6
 8009fce:	d334      	bcc.n	800a03a <rshift+0x96>
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	1eea      	subs	r2, r5, #3
 8009fd6:	4296      	cmp	r6, r2
 8009fd8:	bf38      	it	cc
 8009fda:	2300      	movcc	r3, #0
 8009fdc:	4423      	add	r3, r4
 8009fde:	e015      	b.n	800a00c <rshift+0x68>
 8009fe0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009fe4:	f1c1 0820 	rsb	r8, r1, #32
 8009fe8:	40cf      	lsrs	r7, r1
 8009fea:	f105 0e04 	add.w	lr, r5, #4
 8009fee:	46a1      	mov	r9, r4
 8009ff0:	4576      	cmp	r6, lr
 8009ff2:	46f4      	mov	ip, lr
 8009ff4:	d815      	bhi.n	800a022 <rshift+0x7e>
 8009ff6:	1a9a      	subs	r2, r3, r2
 8009ff8:	0092      	lsls	r2, r2, #2
 8009ffa:	3a04      	subs	r2, #4
 8009ffc:	3501      	adds	r5, #1
 8009ffe:	42ae      	cmp	r6, r5
 800a000:	bf38      	it	cc
 800a002:	2200      	movcc	r2, #0
 800a004:	18a3      	adds	r3, r4, r2
 800a006:	50a7      	str	r7, [r4, r2]
 800a008:	b107      	cbz	r7, 800a00c <rshift+0x68>
 800a00a:	3304      	adds	r3, #4
 800a00c:	1b1a      	subs	r2, r3, r4
 800a00e:	42a3      	cmp	r3, r4
 800a010:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a014:	bf08      	it	eq
 800a016:	2300      	moveq	r3, #0
 800a018:	6102      	str	r2, [r0, #16]
 800a01a:	bf08      	it	eq
 800a01c:	6143      	streq	r3, [r0, #20]
 800a01e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a022:	f8dc c000 	ldr.w	ip, [ip]
 800a026:	fa0c fc08 	lsl.w	ip, ip, r8
 800a02a:	ea4c 0707 	orr.w	r7, ip, r7
 800a02e:	f849 7b04 	str.w	r7, [r9], #4
 800a032:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a036:	40cf      	lsrs	r7, r1
 800a038:	e7da      	b.n	8009ff0 <rshift+0x4c>
 800a03a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a03e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a042:	e7c3      	b.n	8009fcc <rshift+0x28>
 800a044:	4623      	mov	r3, r4
 800a046:	e7e1      	b.n	800a00c <rshift+0x68>

0800a048 <__hexdig_fun>:
 800a048:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a04c:	2b09      	cmp	r3, #9
 800a04e:	d802      	bhi.n	800a056 <__hexdig_fun+0xe>
 800a050:	3820      	subs	r0, #32
 800a052:	b2c0      	uxtb	r0, r0
 800a054:	4770      	bx	lr
 800a056:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a05a:	2b05      	cmp	r3, #5
 800a05c:	d801      	bhi.n	800a062 <__hexdig_fun+0x1a>
 800a05e:	3847      	subs	r0, #71	; 0x47
 800a060:	e7f7      	b.n	800a052 <__hexdig_fun+0xa>
 800a062:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a066:	2b05      	cmp	r3, #5
 800a068:	d801      	bhi.n	800a06e <__hexdig_fun+0x26>
 800a06a:	3827      	subs	r0, #39	; 0x27
 800a06c:	e7f1      	b.n	800a052 <__hexdig_fun+0xa>
 800a06e:	2000      	movs	r0, #0
 800a070:	4770      	bx	lr
	...

0800a074 <__gethex>:
 800a074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a078:	ed2d 8b02 	vpush	{d8}
 800a07c:	b089      	sub	sp, #36	; 0x24
 800a07e:	ee08 0a10 	vmov	s16, r0
 800a082:	9304      	str	r3, [sp, #16]
 800a084:	4bb4      	ldr	r3, [pc, #720]	; (800a358 <__gethex+0x2e4>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	9301      	str	r3, [sp, #4]
 800a08a:	4618      	mov	r0, r3
 800a08c:	468b      	mov	fp, r1
 800a08e:	4690      	mov	r8, r2
 800a090:	f7f6 f926 	bl	80002e0 <strlen>
 800a094:	9b01      	ldr	r3, [sp, #4]
 800a096:	f8db 2000 	ldr.w	r2, [fp]
 800a09a:	4403      	add	r3, r0
 800a09c:	4682      	mov	sl, r0
 800a09e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a0a2:	9305      	str	r3, [sp, #20]
 800a0a4:	1c93      	adds	r3, r2, #2
 800a0a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a0aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a0ae:	32fe      	adds	r2, #254	; 0xfe
 800a0b0:	18d1      	adds	r1, r2, r3
 800a0b2:	461f      	mov	r7, r3
 800a0b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a0b8:	9100      	str	r1, [sp, #0]
 800a0ba:	2830      	cmp	r0, #48	; 0x30
 800a0bc:	d0f8      	beq.n	800a0b0 <__gethex+0x3c>
 800a0be:	f7ff ffc3 	bl	800a048 <__hexdig_fun>
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d13a      	bne.n	800a13e <__gethex+0xca>
 800a0c8:	9901      	ldr	r1, [sp, #4]
 800a0ca:	4652      	mov	r2, sl
 800a0cc:	4638      	mov	r0, r7
 800a0ce:	f001 fa2f 	bl	800b530 <strncmp>
 800a0d2:	4605      	mov	r5, r0
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d168      	bne.n	800a1aa <__gethex+0x136>
 800a0d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a0dc:	eb07 060a 	add.w	r6, r7, sl
 800a0e0:	f7ff ffb2 	bl	800a048 <__hexdig_fun>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d062      	beq.n	800a1ae <__gethex+0x13a>
 800a0e8:	4633      	mov	r3, r6
 800a0ea:	7818      	ldrb	r0, [r3, #0]
 800a0ec:	2830      	cmp	r0, #48	; 0x30
 800a0ee:	461f      	mov	r7, r3
 800a0f0:	f103 0301 	add.w	r3, r3, #1
 800a0f4:	d0f9      	beq.n	800a0ea <__gethex+0x76>
 800a0f6:	f7ff ffa7 	bl	800a048 <__hexdig_fun>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	fab0 f480 	clz	r4, r0
 800a100:	0964      	lsrs	r4, r4, #5
 800a102:	4635      	mov	r5, r6
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	463a      	mov	r2, r7
 800a108:	4616      	mov	r6, r2
 800a10a:	3201      	adds	r2, #1
 800a10c:	7830      	ldrb	r0, [r6, #0]
 800a10e:	f7ff ff9b 	bl	800a048 <__hexdig_fun>
 800a112:	2800      	cmp	r0, #0
 800a114:	d1f8      	bne.n	800a108 <__gethex+0x94>
 800a116:	9901      	ldr	r1, [sp, #4]
 800a118:	4652      	mov	r2, sl
 800a11a:	4630      	mov	r0, r6
 800a11c:	f001 fa08 	bl	800b530 <strncmp>
 800a120:	b980      	cbnz	r0, 800a144 <__gethex+0xd0>
 800a122:	b94d      	cbnz	r5, 800a138 <__gethex+0xc4>
 800a124:	eb06 050a 	add.w	r5, r6, sl
 800a128:	462a      	mov	r2, r5
 800a12a:	4616      	mov	r6, r2
 800a12c:	3201      	adds	r2, #1
 800a12e:	7830      	ldrb	r0, [r6, #0]
 800a130:	f7ff ff8a 	bl	800a048 <__hexdig_fun>
 800a134:	2800      	cmp	r0, #0
 800a136:	d1f8      	bne.n	800a12a <__gethex+0xb6>
 800a138:	1bad      	subs	r5, r5, r6
 800a13a:	00ad      	lsls	r5, r5, #2
 800a13c:	e004      	b.n	800a148 <__gethex+0xd4>
 800a13e:	2400      	movs	r4, #0
 800a140:	4625      	mov	r5, r4
 800a142:	e7e0      	b.n	800a106 <__gethex+0x92>
 800a144:	2d00      	cmp	r5, #0
 800a146:	d1f7      	bne.n	800a138 <__gethex+0xc4>
 800a148:	7833      	ldrb	r3, [r6, #0]
 800a14a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a14e:	2b50      	cmp	r3, #80	; 0x50
 800a150:	d13b      	bne.n	800a1ca <__gethex+0x156>
 800a152:	7873      	ldrb	r3, [r6, #1]
 800a154:	2b2b      	cmp	r3, #43	; 0x2b
 800a156:	d02c      	beq.n	800a1b2 <__gethex+0x13e>
 800a158:	2b2d      	cmp	r3, #45	; 0x2d
 800a15a:	d02e      	beq.n	800a1ba <__gethex+0x146>
 800a15c:	1c71      	adds	r1, r6, #1
 800a15e:	f04f 0900 	mov.w	r9, #0
 800a162:	7808      	ldrb	r0, [r1, #0]
 800a164:	f7ff ff70 	bl	800a048 <__hexdig_fun>
 800a168:	1e43      	subs	r3, r0, #1
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b18      	cmp	r3, #24
 800a16e:	d82c      	bhi.n	800a1ca <__gethex+0x156>
 800a170:	f1a0 0210 	sub.w	r2, r0, #16
 800a174:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a178:	f7ff ff66 	bl	800a048 <__hexdig_fun>
 800a17c:	1e43      	subs	r3, r0, #1
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b18      	cmp	r3, #24
 800a182:	d91d      	bls.n	800a1c0 <__gethex+0x14c>
 800a184:	f1b9 0f00 	cmp.w	r9, #0
 800a188:	d000      	beq.n	800a18c <__gethex+0x118>
 800a18a:	4252      	negs	r2, r2
 800a18c:	4415      	add	r5, r2
 800a18e:	f8cb 1000 	str.w	r1, [fp]
 800a192:	b1e4      	cbz	r4, 800a1ce <__gethex+0x15a>
 800a194:	9b00      	ldr	r3, [sp, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	bf14      	ite	ne
 800a19a:	2700      	movne	r7, #0
 800a19c:	2706      	moveq	r7, #6
 800a19e:	4638      	mov	r0, r7
 800a1a0:	b009      	add	sp, #36	; 0x24
 800a1a2:	ecbd 8b02 	vpop	{d8}
 800a1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1aa:	463e      	mov	r6, r7
 800a1ac:	4625      	mov	r5, r4
 800a1ae:	2401      	movs	r4, #1
 800a1b0:	e7ca      	b.n	800a148 <__gethex+0xd4>
 800a1b2:	f04f 0900 	mov.w	r9, #0
 800a1b6:	1cb1      	adds	r1, r6, #2
 800a1b8:	e7d3      	b.n	800a162 <__gethex+0xee>
 800a1ba:	f04f 0901 	mov.w	r9, #1
 800a1be:	e7fa      	b.n	800a1b6 <__gethex+0x142>
 800a1c0:	230a      	movs	r3, #10
 800a1c2:	fb03 0202 	mla	r2, r3, r2, r0
 800a1c6:	3a10      	subs	r2, #16
 800a1c8:	e7d4      	b.n	800a174 <__gethex+0x100>
 800a1ca:	4631      	mov	r1, r6
 800a1cc:	e7df      	b.n	800a18e <__gethex+0x11a>
 800a1ce:	1bf3      	subs	r3, r6, r7
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	2b07      	cmp	r3, #7
 800a1d6:	dc0b      	bgt.n	800a1f0 <__gethex+0x17c>
 800a1d8:	ee18 0a10 	vmov	r0, s16
 800a1dc:	f000 fa7e 	bl	800a6dc <_Balloc>
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	b940      	cbnz	r0, 800a1f6 <__gethex+0x182>
 800a1e4:	4b5d      	ldr	r3, [pc, #372]	; (800a35c <__gethex+0x2e8>)
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	21de      	movs	r1, #222	; 0xde
 800a1ea:	485d      	ldr	r0, [pc, #372]	; (800a360 <__gethex+0x2ec>)
 800a1ec:	f001 f9c2 	bl	800b574 <__assert_func>
 800a1f0:	3101      	adds	r1, #1
 800a1f2:	105b      	asrs	r3, r3, #1
 800a1f4:	e7ee      	b.n	800a1d4 <__gethex+0x160>
 800a1f6:	f100 0914 	add.w	r9, r0, #20
 800a1fa:	f04f 0b00 	mov.w	fp, #0
 800a1fe:	f1ca 0301 	rsb	r3, sl, #1
 800a202:	f8cd 9008 	str.w	r9, [sp, #8]
 800a206:	f8cd b000 	str.w	fp, [sp]
 800a20a:	9306      	str	r3, [sp, #24]
 800a20c:	42b7      	cmp	r7, r6
 800a20e:	d340      	bcc.n	800a292 <__gethex+0x21e>
 800a210:	9802      	ldr	r0, [sp, #8]
 800a212:	9b00      	ldr	r3, [sp, #0]
 800a214:	f840 3b04 	str.w	r3, [r0], #4
 800a218:	eba0 0009 	sub.w	r0, r0, r9
 800a21c:	1080      	asrs	r0, r0, #2
 800a21e:	0146      	lsls	r6, r0, #5
 800a220:	6120      	str	r0, [r4, #16]
 800a222:	4618      	mov	r0, r3
 800a224:	f000 fb4c 	bl	800a8c0 <__hi0bits>
 800a228:	1a30      	subs	r0, r6, r0
 800a22a:	f8d8 6000 	ldr.w	r6, [r8]
 800a22e:	42b0      	cmp	r0, r6
 800a230:	dd63      	ble.n	800a2fa <__gethex+0x286>
 800a232:	1b87      	subs	r7, r0, r6
 800a234:	4639      	mov	r1, r7
 800a236:	4620      	mov	r0, r4
 800a238:	f000 feed 	bl	800b016 <__any_on>
 800a23c:	4682      	mov	sl, r0
 800a23e:	b1a8      	cbz	r0, 800a26c <__gethex+0x1f8>
 800a240:	1e7b      	subs	r3, r7, #1
 800a242:	1159      	asrs	r1, r3, #5
 800a244:	f003 021f 	and.w	r2, r3, #31
 800a248:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a24c:	f04f 0a01 	mov.w	sl, #1
 800a250:	fa0a f202 	lsl.w	r2, sl, r2
 800a254:	420a      	tst	r2, r1
 800a256:	d009      	beq.n	800a26c <__gethex+0x1f8>
 800a258:	4553      	cmp	r3, sl
 800a25a:	dd05      	ble.n	800a268 <__gethex+0x1f4>
 800a25c:	1eb9      	subs	r1, r7, #2
 800a25e:	4620      	mov	r0, r4
 800a260:	f000 fed9 	bl	800b016 <__any_on>
 800a264:	2800      	cmp	r0, #0
 800a266:	d145      	bne.n	800a2f4 <__gethex+0x280>
 800a268:	f04f 0a02 	mov.w	sl, #2
 800a26c:	4639      	mov	r1, r7
 800a26e:	4620      	mov	r0, r4
 800a270:	f7ff fe98 	bl	8009fa4 <rshift>
 800a274:	443d      	add	r5, r7
 800a276:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a27a:	42ab      	cmp	r3, r5
 800a27c:	da4c      	bge.n	800a318 <__gethex+0x2a4>
 800a27e:	ee18 0a10 	vmov	r0, s16
 800a282:	4621      	mov	r1, r4
 800a284:	f000 fa6a 	bl	800a75c <_Bfree>
 800a288:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a28a:	2300      	movs	r3, #0
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	27a3      	movs	r7, #163	; 0xa3
 800a290:	e785      	b.n	800a19e <__gethex+0x12a>
 800a292:	1e73      	subs	r3, r6, #1
 800a294:	9a05      	ldr	r2, [sp, #20]
 800a296:	9303      	str	r3, [sp, #12]
 800a298:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d019      	beq.n	800a2d4 <__gethex+0x260>
 800a2a0:	f1bb 0f20 	cmp.w	fp, #32
 800a2a4:	d107      	bne.n	800a2b6 <__gethex+0x242>
 800a2a6:	9b02      	ldr	r3, [sp, #8]
 800a2a8:	9a00      	ldr	r2, [sp, #0]
 800a2aa:	f843 2b04 	str.w	r2, [r3], #4
 800a2ae:	9302      	str	r3, [sp, #8]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	469b      	mov	fp, r3
 800a2b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a2ba:	f7ff fec5 	bl	800a048 <__hexdig_fun>
 800a2be:	9b00      	ldr	r3, [sp, #0]
 800a2c0:	f000 000f 	and.w	r0, r0, #15
 800a2c4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a2c8:	4303      	orrs	r3, r0
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	f10b 0b04 	add.w	fp, fp, #4
 800a2d0:	9b03      	ldr	r3, [sp, #12]
 800a2d2:	e00d      	b.n	800a2f0 <__gethex+0x27c>
 800a2d4:	9b03      	ldr	r3, [sp, #12]
 800a2d6:	9a06      	ldr	r2, [sp, #24]
 800a2d8:	4413      	add	r3, r2
 800a2da:	42bb      	cmp	r3, r7
 800a2dc:	d3e0      	bcc.n	800a2a0 <__gethex+0x22c>
 800a2de:	4618      	mov	r0, r3
 800a2e0:	9901      	ldr	r1, [sp, #4]
 800a2e2:	9307      	str	r3, [sp, #28]
 800a2e4:	4652      	mov	r2, sl
 800a2e6:	f001 f923 	bl	800b530 <strncmp>
 800a2ea:	9b07      	ldr	r3, [sp, #28]
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d1d7      	bne.n	800a2a0 <__gethex+0x22c>
 800a2f0:	461e      	mov	r6, r3
 800a2f2:	e78b      	b.n	800a20c <__gethex+0x198>
 800a2f4:	f04f 0a03 	mov.w	sl, #3
 800a2f8:	e7b8      	b.n	800a26c <__gethex+0x1f8>
 800a2fa:	da0a      	bge.n	800a312 <__gethex+0x29e>
 800a2fc:	1a37      	subs	r7, r6, r0
 800a2fe:	4621      	mov	r1, r4
 800a300:	ee18 0a10 	vmov	r0, s16
 800a304:	463a      	mov	r2, r7
 800a306:	f000 fc45 	bl	800ab94 <__lshift>
 800a30a:	1bed      	subs	r5, r5, r7
 800a30c:	4604      	mov	r4, r0
 800a30e:	f100 0914 	add.w	r9, r0, #20
 800a312:	f04f 0a00 	mov.w	sl, #0
 800a316:	e7ae      	b.n	800a276 <__gethex+0x202>
 800a318:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a31c:	42a8      	cmp	r0, r5
 800a31e:	dd72      	ble.n	800a406 <__gethex+0x392>
 800a320:	1b45      	subs	r5, r0, r5
 800a322:	42ae      	cmp	r6, r5
 800a324:	dc36      	bgt.n	800a394 <__gethex+0x320>
 800a326:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d02a      	beq.n	800a384 <__gethex+0x310>
 800a32e:	2b03      	cmp	r3, #3
 800a330:	d02c      	beq.n	800a38c <__gethex+0x318>
 800a332:	2b01      	cmp	r3, #1
 800a334:	d11c      	bne.n	800a370 <__gethex+0x2fc>
 800a336:	42ae      	cmp	r6, r5
 800a338:	d11a      	bne.n	800a370 <__gethex+0x2fc>
 800a33a:	2e01      	cmp	r6, #1
 800a33c:	d112      	bne.n	800a364 <__gethex+0x2f0>
 800a33e:	9a04      	ldr	r2, [sp, #16]
 800a340:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a344:	6013      	str	r3, [r2, #0]
 800a346:	2301      	movs	r3, #1
 800a348:	6123      	str	r3, [r4, #16]
 800a34a:	f8c9 3000 	str.w	r3, [r9]
 800a34e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a350:	2762      	movs	r7, #98	; 0x62
 800a352:	601c      	str	r4, [r3, #0]
 800a354:	e723      	b.n	800a19e <__gethex+0x12a>
 800a356:	bf00      	nop
 800a358:	0800c3e0 	.word	0x0800c3e0
 800a35c:	0800c368 	.word	0x0800c368
 800a360:	0800c379 	.word	0x0800c379
 800a364:	1e71      	subs	r1, r6, #1
 800a366:	4620      	mov	r0, r4
 800a368:	f000 fe55 	bl	800b016 <__any_on>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d1e6      	bne.n	800a33e <__gethex+0x2ca>
 800a370:	ee18 0a10 	vmov	r0, s16
 800a374:	4621      	mov	r1, r4
 800a376:	f000 f9f1 	bl	800a75c <_Bfree>
 800a37a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a37c:	2300      	movs	r3, #0
 800a37e:	6013      	str	r3, [r2, #0]
 800a380:	2750      	movs	r7, #80	; 0x50
 800a382:	e70c      	b.n	800a19e <__gethex+0x12a>
 800a384:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1f2      	bne.n	800a370 <__gethex+0x2fc>
 800a38a:	e7d8      	b.n	800a33e <__gethex+0x2ca>
 800a38c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1d5      	bne.n	800a33e <__gethex+0x2ca>
 800a392:	e7ed      	b.n	800a370 <__gethex+0x2fc>
 800a394:	1e6f      	subs	r7, r5, #1
 800a396:	f1ba 0f00 	cmp.w	sl, #0
 800a39a:	d131      	bne.n	800a400 <__gethex+0x38c>
 800a39c:	b127      	cbz	r7, 800a3a8 <__gethex+0x334>
 800a39e:	4639      	mov	r1, r7
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f000 fe38 	bl	800b016 <__any_on>
 800a3a6:	4682      	mov	sl, r0
 800a3a8:	117b      	asrs	r3, r7, #5
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a3b0:	f007 071f 	and.w	r7, r7, #31
 800a3b4:	fa01 f707 	lsl.w	r7, r1, r7
 800a3b8:	421f      	tst	r7, r3
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	4620      	mov	r0, r4
 800a3be:	bf18      	it	ne
 800a3c0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a3c4:	1b76      	subs	r6, r6, r5
 800a3c6:	f7ff fded 	bl	8009fa4 <rshift>
 800a3ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a3ce:	2702      	movs	r7, #2
 800a3d0:	f1ba 0f00 	cmp.w	sl, #0
 800a3d4:	d048      	beq.n	800a468 <__gethex+0x3f4>
 800a3d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d015      	beq.n	800a40a <__gethex+0x396>
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	d017      	beq.n	800a412 <__gethex+0x39e>
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d109      	bne.n	800a3fa <__gethex+0x386>
 800a3e6:	f01a 0f02 	tst.w	sl, #2
 800a3ea:	d006      	beq.n	800a3fa <__gethex+0x386>
 800a3ec:	f8d9 0000 	ldr.w	r0, [r9]
 800a3f0:	ea4a 0a00 	orr.w	sl, sl, r0
 800a3f4:	f01a 0f01 	tst.w	sl, #1
 800a3f8:	d10e      	bne.n	800a418 <__gethex+0x3a4>
 800a3fa:	f047 0710 	orr.w	r7, r7, #16
 800a3fe:	e033      	b.n	800a468 <__gethex+0x3f4>
 800a400:	f04f 0a01 	mov.w	sl, #1
 800a404:	e7d0      	b.n	800a3a8 <__gethex+0x334>
 800a406:	2701      	movs	r7, #1
 800a408:	e7e2      	b.n	800a3d0 <__gethex+0x35c>
 800a40a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a40c:	f1c3 0301 	rsb	r3, r3, #1
 800a410:	9315      	str	r3, [sp, #84]	; 0x54
 800a412:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a414:	2b00      	cmp	r3, #0
 800a416:	d0f0      	beq.n	800a3fa <__gethex+0x386>
 800a418:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a41c:	f104 0314 	add.w	r3, r4, #20
 800a420:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a424:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a428:	f04f 0c00 	mov.w	ip, #0
 800a42c:	4618      	mov	r0, r3
 800a42e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a432:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a436:	d01c      	beq.n	800a472 <__gethex+0x3fe>
 800a438:	3201      	adds	r2, #1
 800a43a:	6002      	str	r2, [r0, #0]
 800a43c:	2f02      	cmp	r7, #2
 800a43e:	f104 0314 	add.w	r3, r4, #20
 800a442:	d13f      	bne.n	800a4c4 <__gethex+0x450>
 800a444:	f8d8 2000 	ldr.w	r2, [r8]
 800a448:	3a01      	subs	r2, #1
 800a44a:	42b2      	cmp	r2, r6
 800a44c:	d10a      	bne.n	800a464 <__gethex+0x3f0>
 800a44e:	1171      	asrs	r1, r6, #5
 800a450:	2201      	movs	r2, #1
 800a452:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a456:	f006 061f 	and.w	r6, r6, #31
 800a45a:	fa02 f606 	lsl.w	r6, r2, r6
 800a45e:	421e      	tst	r6, r3
 800a460:	bf18      	it	ne
 800a462:	4617      	movne	r7, r2
 800a464:	f047 0720 	orr.w	r7, r7, #32
 800a468:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a46a:	601c      	str	r4, [r3, #0]
 800a46c:	9b04      	ldr	r3, [sp, #16]
 800a46e:	601d      	str	r5, [r3, #0]
 800a470:	e695      	b.n	800a19e <__gethex+0x12a>
 800a472:	4299      	cmp	r1, r3
 800a474:	f843 cc04 	str.w	ip, [r3, #-4]
 800a478:	d8d8      	bhi.n	800a42c <__gethex+0x3b8>
 800a47a:	68a3      	ldr	r3, [r4, #8]
 800a47c:	459b      	cmp	fp, r3
 800a47e:	db19      	blt.n	800a4b4 <__gethex+0x440>
 800a480:	6861      	ldr	r1, [r4, #4]
 800a482:	ee18 0a10 	vmov	r0, s16
 800a486:	3101      	adds	r1, #1
 800a488:	f000 f928 	bl	800a6dc <_Balloc>
 800a48c:	4681      	mov	r9, r0
 800a48e:	b918      	cbnz	r0, 800a498 <__gethex+0x424>
 800a490:	4b1a      	ldr	r3, [pc, #104]	; (800a4fc <__gethex+0x488>)
 800a492:	4602      	mov	r2, r0
 800a494:	2184      	movs	r1, #132	; 0x84
 800a496:	e6a8      	b.n	800a1ea <__gethex+0x176>
 800a498:	6922      	ldr	r2, [r4, #16]
 800a49a:	3202      	adds	r2, #2
 800a49c:	f104 010c 	add.w	r1, r4, #12
 800a4a0:	0092      	lsls	r2, r2, #2
 800a4a2:	300c      	adds	r0, #12
 800a4a4:	f000 f90c 	bl	800a6c0 <memcpy>
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	ee18 0a10 	vmov	r0, s16
 800a4ae:	f000 f955 	bl	800a75c <_Bfree>
 800a4b2:	464c      	mov	r4, r9
 800a4b4:	6923      	ldr	r3, [r4, #16]
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4bc:	6122      	str	r2, [r4, #16]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	615a      	str	r2, [r3, #20]
 800a4c2:	e7bb      	b.n	800a43c <__gethex+0x3c8>
 800a4c4:	6922      	ldr	r2, [r4, #16]
 800a4c6:	455a      	cmp	r2, fp
 800a4c8:	dd0b      	ble.n	800a4e2 <__gethex+0x46e>
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f7ff fd69 	bl	8009fa4 <rshift>
 800a4d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4d6:	3501      	adds	r5, #1
 800a4d8:	42ab      	cmp	r3, r5
 800a4da:	f6ff aed0 	blt.w	800a27e <__gethex+0x20a>
 800a4de:	2701      	movs	r7, #1
 800a4e0:	e7c0      	b.n	800a464 <__gethex+0x3f0>
 800a4e2:	f016 061f 	ands.w	r6, r6, #31
 800a4e6:	d0fa      	beq.n	800a4de <__gethex+0x46a>
 800a4e8:	4453      	add	r3, sl
 800a4ea:	f1c6 0620 	rsb	r6, r6, #32
 800a4ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a4f2:	f000 f9e5 	bl	800a8c0 <__hi0bits>
 800a4f6:	42b0      	cmp	r0, r6
 800a4f8:	dbe7      	blt.n	800a4ca <__gethex+0x456>
 800a4fa:	e7f0      	b.n	800a4de <__gethex+0x46a>
 800a4fc:	0800c368 	.word	0x0800c368

0800a500 <L_shift>:
 800a500:	f1c2 0208 	rsb	r2, r2, #8
 800a504:	0092      	lsls	r2, r2, #2
 800a506:	b570      	push	{r4, r5, r6, lr}
 800a508:	f1c2 0620 	rsb	r6, r2, #32
 800a50c:	6843      	ldr	r3, [r0, #4]
 800a50e:	6804      	ldr	r4, [r0, #0]
 800a510:	fa03 f506 	lsl.w	r5, r3, r6
 800a514:	432c      	orrs	r4, r5
 800a516:	40d3      	lsrs	r3, r2
 800a518:	6004      	str	r4, [r0, #0]
 800a51a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a51e:	4288      	cmp	r0, r1
 800a520:	d3f4      	bcc.n	800a50c <L_shift+0xc>
 800a522:	bd70      	pop	{r4, r5, r6, pc}

0800a524 <__match>:
 800a524:	b530      	push	{r4, r5, lr}
 800a526:	6803      	ldr	r3, [r0, #0]
 800a528:	3301      	adds	r3, #1
 800a52a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a52e:	b914      	cbnz	r4, 800a536 <__match+0x12>
 800a530:	6003      	str	r3, [r0, #0]
 800a532:	2001      	movs	r0, #1
 800a534:	bd30      	pop	{r4, r5, pc}
 800a536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a53a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a53e:	2d19      	cmp	r5, #25
 800a540:	bf98      	it	ls
 800a542:	3220      	addls	r2, #32
 800a544:	42a2      	cmp	r2, r4
 800a546:	d0f0      	beq.n	800a52a <__match+0x6>
 800a548:	2000      	movs	r0, #0
 800a54a:	e7f3      	b.n	800a534 <__match+0x10>

0800a54c <__hexnan>:
 800a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a550:	680b      	ldr	r3, [r1, #0]
 800a552:	115e      	asrs	r6, r3, #5
 800a554:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a558:	f013 031f 	ands.w	r3, r3, #31
 800a55c:	b087      	sub	sp, #28
 800a55e:	bf18      	it	ne
 800a560:	3604      	addne	r6, #4
 800a562:	2500      	movs	r5, #0
 800a564:	1f37      	subs	r7, r6, #4
 800a566:	4690      	mov	r8, r2
 800a568:	6802      	ldr	r2, [r0, #0]
 800a56a:	9301      	str	r3, [sp, #4]
 800a56c:	4682      	mov	sl, r0
 800a56e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a572:	46b9      	mov	r9, r7
 800a574:	463c      	mov	r4, r7
 800a576:	9502      	str	r5, [sp, #8]
 800a578:	46ab      	mov	fp, r5
 800a57a:	7851      	ldrb	r1, [r2, #1]
 800a57c:	1c53      	adds	r3, r2, #1
 800a57e:	9303      	str	r3, [sp, #12]
 800a580:	b341      	cbz	r1, 800a5d4 <__hexnan+0x88>
 800a582:	4608      	mov	r0, r1
 800a584:	9205      	str	r2, [sp, #20]
 800a586:	9104      	str	r1, [sp, #16]
 800a588:	f7ff fd5e 	bl	800a048 <__hexdig_fun>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d14f      	bne.n	800a630 <__hexnan+0xe4>
 800a590:	9904      	ldr	r1, [sp, #16]
 800a592:	9a05      	ldr	r2, [sp, #20]
 800a594:	2920      	cmp	r1, #32
 800a596:	d818      	bhi.n	800a5ca <__hexnan+0x7e>
 800a598:	9b02      	ldr	r3, [sp, #8]
 800a59a:	459b      	cmp	fp, r3
 800a59c:	dd13      	ble.n	800a5c6 <__hexnan+0x7a>
 800a59e:	454c      	cmp	r4, r9
 800a5a0:	d206      	bcs.n	800a5b0 <__hexnan+0x64>
 800a5a2:	2d07      	cmp	r5, #7
 800a5a4:	dc04      	bgt.n	800a5b0 <__hexnan+0x64>
 800a5a6:	462a      	mov	r2, r5
 800a5a8:	4649      	mov	r1, r9
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f7ff ffa8 	bl	800a500 <L_shift>
 800a5b0:	4544      	cmp	r4, r8
 800a5b2:	d950      	bls.n	800a656 <__hexnan+0x10a>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f1a4 0904 	sub.w	r9, r4, #4
 800a5ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5be:	f8cd b008 	str.w	fp, [sp, #8]
 800a5c2:	464c      	mov	r4, r9
 800a5c4:	461d      	mov	r5, r3
 800a5c6:	9a03      	ldr	r2, [sp, #12]
 800a5c8:	e7d7      	b.n	800a57a <__hexnan+0x2e>
 800a5ca:	2929      	cmp	r1, #41	; 0x29
 800a5cc:	d156      	bne.n	800a67c <__hexnan+0x130>
 800a5ce:	3202      	adds	r2, #2
 800a5d0:	f8ca 2000 	str.w	r2, [sl]
 800a5d4:	f1bb 0f00 	cmp.w	fp, #0
 800a5d8:	d050      	beq.n	800a67c <__hexnan+0x130>
 800a5da:	454c      	cmp	r4, r9
 800a5dc:	d206      	bcs.n	800a5ec <__hexnan+0xa0>
 800a5de:	2d07      	cmp	r5, #7
 800a5e0:	dc04      	bgt.n	800a5ec <__hexnan+0xa0>
 800a5e2:	462a      	mov	r2, r5
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f7ff ff8a 	bl	800a500 <L_shift>
 800a5ec:	4544      	cmp	r4, r8
 800a5ee:	d934      	bls.n	800a65a <__hexnan+0x10e>
 800a5f0:	f1a8 0204 	sub.w	r2, r8, #4
 800a5f4:	4623      	mov	r3, r4
 800a5f6:	f853 1b04 	ldr.w	r1, [r3], #4
 800a5fa:	f842 1f04 	str.w	r1, [r2, #4]!
 800a5fe:	429f      	cmp	r7, r3
 800a600:	d2f9      	bcs.n	800a5f6 <__hexnan+0xaa>
 800a602:	1b3b      	subs	r3, r7, r4
 800a604:	f023 0303 	bic.w	r3, r3, #3
 800a608:	3304      	adds	r3, #4
 800a60a:	3401      	adds	r4, #1
 800a60c:	3e03      	subs	r6, #3
 800a60e:	42b4      	cmp	r4, r6
 800a610:	bf88      	it	hi
 800a612:	2304      	movhi	r3, #4
 800a614:	4443      	add	r3, r8
 800a616:	2200      	movs	r2, #0
 800a618:	f843 2b04 	str.w	r2, [r3], #4
 800a61c:	429f      	cmp	r7, r3
 800a61e:	d2fb      	bcs.n	800a618 <__hexnan+0xcc>
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	b91b      	cbnz	r3, 800a62c <__hexnan+0xe0>
 800a624:	4547      	cmp	r7, r8
 800a626:	d127      	bne.n	800a678 <__hexnan+0x12c>
 800a628:	2301      	movs	r3, #1
 800a62a:	603b      	str	r3, [r7, #0]
 800a62c:	2005      	movs	r0, #5
 800a62e:	e026      	b.n	800a67e <__hexnan+0x132>
 800a630:	3501      	adds	r5, #1
 800a632:	2d08      	cmp	r5, #8
 800a634:	f10b 0b01 	add.w	fp, fp, #1
 800a638:	dd06      	ble.n	800a648 <__hexnan+0xfc>
 800a63a:	4544      	cmp	r4, r8
 800a63c:	d9c3      	bls.n	800a5c6 <__hexnan+0x7a>
 800a63e:	2300      	movs	r3, #0
 800a640:	f844 3c04 	str.w	r3, [r4, #-4]
 800a644:	2501      	movs	r5, #1
 800a646:	3c04      	subs	r4, #4
 800a648:	6822      	ldr	r2, [r4, #0]
 800a64a:	f000 000f 	and.w	r0, r0, #15
 800a64e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a652:	6022      	str	r2, [r4, #0]
 800a654:	e7b7      	b.n	800a5c6 <__hexnan+0x7a>
 800a656:	2508      	movs	r5, #8
 800a658:	e7b5      	b.n	800a5c6 <__hexnan+0x7a>
 800a65a:	9b01      	ldr	r3, [sp, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d0df      	beq.n	800a620 <__hexnan+0xd4>
 800a660:	f04f 32ff 	mov.w	r2, #4294967295
 800a664:	f1c3 0320 	rsb	r3, r3, #32
 800a668:	fa22 f303 	lsr.w	r3, r2, r3
 800a66c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a670:	401a      	ands	r2, r3
 800a672:	f846 2c04 	str.w	r2, [r6, #-4]
 800a676:	e7d3      	b.n	800a620 <__hexnan+0xd4>
 800a678:	3f04      	subs	r7, #4
 800a67a:	e7d1      	b.n	800a620 <__hexnan+0xd4>
 800a67c:	2004      	movs	r0, #4
 800a67e:	b007      	add	sp, #28
 800a680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a684 <_localeconv_r>:
 800a684:	4800      	ldr	r0, [pc, #0]	; (800a688 <_localeconv_r+0x4>)
 800a686:	4770      	bx	lr
 800a688:	24000168 	.word	0x24000168

0800a68c <malloc>:
 800a68c:	4b02      	ldr	r3, [pc, #8]	; (800a698 <malloc+0xc>)
 800a68e:	4601      	mov	r1, r0
 800a690:	6818      	ldr	r0, [r3, #0]
 800a692:	f000 bd63 	b.w	800b15c <_malloc_r>
 800a696:	bf00      	nop
 800a698:	24000010 	.word	0x24000010

0800a69c <__ascii_mbtowc>:
 800a69c:	b082      	sub	sp, #8
 800a69e:	b901      	cbnz	r1, 800a6a2 <__ascii_mbtowc+0x6>
 800a6a0:	a901      	add	r1, sp, #4
 800a6a2:	b142      	cbz	r2, 800a6b6 <__ascii_mbtowc+0x1a>
 800a6a4:	b14b      	cbz	r3, 800a6ba <__ascii_mbtowc+0x1e>
 800a6a6:	7813      	ldrb	r3, [r2, #0]
 800a6a8:	600b      	str	r3, [r1, #0]
 800a6aa:	7812      	ldrb	r2, [r2, #0]
 800a6ac:	1e10      	subs	r0, r2, #0
 800a6ae:	bf18      	it	ne
 800a6b0:	2001      	movne	r0, #1
 800a6b2:	b002      	add	sp, #8
 800a6b4:	4770      	bx	lr
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	e7fb      	b.n	800a6b2 <__ascii_mbtowc+0x16>
 800a6ba:	f06f 0001 	mvn.w	r0, #1
 800a6be:	e7f8      	b.n	800a6b2 <__ascii_mbtowc+0x16>

0800a6c0 <memcpy>:
 800a6c0:	440a      	add	r2, r1
 800a6c2:	4291      	cmp	r1, r2
 800a6c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6c8:	d100      	bne.n	800a6cc <memcpy+0xc>
 800a6ca:	4770      	bx	lr
 800a6cc:	b510      	push	{r4, lr}
 800a6ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6d6:	4291      	cmp	r1, r2
 800a6d8:	d1f9      	bne.n	800a6ce <memcpy+0xe>
 800a6da:	bd10      	pop	{r4, pc}

0800a6dc <_Balloc>:
 800a6dc:	b570      	push	{r4, r5, r6, lr}
 800a6de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	460d      	mov	r5, r1
 800a6e4:	b976      	cbnz	r6, 800a704 <_Balloc+0x28>
 800a6e6:	2010      	movs	r0, #16
 800a6e8:	f7ff ffd0 	bl	800a68c <malloc>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	6260      	str	r0, [r4, #36]	; 0x24
 800a6f0:	b920      	cbnz	r0, 800a6fc <_Balloc+0x20>
 800a6f2:	4b18      	ldr	r3, [pc, #96]	; (800a754 <_Balloc+0x78>)
 800a6f4:	4818      	ldr	r0, [pc, #96]	; (800a758 <_Balloc+0x7c>)
 800a6f6:	2166      	movs	r1, #102	; 0x66
 800a6f8:	f000 ff3c 	bl	800b574 <__assert_func>
 800a6fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a700:	6006      	str	r6, [r0, #0]
 800a702:	60c6      	str	r6, [r0, #12]
 800a704:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a706:	68f3      	ldr	r3, [r6, #12]
 800a708:	b183      	cbz	r3, 800a72c <_Balloc+0x50>
 800a70a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a712:	b9b8      	cbnz	r0, 800a744 <_Balloc+0x68>
 800a714:	2101      	movs	r1, #1
 800a716:	fa01 f605 	lsl.w	r6, r1, r5
 800a71a:	1d72      	adds	r2, r6, #5
 800a71c:	0092      	lsls	r2, r2, #2
 800a71e:	4620      	mov	r0, r4
 800a720:	f000 fc9a 	bl	800b058 <_calloc_r>
 800a724:	b160      	cbz	r0, 800a740 <_Balloc+0x64>
 800a726:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a72a:	e00e      	b.n	800a74a <_Balloc+0x6e>
 800a72c:	2221      	movs	r2, #33	; 0x21
 800a72e:	2104      	movs	r1, #4
 800a730:	4620      	mov	r0, r4
 800a732:	f000 fc91 	bl	800b058 <_calloc_r>
 800a736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a738:	60f0      	str	r0, [r6, #12]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1e4      	bne.n	800a70a <_Balloc+0x2e>
 800a740:	2000      	movs	r0, #0
 800a742:	bd70      	pop	{r4, r5, r6, pc}
 800a744:	6802      	ldr	r2, [r0, #0]
 800a746:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a74a:	2300      	movs	r3, #0
 800a74c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a750:	e7f7      	b.n	800a742 <_Balloc+0x66>
 800a752:	bf00      	nop
 800a754:	0800c2f6 	.word	0x0800c2f6
 800a758:	0800c3f4 	.word	0x0800c3f4

0800a75c <_Bfree>:
 800a75c:	b570      	push	{r4, r5, r6, lr}
 800a75e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a760:	4605      	mov	r5, r0
 800a762:	460c      	mov	r4, r1
 800a764:	b976      	cbnz	r6, 800a784 <_Bfree+0x28>
 800a766:	2010      	movs	r0, #16
 800a768:	f7ff ff90 	bl	800a68c <malloc>
 800a76c:	4602      	mov	r2, r0
 800a76e:	6268      	str	r0, [r5, #36]	; 0x24
 800a770:	b920      	cbnz	r0, 800a77c <_Bfree+0x20>
 800a772:	4b09      	ldr	r3, [pc, #36]	; (800a798 <_Bfree+0x3c>)
 800a774:	4809      	ldr	r0, [pc, #36]	; (800a79c <_Bfree+0x40>)
 800a776:	218a      	movs	r1, #138	; 0x8a
 800a778:	f000 fefc 	bl	800b574 <__assert_func>
 800a77c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a780:	6006      	str	r6, [r0, #0]
 800a782:	60c6      	str	r6, [r0, #12]
 800a784:	b13c      	cbz	r4, 800a796 <_Bfree+0x3a>
 800a786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a788:	6862      	ldr	r2, [r4, #4]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a790:	6021      	str	r1, [r4, #0]
 800a792:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a796:	bd70      	pop	{r4, r5, r6, pc}
 800a798:	0800c2f6 	.word	0x0800c2f6
 800a79c:	0800c3f4 	.word	0x0800c3f4

0800a7a0 <__multadd>:
 800a7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a4:	690d      	ldr	r5, [r1, #16]
 800a7a6:	4607      	mov	r7, r0
 800a7a8:	460c      	mov	r4, r1
 800a7aa:	461e      	mov	r6, r3
 800a7ac:	f101 0c14 	add.w	ip, r1, #20
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	f8dc 3000 	ldr.w	r3, [ip]
 800a7b6:	b299      	uxth	r1, r3
 800a7b8:	fb02 6101 	mla	r1, r2, r1, r6
 800a7bc:	0c1e      	lsrs	r6, r3, #16
 800a7be:	0c0b      	lsrs	r3, r1, #16
 800a7c0:	fb02 3306 	mla	r3, r2, r6, r3
 800a7c4:	b289      	uxth	r1, r1
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a7cc:	4285      	cmp	r5, r0
 800a7ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a7d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a7d6:	dcec      	bgt.n	800a7b2 <__multadd+0x12>
 800a7d8:	b30e      	cbz	r6, 800a81e <__multadd+0x7e>
 800a7da:	68a3      	ldr	r3, [r4, #8]
 800a7dc:	42ab      	cmp	r3, r5
 800a7de:	dc19      	bgt.n	800a814 <__multadd+0x74>
 800a7e0:	6861      	ldr	r1, [r4, #4]
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	3101      	adds	r1, #1
 800a7e6:	f7ff ff79 	bl	800a6dc <_Balloc>
 800a7ea:	4680      	mov	r8, r0
 800a7ec:	b928      	cbnz	r0, 800a7fa <__multadd+0x5a>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	4b0c      	ldr	r3, [pc, #48]	; (800a824 <__multadd+0x84>)
 800a7f2:	480d      	ldr	r0, [pc, #52]	; (800a828 <__multadd+0x88>)
 800a7f4:	21b5      	movs	r1, #181	; 0xb5
 800a7f6:	f000 febd 	bl	800b574 <__assert_func>
 800a7fa:	6922      	ldr	r2, [r4, #16]
 800a7fc:	3202      	adds	r2, #2
 800a7fe:	f104 010c 	add.w	r1, r4, #12
 800a802:	0092      	lsls	r2, r2, #2
 800a804:	300c      	adds	r0, #12
 800a806:	f7ff ff5b 	bl	800a6c0 <memcpy>
 800a80a:	4621      	mov	r1, r4
 800a80c:	4638      	mov	r0, r7
 800a80e:	f7ff ffa5 	bl	800a75c <_Bfree>
 800a812:	4644      	mov	r4, r8
 800a814:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a818:	3501      	adds	r5, #1
 800a81a:	615e      	str	r6, [r3, #20]
 800a81c:	6125      	str	r5, [r4, #16]
 800a81e:	4620      	mov	r0, r4
 800a820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a824:	0800c368 	.word	0x0800c368
 800a828:	0800c3f4 	.word	0x0800c3f4

0800a82c <__s2b>:
 800a82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a830:	460c      	mov	r4, r1
 800a832:	4615      	mov	r5, r2
 800a834:	461f      	mov	r7, r3
 800a836:	2209      	movs	r2, #9
 800a838:	3308      	adds	r3, #8
 800a83a:	4606      	mov	r6, r0
 800a83c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a840:	2100      	movs	r1, #0
 800a842:	2201      	movs	r2, #1
 800a844:	429a      	cmp	r2, r3
 800a846:	db09      	blt.n	800a85c <__s2b+0x30>
 800a848:	4630      	mov	r0, r6
 800a84a:	f7ff ff47 	bl	800a6dc <_Balloc>
 800a84e:	b940      	cbnz	r0, 800a862 <__s2b+0x36>
 800a850:	4602      	mov	r2, r0
 800a852:	4b19      	ldr	r3, [pc, #100]	; (800a8b8 <__s2b+0x8c>)
 800a854:	4819      	ldr	r0, [pc, #100]	; (800a8bc <__s2b+0x90>)
 800a856:	21ce      	movs	r1, #206	; 0xce
 800a858:	f000 fe8c 	bl	800b574 <__assert_func>
 800a85c:	0052      	lsls	r2, r2, #1
 800a85e:	3101      	adds	r1, #1
 800a860:	e7f0      	b.n	800a844 <__s2b+0x18>
 800a862:	9b08      	ldr	r3, [sp, #32]
 800a864:	6143      	str	r3, [r0, #20]
 800a866:	2d09      	cmp	r5, #9
 800a868:	f04f 0301 	mov.w	r3, #1
 800a86c:	6103      	str	r3, [r0, #16]
 800a86e:	dd16      	ble.n	800a89e <__s2b+0x72>
 800a870:	f104 0909 	add.w	r9, r4, #9
 800a874:	46c8      	mov	r8, r9
 800a876:	442c      	add	r4, r5
 800a878:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a87c:	4601      	mov	r1, r0
 800a87e:	3b30      	subs	r3, #48	; 0x30
 800a880:	220a      	movs	r2, #10
 800a882:	4630      	mov	r0, r6
 800a884:	f7ff ff8c 	bl	800a7a0 <__multadd>
 800a888:	45a0      	cmp	r8, r4
 800a88a:	d1f5      	bne.n	800a878 <__s2b+0x4c>
 800a88c:	f1a5 0408 	sub.w	r4, r5, #8
 800a890:	444c      	add	r4, r9
 800a892:	1b2d      	subs	r5, r5, r4
 800a894:	1963      	adds	r3, r4, r5
 800a896:	42bb      	cmp	r3, r7
 800a898:	db04      	blt.n	800a8a4 <__s2b+0x78>
 800a89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a89e:	340a      	adds	r4, #10
 800a8a0:	2509      	movs	r5, #9
 800a8a2:	e7f6      	b.n	800a892 <__s2b+0x66>
 800a8a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a8a8:	4601      	mov	r1, r0
 800a8aa:	3b30      	subs	r3, #48	; 0x30
 800a8ac:	220a      	movs	r2, #10
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	f7ff ff76 	bl	800a7a0 <__multadd>
 800a8b4:	e7ee      	b.n	800a894 <__s2b+0x68>
 800a8b6:	bf00      	nop
 800a8b8:	0800c368 	.word	0x0800c368
 800a8bc:	0800c3f4 	.word	0x0800c3f4

0800a8c0 <__hi0bits>:
 800a8c0:	0c03      	lsrs	r3, r0, #16
 800a8c2:	041b      	lsls	r3, r3, #16
 800a8c4:	b9d3      	cbnz	r3, 800a8fc <__hi0bits+0x3c>
 800a8c6:	0400      	lsls	r0, r0, #16
 800a8c8:	2310      	movs	r3, #16
 800a8ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8ce:	bf04      	itt	eq
 800a8d0:	0200      	lsleq	r0, r0, #8
 800a8d2:	3308      	addeq	r3, #8
 800a8d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a8d8:	bf04      	itt	eq
 800a8da:	0100      	lsleq	r0, r0, #4
 800a8dc:	3304      	addeq	r3, #4
 800a8de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a8e2:	bf04      	itt	eq
 800a8e4:	0080      	lsleq	r0, r0, #2
 800a8e6:	3302      	addeq	r3, #2
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	db05      	blt.n	800a8f8 <__hi0bits+0x38>
 800a8ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a8f0:	f103 0301 	add.w	r3, r3, #1
 800a8f4:	bf08      	it	eq
 800a8f6:	2320      	moveq	r3, #32
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	4770      	bx	lr
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	e7e4      	b.n	800a8ca <__hi0bits+0xa>

0800a900 <__lo0bits>:
 800a900:	6803      	ldr	r3, [r0, #0]
 800a902:	f013 0207 	ands.w	r2, r3, #7
 800a906:	4601      	mov	r1, r0
 800a908:	d00b      	beq.n	800a922 <__lo0bits+0x22>
 800a90a:	07da      	lsls	r2, r3, #31
 800a90c:	d423      	bmi.n	800a956 <__lo0bits+0x56>
 800a90e:	0798      	lsls	r0, r3, #30
 800a910:	bf49      	itett	mi
 800a912:	085b      	lsrmi	r3, r3, #1
 800a914:	089b      	lsrpl	r3, r3, #2
 800a916:	2001      	movmi	r0, #1
 800a918:	600b      	strmi	r3, [r1, #0]
 800a91a:	bf5c      	itt	pl
 800a91c:	600b      	strpl	r3, [r1, #0]
 800a91e:	2002      	movpl	r0, #2
 800a920:	4770      	bx	lr
 800a922:	b298      	uxth	r0, r3
 800a924:	b9a8      	cbnz	r0, 800a952 <__lo0bits+0x52>
 800a926:	0c1b      	lsrs	r3, r3, #16
 800a928:	2010      	movs	r0, #16
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	b90a      	cbnz	r2, 800a932 <__lo0bits+0x32>
 800a92e:	3008      	adds	r0, #8
 800a930:	0a1b      	lsrs	r3, r3, #8
 800a932:	071a      	lsls	r2, r3, #28
 800a934:	bf04      	itt	eq
 800a936:	091b      	lsreq	r3, r3, #4
 800a938:	3004      	addeq	r0, #4
 800a93a:	079a      	lsls	r2, r3, #30
 800a93c:	bf04      	itt	eq
 800a93e:	089b      	lsreq	r3, r3, #2
 800a940:	3002      	addeq	r0, #2
 800a942:	07da      	lsls	r2, r3, #31
 800a944:	d403      	bmi.n	800a94e <__lo0bits+0x4e>
 800a946:	085b      	lsrs	r3, r3, #1
 800a948:	f100 0001 	add.w	r0, r0, #1
 800a94c:	d005      	beq.n	800a95a <__lo0bits+0x5a>
 800a94e:	600b      	str	r3, [r1, #0]
 800a950:	4770      	bx	lr
 800a952:	4610      	mov	r0, r2
 800a954:	e7e9      	b.n	800a92a <__lo0bits+0x2a>
 800a956:	2000      	movs	r0, #0
 800a958:	4770      	bx	lr
 800a95a:	2020      	movs	r0, #32
 800a95c:	4770      	bx	lr
	...

0800a960 <__i2b>:
 800a960:	b510      	push	{r4, lr}
 800a962:	460c      	mov	r4, r1
 800a964:	2101      	movs	r1, #1
 800a966:	f7ff feb9 	bl	800a6dc <_Balloc>
 800a96a:	4602      	mov	r2, r0
 800a96c:	b928      	cbnz	r0, 800a97a <__i2b+0x1a>
 800a96e:	4b05      	ldr	r3, [pc, #20]	; (800a984 <__i2b+0x24>)
 800a970:	4805      	ldr	r0, [pc, #20]	; (800a988 <__i2b+0x28>)
 800a972:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a976:	f000 fdfd 	bl	800b574 <__assert_func>
 800a97a:	2301      	movs	r3, #1
 800a97c:	6144      	str	r4, [r0, #20]
 800a97e:	6103      	str	r3, [r0, #16]
 800a980:	bd10      	pop	{r4, pc}
 800a982:	bf00      	nop
 800a984:	0800c368 	.word	0x0800c368
 800a988:	0800c3f4 	.word	0x0800c3f4

0800a98c <__multiply>:
 800a98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a990:	4691      	mov	r9, r2
 800a992:	690a      	ldr	r2, [r1, #16]
 800a994:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a998:	429a      	cmp	r2, r3
 800a99a:	bfb8      	it	lt
 800a99c:	460b      	movlt	r3, r1
 800a99e:	460c      	mov	r4, r1
 800a9a0:	bfbc      	itt	lt
 800a9a2:	464c      	movlt	r4, r9
 800a9a4:	4699      	movlt	r9, r3
 800a9a6:	6927      	ldr	r7, [r4, #16]
 800a9a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a9ac:	68a3      	ldr	r3, [r4, #8]
 800a9ae:	6861      	ldr	r1, [r4, #4]
 800a9b0:	eb07 060a 	add.w	r6, r7, sl
 800a9b4:	42b3      	cmp	r3, r6
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	bfb8      	it	lt
 800a9ba:	3101      	addlt	r1, #1
 800a9bc:	f7ff fe8e 	bl	800a6dc <_Balloc>
 800a9c0:	b930      	cbnz	r0, 800a9d0 <__multiply+0x44>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	4b44      	ldr	r3, [pc, #272]	; (800aad8 <__multiply+0x14c>)
 800a9c6:	4845      	ldr	r0, [pc, #276]	; (800aadc <__multiply+0x150>)
 800a9c8:	f240 115d 	movw	r1, #349	; 0x15d
 800a9cc:	f000 fdd2 	bl	800b574 <__assert_func>
 800a9d0:	f100 0514 	add.w	r5, r0, #20
 800a9d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a9d8:	462b      	mov	r3, r5
 800a9da:	2200      	movs	r2, #0
 800a9dc:	4543      	cmp	r3, r8
 800a9de:	d321      	bcc.n	800aa24 <__multiply+0x98>
 800a9e0:	f104 0314 	add.w	r3, r4, #20
 800a9e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a9e8:	f109 0314 	add.w	r3, r9, #20
 800a9ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a9f0:	9202      	str	r2, [sp, #8]
 800a9f2:	1b3a      	subs	r2, r7, r4
 800a9f4:	3a15      	subs	r2, #21
 800a9f6:	f022 0203 	bic.w	r2, r2, #3
 800a9fa:	3204      	adds	r2, #4
 800a9fc:	f104 0115 	add.w	r1, r4, #21
 800aa00:	428f      	cmp	r7, r1
 800aa02:	bf38      	it	cc
 800aa04:	2204      	movcc	r2, #4
 800aa06:	9201      	str	r2, [sp, #4]
 800aa08:	9a02      	ldr	r2, [sp, #8]
 800aa0a:	9303      	str	r3, [sp, #12]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d80c      	bhi.n	800aa2a <__multiply+0x9e>
 800aa10:	2e00      	cmp	r6, #0
 800aa12:	dd03      	ble.n	800aa1c <__multiply+0x90>
 800aa14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d05a      	beq.n	800aad2 <__multiply+0x146>
 800aa1c:	6106      	str	r6, [r0, #16]
 800aa1e:	b005      	add	sp, #20
 800aa20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa24:	f843 2b04 	str.w	r2, [r3], #4
 800aa28:	e7d8      	b.n	800a9dc <__multiply+0x50>
 800aa2a:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa2e:	f1ba 0f00 	cmp.w	sl, #0
 800aa32:	d024      	beq.n	800aa7e <__multiply+0xf2>
 800aa34:	f104 0e14 	add.w	lr, r4, #20
 800aa38:	46a9      	mov	r9, r5
 800aa3a:	f04f 0c00 	mov.w	ip, #0
 800aa3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aa42:	f8d9 1000 	ldr.w	r1, [r9]
 800aa46:	fa1f fb82 	uxth.w	fp, r2
 800aa4a:	b289      	uxth	r1, r1
 800aa4c:	fb0a 110b 	mla	r1, sl, fp, r1
 800aa50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aa54:	f8d9 2000 	ldr.w	r2, [r9]
 800aa58:	4461      	add	r1, ip
 800aa5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa5e:	fb0a c20b 	mla	r2, sl, fp, ip
 800aa62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aa66:	b289      	uxth	r1, r1
 800aa68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aa6c:	4577      	cmp	r7, lr
 800aa6e:	f849 1b04 	str.w	r1, [r9], #4
 800aa72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa76:	d8e2      	bhi.n	800aa3e <__multiply+0xb2>
 800aa78:	9a01      	ldr	r2, [sp, #4]
 800aa7a:	f845 c002 	str.w	ip, [r5, r2]
 800aa7e:	9a03      	ldr	r2, [sp, #12]
 800aa80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa84:	3304      	adds	r3, #4
 800aa86:	f1b9 0f00 	cmp.w	r9, #0
 800aa8a:	d020      	beq.n	800aace <__multiply+0x142>
 800aa8c:	6829      	ldr	r1, [r5, #0]
 800aa8e:	f104 0c14 	add.w	ip, r4, #20
 800aa92:	46ae      	mov	lr, r5
 800aa94:	f04f 0a00 	mov.w	sl, #0
 800aa98:	f8bc b000 	ldrh.w	fp, [ip]
 800aa9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aaa0:	fb09 220b 	mla	r2, r9, fp, r2
 800aaa4:	4492      	add	sl, r2
 800aaa6:	b289      	uxth	r1, r1
 800aaa8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aaac:	f84e 1b04 	str.w	r1, [lr], #4
 800aab0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aab4:	f8be 1000 	ldrh.w	r1, [lr]
 800aab8:	0c12      	lsrs	r2, r2, #16
 800aaba:	fb09 1102 	mla	r1, r9, r2, r1
 800aabe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aac2:	4567      	cmp	r7, ip
 800aac4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aac8:	d8e6      	bhi.n	800aa98 <__multiply+0x10c>
 800aaca:	9a01      	ldr	r2, [sp, #4]
 800aacc:	50a9      	str	r1, [r5, r2]
 800aace:	3504      	adds	r5, #4
 800aad0:	e79a      	b.n	800aa08 <__multiply+0x7c>
 800aad2:	3e01      	subs	r6, #1
 800aad4:	e79c      	b.n	800aa10 <__multiply+0x84>
 800aad6:	bf00      	nop
 800aad8:	0800c368 	.word	0x0800c368
 800aadc:	0800c3f4 	.word	0x0800c3f4

0800aae0 <__pow5mult>:
 800aae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aae4:	4615      	mov	r5, r2
 800aae6:	f012 0203 	ands.w	r2, r2, #3
 800aaea:	4606      	mov	r6, r0
 800aaec:	460f      	mov	r7, r1
 800aaee:	d007      	beq.n	800ab00 <__pow5mult+0x20>
 800aaf0:	4c25      	ldr	r4, [pc, #148]	; (800ab88 <__pow5mult+0xa8>)
 800aaf2:	3a01      	subs	r2, #1
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aafa:	f7ff fe51 	bl	800a7a0 <__multadd>
 800aafe:	4607      	mov	r7, r0
 800ab00:	10ad      	asrs	r5, r5, #2
 800ab02:	d03d      	beq.n	800ab80 <__pow5mult+0xa0>
 800ab04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab06:	b97c      	cbnz	r4, 800ab28 <__pow5mult+0x48>
 800ab08:	2010      	movs	r0, #16
 800ab0a:	f7ff fdbf 	bl	800a68c <malloc>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	6270      	str	r0, [r6, #36]	; 0x24
 800ab12:	b928      	cbnz	r0, 800ab20 <__pow5mult+0x40>
 800ab14:	4b1d      	ldr	r3, [pc, #116]	; (800ab8c <__pow5mult+0xac>)
 800ab16:	481e      	ldr	r0, [pc, #120]	; (800ab90 <__pow5mult+0xb0>)
 800ab18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab1c:	f000 fd2a 	bl	800b574 <__assert_func>
 800ab20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab24:	6004      	str	r4, [r0, #0]
 800ab26:	60c4      	str	r4, [r0, #12]
 800ab28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab30:	b94c      	cbnz	r4, 800ab46 <__pow5mult+0x66>
 800ab32:	f240 2171 	movw	r1, #625	; 0x271
 800ab36:	4630      	mov	r0, r6
 800ab38:	f7ff ff12 	bl	800a960 <__i2b>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab42:	4604      	mov	r4, r0
 800ab44:	6003      	str	r3, [r0, #0]
 800ab46:	f04f 0900 	mov.w	r9, #0
 800ab4a:	07eb      	lsls	r3, r5, #31
 800ab4c:	d50a      	bpl.n	800ab64 <__pow5mult+0x84>
 800ab4e:	4639      	mov	r1, r7
 800ab50:	4622      	mov	r2, r4
 800ab52:	4630      	mov	r0, r6
 800ab54:	f7ff ff1a 	bl	800a98c <__multiply>
 800ab58:	4639      	mov	r1, r7
 800ab5a:	4680      	mov	r8, r0
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f7ff fdfd 	bl	800a75c <_Bfree>
 800ab62:	4647      	mov	r7, r8
 800ab64:	106d      	asrs	r5, r5, #1
 800ab66:	d00b      	beq.n	800ab80 <__pow5mult+0xa0>
 800ab68:	6820      	ldr	r0, [r4, #0]
 800ab6a:	b938      	cbnz	r0, 800ab7c <__pow5mult+0x9c>
 800ab6c:	4622      	mov	r2, r4
 800ab6e:	4621      	mov	r1, r4
 800ab70:	4630      	mov	r0, r6
 800ab72:	f7ff ff0b 	bl	800a98c <__multiply>
 800ab76:	6020      	str	r0, [r4, #0]
 800ab78:	f8c0 9000 	str.w	r9, [r0]
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	e7e4      	b.n	800ab4a <__pow5mult+0x6a>
 800ab80:	4638      	mov	r0, r7
 800ab82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab86:	bf00      	nop
 800ab88:	0800c540 	.word	0x0800c540
 800ab8c:	0800c2f6 	.word	0x0800c2f6
 800ab90:	0800c3f4 	.word	0x0800c3f4

0800ab94 <__lshift>:
 800ab94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab98:	460c      	mov	r4, r1
 800ab9a:	6849      	ldr	r1, [r1, #4]
 800ab9c:	6923      	ldr	r3, [r4, #16]
 800ab9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aba2:	68a3      	ldr	r3, [r4, #8]
 800aba4:	4607      	mov	r7, r0
 800aba6:	4691      	mov	r9, r2
 800aba8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abac:	f108 0601 	add.w	r6, r8, #1
 800abb0:	42b3      	cmp	r3, r6
 800abb2:	db0b      	blt.n	800abcc <__lshift+0x38>
 800abb4:	4638      	mov	r0, r7
 800abb6:	f7ff fd91 	bl	800a6dc <_Balloc>
 800abba:	4605      	mov	r5, r0
 800abbc:	b948      	cbnz	r0, 800abd2 <__lshift+0x3e>
 800abbe:	4602      	mov	r2, r0
 800abc0:	4b2a      	ldr	r3, [pc, #168]	; (800ac6c <__lshift+0xd8>)
 800abc2:	482b      	ldr	r0, [pc, #172]	; (800ac70 <__lshift+0xdc>)
 800abc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800abc8:	f000 fcd4 	bl	800b574 <__assert_func>
 800abcc:	3101      	adds	r1, #1
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	e7ee      	b.n	800abb0 <__lshift+0x1c>
 800abd2:	2300      	movs	r3, #0
 800abd4:	f100 0114 	add.w	r1, r0, #20
 800abd8:	f100 0210 	add.w	r2, r0, #16
 800abdc:	4618      	mov	r0, r3
 800abde:	4553      	cmp	r3, sl
 800abe0:	db37      	blt.n	800ac52 <__lshift+0xbe>
 800abe2:	6920      	ldr	r0, [r4, #16]
 800abe4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abe8:	f104 0314 	add.w	r3, r4, #20
 800abec:	f019 091f 	ands.w	r9, r9, #31
 800abf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abf4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800abf8:	d02f      	beq.n	800ac5a <__lshift+0xc6>
 800abfa:	f1c9 0e20 	rsb	lr, r9, #32
 800abfe:	468a      	mov	sl, r1
 800ac00:	f04f 0c00 	mov.w	ip, #0
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	fa02 f209 	lsl.w	r2, r2, r9
 800ac0a:	ea42 020c 	orr.w	r2, r2, ip
 800ac0e:	f84a 2b04 	str.w	r2, [sl], #4
 800ac12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac16:	4298      	cmp	r0, r3
 800ac18:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ac1c:	d8f2      	bhi.n	800ac04 <__lshift+0x70>
 800ac1e:	1b03      	subs	r3, r0, r4
 800ac20:	3b15      	subs	r3, #21
 800ac22:	f023 0303 	bic.w	r3, r3, #3
 800ac26:	3304      	adds	r3, #4
 800ac28:	f104 0215 	add.w	r2, r4, #21
 800ac2c:	4290      	cmp	r0, r2
 800ac2e:	bf38      	it	cc
 800ac30:	2304      	movcc	r3, #4
 800ac32:	f841 c003 	str.w	ip, [r1, r3]
 800ac36:	f1bc 0f00 	cmp.w	ip, #0
 800ac3a:	d001      	beq.n	800ac40 <__lshift+0xac>
 800ac3c:	f108 0602 	add.w	r6, r8, #2
 800ac40:	3e01      	subs	r6, #1
 800ac42:	4638      	mov	r0, r7
 800ac44:	612e      	str	r6, [r5, #16]
 800ac46:	4621      	mov	r1, r4
 800ac48:	f7ff fd88 	bl	800a75c <_Bfree>
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac52:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac56:	3301      	adds	r3, #1
 800ac58:	e7c1      	b.n	800abde <__lshift+0x4a>
 800ac5a:	3904      	subs	r1, #4
 800ac5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac60:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac64:	4298      	cmp	r0, r3
 800ac66:	d8f9      	bhi.n	800ac5c <__lshift+0xc8>
 800ac68:	e7ea      	b.n	800ac40 <__lshift+0xac>
 800ac6a:	bf00      	nop
 800ac6c:	0800c368 	.word	0x0800c368
 800ac70:	0800c3f4 	.word	0x0800c3f4

0800ac74 <__mcmp>:
 800ac74:	b530      	push	{r4, r5, lr}
 800ac76:	6902      	ldr	r2, [r0, #16]
 800ac78:	690c      	ldr	r4, [r1, #16]
 800ac7a:	1b12      	subs	r2, r2, r4
 800ac7c:	d10e      	bne.n	800ac9c <__mcmp+0x28>
 800ac7e:	f100 0314 	add.w	r3, r0, #20
 800ac82:	3114      	adds	r1, #20
 800ac84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac94:	42a5      	cmp	r5, r4
 800ac96:	d003      	beq.n	800aca0 <__mcmp+0x2c>
 800ac98:	d305      	bcc.n	800aca6 <__mcmp+0x32>
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	bd30      	pop	{r4, r5, pc}
 800aca0:	4283      	cmp	r3, r0
 800aca2:	d3f3      	bcc.n	800ac8c <__mcmp+0x18>
 800aca4:	e7fa      	b.n	800ac9c <__mcmp+0x28>
 800aca6:	f04f 32ff 	mov.w	r2, #4294967295
 800acaa:	e7f7      	b.n	800ac9c <__mcmp+0x28>

0800acac <__mdiff>:
 800acac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb0:	460c      	mov	r4, r1
 800acb2:	4606      	mov	r6, r0
 800acb4:	4611      	mov	r1, r2
 800acb6:	4620      	mov	r0, r4
 800acb8:	4690      	mov	r8, r2
 800acba:	f7ff ffdb 	bl	800ac74 <__mcmp>
 800acbe:	1e05      	subs	r5, r0, #0
 800acc0:	d110      	bne.n	800ace4 <__mdiff+0x38>
 800acc2:	4629      	mov	r1, r5
 800acc4:	4630      	mov	r0, r6
 800acc6:	f7ff fd09 	bl	800a6dc <_Balloc>
 800acca:	b930      	cbnz	r0, 800acda <__mdiff+0x2e>
 800accc:	4b3a      	ldr	r3, [pc, #232]	; (800adb8 <__mdiff+0x10c>)
 800acce:	4602      	mov	r2, r0
 800acd0:	f240 2132 	movw	r1, #562	; 0x232
 800acd4:	4839      	ldr	r0, [pc, #228]	; (800adbc <__mdiff+0x110>)
 800acd6:	f000 fc4d 	bl	800b574 <__assert_func>
 800acda:	2301      	movs	r3, #1
 800acdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ace0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace4:	bfa4      	itt	ge
 800ace6:	4643      	movge	r3, r8
 800ace8:	46a0      	movge	r8, r4
 800acea:	4630      	mov	r0, r6
 800acec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800acf0:	bfa6      	itte	ge
 800acf2:	461c      	movge	r4, r3
 800acf4:	2500      	movge	r5, #0
 800acf6:	2501      	movlt	r5, #1
 800acf8:	f7ff fcf0 	bl	800a6dc <_Balloc>
 800acfc:	b920      	cbnz	r0, 800ad08 <__mdiff+0x5c>
 800acfe:	4b2e      	ldr	r3, [pc, #184]	; (800adb8 <__mdiff+0x10c>)
 800ad00:	4602      	mov	r2, r0
 800ad02:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad06:	e7e5      	b.n	800acd4 <__mdiff+0x28>
 800ad08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad0c:	6926      	ldr	r6, [r4, #16]
 800ad0e:	60c5      	str	r5, [r0, #12]
 800ad10:	f104 0914 	add.w	r9, r4, #20
 800ad14:	f108 0514 	add.w	r5, r8, #20
 800ad18:	f100 0e14 	add.w	lr, r0, #20
 800ad1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad24:	f108 0210 	add.w	r2, r8, #16
 800ad28:	46f2      	mov	sl, lr
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad34:	fa1f f883 	uxth.w	r8, r3
 800ad38:	fa11 f18b 	uxtah	r1, r1, fp
 800ad3c:	0c1b      	lsrs	r3, r3, #16
 800ad3e:	eba1 0808 	sub.w	r8, r1, r8
 800ad42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad4a:	fa1f f888 	uxth.w	r8, r8
 800ad4e:	1419      	asrs	r1, r3, #16
 800ad50:	454e      	cmp	r6, r9
 800ad52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad56:	f84a 3b04 	str.w	r3, [sl], #4
 800ad5a:	d8e7      	bhi.n	800ad2c <__mdiff+0x80>
 800ad5c:	1b33      	subs	r3, r6, r4
 800ad5e:	3b15      	subs	r3, #21
 800ad60:	f023 0303 	bic.w	r3, r3, #3
 800ad64:	3304      	adds	r3, #4
 800ad66:	3415      	adds	r4, #21
 800ad68:	42a6      	cmp	r6, r4
 800ad6a:	bf38      	it	cc
 800ad6c:	2304      	movcc	r3, #4
 800ad6e:	441d      	add	r5, r3
 800ad70:	4473      	add	r3, lr
 800ad72:	469e      	mov	lr, r3
 800ad74:	462e      	mov	r6, r5
 800ad76:	4566      	cmp	r6, ip
 800ad78:	d30e      	bcc.n	800ad98 <__mdiff+0xec>
 800ad7a:	f10c 0203 	add.w	r2, ip, #3
 800ad7e:	1b52      	subs	r2, r2, r5
 800ad80:	f022 0203 	bic.w	r2, r2, #3
 800ad84:	3d03      	subs	r5, #3
 800ad86:	45ac      	cmp	ip, r5
 800ad88:	bf38      	it	cc
 800ad8a:	2200      	movcc	r2, #0
 800ad8c:	441a      	add	r2, r3
 800ad8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad92:	b17b      	cbz	r3, 800adb4 <__mdiff+0x108>
 800ad94:	6107      	str	r7, [r0, #16]
 800ad96:	e7a3      	b.n	800ace0 <__mdiff+0x34>
 800ad98:	f856 8b04 	ldr.w	r8, [r6], #4
 800ad9c:	fa11 f288 	uxtah	r2, r1, r8
 800ada0:	1414      	asrs	r4, r2, #16
 800ada2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ada6:	b292      	uxth	r2, r2
 800ada8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800adac:	f84e 2b04 	str.w	r2, [lr], #4
 800adb0:	1421      	asrs	r1, r4, #16
 800adb2:	e7e0      	b.n	800ad76 <__mdiff+0xca>
 800adb4:	3f01      	subs	r7, #1
 800adb6:	e7ea      	b.n	800ad8e <__mdiff+0xe2>
 800adb8:	0800c368 	.word	0x0800c368
 800adbc:	0800c3f4 	.word	0x0800c3f4

0800adc0 <__ulp>:
 800adc0:	b082      	sub	sp, #8
 800adc2:	ed8d 0b00 	vstr	d0, [sp]
 800adc6:	9b01      	ldr	r3, [sp, #4]
 800adc8:	4912      	ldr	r1, [pc, #72]	; (800ae14 <__ulp+0x54>)
 800adca:	4019      	ands	r1, r3
 800adcc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800add0:	2900      	cmp	r1, #0
 800add2:	dd05      	ble.n	800ade0 <__ulp+0x20>
 800add4:	2200      	movs	r2, #0
 800add6:	460b      	mov	r3, r1
 800add8:	ec43 2b10 	vmov	d0, r2, r3
 800addc:	b002      	add	sp, #8
 800adde:	4770      	bx	lr
 800ade0:	4249      	negs	r1, r1
 800ade2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ade6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800adea:	f04f 0200 	mov.w	r2, #0
 800adee:	f04f 0300 	mov.w	r3, #0
 800adf2:	da04      	bge.n	800adfe <__ulp+0x3e>
 800adf4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800adf8:	fa41 f300 	asr.w	r3, r1, r0
 800adfc:	e7ec      	b.n	800add8 <__ulp+0x18>
 800adfe:	f1a0 0114 	sub.w	r1, r0, #20
 800ae02:	291e      	cmp	r1, #30
 800ae04:	bfda      	itte	le
 800ae06:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ae0a:	fa20 f101 	lsrle.w	r1, r0, r1
 800ae0e:	2101      	movgt	r1, #1
 800ae10:	460a      	mov	r2, r1
 800ae12:	e7e1      	b.n	800add8 <__ulp+0x18>
 800ae14:	7ff00000 	.word	0x7ff00000

0800ae18 <__b2d>:
 800ae18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1a:	6905      	ldr	r5, [r0, #16]
 800ae1c:	f100 0714 	add.w	r7, r0, #20
 800ae20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ae24:	1f2e      	subs	r6, r5, #4
 800ae26:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f7ff fd48 	bl	800a8c0 <__hi0bits>
 800ae30:	f1c0 0320 	rsb	r3, r0, #32
 800ae34:	280a      	cmp	r0, #10
 800ae36:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aeb4 <__b2d+0x9c>
 800ae3a:	600b      	str	r3, [r1, #0]
 800ae3c:	dc14      	bgt.n	800ae68 <__b2d+0x50>
 800ae3e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ae42:	fa24 f10e 	lsr.w	r1, r4, lr
 800ae46:	42b7      	cmp	r7, r6
 800ae48:	ea41 030c 	orr.w	r3, r1, ip
 800ae4c:	bf34      	ite	cc
 800ae4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ae52:	2100      	movcs	r1, #0
 800ae54:	3015      	adds	r0, #21
 800ae56:	fa04 f000 	lsl.w	r0, r4, r0
 800ae5a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ae5e:	ea40 0201 	orr.w	r2, r0, r1
 800ae62:	ec43 2b10 	vmov	d0, r2, r3
 800ae66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae68:	42b7      	cmp	r7, r6
 800ae6a:	bf3a      	itte	cc
 800ae6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ae70:	f1a5 0608 	subcc.w	r6, r5, #8
 800ae74:	2100      	movcs	r1, #0
 800ae76:	380b      	subs	r0, #11
 800ae78:	d017      	beq.n	800aeaa <__b2d+0x92>
 800ae7a:	f1c0 0c20 	rsb	ip, r0, #32
 800ae7e:	fa04 f500 	lsl.w	r5, r4, r0
 800ae82:	42be      	cmp	r6, r7
 800ae84:	fa21 f40c 	lsr.w	r4, r1, ip
 800ae88:	ea45 0504 	orr.w	r5, r5, r4
 800ae8c:	bf8c      	ite	hi
 800ae8e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ae92:	2400      	movls	r4, #0
 800ae94:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ae98:	fa01 f000 	lsl.w	r0, r1, r0
 800ae9c:	fa24 f40c 	lsr.w	r4, r4, ip
 800aea0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aea4:	ea40 0204 	orr.w	r2, r0, r4
 800aea8:	e7db      	b.n	800ae62 <__b2d+0x4a>
 800aeaa:	ea44 030c 	orr.w	r3, r4, ip
 800aeae:	460a      	mov	r2, r1
 800aeb0:	e7d7      	b.n	800ae62 <__b2d+0x4a>
 800aeb2:	bf00      	nop
 800aeb4:	3ff00000 	.word	0x3ff00000

0800aeb8 <__d2b>:
 800aeb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aebc:	4689      	mov	r9, r1
 800aebe:	2101      	movs	r1, #1
 800aec0:	ec57 6b10 	vmov	r6, r7, d0
 800aec4:	4690      	mov	r8, r2
 800aec6:	f7ff fc09 	bl	800a6dc <_Balloc>
 800aeca:	4604      	mov	r4, r0
 800aecc:	b930      	cbnz	r0, 800aedc <__d2b+0x24>
 800aece:	4602      	mov	r2, r0
 800aed0:	4b25      	ldr	r3, [pc, #148]	; (800af68 <__d2b+0xb0>)
 800aed2:	4826      	ldr	r0, [pc, #152]	; (800af6c <__d2b+0xb4>)
 800aed4:	f240 310a 	movw	r1, #778	; 0x30a
 800aed8:	f000 fb4c 	bl	800b574 <__assert_func>
 800aedc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aee4:	bb35      	cbnz	r5, 800af34 <__d2b+0x7c>
 800aee6:	2e00      	cmp	r6, #0
 800aee8:	9301      	str	r3, [sp, #4]
 800aeea:	d028      	beq.n	800af3e <__d2b+0x86>
 800aeec:	4668      	mov	r0, sp
 800aeee:	9600      	str	r6, [sp, #0]
 800aef0:	f7ff fd06 	bl	800a900 <__lo0bits>
 800aef4:	9900      	ldr	r1, [sp, #0]
 800aef6:	b300      	cbz	r0, 800af3a <__d2b+0x82>
 800aef8:	9a01      	ldr	r2, [sp, #4]
 800aefa:	f1c0 0320 	rsb	r3, r0, #32
 800aefe:	fa02 f303 	lsl.w	r3, r2, r3
 800af02:	430b      	orrs	r3, r1
 800af04:	40c2      	lsrs	r2, r0
 800af06:	6163      	str	r3, [r4, #20]
 800af08:	9201      	str	r2, [sp, #4]
 800af0a:	9b01      	ldr	r3, [sp, #4]
 800af0c:	61a3      	str	r3, [r4, #24]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bf14      	ite	ne
 800af12:	2202      	movne	r2, #2
 800af14:	2201      	moveq	r2, #1
 800af16:	6122      	str	r2, [r4, #16]
 800af18:	b1d5      	cbz	r5, 800af50 <__d2b+0x98>
 800af1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af1e:	4405      	add	r5, r0
 800af20:	f8c9 5000 	str.w	r5, [r9]
 800af24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af28:	f8c8 0000 	str.w	r0, [r8]
 800af2c:	4620      	mov	r0, r4
 800af2e:	b003      	add	sp, #12
 800af30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af38:	e7d5      	b.n	800aee6 <__d2b+0x2e>
 800af3a:	6161      	str	r1, [r4, #20]
 800af3c:	e7e5      	b.n	800af0a <__d2b+0x52>
 800af3e:	a801      	add	r0, sp, #4
 800af40:	f7ff fcde 	bl	800a900 <__lo0bits>
 800af44:	9b01      	ldr	r3, [sp, #4]
 800af46:	6163      	str	r3, [r4, #20]
 800af48:	2201      	movs	r2, #1
 800af4a:	6122      	str	r2, [r4, #16]
 800af4c:	3020      	adds	r0, #32
 800af4e:	e7e3      	b.n	800af18 <__d2b+0x60>
 800af50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af58:	f8c9 0000 	str.w	r0, [r9]
 800af5c:	6918      	ldr	r0, [r3, #16]
 800af5e:	f7ff fcaf 	bl	800a8c0 <__hi0bits>
 800af62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af66:	e7df      	b.n	800af28 <__d2b+0x70>
 800af68:	0800c368 	.word	0x0800c368
 800af6c:	0800c3f4 	.word	0x0800c3f4

0800af70 <__ratio>:
 800af70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af74:	4688      	mov	r8, r1
 800af76:	4669      	mov	r1, sp
 800af78:	4681      	mov	r9, r0
 800af7a:	f7ff ff4d 	bl	800ae18 <__b2d>
 800af7e:	a901      	add	r1, sp, #4
 800af80:	4640      	mov	r0, r8
 800af82:	ec55 4b10 	vmov	r4, r5, d0
 800af86:	ee10 aa10 	vmov	sl, s0
 800af8a:	f7ff ff45 	bl	800ae18 <__b2d>
 800af8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af92:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800af96:	1a59      	subs	r1, r3, r1
 800af98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800afa2:	ec57 6b10 	vmov	r6, r7, d0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	bfd6      	itet	le
 800afaa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800afae:	462a      	movgt	r2, r5
 800afb0:	463a      	movle	r2, r7
 800afb2:	46ab      	mov	fp, r5
 800afb4:	bfd6      	itet	le
 800afb6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800afba:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800afbe:	ee00 3a90 	vmovle	s1, r3
 800afc2:	ec4b ab17 	vmov	d7, sl, fp
 800afc6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800afca:	b003      	add	sp, #12
 800afcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800afd0 <__copybits>:
 800afd0:	3901      	subs	r1, #1
 800afd2:	b570      	push	{r4, r5, r6, lr}
 800afd4:	1149      	asrs	r1, r1, #5
 800afd6:	6914      	ldr	r4, [r2, #16]
 800afd8:	3101      	adds	r1, #1
 800afda:	f102 0314 	add.w	r3, r2, #20
 800afde:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800afe2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800afe6:	1f05      	subs	r5, r0, #4
 800afe8:	42a3      	cmp	r3, r4
 800afea:	d30c      	bcc.n	800b006 <__copybits+0x36>
 800afec:	1aa3      	subs	r3, r4, r2
 800afee:	3b11      	subs	r3, #17
 800aff0:	f023 0303 	bic.w	r3, r3, #3
 800aff4:	3211      	adds	r2, #17
 800aff6:	42a2      	cmp	r2, r4
 800aff8:	bf88      	it	hi
 800affa:	2300      	movhi	r3, #0
 800affc:	4418      	add	r0, r3
 800affe:	2300      	movs	r3, #0
 800b000:	4288      	cmp	r0, r1
 800b002:	d305      	bcc.n	800b010 <__copybits+0x40>
 800b004:	bd70      	pop	{r4, r5, r6, pc}
 800b006:	f853 6b04 	ldr.w	r6, [r3], #4
 800b00a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b00e:	e7eb      	b.n	800afe8 <__copybits+0x18>
 800b010:	f840 3b04 	str.w	r3, [r0], #4
 800b014:	e7f4      	b.n	800b000 <__copybits+0x30>

0800b016 <__any_on>:
 800b016:	f100 0214 	add.w	r2, r0, #20
 800b01a:	6900      	ldr	r0, [r0, #16]
 800b01c:	114b      	asrs	r3, r1, #5
 800b01e:	4298      	cmp	r0, r3
 800b020:	b510      	push	{r4, lr}
 800b022:	db11      	blt.n	800b048 <__any_on+0x32>
 800b024:	dd0a      	ble.n	800b03c <__any_on+0x26>
 800b026:	f011 011f 	ands.w	r1, r1, #31
 800b02a:	d007      	beq.n	800b03c <__any_on+0x26>
 800b02c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b030:	fa24 f001 	lsr.w	r0, r4, r1
 800b034:	fa00 f101 	lsl.w	r1, r0, r1
 800b038:	428c      	cmp	r4, r1
 800b03a:	d10b      	bne.n	800b054 <__any_on+0x3e>
 800b03c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b040:	4293      	cmp	r3, r2
 800b042:	d803      	bhi.n	800b04c <__any_on+0x36>
 800b044:	2000      	movs	r0, #0
 800b046:	bd10      	pop	{r4, pc}
 800b048:	4603      	mov	r3, r0
 800b04a:	e7f7      	b.n	800b03c <__any_on+0x26>
 800b04c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b050:	2900      	cmp	r1, #0
 800b052:	d0f5      	beq.n	800b040 <__any_on+0x2a>
 800b054:	2001      	movs	r0, #1
 800b056:	e7f6      	b.n	800b046 <__any_on+0x30>

0800b058 <_calloc_r>:
 800b058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b05a:	fba1 2402 	umull	r2, r4, r1, r2
 800b05e:	b94c      	cbnz	r4, 800b074 <_calloc_r+0x1c>
 800b060:	4611      	mov	r1, r2
 800b062:	9201      	str	r2, [sp, #4]
 800b064:	f000 f87a 	bl	800b15c <_malloc_r>
 800b068:	9a01      	ldr	r2, [sp, #4]
 800b06a:	4605      	mov	r5, r0
 800b06c:	b930      	cbnz	r0, 800b07c <_calloc_r+0x24>
 800b06e:	4628      	mov	r0, r5
 800b070:	b003      	add	sp, #12
 800b072:	bd30      	pop	{r4, r5, pc}
 800b074:	220c      	movs	r2, #12
 800b076:	6002      	str	r2, [r0, #0]
 800b078:	2500      	movs	r5, #0
 800b07a:	e7f8      	b.n	800b06e <_calloc_r+0x16>
 800b07c:	4621      	mov	r1, r4
 800b07e:	f7fc fcc7 	bl	8007a10 <memset>
 800b082:	e7f4      	b.n	800b06e <_calloc_r+0x16>

0800b084 <_free_r>:
 800b084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b086:	2900      	cmp	r1, #0
 800b088:	d044      	beq.n	800b114 <_free_r+0x90>
 800b08a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b08e:	9001      	str	r0, [sp, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	f1a1 0404 	sub.w	r4, r1, #4
 800b096:	bfb8      	it	lt
 800b098:	18e4      	addlt	r4, r4, r3
 800b09a:	f000 fab5 	bl	800b608 <__malloc_lock>
 800b09e:	4a1e      	ldr	r2, [pc, #120]	; (800b118 <_free_r+0x94>)
 800b0a0:	9801      	ldr	r0, [sp, #4]
 800b0a2:	6813      	ldr	r3, [r2, #0]
 800b0a4:	b933      	cbnz	r3, 800b0b4 <_free_r+0x30>
 800b0a6:	6063      	str	r3, [r4, #4]
 800b0a8:	6014      	str	r4, [r2, #0]
 800b0aa:	b003      	add	sp, #12
 800b0ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0b0:	f000 bab0 	b.w	800b614 <__malloc_unlock>
 800b0b4:	42a3      	cmp	r3, r4
 800b0b6:	d908      	bls.n	800b0ca <_free_r+0x46>
 800b0b8:	6825      	ldr	r5, [r4, #0]
 800b0ba:	1961      	adds	r1, r4, r5
 800b0bc:	428b      	cmp	r3, r1
 800b0be:	bf01      	itttt	eq
 800b0c0:	6819      	ldreq	r1, [r3, #0]
 800b0c2:	685b      	ldreq	r3, [r3, #4]
 800b0c4:	1949      	addeq	r1, r1, r5
 800b0c6:	6021      	streq	r1, [r4, #0]
 800b0c8:	e7ed      	b.n	800b0a6 <_free_r+0x22>
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	b10b      	cbz	r3, 800b0d4 <_free_r+0x50>
 800b0d0:	42a3      	cmp	r3, r4
 800b0d2:	d9fa      	bls.n	800b0ca <_free_r+0x46>
 800b0d4:	6811      	ldr	r1, [r2, #0]
 800b0d6:	1855      	adds	r5, r2, r1
 800b0d8:	42a5      	cmp	r5, r4
 800b0da:	d10b      	bne.n	800b0f4 <_free_r+0x70>
 800b0dc:	6824      	ldr	r4, [r4, #0]
 800b0de:	4421      	add	r1, r4
 800b0e0:	1854      	adds	r4, r2, r1
 800b0e2:	42a3      	cmp	r3, r4
 800b0e4:	6011      	str	r1, [r2, #0]
 800b0e6:	d1e0      	bne.n	800b0aa <_free_r+0x26>
 800b0e8:	681c      	ldr	r4, [r3, #0]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	6053      	str	r3, [r2, #4]
 800b0ee:	4421      	add	r1, r4
 800b0f0:	6011      	str	r1, [r2, #0]
 800b0f2:	e7da      	b.n	800b0aa <_free_r+0x26>
 800b0f4:	d902      	bls.n	800b0fc <_free_r+0x78>
 800b0f6:	230c      	movs	r3, #12
 800b0f8:	6003      	str	r3, [r0, #0]
 800b0fa:	e7d6      	b.n	800b0aa <_free_r+0x26>
 800b0fc:	6825      	ldr	r5, [r4, #0]
 800b0fe:	1961      	adds	r1, r4, r5
 800b100:	428b      	cmp	r3, r1
 800b102:	bf04      	itt	eq
 800b104:	6819      	ldreq	r1, [r3, #0]
 800b106:	685b      	ldreq	r3, [r3, #4]
 800b108:	6063      	str	r3, [r4, #4]
 800b10a:	bf04      	itt	eq
 800b10c:	1949      	addeq	r1, r1, r5
 800b10e:	6021      	streq	r1, [r4, #0]
 800b110:	6054      	str	r4, [r2, #4]
 800b112:	e7ca      	b.n	800b0aa <_free_r+0x26>
 800b114:	b003      	add	sp, #12
 800b116:	bd30      	pop	{r4, r5, pc}
 800b118:	24000334 	.word	0x24000334

0800b11c <sbrk_aligned>:
 800b11c:	b570      	push	{r4, r5, r6, lr}
 800b11e:	4e0e      	ldr	r6, [pc, #56]	; (800b158 <sbrk_aligned+0x3c>)
 800b120:	460c      	mov	r4, r1
 800b122:	6831      	ldr	r1, [r6, #0]
 800b124:	4605      	mov	r5, r0
 800b126:	b911      	cbnz	r1, 800b12e <sbrk_aligned+0x12>
 800b128:	f000 f9f2 	bl	800b510 <_sbrk_r>
 800b12c:	6030      	str	r0, [r6, #0]
 800b12e:	4621      	mov	r1, r4
 800b130:	4628      	mov	r0, r5
 800b132:	f000 f9ed 	bl	800b510 <_sbrk_r>
 800b136:	1c43      	adds	r3, r0, #1
 800b138:	d00a      	beq.n	800b150 <sbrk_aligned+0x34>
 800b13a:	1cc4      	adds	r4, r0, #3
 800b13c:	f024 0403 	bic.w	r4, r4, #3
 800b140:	42a0      	cmp	r0, r4
 800b142:	d007      	beq.n	800b154 <sbrk_aligned+0x38>
 800b144:	1a21      	subs	r1, r4, r0
 800b146:	4628      	mov	r0, r5
 800b148:	f000 f9e2 	bl	800b510 <_sbrk_r>
 800b14c:	3001      	adds	r0, #1
 800b14e:	d101      	bne.n	800b154 <sbrk_aligned+0x38>
 800b150:	f04f 34ff 	mov.w	r4, #4294967295
 800b154:	4620      	mov	r0, r4
 800b156:	bd70      	pop	{r4, r5, r6, pc}
 800b158:	24000338 	.word	0x24000338

0800b15c <_malloc_r>:
 800b15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b160:	1ccd      	adds	r5, r1, #3
 800b162:	f025 0503 	bic.w	r5, r5, #3
 800b166:	3508      	adds	r5, #8
 800b168:	2d0c      	cmp	r5, #12
 800b16a:	bf38      	it	cc
 800b16c:	250c      	movcc	r5, #12
 800b16e:	2d00      	cmp	r5, #0
 800b170:	4607      	mov	r7, r0
 800b172:	db01      	blt.n	800b178 <_malloc_r+0x1c>
 800b174:	42a9      	cmp	r1, r5
 800b176:	d905      	bls.n	800b184 <_malloc_r+0x28>
 800b178:	230c      	movs	r3, #12
 800b17a:	603b      	str	r3, [r7, #0]
 800b17c:	2600      	movs	r6, #0
 800b17e:	4630      	mov	r0, r6
 800b180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b184:	4e2e      	ldr	r6, [pc, #184]	; (800b240 <_malloc_r+0xe4>)
 800b186:	f000 fa3f 	bl	800b608 <__malloc_lock>
 800b18a:	6833      	ldr	r3, [r6, #0]
 800b18c:	461c      	mov	r4, r3
 800b18e:	bb34      	cbnz	r4, 800b1de <_malloc_r+0x82>
 800b190:	4629      	mov	r1, r5
 800b192:	4638      	mov	r0, r7
 800b194:	f7ff ffc2 	bl	800b11c <sbrk_aligned>
 800b198:	1c43      	adds	r3, r0, #1
 800b19a:	4604      	mov	r4, r0
 800b19c:	d14d      	bne.n	800b23a <_malloc_r+0xde>
 800b19e:	6834      	ldr	r4, [r6, #0]
 800b1a0:	4626      	mov	r6, r4
 800b1a2:	2e00      	cmp	r6, #0
 800b1a4:	d140      	bne.n	800b228 <_malloc_r+0xcc>
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	4631      	mov	r1, r6
 800b1aa:	4638      	mov	r0, r7
 800b1ac:	eb04 0803 	add.w	r8, r4, r3
 800b1b0:	f000 f9ae 	bl	800b510 <_sbrk_r>
 800b1b4:	4580      	cmp	r8, r0
 800b1b6:	d13a      	bne.n	800b22e <_malloc_r+0xd2>
 800b1b8:	6821      	ldr	r1, [r4, #0]
 800b1ba:	3503      	adds	r5, #3
 800b1bc:	1a6d      	subs	r5, r5, r1
 800b1be:	f025 0503 	bic.w	r5, r5, #3
 800b1c2:	3508      	adds	r5, #8
 800b1c4:	2d0c      	cmp	r5, #12
 800b1c6:	bf38      	it	cc
 800b1c8:	250c      	movcc	r5, #12
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	4638      	mov	r0, r7
 800b1ce:	f7ff ffa5 	bl	800b11c <sbrk_aligned>
 800b1d2:	3001      	adds	r0, #1
 800b1d4:	d02b      	beq.n	800b22e <_malloc_r+0xd2>
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	442b      	add	r3, r5
 800b1da:	6023      	str	r3, [r4, #0]
 800b1dc:	e00e      	b.n	800b1fc <_malloc_r+0xa0>
 800b1de:	6822      	ldr	r2, [r4, #0]
 800b1e0:	1b52      	subs	r2, r2, r5
 800b1e2:	d41e      	bmi.n	800b222 <_malloc_r+0xc6>
 800b1e4:	2a0b      	cmp	r2, #11
 800b1e6:	d916      	bls.n	800b216 <_malloc_r+0xba>
 800b1e8:	1961      	adds	r1, r4, r5
 800b1ea:	42a3      	cmp	r3, r4
 800b1ec:	6025      	str	r5, [r4, #0]
 800b1ee:	bf18      	it	ne
 800b1f0:	6059      	strne	r1, [r3, #4]
 800b1f2:	6863      	ldr	r3, [r4, #4]
 800b1f4:	bf08      	it	eq
 800b1f6:	6031      	streq	r1, [r6, #0]
 800b1f8:	5162      	str	r2, [r4, r5]
 800b1fa:	604b      	str	r3, [r1, #4]
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	f104 060b 	add.w	r6, r4, #11
 800b202:	f000 fa07 	bl	800b614 <__malloc_unlock>
 800b206:	f026 0607 	bic.w	r6, r6, #7
 800b20a:	1d23      	adds	r3, r4, #4
 800b20c:	1af2      	subs	r2, r6, r3
 800b20e:	d0b6      	beq.n	800b17e <_malloc_r+0x22>
 800b210:	1b9b      	subs	r3, r3, r6
 800b212:	50a3      	str	r3, [r4, r2]
 800b214:	e7b3      	b.n	800b17e <_malloc_r+0x22>
 800b216:	6862      	ldr	r2, [r4, #4]
 800b218:	42a3      	cmp	r3, r4
 800b21a:	bf0c      	ite	eq
 800b21c:	6032      	streq	r2, [r6, #0]
 800b21e:	605a      	strne	r2, [r3, #4]
 800b220:	e7ec      	b.n	800b1fc <_malloc_r+0xa0>
 800b222:	4623      	mov	r3, r4
 800b224:	6864      	ldr	r4, [r4, #4]
 800b226:	e7b2      	b.n	800b18e <_malloc_r+0x32>
 800b228:	4634      	mov	r4, r6
 800b22a:	6876      	ldr	r6, [r6, #4]
 800b22c:	e7b9      	b.n	800b1a2 <_malloc_r+0x46>
 800b22e:	230c      	movs	r3, #12
 800b230:	603b      	str	r3, [r7, #0]
 800b232:	4638      	mov	r0, r7
 800b234:	f000 f9ee 	bl	800b614 <__malloc_unlock>
 800b238:	e7a1      	b.n	800b17e <_malloc_r+0x22>
 800b23a:	6025      	str	r5, [r4, #0]
 800b23c:	e7de      	b.n	800b1fc <_malloc_r+0xa0>
 800b23e:	bf00      	nop
 800b240:	24000334 	.word	0x24000334

0800b244 <__ssputs_r>:
 800b244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b248:	688e      	ldr	r6, [r1, #8]
 800b24a:	429e      	cmp	r6, r3
 800b24c:	4682      	mov	sl, r0
 800b24e:	460c      	mov	r4, r1
 800b250:	4690      	mov	r8, r2
 800b252:	461f      	mov	r7, r3
 800b254:	d838      	bhi.n	800b2c8 <__ssputs_r+0x84>
 800b256:	898a      	ldrh	r2, [r1, #12]
 800b258:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b25c:	d032      	beq.n	800b2c4 <__ssputs_r+0x80>
 800b25e:	6825      	ldr	r5, [r4, #0]
 800b260:	6909      	ldr	r1, [r1, #16]
 800b262:	eba5 0901 	sub.w	r9, r5, r1
 800b266:	6965      	ldr	r5, [r4, #20]
 800b268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b26c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b270:	3301      	adds	r3, #1
 800b272:	444b      	add	r3, r9
 800b274:	106d      	asrs	r5, r5, #1
 800b276:	429d      	cmp	r5, r3
 800b278:	bf38      	it	cc
 800b27a:	461d      	movcc	r5, r3
 800b27c:	0553      	lsls	r3, r2, #21
 800b27e:	d531      	bpl.n	800b2e4 <__ssputs_r+0xa0>
 800b280:	4629      	mov	r1, r5
 800b282:	f7ff ff6b 	bl	800b15c <_malloc_r>
 800b286:	4606      	mov	r6, r0
 800b288:	b950      	cbnz	r0, 800b2a0 <__ssputs_r+0x5c>
 800b28a:	230c      	movs	r3, #12
 800b28c:	f8ca 3000 	str.w	r3, [sl]
 800b290:	89a3      	ldrh	r3, [r4, #12]
 800b292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b296:	81a3      	strh	r3, [r4, #12]
 800b298:	f04f 30ff 	mov.w	r0, #4294967295
 800b29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2a0:	6921      	ldr	r1, [r4, #16]
 800b2a2:	464a      	mov	r2, r9
 800b2a4:	f7ff fa0c 	bl	800a6c0 <memcpy>
 800b2a8:	89a3      	ldrh	r3, [r4, #12]
 800b2aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2b2:	81a3      	strh	r3, [r4, #12]
 800b2b4:	6126      	str	r6, [r4, #16]
 800b2b6:	6165      	str	r5, [r4, #20]
 800b2b8:	444e      	add	r6, r9
 800b2ba:	eba5 0509 	sub.w	r5, r5, r9
 800b2be:	6026      	str	r6, [r4, #0]
 800b2c0:	60a5      	str	r5, [r4, #8]
 800b2c2:	463e      	mov	r6, r7
 800b2c4:	42be      	cmp	r6, r7
 800b2c6:	d900      	bls.n	800b2ca <__ssputs_r+0x86>
 800b2c8:	463e      	mov	r6, r7
 800b2ca:	6820      	ldr	r0, [r4, #0]
 800b2cc:	4632      	mov	r2, r6
 800b2ce:	4641      	mov	r1, r8
 800b2d0:	f000 f980 	bl	800b5d4 <memmove>
 800b2d4:	68a3      	ldr	r3, [r4, #8]
 800b2d6:	1b9b      	subs	r3, r3, r6
 800b2d8:	60a3      	str	r3, [r4, #8]
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	4433      	add	r3, r6
 800b2de:	6023      	str	r3, [r4, #0]
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	e7db      	b.n	800b29c <__ssputs_r+0x58>
 800b2e4:	462a      	mov	r2, r5
 800b2e6:	f000 f99b 	bl	800b620 <_realloc_r>
 800b2ea:	4606      	mov	r6, r0
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d1e1      	bne.n	800b2b4 <__ssputs_r+0x70>
 800b2f0:	6921      	ldr	r1, [r4, #16]
 800b2f2:	4650      	mov	r0, sl
 800b2f4:	f7ff fec6 	bl	800b084 <_free_r>
 800b2f8:	e7c7      	b.n	800b28a <__ssputs_r+0x46>
	...

0800b2fc <_svfiprintf_r>:
 800b2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b300:	4698      	mov	r8, r3
 800b302:	898b      	ldrh	r3, [r1, #12]
 800b304:	061b      	lsls	r3, r3, #24
 800b306:	b09d      	sub	sp, #116	; 0x74
 800b308:	4607      	mov	r7, r0
 800b30a:	460d      	mov	r5, r1
 800b30c:	4614      	mov	r4, r2
 800b30e:	d50e      	bpl.n	800b32e <_svfiprintf_r+0x32>
 800b310:	690b      	ldr	r3, [r1, #16]
 800b312:	b963      	cbnz	r3, 800b32e <_svfiprintf_r+0x32>
 800b314:	2140      	movs	r1, #64	; 0x40
 800b316:	f7ff ff21 	bl	800b15c <_malloc_r>
 800b31a:	6028      	str	r0, [r5, #0]
 800b31c:	6128      	str	r0, [r5, #16]
 800b31e:	b920      	cbnz	r0, 800b32a <_svfiprintf_r+0x2e>
 800b320:	230c      	movs	r3, #12
 800b322:	603b      	str	r3, [r7, #0]
 800b324:	f04f 30ff 	mov.w	r0, #4294967295
 800b328:	e0d1      	b.n	800b4ce <_svfiprintf_r+0x1d2>
 800b32a:	2340      	movs	r3, #64	; 0x40
 800b32c:	616b      	str	r3, [r5, #20]
 800b32e:	2300      	movs	r3, #0
 800b330:	9309      	str	r3, [sp, #36]	; 0x24
 800b332:	2320      	movs	r3, #32
 800b334:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b338:	f8cd 800c 	str.w	r8, [sp, #12]
 800b33c:	2330      	movs	r3, #48	; 0x30
 800b33e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b4e8 <_svfiprintf_r+0x1ec>
 800b342:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b346:	f04f 0901 	mov.w	r9, #1
 800b34a:	4623      	mov	r3, r4
 800b34c:	469a      	mov	sl, r3
 800b34e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b352:	b10a      	cbz	r2, 800b358 <_svfiprintf_r+0x5c>
 800b354:	2a25      	cmp	r2, #37	; 0x25
 800b356:	d1f9      	bne.n	800b34c <_svfiprintf_r+0x50>
 800b358:	ebba 0b04 	subs.w	fp, sl, r4
 800b35c:	d00b      	beq.n	800b376 <_svfiprintf_r+0x7a>
 800b35e:	465b      	mov	r3, fp
 800b360:	4622      	mov	r2, r4
 800b362:	4629      	mov	r1, r5
 800b364:	4638      	mov	r0, r7
 800b366:	f7ff ff6d 	bl	800b244 <__ssputs_r>
 800b36a:	3001      	adds	r0, #1
 800b36c:	f000 80aa 	beq.w	800b4c4 <_svfiprintf_r+0x1c8>
 800b370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b372:	445a      	add	r2, fp
 800b374:	9209      	str	r2, [sp, #36]	; 0x24
 800b376:	f89a 3000 	ldrb.w	r3, [sl]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f000 80a2 	beq.w	800b4c4 <_svfiprintf_r+0x1c8>
 800b380:	2300      	movs	r3, #0
 800b382:	f04f 32ff 	mov.w	r2, #4294967295
 800b386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b38a:	f10a 0a01 	add.w	sl, sl, #1
 800b38e:	9304      	str	r3, [sp, #16]
 800b390:	9307      	str	r3, [sp, #28]
 800b392:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b396:	931a      	str	r3, [sp, #104]	; 0x68
 800b398:	4654      	mov	r4, sl
 800b39a:	2205      	movs	r2, #5
 800b39c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3a0:	4851      	ldr	r0, [pc, #324]	; (800b4e8 <_svfiprintf_r+0x1ec>)
 800b3a2:	f7f4 ffa5 	bl	80002f0 <memchr>
 800b3a6:	9a04      	ldr	r2, [sp, #16]
 800b3a8:	b9d8      	cbnz	r0, 800b3e2 <_svfiprintf_r+0xe6>
 800b3aa:	06d0      	lsls	r0, r2, #27
 800b3ac:	bf44      	itt	mi
 800b3ae:	2320      	movmi	r3, #32
 800b3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3b4:	0711      	lsls	r1, r2, #28
 800b3b6:	bf44      	itt	mi
 800b3b8:	232b      	movmi	r3, #43	; 0x2b
 800b3ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3be:	f89a 3000 	ldrb.w	r3, [sl]
 800b3c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b3c4:	d015      	beq.n	800b3f2 <_svfiprintf_r+0xf6>
 800b3c6:	9a07      	ldr	r2, [sp, #28]
 800b3c8:	4654      	mov	r4, sl
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	f04f 0c0a 	mov.w	ip, #10
 800b3d0:	4621      	mov	r1, r4
 800b3d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3d6:	3b30      	subs	r3, #48	; 0x30
 800b3d8:	2b09      	cmp	r3, #9
 800b3da:	d94e      	bls.n	800b47a <_svfiprintf_r+0x17e>
 800b3dc:	b1b0      	cbz	r0, 800b40c <_svfiprintf_r+0x110>
 800b3de:	9207      	str	r2, [sp, #28]
 800b3e0:	e014      	b.n	800b40c <_svfiprintf_r+0x110>
 800b3e2:	eba0 0308 	sub.w	r3, r0, r8
 800b3e6:	fa09 f303 	lsl.w	r3, r9, r3
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	9304      	str	r3, [sp, #16]
 800b3ee:	46a2      	mov	sl, r4
 800b3f0:	e7d2      	b.n	800b398 <_svfiprintf_r+0x9c>
 800b3f2:	9b03      	ldr	r3, [sp, #12]
 800b3f4:	1d19      	adds	r1, r3, #4
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	9103      	str	r1, [sp, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	bfbb      	ittet	lt
 800b3fe:	425b      	neglt	r3, r3
 800b400:	f042 0202 	orrlt.w	r2, r2, #2
 800b404:	9307      	strge	r3, [sp, #28]
 800b406:	9307      	strlt	r3, [sp, #28]
 800b408:	bfb8      	it	lt
 800b40a:	9204      	strlt	r2, [sp, #16]
 800b40c:	7823      	ldrb	r3, [r4, #0]
 800b40e:	2b2e      	cmp	r3, #46	; 0x2e
 800b410:	d10c      	bne.n	800b42c <_svfiprintf_r+0x130>
 800b412:	7863      	ldrb	r3, [r4, #1]
 800b414:	2b2a      	cmp	r3, #42	; 0x2a
 800b416:	d135      	bne.n	800b484 <_svfiprintf_r+0x188>
 800b418:	9b03      	ldr	r3, [sp, #12]
 800b41a:	1d1a      	adds	r2, r3, #4
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	9203      	str	r2, [sp, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	bfb8      	it	lt
 800b424:	f04f 33ff 	movlt.w	r3, #4294967295
 800b428:	3402      	adds	r4, #2
 800b42a:	9305      	str	r3, [sp, #20]
 800b42c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b4f8 <_svfiprintf_r+0x1fc>
 800b430:	7821      	ldrb	r1, [r4, #0]
 800b432:	2203      	movs	r2, #3
 800b434:	4650      	mov	r0, sl
 800b436:	f7f4 ff5b 	bl	80002f0 <memchr>
 800b43a:	b140      	cbz	r0, 800b44e <_svfiprintf_r+0x152>
 800b43c:	2340      	movs	r3, #64	; 0x40
 800b43e:	eba0 000a 	sub.w	r0, r0, sl
 800b442:	fa03 f000 	lsl.w	r0, r3, r0
 800b446:	9b04      	ldr	r3, [sp, #16]
 800b448:	4303      	orrs	r3, r0
 800b44a:	3401      	adds	r4, #1
 800b44c:	9304      	str	r3, [sp, #16]
 800b44e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b452:	4826      	ldr	r0, [pc, #152]	; (800b4ec <_svfiprintf_r+0x1f0>)
 800b454:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b458:	2206      	movs	r2, #6
 800b45a:	f7f4 ff49 	bl	80002f0 <memchr>
 800b45e:	2800      	cmp	r0, #0
 800b460:	d038      	beq.n	800b4d4 <_svfiprintf_r+0x1d8>
 800b462:	4b23      	ldr	r3, [pc, #140]	; (800b4f0 <_svfiprintf_r+0x1f4>)
 800b464:	bb1b      	cbnz	r3, 800b4ae <_svfiprintf_r+0x1b2>
 800b466:	9b03      	ldr	r3, [sp, #12]
 800b468:	3307      	adds	r3, #7
 800b46a:	f023 0307 	bic.w	r3, r3, #7
 800b46e:	3308      	adds	r3, #8
 800b470:	9303      	str	r3, [sp, #12]
 800b472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b474:	4433      	add	r3, r6
 800b476:	9309      	str	r3, [sp, #36]	; 0x24
 800b478:	e767      	b.n	800b34a <_svfiprintf_r+0x4e>
 800b47a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b47e:	460c      	mov	r4, r1
 800b480:	2001      	movs	r0, #1
 800b482:	e7a5      	b.n	800b3d0 <_svfiprintf_r+0xd4>
 800b484:	2300      	movs	r3, #0
 800b486:	3401      	adds	r4, #1
 800b488:	9305      	str	r3, [sp, #20]
 800b48a:	4619      	mov	r1, r3
 800b48c:	f04f 0c0a 	mov.w	ip, #10
 800b490:	4620      	mov	r0, r4
 800b492:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b496:	3a30      	subs	r2, #48	; 0x30
 800b498:	2a09      	cmp	r2, #9
 800b49a:	d903      	bls.n	800b4a4 <_svfiprintf_r+0x1a8>
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d0c5      	beq.n	800b42c <_svfiprintf_r+0x130>
 800b4a0:	9105      	str	r1, [sp, #20]
 800b4a2:	e7c3      	b.n	800b42c <_svfiprintf_r+0x130>
 800b4a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e7f0      	b.n	800b490 <_svfiprintf_r+0x194>
 800b4ae:	ab03      	add	r3, sp, #12
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	462a      	mov	r2, r5
 800b4b4:	4b0f      	ldr	r3, [pc, #60]	; (800b4f4 <_svfiprintf_r+0x1f8>)
 800b4b6:	a904      	add	r1, sp, #16
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	f7fc fb41 	bl	8007b40 <_printf_float>
 800b4be:	1c42      	adds	r2, r0, #1
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	d1d6      	bne.n	800b472 <_svfiprintf_r+0x176>
 800b4c4:	89ab      	ldrh	r3, [r5, #12]
 800b4c6:	065b      	lsls	r3, r3, #25
 800b4c8:	f53f af2c 	bmi.w	800b324 <_svfiprintf_r+0x28>
 800b4cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4ce:	b01d      	add	sp, #116	; 0x74
 800b4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d4:	ab03      	add	r3, sp, #12
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	462a      	mov	r2, r5
 800b4da:	4b06      	ldr	r3, [pc, #24]	; (800b4f4 <_svfiprintf_r+0x1f8>)
 800b4dc:	a904      	add	r1, sp, #16
 800b4de:	4638      	mov	r0, r7
 800b4e0:	f7fc fdba 	bl	8008058 <_printf_i>
 800b4e4:	e7eb      	b.n	800b4be <_svfiprintf_r+0x1c2>
 800b4e6:	bf00      	nop
 800b4e8:	0800c54c 	.word	0x0800c54c
 800b4ec:	0800c556 	.word	0x0800c556
 800b4f0:	08007b41 	.word	0x08007b41
 800b4f4:	0800b245 	.word	0x0800b245
 800b4f8:	0800c552 	.word	0x0800c552
 800b4fc:	00000000 	.word	0x00000000

0800b500 <nan>:
 800b500:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b508 <nan+0x8>
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	00000000 	.word	0x00000000
 800b50c:	7ff80000 	.word	0x7ff80000

0800b510 <_sbrk_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4d06      	ldr	r5, [pc, #24]	; (800b52c <_sbrk_r+0x1c>)
 800b514:	2300      	movs	r3, #0
 800b516:	4604      	mov	r4, r0
 800b518:	4608      	mov	r0, r1
 800b51a:	602b      	str	r3, [r5, #0]
 800b51c:	f7f5 ff10 	bl	8001340 <_sbrk>
 800b520:	1c43      	adds	r3, r0, #1
 800b522:	d102      	bne.n	800b52a <_sbrk_r+0x1a>
 800b524:	682b      	ldr	r3, [r5, #0]
 800b526:	b103      	cbz	r3, 800b52a <_sbrk_r+0x1a>
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	2400033c 	.word	0x2400033c

0800b530 <strncmp>:
 800b530:	b510      	push	{r4, lr}
 800b532:	b17a      	cbz	r2, 800b554 <strncmp+0x24>
 800b534:	4603      	mov	r3, r0
 800b536:	3901      	subs	r1, #1
 800b538:	1884      	adds	r4, r0, r2
 800b53a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b53e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b542:	4290      	cmp	r0, r2
 800b544:	d101      	bne.n	800b54a <strncmp+0x1a>
 800b546:	42a3      	cmp	r3, r4
 800b548:	d101      	bne.n	800b54e <strncmp+0x1e>
 800b54a:	1a80      	subs	r0, r0, r2
 800b54c:	bd10      	pop	{r4, pc}
 800b54e:	2800      	cmp	r0, #0
 800b550:	d1f3      	bne.n	800b53a <strncmp+0xa>
 800b552:	e7fa      	b.n	800b54a <strncmp+0x1a>
 800b554:	4610      	mov	r0, r2
 800b556:	e7f9      	b.n	800b54c <strncmp+0x1c>

0800b558 <__ascii_wctomb>:
 800b558:	b149      	cbz	r1, 800b56e <__ascii_wctomb+0x16>
 800b55a:	2aff      	cmp	r2, #255	; 0xff
 800b55c:	bf85      	ittet	hi
 800b55e:	238a      	movhi	r3, #138	; 0x8a
 800b560:	6003      	strhi	r3, [r0, #0]
 800b562:	700a      	strbls	r2, [r1, #0]
 800b564:	f04f 30ff 	movhi.w	r0, #4294967295
 800b568:	bf98      	it	ls
 800b56a:	2001      	movls	r0, #1
 800b56c:	4770      	bx	lr
 800b56e:	4608      	mov	r0, r1
 800b570:	4770      	bx	lr
	...

0800b574 <__assert_func>:
 800b574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b576:	4614      	mov	r4, r2
 800b578:	461a      	mov	r2, r3
 800b57a:	4b09      	ldr	r3, [pc, #36]	; (800b5a0 <__assert_func+0x2c>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4605      	mov	r5, r0
 800b580:	68d8      	ldr	r0, [r3, #12]
 800b582:	b14c      	cbz	r4, 800b598 <__assert_func+0x24>
 800b584:	4b07      	ldr	r3, [pc, #28]	; (800b5a4 <__assert_func+0x30>)
 800b586:	9100      	str	r1, [sp, #0]
 800b588:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b58c:	4906      	ldr	r1, [pc, #24]	; (800b5a8 <__assert_func+0x34>)
 800b58e:	462b      	mov	r3, r5
 800b590:	f000 f80e 	bl	800b5b0 <fiprintf>
 800b594:	f000 fa8c 	bl	800bab0 <abort>
 800b598:	4b04      	ldr	r3, [pc, #16]	; (800b5ac <__assert_func+0x38>)
 800b59a:	461c      	mov	r4, r3
 800b59c:	e7f3      	b.n	800b586 <__assert_func+0x12>
 800b59e:	bf00      	nop
 800b5a0:	24000010 	.word	0x24000010
 800b5a4:	0800c55d 	.word	0x0800c55d
 800b5a8:	0800c56a 	.word	0x0800c56a
 800b5ac:	0800c598 	.word	0x0800c598

0800b5b0 <fiprintf>:
 800b5b0:	b40e      	push	{r1, r2, r3}
 800b5b2:	b503      	push	{r0, r1, lr}
 800b5b4:	4601      	mov	r1, r0
 800b5b6:	ab03      	add	r3, sp, #12
 800b5b8:	4805      	ldr	r0, [pc, #20]	; (800b5d0 <fiprintf+0x20>)
 800b5ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5be:	6800      	ldr	r0, [r0, #0]
 800b5c0:	9301      	str	r3, [sp, #4]
 800b5c2:	f000 f885 	bl	800b6d0 <_vfiprintf_r>
 800b5c6:	b002      	add	sp, #8
 800b5c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5cc:	b003      	add	sp, #12
 800b5ce:	4770      	bx	lr
 800b5d0:	24000010 	.word	0x24000010

0800b5d4 <memmove>:
 800b5d4:	4288      	cmp	r0, r1
 800b5d6:	b510      	push	{r4, lr}
 800b5d8:	eb01 0402 	add.w	r4, r1, r2
 800b5dc:	d902      	bls.n	800b5e4 <memmove+0x10>
 800b5de:	4284      	cmp	r4, r0
 800b5e0:	4623      	mov	r3, r4
 800b5e2:	d807      	bhi.n	800b5f4 <memmove+0x20>
 800b5e4:	1e43      	subs	r3, r0, #1
 800b5e6:	42a1      	cmp	r1, r4
 800b5e8:	d008      	beq.n	800b5fc <memmove+0x28>
 800b5ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5f2:	e7f8      	b.n	800b5e6 <memmove+0x12>
 800b5f4:	4402      	add	r2, r0
 800b5f6:	4601      	mov	r1, r0
 800b5f8:	428a      	cmp	r2, r1
 800b5fa:	d100      	bne.n	800b5fe <memmove+0x2a>
 800b5fc:	bd10      	pop	{r4, pc}
 800b5fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b606:	e7f7      	b.n	800b5f8 <memmove+0x24>

0800b608 <__malloc_lock>:
 800b608:	4801      	ldr	r0, [pc, #4]	; (800b610 <__malloc_lock+0x8>)
 800b60a:	f000 bc11 	b.w	800be30 <__retarget_lock_acquire_recursive>
 800b60e:	bf00      	nop
 800b610:	24000340 	.word	0x24000340

0800b614 <__malloc_unlock>:
 800b614:	4801      	ldr	r0, [pc, #4]	; (800b61c <__malloc_unlock+0x8>)
 800b616:	f000 bc0c 	b.w	800be32 <__retarget_lock_release_recursive>
 800b61a:	bf00      	nop
 800b61c:	24000340 	.word	0x24000340

0800b620 <_realloc_r>:
 800b620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b624:	4680      	mov	r8, r0
 800b626:	4614      	mov	r4, r2
 800b628:	460e      	mov	r6, r1
 800b62a:	b921      	cbnz	r1, 800b636 <_realloc_r+0x16>
 800b62c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b630:	4611      	mov	r1, r2
 800b632:	f7ff bd93 	b.w	800b15c <_malloc_r>
 800b636:	b92a      	cbnz	r2, 800b644 <_realloc_r+0x24>
 800b638:	f7ff fd24 	bl	800b084 <_free_r>
 800b63c:	4625      	mov	r5, r4
 800b63e:	4628      	mov	r0, r5
 800b640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b644:	f000 fc5c 	bl	800bf00 <_malloc_usable_size_r>
 800b648:	4284      	cmp	r4, r0
 800b64a:	4607      	mov	r7, r0
 800b64c:	d802      	bhi.n	800b654 <_realloc_r+0x34>
 800b64e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b652:	d812      	bhi.n	800b67a <_realloc_r+0x5a>
 800b654:	4621      	mov	r1, r4
 800b656:	4640      	mov	r0, r8
 800b658:	f7ff fd80 	bl	800b15c <_malloc_r>
 800b65c:	4605      	mov	r5, r0
 800b65e:	2800      	cmp	r0, #0
 800b660:	d0ed      	beq.n	800b63e <_realloc_r+0x1e>
 800b662:	42bc      	cmp	r4, r7
 800b664:	4622      	mov	r2, r4
 800b666:	4631      	mov	r1, r6
 800b668:	bf28      	it	cs
 800b66a:	463a      	movcs	r2, r7
 800b66c:	f7ff f828 	bl	800a6c0 <memcpy>
 800b670:	4631      	mov	r1, r6
 800b672:	4640      	mov	r0, r8
 800b674:	f7ff fd06 	bl	800b084 <_free_r>
 800b678:	e7e1      	b.n	800b63e <_realloc_r+0x1e>
 800b67a:	4635      	mov	r5, r6
 800b67c:	e7df      	b.n	800b63e <_realloc_r+0x1e>

0800b67e <__sfputc_r>:
 800b67e:	6893      	ldr	r3, [r2, #8]
 800b680:	3b01      	subs	r3, #1
 800b682:	2b00      	cmp	r3, #0
 800b684:	b410      	push	{r4}
 800b686:	6093      	str	r3, [r2, #8]
 800b688:	da08      	bge.n	800b69c <__sfputc_r+0x1e>
 800b68a:	6994      	ldr	r4, [r2, #24]
 800b68c:	42a3      	cmp	r3, r4
 800b68e:	db01      	blt.n	800b694 <__sfputc_r+0x16>
 800b690:	290a      	cmp	r1, #10
 800b692:	d103      	bne.n	800b69c <__sfputc_r+0x1e>
 800b694:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b698:	f000 b94a 	b.w	800b930 <__swbuf_r>
 800b69c:	6813      	ldr	r3, [r2, #0]
 800b69e:	1c58      	adds	r0, r3, #1
 800b6a0:	6010      	str	r0, [r2, #0]
 800b6a2:	7019      	strb	r1, [r3, #0]
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <__sfputs_r>:
 800b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	460f      	mov	r7, r1
 800b6b2:	4614      	mov	r4, r2
 800b6b4:	18d5      	adds	r5, r2, r3
 800b6b6:	42ac      	cmp	r4, r5
 800b6b8:	d101      	bne.n	800b6be <__sfputs_r+0x12>
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	e007      	b.n	800b6ce <__sfputs_r+0x22>
 800b6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c2:	463a      	mov	r2, r7
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	f7ff ffda 	bl	800b67e <__sfputc_r>
 800b6ca:	1c43      	adds	r3, r0, #1
 800b6cc:	d1f3      	bne.n	800b6b6 <__sfputs_r+0xa>
 800b6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6d0 <_vfiprintf_r>:
 800b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	460d      	mov	r5, r1
 800b6d6:	b09d      	sub	sp, #116	; 0x74
 800b6d8:	4614      	mov	r4, r2
 800b6da:	4698      	mov	r8, r3
 800b6dc:	4606      	mov	r6, r0
 800b6de:	b118      	cbz	r0, 800b6e8 <_vfiprintf_r+0x18>
 800b6e0:	6983      	ldr	r3, [r0, #24]
 800b6e2:	b90b      	cbnz	r3, 800b6e8 <_vfiprintf_r+0x18>
 800b6e4:	f000 fb06 	bl	800bcf4 <__sinit>
 800b6e8:	4b89      	ldr	r3, [pc, #548]	; (800b910 <_vfiprintf_r+0x240>)
 800b6ea:	429d      	cmp	r5, r3
 800b6ec:	d11b      	bne.n	800b726 <_vfiprintf_r+0x56>
 800b6ee:	6875      	ldr	r5, [r6, #4]
 800b6f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6f2:	07d9      	lsls	r1, r3, #31
 800b6f4:	d405      	bmi.n	800b702 <_vfiprintf_r+0x32>
 800b6f6:	89ab      	ldrh	r3, [r5, #12]
 800b6f8:	059a      	lsls	r2, r3, #22
 800b6fa:	d402      	bmi.n	800b702 <_vfiprintf_r+0x32>
 800b6fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6fe:	f000 fb97 	bl	800be30 <__retarget_lock_acquire_recursive>
 800b702:	89ab      	ldrh	r3, [r5, #12]
 800b704:	071b      	lsls	r3, r3, #28
 800b706:	d501      	bpl.n	800b70c <_vfiprintf_r+0x3c>
 800b708:	692b      	ldr	r3, [r5, #16]
 800b70a:	b9eb      	cbnz	r3, 800b748 <_vfiprintf_r+0x78>
 800b70c:	4629      	mov	r1, r5
 800b70e:	4630      	mov	r0, r6
 800b710:	f000 f960 	bl	800b9d4 <__swsetup_r>
 800b714:	b1c0      	cbz	r0, 800b748 <_vfiprintf_r+0x78>
 800b716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b718:	07dc      	lsls	r4, r3, #31
 800b71a:	d50e      	bpl.n	800b73a <_vfiprintf_r+0x6a>
 800b71c:	f04f 30ff 	mov.w	r0, #4294967295
 800b720:	b01d      	add	sp, #116	; 0x74
 800b722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b726:	4b7b      	ldr	r3, [pc, #492]	; (800b914 <_vfiprintf_r+0x244>)
 800b728:	429d      	cmp	r5, r3
 800b72a:	d101      	bne.n	800b730 <_vfiprintf_r+0x60>
 800b72c:	68b5      	ldr	r5, [r6, #8]
 800b72e:	e7df      	b.n	800b6f0 <_vfiprintf_r+0x20>
 800b730:	4b79      	ldr	r3, [pc, #484]	; (800b918 <_vfiprintf_r+0x248>)
 800b732:	429d      	cmp	r5, r3
 800b734:	bf08      	it	eq
 800b736:	68f5      	ldreq	r5, [r6, #12]
 800b738:	e7da      	b.n	800b6f0 <_vfiprintf_r+0x20>
 800b73a:	89ab      	ldrh	r3, [r5, #12]
 800b73c:	0598      	lsls	r0, r3, #22
 800b73e:	d4ed      	bmi.n	800b71c <_vfiprintf_r+0x4c>
 800b740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b742:	f000 fb76 	bl	800be32 <__retarget_lock_release_recursive>
 800b746:	e7e9      	b.n	800b71c <_vfiprintf_r+0x4c>
 800b748:	2300      	movs	r3, #0
 800b74a:	9309      	str	r3, [sp, #36]	; 0x24
 800b74c:	2320      	movs	r3, #32
 800b74e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b752:	f8cd 800c 	str.w	r8, [sp, #12]
 800b756:	2330      	movs	r3, #48	; 0x30
 800b758:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b91c <_vfiprintf_r+0x24c>
 800b75c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b760:	f04f 0901 	mov.w	r9, #1
 800b764:	4623      	mov	r3, r4
 800b766:	469a      	mov	sl, r3
 800b768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b76c:	b10a      	cbz	r2, 800b772 <_vfiprintf_r+0xa2>
 800b76e:	2a25      	cmp	r2, #37	; 0x25
 800b770:	d1f9      	bne.n	800b766 <_vfiprintf_r+0x96>
 800b772:	ebba 0b04 	subs.w	fp, sl, r4
 800b776:	d00b      	beq.n	800b790 <_vfiprintf_r+0xc0>
 800b778:	465b      	mov	r3, fp
 800b77a:	4622      	mov	r2, r4
 800b77c:	4629      	mov	r1, r5
 800b77e:	4630      	mov	r0, r6
 800b780:	f7ff ff94 	bl	800b6ac <__sfputs_r>
 800b784:	3001      	adds	r0, #1
 800b786:	f000 80aa 	beq.w	800b8de <_vfiprintf_r+0x20e>
 800b78a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b78c:	445a      	add	r2, fp
 800b78e:	9209      	str	r2, [sp, #36]	; 0x24
 800b790:	f89a 3000 	ldrb.w	r3, [sl]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 80a2 	beq.w	800b8de <_vfiprintf_r+0x20e>
 800b79a:	2300      	movs	r3, #0
 800b79c:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7a4:	f10a 0a01 	add.w	sl, sl, #1
 800b7a8:	9304      	str	r3, [sp, #16]
 800b7aa:	9307      	str	r3, [sp, #28]
 800b7ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7b0:	931a      	str	r3, [sp, #104]	; 0x68
 800b7b2:	4654      	mov	r4, sl
 800b7b4:	2205      	movs	r2, #5
 800b7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ba:	4858      	ldr	r0, [pc, #352]	; (800b91c <_vfiprintf_r+0x24c>)
 800b7bc:	f7f4 fd98 	bl	80002f0 <memchr>
 800b7c0:	9a04      	ldr	r2, [sp, #16]
 800b7c2:	b9d8      	cbnz	r0, 800b7fc <_vfiprintf_r+0x12c>
 800b7c4:	06d1      	lsls	r1, r2, #27
 800b7c6:	bf44      	itt	mi
 800b7c8:	2320      	movmi	r3, #32
 800b7ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ce:	0713      	lsls	r3, r2, #28
 800b7d0:	bf44      	itt	mi
 800b7d2:	232b      	movmi	r3, #43	; 0x2b
 800b7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b7dc:	2b2a      	cmp	r3, #42	; 0x2a
 800b7de:	d015      	beq.n	800b80c <_vfiprintf_r+0x13c>
 800b7e0:	9a07      	ldr	r2, [sp, #28]
 800b7e2:	4654      	mov	r4, sl
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	f04f 0c0a 	mov.w	ip, #10
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7f0:	3b30      	subs	r3, #48	; 0x30
 800b7f2:	2b09      	cmp	r3, #9
 800b7f4:	d94e      	bls.n	800b894 <_vfiprintf_r+0x1c4>
 800b7f6:	b1b0      	cbz	r0, 800b826 <_vfiprintf_r+0x156>
 800b7f8:	9207      	str	r2, [sp, #28]
 800b7fa:	e014      	b.n	800b826 <_vfiprintf_r+0x156>
 800b7fc:	eba0 0308 	sub.w	r3, r0, r8
 800b800:	fa09 f303 	lsl.w	r3, r9, r3
 800b804:	4313      	orrs	r3, r2
 800b806:	9304      	str	r3, [sp, #16]
 800b808:	46a2      	mov	sl, r4
 800b80a:	e7d2      	b.n	800b7b2 <_vfiprintf_r+0xe2>
 800b80c:	9b03      	ldr	r3, [sp, #12]
 800b80e:	1d19      	adds	r1, r3, #4
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	9103      	str	r1, [sp, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	bfbb      	ittet	lt
 800b818:	425b      	neglt	r3, r3
 800b81a:	f042 0202 	orrlt.w	r2, r2, #2
 800b81e:	9307      	strge	r3, [sp, #28]
 800b820:	9307      	strlt	r3, [sp, #28]
 800b822:	bfb8      	it	lt
 800b824:	9204      	strlt	r2, [sp, #16]
 800b826:	7823      	ldrb	r3, [r4, #0]
 800b828:	2b2e      	cmp	r3, #46	; 0x2e
 800b82a:	d10c      	bne.n	800b846 <_vfiprintf_r+0x176>
 800b82c:	7863      	ldrb	r3, [r4, #1]
 800b82e:	2b2a      	cmp	r3, #42	; 0x2a
 800b830:	d135      	bne.n	800b89e <_vfiprintf_r+0x1ce>
 800b832:	9b03      	ldr	r3, [sp, #12]
 800b834:	1d1a      	adds	r2, r3, #4
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	9203      	str	r2, [sp, #12]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	bfb8      	it	lt
 800b83e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b842:	3402      	adds	r4, #2
 800b844:	9305      	str	r3, [sp, #20]
 800b846:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b92c <_vfiprintf_r+0x25c>
 800b84a:	7821      	ldrb	r1, [r4, #0]
 800b84c:	2203      	movs	r2, #3
 800b84e:	4650      	mov	r0, sl
 800b850:	f7f4 fd4e 	bl	80002f0 <memchr>
 800b854:	b140      	cbz	r0, 800b868 <_vfiprintf_r+0x198>
 800b856:	2340      	movs	r3, #64	; 0x40
 800b858:	eba0 000a 	sub.w	r0, r0, sl
 800b85c:	fa03 f000 	lsl.w	r0, r3, r0
 800b860:	9b04      	ldr	r3, [sp, #16]
 800b862:	4303      	orrs	r3, r0
 800b864:	3401      	adds	r4, #1
 800b866:	9304      	str	r3, [sp, #16]
 800b868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b86c:	482c      	ldr	r0, [pc, #176]	; (800b920 <_vfiprintf_r+0x250>)
 800b86e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b872:	2206      	movs	r2, #6
 800b874:	f7f4 fd3c 	bl	80002f0 <memchr>
 800b878:	2800      	cmp	r0, #0
 800b87a:	d03f      	beq.n	800b8fc <_vfiprintf_r+0x22c>
 800b87c:	4b29      	ldr	r3, [pc, #164]	; (800b924 <_vfiprintf_r+0x254>)
 800b87e:	bb1b      	cbnz	r3, 800b8c8 <_vfiprintf_r+0x1f8>
 800b880:	9b03      	ldr	r3, [sp, #12]
 800b882:	3307      	adds	r3, #7
 800b884:	f023 0307 	bic.w	r3, r3, #7
 800b888:	3308      	adds	r3, #8
 800b88a:	9303      	str	r3, [sp, #12]
 800b88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b88e:	443b      	add	r3, r7
 800b890:	9309      	str	r3, [sp, #36]	; 0x24
 800b892:	e767      	b.n	800b764 <_vfiprintf_r+0x94>
 800b894:	fb0c 3202 	mla	r2, ip, r2, r3
 800b898:	460c      	mov	r4, r1
 800b89a:	2001      	movs	r0, #1
 800b89c:	e7a5      	b.n	800b7ea <_vfiprintf_r+0x11a>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	3401      	adds	r4, #1
 800b8a2:	9305      	str	r3, [sp, #20]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	f04f 0c0a 	mov.w	ip, #10
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8b0:	3a30      	subs	r2, #48	; 0x30
 800b8b2:	2a09      	cmp	r2, #9
 800b8b4:	d903      	bls.n	800b8be <_vfiprintf_r+0x1ee>
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d0c5      	beq.n	800b846 <_vfiprintf_r+0x176>
 800b8ba:	9105      	str	r1, [sp, #20]
 800b8bc:	e7c3      	b.n	800b846 <_vfiprintf_r+0x176>
 800b8be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e7f0      	b.n	800b8aa <_vfiprintf_r+0x1da>
 800b8c8:	ab03      	add	r3, sp, #12
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	462a      	mov	r2, r5
 800b8ce:	4b16      	ldr	r3, [pc, #88]	; (800b928 <_vfiprintf_r+0x258>)
 800b8d0:	a904      	add	r1, sp, #16
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	f7fc f934 	bl	8007b40 <_printf_float>
 800b8d8:	4607      	mov	r7, r0
 800b8da:	1c78      	adds	r0, r7, #1
 800b8dc:	d1d6      	bne.n	800b88c <_vfiprintf_r+0x1bc>
 800b8de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8e0:	07d9      	lsls	r1, r3, #31
 800b8e2:	d405      	bmi.n	800b8f0 <_vfiprintf_r+0x220>
 800b8e4:	89ab      	ldrh	r3, [r5, #12]
 800b8e6:	059a      	lsls	r2, r3, #22
 800b8e8:	d402      	bmi.n	800b8f0 <_vfiprintf_r+0x220>
 800b8ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ec:	f000 faa1 	bl	800be32 <__retarget_lock_release_recursive>
 800b8f0:	89ab      	ldrh	r3, [r5, #12]
 800b8f2:	065b      	lsls	r3, r3, #25
 800b8f4:	f53f af12 	bmi.w	800b71c <_vfiprintf_r+0x4c>
 800b8f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8fa:	e711      	b.n	800b720 <_vfiprintf_r+0x50>
 800b8fc:	ab03      	add	r3, sp, #12
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	462a      	mov	r2, r5
 800b902:	4b09      	ldr	r3, [pc, #36]	; (800b928 <_vfiprintf_r+0x258>)
 800b904:	a904      	add	r1, sp, #16
 800b906:	4630      	mov	r0, r6
 800b908:	f7fc fba6 	bl	8008058 <_printf_i>
 800b90c:	e7e4      	b.n	800b8d8 <_vfiprintf_r+0x208>
 800b90e:	bf00      	nop
 800b910:	0800c5bc 	.word	0x0800c5bc
 800b914:	0800c5dc 	.word	0x0800c5dc
 800b918:	0800c59c 	.word	0x0800c59c
 800b91c:	0800c54c 	.word	0x0800c54c
 800b920:	0800c556 	.word	0x0800c556
 800b924:	08007b41 	.word	0x08007b41
 800b928:	0800b6ad 	.word	0x0800b6ad
 800b92c:	0800c552 	.word	0x0800c552

0800b930 <__swbuf_r>:
 800b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b932:	460e      	mov	r6, r1
 800b934:	4614      	mov	r4, r2
 800b936:	4605      	mov	r5, r0
 800b938:	b118      	cbz	r0, 800b942 <__swbuf_r+0x12>
 800b93a:	6983      	ldr	r3, [r0, #24]
 800b93c:	b90b      	cbnz	r3, 800b942 <__swbuf_r+0x12>
 800b93e:	f000 f9d9 	bl	800bcf4 <__sinit>
 800b942:	4b21      	ldr	r3, [pc, #132]	; (800b9c8 <__swbuf_r+0x98>)
 800b944:	429c      	cmp	r4, r3
 800b946:	d12b      	bne.n	800b9a0 <__swbuf_r+0x70>
 800b948:	686c      	ldr	r4, [r5, #4]
 800b94a:	69a3      	ldr	r3, [r4, #24]
 800b94c:	60a3      	str	r3, [r4, #8]
 800b94e:	89a3      	ldrh	r3, [r4, #12]
 800b950:	071a      	lsls	r2, r3, #28
 800b952:	d52f      	bpl.n	800b9b4 <__swbuf_r+0x84>
 800b954:	6923      	ldr	r3, [r4, #16]
 800b956:	b36b      	cbz	r3, 800b9b4 <__swbuf_r+0x84>
 800b958:	6923      	ldr	r3, [r4, #16]
 800b95a:	6820      	ldr	r0, [r4, #0]
 800b95c:	1ac0      	subs	r0, r0, r3
 800b95e:	6963      	ldr	r3, [r4, #20]
 800b960:	b2f6      	uxtb	r6, r6
 800b962:	4283      	cmp	r3, r0
 800b964:	4637      	mov	r7, r6
 800b966:	dc04      	bgt.n	800b972 <__swbuf_r+0x42>
 800b968:	4621      	mov	r1, r4
 800b96a:	4628      	mov	r0, r5
 800b96c:	f000 f92e 	bl	800bbcc <_fflush_r>
 800b970:	bb30      	cbnz	r0, 800b9c0 <__swbuf_r+0x90>
 800b972:	68a3      	ldr	r3, [r4, #8]
 800b974:	3b01      	subs	r3, #1
 800b976:	60a3      	str	r3, [r4, #8]
 800b978:	6823      	ldr	r3, [r4, #0]
 800b97a:	1c5a      	adds	r2, r3, #1
 800b97c:	6022      	str	r2, [r4, #0]
 800b97e:	701e      	strb	r6, [r3, #0]
 800b980:	6963      	ldr	r3, [r4, #20]
 800b982:	3001      	adds	r0, #1
 800b984:	4283      	cmp	r3, r0
 800b986:	d004      	beq.n	800b992 <__swbuf_r+0x62>
 800b988:	89a3      	ldrh	r3, [r4, #12]
 800b98a:	07db      	lsls	r3, r3, #31
 800b98c:	d506      	bpl.n	800b99c <__swbuf_r+0x6c>
 800b98e:	2e0a      	cmp	r6, #10
 800b990:	d104      	bne.n	800b99c <__swbuf_r+0x6c>
 800b992:	4621      	mov	r1, r4
 800b994:	4628      	mov	r0, r5
 800b996:	f000 f919 	bl	800bbcc <_fflush_r>
 800b99a:	b988      	cbnz	r0, 800b9c0 <__swbuf_r+0x90>
 800b99c:	4638      	mov	r0, r7
 800b99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9a0:	4b0a      	ldr	r3, [pc, #40]	; (800b9cc <__swbuf_r+0x9c>)
 800b9a2:	429c      	cmp	r4, r3
 800b9a4:	d101      	bne.n	800b9aa <__swbuf_r+0x7a>
 800b9a6:	68ac      	ldr	r4, [r5, #8]
 800b9a8:	e7cf      	b.n	800b94a <__swbuf_r+0x1a>
 800b9aa:	4b09      	ldr	r3, [pc, #36]	; (800b9d0 <__swbuf_r+0xa0>)
 800b9ac:	429c      	cmp	r4, r3
 800b9ae:	bf08      	it	eq
 800b9b0:	68ec      	ldreq	r4, [r5, #12]
 800b9b2:	e7ca      	b.n	800b94a <__swbuf_r+0x1a>
 800b9b4:	4621      	mov	r1, r4
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	f000 f80c 	bl	800b9d4 <__swsetup_r>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	d0cb      	beq.n	800b958 <__swbuf_r+0x28>
 800b9c0:	f04f 37ff 	mov.w	r7, #4294967295
 800b9c4:	e7ea      	b.n	800b99c <__swbuf_r+0x6c>
 800b9c6:	bf00      	nop
 800b9c8:	0800c5bc 	.word	0x0800c5bc
 800b9cc:	0800c5dc 	.word	0x0800c5dc
 800b9d0:	0800c59c 	.word	0x0800c59c

0800b9d4 <__swsetup_r>:
 800b9d4:	4b32      	ldr	r3, [pc, #200]	; (800baa0 <__swsetup_r+0xcc>)
 800b9d6:	b570      	push	{r4, r5, r6, lr}
 800b9d8:	681d      	ldr	r5, [r3, #0]
 800b9da:	4606      	mov	r6, r0
 800b9dc:	460c      	mov	r4, r1
 800b9de:	b125      	cbz	r5, 800b9ea <__swsetup_r+0x16>
 800b9e0:	69ab      	ldr	r3, [r5, #24]
 800b9e2:	b913      	cbnz	r3, 800b9ea <__swsetup_r+0x16>
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	f000 f985 	bl	800bcf4 <__sinit>
 800b9ea:	4b2e      	ldr	r3, [pc, #184]	; (800baa4 <__swsetup_r+0xd0>)
 800b9ec:	429c      	cmp	r4, r3
 800b9ee:	d10f      	bne.n	800ba10 <__swsetup_r+0x3c>
 800b9f0:	686c      	ldr	r4, [r5, #4]
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9f8:	0719      	lsls	r1, r3, #28
 800b9fa:	d42c      	bmi.n	800ba56 <__swsetup_r+0x82>
 800b9fc:	06dd      	lsls	r5, r3, #27
 800b9fe:	d411      	bmi.n	800ba24 <__swsetup_r+0x50>
 800ba00:	2309      	movs	r3, #9
 800ba02:	6033      	str	r3, [r6, #0]
 800ba04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba08:	81a3      	strh	r3, [r4, #12]
 800ba0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba0e:	e03e      	b.n	800ba8e <__swsetup_r+0xba>
 800ba10:	4b25      	ldr	r3, [pc, #148]	; (800baa8 <__swsetup_r+0xd4>)
 800ba12:	429c      	cmp	r4, r3
 800ba14:	d101      	bne.n	800ba1a <__swsetup_r+0x46>
 800ba16:	68ac      	ldr	r4, [r5, #8]
 800ba18:	e7eb      	b.n	800b9f2 <__swsetup_r+0x1e>
 800ba1a:	4b24      	ldr	r3, [pc, #144]	; (800baac <__swsetup_r+0xd8>)
 800ba1c:	429c      	cmp	r4, r3
 800ba1e:	bf08      	it	eq
 800ba20:	68ec      	ldreq	r4, [r5, #12]
 800ba22:	e7e6      	b.n	800b9f2 <__swsetup_r+0x1e>
 800ba24:	0758      	lsls	r0, r3, #29
 800ba26:	d512      	bpl.n	800ba4e <__swsetup_r+0x7a>
 800ba28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba2a:	b141      	cbz	r1, 800ba3e <__swsetup_r+0x6a>
 800ba2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba30:	4299      	cmp	r1, r3
 800ba32:	d002      	beq.n	800ba3a <__swsetup_r+0x66>
 800ba34:	4630      	mov	r0, r6
 800ba36:	f7ff fb25 	bl	800b084 <_free_r>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	6363      	str	r3, [r4, #52]	; 0x34
 800ba3e:	89a3      	ldrh	r3, [r4, #12]
 800ba40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba44:	81a3      	strh	r3, [r4, #12]
 800ba46:	2300      	movs	r3, #0
 800ba48:	6063      	str	r3, [r4, #4]
 800ba4a:	6923      	ldr	r3, [r4, #16]
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	89a3      	ldrh	r3, [r4, #12]
 800ba50:	f043 0308 	orr.w	r3, r3, #8
 800ba54:	81a3      	strh	r3, [r4, #12]
 800ba56:	6923      	ldr	r3, [r4, #16]
 800ba58:	b94b      	cbnz	r3, 800ba6e <__swsetup_r+0x9a>
 800ba5a:	89a3      	ldrh	r3, [r4, #12]
 800ba5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba64:	d003      	beq.n	800ba6e <__swsetup_r+0x9a>
 800ba66:	4621      	mov	r1, r4
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f000 fa09 	bl	800be80 <__smakebuf_r>
 800ba6e:	89a0      	ldrh	r0, [r4, #12]
 800ba70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba74:	f010 0301 	ands.w	r3, r0, #1
 800ba78:	d00a      	beq.n	800ba90 <__swsetup_r+0xbc>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	60a3      	str	r3, [r4, #8]
 800ba7e:	6963      	ldr	r3, [r4, #20]
 800ba80:	425b      	negs	r3, r3
 800ba82:	61a3      	str	r3, [r4, #24]
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	b943      	cbnz	r3, 800ba9a <__swsetup_r+0xc6>
 800ba88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba8c:	d1ba      	bne.n	800ba04 <__swsetup_r+0x30>
 800ba8e:	bd70      	pop	{r4, r5, r6, pc}
 800ba90:	0781      	lsls	r1, r0, #30
 800ba92:	bf58      	it	pl
 800ba94:	6963      	ldrpl	r3, [r4, #20]
 800ba96:	60a3      	str	r3, [r4, #8]
 800ba98:	e7f4      	b.n	800ba84 <__swsetup_r+0xb0>
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	e7f7      	b.n	800ba8e <__swsetup_r+0xba>
 800ba9e:	bf00      	nop
 800baa0:	24000010 	.word	0x24000010
 800baa4:	0800c5bc 	.word	0x0800c5bc
 800baa8:	0800c5dc 	.word	0x0800c5dc
 800baac:	0800c59c 	.word	0x0800c59c

0800bab0 <abort>:
 800bab0:	b508      	push	{r3, lr}
 800bab2:	2006      	movs	r0, #6
 800bab4:	f000 fa54 	bl	800bf60 <raise>
 800bab8:	2001      	movs	r0, #1
 800baba:	f7f5 fbc9 	bl	8001250 <_exit>
	...

0800bac0 <__sflush_r>:
 800bac0:	898a      	ldrh	r2, [r1, #12]
 800bac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac6:	4605      	mov	r5, r0
 800bac8:	0710      	lsls	r0, r2, #28
 800baca:	460c      	mov	r4, r1
 800bacc:	d458      	bmi.n	800bb80 <__sflush_r+0xc0>
 800bace:	684b      	ldr	r3, [r1, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	dc05      	bgt.n	800bae0 <__sflush_r+0x20>
 800bad4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	dc02      	bgt.n	800bae0 <__sflush_r+0x20>
 800bada:	2000      	movs	r0, #0
 800badc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bae2:	2e00      	cmp	r6, #0
 800bae4:	d0f9      	beq.n	800bada <__sflush_r+0x1a>
 800bae6:	2300      	movs	r3, #0
 800bae8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800baec:	682f      	ldr	r7, [r5, #0]
 800baee:	602b      	str	r3, [r5, #0]
 800baf0:	d032      	beq.n	800bb58 <__sflush_r+0x98>
 800baf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800baf4:	89a3      	ldrh	r3, [r4, #12]
 800baf6:	075a      	lsls	r2, r3, #29
 800baf8:	d505      	bpl.n	800bb06 <__sflush_r+0x46>
 800bafa:	6863      	ldr	r3, [r4, #4]
 800bafc:	1ac0      	subs	r0, r0, r3
 800bafe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb00:	b10b      	cbz	r3, 800bb06 <__sflush_r+0x46>
 800bb02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb04:	1ac0      	subs	r0, r0, r3
 800bb06:	2300      	movs	r3, #0
 800bb08:	4602      	mov	r2, r0
 800bb0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb0c:	6a21      	ldr	r1, [r4, #32]
 800bb0e:	4628      	mov	r0, r5
 800bb10:	47b0      	blx	r6
 800bb12:	1c43      	adds	r3, r0, #1
 800bb14:	89a3      	ldrh	r3, [r4, #12]
 800bb16:	d106      	bne.n	800bb26 <__sflush_r+0x66>
 800bb18:	6829      	ldr	r1, [r5, #0]
 800bb1a:	291d      	cmp	r1, #29
 800bb1c:	d82c      	bhi.n	800bb78 <__sflush_r+0xb8>
 800bb1e:	4a2a      	ldr	r2, [pc, #168]	; (800bbc8 <__sflush_r+0x108>)
 800bb20:	40ca      	lsrs	r2, r1
 800bb22:	07d6      	lsls	r6, r2, #31
 800bb24:	d528      	bpl.n	800bb78 <__sflush_r+0xb8>
 800bb26:	2200      	movs	r2, #0
 800bb28:	6062      	str	r2, [r4, #4]
 800bb2a:	04d9      	lsls	r1, r3, #19
 800bb2c:	6922      	ldr	r2, [r4, #16]
 800bb2e:	6022      	str	r2, [r4, #0]
 800bb30:	d504      	bpl.n	800bb3c <__sflush_r+0x7c>
 800bb32:	1c42      	adds	r2, r0, #1
 800bb34:	d101      	bne.n	800bb3a <__sflush_r+0x7a>
 800bb36:	682b      	ldr	r3, [r5, #0]
 800bb38:	b903      	cbnz	r3, 800bb3c <__sflush_r+0x7c>
 800bb3a:	6560      	str	r0, [r4, #84]	; 0x54
 800bb3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb3e:	602f      	str	r7, [r5, #0]
 800bb40:	2900      	cmp	r1, #0
 800bb42:	d0ca      	beq.n	800bada <__sflush_r+0x1a>
 800bb44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb48:	4299      	cmp	r1, r3
 800bb4a:	d002      	beq.n	800bb52 <__sflush_r+0x92>
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	f7ff fa99 	bl	800b084 <_free_r>
 800bb52:	2000      	movs	r0, #0
 800bb54:	6360      	str	r0, [r4, #52]	; 0x34
 800bb56:	e7c1      	b.n	800badc <__sflush_r+0x1c>
 800bb58:	6a21      	ldr	r1, [r4, #32]
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	47b0      	blx	r6
 800bb60:	1c41      	adds	r1, r0, #1
 800bb62:	d1c7      	bne.n	800baf4 <__sflush_r+0x34>
 800bb64:	682b      	ldr	r3, [r5, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d0c4      	beq.n	800baf4 <__sflush_r+0x34>
 800bb6a:	2b1d      	cmp	r3, #29
 800bb6c:	d001      	beq.n	800bb72 <__sflush_r+0xb2>
 800bb6e:	2b16      	cmp	r3, #22
 800bb70:	d101      	bne.n	800bb76 <__sflush_r+0xb6>
 800bb72:	602f      	str	r7, [r5, #0]
 800bb74:	e7b1      	b.n	800bada <__sflush_r+0x1a>
 800bb76:	89a3      	ldrh	r3, [r4, #12]
 800bb78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb7c:	81a3      	strh	r3, [r4, #12]
 800bb7e:	e7ad      	b.n	800badc <__sflush_r+0x1c>
 800bb80:	690f      	ldr	r7, [r1, #16]
 800bb82:	2f00      	cmp	r7, #0
 800bb84:	d0a9      	beq.n	800bada <__sflush_r+0x1a>
 800bb86:	0793      	lsls	r3, r2, #30
 800bb88:	680e      	ldr	r6, [r1, #0]
 800bb8a:	bf08      	it	eq
 800bb8c:	694b      	ldreq	r3, [r1, #20]
 800bb8e:	600f      	str	r7, [r1, #0]
 800bb90:	bf18      	it	ne
 800bb92:	2300      	movne	r3, #0
 800bb94:	eba6 0807 	sub.w	r8, r6, r7
 800bb98:	608b      	str	r3, [r1, #8]
 800bb9a:	f1b8 0f00 	cmp.w	r8, #0
 800bb9e:	dd9c      	ble.n	800bada <__sflush_r+0x1a>
 800bba0:	6a21      	ldr	r1, [r4, #32]
 800bba2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bba4:	4643      	mov	r3, r8
 800bba6:	463a      	mov	r2, r7
 800bba8:	4628      	mov	r0, r5
 800bbaa:	47b0      	blx	r6
 800bbac:	2800      	cmp	r0, #0
 800bbae:	dc06      	bgt.n	800bbbe <__sflush_r+0xfe>
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbb6:	81a3      	strh	r3, [r4, #12]
 800bbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbc:	e78e      	b.n	800badc <__sflush_r+0x1c>
 800bbbe:	4407      	add	r7, r0
 800bbc0:	eba8 0800 	sub.w	r8, r8, r0
 800bbc4:	e7e9      	b.n	800bb9a <__sflush_r+0xda>
 800bbc6:	bf00      	nop
 800bbc8:	20400001 	.word	0x20400001

0800bbcc <_fflush_r>:
 800bbcc:	b538      	push	{r3, r4, r5, lr}
 800bbce:	690b      	ldr	r3, [r1, #16]
 800bbd0:	4605      	mov	r5, r0
 800bbd2:	460c      	mov	r4, r1
 800bbd4:	b913      	cbnz	r3, 800bbdc <_fflush_r+0x10>
 800bbd6:	2500      	movs	r5, #0
 800bbd8:	4628      	mov	r0, r5
 800bbda:	bd38      	pop	{r3, r4, r5, pc}
 800bbdc:	b118      	cbz	r0, 800bbe6 <_fflush_r+0x1a>
 800bbde:	6983      	ldr	r3, [r0, #24]
 800bbe0:	b90b      	cbnz	r3, 800bbe6 <_fflush_r+0x1a>
 800bbe2:	f000 f887 	bl	800bcf4 <__sinit>
 800bbe6:	4b14      	ldr	r3, [pc, #80]	; (800bc38 <_fflush_r+0x6c>)
 800bbe8:	429c      	cmp	r4, r3
 800bbea:	d11b      	bne.n	800bc24 <_fflush_r+0x58>
 800bbec:	686c      	ldr	r4, [r5, #4]
 800bbee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d0ef      	beq.n	800bbd6 <_fflush_r+0xa>
 800bbf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bbf8:	07d0      	lsls	r0, r2, #31
 800bbfa:	d404      	bmi.n	800bc06 <_fflush_r+0x3a>
 800bbfc:	0599      	lsls	r1, r3, #22
 800bbfe:	d402      	bmi.n	800bc06 <_fflush_r+0x3a>
 800bc00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc02:	f000 f915 	bl	800be30 <__retarget_lock_acquire_recursive>
 800bc06:	4628      	mov	r0, r5
 800bc08:	4621      	mov	r1, r4
 800bc0a:	f7ff ff59 	bl	800bac0 <__sflush_r>
 800bc0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc10:	07da      	lsls	r2, r3, #31
 800bc12:	4605      	mov	r5, r0
 800bc14:	d4e0      	bmi.n	800bbd8 <_fflush_r+0xc>
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	059b      	lsls	r3, r3, #22
 800bc1a:	d4dd      	bmi.n	800bbd8 <_fflush_r+0xc>
 800bc1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc1e:	f000 f908 	bl	800be32 <__retarget_lock_release_recursive>
 800bc22:	e7d9      	b.n	800bbd8 <_fflush_r+0xc>
 800bc24:	4b05      	ldr	r3, [pc, #20]	; (800bc3c <_fflush_r+0x70>)
 800bc26:	429c      	cmp	r4, r3
 800bc28:	d101      	bne.n	800bc2e <_fflush_r+0x62>
 800bc2a:	68ac      	ldr	r4, [r5, #8]
 800bc2c:	e7df      	b.n	800bbee <_fflush_r+0x22>
 800bc2e:	4b04      	ldr	r3, [pc, #16]	; (800bc40 <_fflush_r+0x74>)
 800bc30:	429c      	cmp	r4, r3
 800bc32:	bf08      	it	eq
 800bc34:	68ec      	ldreq	r4, [r5, #12]
 800bc36:	e7da      	b.n	800bbee <_fflush_r+0x22>
 800bc38:	0800c5bc 	.word	0x0800c5bc
 800bc3c:	0800c5dc 	.word	0x0800c5dc
 800bc40:	0800c59c 	.word	0x0800c59c

0800bc44 <std>:
 800bc44:	2300      	movs	r3, #0
 800bc46:	b510      	push	{r4, lr}
 800bc48:	4604      	mov	r4, r0
 800bc4a:	e9c0 3300 	strd	r3, r3, [r0]
 800bc4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc52:	6083      	str	r3, [r0, #8]
 800bc54:	8181      	strh	r1, [r0, #12]
 800bc56:	6643      	str	r3, [r0, #100]	; 0x64
 800bc58:	81c2      	strh	r2, [r0, #14]
 800bc5a:	6183      	str	r3, [r0, #24]
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	2208      	movs	r2, #8
 800bc60:	305c      	adds	r0, #92	; 0x5c
 800bc62:	f7fb fed5 	bl	8007a10 <memset>
 800bc66:	4b05      	ldr	r3, [pc, #20]	; (800bc7c <std+0x38>)
 800bc68:	6263      	str	r3, [r4, #36]	; 0x24
 800bc6a:	4b05      	ldr	r3, [pc, #20]	; (800bc80 <std+0x3c>)
 800bc6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc6e:	4b05      	ldr	r3, [pc, #20]	; (800bc84 <std+0x40>)
 800bc70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc72:	4b05      	ldr	r3, [pc, #20]	; (800bc88 <std+0x44>)
 800bc74:	6224      	str	r4, [r4, #32]
 800bc76:	6323      	str	r3, [r4, #48]	; 0x30
 800bc78:	bd10      	pop	{r4, pc}
 800bc7a:	bf00      	nop
 800bc7c:	0800bf99 	.word	0x0800bf99
 800bc80:	0800bfbb 	.word	0x0800bfbb
 800bc84:	0800bff3 	.word	0x0800bff3
 800bc88:	0800c017 	.word	0x0800c017

0800bc8c <_cleanup_r>:
 800bc8c:	4901      	ldr	r1, [pc, #4]	; (800bc94 <_cleanup_r+0x8>)
 800bc8e:	f000 b8af 	b.w	800bdf0 <_fwalk_reent>
 800bc92:	bf00      	nop
 800bc94:	0800bbcd 	.word	0x0800bbcd

0800bc98 <__sfmoreglue>:
 800bc98:	b570      	push	{r4, r5, r6, lr}
 800bc9a:	2268      	movs	r2, #104	; 0x68
 800bc9c:	1e4d      	subs	r5, r1, #1
 800bc9e:	4355      	muls	r5, r2
 800bca0:	460e      	mov	r6, r1
 800bca2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bca6:	f7ff fa59 	bl	800b15c <_malloc_r>
 800bcaa:	4604      	mov	r4, r0
 800bcac:	b140      	cbz	r0, 800bcc0 <__sfmoreglue+0x28>
 800bcae:	2100      	movs	r1, #0
 800bcb0:	e9c0 1600 	strd	r1, r6, [r0]
 800bcb4:	300c      	adds	r0, #12
 800bcb6:	60a0      	str	r0, [r4, #8]
 800bcb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bcbc:	f7fb fea8 	bl	8007a10 <memset>
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	bd70      	pop	{r4, r5, r6, pc}

0800bcc4 <__sfp_lock_acquire>:
 800bcc4:	4801      	ldr	r0, [pc, #4]	; (800bccc <__sfp_lock_acquire+0x8>)
 800bcc6:	f000 b8b3 	b.w	800be30 <__retarget_lock_acquire_recursive>
 800bcca:	bf00      	nop
 800bccc:	24000341 	.word	0x24000341

0800bcd0 <__sfp_lock_release>:
 800bcd0:	4801      	ldr	r0, [pc, #4]	; (800bcd8 <__sfp_lock_release+0x8>)
 800bcd2:	f000 b8ae 	b.w	800be32 <__retarget_lock_release_recursive>
 800bcd6:	bf00      	nop
 800bcd8:	24000341 	.word	0x24000341

0800bcdc <__sinit_lock_acquire>:
 800bcdc:	4801      	ldr	r0, [pc, #4]	; (800bce4 <__sinit_lock_acquire+0x8>)
 800bcde:	f000 b8a7 	b.w	800be30 <__retarget_lock_acquire_recursive>
 800bce2:	bf00      	nop
 800bce4:	24000342 	.word	0x24000342

0800bce8 <__sinit_lock_release>:
 800bce8:	4801      	ldr	r0, [pc, #4]	; (800bcf0 <__sinit_lock_release+0x8>)
 800bcea:	f000 b8a2 	b.w	800be32 <__retarget_lock_release_recursive>
 800bcee:	bf00      	nop
 800bcf0:	24000342 	.word	0x24000342

0800bcf4 <__sinit>:
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	f7ff fff0 	bl	800bcdc <__sinit_lock_acquire>
 800bcfc:	69a3      	ldr	r3, [r4, #24]
 800bcfe:	b11b      	cbz	r3, 800bd08 <__sinit+0x14>
 800bd00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd04:	f7ff bff0 	b.w	800bce8 <__sinit_lock_release>
 800bd08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd0c:	6523      	str	r3, [r4, #80]	; 0x50
 800bd0e:	4b13      	ldr	r3, [pc, #76]	; (800bd5c <__sinit+0x68>)
 800bd10:	4a13      	ldr	r2, [pc, #76]	; (800bd60 <__sinit+0x6c>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd16:	42a3      	cmp	r3, r4
 800bd18:	bf04      	itt	eq
 800bd1a:	2301      	moveq	r3, #1
 800bd1c:	61a3      	streq	r3, [r4, #24]
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f000 f820 	bl	800bd64 <__sfp>
 800bd24:	6060      	str	r0, [r4, #4]
 800bd26:	4620      	mov	r0, r4
 800bd28:	f000 f81c 	bl	800bd64 <__sfp>
 800bd2c:	60a0      	str	r0, [r4, #8]
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 f818 	bl	800bd64 <__sfp>
 800bd34:	2200      	movs	r2, #0
 800bd36:	60e0      	str	r0, [r4, #12]
 800bd38:	2104      	movs	r1, #4
 800bd3a:	6860      	ldr	r0, [r4, #4]
 800bd3c:	f7ff ff82 	bl	800bc44 <std>
 800bd40:	68a0      	ldr	r0, [r4, #8]
 800bd42:	2201      	movs	r2, #1
 800bd44:	2109      	movs	r1, #9
 800bd46:	f7ff ff7d 	bl	800bc44 <std>
 800bd4a:	68e0      	ldr	r0, [r4, #12]
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	2112      	movs	r1, #18
 800bd50:	f7ff ff78 	bl	800bc44 <std>
 800bd54:	2301      	movs	r3, #1
 800bd56:	61a3      	str	r3, [r4, #24]
 800bd58:	e7d2      	b.n	800bd00 <__sinit+0xc>
 800bd5a:	bf00      	nop
 800bd5c:	0800c154 	.word	0x0800c154
 800bd60:	0800bc8d 	.word	0x0800bc8d

0800bd64 <__sfp>:
 800bd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd66:	4607      	mov	r7, r0
 800bd68:	f7ff ffac 	bl	800bcc4 <__sfp_lock_acquire>
 800bd6c:	4b1e      	ldr	r3, [pc, #120]	; (800bde8 <__sfp+0x84>)
 800bd6e:	681e      	ldr	r6, [r3, #0]
 800bd70:	69b3      	ldr	r3, [r6, #24]
 800bd72:	b913      	cbnz	r3, 800bd7a <__sfp+0x16>
 800bd74:	4630      	mov	r0, r6
 800bd76:	f7ff ffbd 	bl	800bcf4 <__sinit>
 800bd7a:	3648      	adds	r6, #72	; 0x48
 800bd7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd80:	3b01      	subs	r3, #1
 800bd82:	d503      	bpl.n	800bd8c <__sfp+0x28>
 800bd84:	6833      	ldr	r3, [r6, #0]
 800bd86:	b30b      	cbz	r3, 800bdcc <__sfp+0x68>
 800bd88:	6836      	ldr	r6, [r6, #0]
 800bd8a:	e7f7      	b.n	800bd7c <__sfp+0x18>
 800bd8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd90:	b9d5      	cbnz	r5, 800bdc8 <__sfp+0x64>
 800bd92:	4b16      	ldr	r3, [pc, #88]	; (800bdec <__sfp+0x88>)
 800bd94:	60e3      	str	r3, [r4, #12]
 800bd96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd9a:	6665      	str	r5, [r4, #100]	; 0x64
 800bd9c:	f000 f847 	bl	800be2e <__retarget_lock_init_recursive>
 800bda0:	f7ff ff96 	bl	800bcd0 <__sfp_lock_release>
 800bda4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bda8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bdac:	6025      	str	r5, [r4, #0]
 800bdae:	61a5      	str	r5, [r4, #24]
 800bdb0:	2208      	movs	r2, #8
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bdb8:	f7fb fe2a 	bl	8007a10 <memset>
 800bdbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bdc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdc8:	3468      	adds	r4, #104	; 0x68
 800bdca:	e7d9      	b.n	800bd80 <__sfp+0x1c>
 800bdcc:	2104      	movs	r1, #4
 800bdce:	4638      	mov	r0, r7
 800bdd0:	f7ff ff62 	bl	800bc98 <__sfmoreglue>
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	6030      	str	r0, [r6, #0]
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d1d5      	bne.n	800bd88 <__sfp+0x24>
 800bddc:	f7ff ff78 	bl	800bcd0 <__sfp_lock_release>
 800bde0:	230c      	movs	r3, #12
 800bde2:	603b      	str	r3, [r7, #0]
 800bde4:	e7ee      	b.n	800bdc4 <__sfp+0x60>
 800bde6:	bf00      	nop
 800bde8:	0800c154 	.word	0x0800c154
 800bdec:	ffff0001 	.word	0xffff0001

0800bdf0 <_fwalk_reent>:
 800bdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdf4:	4606      	mov	r6, r0
 800bdf6:	4688      	mov	r8, r1
 800bdf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bdfc:	2700      	movs	r7, #0
 800bdfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be02:	f1b9 0901 	subs.w	r9, r9, #1
 800be06:	d505      	bpl.n	800be14 <_fwalk_reent+0x24>
 800be08:	6824      	ldr	r4, [r4, #0]
 800be0a:	2c00      	cmp	r4, #0
 800be0c:	d1f7      	bne.n	800bdfe <_fwalk_reent+0xe>
 800be0e:	4638      	mov	r0, r7
 800be10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be14:	89ab      	ldrh	r3, [r5, #12]
 800be16:	2b01      	cmp	r3, #1
 800be18:	d907      	bls.n	800be2a <_fwalk_reent+0x3a>
 800be1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be1e:	3301      	adds	r3, #1
 800be20:	d003      	beq.n	800be2a <_fwalk_reent+0x3a>
 800be22:	4629      	mov	r1, r5
 800be24:	4630      	mov	r0, r6
 800be26:	47c0      	blx	r8
 800be28:	4307      	orrs	r7, r0
 800be2a:	3568      	adds	r5, #104	; 0x68
 800be2c:	e7e9      	b.n	800be02 <_fwalk_reent+0x12>

0800be2e <__retarget_lock_init_recursive>:
 800be2e:	4770      	bx	lr

0800be30 <__retarget_lock_acquire_recursive>:
 800be30:	4770      	bx	lr

0800be32 <__retarget_lock_release_recursive>:
 800be32:	4770      	bx	lr

0800be34 <__swhatbuf_r>:
 800be34:	b570      	push	{r4, r5, r6, lr}
 800be36:	460e      	mov	r6, r1
 800be38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be3c:	2900      	cmp	r1, #0
 800be3e:	b096      	sub	sp, #88	; 0x58
 800be40:	4614      	mov	r4, r2
 800be42:	461d      	mov	r5, r3
 800be44:	da08      	bge.n	800be58 <__swhatbuf_r+0x24>
 800be46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800be4a:	2200      	movs	r2, #0
 800be4c:	602a      	str	r2, [r5, #0]
 800be4e:	061a      	lsls	r2, r3, #24
 800be50:	d410      	bmi.n	800be74 <__swhatbuf_r+0x40>
 800be52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be56:	e00e      	b.n	800be76 <__swhatbuf_r+0x42>
 800be58:	466a      	mov	r2, sp
 800be5a:	f000 f903 	bl	800c064 <_fstat_r>
 800be5e:	2800      	cmp	r0, #0
 800be60:	dbf1      	blt.n	800be46 <__swhatbuf_r+0x12>
 800be62:	9a01      	ldr	r2, [sp, #4]
 800be64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be6c:	425a      	negs	r2, r3
 800be6e:	415a      	adcs	r2, r3
 800be70:	602a      	str	r2, [r5, #0]
 800be72:	e7ee      	b.n	800be52 <__swhatbuf_r+0x1e>
 800be74:	2340      	movs	r3, #64	; 0x40
 800be76:	2000      	movs	r0, #0
 800be78:	6023      	str	r3, [r4, #0]
 800be7a:	b016      	add	sp, #88	; 0x58
 800be7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800be80 <__smakebuf_r>:
 800be80:	898b      	ldrh	r3, [r1, #12]
 800be82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be84:	079d      	lsls	r5, r3, #30
 800be86:	4606      	mov	r6, r0
 800be88:	460c      	mov	r4, r1
 800be8a:	d507      	bpl.n	800be9c <__smakebuf_r+0x1c>
 800be8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be90:	6023      	str	r3, [r4, #0]
 800be92:	6123      	str	r3, [r4, #16]
 800be94:	2301      	movs	r3, #1
 800be96:	6163      	str	r3, [r4, #20]
 800be98:	b002      	add	sp, #8
 800be9a:	bd70      	pop	{r4, r5, r6, pc}
 800be9c:	ab01      	add	r3, sp, #4
 800be9e:	466a      	mov	r2, sp
 800bea0:	f7ff ffc8 	bl	800be34 <__swhatbuf_r>
 800bea4:	9900      	ldr	r1, [sp, #0]
 800bea6:	4605      	mov	r5, r0
 800bea8:	4630      	mov	r0, r6
 800beaa:	f7ff f957 	bl	800b15c <_malloc_r>
 800beae:	b948      	cbnz	r0, 800bec4 <__smakebuf_r+0x44>
 800beb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beb4:	059a      	lsls	r2, r3, #22
 800beb6:	d4ef      	bmi.n	800be98 <__smakebuf_r+0x18>
 800beb8:	f023 0303 	bic.w	r3, r3, #3
 800bebc:	f043 0302 	orr.w	r3, r3, #2
 800bec0:	81a3      	strh	r3, [r4, #12]
 800bec2:	e7e3      	b.n	800be8c <__smakebuf_r+0xc>
 800bec4:	4b0d      	ldr	r3, [pc, #52]	; (800befc <__smakebuf_r+0x7c>)
 800bec6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bec8:	89a3      	ldrh	r3, [r4, #12]
 800beca:	6020      	str	r0, [r4, #0]
 800becc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bed0:	81a3      	strh	r3, [r4, #12]
 800bed2:	9b00      	ldr	r3, [sp, #0]
 800bed4:	6163      	str	r3, [r4, #20]
 800bed6:	9b01      	ldr	r3, [sp, #4]
 800bed8:	6120      	str	r0, [r4, #16]
 800beda:	b15b      	cbz	r3, 800bef4 <__smakebuf_r+0x74>
 800bedc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bee0:	4630      	mov	r0, r6
 800bee2:	f000 f8d1 	bl	800c088 <_isatty_r>
 800bee6:	b128      	cbz	r0, 800bef4 <__smakebuf_r+0x74>
 800bee8:	89a3      	ldrh	r3, [r4, #12]
 800beea:	f023 0303 	bic.w	r3, r3, #3
 800beee:	f043 0301 	orr.w	r3, r3, #1
 800bef2:	81a3      	strh	r3, [r4, #12]
 800bef4:	89a0      	ldrh	r0, [r4, #12]
 800bef6:	4305      	orrs	r5, r0
 800bef8:	81a5      	strh	r5, [r4, #12]
 800befa:	e7cd      	b.n	800be98 <__smakebuf_r+0x18>
 800befc:	0800bc8d 	.word	0x0800bc8d

0800bf00 <_malloc_usable_size_r>:
 800bf00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf04:	1f18      	subs	r0, r3, #4
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	bfbc      	itt	lt
 800bf0a:	580b      	ldrlt	r3, [r1, r0]
 800bf0c:	18c0      	addlt	r0, r0, r3
 800bf0e:	4770      	bx	lr

0800bf10 <_raise_r>:
 800bf10:	291f      	cmp	r1, #31
 800bf12:	b538      	push	{r3, r4, r5, lr}
 800bf14:	4604      	mov	r4, r0
 800bf16:	460d      	mov	r5, r1
 800bf18:	d904      	bls.n	800bf24 <_raise_r+0x14>
 800bf1a:	2316      	movs	r3, #22
 800bf1c:	6003      	str	r3, [r0, #0]
 800bf1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bf26:	b112      	cbz	r2, 800bf2e <_raise_r+0x1e>
 800bf28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf2c:	b94b      	cbnz	r3, 800bf42 <_raise_r+0x32>
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f000 f830 	bl	800bf94 <_getpid_r>
 800bf34:	462a      	mov	r2, r5
 800bf36:	4601      	mov	r1, r0
 800bf38:	4620      	mov	r0, r4
 800bf3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf3e:	f000 b817 	b.w	800bf70 <_kill_r>
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d00a      	beq.n	800bf5c <_raise_r+0x4c>
 800bf46:	1c59      	adds	r1, r3, #1
 800bf48:	d103      	bne.n	800bf52 <_raise_r+0x42>
 800bf4a:	2316      	movs	r3, #22
 800bf4c:	6003      	str	r3, [r0, #0]
 800bf4e:	2001      	movs	r0, #1
 800bf50:	e7e7      	b.n	800bf22 <_raise_r+0x12>
 800bf52:	2400      	movs	r4, #0
 800bf54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf58:	4628      	mov	r0, r5
 800bf5a:	4798      	blx	r3
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	e7e0      	b.n	800bf22 <_raise_r+0x12>

0800bf60 <raise>:
 800bf60:	4b02      	ldr	r3, [pc, #8]	; (800bf6c <raise+0xc>)
 800bf62:	4601      	mov	r1, r0
 800bf64:	6818      	ldr	r0, [r3, #0]
 800bf66:	f7ff bfd3 	b.w	800bf10 <_raise_r>
 800bf6a:	bf00      	nop
 800bf6c:	24000010 	.word	0x24000010

0800bf70 <_kill_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	4d07      	ldr	r5, [pc, #28]	; (800bf90 <_kill_r+0x20>)
 800bf74:	2300      	movs	r3, #0
 800bf76:	4604      	mov	r4, r0
 800bf78:	4608      	mov	r0, r1
 800bf7a:	4611      	mov	r1, r2
 800bf7c:	602b      	str	r3, [r5, #0]
 800bf7e:	f7f5 f957 	bl	8001230 <_kill>
 800bf82:	1c43      	adds	r3, r0, #1
 800bf84:	d102      	bne.n	800bf8c <_kill_r+0x1c>
 800bf86:	682b      	ldr	r3, [r5, #0]
 800bf88:	b103      	cbz	r3, 800bf8c <_kill_r+0x1c>
 800bf8a:	6023      	str	r3, [r4, #0]
 800bf8c:	bd38      	pop	{r3, r4, r5, pc}
 800bf8e:	bf00      	nop
 800bf90:	2400033c 	.word	0x2400033c

0800bf94 <_getpid_r>:
 800bf94:	f7f5 b944 	b.w	8001220 <_getpid>

0800bf98 <__sread>:
 800bf98:	b510      	push	{r4, lr}
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfa0:	f000 f894 	bl	800c0cc <_read_r>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	bfab      	itete	ge
 800bfa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bfaa:	89a3      	ldrhlt	r3, [r4, #12]
 800bfac:	181b      	addge	r3, r3, r0
 800bfae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bfb2:	bfac      	ite	ge
 800bfb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bfb6:	81a3      	strhlt	r3, [r4, #12]
 800bfb8:	bd10      	pop	{r4, pc}

0800bfba <__swrite>:
 800bfba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfbe:	461f      	mov	r7, r3
 800bfc0:	898b      	ldrh	r3, [r1, #12]
 800bfc2:	05db      	lsls	r3, r3, #23
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	4616      	mov	r6, r2
 800bfca:	d505      	bpl.n	800bfd8 <__swrite+0x1e>
 800bfcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f000 f868 	bl	800c0a8 <_lseek_r>
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfe2:	81a3      	strh	r3, [r4, #12]
 800bfe4:	4632      	mov	r2, r6
 800bfe6:	463b      	mov	r3, r7
 800bfe8:	4628      	mov	r0, r5
 800bfea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfee:	f000 b817 	b.w	800c020 <_write_r>

0800bff2 <__sseek>:
 800bff2:	b510      	push	{r4, lr}
 800bff4:	460c      	mov	r4, r1
 800bff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bffa:	f000 f855 	bl	800c0a8 <_lseek_r>
 800bffe:	1c43      	adds	r3, r0, #1
 800c000:	89a3      	ldrh	r3, [r4, #12]
 800c002:	bf15      	itete	ne
 800c004:	6560      	strne	r0, [r4, #84]	; 0x54
 800c006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c00a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c00e:	81a3      	strheq	r3, [r4, #12]
 800c010:	bf18      	it	ne
 800c012:	81a3      	strhne	r3, [r4, #12]
 800c014:	bd10      	pop	{r4, pc}

0800c016 <__sclose>:
 800c016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c01a:	f000 b813 	b.w	800c044 <_close_r>
	...

0800c020 <_write_r>:
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	4d07      	ldr	r5, [pc, #28]	; (800c040 <_write_r+0x20>)
 800c024:	4604      	mov	r4, r0
 800c026:	4608      	mov	r0, r1
 800c028:	4611      	mov	r1, r2
 800c02a:	2200      	movs	r2, #0
 800c02c:	602a      	str	r2, [r5, #0]
 800c02e:	461a      	mov	r2, r3
 800c030:	f7f5 f935 	bl	800129e <_write>
 800c034:	1c43      	adds	r3, r0, #1
 800c036:	d102      	bne.n	800c03e <_write_r+0x1e>
 800c038:	682b      	ldr	r3, [r5, #0]
 800c03a:	b103      	cbz	r3, 800c03e <_write_r+0x1e>
 800c03c:	6023      	str	r3, [r4, #0]
 800c03e:	bd38      	pop	{r3, r4, r5, pc}
 800c040:	2400033c 	.word	0x2400033c

0800c044 <_close_r>:
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	4d06      	ldr	r5, [pc, #24]	; (800c060 <_close_r+0x1c>)
 800c048:	2300      	movs	r3, #0
 800c04a:	4604      	mov	r4, r0
 800c04c:	4608      	mov	r0, r1
 800c04e:	602b      	str	r3, [r5, #0]
 800c050:	f7f5 f941 	bl	80012d6 <_close>
 800c054:	1c43      	adds	r3, r0, #1
 800c056:	d102      	bne.n	800c05e <_close_r+0x1a>
 800c058:	682b      	ldr	r3, [r5, #0]
 800c05a:	b103      	cbz	r3, 800c05e <_close_r+0x1a>
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	bd38      	pop	{r3, r4, r5, pc}
 800c060:	2400033c 	.word	0x2400033c

0800c064 <_fstat_r>:
 800c064:	b538      	push	{r3, r4, r5, lr}
 800c066:	4d07      	ldr	r5, [pc, #28]	; (800c084 <_fstat_r+0x20>)
 800c068:	2300      	movs	r3, #0
 800c06a:	4604      	mov	r4, r0
 800c06c:	4608      	mov	r0, r1
 800c06e:	4611      	mov	r1, r2
 800c070:	602b      	str	r3, [r5, #0]
 800c072:	f7f5 f93c 	bl	80012ee <_fstat>
 800c076:	1c43      	adds	r3, r0, #1
 800c078:	d102      	bne.n	800c080 <_fstat_r+0x1c>
 800c07a:	682b      	ldr	r3, [r5, #0]
 800c07c:	b103      	cbz	r3, 800c080 <_fstat_r+0x1c>
 800c07e:	6023      	str	r3, [r4, #0]
 800c080:	bd38      	pop	{r3, r4, r5, pc}
 800c082:	bf00      	nop
 800c084:	2400033c 	.word	0x2400033c

0800c088 <_isatty_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	4d06      	ldr	r5, [pc, #24]	; (800c0a4 <_isatty_r+0x1c>)
 800c08c:	2300      	movs	r3, #0
 800c08e:	4604      	mov	r4, r0
 800c090:	4608      	mov	r0, r1
 800c092:	602b      	str	r3, [r5, #0]
 800c094:	f7f5 f93b 	bl	800130e <_isatty>
 800c098:	1c43      	adds	r3, r0, #1
 800c09a:	d102      	bne.n	800c0a2 <_isatty_r+0x1a>
 800c09c:	682b      	ldr	r3, [r5, #0]
 800c09e:	b103      	cbz	r3, 800c0a2 <_isatty_r+0x1a>
 800c0a0:	6023      	str	r3, [r4, #0]
 800c0a2:	bd38      	pop	{r3, r4, r5, pc}
 800c0a4:	2400033c 	.word	0x2400033c

0800c0a8 <_lseek_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4d07      	ldr	r5, [pc, #28]	; (800c0c8 <_lseek_r+0x20>)
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	4608      	mov	r0, r1
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	602a      	str	r2, [r5, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	f7f5 f934 	bl	8001324 <_lseek>
 800c0bc:	1c43      	adds	r3, r0, #1
 800c0be:	d102      	bne.n	800c0c6 <_lseek_r+0x1e>
 800c0c0:	682b      	ldr	r3, [r5, #0]
 800c0c2:	b103      	cbz	r3, 800c0c6 <_lseek_r+0x1e>
 800c0c4:	6023      	str	r3, [r4, #0]
 800c0c6:	bd38      	pop	{r3, r4, r5, pc}
 800c0c8:	2400033c 	.word	0x2400033c

0800c0cc <_read_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4d07      	ldr	r5, [pc, #28]	; (800c0ec <_read_r+0x20>)
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	4608      	mov	r0, r1
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	602a      	str	r2, [r5, #0]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	f7f5 f8c2 	bl	8001264 <_read>
 800c0e0:	1c43      	adds	r3, r0, #1
 800c0e2:	d102      	bne.n	800c0ea <_read_r+0x1e>
 800c0e4:	682b      	ldr	r3, [r5, #0]
 800c0e6:	b103      	cbz	r3, 800c0ea <_read_r+0x1e>
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	bd38      	pop	{r3, r4, r5, pc}
 800c0ec:	2400033c 	.word	0x2400033c

0800c0f0 <_init>:
 800c0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f2:	bf00      	nop
 800c0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0f6:	bc08      	pop	{r3}
 800c0f8:	469e      	mov	lr, r3
 800c0fa:	4770      	bx	lr

0800c0fc <_fini>:
 800c0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fe:	bf00      	nop
 800c100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c102:	bc08      	pop	{r3}
 800c104:	469e      	mov	lr, r3
 800c106:	4770      	bx	lr
