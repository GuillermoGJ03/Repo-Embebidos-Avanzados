
lab6_4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdbc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800d05c  0800d05c  0001d05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0e0  0800d0e0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0e0  0800d0e0  0001d0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0e8  0800d0e8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0e8  0800d0e8  0001d0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0ec  0800d0ec  0001d0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  24000000  0800d0f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  24000080  0800d170  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240008f0  0800d170  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020764  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d6  00000000  00000000  00040812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  00043ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  000455e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d4a9  00000000  00000000  00046da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002023a  00000000  00000000  00084249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019b91d  00000000  00000000  000a4483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0023fda0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070a8  00000000  00000000  0023fdf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d044 	.word	0x0800d044

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	0800d044 	.word	0x0800d044

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b3c      	ldr	r3, [pc, #240]	; (80008b0 <main+0x100>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 fd81 	bl	80012e0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f001 f889 	bl	80018f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f87f 	bl	80008e4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <main+0x100>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a30      	ldr	r2, [pc, #192]	; (80008b0 <main+0x100>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <main+0x100>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f005 fce5 	bl	80061d4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f005 fcfb 	bl	8006208 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000818:	bf00      	nop
 800081a:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <main+0x100>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x80>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x6a>
if ( timeout < 0 )
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x8a>
{
Error_Handler();
 8000836:	f000 fd53 	bl	80012e0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 fb5b 	bl	8000ef4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083e:	f000 fabb 	bl	8000db8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000842:	f000 fb05 	bl	8000e50 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000846:	f000 f8d1 	bl	80009ec <MX_ADC1_Init>
  MX_TIM13_Init();
 800084a:	f000 fa91 	bl	8000d70 <MX_TIM13_Init>
  MX_DMA_Init();
 800084e:	f000 fb31 	bl	8000eb4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000852:	f000 f9f1 	bl	8000c38 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000856:	f000 f943 	bl	8000ae0 <MX_TIM1_Init>
  MX_TIM5_Init();
 800085a:	f000 fa3b 	bl	8000cd4 <MX_TIM5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uart_buf_len = sprintf(uart_buf, "START!!...\r\n");
 800085e:	4915      	ldr	r1, [pc, #84]	; (80008b4 <main+0x104>)
 8000860:	4815      	ldr	r0, [pc, #84]	; (80008b8 <main+0x108>)
 8000862:	f00b ff81 	bl	800c768 <siprintf>
 8000866:	4603      	mov	r3, r0
 8000868:	4a14      	ldr	r2, [pc, #80]	; (80008bc <main+0x10c>)
 800086a:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (int16_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <main+0x10c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	b29a      	uxth	r2, r3
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	4910      	ldr	r1, [pc, #64]	; (80008b8 <main+0x108>)
 8000878:	4811      	ldr	r0, [pc, #68]	; (80008c0 <main+0x110>)
 800087a:	f00a fb83 	bl	800af84 <HAL_UART_Transmit>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcValues[0], CHANNELS);
 800087e:	2201      	movs	r2, #1
 8000880:	4910      	ldr	r1, [pc, #64]	; (80008c4 <main+0x114>)
 8000882:	4811      	ldr	r0, [pc, #68]	; (80008c8 <main+0x118>)
 8000884:	f001 fcd2 	bl	800222c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim13);
 8000888:	4810      	ldr	r0, [pc, #64]	; (80008cc <main+0x11c>)
 800088a:	f009 f891 	bl	80099b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 800088e:	4810      	ldr	r0, [pc, #64]	; (80008d0 <main+0x120>)
 8000890:	f009 f81e 	bl	80098d0 <HAL_TIM_Base_Start>
  TIM1->CCR2 = 0;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <main+0x124>)
 8000896:	2200      	movs	r2, #0
 8000898:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800089a:	2104      	movs	r1, #4
 800089c:	480e      	ldr	r0, [pc, #56]	; (80008d8 <main+0x128>)
 800089e:	f009 f961 	bl	8009b64 <HAL_TIM_PWM_Start>

  timer_val = __HAL_TIM_GET_COUNTER(&htim5);
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <main+0x12c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <main+0x130>)
 80008aa:	6013      	str	r3, [r2, #0]

  while (1)
 80008ac:	e7fe      	b.n	80008ac <main+0xfc>
 80008ae:	bf00      	nop
 80008b0:	58024400 	.word	0x58024400
 80008b4:	0800d05c 	.word	0x0800d05c
 80008b8:	24000854 	.word	0x24000854
 80008bc:	240008b8 	.word	0x240008b8
 80008c0:	240002a8 	.word	0x240002a8
 80008c4:	24000844 	.word	0x24000844
 80008c8:	2400009c 	.word	0x2400009c
 80008cc:	2400025c 	.word	0x2400025c
 80008d0:	240001c4 	.word	0x240001c4
 80008d4:	40010000 	.word	0x40010000
 80008d8:	24000178 	.word	0x24000178
 80008dc:	24000210 	.word	0x24000210
 80008e0:	240008cc 	.word	0x240008cc

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b09c      	sub	sp, #112	; 0x70
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	224c      	movs	r2, #76	; 0x4c
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f00b ff30 	bl	800c758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2220      	movs	r2, #32
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f00b ff2a 	bl	800c758 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000904:	2004      	movs	r0, #4
 8000906:	f005 fddb 	bl	80064c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <SystemClock_Config+0xfc>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a33      	ldr	r2, [pc, #204]	; (80009e0 <SystemClock_Config+0xfc>)
 8000914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <SystemClock_Config+0xfc>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <SystemClock_Config+0x100>)
 8000926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000928:	4a2e      	ldr	r2, [pc, #184]	; (80009e4 <SystemClock_Config+0x100>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000930:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <SystemClock_Config+0x100>)
 8000932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800093c:	bf00      	nop
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <SystemClock_Config+0xfc>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800094a:	d1f8      	bne.n	800093e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <SystemClock_Config+0x104>)
 800094e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000950:	f023 0303 	bic.w	r3, r3, #3
 8000954:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <SystemClock_Config+0x104>)
 8000956:	f043 0302 	orr.w	r3, r3, #2
 800095a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800095c:	2301      	movs	r3, #1
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000960:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	2302      	movs	r3, #2
 8000968:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096a:	2302      	movs	r3, #2
 800096c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800096e:	2301      	movs	r3, #1
 8000970:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000972:	2378      	movs	r3, #120	; 0x78
 8000974:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000976:	2302      	movs	r3, #2
 8000978:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800097e:	2302      	movs	r3, #2
 8000980:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000982:	230c      	movs	r3, #12
 8000984:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000986:	2300      	movs	r3, #0
 8000988:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4618      	mov	r0, r3
 8000994:	f005 fdfe 	bl	8006594 <HAL_RCC_OscConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800099e:	f000 fc9f 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	233f      	movs	r3, #63	; 0x3f
 80009a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2303      	movs	r3, #3
 80009a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009ae:	2308      	movs	r3, #8
 80009b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009b2:	2340      	movs	r3, #64	; 0x40
 80009b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009b6:	2340      	movs	r3, #64	; 0x40
 80009b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2104      	movs	r1, #4
 80009c8:	4618      	mov	r0, r3
 80009ca:	f006 fa11 	bl	8006df0 <HAL_RCC_ClockConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80009d4:	f000 fc84 	bl	80012e0 <Error_Handler>
  }
}
 80009d8:	bf00      	nop
 80009da:	3770      	adds	r7, #112	; 0x70
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	58024800 	.word	0x58024800
 80009e4:	58000400 	.word	0x58000400
 80009e8:	58024400 	.word	0x58024400

080009ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009fe:	463b      	mov	r3, r7
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a10:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a12:	4a31      	ldr	r2, [pc, #196]	; (8000ad8 <MX_ADC1_Init+0xec>)
 8000a14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000a16:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a18:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000a1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a20:	2210      	movs	r2, #16
 8000a22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a24:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a2c:	2208      	movs	r2, #8
 8000a2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a36:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a42:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a48:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a56:	2203      	movs	r2, #3
 8000a58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a70:	4818      	ldr	r0, [pc, #96]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a72:	f001 fa39 	bl	8001ee8 <HAL_ADC_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000a7c:	f000 fc30 	bl	80012e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000a8c:	f002 fbc2 	bl	8003214 <HAL_ADCEx_MultiModeConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000a96:	f000 fc23 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_ADC1_Init+0xf0>)
 8000a9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a9e:	2306      	movs	r3, #6
 8000aa0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aa6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000aaa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aac:	2304      	movs	r3, #4
 8000aae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_ADC1_Init+0xe8>)
 8000abe:	f001 fcef 	bl	80024a0 <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000ac8:	f000 fc0a 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2400009c 	.word	0x2400009c
 8000ad8:	40022000 	.word	0x40022000
 8000adc:	3ef08000 	.word	0x3ef08000

08000ae0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b09a      	sub	sp, #104	; 0x68
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
 8000b10:	615a      	str	r2, [r3, #20]
 8000b12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	222c      	movs	r2, #44	; 0x2c
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f00b fe1c 	bl	800c758 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b20:	4b43      	ldr	r3, [pc, #268]	; (8000c30 <MX_TIM1_Init+0x150>)
 8000b22:	4a44      	ldr	r2, [pc, #272]	; (8000c34 <MX_TIM1_Init+0x154>)
 8000b24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8000b26:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <MX_TIM1_Init+0x150>)
 8000b28:	22ef      	movs	r2, #239	; 0xef
 8000b2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2c:	4b40      	ldr	r3, [pc, #256]	; (8000c30 <MX_TIM1_Init+0x150>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000b32:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <MX_TIM1_Init+0x150>)
 8000b34:	2263      	movs	r2, #99	; 0x63
 8000b36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b38:	4b3d      	ldr	r3, [pc, #244]	; (8000c30 <MX_TIM1_Init+0x150>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3e:	4b3c      	ldr	r3, [pc, #240]	; (8000c30 <MX_TIM1_Init+0x150>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <MX_TIM1_Init+0x150>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b4a:	4839      	ldr	r0, [pc, #228]	; (8000c30 <MX_TIM1_Init+0x150>)
 8000b4c:	f008 fe68 	bl	8009820 <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b56:	f000 fbc3 	bl	80012e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b64:	4619      	mov	r1, r3
 8000b66:	4832      	ldr	r0, [pc, #200]	; (8000c30 <MX_TIM1_Init+0x150>)
 8000b68:	f009 fb3e 	bl	800a1e8 <HAL_TIM_ConfigClockSource>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b72:	f000 fbb5 	bl	80012e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b76:	482e      	ldr	r0, [pc, #184]	; (8000c30 <MX_TIM1_Init+0x150>)
 8000b78:	f008 ff92 	bl	8009aa0 <HAL_TIM_PWM_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b82:	f000 fbad 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b96:	4619      	mov	r1, r3
 8000b98:	4825      	ldr	r0, [pc, #148]	; (8000c30 <MX_TIM1_Init+0x150>)
 8000b9a:	f00a f879 	bl	800ac90 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000ba4:	f000 fb9c 	bl	80012e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba8:	2360      	movs	r3, #96	; 0x60
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bc8:	2204      	movs	r2, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4818      	ldr	r0, [pc, #96]	; (8000c30 <MX_TIM1_Init+0x150>)
 8000bce:	f009 f9f7 	bl	8009fc0 <HAL_TIM_PWM_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000bd8:	f000 fb82 	bl	80012e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4807      	ldr	r0, [pc, #28]	; (8000c30 <MX_TIM1_Init+0x150>)
 8000c12:	f00a f8cb 	bl	800adac <HAL_TIMEx_ConfigBreakDeadTime>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000c1c:	f000 fb60 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <MX_TIM1_Init+0x150>)
 8000c22:	f000 fc8d 	bl	8001540 <HAL_TIM_MspPostInit>

}
 8000c26:	bf00      	nop
 8000c28:	3768      	adds	r7, #104	; 0x68
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000178 	.word	0x24000178
 8000c34:	40010000 	.word	0x40010000

08000c38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c60:	22ef      	movs	r2, #239	; 0xef
 8000c62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c7e:	4814      	ldr	r0, [pc, #80]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c80:	f008 fdce 	bl	8009820 <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c8a:	f000 fb29 	bl	80012e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c9c:	f009 faa4 	bl	800a1e8 <HAL_TIM_ConfigClockSource>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ca6:	f000 fb1b 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000cb8:	f009 ffea 	bl	800ac90 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cc2:	f000 fb0d 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	3720      	adds	r7, #32
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	240001c4 	.word	0x240001c4

08000cd4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_TIM5_Init+0x94>)
 8000cf4:	4a1d      	ldr	r2, [pc, #116]	; (8000d6c <MX_TIM5_Init+0x98>)
 8000cf6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 230;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_TIM5_Init+0x94>)
 8000cfa:	22e6      	movs	r2, #230	; 0xe6
 8000cfc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_TIM5_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d04:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_TIM5_Init+0x94>)
 8000d06:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_TIM5_Init+0x94>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_TIM5_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d18:	4813      	ldr	r0, [pc, #76]	; (8000d68 <MX_TIM5_Init+0x94>)
 8000d1a:	f008 fd81 	bl	8009820 <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000d24:	f000 fadc 	bl	80012e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_TIM5_Init+0x94>)
 8000d36:	f009 fa57 	bl	800a1e8 <HAL_TIM_ConfigClockSource>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000d40:	f000 face 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_TIM5_Init+0x94>)
 8000d52:	f009 ff9d 	bl	800ac90 <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000d5c:	f000 fac0 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	24000210 	.word	0x24000210
 8000d6c:	40000c00 	.word	0x40000c00

08000d70 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_TIM13_Init+0x40>)
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <MX_TIM13_Init+0x44>)
 8000d78:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 24000-1;
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <MX_TIM13_Init+0x40>)
 8000d7c:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000d80:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_TIM13_Init+0x40>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_TIM13_Init+0x40>)
 8000d8a:	2263      	movs	r2, #99	; 0x63
 8000d8c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_TIM13_Init+0x40>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_TIM13_Init+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_TIM13_Init+0x40>)
 8000d9c:	f008 fd40 	bl	8009820 <HAL_TIM_Base_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000da6:	f000 fa9b 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2400025c 	.word	0x2400025c
 8000db4:	40001c00 	.word	0x40001c00

08000db8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dbe:	4a23      	ldr	r2, [pc, #140]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e00:	4811      	ldr	r0, [pc, #68]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000e02:	f00a f86f 	bl	800aee4 <HAL_UART_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e0c:	f000 fa68 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e10:	2100      	movs	r1, #0
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000e14:	f00b f8a2 	bl	800bf5c <HAL_UARTEx_SetTxFifoThreshold>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e1e:	f000 fa5f 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e22:	2100      	movs	r1, #0
 8000e24:	4808      	ldr	r0, [pc, #32]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000e26:	f00b f8d7 	bl	800bfd8 <HAL_UARTEx_SetRxFifoThreshold>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e30:	f000 fa56 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000e36:	f00b f858 	bl	800beea <HAL_UARTEx_DisableFifoMode>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e40:	f000 fa4e 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	240002a8 	.word	0x240002a8
 8000e4c:	40004800 	.word	0x40004800

08000e50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e54:	4b15      	ldr	r3, [pc, #84]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e56:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e5c:	2209      	movs	r2, #9
 8000e5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e6e:	2202      	movs	r2, #2
 8000e70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e98:	f005 f9ca 	bl	8006230 <HAL_PCD_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ea2:	f000 fa1d 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	24000338 	.word	0x24000338
 8000eb0:	40080000 	.word	0x40080000

08000eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <MX_DMA_Init+0x3c>)
 8000ebc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <MX_DMA_Init+0x3c>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_DMA_Init+0x3c>)
 8000ecc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	200b      	movs	r0, #11
 8000ede:	f002 fb52 	bl	8003586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ee2:	200b      	movs	r0, #11
 8000ee4:	f002 fb69 	bl	80035ba <HAL_NVIC_EnableIRQ>

}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	58024400 	.word	0x58024400

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	4b59      	ldr	r3, [pc, #356]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	4a57      	ldr	r2, [pc, #348]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1a:	4b55      	ldr	r3, [pc, #340]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f28:	4b51      	ldr	r3, [pc, #324]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	4a50      	ldr	r2, [pc, #320]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f38:	4b4d      	ldr	r3, [pc, #308]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b4a      	ldr	r3, [pc, #296]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	4a48      	ldr	r2, [pc, #288]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f56:	4b46      	ldr	r3, [pc, #280]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f64:	4b42      	ldr	r3, [pc, #264]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6a:	4a41      	ldr	r2, [pc, #260]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f74:	4b3e      	ldr	r3, [pc, #248]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f82:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	4a39      	ldr	r2, [pc, #228]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f8a:	f043 0310 	orr.w	r3, r3, #16
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f92:	4b37      	ldr	r3, [pc, #220]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	f003 0310 	and.w	r3, r3, #16
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa0:	4b33      	ldr	r3, [pc, #204]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	4a32      	ldr	r2, [pc, #200]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb0:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbe:	4b2c      	ldr	r3, [pc, #176]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a2a      	ldr	r2, [pc, #168]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b28      	ldr	r3, [pc, #160]	; (8001070 <MX_GPIO_Init+0x17c>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f244 0101 	movw	r1, #16385	; 0x4001
 8000fe2:	4824      	ldr	r0, [pc, #144]	; (8001074 <MX_GPIO_Init+0x180>)
 8000fe4:	f005 f8c2 	bl	800616c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2102      	movs	r1, #2
 8000fec:	4822      	ldr	r0, [pc, #136]	; (8001078 <MX_GPIO_Init+0x184>)
 8000fee:	f005 f8bd 	bl	800616c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ff2:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	481a      	ldr	r0, [pc, #104]	; (8001074 <MX_GPIO_Init+0x180>)
 800100c:	f004 fee6 	bl	8005ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_Wire_Pin Yellow_Wire_Pin */
  GPIO_InitStruct.Pin = Green_Wire_Pin|Yellow_Wire_Pin;
 8001010:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001016:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800101a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	4815      	ldr	r0, [pc, #84]	; (800107c <MX_GPIO_Init+0x188>)
 8001028:	f004 fed8 	bl	8005ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800102c:	2302      	movs	r3, #2
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001034:	2301      	movs	r3, #1
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_GPIO_Init+0x184>)
 8001044:	f004 feca 	bl	8005ddc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	2017      	movs	r0, #23
 800104e:	f002 fa9a 	bl	8003586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001052:	2017      	movs	r0, #23
 8001054:	f002 fab1 	bl	80035ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	2028      	movs	r0, #40	; 0x28
 800105e:	f002 fa92 	bl	8003586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001062:	2028      	movs	r0, #40	; 0x28
 8001064:	f002 faa9 	bl	80035ba <HAL_NVIC_EnableIRQ>

}
 8001068:	bf00      	nop
 800106a:	3730      	adds	r7, #48	; 0x30
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58024400 	.word	0x58024400
 8001074:	58020400 	.word	0x58020400
 8001078:	58021000 	.word	0x58021000
 800107c:	58021800 	.word	0x58021800

08001080 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	if (htim == &htim13)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a59      	ldr	r2, [pc, #356]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800108c:	4293      	cmp	r3, r2
 800108e:	f040 8098 	bne.w	80011c2 <HAL_TIM_PeriodElapsedCallback+0x142>
	{
		// Pasa a PWM (0-100) el valor leído del ADC (0-255)
		//TIM1->CCR2 = (int) adcValues[0]/255.0*100.0;

		// Pasa a RPM (0-120) el valor leído del ADC (0-255)
		reference = adcValues[0]/255.0*275.0;
 8001092:	4b58      	ldr	r3, [pc, #352]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	b29b      	uxth	r3, r3
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010a0:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 80011d0 <HAL_TIM_PeriodElapsedCallback+0x150>
 80010a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010a8:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80011d8 <HAL_TIM_PeriodElapsedCallback+0x158>
 80010ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010b4:	ee17 3a90 	vmov	r3, s15
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b4f      	ldr	r3, [pc, #316]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80010bc:	801a      	strh	r2, [r3, #0]
		// Obtiene las revoluciones por minuto del encoder del motor
		//		60000000 = 1 min en us
		//		11 = Las señales mandadas por el encoder en una revolución
		//		45 = Relación de reducción del motor
		//		time = el tiempo entre señales del encoder
		rpm = (60000000.0/(11.0*34.0*time));
 80010be:	4b4f      	ldr	r3, [pc, #316]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010ca:	ed9f 6b45 	vldr	d6, [pc, #276]	; 80011e0 <HAL_TIM_PeriodElapsedCallback+0x160>
 80010ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010d2:	ed9f 5b45 	vldr	d5, [pc, #276]	; 80011e8 <HAL_TIM_PeriodElapsedCallback+0x168>
 80010d6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010de:	ee17 3a90 	vmov	r3, s15
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	4b46      	ldr	r3, [pc, #280]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80010e6:	801a      	strh	r2, [r3, #0]

		// Control

		pkPrev = TIM1->CCR2;
 80010e8:	4b46      	ldr	r3, [pc, #280]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80010ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ec:	4a46      	ldr	r2, [pc, #280]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80010ee:	6013      	str	r3, [r2, #0]
		error = reference - rpm;
 80010f0:	4b41      	ldr	r3, [pc, #260]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b42      	ldr	r3, [pc, #264]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001104:	4b41      	ldr	r3, [pc, #260]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001106:	edc3 7a00 	vstr	s15, [r3]
		control = kp*error + ki*ts*(error + errorPrev);// + (kd/ts)*(error - errorPrev);
 800110a:	4b41      	ldr	r3, [pc, #260]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800110c:	ed93 7a00 	vldr	s14, [r3]
 8001110:	4b3e      	ldr	r3, [pc, #248]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	ee27 7a27 	vmul.f32	s14, s14, s15
 800111a:	4b3e      	ldr	r3, [pc, #248]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800111c:	edd3 6a00 	vldr	s13, [r3]
 8001120:	4b3d      	ldr	r3, [pc, #244]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800112c:	ed93 6a00 	vldr	s12, [r3]
 8001130:	4b3a      	ldr	r3, [pc, #232]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ee76 7a27 	vadd.f32	s15, s12, s15
 800113a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001142:	4b37      	ldr	r3, [pc, #220]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001144:	edc3 7a00 	vstr	s15, [r3]
		errorPrev = error;
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a33      	ldr	r2, [pc, #204]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800114e:	6013      	str	r3, [r2, #0]

		pk = pkPrev + control;
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800115c:	4b30      	ldr	r3, [pc, #192]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116a:	ee17 2a90 	vmov	r2, s15
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001170:	601a      	str	r2, [r3, #0]

		if (pk >= 100){
 8001172:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b63      	cmp	r3, #99	; 0x63
 8001178:	d903      	bls.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x102>
			TIM1->CCR2 = 100;
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800117c:	2264      	movs	r2, #100	; 0x64
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
 8001180:	e00b      	b.n	800119a <HAL_TIM_PeriodElapsedCallback+0x11a>
		}else if (pk <= 0){
 8001182:	4b28      	ldr	r3, [pc, #160]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d103      	bne.n	8001192 <HAL_TIM_PeriodElapsedCallback+0x112>
			TIM1->CCR2 = 0;
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800118c:	2200      	movs	r2, #0
 800118e:	639a      	str	r2, [r3, #56]	; 0x38
 8001190:	e003      	b.n	800119a <HAL_TIM_PeriodElapsedCallback+0x11a>
		}else{
			TIM1->CCR2 = pk;
 8001192:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6393      	str	r3, [r2, #56]	; 0x38

		//TIM1->CCR2 = (int) (2.05 + 11.5*ts*(1/(adcValues[0] - 1)) + 0.0907*(1/ts)*((adcValues[0] - 1)/adcValues[0]))/275.0*100.0


		// Número de elemento que se enviará por uart
		uart_buf_len = 4;
 800119a:	4b23      	ldr	r3, [pc, #140]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800119c:	2204      	movs	r2, #4
 800119e:	601a      	str	r2, [r3, #0]
		// Los elementos a eviar por uart
		uart_buf[0] = reference;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80011a2:	881a      	ldrh	r2, [r3, #0]
 80011a4:	4b21      	ldr	r3, [pc, #132]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80011a6:	801a      	strh	r2, [r3, #0]
		uart_buf[1] = rpm;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80011aa:	881a      	ldrh	r2, [r3, #0]
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80011ae:	805a      	strh	r2, [r3, #2]
		// Envío por por uart
		HAL_UART_Transmit(&huart3, (uint16_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	491c      	ldr	r1, [pc, #112]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80011bc:	481c      	ldr	r0, [pc, #112]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80011be:	f009 fee1 	bl	800af84 <HAL_UART_Transmit>
	}
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w
 80011d0:	00000000 	.word	0x00000000
 80011d4:	406fe000 	.word	0x406fe000
 80011d8:	00000000 	.word	0x00000000
 80011dc:	40713000 	.word	0x40713000
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40776000 	.word	0x40776000
 80011e8:	00000000 	.word	0x00000000
 80011ec:	418c9c38 	.word	0x418c9c38
 80011f0:	2400025c 	.word	0x2400025c
 80011f4:	24000844 	.word	0x24000844
 80011f8:	240008bc 	.word	0x240008bc
 80011fc:	24000848 	.word	0x24000848
 8001200:	240008be 	.word	0x240008be
 8001204:	40010000 	.word	0x40010000
 8001208:	240008d4 	.word	0x240008d4
 800120c:	240008c4 	.word	0x240008c4
 8001210:	2400000c 	.word	0x2400000c
 8001214:	24000010 	.word	0x24000010
 8001218:	24000008 	.word	0x24000008
 800121c:	240008c8 	.word	0x240008c8
 8001220:	240008c0 	.word	0x240008c0
 8001224:	240008d0 	.word	0x240008d0
 8001228:	240008b8 	.word	0x240008b8
 800122c:	24000854 	.word	0x24000854
 8001230:	240002a8 	.word	0x240002a8

08001234 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_ADC_ConvCpltCallback+0x20>)
 800123e:	f001 f8b9 	bl	80023b4 <HAL_ADC_Stop_DMA>
	// Iniciar el ADC por DMA
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcValues[0], CHANNELS);
 8001242:	2201      	movs	r2, #1
 8001244:	4904      	ldr	r1, [pc, #16]	; (8001258 <HAL_ADC_ConvCpltCallback+0x24>)
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <HAL_ADC_ConvCpltCallback+0x20>)
 8001248:	f000 fff0 	bl	800222c <HAL_ADC_Start_DMA>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2400009c 	.word	0x2400009c
 8001258:	24000844 	.word	0x24000844

0800125c <HAL_GPIO_EXTI_Callback>:

// Para medir el tiempo entre señales (time)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == Yellow_Wire_Pin)
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126c:	d125      	bne.n	80012ba <HAL_GPIO_EXTI_Callback+0x5e>
	{
		// Se guarda el estado actual de la señal
		yellowState = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_10);
 800126e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001272:	4814      	ldr	r0, [pc, #80]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x68>)
 8001274:	f004 ff62 	bl	800613c <HAL_GPIO_ReadPin>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x6c>)
 800127e:	701a      	strb	r2, [r3, #0]
		// Si el estado anterior fue flanco de bajada y el actual es flanco de subida
		if(!yellowState_1 && yellowState) {
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_GPIO_EXTI_Callback+0x70>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d114      	bne.n	80012b2 <HAL_GPIO_EXTI_Callback+0x56>
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x6c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d010      	beq.n	80012b2 <HAL_GPIO_EXTI_Callback+0x56>
			// Se guarda el tiempo actual
		    timeValue = __HAL_TIM_GET_COUNTER(&htim2);
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	461a      	mov	r2, r3
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x78>)
 800129a:	601a      	str	r2, [r3, #0]
		    // Se le resta al tiempo actual el tiempo anterior para obtener el tiempo de la señal
		    time = timeValue - timeValue_1;
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x78>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_GPIO_EXTI_Callback+0x80>)
 80012a8:	6013      	str	r3, [r2, #0]
		    // Se guarda el tiempo actual en la variable del anterior
		    timeValue_1 = timeValue;
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x78>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80012b0:	6013      	str	r3, [r2, #0]

		}
		// Se guarda el estado actual en la variable del estado anterior
		yellowState_1 = yellowState;
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x6c>)
 80012b4:	781a      	ldrb	r2, [r3, #0]
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_GPIO_EXTI_Callback+0x70>)
 80012b8:	701a      	strb	r2, [r3, #0]
	}
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	58021800 	.word	0x58021800
 80012c8:	24000846 	.word	0x24000846
 80012cc:	24000847 	.word	0x24000847
 80012d0:	240001c4 	.word	0x240001c4
 80012d4:	2400084c 	.word	0x2400084c
 80012d8:	24000850 	.word	0x24000850
 80012dc:	24000848 	.word	0x24000848

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <Error_Handler+0x8>
	...

080012ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_MspInit+0x30>)
 80012f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012f8:	4a08      	ldr	r2, [pc, #32]	; (800131c <HAL_MspInit+0x30>)
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_MspInit+0x30>)
 8001304:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	58024400 	.word	0x58024400

08001320 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0b8      	sub	sp, #224	; 0xe0
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	22bc      	movs	r2, #188	; 0xbc
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f00b fa09 	bl	800c758 <memset>
  if(hadc->Instance==ADC1)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a42      	ldr	r2, [pc, #264]	; (8001454 <HAL_ADC_MspInit+0x134>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d17d      	bne.n	800144c <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001350:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001354:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 800135a:	2312      	movs	r3, #18
 800135c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 800135e:	2301      	movs	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001362:	2302      	movs	r3, #2
 8001364:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001366:	2302      	movs	r3, #2
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800136a:	23c0      	movs	r3, #192	; 0xc0
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800136e:	2320      	movs	r3, #32
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8001372:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4618      	mov	r0, r3
 8001384:	f006 f8c0 	bl	8007508 <HAL_RCCEx_PeriphCLKConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 800138e:	f7ff ffa7 	bl	80012e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001392:	4b31      	ldr	r3, [pc, #196]	; (8001458 <HAL_ADC_MspInit+0x138>)
 8001394:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001398:	4a2f      	ldr	r2, [pc, #188]	; (8001458 <HAL_ADC_MspInit+0x138>)
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_ADC_MspInit+0x138>)
 80013a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013a8:	f003 0320 	and.w	r3, r3, #32
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_ADC_MspInit+0x138>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	4a28      	ldr	r2, [pc, #160]	; (8001458 <HAL_ADC_MspInit+0x138>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c0:	4b25      	ldr	r3, [pc, #148]	; (8001458 <HAL_ADC_MspInit+0x138>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013ce:	2308      	movs	r3, #8
 80013d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d4:	2303      	movs	r3, #3
 80013d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e4:	4619      	mov	r1, r3
 80013e6:	481d      	ldr	r0, [pc, #116]	; (800145c <HAL_ADC_MspInit+0x13c>)
 80013e8:	f004 fcf8 	bl	8005ddc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_ADC_MspInit+0x140>)
 80013ee:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_ADC_MspInit+0x144>)
 80013f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_ADC_MspInit+0x140>)
 80013f4:	2209      	movs	r2, #9
 80013f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_ADC_MspInit+0x140>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_ADC_MspInit+0x140>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_ADC_MspInit+0x140>)
 8001406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800140a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_ADC_MspInit+0x140>)
 800140e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001412:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_ADC_MspInit+0x140>)
 8001416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800141a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_ADC_MspInit+0x140>)
 800141e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001422:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_ADC_MspInit+0x140>)
 8001426:	2200      	movs	r2, #0
 8001428:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_ADC_MspInit+0x140>)
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <HAL_ADC_MspInit+0x140>)
 8001432:	f002 f8dd 	bl	80035f0 <HAL_DMA_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 800143c:	f7ff ff50 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_ADC_MspInit+0x140>)
 8001444:	64da      	str	r2, [r3, #76]	; 0x4c
 8001446:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_ADC_MspInit+0x140>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800144c:	bf00      	nop
 800144e:	37e0      	adds	r7, #224	; 0xe0
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40022000 	.word	0x40022000
 8001458:	58024400 	.word	0x58024400
 800145c:	58020000 	.word	0x58020000
 8001460:	24000100 	.word	0x24000100
 8001464:	40020010 	.word	0x40020010

08001468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a2e      	ldr	r2, [pc, #184]	; (8001530 <HAL_TIM_Base_MspInit+0xc8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10f      	bne.n	800149a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147a:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <HAL_TIM_Base_MspInit+0xcc>)
 800147c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001480:	4a2c      	ldr	r2, [pc, #176]	; (8001534 <HAL_TIM_Base_MspInit+0xcc>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <HAL_TIM_Base_MspInit+0xcc>)
 800148c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001498:	e045      	b.n	8001526 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a2:	d10f      	bne.n	80014c4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a4:	4b23      	ldr	r3, [pc, #140]	; (8001534 <HAL_TIM_Base_MspInit+0xcc>)
 80014a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014aa:	4a22      	ldr	r2, [pc, #136]	; (8001534 <HAL_TIM_Base_MspInit+0xcc>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <HAL_TIM_Base_MspInit+0xcc>)
 80014b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
}
 80014c2:	e030      	b.n	8001526 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM5)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1b      	ldr	r2, [pc, #108]	; (8001538 <HAL_TIM_Base_MspInit+0xd0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d10f      	bne.n	80014ee <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_TIM_Base_MspInit+0xcc>)
 80014d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014d4:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_TIM_Base_MspInit+0xcc>)
 80014d6:	f043 0308 	orr.w	r3, r3, #8
 80014da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_TIM_Base_MspInit+0xcc>)
 80014e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	e01b      	b.n	8001526 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM13)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <HAL_TIM_Base_MspInit+0xd4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d116      	bne.n	8001526 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_TIM_Base_MspInit+0xcc>)
 80014fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014fe:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <HAL_TIM_Base_MspInit+0xcc>)
 8001500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001504:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_TIM_Base_MspInit+0xcc>)
 800150a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800150e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	202c      	movs	r0, #44	; 0x2c
 800151c:	f002 f833 	bl	8003586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001520:	202c      	movs	r0, #44	; 0x2c
 8001522:	f002 f84a 	bl	80035ba <HAL_NVIC_EnableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40010000 	.word	0x40010000
 8001534:	58024400 	.word	0x58024400
 8001538:	40000c00 	.word	0x40000c00
 800153c:	40001c00 	.word	0x40001c00

08001540 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a13      	ldr	r2, [pc, #76]	; (80015ac <HAL_TIM_MspPostInit+0x6c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d11f      	bne.n	80015a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_TIM_MspPostInit+0x70>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <HAL_TIM_MspPostInit+0x70>)
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_TIM_MspPostInit+0x70>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	f003 0310 	and.w	r3, r3, #16
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001584:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001592:	2301      	movs	r3, #1
 8001594:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <HAL_TIM_MspPostInit+0x74>)
 800159e:	f004 fc1d 	bl	8005ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015a2:	bf00      	nop
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40010000 	.word	0x40010000
 80015b0:	58024400 	.word	0x58024400
 80015b4:	58021000 	.word	0x58021000

080015b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b0b8      	sub	sp, #224	; 0xe0
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	22bc      	movs	r2, #188	; 0xbc
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f00b f8bd 	bl	800c758 <memset>
  if(huart->Instance==USART3)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a25      	ldr	r2, [pc, #148]	; (8001678 <HAL_UART_MspInit+0xc0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d142      	bne.n	800166e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015e8:	2302      	movs	r3, #2
 80015ea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	4618      	mov	r0, r3
 80015f8:	f005 ff86 	bl	8007508 <HAL_RCCEx_PeriphCLKConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001602:	f7ff fe6d 	bl	80012e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <HAL_UART_MspInit+0xc4>)
 8001608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <HAL_UART_MspInit+0xc4>)
 800160e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001612:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_UART_MspInit+0xc4>)
 8001618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800161c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_UART_MspInit+0xc4>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162a:	4a14      	ldr	r2, [pc, #80]	; (800167c <HAL_UART_MspInit+0xc4>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_UART_MspInit+0xc4>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001646:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800165c:	2307      	movs	r3, #7
 800165e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001662:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <HAL_UART_MspInit+0xc8>)
 800166a:	f004 fbb7 	bl	8005ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	37e0      	adds	r7, #224	; 0xe0
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40004800 	.word	0x40004800
 800167c:	58024400 	.word	0x58024400
 8001680:	58020c00 	.word	0x58020c00

08001684 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b0b8      	sub	sp, #224	; 0xe0
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	22bc      	movs	r2, #188	; 0xbc
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f00b f857 	bl	800c758 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a37      	ldr	r2, [pc, #220]	; (800178c <HAL_PCD_MspInit+0x108>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d166      	bne.n	8001782 <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80016ba:	2301      	movs	r3, #1
 80016bc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80016be:	2312      	movs	r3, #18
 80016c0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80016c6:	2303      	movs	r3, #3
 80016c8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80016ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016d2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80016d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016d8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80016da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e2:	f107 0310 	add.w	r3, r7, #16
 80016e6:	4618      	mov	r0, r3
 80016e8:	f005 ff0e 	bl	8007508 <HAL_RCCEx_PeriphCLKConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 80016f2:	f7ff fdf5 	bl	80012e0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80016f6:	f004 ff3d 	bl	8006574 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_PCD_MspInit+0x10c>)
 80016fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001700:	4a23      	ldr	r2, [pc, #140]	; (8001790 <HAL_PCD_MspInit+0x10c>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <HAL_PCD_MspInit+0x10c>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001718:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800171c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001732:	230a      	movs	r3, #10
 8001734:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800173c:	4619      	mov	r1, r3
 800173e:	4815      	ldr	r0, [pc, #84]	; (8001794 <HAL_PCD_MspInit+0x110>)
 8001740:	f004 fb4c 	bl	8005ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800175c:	4619      	mov	r1, r3
 800175e:	480d      	ldr	r0, [pc, #52]	; (8001794 <HAL_PCD_MspInit+0x110>)
 8001760:	f004 fb3c 	bl	8005ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_PCD_MspInit+0x10c>)
 8001766:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800176a:	4a09      	ldr	r2, [pc, #36]	; (8001790 <HAL_PCD_MspInit+0x10c>)
 800176c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001770:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_PCD_MspInit+0x10c>)
 8001776:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800177a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001782:	bf00      	nop
 8001784:	37e0      	adds	r7, #224	; 0xe0
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40080000 	.word	0x40080000
 8001790:	58024400 	.word	0x58024400
 8001794:	58020000 	.word	0x58020000

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e4:	f000 f8f8 	bl	80019d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <DMA1_Stream0_IRQHandler+0x10>)
 80017f2:	f002 ffe1 	bl	80047b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	24000100 	.word	0x24000100

08001800 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Green_Wire_Pin);
 8001804:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001808:	f004 fcc9 	bl	800619e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Yellow_Wire_Pin);
 8001814:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001818:	f004 fcc1 	bl	800619e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}

08001820 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001826:	f008 faab 	bl	8009d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2400025c 	.word	0x2400025c

08001834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <_sbrk+0x5c>)
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <_sbrk+0x60>)
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <_sbrk+0x64>)
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <_sbrk+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	429a      	cmp	r2, r3
 8001862:	d207      	bcs.n	8001874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001864:	f00a ff4e 	bl	800c704 <__errno>
 8001868:	4603      	mov	r3, r0
 800186a:	220c      	movs	r2, #12
 800186c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	e009      	b.n	8001888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <_sbrk+0x64>)
 8001884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001886:	68fb      	ldr	r3, [r7, #12]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	24080000 	.word	0x24080000
 8001894:	00000400 	.word	0x00000400
 8001898:	240008d8 	.word	0x240008d8
 800189c:	240008f0 	.word	0x240008f0

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018a4:	f7fe feee 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018aa:	490d      	ldr	r1, [pc, #52]	; (80018e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c0:	4c0a      	ldr	r4, [pc, #40]	; (80018ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ce:	f00a ff1f 	bl	800c710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7fe ff6d 	bl	80007b0 <main>
  bx  lr
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018e0:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 80018e4:	0800d0f0 	.word	0x0800d0f0
  ldr r2, =_sbss
 80018e8:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80018ec:	240008f0 	.word	0x240008f0

080018f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC3_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fa:	2003      	movs	r0, #3
 80018fc:	f001 fe38 	bl	8003570 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001900:	f005 fc2c 	bl	800715c <HAL_RCC_GetSysClockFreq>
 8001904:	4602      	mov	r2, r0
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_Init+0x68>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	4913      	ldr	r1, [pc, #76]	; (8001960 <HAL_Init+0x6c>)
 8001912:	5ccb      	ldrb	r3, [r1, r3]
 8001914:	f003 031f 	and.w	r3, r3, #31
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_Init+0x68>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_Init+0x6c>)
 8001928:	5cd3      	ldrb	r3, [r2, r3]
 800192a:	f003 031f 	and.w	r3, r3, #31
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
 8001934:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <HAL_Init+0x70>)
 8001936:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001938:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_Init+0x74>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800193e:	2000      	movs	r0, #0
 8001940:	f000 f814 	bl	800196c <HAL_InitTick>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e002      	b.n	8001954 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800194e:	f7ff fccd 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	58024400 	.word	0x58024400
 8001960:	0800d06c 	.word	0x0800d06c
 8001964:	24000004 	.word	0x24000004
 8001968:	24000000 	.word	0x24000000

0800196c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_InitTick+0x60>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e021      	b.n	80019c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_InitTick+0x64>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_InitTick+0x60>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f001 fe1d 	bl	80035d6 <HAL_SYSTICK_Config>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00e      	b.n	80019c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b0f      	cmp	r3, #15
 80019aa:	d80a      	bhi.n	80019c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ac:	2200      	movs	r2, #0
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f001 fde7 	bl	8003586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b8:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <HAL_InitTick+0x68>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e000      	b.n	80019c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	24000018 	.word	0x24000018
 80019d0:	24000000 	.word	0x24000000
 80019d4:	24000014 	.word	0x24000014

080019d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	; (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	24000018 	.word	0x24000018
 80019fc:	240008dc 	.word	0x240008dc

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	240008dc 	.word	0x240008dc

08001a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff ffee 	bl	8001a00 <HAL_GetTick>
 8001a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a30:	d005      	beq.n	8001a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_Delay+0x44>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a3e:	bf00      	nop
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d8f7      	bhi.n	8001a40 <HAL_Delay+0x28>
  {
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	24000018 	.word	0x24000018

08001a60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_GetREVID+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0c1b      	lsrs	r3, r3, #16
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	5c001000 	.word	0x5c001000

08001a78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	609a      	str	r2, [r3, #8]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3360      	adds	r3, #96	; 0x60
 8001af2:	461a      	mov	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001b14:	bf00      	nop
 8001b16:	371c      	adds	r7, #28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	431a      	orrs	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	611a      	str	r2, [r3, #16]
}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b087      	sub	sp, #28
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3360      	adds	r3, #96	; 0x60
 8001b62:	461a      	mov	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	601a      	str	r2, [r3, #0]
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b087      	sub	sp, #28
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3330      	adds	r3, #48	; 0x30
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	4413      	add	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	211f      	movs	r1, #31
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	401a      	ands	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	0e9b      	lsrs	r3, r3, #26
 8001be6:	f003 011f 	and.w	r1, r3, #31
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bfa:	bf00      	nop
 8001bfc:	371c      	adds	r7, #28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f023 0203 	bic.w	r2, r3, #3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	60da      	str	r2, [r3, #12]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3314      	adds	r3, #20
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	0e5b      	lsrs	r3, r3, #25
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	4413      	add	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	0d1b      	lsrs	r3, r3, #20
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	2107      	movs	r1, #7
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	401a      	ands	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	0d1b      	lsrs	r3, r3, #20
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	431a      	orrs	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c76:	bf00      	nop
 8001c78:	371c      	adds	r7, #28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0318 	and.w	r3, r3, #24
 8001ca6:	4908      	ldr	r1, [pc, #32]	; (8001cc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ca8:	40d9      	lsrs	r1, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	400b      	ands	r3, r1
 8001cae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	000fffff 	.word	0x000fffff

08001ccc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 031f 	and.w	r3, r3, #31
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6093      	str	r3, [r2, #8]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	5fffffc0 	.word	0x5fffffc0

08001d0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d20:	d101      	bne.n	8001d26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <LL_ADC_EnableInternalRegulator+0x24>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	6fffffc0 	.word	0x6fffffc0

08001d5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d70:	d101      	bne.n	8001d76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <LL_ADC_Enable+0x24>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	f043 0201 	orr.w	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	7fffffc0 	.word	0x7fffffc0

08001dac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <LL_ADC_Disable+0x24>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	f043 0202 	orr.w	r2, r3, #2
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	7fffffc0 	.word	0x7fffffc0

08001dd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <LL_ADC_IsEnabled+0x18>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <LL_ADC_IsEnabled+0x1a>
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d101      	bne.n	8001e12 <LL_ADC_IsDisableOngoing+0x18>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <LL_ADC_IsDisableOngoing+0x1a>
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <LL_ADC_REG_StartConversion+0x24>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	f043 0204 	orr.w	r2, r3, #4
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	7fffffc0 	.word	0x7fffffc0

08001e48 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <LL_ADC_REG_StopConversion+0x24>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	f043 0210 	orr.w	r2, r3, #16
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	7fffffc0 	.word	0x7fffffc0

08001e70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d101      	bne.n	8001e88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <LL_ADC_INJ_StopConversion+0x24>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	f043 0220 	orr.w	r2, r3, #32
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	7fffffc0 	.word	0x7fffffc0

08001ec0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d101      	bne.n	8001ed8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e18f      	b.n	8002222 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fa05 	bl	8001320 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff feef 	bl	8001d0c <LL_ADC_IsDeepPowerDownEnabled>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fed5 	bl	8001ce8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff0a 	bl	8001d5c <LL_ADC_IsInternalRegulatorEnabled>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d114      	bne.n	8001f78 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff feee 	bl	8001d34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f58:	4b87      	ldr	r3, [pc, #540]	; (8002178 <HAL_ADC_Init+0x290>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	4a87      	ldr	r2, [pc, #540]	; (800217c <HAL_ADC_Init+0x294>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	3301      	adds	r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f6a:	e002      	b.n	8001f72 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f9      	bne.n	8001f6c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff feed 	bl	8001d5c <LL_ADC_IsInternalRegulatorEnabled>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10d      	bne.n	8001fa4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8c:	f043 0210 	orr.w	r2, r3, #16
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	f043 0201 	orr.w	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff61 	bl	8001e70 <LL_ADC_REG_IsConversionOngoing>
 8001fae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f040 8129 	bne.w	8002210 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f040 8125 	bne.w	8002210 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fce:	f043 0202 	orr.w	r2, r3, #2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fefa 	bl	8001dd4 <LL_ADC_IsEnabled>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d136      	bne.n	8002054 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a65      	ldr	r2, [pc, #404]	; (8002180 <HAL_ADC_Init+0x298>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d004      	beq.n	8001ffa <HAL_ADC_Init+0x112>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a63      	ldr	r2, [pc, #396]	; (8002184 <HAL_ADC_Init+0x29c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d10e      	bne.n	8002018 <HAL_ADC_Init+0x130>
 8001ffa:	4861      	ldr	r0, [pc, #388]	; (8002180 <HAL_ADC_Init+0x298>)
 8001ffc:	f7ff feea 	bl	8001dd4 <LL_ADC_IsEnabled>
 8002000:	4604      	mov	r4, r0
 8002002:	4860      	ldr	r0, [pc, #384]	; (8002184 <HAL_ADC_Init+0x29c>)
 8002004:	f7ff fee6 	bl	8001dd4 <LL_ADC_IsEnabled>
 8002008:	4603      	mov	r3, r0
 800200a:	4323      	orrs	r3, r4
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e008      	b.n	800202a <HAL_ADC_Init+0x142>
 8002018:	485b      	ldr	r0, [pc, #364]	; (8002188 <HAL_ADC_Init+0x2a0>)
 800201a:	f7ff fedb 	bl	8001dd4 <LL_ADC_IsEnabled>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d012      	beq.n	8002054 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a53      	ldr	r2, [pc, #332]	; (8002180 <HAL_ADC_Init+0x298>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d004      	beq.n	8002042 <HAL_ADC_Init+0x15a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a51      	ldr	r2, [pc, #324]	; (8002184 <HAL_ADC_Init+0x29c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_ADC_Init+0x15e>
 8002042:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_ADC_Init+0x2a4>)
 8002044:	e000      	b.n	8002048 <HAL_ADC_Init+0x160>
 8002046:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_ADC_Init+0x2a8>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4619      	mov	r1, r3
 800204e:	4610      	mov	r0, r2
 8002050:	f7ff fd12 	bl	8001a78 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002054:	f7ff fd04 	bl	8001a60 <HAL_GetREVID>
 8002058:	4603      	mov	r3, r0
 800205a:	f241 0203 	movw	r2, #4099	; 0x1003
 800205e:	4293      	cmp	r3, r2
 8002060:	d914      	bls.n	800208c <HAL_ADC_Init+0x1a4>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b10      	cmp	r3, #16
 8002068:	d110      	bne.n	800208c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7d5b      	ldrb	r3, [r3, #21]
 800206e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002074:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800207a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7f1b      	ldrb	r3, [r3, #28]
 8002080:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002082:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002084:	f043 030c 	orr.w	r3, r3, #12
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	e00d      	b.n	80020a8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7d5b      	ldrb	r3, [r3, #21]
 8002090:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002096:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800209c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7f1b      	ldrb	r3, [r3, #28]
 80020a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7f1b      	ldrb	r3, [r3, #28]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d106      	bne.n	80020be <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	045b      	lsls	r3, r3, #17
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	4b2c      	ldr	r3, [pc, #176]	; (8002194 <HAL_ADC_Init+0x2ac>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	69b9      	ldr	r1, [r7, #24]
 80020ea:	430b      	orrs	r3, r1
 80020ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff febc 	bl	8001e70 <LL_ADC_REG_IsConversionOngoing>
 80020f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fede 	bl	8001ec0 <LL_ADC_INJ_IsConversionOngoing>
 8002104:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d15f      	bne.n	80021cc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d15c      	bne.n	80021cc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7d1b      	ldrb	r3, [r3, #20]
 8002116:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <HAL_ADC_Init+0x2b0>)
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	69b9      	ldr	r1, [r7, #24]
 8002130:	430b      	orrs	r3, r1
 8002132:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800213a:	2b01      	cmp	r3, #1
 800213c:	d130      	bne.n	80021a0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_ADC_Init+0x2b4>)
 800214c:	4013      	ands	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002152:	3a01      	subs	r2, #1
 8002154:	0411      	lsls	r1, r2, #16
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800215a:	4311      	orrs	r1, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002160:	4311      	orrs	r1, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002166:	430a      	orrs	r2, r1
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	611a      	str	r2, [r3, #16]
 8002174:	e01c      	b.n	80021b0 <HAL_ADC_Init+0x2c8>
 8002176:	bf00      	nop
 8002178:	24000000 	.word	0x24000000
 800217c:	053e2d63 	.word	0x053e2d63
 8002180:	40022000 	.word	0x40022000
 8002184:	40022100 	.word	0x40022100
 8002188:	58026000 	.word	0x58026000
 800218c:	40022300 	.word	0x40022300
 8002190:	58026300 	.word	0x58026300
 8002194:	fff0c003 	.word	0xfff0c003
 8002198:	ffffbffc 	.word	0xffffbffc
 800219c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fef4 	bl	8002fb4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d10c      	bne.n	80021ee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f023 010f 	bic.w	r1, r3, #15
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	1e5a      	subs	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
 80021ec:	e007      	b.n	80021fe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 020f 	bic.w	r2, r2, #15
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f023 0303 	bic.w	r3, r3, #3
 8002206:	f043 0201 	orr.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
 800220e:	e007      	b.n	8002220 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	f043 0210 	orr.w	r2, r3, #16
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002220:	7ffb      	ldrb	r3, [r7, #31]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd90      	pop	{r4, r7, pc}
 800222a:	bf00      	nop

0800222c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a55      	ldr	r2, [pc, #340]	; (8002394 <HAL_ADC_Start_DMA+0x168>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d004      	beq.n	800224c <HAL_ADC_Start_DMA+0x20>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a54      	ldr	r2, [pc, #336]	; (8002398 <HAL_ADC_Start_DMA+0x16c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d101      	bne.n	8002250 <HAL_ADC_Start_DMA+0x24>
 800224c:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_ADC_Start_DMA+0x170>)
 800224e:	e000      	b.n	8002252 <HAL_ADC_Start_DMA+0x26>
 8002250:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_ADC_Start_DMA+0x174>)
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fd3a 	bl	8001ccc <LL_ADC_GetMultimode>
 8002258:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fe06 	bl	8001e70 <LL_ADC_REG_IsConversionOngoing>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 808c 	bne.w	8002384 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_ADC_Start_DMA+0x4e>
 8002276:	2302      	movs	r3, #2
 8002278:	e087      	b.n	800238a <HAL_ADC_Start_DMA+0x15e>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b05      	cmp	r3, #5
 800228c:	d002      	beq.n	8002294 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b09      	cmp	r3, #9
 8002292:	d170      	bne.n	8002376 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fd0f 	bl	8002cb8 <ADC_Enable>
 800229a:	4603      	mov	r3, r0
 800229c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800229e:	7dfb      	ldrb	r3, [r7, #23]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d163      	bne.n	800236c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022a8:	4b3e      	ldr	r3, [pc, #248]	; (80023a4 <HAL_ADC_Start_DMA+0x178>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a37      	ldr	r2, [pc, #220]	; (8002398 <HAL_ADC_Start_DMA+0x16c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d002      	beq.n	80022c4 <HAL_ADC_Start_DMA+0x98>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	e000      	b.n	80022c6 <HAL_ADC_Start_DMA+0x9a>
 80022c4:	4b33      	ldr	r3, [pc, #204]	; (8002394 <HAL_ADC_Start_DMA+0x168>)
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d002      	beq.n	80022d4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	f023 0206 	bic.w	r2, r3, #6
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	659a      	str	r2, [r3, #88]	; 0x58
 80022f8:	e002      	b.n	8002300 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002304:	4a28      	ldr	r2, [pc, #160]	; (80023a8 <HAL_ADC_Start_DMA+0x17c>)
 8002306:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230c:	4a27      	ldr	r2, [pc, #156]	; (80023ac <HAL_ADC_Start_DMA+0x180>)
 800230e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002314:	4a26      	ldr	r2, [pc, #152]	; (80023b0 <HAL_ADC_Start_DMA+0x184>)
 8002316:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	221c      	movs	r2, #28
 800231e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0210 	orr.w	r2, r2, #16
 8002336:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	4619      	mov	r1, r3
 8002342:	4610      	mov	r0, r2
 8002344:	f7ff fc5f 	bl	8001c06 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3340      	adds	r3, #64	; 0x40
 8002352:	4619      	mov	r1, r3
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f001 fca6 	bl	8003ca8 <HAL_DMA_Start_IT>
 800235c:	4603      	mov	r3, r0
 800235e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fd5b 	bl	8001e20 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800236a:	e00d      	b.n	8002388 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002374:	e008      	b.n	8002388 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002382:	e001      	b.n	8002388 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002384:	2302      	movs	r3, #2
 8002386:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002388:	7dfb      	ldrb	r3, [r7, #23]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40022000 	.word	0x40022000
 8002398:	40022100 	.word	0x40022100
 800239c:	40022300 	.word	0x40022300
 80023a0:	58026300 	.word	0x58026300
 80023a4:	fffff0fe 	.word	0xfffff0fe
 80023a8:	08002e8b 	.word	0x08002e8b
 80023ac:	08002f63 	.word	0x08002f63
 80023b0:	08002f7f 	.word	0x08002f7f

080023b4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_Stop_DMA+0x16>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e04f      	b.n	800246a <HAL_ADC_Stop_DMA+0xb6>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80023d2:	2103      	movs	r1, #3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fbb3 	bl	8002b40 <ADC_ConversionStop>
 80023da:	4603      	mov	r3, r0
 80023dc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d13d      	bne.n	8002460 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0203 	bic.w	r2, r2, #3
 80023f2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d10f      	bne.n	8002422 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	4618      	mov	r0, r3
 8002408:	f001 feb8 	bl	800417c <HAL_DMA_Abort>
 800240c:	4603      	mov	r3, r0
 800240e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0210 	bic.w	r2, r2, #16
 8002430:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d105      	bne.n	8002444 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 fcc7 	bl	8002dcc <ADC_Disable>
 800243e:	4603      	mov	r3, r0
 8002440:	73fb      	strb	r3, [r7, #15]
 8002442:	e002      	b.n	800244a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fcc1 	bl	8002dcc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d107      	bne.n	8002460 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <HAL_ADC_Stop_DMA+0xc0>)
 8002456:	4013      	ands	r3, r2
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	ffffeefe 	.word	0xffffeefe

08002478 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b0a1      	sub	sp, #132	; 0x84
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a9d      	ldr	r2, [pc, #628]	; (8002730 <HAL_ADC_ConfigChannel+0x290>)
 80024ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x2a>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e321      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x66e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fcca 	bl	8001e70 <LL_ADC_REG_IsConversionOngoing>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 8306 	bne.w	8002af0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d108      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x62>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2201      	movs	r2, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	e016      	b.n	8002530 <HAL_ADC_ConfigChannel+0x90>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002512:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800251a:	2320      	movs	r3, #32
 800251c:	e003      	b.n	8002526 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800251e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2201      	movs	r2, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	69d1      	ldr	r1, [r2, #28]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	430b      	orrs	r3, r1
 800253c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	f7ff fb2f 	bl	8001bae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fc8b 	bl	8001e70 <LL_ADC_REG_IsConversionOngoing>
 800255a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fcad 	bl	8001ec0 <LL_ADC_INJ_IsConversionOngoing>
 8002566:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 80b3 	bne.w	80026d6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 80af 	bne.w	80026d6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6819      	ldr	r1, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	461a      	mov	r2, r3
 8002586:	f7ff fb51 	bl	8001c2c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800258a:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_ADC_ConfigChannel+0x294>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002596:	d10b      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x110>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	e01d      	b.n	80025ec <HAL_ADC_ConfigChannel+0x14c>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10b      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x136>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	e00a      	b.n	80025ec <HAL_ADC_ConfigChannel+0x14c>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d027      	beq.n	8002646 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6919      	ldr	r1, [r3, #16]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002604:	f7ff fa6c 	bl	8001ae0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6919      	ldr	r1, [r3, #16]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	7e5b      	ldrb	r3, [r3, #25]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d102      	bne.n	800261e <HAL_ADC_ConfigChannel+0x17e>
 8002618:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800261c:	e000      	b.n	8002620 <HAL_ADC_ConfigChannel+0x180>
 800261e:	2300      	movs	r3, #0
 8002620:	461a      	mov	r2, r3
 8002622:	f7ff fa96 	bl	8001b52 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6919      	ldr	r1, [r3, #16]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	7e1b      	ldrb	r3, [r3, #24]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d102      	bne.n	800263c <HAL_ADC_ConfigChannel+0x19c>
 8002636:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800263a:	e000      	b.n	800263e <HAL_ADC_ConfigChannel+0x19e>
 800263c:	2300      	movs	r3, #0
 800263e:	461a      	mov	r2, r3
 8002640:	f7ff fa6e 	bl	8001b20 <LL_ADC_SetDataRightShift>
 8002644:	e047      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	069b      	lsls	r3, r3, #26
 8002656:	429a      	cmp	r2, r3
 8002658:	d107      	bne.n	800266a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002668:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002670:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	069b      	lsls	r3, r3, #26
 800267a:	429a      	cmp	r2, r3
 800267c:	d107      	bne.n	800268e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800268c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002694:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	069b      	lsls	r3, r3, #26
 800269e:	429a      	cmp	r2, r3
 80026a0:	d107      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026b0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	069b      	lsls	r3, r3, #26
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d107      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026d4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fb7a 	bl	8001dd4 <LL_ADC_IsEnabled>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 820d 	bne.w	8002b02 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6819      	ldr	r1, [r3, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	461a      	mov	r2, r3
 80026f6:	f7ff fac5 	bl	8001c84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	4a0c      	ldr	r2, [pc, #48]	; (8002730 <HAL_ADC_ConfigChannel+0x290>)
 8002700:	4293      	cmp	r3, r2
 8002702:	f040 8133 	bne.w	800296c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002712:	2b00      	cmp	r3, #0
 8002714:	d110      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x298>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	0e9b      	lsrs	r3, r3, #26
 800271c:	3301      	adds	r3, #1
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	2b09      	cmp	r3, #9
 8002724:	bf94      	ite	ls
 8002726:	2301      	movls	r3, #1
 8002728:	2300      	movhi	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	e01e      	b.n	800276c <HAL_ADC_ConfigChannel+0x2cc>
 800272e:	bf00      	nop
 8002730:	47ff0000 	.word	0x47ff0000
 8002734:	5c001000 	.word	0x5c001000
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002748:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800274a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002750:	2320      	movs	r3, #32
 8002752:	e003      	b.n	800275c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	3301      	adds	r3, #1
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	2b09      	cmp	r3, #9
 8002764:	bf94      	ite	ls
 8002766:	2301      	movls	r3, #1
 8002768:	2300      	movhi	r3, #0
 800276a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800276c:	2b00      	cmp	r3, #0
 800276e:	d079      	beq.n	8002864 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002778:	2b00      	cmp	r3, #0
 800277a:	d107      	bne.n	800278c <HAL_ADC_ConfigChannel+0x2ec>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0e9b      	lsrs	r3, r3, #26
 8002782:	3301      	adds	r3, #1
 8002784:	069b      	lsls	r3, r3, #26
 8002786:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800278a:	e015      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x318>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800279a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800279c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800279e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80027a4:	2320      	movs	r3, #32
 80027a6:	e003      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80027a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	3301      	adds	r3, #1
 80027b2:	069b      	lsls	r3, r3, #26
 80027b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x338>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0e9b      	lsrs	r3, r3, #26
 80027ca:	3301      	adds	r3, #1
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	2101      	movs	r1, #1
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	e017      	b.n	8002808 <HAL_ADC_ConfigChannel+0x368>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80027e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80027ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80027f0:	2320      	movs	r3, #32
 80027f2:	e003      	b.n	80027fc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80027f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	2101      	movs	r1, #1
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	ea42 0103 	orr.w	r1, r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <HAL_ADC_ConfigChannel+0x38e>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0e9b      	lsrs	r3, r3, #26
 800281e:	3301      	adds	r3, #1
 8002820:	f003 021f 	and.w	r2, r3, #31
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	051b      	lsls	r3, r3, #20
 800282c:	e018      	b.n	8002860 <HAL_ADC_ConfigChannel+0x3c0>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002846:	2320      	movs	r3, #32
 8002848:	e003      	b.n	8002852 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	3301      	adds	r3, #1
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002860:	430b      	orrs	r3, r1
 8002862:	e07e      	b.n	8002962 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800286c:	2b00      	cmp	r3, #0
 800286e:	d107      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x3e0>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0e9b      	lsrs	r3, r3, #26
 8002876:	3301      	adds	r3, #1
 8002878:	069b      	lsls	r3, r3, #26
 800287a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800287e:	e015      	b.n	80028ac <HAL_ADC_ConfigChannel+0x40c>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002898:	2320      	movs	r3, #32
 800289a:	e003      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	3301      	adds	r3, #1
 80028a6:	069b      	lsls	r3, r3, #26
 80028a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x42c>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	3301      	adds	r3, #1
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	2101      	movs	r1, #1
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	e017      	b.n	80028fc <HAL_ADC_ConfigChannel+0x45c>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	61bb      	str	r3, [r7, #24]
  return result;
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80028e4:	2320      	movs	r3, #32
 80028e6:	e003      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	3301      	adds	r3, #1
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	ea42 0103 	orr.w	r1, r2, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10d      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x488>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	0e9b      	lsrs	r3, r3, #26
 8002912:	3301      	adds	r3, #1
 8002914:	f003 021f 	and.w	r2, r3, #31
 8002918:	4613      	mov	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	3b1e      	subs	r3, #30
 8002920:	051b      	lsls	r3, r3, #20
 8002922:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002926:	e01b      	b.n	8002960 <HAL_ADC_ConfigChannel+0x4c0>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	60fb      	str	r3, [r7, #12]
  return result;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002940:	2320      	movs	r3, #32
 8002942:	e003      	b.n	800294c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3301      	adds	r3, #1
 800294e:	f003 021f 	and.w	r2, r3, #31
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	3b1e      	subs	r3, #30
 800295a:	051b      	lsls	r3, r3, #20
 800295c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002960:	430b      	orrs	r3, r1
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	6892      	ldr	r2, [r2, #8]
 8002966:	4619      	mov	r1, r3
 8002968:	f7ff f960 	bl	8001c2c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f280 80c6 	bge.w	8002b02 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a67      	ldr	r2, [pc, #412]	; (8002b18 <HAL_ADC_ConfigChannel+0x678>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d004      	beq.n	800298a <HAL_ADC_ConfigChannel+0x4ea>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a65      	ldr	r2, [pc, #404]	; (8002b1c <HAL_ADC_ConfigChannel+0x67c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d101      	bne.n	800298e <HAL_ADC_ConfigChannel+0x4ee>
 800298a:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_ADC_ConfigChannel+0x680>)
 800298c:	e000      	b.n	8002990 <HAL_ADC_ConfigChannel+0x4f0>
 800298e:	4b65      	ldr	r3, [pc, #404]	; (8002b24 <HAL_ADC_ConfigChannel+0x684>)
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff f897 	bl	8001ac4 <LL_ADC_GetCommonPathInternalCh>
 8002996:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a5e      	ldr	r2, [pc, #376]	; (8002b18 <HAL_ADC_ConfigChannel+0x678>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d004      	beq.n	80029ac <HAL_ADC_ConfigChannel+0x50c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a5d      	ldr	r2, [pc, #372]	; (8002b1c <HAL_ADC_ConfigChannel+0x67c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d10e      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x52a>
 80029ac:	485a      	ldr	r0, [pc, #360]	; (8002b18 <HAL_ADC_ConfigChannel+0x678>)
 80029ae:	f7ff fa11 	bl	8001dd4 <LL_ADC_IsEnabled>
 80029b2:	4604      	mov	r4, r0
 80029b4:	4859      	ldr	r0, [pc, #356]	; (8002b1c <HAL_ADC_ConfigChannel+0x67c>)
 80029b6:	f7ff fa0d 	bl	8001dd4 <LL_ADC_IsEnabled>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4323      	orrs	r3, r4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bf0c      	ite	eq
 80029c2:	2301      	moveq	r3, #1
 80029c4:	2300      	movne	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	e008      	b.n	80029dc <HAL_ADC_ConfigChannel+0x53c>
 80029ca:	4857      	ldr	r0, [pc, #348]	; (8002b28 <HAL_ADC_ConfigChannel+0x688>)
 80029cc:	f7ff fa02 	bl	8001dd4 <LL_ADC_IsEnabled>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bf0c      	ite	eq
 80029d6:	2301      	moveq	r3, #1
 80029d8:	2300      	movne	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d07d      	beq.n	8002adc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a51      	ldr	r2, [pc, #324]	; (8002b2c <HAL_ADC_ConfigChannel+0x68c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d130      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x5ac>
 80029ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d12b      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a4b      	ldr	r2, [pc, #300]	; (8002b28 <HAL_ADC_ConfigChannel+0x688>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	f040 8081 	bne.w	8002b02 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a44      	ldr	r2, [pc, #272]	; (8002b18 <HAL_ADC_ConfigChannel+0x678>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d004      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0x574>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a43      	ldr	r2, [pc, #268]	; (8002b1c <HAL_ADC_ConfigChannel+0x67c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x578>
 8002a14:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_ADC_ConfigChannel+0x680>)
 8002a16:	e000      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x57a>
 8002a18:	4a42      	ldr	r2, [pc, #264]	; (8002b24 <HAL_ADC_ConfigChannel+0x684>)
 8002a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a20:	4619      	mov	r1, r3
 8002a22:	4610      	mov	r0, r2
 8002a24:	f7ff f83b 	bl	8001a9e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a28:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <HAL_ADC_ConfigChannel+0x690>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	4a41      	ldr	r2, [pc, #260]	; (8002b34 <HAL_ADC_ConfigChannel+0x694>)
 8002a30:	fba2 2303 	umull	r2, r3, r2, r3
 8002a34:	099b      	lsrs	r3, r3, #6
 8002a36:	3301      	adds	r3, #1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a3c:	e002      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f9      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a4a:	e05a      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a39      	ldr	r2, [pc, #228]	; (8002b38 <HAL_ADC_ConfigChannel+0x698>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d11e      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x5f4>
 8002a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d119      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a30      	ldr	r2, [pc, #192]	; (8002b28 <HAL_ADC_ConfigChannel+0x688>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d14b      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2a      	ldr	r2, [pc, #168]	; (8002b18 <HAL_ADC_ConfigChannel+0x678>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_ADC_ConfigChannel+0x5de>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a28      	ldr	r2, [pc, #160]	; (8002b1c <HAL_ADC_ConfigChannel+0x67c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x5e2>
 8002a7e:	4a28      	ldr	r2, [pc, #160]	; (8002b20 <HAL_ADC_ConfigChannel+0x680>)
 8002a80:	e000      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x5e4>
 8002a82:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <HAL_ADC_ConfigChannel+0x684>)
 8002a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	f7ff f806 	bl	8001a9e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a92:	e036      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a28      	ldr	r2, [pc, #160]	; (8002b3c <HAL_ADC_ConfigChannel+0x69c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d131      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x662>
 8002a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d12c      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <HAL_ADC_ConfigChannel+0x688>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d127      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <HAL_ADC_ConfigChannel+0x678>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_ADC_ConfigChannel+0x626>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a16      	ldr	r2, [pc, #88]	; (8002b1c <HAL_ADC_ConfigChannel+0x67c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x62a>
 8002ac6:	4a16      	ldr	r2, [pc, #88]	; (8002b20 <HAL_ADC_ConfigChannel+0x680>)
 8002ac8:	e000      	b.n	8002acc <HAL_ADC_ConfigChannel+0x62c>
 8002aca:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <HAL_ADC_ConfigChannel+0x684>)
 8002acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ace:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	f7fe ffe2 	bl	8001a9e <LL_ADC_SetCommonPathInternalCh>
 8002ada:	e012      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002aee:	e008      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3784      	adds	r7, #132	; 0x84
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd90      	pop	{r4, r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40022000 	.word	0x40022000
 8002b1c:	40022100 	.word	0x40022100
 8002b20:	40022300 	.word	0x40022300
 8002b24:	58026300 	.word	0x58026300
 8002b28:	58026000 	.word	0x58026000
 8002b2c:	cb840000 	.word	0xcb840000
 8002b30:	24000000 	.word	0x24000000
 8002b34:	053e2d63 	.word	0x053e2d63
 8002b38:	c7520000 	.word	0xc7520000
 8002b3c:	cfb80000 	.word	0xcfb80000

08002b40 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff f98a 	bl	8001e70 <LL_ADC_REG_IsConversionOngoing>
 8002b5c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff f9ac 	bl	8001ec0 <LL_ADC_INJ_IsConversionOngoing>
 8002b68:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d103      	bne.n	8002b78 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8098 	beq.w	8002ca8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d02a      	beq.n	8002bdc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	7d5b      	ldrb	r3, [r3, #21]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d126      	bne.n	8002bdc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7d1b      	ldrb	r3, [r3, #20]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d122      	bne.n	8002bdc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b9a:	e014      	b.n	8002bc6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	4a45      	ldr	r2, [pc, #276]	; (8002cb4 <ADC_ConversionStop+0x174>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d90d      	bls.n	8002bc0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f043 0210 	orr.w	r2, r3, #16
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e074      	b.n	8002caa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd0:	2b40      	cmp	r3, #64	; 0x40
 8002bd2:	d1e3      	bne.n	8002b9c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2240      	movs	r2, #64	; 0x40
 8002bda:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d014      	beq.n	8002c0c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff f942 	bl	8001e70 <LL_ADC_REG_IsConversionOngoing>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00c      	beq.n	8002c0c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f8ff 	bl	8001dfa <LL_ADC_IsDisableOngoing>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d104      	bne.n	8002c0c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff f91e 	bl	8001e48 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d014      	beq.n	8002c3c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff f952 	bl	8001ec0 <LL_ADC_INJ_IsConversionOngoing>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00c      	beq.n	8002c3c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f8e7 	bl	8001dfa <LL_ADC_IsDisableOngoing>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d104      	bne.n	8002c3c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff f92e 	bl	8001e98 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d005      	beq.n	8002c4e <ADC_ConversionStop+0x10e>
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d105      	bne.n	8002c54 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002c48:	230c      	movs	r3, #12
 8002c4a:	617b      	str	r3, [r7, #20]
        break;
 8002c4c:	e005      	b.n	8002c5a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002c4e:	2308      	movs	r3, #8
 8002c50:	617b      	str	r3, [r7, #20]
        break;
 8002c52:	e002      	b.n	8002c5a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002c54:	2304      	movs	r3, #4
 8002c56:	617b      	str	r3, [r7, #20]
        break;
 8002c58:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002c5a:	f7fe fed1 	bl	8001a00 <HAL_GetTick>
 8002c5e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c60:	e01b      	b.n	8002c9a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002c62:	f7fe fecd 	bl	8001a00 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b05      	cmp	r3, #5
 8002c6e:	d914      	bls.n	8002c9a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00d      	beq.n	8002c9a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c82:	f043 0210 	orr.w	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e007      	b.n	8002caa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1dc      	bne.n	8002c62 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3720      	adds	r7, #32
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	000cdbff 	.word	0x000cdbff

08002cb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff f885 	bl	8001dd4 <LL_ADC_IsEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d16e      	bne.n	8002dae <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <ADC_Enable+0x100>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f043 0210 	orr.w	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e05a      	b.n	8002db0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff f840 	bl	8001d84 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d04:	f7fe fe7c 	bl	8001a00 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a2b      	ldr	r2, [pc, #172]	; (8002dbc <ADC_Enable+0x104>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d004      	beq.n	8002d1e <ADC_Enable+0x66>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a29      	ldr	r2, [pc, #164]	; (8002dc0 <ADC_Enable+0x108>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <ADC_Enable+0x6a>
 8002d1e:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <ADC_Enable+0x10c>)
 8002d20:	e000      	b.n	8002d24 <ADC_Enable+0x6c>
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <ADC_Enable+0x110>)
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe ffd1 	bl	8001ccc <LL_ADC_GetMultimode>
 8002d2a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a23      	ldr	r2, [pc, #140]	; (8002dc0 <ADC_Enable+0x108>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d002      	beq.n	8002d3c <ADC_Enable+0x84>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	e000      	b.n	8002d3e <ADC_Enable+0x86>
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <ADC_Enable+0x104>)
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d02c      	beq.n	8002da0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d130      	bne.n	8002dae <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d4c:	e028      	b.n	8002da0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f83e 	bl	8001dd4 <LL_ADC_IsEnabled>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d104      	bne.n	8002d68 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff f80e 	bl	8001d84 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d68:	f7fe fe4a 	bl	8001a00 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d914      	bls.n	8002da0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d00d      	beq.n	8002da0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	f043 0210 	orr.w	r2, r3, #16
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	f043 0201 	orr.w	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e007      	b.n	8002db0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d1cf      	bne.n	8002d4e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	8000003f 	.word	0x8000003f
 8002dbc:	40022000 	.word	0x40022000
 8002dc0:	40022100 	.word	0x40022100
 8002dc4:	40022300 	.word	0x40022300
 8002dc8:	58026300 	.word	0x58026300

08002dcc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff f80e 	bl	8001dfa <LL_ADC_IsDisableOngoing>
 8002dde:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe fff5 	bl	8001dd4 <LL_ADC_IsEnabled>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d047      	beq.n	8002e80 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d144      	bne.n	8002e80 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 030d 	and.w	r3, r3, #13
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d10c      	bne.n	8002e1e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe ffcf 	bl	8001dac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2203      	movs	r2, #3
 8002e14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e16:	f7fe fdf3 	bl	8001a00 <HAL_GetTick>
 8002e1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e1c:	e029      	b.n	8002e72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	f043 0210 	orr.w	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2e:	f043 0201 	orr.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e023      	b.n	8002e82 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e3a:	f7fe fde1 	bl	8001a00 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d914      	bls.n	8002e72 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00d      	beq.n	8002e72 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	f043 0210 	orr.w	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	f043 0201 	orr.w	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e007      	b.n	8002e82 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1dc      	bne.n	8002e3a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d14b      	bne.n	8002f3c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d021      	beq.n	8002f02 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe fe60 	bl	8001b88 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d032      	beq.n	8002f34 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d12b      	bne.n	8002f34 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d11f      	bne.n	8002f34 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	f043 0201 	orr.w	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
 8002f00:	e018      	b.n	8002f34 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d111      	bne.n	8002f34 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f7fe f97d 	bl	8001234 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f3a:	e00e      	b.n	8002f5a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f7ff fa9f 	bl	800248c <HAL_ADC_ErrorCallback>
}
 8002f4e:	e004      	b.n	8002f5a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4798      	blx	r3
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f7ff fa81 	bl	8002478 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	f043 0204 	orr.w	r2, r3, #4
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7ff fa71 	bl	800248c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a79      	ldr	r2, [pc, #484]	; (80031a8 <ADC_ConfigureBoostMode+0x1f4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <ADC_ConfigureBoostMode+0x1c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a78      	ldr	r2, [pc, #480]	; (80031ac <ADC_ConfigureBoostMode+0x1f8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d109      	bne.n	8002fe4 <ADC_ConfigureBoostMode+0x30>
 8002fd0:	4b77      	ldr	r3, [pc, #476]	; (80031b0 <ADC_ConfigureBoostMode+0x1fc>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf14      	ite	ne
 8002fdc:	2301      	movne	r3, #1
 8002fde:	2300      	moveq	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e008      	b.n	8002ff6 <ADC_ConfigureBoostMode+0x42>
 8002fe4:	4b73      	ldr	r3, [pc, #460]	; (80031b4 <ADC_ConfigureBoostMode+0x200>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01c      	beq.n	8003034 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002ffa:	f004 fa29 	bl	8007450 <HAL_RCC_GetHCLKFreq>
 8002ffe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003008:	d010      	beq.n	800302c <ADC_ConfigureBoostMode+0x78>
 800300a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800300e:	d871      	bhi.n	80030f4 <ADC_ConfigureBoostMode+0x140>
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003014:	d002      	beq.n	800301c <ADC_ConfigureBoostMode+0x68>
 8003016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800301a:	d16b      	bne.n	80030f4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	60fb      	str	r3, [r7, #12]
        break;
 800302a:	e066      	b.n	80030fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	60fb      	str	r3, [r7, #12]
        break;
 8003032:	e062      	b.n	80030fa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003034:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003038:	f005 f9ac 	bl	8008394 <HAL_RCCEx_GetPeriphCLKFreq>
 800303c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003046:	d051      	beq.n	80030ec <ADC_ConfigureBoostMode+0x138>
 8003048:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800304c:	d854      	bhi.n	80030f8 <ADC_ConfigureBoostMode+0x144>
 800304e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003052:	d047      	beq.n	80030e4 <ADC_ConfigureBoostMode+0x130>
 8003054:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003058:	d84e      	bhi.n	80030f8 <ADC_ConfigureBoostMode+0x144>
 800305a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800305e:	d03d      	beq.n	80030dc <ADC_ConfigureBoostMode+0x128>
 8003060:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003064:	d848      	bhi.n	80030f8 <ADC_ConfigureBoostMode+0x144>
 8003066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800306a:	d033      	beq.n	80030d4 <ADC_ConfigureBoostMode+0x120>
 800306c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003070:	d842      	bhi.n	80030f8 <ADC_ConfigureBoostMode+0x144>
 8003072:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003076:	d029      	beq.n	80030cc <ADC_ConfigureBoostMode+0x118>
 8003078:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800307c:	d83c      	bhi.n	80030f8 <ADC_ConfigureBoostMode+0x144>
 800307e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003082:	d01a      	beq.n	80030ba <ADC_ConfigureBoostMode+0x106>
 8003084:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003088:	d836      	bhi.n	80030f8 <ADC_ConfigureBoostMode+0x144>
 800308a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800308e:	d014      	beq.n	80030ba <ADC_ConfigureBoostMode+0x106>
 8003090:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003094:	d830      	bhi.n	80030f8 <ADC_ConfigureBoostMode+0x144>
 8003096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800309a:	d00e      	beq.n	80030ba <ADC_ConfigureBoostMode+0x106>
 800309c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a0:	d82a      	bhi.n	80030f8 <ADC_ConfigureBoostMode+0x144>
 80030a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030a6:	d008      	beq.n	80030ba <ADC_ConfigureBoostMode+0x106>
 80030a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030ac:	d824      	bhi.n	80030f8 <ADC_ConfigureBoostMode+0x144>
 80030ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030b2:	d002      	beq.n	80030ba <ADC_ConfigureBoostMode+0x106>
 80030b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030b8:	d11e      	bne.n	80030f8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	0c9b      	lsrs	r3, r3, #18
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c8:	60fb      	str	r3, [r7, #12]
        break;
 80030ca:	e016      	b.n	80030fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	091b      	lsrs	r3, r3, #4
 80030d0:	60fb      	str	r3, [r7, #12]
        break;
 80030d2:	e012      	b.n	80030fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	60fb      	str	r3, [r7, #12]
        break;
 80030da:	e00e      	b.n	80030fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	099b      	lsrs	r3, r3, #6
 80030e0:	60fb      	str	r3, [r7, #12]
        break;
 80030e2:	e00a      	b.n	80030fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	09db      	lsrs	r3, r3, #7
 80030e8:	60fb      	str	r3, [r7, #12]
        break;
 80030ea:	e006      	b.n	80030fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	60fb      	str	r3, [r7, #12]
        break;
 80030f2:	e002      	b.n	80030fa <ADC_ConfigureBoostMode+0x146>
        break;
 80030f4:	bf00      	nop
 80030f6:	e000      	b.n	80030fa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80030f8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80030fa:	f7fe fcb1 	bl	8001a60 <HAL_GetREVID>
 80030fe:	4603      	mov	r3, r0
 8003100:	f241 0203 	movw	r2, #4099	; 0x1003
 8003104:	4293      	cmp	r3, r2
 8003106:	d815      	bhi.n	8003134 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a2b      	ldr	r2, [pc, #172]	; (80031b8 <ADC_ConfigureBoostMode+0x204>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d908      	bls.n	8003122 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800311e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003120:	e03e      	b.n	80031a0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003130:	609a      	str	r2, [r3, #8]
}
 8003132:	e035      	b.n	80031a0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <ADC_ConfigureBoostMode+0x208>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d808      	bhi.n	8003154 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003150:	609a      	str	r2, [r3, #8]
}
 8003152:	e025      	b.n	80031a0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a1a      	ldr	r2, [pc, #104]	; (80031c0 <ADC_ConfigureBoostMode+0x20c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d80a      	bhi.n	8003172 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800316e:	609a      	str	r2, [r3, #8]
}
 8003170:	e016      	b.n	80031a0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <ADC_ConfigureBoostMode+0x210>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d80a      	bhi.n	8003190 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318c:	609a      	str	r2, [r3, #8]
}
 800318e:	e007      	b.n	80031a0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800319e:	609a      	str	r2, [r3, #8]
}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40022000 	.word	0x40022000
 80031ac:	40022100 	.word	0x40022100
 80031b0:	40022300 	.word	0x40022300
 80031b4:	58026300 	.word	0x58026300
 80031b8:	01312d00 	.word	0x01312d00
 80031bc:	005f5e10 	.word	0x005f5e10
 80031c0:	00bebc20 	.word	0x00bebc20
 80031c4:	017d7840 	.word	0x017d7840

080031c8 <LL_ADC_IsEnabled>:
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <LL_ADC_IsEnabled+0x18>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <LL_ADC_IsEnabled+0x1a>
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <LL_ADC_REG_IsConversionOngoing>:
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d101      	bne.n	8003206 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b09f      	sub	sp, #124	; 0x7c
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800322e:	2302      	movs	r3, #2
 8003230:	e0be      	b.n	80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800323e:	2300      	movs	r3, #0
 8003240:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a5c      	ldr	r2, [pc, #368]	; (80033b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d102      	bne.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800324c:	4b5b      	ldr	r3, [pc, #364]	; (80033bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	e001      	b.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10b      	bne.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e09d      	b.n	80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ffb9 	bl	80031ee <LL_ADC_REG_IsConversionOngoing>
 800327c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ffb3 	bl	80031ee <LL_ADC_REG_IsConversionOngoing>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d17f      	bne.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800328e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003290:	2b00      	cmp	r3, #0
 8003292:	d17c      	bne.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a47      	ldr	r2, [pc, #284]	; (80033b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a46      	ldr	r2, [pc, #280]	; (80033bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80032a8:	4b45      	ldr	r3, [pc, #276]	; (80033c0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80032aa:	e000      	b.n	80032ae <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80032ac:	4b45      	ldr	r3, [pc, #276]	; (80033c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80032ae:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d039      	beq.n	800332c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80032b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	431a      	orrs	r2, r3
 80032c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a3a      	ldr	r2, [pc, #232]	; (80033b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d004      	beq.n	80032de <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a38      	ldr	r2, [pc, #224]	; (80033bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d10e      	bne.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80032de:	4836      	ldr	r0, [pc, #216]	; (80033b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032e0:	f7ff ff72 	bl	80031c8 <LL_ADC_IsEnabled>
 80032e4:	4604      	mov	r4, r0
 80032e6:	4835      	ldr	r0, [pc, #212]	; (80033bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032e8:	f7ff ff6e 	bl	80031c8 <LL_ADC_IsEnabled>
 80032ec:	4603      	mov	r3, r0
 80032ee:	4323      	orrs	r3, r4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e008      	b.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80032fc:	4832      	ldr	r0, [pc, #200]	; (80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80032fe:	f7ff ff63 	bl	80031c8 <LL_ADC_IsEnabled>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d047      	beq.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003318:	4013      	ands	r3, r2
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	6811      	ldr	r1, [r2, #0]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	6892      	ldr	r2, [r2, #8]
 8003322:	430a      	orrs	r2, r1
 8003324:	431a      	orrs	r2, r3
 8003326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003328:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800332a:	e03a      	b.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800332c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003336:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1e      	ldr	r2, [pc, #120]	; (80033b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d004      	beq.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1d      	ldr	r2, [pc, #116]	; (80033bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d10e      	bne.n	800336a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800334c:	481a      	ldr	r0, [pc, #104]	; (80033b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800334e:	f7ff ff3b 	bl	80031c8 <LL_ADC_IsEnabled>
 8003352:	4604      	mov	r4, r0
 8003354:	4819      	ldr	r0, [pc, #100]	; (80033bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003356:	f7ff ff37 	bl	80031c8 <LL_ADC_IsEnabled>
 800335a:	4603      	mov	r3, r0
 800335c:	4323      	orrs	r3, r4
 800335e:	2b00      	cmp	r3, #0
 8003360:	bf0c      	ite	eq
 8003362:	2301      	moveq	r3, #1
 8003364:	2300      	movne	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	e008      	b.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800336a:	4817      	ldr	r0, [pc, #92]	; (80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800336c:	f7ff ff2c 	bl	80031c8 <LL_ADC_IsEnabled>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	bf0c      	ite	eq
 8003376:	2301      	moveq	r3, #1
 8003378:	2300      	movne	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d010      	beq.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003386:	4013      	ands	r3, r2
 8003388:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800338a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800338c:	e009      	b.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	f043 0220 	orr.w	r2, r3, #32
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80033a0:	e000      	b.n	80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033a2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	377c      	adds	r7, #124	; 0x7c
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd90      	pop	{r4, r7, pc}
 80033b8:	40022000 	.word	0x40022000
 80033bc:	40022100 	.word	0x40022100
 80033c0:	40022300 	.word	0x40022300
 80033c4:	58026300 	.word	0x58026300
 80033c8:	58026000 	.word	0x58026000
 80033cc:	fffff0e0 	.word	0xfffff0e0

080033d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <__NVIC_SetPriorityGrouping+0x40>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033ec:	4013      	ands	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fe:	4a04      	ldr	r2, [pc, #16]	; (8003410 <__NVIC_SetPriorityGrouping+0x40>)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	60d3      	str	r3, [r2, #12]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00
 8003414:	05fa0000 	.word	0x05fa0000

08003418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <__NVIC_GetPriorityGrouping+0x18>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 0307 	and.w	r3, r3, #7
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800343e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003442:	2b00      	cmp	r3, #0
 8003444:	db0b      	blt.n	800345e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4907      	ldr	r1, [pc, #28]	; (800346c <__NVIC_EnableIRQ+0x38>)
 800344e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2001      	movs	r0, #1
 8003456:	fa00 f202 	lsl.w	r2, r0, r2
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800347c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003480:	2b00      	cmp	r3, #0
 8003482:	db0a      	blt.n	800349a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	490c      	ldr	r1, [pc, #48]	; (80034bc <__NVIC_SetPriority+0x4c>)
 800348a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348e:	0112      	lsls	r2, r2, #4
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	440b      	add	r3, r1
 8003494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003498:	e00a      	b.n	80034b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4908      	ldr	r1, [pc, #32]	; (80034c0 <__NVIC_SetPriority+0x50>)
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	3b04      	subs	r3, #4
 80034a8:	0112      	lsls	r2, r2, #4
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	440b      	add	r3, r1
 80034ae:	761a      	strb	r2, [r3, #24]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000e100 	.word	0xe000e100
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f1c3 0307 	rsb	r3, r3, #7
 80034de:	2b04      	cmp	r3, #4
 80034e0:	bf28      	it	cs
 80034e2:	2304      	movcs	r3, #4
 80034e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d902      	bls.n	80034f4 <NVIC_EncodePriority+0x30>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3b03      	subs	r3, #3
 80034f2:	e000      	b.n	80034f6 <NVIC_EncodePriority+0x32>
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	f04f 32ff 	mov.w	r2, #4294967295
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800350c:	f04f 31ff 	mov.w	r1, #4294967295
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	43d9      	mvns	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	4313      	orrs	r3, r2
         );
}
 800351e:	4618      	mov	r0, r3
 8003520:	3724      	adds	r7, #36	; 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800353c:	d301      	bcc.n	8003542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800353e:	2301      	movs	r3, #1
 8003540:	e00f      	b.n	8003562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003542:	4a0a      	ldr	r2, [pc, #40]	; (800356c <SysTick_Config+0x40>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800354a:	210f      	movs	r1, #15
 800354c:	f04f 30ff 	mov.w	r0, #4294967295
 8003550:	f7ff ff8e 	bl	8003470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <SysTick_Config+0x40>)
 8003556:	2200      	movs	r2, #0
 8003558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800355a:	4b04      	ldr	r3, [pc, #16]	; (800356c <SysTick_Config+0x40>)
 800355c:	2207      	movs	r2, #7
 800355e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	e000e010 	.word	0xe000e010

08003570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff29 	bl	80033d0 <__NVIC_SetPriorityGrouping>
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b086      	sub	sp, #24
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003594:	f7ff ff40 	bl	8003418 <__NVIC_GetPriorityGrouping>
 8003598:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	6978      	ldr	r0, [r7, #20]
 80035a0:	f7ff ff90 	bl	80034c4 <NVIC_EncodePriority>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff5f 	bl	8003470 <__NVIC_SetPriority>
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff33 	bl	8003434 <__NVIC_EnableIRQ>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ffa4 	bl	800352c <SysTick_Config>
 80035e4:	4603      	mov	r3, r0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80035f8:	f7fe fa02 	bl	8001a00 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e316      	b.n	8003c36 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a66      	ldr	r2, [pc, #408]	; (80037a8 <HAL_DMA_Init+0x1b8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d04a      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a65      	ldr	r2, [pc, #404]	; (80037ac <HAL_DMA_Init+0x1bc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d045      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a63      	ldr	r2, [pc, #396]	; (80037b0 <HAL_DMA_Init+0x1c0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d040      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a62      	ldr	r2, [pc, #392]	; (80037b4 <HAL_DMA_Init+0x1c4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d03b      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a60      	ldr	r2, [pc, #384]	; (80037b8 <HAL_DMA_Init+0x1c8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d036      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a5f      	ldr	r2, [pc, #380]	; (80037bc <HAL_DMA_Init+0x1cc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d031      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a5d      	ldr	r2, [pc, #372]	; (80037c0 <HAL_DMA_Init+0x1d0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02c      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a5c      	ldr	r2, [pc, #368]	; (80037c4 <HAL_DMA_Init+0x1d4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d027      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a5a      	ldr	r2, [pc, #360]	; (80037c8 <HAL_DMA_Init+0x1d8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d022      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a59      	ldr	r2, [pc, #356]	; (80037cc <HAL_DMA_Init+0x1dc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d01d      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a57      	ldr	r2, [pc, #348]	; (80037d0 <HAL_DMA_Init+0x1e0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d018      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a56      	ldr	r2, [pc, #344]	; (80037d4 <HAL_DMA_Init+0x1e4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a54      	ldr	r2, [pc, #336]	; (80037d8 <HAL_DMA_Init+0x1e8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00e      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a53      	ldr	r2, [pc, #332]	; (80037dc <HAL_DMA_Init+0x1ec>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d009      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a51      	ldr	r2, [pc, #324]	; (80037e0 <HAL_DMA_Init+0x1f0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_DMA_Init+0xb8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a50      	ldr	r2, [pc, #320]	; (80037e4 <HAL_DMA_Init+0x1f4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d101      	bne.n	80036ac <HAL_DMA_Init+0xbc>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <HAL_DMA_Init+0xbe>
 80036ac:	2300      	movs	r3, #0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 813b 	beq.w	800392a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a37      	ldr	r2, [pc, #220]	; (80037a8 <HAL_DMA_Init+0x1b8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d04a      	beq.n	8003764 <HAL_DMA_Init+0x174>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a36      	ldr	r2, [pc, #216]	; (80037ac <HAL_DMA_Init+0x1bc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d045      	beq.n	8003764 <HAL_DMA_Init+0x174>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a34      	ldr	r2, [pc, #208]	; (80037b0 <HAL_DMA_Init+0x1c0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d040      	beq.n	8003764 <HAL_DMA_Init+0x174>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a33      	ldr	r2, [pc, #204]	; (80037b4 <HAL_DMA_Init+0x1c4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d03b      	beq.n	8003764 <HAL_DMA_Init+0x174>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a31      	ldr	r2, [pc, #196]	; (80037b8 <HAL_DMA_Init+0x1c8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d036      	beq.n	8003764 <HAL_DMA_Init+0x174>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a30      	ldr	r2, [pc, #192]	; (80037bc <HAL_DMA_Init+0x1cc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d031      	beq.n	8003764 <HAL_DMA_Init+0x174>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a2e      	ldr	r2, [pc, #184]	; (80037c0 <HAL_DMA_Init+0x1d0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d02c      	beq.n	8003764 <HAL_DMA_Init+0x174>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2d      	ldr	r2, [pc, #180]	; (80037c4 <HAL_DMA_Init+0x1d4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d027      	beq.n	8003764 <HAL_DMA_Init+0x174>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a2b      	ldr	r2, [pc, #172]	; (80037c8 <HAL_DMA_Init+0x1d8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d022      	beq.n	8003764 <HAL_DMA_Init+0x174>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a2a      	ldr	r2, [pc, #168]	; (80037cc <HAL_DMA_Init+0x1dc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d01d      	beq.n	8003764 <HAL_DMA_Init+0x174>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a28      	ldr	r2, [pc, #160]	; (80037d0 <HAL_DMA_Init+0x1e0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d018      	beq.n	8003764 <HAL_DMA_Init+0x174>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a27      	ldr	r2, [pc, #156]	; (80037d4 <HAL_DMA_Init+0x1e4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d013      	beq.n	8003764 <HAL_DMA_Init+0x174>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a25      	ldr	r2, [pc, #148]	; (80037d8 <HAL_DMA_Init+0x1e8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00e      	beq.n	8003764 <HAL_DMA_Init+0x174>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a24      	ldr	r2, [pc, #144]	; (80037dc <HAL_DMA_Init+0x1ec>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d009      	beq.n	8003764 <HAL_DMA_Init+0x174>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a22      	ldr	r2, [pc, #136]	; (80037e0 <HAL_DMA_Init+0x1f0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d004      	beq.n	8003764 <HAL_DMA_Init+0x174>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <HAL_DMA_Init+0x1f4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d108      	bne.n	8003776 <HAL_DMA_Init+0x186>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e007      	b.n	8003786 <HAL_DMA_Init+0x196>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003786:	e02f      	b.n	80037e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003788:	f7fe f93a 	bl	8001a00 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b05      	cmp	r3, #5
 8003794:	d928      	bls.n	80037e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2203      	movs	r2, #3
 80037a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e246      	b.n	8003c36 <HAL_DMA_Init+0x646>
 80037a8:	40020010 	.word	0x40020010
 80037ac:	40020028 	.word	0x40020028
 80037b0:	40020040 	.word	0x40020040
 80037b4:	40020058 	.word	0x40020058
 80037b8:	40020070 	.word	0x40020070
 80037bc:	40020088 	.word	0x40020088
 80037c0:	400200a0 	.word	0x400200a0
 80037c4:	400200b8 	.word	0x400200b8
 80037c8:	40020410 	.word	0x40020410
 80037cc:	40020428 	.word	0x40020428
 80037d0:	40020440 	.word	0x40020440
 80037d4:	40020458 	.word	0x40020458
 80037d8:	40020470 	.word	0x40020470
 80037dc:	40020488 	.word	0x40020488
 80037e0:	400204a0 	.word	0x400204a0
 80037e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1c8      	bne.n	8003788 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4b83      	ldr	r3, [pc, #524]	; (8003a10 <HAL_DMA_Init+0x420>)
 8003802:	4013      	ands	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800380e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003826:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	2b04      	cmp	r3, #4
 800383a:	d107      	bne.n	800384c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	4313      	orrs	r3, r2
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800384c:	4b71      	ldr	r3, [pc, #452]	; (8003a14 <HAL_DMA_Init+0x424>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4b71      	ldr	r3, [pc, #452]	; (8003a18 <HAL_DMA_Init+0x428>)
 8003852:	4013      	ands	r3, r2
 8003854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003858:	d328      	bcc.n	80038ac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b28      	cmp	r3, #40	; 0x28
 8003860:	d903      	bls.n	800386a <HAL_DMA_Init+0x27a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b2e      	cmp	r3, #46	; 0x2e
 8003868:	d917      	bls.n	800389a <HAL_DMA_Init+0x2aa>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b3e      	cmp	r3, #62	; 0x3e
 8003870:	d903      	bls.n	800387a <HAL_DMA_Init+0x28a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b42      	cmp	r3, #66	; 0x42
 8003878:	d90f      	bls.n	800389a <HAL_DMA_Init+0x2aa>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b46      	cmp	r3, #70	; 0x46
 8003880:	d903      	bls.n	800388a <HAL_DMA_Init+0x29a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b48      	cmp	r3, #72	; 0x48
 8003888:	d907      	bls.n	800389a <HAL_DMA_Init+0x2aa>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b4e      	cmp	r3, #78	; 0x4e
 8003890:	d905      	bls.n	800389e <HAL_DMA_Init+0x2ae>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b52      	cmp	r3, #82	; 0x52
 8003898:	d801      	bhi.n	800389e <HAL_DMA_Init+0x2ae>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_DMA_Init+0x2b0>
 800389e:	2300      	movs	r3, #0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038aa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 0307 	bic.w	r3, r3, #7
 80038c2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d117      	bne.n	8003906 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00e      	beq.n	8003906 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f002 f8ed 	bl	8005ac8 <DMA_CheckFifoParam>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2240      	movs	r2, #64	; 0x40
 80038f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e197      	b.n	8003c36 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f002 f828 	bl	8005964 <DMA_CalcBaseAndBitshift>
 8003914:	4603      	mov	r3, r0
 8003916:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	223f      	movs	r2, #63	; 0x3f
 8003922:	409a      	lsls	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	e0cd      	b.n	8003ac6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a3b      	ldr	r2, [pc, #236]	; (8003a1c <HAL_DMA_Init+0x42c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d022      	beq.n	800397a <HAL_DMA_Init+0x38a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a39      	ldr	r2, [pc, #228]	; (8003a20 <HAL_DMA_Init+0x430>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01d      	beq.n	800397a <HAL_DMA_Init+0x38a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a38      	ldr	r2, [pc, #224]	; (8003a24 <HAL_DMA_Init+0x434>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d018      	beq.n	800397a <HAL_DMA_Init+0x38a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a36      	ldr	r2, [pc, #216]	; (8003a28 <HAL_DMA_Init+0x438>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <HAL_DMA_Init+0x38a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a35      	ldr	r2, [pc, #212]	; (8003a2c <HAL_DMA_Init+0x43c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00e      	beq.n	800397a <HAL_DMA_Init+0x38a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a33      	ldr	r2, [pc, #204]	; (8003a30 <HAL_DMA_Init+0x440>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d009      	beq.n	800397a <HAL_DMA_Init+0x38a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a32      	ldr	r2, [pc, #200]	; (8003a34 <HAL_DMA_Init+0x444>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d004      	beq.n	800397a <HAL_DMA_Init+0x38a>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a30      	ldr	r2, [pc, #192]	; (8003a38 <HAL_DMA_Init+0x448>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d101      	bne.n	800397e <HAL_DMA_Init+0x38e>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_DMA_Init+0x390>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8097 	beq.w	8003ab4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a24      	ldr	r2, [pc, #144]	; (8003a1c <HAL_DMA_Init+0x42c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d021      	beq.n	80039d4 <HAL_DMA_Init+0x3e4>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a22      	ldr	r2, [pc, #136]	; (8003a20 <HAL_DMA_Init+0x430>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01c      	beq.n	80039d4 <HAL_DMA_Init+0x3e4>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a21      	ldr	r2, [pc, #132]	; (8003a24 <HAL_DMA_Init+0x434>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d017      	beq.n	80039d4 <HAL_DMA_Init+0x3e4>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1f      	ldr	r2, [pc, #124]	; (8003a28 <HAL_DMA_Init+0x438>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d012      	beq.n	80039d4 <HAL_DMA_Init+0x3e4>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <HAL_DMA_Init+0x43c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00d      	beq.n	80039d4 <HAL_DMA_Init+0x3e4>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <HAL_DMA_Init+0x440>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d008      	beq.n	80039d4 <HAL_DMA_Init+0x3e4>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <HAL_DMA_Init+0x444>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <HAL_DMA_Init+0x3e4>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <HAL_DMA_Init+0x448>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_DMA_Init+0x44c>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	d020      	beq.n	8003a40 <HAL_DMA_Init+0x450>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	d102      	bne.n	8003a0c <HAL_DMA_Init+0x41c>
 8003a06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a0a:	e01a      	b.n	8003a42 <HAL_DMA_Init+0x452>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e018      	b.n	8003a42 <HAL_DMA_Init+0x452>
 8003a10:	fe10803f 	.word	0xfe10803f
 8003a14:	5c001000 	.word	0x5c001000
 8003a18:	ffff0000 	.word	0xffff0000
 8003a1c:	58025408 	.word	0x58025408
 8003a20:	5802541c 	.word	0x5802541c
 8003a24:	58025430 	.word	0x58025430
 8003a28:	58025444 	.word	0x58025444
 8003a2c:	58025458 	.word	0x58025458
 8003a30:	5802546c 	.word	0x5802546c
 8003a34:	58025480 	.word	0x58025480
 8003a38:	58025494 	.word	0x58025494
 8003a3c:	fffe000f 	.word	0xfffe000f
 8003a40:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68d2      	ldr	r2, [r2, #12]
 8003a46:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a70:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b6e      	ldr	r3, [pc, #440]	; (8003c40 <HAL_DMA_Init+0x650>)
 8003a88:	4413      	add	r3, r2
 8003a8a:	4a6e      	ldr	r2, [pc, #440]	; (8003c44 <HAL_DMA_Init+0x654>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	009a      	lsls	r2, r3, #2
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f001 ff63 	bl	8005964 <DMA_CalcBaseAndBitshift>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	2201      	movs	r2, #1
 8003aac:	409a      	lsls	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	e008      	b.n	8003ac6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2240      	movs	r2, #64	; 0x40
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2203      	movs	r2, #3
 8003abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e0b7      	b.n	8003c36 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a5f      	ldr	r2, [pc, #380]	; (8003c48 <HAL_DMA_Init+0x658>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d072      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a5d      	ldr	r2, [pc, #372]	; (8003c4c <HAL_DMA_Init+0x65c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d06d      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a5c      	ldr	r2, [pc, #368]	; (8003c50 <HAL_DMA_Init+0x660>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d068      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a5a      	ldr	r2, [pc, #360]	; (8003c54 <HAL_DMA_Init+0x664>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d063      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a59      	ldr	r2, [pc, #356]	; (8003c58 <HAL_DMA_Init+0x668>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d05e      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a57      	ldr	r2, [pc, #348]	; (8003c5c <HAL_DMA_Init+0x66c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d059      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a56      	ldr	r2, [pc, #344]	; (8003c60 <HAL_DMA_Init+0x670>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d054      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a54      	ldr	r2, [pc, #336]	; (8003c64 <HAL_DMA_Init+0x674>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d04f      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a53      	ldr	r2, [pc, #332]	; (8003c68 <HAL_DMA_Init+0x678>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d04a      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a51      	ldr	r2, [pc, #324]	; (8003c6c <HAL_DMA_Init+0x67c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d045      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a50      	ldr	r2, [pc, #320]	; (8003c70 <HAL_DMA_Init+0x680>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d040      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a4e      	ldr	r2, [pc, #312]	; (8003c74 <HAL_DMA_Init+0x684>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d03b      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a4d      	ldr	r2, [pc, #308]	; (8003c78 <HAL_DMA_Init+0x688>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d036      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a4b      	ldr	r2, [pc, #300]	; (8003c7c <HAL_DMA_Init+0x68c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d031      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a4a      	ldr	r2, [pc, #296]	; (8003c80 <HAL_DMA_Init+0x690>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d02c      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a48      	ldr	r2, [pc, #288]	; (8003c84 <HAL_DMA_Init+0x694>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d027      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a47      	ldr	r2, [pc, #284]	; (8003c88 <HAL_DMA_Init+0x698>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d022      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a45      	ldr	r2, [pc, #276]	; (8003c8c <HAL_DMA_Init+0x69c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01d      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a44      	ldr	r2, [pc, #272]	; (8003c90 <HAL_DMA_Init+0x6a0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d018      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a42      	ldr	r2, [pc, #264]	; (8003c94 <HAL_DMA_Init+0x6a4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d013      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a41      	ldr	r2, [pc, #260]	; (8003c98 <HAL_DMA_Init+0x6a8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00e      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a3f      	ldr	r2, [pc, #252]	; (8003c9c <HAL_DMA_Init+0x6ac>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d009      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a3e      	ldr	r2, [pc, #248]	; (8003ca0 <HAL_DMA_Init+0x6b0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d004      	beq.n	8003bb6 <HAL_DMA_Init+0x5c6>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a3c      	ldr	r2, [pc, #240]	; (8003ca4 <HAL_DMA_Init+0x6b4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <HAL_DMA_Init+0x5ca>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_DMA_Init+0x5cc>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d032      	beq.n	8003c26 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f001 fffd 	bl	8005bc0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b80      	cmp	r3, #128	; 0x80
 8003bcc:	d102      	bne.n	8003bd4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003be8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d010      	beq.n	8003c14 <HAL_DMA_Init+0x624>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d80c      	bhi.n	8003c14 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f002 f87a 	bl	8005cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	e008      	b.n	8003c26 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	a7fdabf8 	.word	0xa7fdabf8
 8003c44:	cccccccd 	.word	0xcccccccd
 8003c48:	40020010 	.word	0x40020010
 8003c4c:	40020028 	.word	0x40020028
 8003c50:	40020040 	.word	0x40020040
 8003c54:	40020058 	.word	0x40020058
 8003c58:	40020070 	.word	0x40020070
 8003c5c:	40020088 	.word	0x40020088
 8003c60:	400200a0 	.word	0x400200a0
 8003c64:	400200b8 	.word	0x400200b8
 8003c68:	40020410 	.word	0x40020410
 8003c6c:	40020428 	.word	0x40020428
 8003c70:	40020440 	.word	0x40020440
 8003c74:	40020458 	.word	0x40020458
 8003c78:	40020470 	.word	0x40020470
 8003c7c:	40020488 	.word	0x40020488
 8003c80:	400204a0 	.word	0x400204a0
 8003c84:	400204b8 	.word	0x400204b8
 8003c88:	58025408 	.word	0x58025408
 8003c8c:	5802541c 	.word	0x5802541c
 8003c90:	58025430 	.word	0x58025430
 8003c94:	58025444 	.word	0x58025444
 8003c98:	58025458 	.word	0x58025458
 8003c9c:	5802546c 	.word	0x5802546c
 8003ca0:	58025480 	.word	0x58025480
 8003ca4:	58025494 	.word	0x58025494

08003ca8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e226      	b.n	8004112 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_DMA_Start_IT+0x2a>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e21f      	b.n	8004112 <HAL_DMA_Start_IT+0x46a>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	f040 820a 	bne.w	80040fc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a68      	ldr	r2, [pc, #416]	; (8003e9c <HAL_DMA_Start_IT+0x1f4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d04a      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a66      	ldr	r2, [pc, #408]	; (8003ea0 <HAL_DMA_Start_IT+0x1f8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d045      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a65      	ldr	r2, [pc, #404]	; (8003ea4 <HAL_DMA_Start_IT+0x1fc>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d040      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a63      	ldr	r2, [pc, #396]	; (8003ea8 <HAL_DMA_Start_IT+0x200>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d03b      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a62      	ldr	r2, [pc, #392]	; (8003eac <HAL_DMA_Start_IT+0x204>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d036      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a60      	ldr	r2, [pc, #384]	; (8003eb0 <HAL_DMA_Start_IT+0x208>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d031      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a5f      	ldr	r2, [pc, #380]	; (8003eb4 <HAL_DMA_Start_IT+0x20c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d02c      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a5d      	ldr	r2, [pc, #372]	; (8003eb8 <HAL_DMA_Start_IT+0x210>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d027      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a5c      	ldr	r2, [pc, #368]	; (8003ebc <HAL_DMA_Start_IT+0x214>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d022      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a5a      	ldr	r2, [pc, #360]	; (8003ec0 <HAL_DMA_Start_IT+0x218>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d01d      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a59      	ldr	r2, [pc, #356]	; (8003ec4 <HAL_DMA_Start_IT+0x21c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d018      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a57      	ldr	r2, [pc, #348]	; (8003ec8 <HAL_DMA_Start_IT+0x220>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a56      	ldr	r2, [pc, #344]	; (8003ecc <HAL_DMA_Start_IT+0x224>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00e      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a54      	ldr	r2, [pc, #336]	; (8003ed0 <HAL_DMA_Start_IT+0x228>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d009      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a53      	ldr	r2, [pc, #332]	; (8003ed4 <HAL_DMA_Start_IT+0x22c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_DMA_Start_IT+0xee>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a51      	ldr	r2, [pc, #324]	; (8003ed8 <HAL_DMA_Start_IT+0x230>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <HAL_DMA_Start_IT+0x100>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0201 	bic.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e007      	b.n	8003db8 <HAL_DMA_Start_IT+0x110>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0201 	bic.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f001 fc24 	bl	800560c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a34      	ldr	r2, [pc, #208]	; (8003e9c <HAL_DMA_Start_IT+0x1f4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d04a      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a33      	ldr	r2, [pc, #204]	; (8003ea0 <HAL_DMA_Start_IT+0x1f8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d045      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a31      	ldr	r2, [pc, #196]	; (8003ea4 <HAL_DMA_Start_IT+0x1fc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d040      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a30      	ldr	r2, [pc, #192]	; (8003ea8 <HAL_DMA_Start_IT+0x200>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d03b      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2e      	ldr	r2, [pc, #184]	; (8003eac <HAL_DMA_Start_IT+0x204>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d036      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a2d      	ldr	r2, [pc, #180]	; (8003eb0 <HAL_DMA_Start_IT+0x208>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d031      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a2b      	ldr	r2, [pc, #172]	; (8003eb4 <HAL_DMA_Start_IT+0x20c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d02c      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2a      	ldr	r2, [pc, #168]	; (8003eb8 <HAL_DMA_Start_IT+0x210>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d027      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a28      	ldr	r2, [pc, #160]	; (8003ebc <HAL_DMA_Start_IT+0x214>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d022      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a27      	ldr	r2, [pc, #156]	; (8003ec0 <HAL_DMA_Start_IT+0x218>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d01d      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a25      	ldr	r2, [pc, #148]	; (8003ec4 <HAL_DMA_Start_IT+0x21c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d018      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a24      	ldr	r2, [pc, #144]	; (8003ec8 <HAL_DMA_Start_IT+0x220>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d013      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <HAL_DMA_Start_IT+0x224>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00e      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <HAL_DMA_Start_IT+0x228>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d009      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <HAL_DMA_Start_IT+0x22c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d004      	beq.n	8003e64 <HAL_DMA_Start_IT+0x1bc>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <HAL_DMA_Start_IT+0x230>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d101      	bne.n	8003e68 <HAL_DMA_Start_IT+0x1c0>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <HAL_DMA_Start_IT+0x1c2>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d036      	beq.n	8003edc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f023 021e 	bic.w	r2, r3, #30
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0216 	orr.w	r2, r2, #22
 8003e80:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d03e      	beq.n	8003f08 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0208 	orr.w	r2, r2, #8
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e035      	b.n	8003f08 <HAL_DMA_Start_IT+0x260>
 8003e9c:	40020010 	.word	0x40020010
 8003ea0:	40020028 	.word	0x40020028
 8003ea4:	40020040 	.word	0x40020040
 8003ea8:	40020058 	.word	0x40020058
 8003eac:	40020070 	.word	0x40020070
 8003eb0:	40020088 	.word	0x40020088
 8003eb4:	400200a0 	.word	0x400200a0
 8003eb8:	400200b8 	.word	0x400200b8
 8003ebc:	40020410 	.word	0x40020410
 8003ec0:	40020428 	.word	0x40020428
 8003ec4:	40020440 	.word	0x40020440
 8003ec8:	40020458 	.word	0x40020458
 8003ecc:	40020470 	.word	0x40020470
 8003ed0:	40020488 	.word	0x40020488
 8003ed4:	400204a0 	.word	0x400204a0
 8003ed8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 020e 	bic.w	r2, r3, #14
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 020a 	orr.w	r2, r2, #10
 8003eee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0204 	orr.w	r2, r2, #4
 8003f06:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a83      	ldr	r2, [pc, #524]	; (800411c <HAL_DMA_Start_IT+0x474>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d072      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a82      	ldr	r2, [pc, #520]	; (8004120 <HAL_DMA_Start_IT+0x478>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d06d      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a80      	ldr	r2, [pc, #512]	; (8004124 <HAL_DMA_Start_IT+0x47c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d068      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a7f      	ldr	r2, [pc, #508]	; (8004128 <HAL_DMA_Start_IT+0x480>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d063      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a7d      	ldr	r2, [pc, #500]	; (800412c <HAL_DMA_Start_IT+0x484>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d05e      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a7c      	ldr	r2, [pc, #496]	; (8004130 <HAL_DMA_Start_IT+0x488>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d059      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a7a      	ldr	r2, [pc, #488]	; (8004134 <HAL_DMA_Start_IT+0x48c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d054      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a79      	ldr	r2, [pc, #484]	; (8004138 <HAL_DMA_Start_IT+0x490>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d04f      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a77      	ldr	r2, [pc, #476]	; (800413c <HAL_DMA_Start_IT+0x494>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d04a      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a76      	ldr	r2, [pc, #472]	; (8004140 <HAL_DMA_Start_IT+0x498>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d045      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a74      	ldr	r2, [pc, #464]	; (8004144 <HAL_DMA_Start_IT+0x49c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d040      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a73      	ldr	r2, [pc, #460]	; (8004148 <HAL_DMA_Start_IT+0x4a0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d03b      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a71      	ldr	r2, [pc, #452]	; (800414c <HAL_DMA_Start_IT+0x4a4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d036      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a70      	ldr	r2, [pc, #448]	; (8004150 <HAL_DMA_Start_IT+0x4a8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d031      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a6e      	ldr	r2, [pc, #440]	; (8004154 <HAL_DMA_Start_IT+0x4ac>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d02c      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a6d      	ldr	r2, [pc, #436]	; (8004158 <HAL_DMA_Start_IT+0x4b0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d027      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a6b      	ldr	r2, [pc, #428]	; (800415c <HAL_DMA_Start_IT+0x4b4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d022      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a6a      	ldr	r2, [pc, #424]	; (8004160 <HAL_DMA_Start_IT+0x4b8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d01d      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a68      	ldr	r2, [pc, #416]	; (8004164 <HAL_DMA_Start_IT+0x4bc>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d018      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a67      	ldr	r2, [pc, #412]	; (8004168 <HAL_DMA_Start_IT+0x4c0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a65      	ldr	r2, [pc, #404]	; (800416c <HAL_DMA_Start_IT+0x4c4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00e      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a64      	ldr	r2, [pc, #400]	; (8004170 <HAL_DMA_Start_IT+0x4c8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d009      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a62      	ldr	r2, [pc, #392]	; (8004174 <HAL_DMA_Start_IT+0x4cc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d004      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x350>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a61      	ldr	r2, [pc, #388]	; (8004178 <HAL_DMA_Start_IT+0x4d0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <HAL_DMA_Start_IT+0x354>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <HAL_DMA_Start_IT+0x356>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01a      	beq.n	8004038 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800401e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004036:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a37      	ldr	r2, [pc, #220]	; (800411c <HAL_DMA_Start_IT+0x474>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d04a      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a36      	ldr	r2, [pc, #216]	; (8004120 <HAL_DMA_Start_IT+0x478>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d045      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a34      	ldr	r2, [pc, #208]	; (8004124 <HAL_DMA_Start_IT+0x47c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d040      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a33      	ldr	r2, [pc, #204]	; (8004128 <HAL_DMA_Start_IT+0x480>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d03b      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a31      	ldr	r2, [pc, #196]	; (800412c <HAL_DMA_Start_IT+0x484>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d036      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a30      	ldr	r2, [pc, #192]	; (8004130 <HAL_DMA_Start_IT+0x488>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d031      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a2e      	ldr	r2, [pc, #184]	; (8004134 <HAL_DMA_Start_IT+0x48c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02c      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a2d      	ldr	r2, [pc, #180]	; (8004138 <HAL_DMA_Start_IT+0x490>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d027      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a2b      	ldr	r2, [pc, #172]	; (800413c <HAL_DMA_Start_IT+0x494>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a2a      	ldr	r2, [pc, #168]	; (8004140 <HAL_DMA_Start_IT+0x498>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01d      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a28      	ldr	r2, [pc, #160]	; (8004144 <HAL_DMA_Start_IT+0x49c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a27      	ldr	r2, [pc, #156]	; (8004148 <HAL_DMA_Start_IT+0x4a0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a25      	ldr	r2, [pc, #148]	; (800414c <HAL_DMA_Start_IT+0x4a4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a24      	ldr	r2, [pc, #144]	; (8004150 <HAL_DMA_Start_IT+0x4a8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a22      	ldr	r2, [pc, #136]	; (8004154 <HAL_DMA_Start_IT+0x4ac>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_DMA_Start_IT+0x430>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a21      	ldr	r2, [pc, #132]	; (8004158 <HAL_DMA_Start_IT+0x4b0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d108      	bne.n	80040ea <HAL_DMA_Start_IT+0x442>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	e012      	b.n	8004110 <HAL_DMA_Start_IT+0x468>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e009      	b.n	8004110 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004102:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004110:	7dfb      	ldrb	r3, [r7, #23]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40020010 	.word	0x40020010
 8004120:	40020028 	.word	0x40020028
 8004124:	40020040 	.word	0x40020040
 8004128:	40020058 	.word	0x40020058
 800412c:	40020070 	.word	0x40020070
 8004130:	40020088 	.word	0x40020088
 8004134:	400200a0 	.word	0x400200a0
 8004138:	400200b8 	.word	0x400200b8
 800413c:	40020410 	.word	0x40020410
 8004140:	40020428 	.word	0x40020428
 8004144:	40020440 	.word	0x40020440
 8004148:	40020458 	.word	0x40020458
 800414c:	40020470 	.word	0x40020470
 8004150:	40020488 	.word	0x40020488
 8004154:	400204a0 	.word	0x400204a0
 8004158:	400204b8 	.word	0x400204b8
 800415c:	58025408 	.word	0x58025408
 8004160:	5802541c 	.word	0x5802541c
 8004164:	58025430 	.word	0x58025430
 8004168:	58025444 	.word	0x58025444
 800416c:	58025458 	.word	0x58025458
 8004170:	5802546c 	.word	0x5802546c
 8004174:	58025480 	.word	0x58025480
 8004178:	58025494 	.word	0x58025494

0800417c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004184:	f7fd fc3c 	bl	8001a00 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e2dc      	b.n	800474e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d008      	beq.n	80041b2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2280      	movs	r2, #128	; 0x80
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e2cd      	b.n	800474e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a76      	ldr	r2, [pc, #472]	; (8004390 <HAL_DMA_Abort+0x214>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d04a      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a74      	ldr	r2, [pc, #464]	; (8004394 <HAL_DMA_Abort+0x218>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d045      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a73      	ldr	r2, [pc, #460]	; (8004398 <HAL_DMA_Abort+0x21c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d040      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a71      	ldr	r2, [pc, #452]	; (800439c <HAL_DMA_Abort+0x220>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d03b      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a70      	ldr	r2, [pc, #448]	; (80043a0 <HAL_DMA_Abort+0x224>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d036      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a6e      	ldr	r2, [pc, #440]	; (80043a4 <HAL_DMA_Abort+0x228>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d031      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a6d      	ldr	r2, [pc, #436]	; (80043a8 <HAL_DMA_Abort+0x22c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d02c      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a6b      	ldr	r2, [pc, #428]	; (80043ac <HAL_DMA_Abort+0x230>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d027      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a6a      	ldr	r2, [pc, #424]	; (80043b0 <HAL_DMA_Abort+0x234>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d022      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a68      	ldr	r2, [pc, #416]	; (80043b4 <HAL_DMA_Abort+0x238>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d01d      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a67      	ldr	r2, [pc, #412]	; (80043b8 <HAL_DMA_Abort+0x23c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d018      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a65      	ldr	r2, [pc, #404]	; (80043bc <HAL_DMA_Abort+0x240>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d013      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a64      	ldr	r2, [pc, #400]	; (80043c0 <HAL_DMA_Abort+0x244>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00e      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a62      	ldr	r2, [pc, #392]	; (80043c4 <HAL_DMA_Abort+0x248>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d009      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a61      	ldr	r2, [pc, #388]	; (80043c8 <HAL_DMA_Abort+0x24c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d004      	beq.n	8004252 <HAL_DMA_Abort+0xd6>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a5f      	ldr	r2, [pc, #380]	; (80043cc <HAL_DMA_Abort+0x250>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d101      	bne.n	8004256 <HAL_DMA_Abort+0xda>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <HAL_DMA_Abort+0xdc>
 8004256:	2300      	movs	r3, #0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d013      	beq.n	8004284 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 021e 	bic.w	r2, r2, #30
 800426a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800427a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	e00a      	b.n	800429a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 020e 	bic.w	r2, r2, #14
 8004292:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a3c      	ldr	r2, [pc, #240]	; (8004390 <HAL_DMA_Abort+0x214>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d072      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a3a      	ldr	r2, [pc, #232]	; (8004394 <HAL_DMA_Abort+0x218>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d06d      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a39      	ldr	r2, [pc, #228]	; (8004398 <HAL_DMA_Abort+0x21c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d068      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a37      	ldr	r2, [pc, #220]	; (800439c <HAL_DMA_Abort+0x220>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d063      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a36      	ldr	r2, [pc, #216]	; (80043a0 <HAL_DMA_Abort+0x224>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d05e      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a34      	ldr	r2, [pc, #208]	; (80043a4 <HAL_DMA_Abort+0x228>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d059      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <HAL_DMA_Abort+0x22c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d054      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a31      	ldr	r2, [pc, #196]	; (80043ac <HAL_DMA_Abort+0x230>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d04f      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a30      	ldr	r2, [pc, #192]	; (80043b0 <HAL_DMA_Abort+0x234>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d04a      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a2e      	ldr	r2, [pc, #184]	; (80043b4 <HAL_DMA_Abort+0x238>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d045      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a2d      	ldr	r2, [pc, #180]	; (80043b8 <HAL_DMA_Abort+0x23c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d040      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a2b      	ldr	r2, [pc, #172]	; (80043bc <HAL_DMA_Abort+0x240>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d03b      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a2a      	ldr	r2, [pc, #168]	; (80043c0 <HAL_DMA_Abort+0x244>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d036      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a28      	ldr	r2, [pc, #160]	; (80043c4 <HAL_DMA_Abort+0x248>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d031      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a27      	ldr	r2, [pc, #156]	; (80043c8 <HAL_DMA_Abort+0x24c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d02c      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a25      	ldr	r2, [pc, #148]	; (80043cc <HAL_DMA_Abort+0x250>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d027      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a24      	ldr	r2, [pc, #144]	; (80043d0 <HAL_DMA_Abort+0x254>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d022      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a22      	ldr	r2, [pc, #136]	; (80043d4 <HAL_DMA_Abort+0x258>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d01d      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a21      	ldr	r2, [pc, #132]	; (80043d8 <HAL_DMA_Abort+0x25c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d018      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <HAL_DMA_Abort+0x260>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d013      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <HAL_DMA_Abort+0x264>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1c      	ldr	r2, [pc, #112]	; (80043e4 <HAL_DMA_Abort+0x268>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <HAL_DMA_Abort+0x26c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_DMA_Abort+0x20e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a19      	ldr	r2, [pc, #100]	; (80043ec <HAL_DMA_Abort+0x270>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d132      	bne.n	80043f0 <HAL_DMA_Abort+0x274>
 800438a:	2301      	movs	r3, #1
 800438c:	e031      	b.n	80043f2 <HAL_DMA_Abort+0x276>
 800438e:	bf00      	nop
 8004390:	40020010 	.word	0x40020010
 8004394:	40020028 	.word	0x40020028
 8004398:	40020040 	.word	0x40020040
 800439c:	40020058 	.word	0x40020058
 80043a0:	40020070 	.word	0x40020070
 80043a4:	40020088 	.word	0x40020088
 80043a8:	400200a0 	.word	0x400200a0
 80043ac:	400200b8 	.word	0x400200b8
 80043b0:	40020410 	.word	0x40020410
 80043b4:	40020428 	.word	0x40020428
 80043b8:	40020440 	.word	0x40020440
 80043bc:	40020458 	.word	0x40020458
 80043c0:	40020470 	.word	0x40020470
 80043c4:	40020488 	.word	0x40020488
 80043c8:	400204a0 	.word	0x400204a0
 80043cc:	400204b8 	.word	0x400204b8
 80043d0:	58025408 	.word	0x58025408
 80043d4:	5802541c 	.word	0x5802541c
 80043d8:	58025430 	.word	0x58025430
 80043dc:	58025444 	.word	0x58025444
 80043e0:	58025458 	.word	0x58025458
 80043e4:	5802546c 	.word	0x5802546c
 80043e8:	58025480 	.word	0x58025480
 80043ec:	58025494 	.word	0x58025494
 80043f0:	2300      	movs	r3, #0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004400:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004404:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a6d      	ldr	r2, [pc, #436]	; (80045c0 <HAL_DMA_Abort+0x444>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d04a      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a6b      	ldr	r2, [pc, #428]	; (80045c4 <HAL_DMA_Abort+0x448>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d045      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a6a      	ldr	r2, [pc, #424]	; (80045c8 <HAL_DMA_Abort+0x44c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d040      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a68      	ldr	r2, [pc, #416]	; (80045cc <HAL_DMA_Abort+0x450>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d03b      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a67      	ldr	r2, [pc, #412]	; (80045d0 <HAL_DMA_Abort+0x454>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d036      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a65      	ldr	r2, [pc, #404]	; (80045d4 <HAL_DMA_Abort+0x458>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d031      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a64      	ldr	r2, [pc, #400]	; (80045d8 <HAL_DMA_Abort+0x45c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d02c      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a62      	ldr	r2, [pc, #392]	; (80045dc <HAL_DMA_Abort+0x460>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d027      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a61      	ldr	r2, [pc, #388]	; (80045e0 <HAL_DMA_Abort+0x464>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d022      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a5f      	ldr	r2, [pc, #380]	; (80045e4 <HAL_DMA_Abort+0x468>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d01d      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a5e      	ldr	r2, [pc, #376]	; (80045e8 <HAL_DMA_Abort+0x46c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d018      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a5c      	ldr	r2, [pc, #368]	; (80045ec <HAL_DMA_Abort+0x470>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a5b      	ldr	r2, [pc, #364]	; (80045f0 <HAL_DMA_Abort+0x474>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00e      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a59      	ldr	r2, [pc, #356]	; (80045f4 <HAL_DMA_Abort+0x478>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d009      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a58      	ldr	r2, [pc, #352]	; (80045f8 <HAL_DMA_Abort+0x47c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d004      	beq.n	80044a6 <HAL_DMA_Abort+0x32a>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a56      	ldr	r2, [pc, #344]	; (80045fc <HAL_DMA_Abort+0x480>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d108      	bne.n	80044b8 <HAL_DMA_Abort+0x33c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	e007      	b.n	80044c8 <HAL_DMA_Abort+0x34c>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0201 	bic.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80044c8:	e013      	b.n	80044f2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044ca:	f7fd fa99 	bl	8001a00 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b05      	cmp	r3, #5
 80044d6:	d90c      	bls.n	80044f2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2203      	movs	r2, #3
 80044e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e12d      	b.n	800474e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e5      	bne.n	80044ca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a2f      	ldr	r2, [pc, #188]	; (80045c0 <HAL_DMA_Abort+0x444>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d04a      	beq.n	800459e <HAL_DMA_Abort+0x422>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a2d      	ldr	r2, [pc, #180]	; (80045c4 <HAL_DMA_Abort+0x448>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d045      	beq.n	800459e <HAL_DMA_Abort+0x422>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <HAL_DMA_Abort+0x44c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d040      	beq.n	800459e <HAL_DMA_Abort+0x422>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a2a      	ldr	r2, [pc, #168]	; (80045cc <HAL_DMA_Abort+0x450>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d03b      	beq.n	800459e <HAL_DMA_Abort+0x422>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a29      	ldr	r2, [pc, #164]	; (80045d0 <HAL_DMA_Abort+0x454>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d036      	beq.n	800459e <HAL_DMA_Abort+0x422>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a27      	ldr	r2, [pc, #156]	; (80045d4 <HAL_DMA_Abort+0x458>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d031      	beq.n	800459e <HAL_DMA_Abort+0x422>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <HAL_DMA_Abort+0x45c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d02c      	beq.n	800459e <HAL_DMA_Abort+0x422>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a24      	ldr	r2, [pc, #144]	; (80045dc <HAL_DMA_Abort+0x460>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d027      	beq.n	800459e <HAL_DMA_Abort+0x422>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a23      	ldr	r2, [pc, #140]	; (80045e0 <HAL_DMA_Abort+0x464>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d022      	beq.n	800459e <HAL_DMA_Abort+0x422>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a21      	ldr	r2, [pc, #132]	; (80045e4 <HAL_DMA_Abort+0x468>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d01d      	beq.n	800459e <HAL_DMA_Abort+0x422>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a20      	ldr	r2, [pc, #128]	; (80045e8 <HAL_DMA_Abort+0x46c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d018      	beq.n	800459e <HAL_DMA_Abort+0x422>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <HAL_DMA_Abort+0x470>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d013      	beq.n	800459e <HAL_DMA_Abort+0x422>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <HAL_DMA_Abort+0x474>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00e      	beq.n	800459e <HAL_DMA_Abort+0x422>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <HAL_DMA_Abort+0x478>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d009      	beq.n	800459e <HAL_DMA_Abort+0x422>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1a      	ldr	r2, [pc, #104]	; (80045f8 <HAL_DMA_Abort+0x47c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d004      	beq.n	800459e <HAL_DMA_Abort+0x422>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a18      	ldr	r2, [pc, #96]	; (80045fc <HAL_DMA_Abort+0x480>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d101      	bne.n	80045a2 <HAL_DMA_Abort+0x426>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_DMA_Abort+0x428>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d02b      	beq.n	8004600 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b2:	f003 031f 	and.w	r3, r3, #31
 80045b6:	223f      	movs	r2, #63	; 0x3f
 80045b8:	409a      	lsls	r2, r3
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	609a      	str	r2, [r3, #8]
 80045be:	e02a      	b.n	8004616 <HAL_DMA_Abort+0x49a>
 80045c0:	40020010 	.word	0x40020010
 80045c4:	40020028 	.word	0x40020028
 80045c8:	40020040 	.word	0x40020040
 80045cc:	40020058 	.word	0x40020058
 80045d0:	40020070 	.word	0x40020070
 80045d4:	40020088 	.word	0x40020088
 80045d8:	400200a0 	.word	0x400200a0
 80045dc:	400200b8 	.word	0x400200b8
 80045e0:	40020410 	.word	0x40020410
 80045e4:	40020428 	.word	0x40020428
 80045e8:	40020440 	.word	0x40020440
 80045ec:	40020458 	.word	0x40020458
 80045f0:	40020470 	.word	0x40020470
 80045f4:	40020488 	.word	0x40020488
 80045f8:	400204a0 	.word	0x400204a0
 80045fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004604:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	2201      	movs	r2, #1
 8004610:	409a      	lsls	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a4f      	ldr	r2, [pc, #316]	; (8004758 <HAL_DMA_Abort+0x5dc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d072      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a4d      	ldr	r2, [pc, #308]	; (800475c <HAL_DMA_Abort+0x5e0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d06d      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a4c      	ldr	r2, [pc, #304]	; (8004760 <HAL_DMA_Abort+0x5e4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d068      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a4a      	ldr	r2, [pc, #296]	; (8004764 <HAL_DMA_Abort+0x5e8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d063      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a49      	ldr	r2, [pc, #292]	; (8004768 <HAL_DMA_Abort+0x5ec>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d05e      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a47      	ldr	r2, [pc, #284]	; (800476c <HAL_DMA_Abort+0x5f0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d059      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a46      	ldr	r2, [pc, #280]	; (8004770 <HAL_DMA_Abort+0x5f4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d054      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a44      	ldr	r2, [pc, #272]	; (8004774 <HAL_DMA_Abort+0x5f8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d04f      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a43      	ldr	r2, [pc, #268]	; (8004778 <HAL_DMA_Abort+0x5fc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d04a      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a41      	ldr	r2, [pc, #260]	; (800477c <HAL_DMA_Abort+0x600>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d045      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a40      	ldr	r2, [pc, #256]	; (8004780 <HAL_DMA_Abort+0x604>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d040      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a3e      	ldr	r2, [pc, #248]	; (8004784 <HAL_DMA_Abort+0x608>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d03b      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a3d      	ldr	r2, [pc, #244]	; (8004788 <HAL_DMA_Abort+0x60c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d036      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a3b      	ldr	r2, [pc, #236]	; (800478c <HAL_DMA_Abort+0x610>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d031      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a3a      	ldr	r2, [pc, #232]	; (8004790 <HAL_DMA_Abort+0x614>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d02c      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a38      	ldr	r2, [pc, #224]	; (8004794 <HAL_DMA_Abort+0x618>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d027      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a37      	ldr	r2, [pc, #220]	; (8004798 <HAL_DMA_Abort+0x61c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d022      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a35      	ldr	r2, [pc, #212]	; (800479c <HAL_DMA_Abort+0x620>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01d      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a34      	ldr	r2, [pc, #208]	; (80047a0 <HAL_DMA_Abort+0x624>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a32      	ldr	r2, [pc, #200]	; (80047a4 <HAL_DMA_Abort+0x628>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a31      	ldr	r2, [pc, #196]	; (80047a8 <HAL_DMA_Abort+0x62c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a2f      	ldr	r2, [pc, #188]	; (80047ac <HAL_DMA_Abort+0x630>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2e      	ldr	r2, [pc, #184]	; (80047b0 <HAL_DMA_Abort+0x634>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_DMA_Abort+0x58a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a2c      	ldr	r2, [pc, #176]	; (80047b4 <HAL_DMA_Abort+0x638>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d101      	bne.n	800470a <HAL_DMA_Abort+0x58e>
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_DMA_Abort+0x590>
 800470a:	2300      	movs	r3, #0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d015      	beq.n	800473c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004718:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800472c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004730:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800473a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40020010 	.word	0x40020010
 800475c:	40020028 	.word	0x40020028
 8004760:	40020040 	.word	0x40020040
 8004764:	40020058 	.word	0x40020058
 8004768:	40020070 	.word	0x40020070
 800476c:	40020088 	.word	0x40020088
 8004770:	400200a0 	.word	0x400200a0
 8004774:	400200b8 	.word	0x400200b8
 8004778:	40020410 	.word	0x40020410
 800477c:	40020428 	.word	0x40020428
 8004780:	40020440 	.word	0x40020440
 8004784:	40020458 	.word	0x40020458
 8004788:	40020470 	.word	0x40020470
 800478c:	40020488 	.word	0x40020488
 8004790:	400204a0 	.word	0x400204a0
 8004794:	400204b8 	.word	0x400204b8
 8004798:	58025408 	.word	0x58025408
 800479c:	5802541c 	.word	0x5802541c
 80047a0:	58025430 	.word	0x58025430
 80047a4:	58025444 	.word	0x58025444
 80047a8:	58025458 	.word	0x58025458
 80047ac:	5802546c 	.word	0x5802546c
 80047b0:	58025480 	.word	0x58025480
 80047b4:	58025494 	.word	0x58025494

080047b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047c4:	4b67      	ldr	r3, [pc, #412]	; (8004964 <HAL_DMA_IRQHandler+0x1ac>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a67      	ldr	r2, [pc, #412]	; (8004968 <HAL_DMA_IRQHandler+0x1b0>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	0a9b      	lsrs	r3, r3, #10
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a5f      	ldr	r2, [pc, #380]	; (800496c <HAL_DMA_IRQHandler+0x1b4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d04a      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a5d      	ldr	r2, [pc, #372]	; (8004970 <HAL_DMA_IRQHandler+0x1b8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d045      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a5c      	ldr	r2, [pc, #368]	; (8004974 <HAL_DMA_IRQHandler+0x1bc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d040      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a5a      	ldr	r2, [pc, #360]	; (8004978 <HAL_DMA_IRQHandler+0x1c0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d03b      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a59      	ldr	r2, [pc, #356]	; (800497c <HAL_DMA_IRQHandler+0x1c4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d036      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a57      	ldr	r2, [pc, #348]	; (8004980 <HAL_DMA_IRQHandler+0x1c8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d031      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a56      	ldr	r2, [pc, #344]	; (8004984 <HAL_DMA_IRQHandler+0x1cc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d02c      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a54      	ldr	r2, [pc, #336]	; (8004988 <HAL_DMA_IRQHandler+0x1d0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d027      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a53      	ldr	r2, [pc, #332]	; (800498c <HAL_DMA_IRQHandler+0x1d4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d022      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a51      	ldr	r2, [pc, #324]	; (8004990 <HAL_DMA_IRQHandler+0x1d8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01d      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a50      	ldr	r2, [pc, #320]	; (8004994 <HAL_DMA_IRQHandler+0x1dc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d018      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a4e      	ldr	r2, [pc, #312]	; (8004998 <HAL_DMA_IRQHandler+0x1e0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a4d      	ldr	r2, [pc, #308]	; (800499c <HAL_DMA_IRQHandler+0x1e4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00e      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a4b      	ldr	r2, [pc, #300]	; (80049a0 <HAL_DMA_IRQHandler+0x1e8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d009      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a4a      	ldr	r2, [pc, #296]	; (80049a4 <HAL_DMA_IRQHandler+0x1ec>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a48      	ldr	r2, [pc, #288]	; (80049a8 <HAL_DMA_IRQHandler+0x1f0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d101      	bne.n	800488e <HAL_DMA_IRQHandler+0xd6>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <HAL_DMA_IRQHandler+0xd8>
 800488e:	2300      	movs	r3, #0
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 842b 	beq.w	80050ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489a:	f003 031f 	and.w	r3, r3, #31
 800489e:	2208      	movs	r2, #8
 80048a0:	409a      	lsls	r2, r3
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80a2 	beq.w	80049f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a2e      	ldr	r2, [pc, #184]	; (800496c <HAL_DMA_IRQHandler+0x1b4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d04a      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a2d      	ldr	r2, [pc, #180]	; (8004970 <HAL_DMA_IRQHandler+0x1b8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d045      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a2b      	ldr	r2, [pc, #172]	; (8004974 <HAL_DMA_IRQHandler+0x1bc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d040      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a2a      	ldr	r2, [pc, #168]	; (8004978 <HAL_DMA_IRQHandler+0x1c0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d03b      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a28      	ldr	r2, [pc, #160]	; (800497c <HAL_DMA_IRQHandler+0x1c4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d036      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a27      	ldr	r2, [pc, #156]	; (8004980 <HAL_DMA_IRQHandler+0x1c8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d031      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a25      	ldr	r2, [pc, #148]	; (8004984 <HAL_DMA_IRQHandler+0x1cc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d02c      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a24      	ldr	r2, [pc, #144]	; (8004988 <HAL_DMA_IRQHandler+0x1d0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d027      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a22      	ldr	r2, [pc, #136]	; (800498c <HAL_DMA_IRQHandler+0x1d4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d022      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a21      	ldr	r2, [pc, #132]	; (8004990 <HAL_DMA_IRQHandler+0x1d8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d01d      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <HAL_DMA_IRQHandler+0x1dc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d018      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <HAL_DMA_IRQHandler+0x1e0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d013      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a1c      	ldr	r2, [pc, #112]	; (800499c <HAL_DMA_IRQHandler+0x1e4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00e      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1b      	ldr	r2, [pc, #108]	; (80049a0 <HAL_DMA_IRQHandler+0x1e8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d009      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a19      	ldr	r2, [pc, #100]	; (80049a4 <HAL_DMA_IRQHandler+0x1ec>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a18      	ldr	r2, [pc, #96]	; (80049a8 <HAL_DMA_IRQHandler+0x1f0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d12f      	bne.n	80049ac <HAL_DMA_IRQHandler+0x1f4>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	bf14      	ite	ne
 800495a:	2301      	movne	r3, #1
 800495c:	2300      	moveq	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	e02e      	b.n	80049c0 <HAL_DMA_IRQHandler+0x208>
 8004962:	bf00      	nop
 8004964:	24000000 	.word	0x24000000
 8004968:	1b4e81b5 	.word	0x1b4e81b5
 800496c:	40020010 	.word	0x40020010
 8004970:	40020028 	.word	0x40020028
 8004974:	40020040 	.word	0x40020040
 8004978:	40020058 	.word	0x40020058
 800497c:	40020070 	.word	0x40020070
 8004980:	40020088 	.word	0x40020088
 8004984:	400200a0 	.word	0x400200a0
 8004988:	400200b8 	.word	0x400200b8
 800498c:	40020410 	.word	0x40020410
 8004990:	40020428 	.word	0x40020428
 8004994:	40020440 	.word	0x40020440
 8004998:	40020458 	.word	0x40020458
 800499c:	40020470 	.word	0x40020470
 80049a0:	40020488 	.word	0x40020488
 80049a4:	400204a0 	.word	0x400204a0
 80049a8:	400204b8 	.word	0x400204b8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf14      	ite	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	2300      	moveq	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d015      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0204 	bic.w	r2, r2, #4
 80049d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	2208      	movs	r2, #8
 80049de:	409a      	lsls	r2, r3
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	f043 0201 	orr.w	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	fa22 f303 	lsr.w	r3, r2, r3
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d06e      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a69      	ldr	r2, [pc, #420]	; (8004bb0 <HAL_DMA_IRQHandler+0x3f8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d04a      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a67      	ldr	r2, [pc, #412]	; (8004bb4 <HAL_DMA_IRQHandler+0x3fc>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d045      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a66      	ldr	r2, [pc, #408]	; (8004bb8 <HAL_DMA_IRQHandler+0x400>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d040      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a64      	ldr	r2, [pc, #400]	; (8004bbc <HAL_DMA_IRQHandler+0x404>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d03b      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a63      	ldr	r2, [pc, #396]	; (8004bc0 <HAL_DMA_IRQHandler+0x408>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d036      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a61      	ldr	r2, [pc, #388]	; (8004bc4 <HAL_DMA_IRQHandler+0x40c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d031      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a60      	ldr	r2, [pc, #384]	; (8004bc8 <HAL_DMA_IRQHandler+0x410>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d02c      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a5e      	ldr	r2, [pc, #376]	; (8004bcc <HAL_DMA_IRQHandler+0x414>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d027      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a5d      	ldr	r2, [pc, #372]	; (8004bd0 <HAL_DMA_IRQHandler+0x418>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d022      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a5b      	ldr	r2, [pc, #364]	; (8004bd4 <HAL_DMA_IRQHandler+0x41c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01d      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a5a      	ldr	r2, [pc, #360]	; (8004bd8 <HAL_DMA_IRQHandler+0x420>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d018      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a58      	ldr	r2, [pc, #352]	; (8004bdc <HAL_DMA_IRQHandler+0x424>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a57      	ldr	r2, [pc, #348]	; (8004be0 <HAL_DMA_IRQHandler+0x428>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00e      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a55      	ldr	r2, [pc, #340]	; (8004be4 <HAL_DMA_IRQHandler+0x42c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d009      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a54      	ldr	r2, [pc, #336]	; (8004be8 <HAL_DMA_IRQHandler+0x430>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a52      	ldr	r2, [pc, #328]	; (8004bec <HAL_DMA_IRQHandler+0x434>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d10a      	bne.n	8004abc <HAL_DMA_IRQHandler+0x304>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bf14      	ite	ne
 8004ab4:	2301      	movne	r3, #1
 8004ab6:	2300      	moveq	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	e003      	b.n	8004ac4 <HAL_DMA_IRQHandler+0x30c>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00d      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004adc:	f043 0202 	orr.w	r2, r3, #2
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	2204      	movs	r2, #4
 8004aee:	409a      	lsls	r2, r3
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 808f 	beq.w	8004c18 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <HAL_DMA_IRQHandler+0x3f8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d04a      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a2a      	ldr	r2, [pc, #168]	; (8004bb4 <HAL_DMA_IRQHandler+0x3fc>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d045      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a29      	ldr	r2, [pc, #164]	; (8004bb8 <HAL_DMA_IRQHandler+0x400>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d040      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a27      	ldr	r2, [pc, #156]	; (8004bbc <HAL_DMA_IRQHandler+0x404>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d03b      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a26      	ldr	r2, [pc, #152]	; (8004bc0 <HAL_DMA_IRQHandler+0x408>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d036      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a24      	ldr	r2, [pc, #144]	; (8004bc4 <HAL_DMA_IRQHandler+0x40c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d031      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a23      	ldr	r2, [pc, #140]	; (8004bc8 <HAL_DMA_IRQHandler+0x410>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d02c      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <HAL_DMA_IRQHandler+0x414>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d027      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a20      	ldr	r2, [pc, #128]	; (8004bd0 <HAL_DMA_IRQHandler+0x418>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d022      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1e      	ldr	r2, [pc, #120]	; (8004bd4 <HAL_DMA_IRQHandler+0x41c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d01d      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1d      	ldr	r2, [pc, #116]	; (8004bd8 <HAL_DMA_IRQHandler+0x420>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d018      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <HAL_DMA_IRQHandler+0x424>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <HAL_DMA_IRQHandler+0x428>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00e      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <HAL_DMA_IRQHandler+0x42c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d009      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <HAL_DMA_IRQHandler+0x430>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a15      	ldr	r2, [pc, #84]	; (8004bec <HAL_DMA_IRQHandler+0x434>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d12a      	bne.n	8004bf0 <HAL_DMA_IRQHandler+0x438>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e023      	b.n	8004bf8 <HAL_DMA_IRQHandler+0x440>
 8004bb0:	40020010 	.word	0x40020010
 8004bb4:	40020028 	.word	0x40020028
 8004bb8:	40020040 	.word	0x40020040
 8004bbc:	40020058 	.word	0x40020058
 8004bc0:	40020070 	.word	0x40020070
 8004bc4:	40020088 	.word	0x40020088
 8004bc8:	400200a0 	.word	0x400200a0
 8004bcc:	400200b8 	.word	0x400200b8
 8004bd0:	40020410 	.word	0x40020410
 8004bd4:	40020428 	.word	0x40020428
 8004bd8:	40020440 	.word	0x40020440
 8004bdc:	40020458 	.word	0x40020458
 8004be0:	40020470 	.word	0x40020470
 8004be4:	40020488 	.word	0x40020488
 8004be8:	400204a0 	.word	0x400204a0
 8004bec:	400204b8 	.word	0x400204b8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00d      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	2204      	movs	r2, #4
 8004c06:	409a      	lsls	r2, r3
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c10:	f043 0204 	orr.w	r2, r3, #4
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2210      	movs	r2, #16
 8004c22:	409a      	lsls	r2, r3
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 80a6 	beq.w	8004d7a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a85      	ldr	r2, [pc, #532]	; (8004e48 <HAL_DMA_IRQHandler+0x690>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d04a      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a83      	ldr	r2, [pc, #524]	; (8004e4c <HAL_DMA_IRQHandler+0x694>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d045      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a82      	ldr	r2, [pc, #520]	; (8004e50 <HAL_DMA_IRQHandler+0x698>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d040      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a80      	ldr	r2, [pc, #512]	; (8004e54 <HAL_DMA_IRQHandler+0x69c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d03b      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a7f      	ldr	r2, [pc, #508]	; (8004e58 <HAL_DMA_IRQHandler+0x6a0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d036      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a7d      	ldr	r2, [pc, #500]	; (8004e5c <HAL_DMA_IRQHandler+0x6a4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d031      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a7c      	ldr	r2, [pc, #496]	; (8004e60 <HAL_DMA_IRQHandler+0x6a8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d02c      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a7a      	ldr	r2, [pc, #488]	; (8004e64 <HAL_DMA_IRQHandler+0x6ac>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d027      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a79      	ldr	r2, [pc, #484]	; (8004e68 <HAL_DMA_IRQHandler+0x6b0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d022      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a77      	ldr	r2, [pc, #476]	; (8004e6c <HAL_DMA_IRQHandler+0x6b4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01d      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a76      	ldr	r2, [pc, #472]	; (8004e70 <HAL_DMA_IRQHandler+0x6b8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d018      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a74      	ldr	r2, [pc, #464]	; (8004e74 <HAL_DMA_IRQHandler+0x6bc>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a73      	ldr	r2, [pc, #460]	; (8004e78 <HAL_DMA_IRQHandler+0x6c0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00e      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a71      	ldr	r2, [pc, #452]	; (8004e7c <HAL_DMA_IRQHandler+0x6c4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d009      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a70      	ldr	r2, [pc, #448]	; (8004e80 <HAL_DMA_IRQHandler+0x6c8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d004      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a6e      	ldr	r2, [pc, #440]	; (8004e84 <HAL_DMA_IRQHandler+0x6cc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d10a      	bne.n	8004ce4 <HAL_DMA_IRQHandler+0x52c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf14      	ite	ne
 8004cdc:	2301      	movne	r3, #1
 8004cde:	2300      	moveq	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	e009      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x540>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bf14      	ite	ne
 8004cf2:	2301      	movne	r3, #1
 8004cf4:	2300      	moveq	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d03e      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2210      	movs	r2, #16
 8004d06:	409a      	lsls	r2, r3
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d018      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d108      	bne.n	8004d3a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d024      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	4798      	blx	r3
 8004d38:	e01f      	b.n	8004d7a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01b      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
 8004d4a:	e016      	b.n	8004d7a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d107      	bne.n	8004d6a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0208 	bic.w	r2, r2, #8
 8004d68:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	2220      	movs	r2, #32
 8004d84:	409a      	lsls	r2, r3
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 8110 	beq.w	8004fb0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a2c      	ldr	r2, [pc, #176]	; (8004e48 <HAL_DMA_IRQHandler+0x690>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d04a      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a2b      	ldr	r2, [pc, #172]	; (8004e4c <HAL_DMA_IRQHandler+0x694>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d045      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a29      	ldr	r2, [pc, #164]	; (8004e50 <HAL_DMA_IRQHandler+0x698>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d040      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a28      	ldr	r2, [pc, #160]	; (8004e54 <HAL_DMA_IRQHandler+0x69c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d03b      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a26      	ldr	r2, [pc, #152]	; (8004e58 <HAL_DMA_IRQHandler+0x6a0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d036      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a25      	ldr	r2, [pc, #148]	; (8004e5c <HAL_DMA_IRQHandler+0x6a4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d031      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <HAL_DMA_IRQHandler+0x6a8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d02c      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a22      	ldr	r2, [pc, #136]	; (8004e64 <HAL_DMA_IRQHandler+0x6ac>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d027      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a20      	ldr	r2, [pc, #128]	; (8004e68 <HAL_DMA_IRQHandler+0x6b0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d022      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1f      	ldr	r2, [pc, #124]	; (8004e6c <HAL_DMA_IRQHandler+0x6b4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d01d      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1d      	ldr	r2, [pc, #116]	; (8004e70 <HAL_DMA_IRQHandler+0x6b8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d018      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <HAL_DMA_IRQHandler+0x6bc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d013      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1a      	ldr	r2, [pc, #104]	; (8004e78 <HAL_DMA_IRQHandler+0x6c0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00e      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a19      	ldr	r2, [pc, #100]	; (8004e7c <HAL_DMA_IRQHandler+0x6c4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d009      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <HAL_DMA_IRQHandler+0x6c8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a16      	ldr	r2, [pc, #88]	; (8004e84 <HAL_DMA_IRQHandler+0x6cc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d12b      	bne.n	8004e88 <HAL_DMA_IRQHandler+0x6d0>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bf14      	ite	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	2300      	moveq	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	e02a      	b.n	8004e9c <HAL_DMA_IRQHandler+0x6e4>
 8004e46:	bf00      	nop
 8004e48:	40020010 	.word	0x40020010
 8004e4c:	40020028 	.word	0x40020028
 8004e50:	40020040 	.word	0x40020040
 8004e54:	40020058 	.word	0x40020058
 8004e58:	40020070 	.word	0x40020070
 8004e5c:	40020088 	.word	0x40020088
 8004e60:	400200a0 	.word	0x400200a0
 8004e64:	400200b8 	.word	0x400200b8
 8004e68:	40020410 	.word	0x40020410
 8004e6c:	40020428 	.word	0x40020428
 8004e70:	40020440 	.word	0x40020440
 8004e74:	40020458 	.word	0x40020458
 8004e78:	40020470 	.word	0x40020470
 8004e7c:	40020488 	.word	0x40020488
 8004e80:	400204a0 	.word	0x400204a0
 8004e84:	400204b8 	.word	0x400204b8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bf14      	ite	ne
 8004e96:	2301      	movne	r3, #1
 8004e98:	2300      	moveq	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 8087 	beq.w	8004fb0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea6:	f003 031f 	and.w	r3, r3, #31
 8004eaa:	2220      	movs	r2, #32
 8004eac:	409a      	lsls	r2, r3
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d139      	bne.n	8004f32 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0216 	bic.w	r2, r2, #22
 8004ecc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695a      	ldr	r2, [r3, #20]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004edc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <HAL_DMA_IRQHandler+0x736>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d007      	beq.n	8004efe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0208 	bic.w	r2, r2, #8
 8004efc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	223f      	movs	r2, #63	; 0x3f
 8004f08:	409a      	lsls	r2, r3
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 834a 	beq.w	80055bc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	4798      	blx	r3
          }
          return;
 8004f30:	e344      	b.n	80055bc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d018      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d108      	bne.n	8004f60 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d02c      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
 8004f5e:	e027      	b.n	8004fb0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d023      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	4798      	blx	r3
 8004f70:	e01e      	b.n	8004fb0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10f      	bne.n	8004fa0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0210 	bic.w	r2, r2, #16
 8004f8e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 8306 	beq.w	80055c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 8088 	beq.w	80050d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2204      	movs	r2, #4
 8004fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a7a      	ldr	r2, [pc, #488]	; (80051c0 <HAL_DMA_IRQHandler+0xa08>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d04a      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a79      	ldr	r2, [pc, #484]	; (80051c4 <HAL_DMA_IRQHandler+0xa0c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d045      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a77      	ldr	r2, [pc, #476]	; (80051c8 <HAL_DMA_IRQHandler+0xa10>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d040      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a76      	ldr	r2, [pc, #472]	; (80051cc <HAL_DMA_IRQHandler+0xa14>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d03b      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a74      	ldr	r2, [pc, #464]	; (80051d0 <HAL_DMA_IRQHandler+0xa18>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d036      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a73      	ldr	r2, [pc, #460]	; (80051d4 <HAL_DMA_IRQHandler+0xa1c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d031      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a71      	ldr	r2, [pc, #452]	; (80051d8 <HAL_DMA_IRQHandler+0xa20>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d02c      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a70      	ldr	r2, [pc, #448]	; (80051dc <HAL_DMA_IRQHandler+0xa24>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d027      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a6e      	ldr	r2, [pc, #440]	; (80051e0 <HAL_DMA_IRQHandler+0xa28>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d022      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a6d      	ldr	r2, [pc, #436]	; (80051e4 <HAL_DMA_IRQHandler+0xa2c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d01d      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a6b      	ldr	r2, [pc, #428]	; (80051e8 <HAL_DMA_IRQHandler+0xa30>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d018      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a6a      	ldr	r2, [pc, #424]	; (80051ec <HAL_DMA_IRQHandler+0xa34>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d013      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a68      	ldr	r2, [pc, #416]	; (80051f0 <HAL_DMA_IRQHandler+0xa38>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00e      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a67      	ldr	r2, [pc, #412]	; (80051f4 <HAL_DMA_IRQHandler+0xa3c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d009      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a65      	ldr	r2, [pc, #404]	; (80051f8 <HAL_DMA_IRQHandler+0xa40>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a64      	ldr	r2, [pc, #400]	; (80051fc <HAL_DMA_IRQHandler+0xa44>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d108      	bne.n	8005082 <HAL_DMA_IRQHandler+0x8ca>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	e007      	b.n	8005092 <HAL_DMA_IRQHandler+0x8da>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3301      	adds	r3, #1
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509a:	429a      	cmp	r2, r3
 800509c:	d307      	bcc.n	80050ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1f2      	bne.n	8005092 <HAL_DMA_IRQHandler+0x8da>
 80050ac:	e000      	b.n	80050b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80050ae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d004      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2203      	movs	r2, #3
 80050c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80050c6:	e003      	b.n	80050d0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8272 	beq.w	80055c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	4798      	blx	r3
 80050ea:	e26c      	b.n	80055c6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a43      	ldr	r2, [pc, #268]	; (8005200 <HAL_DMA_IRQHandler+0xa48>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d022      	beq.n	800513c <HAL_DMA_IRQHandler+0x984>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a42      	ldr	r2, [pc, #264]	; (8005204 <HAL_DMA_IRQHandler+0xa4c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d01d      	beq.n	800513c <HAL_DMA_IRQHandler+0x984>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a40      	ldr	r2, [pc, #256]	; (8005208 <HAL_DMA_IRQHandler+0xa50>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d018      	beq.n	800513c <HAL_DMA_IRQHandler+0x984>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a3f      	ldr	r2, [pc, #252]	; (800520c <HAL_DMA_IRQHandler+0xa54>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d013      	beq.n	800513c <HAL_DMA_IRQHandler+0x984>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a3d      	ldr	r2, [pc, #244]	; (8005210 <HAL_DMA_IRQHandler+0xa58>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00e      	beq.n	800513c <HAL_DMA_IRQHandler+0x984>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a3c      	ldr	r2, [pc, #240]	; (8005214 <HAL_DMA_IRQHandler+0xa5c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d009      	beq.n	800513c <HAL_DMA_IRQHandler+0x984>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a3a      	ldr	r2, [pc, #232]	; (8005218 <HAL_DMA_IRQHandler+0xa60>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d004      	beq.n	800513c <HAL_DMA_IRQHandler+0x984>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a39      	ldr	r2, [pc, #228]	; (800521c <HAL_DMA_IRQHandler+0xa64>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d101      	bne.n	8005140 <HAL_DMA_IRQHandler+0x988>
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <HAL_DMA_IRQHandler+0x98a>
 8005140:	2300      	movs	r3, #0
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 823f 	beq.w	80055c6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005154:	f003 031f 	and.w	r3, r3, #31
 8005158:	2204      	movs	r2, #4
 800515a:	409a      	lsls	r2, r3
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	4013      	ands	r3, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 80cd 	beq.w	8005300 <HAL_DMA_IRQHandler+0xb48>
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80c7 	beq.w	8005300 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	2204      	movs	r2, #4
 800517c:	409a      	lsls	r2, r3
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d049      	beq.n	8005220 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 8210 	beq.w	80055c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051a8:	e20a      	b.n	80055c0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8206 	beq.w	80055c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051bc:	e200      	b.n	80055c0 <HAL_DMA_IRQHandler+0xe08>
 80051be:	bf00      	nop
 80051c0:	40020010 	.word	0x40020010
 80051c4:	40020028 	.word	0x40020028
 80051c8:	40020040 	.word	0x40020040
 80051cc:	40020058 	.word	0x40020058
 80051d0:	40020070 	.word	0x40020070
 80051d4:	40020088 	.word	0x40020088
 80051d8:	400200a0 	.word	0x400200a0
 80051dc:	400200b8 	.word	0x400200b8
 80051e0:	40020410 	.word	0x40020410
 80051e4:	40020428 	.word	0x40020428
 80051e8:	40020440 	.word	0x40020440
 80051ec:	40020458 	.word	0x40020458
 80051f0:	40020470 	.word	0x40020470
 80051f4:	40020488 	.word	0x40020488
 80051f8:	400204a0 	.word	0x400204a0
 80051fc:	400204b8 	.word	0x400204b8
 8005200:	58025408 	.word	0x58025408
 8005204:	5802541c 	.word	0x5802541c
 8005208:	58025430 	.word	0x58025430
 800520c:	58025444 	.word	0x58025444
 8005210:	58025458 	.word	0x58025458
 8005214:	5802546c 	.word	0x5802546c
 8005218:	58025480 	.word	0x58025480
 800521c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b00      	cmp	r3, #0
 8005228:	d160      	bne.n	80052ec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a7f      	ldr	r2, [pc, #508]	; (800542c <HAL_DMA_IRQHandler+0xc74>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d04a      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a7d      	ldr	r2, [pc, #500]	; (8005430 <HAL_DMA_IRQHandler+0xc78>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d045      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a7c      	ldr	r2, [pc, #496]	; (8005434 <HAL_DMA_IRQHandler+0xc7c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d040      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a7a      	ldr	r2, [pc, #488]	; (8005438 <HAL_DMA_IRQHandler+0xc80>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d03b      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a79      	ldr	r2, [pc, #484]	; (800543c <HAL_DMA_IRQHandler+0xc84>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d036      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a77      	ldr	r2, [pc, #476]	; (8005440 <HAL_DMA_IRQHandler+0xc88>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d031      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a76      	ldr	r2, [pc, #472]	; (8005444 <HAL_DMA_IRQHandler+0xc8c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d02c      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a74      	ldr	r2, [pc, #464]	; (8005448 <HAL_DMA_IRQHandler+0xc90>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d027      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a73      	ldr	r2, [pc, #460]	; (800544c <HAL_DMA_IRQHandler+0xc94>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d022      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a71      	ldr	r2, [pc, #452]	; (8005450 <HAL_DMA_IRQHandler+0xc98>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01d      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a70      	ldr	r2, [pc, #448]	; (8005454 <HAL_DMA_IRQHandler+0xc9c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d018      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a6e      	ldr	r2, [pc, #440]	; (8005458 <HAL_DMA_IRQHandler+0xca0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a6d      	ldr	r2, [pc, #436]	; (800545c <HAL_DMA_IRQHandler+0xca4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a6b      	ldr	r2, [pc, #428]	; (8005460 <HAL_DMA_IRQHandler+0xca8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a6a      	ldr	r2, [pc, #424]	; (8005464 <HAL_DMA_IRQHandler+0xcac>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a68      	ldr	r2, [pc, #416]	; (8005468 <HAL_DMA_IRQHandler+0xcb0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d108      	bne.n	80052dc <HAL_DMA_IRQHandler+0xb24>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0208 	bic.w	r2, r2, #8
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	e007      	b.n	80052ec <HAL_DMA_IRQHandler+0xb34>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0204 	bic.w	r2, r2, #4
 80052ea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8165 	beq.w	80055c0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052fe:	e15f      	b.n	80055c0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	2202      	movs	r2, #2
 800530a:	409a      	lsls	r2, r3
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80c5 	beq.w	80054a0 <HAL_DMA_IRQHandler+0xce8>
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 80bf 	beq.w	80054a0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	2202      	movs	r2, #2
 800532c:	409a      	lsls	r2, r3
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d018      	beq.n	800536e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d109      	bne.n	800535a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 813a 	beq.w	80055c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005358:	e134      	b.n	80055c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 8130 	beq.w	80055c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800536c:	e12a      	b.n	80055c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b00      	cmp	r3, #0
 8005376:	f040 8089 	bne.w	800548c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2b      	ldr	r2, [pc, #172]	; (800542c <HAL_DMA_IRQHandler+0xc74>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d04a      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a29      	ldr	r2, [pc, #164]	; (8005430 <HAL_DMA_IRQHandler+0xc78>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d045      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a28      	ldr	r2, [pc, #160]	; (8005434 <HAL_DMA_IRQHandler+0xc7c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d040      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a26      	ldr	r2, [pc, #152]	; (8005438 <HAL_DMA_IRQHandler+0xc80>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d03b      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a25      	ldr	r2, [pc, #148]	; (800543c <HAL_DMA_IRQHandler+0xc84>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d036      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a23      	ldr	r2, [pc, #140]	; (8005440 <HAL_DMA_IRQHandler+0xc88>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d031      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a22      	ldr	r2, [pc, #136]	; (8005444 <HAL_DMA_IRQHandler+0xc8c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d02c      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a20      	ldr	r2, [pc, #128]	; (8005448 <HAL_DMA_IRQHandler+0xc90>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d027      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1f      	ldr	r2, [pc, #124]	; (800544c <HAL_DMA_IRQHandler+0xc94>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d022      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1d      	ldr	r2, [pc, #116]	; (8005450 <HAL_DMA_IRQHandler+0xc98>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01d      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1c      	ldr	r2, [pc, #112]	; (8005454 <HAL_DMA_IRQHandler+0xc9c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d018      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1a      	ldr	r2, [pc, #104]	; (8005458 <HAL_DMA_IRQHandler+0xca0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a19      	ldr	r2, [pc, #100]	; (800545c <HAL_DMA_IRQHandler+0xca4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00e      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a17      	ldr	r2, [pc, #92]	; (8005460 <HAL_DMA_IRQHandler+0xca8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a16      	ldr	r2, [pc, #88]	; (8005464 <HAL_DMA_IRQHandler+0xcac>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a14      	ldr	r2, [pc, #80]	; (8005468 <HAL_DMA_IRQHandler+0xcb0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d128      	bne.n	800546c <HAL_DMA_IRQHandler+0xcb4>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0214 	bic.w	r2, r2, #20
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	e027      	b.n	800547c <HAL_DMA_IRQHandler+0xcc4>
 800542c:	40020010 	.word	0x40020010
 8005430:	40020028 	.word	0x40020028
 8005434:	40020040 	.word	0x40020040
 8005438:	40020058 	.word	0x40020058
 800543c:	40020070 	.word	0x40020070
 8005440:	40020088 	.word	0x40020088
 8005444:	400200a0 	.word	0x400200a0
 8005448:	400200b8 	.word	0x400200b8
 800544c:	40020410 	.word	0x40020410
 8005450:	40020428 	.word	0x40020428
 8005454:	40020440 	.word	0x40020440
 8005458:	40020458 	.word	0x40020458
 800545c:	40020470 	.word	0x40020470
 8005460:	40020488 	.word	0x40020488
 8005464:	400204a0 	.word	0x400204a0
 8005468:	400204b8 	.word	0x400204b8
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 020a 	bic.w	r2, r2, #10
 800547a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 8097 	beq.w	80055c4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800549e:	e091      	b.n	80055c4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a4:	f003 031f 	and.w	r3, r3, #31
 80054a8:	2208      	movs	r2, #8
 80054aa:	409a      	lsls	r2, r3
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 8088 	beq.w	80055c6 <HAL_DMA_IRQHandler+0xe0e>
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8082 	beq.w	80055c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a41      	ldr	r2, [pc, #260]	; (80055cc <HAL_DMA_IRQHandler+0xe14>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d04a      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a3f      	ldr	r2, [pc, #252]	; (80055d0 <HAL_DMA_IRQHandler+0xe18>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d045      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a3e      	ldr	r2, [pc, #248]	; (80055d4 <HAL_DMA_IRQHandler+0xe1c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d040      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a3c      	ldr	r2, [pc, #240]	; (80055d8 <HAL_DMA_IRQHandler+0xe20>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d03b      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a3b      	ldr	r2, [pc, #236]	; (80055dc <HAL_DMA_IRQHandler+0xe24>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d036      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a39      	ldr	r2, [pc, #228]	; (80055e0 <HAL_DMA_IRQHandler+0xe28>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d031      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a38      	ldr	r2, [pc, #224]	; (80055e4 <HAL_DMA_IRQHandler+0xe2c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d02c      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a36      	ldr	r2, [pc, #216]	; (80055e8 <HAL_DMA_IRQHandler+0xe30>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d027      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a35      	ldr	r2, [pc, #212]	; (80055ec <HAL_DMA_IRQHandler+0xe34>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d022      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a33      	ldr	r2, [pc, #204]	; (80055f0 <HAL_DMA_IRQHandler+0xe38>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d01d      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a32      	ldr	r2, [pc, #200]	; (80055f4 <HAL_DMA_IRQHandler+0xe3c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d018      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a30      	ldr	r2, [pc, #192]	; (80055f8 <HAL_DMA_IRQHandler+0xe40>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2f      	ldr	r2, [pc, #188]	; (80055fc <HAL_DMA_IRQHandler+0xe44>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00e      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a2d      	ldr	r2, [pc, #180]	; (8005600 <HAL_DMA_IRQHandler+0xe48>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d009      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a2c      	ldr	r2, [pc, #176]	; (8005604 <HAL_DMA_IRQHandler+0xe4c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d004      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2a      	ldr	r2, [pc, #168]	; (8005608 <HAL_DMA_IRQHandler+0xe50>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d108      	bne.n	8005574 <HAL_DMA_IRQHandler+0xdbc>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 021c 	bic.w	r2, r2, #28
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e007      	b.n	8005584 <HAL_DMA_IRQHandler+0xdcc>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 020e 	bic.w	r2, r2, #14
 8005582:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	2201      	movs	r2, #1
 800558e:	409a      	lsls	r2, r3
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d009      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	4798      	blx	r3
 80055ba:	e004      	b.n	80055c6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80055bc:	bf00      	nop
 80055be:	e002      	b.n	80055c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055c0:	bf00      	nop
 80055c2:	e000      	b.n	80055c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055c4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80055c6:	3728      	adds	r7, #40	; 0x28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40020010 	.word	0x40020010
 80055d0:	40020028 	.word	0x40020028
 80055d4:	40020040 	.word	0x40020040
 80055d8:	40020058 	.word	0x40020058
 80055dc:	40020070 	.word	0x40020070
 80055e0:	40020088 	.word	0x40020088
 80055e4:	400200a0 	.word	0x400200a0
 80055e8:	400200b8 	.word	0x400200b8
 80055ec:	40020410 	.word	0x40020410
 80055f0:	40020428 	.word	0x40020428
 80055f4:	40020440 	.word	0x40020440
 80055f8:	40020458 	.word	0x40020458
 80055fc:	40020470 	.word	0x40020470
 8005600:	40020488 	.word	0x40020488
 8005604:	400204a0 	.word	0x400204a0
 8005608:	400204b8 	.word	0x400204b8

0800560c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005624:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a7f      	ldr	r2, [pc, #508]	; (8005828 <DMA_SetConfig+0x21c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d072      	beq.n	8005716 <DMA_SetConfig+0x10a>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a7d      	ldr	r2, [pc, #500]	; (800582c <DMA_SetConfig+0x220>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d06d      	beq.n	8005716 <DMA_SetConfig+0x10a>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a7c      	ldr	r2, [pc, #496]	; (8005830 <DMA_SetConfig+0x224>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d068      	beq.n	8005716 <DMA_SetConfig+0x10a>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a7a      	ldr	r2, [pc, #488]	; (8005834 <DMA_SetConfig+0x228>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d063      	beq.n	8005716 <DMA_SetConfig+0x10a>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a79      	ldr	r2, [pc, #484]	; (8005838 <DMA_SetConfig+0x22c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d05e      	beq.n	8005716 <DMA_SetConfig+0x10a>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a77      	ldr	r2, [pc, #476]	; (800583c <DMA_SetConfig+0x230>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d059      	beq.n	8005716 <DMA_SetConfig+0x10a>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a76      	ldr	r2, [pc, #472]	; (8005840 <DMA_SetConfig+0x234>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d054      	beq.n	8005716 <DMA_SetConfig+0x10a>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a74      	ldr	r2, [pc, #464]	; (8005844 <DMA_SetConfig+0x238>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d04f      	beq.n	8005716 <DMA_SetConfig+0x10a>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a73      	ldr	r2, [pc, #460]	; (8005848 <DMA_SetConfig+0x23c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d04a      	beq.n	8005716 <DMA_SetConfig+0x10a>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a71      	ldr	r2, [pc, #452]	; (800584c <DMA_SetConfig+0x240>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d045      	beq.n	8005716 <DMA_SetConfig+0x10a>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a70      	ldr	r2, [pc, #448]	; (8005850 <DMA_SetConfig+0x244>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d040      	beq.n	8005716 <DMA_SetConfig+0x10a>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a6e      	ldr	r2, [pc, #440]	; (8005854 <DMA_SetConfig+0x248>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d03b      	beq.n	8005716 <DMA_SetConfig+0x10a>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a6d      	ldr	r2, [pc, #436]	; (8005858 <DMA_SetConfig+0x24c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d036      	beq.n	8005716 <DMA_SetConfig+0x10a>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a6b      	ldr	r2, [pc, #428]	; (800585c <DMA_SetConfig+0x250>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d031      	beq.n	8005716 <DMA_SetConfig+0x10a>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a6a      	ldr	r2, [pc, #424]	; (8005860 <DMA_SetConfig+0x254>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d02c      	beq.n	8005716 <DMA_SetConfig+0x10a>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a68      	ldr	r2, [pc, #416]	; (8005864 <DMA_SetConfig+0x258>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d027      	beq.n	8005716 <DMA_SetConfig+0x10a>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a67      	ldr	r2, [pc, #412]	; (8005868 <DMA_SetConfig+0x25c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d022      	beq.n	8005716 <DMA_SetConfig+0x10a>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a65      	ldr	r2, [pc, #404]	; (800586c <DMA_SetConfig+0x260>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d01d      	beq.n	8005716 <DMA_SetConfig+0x10a>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a64      	ldr	r2, [pc, #400]	; (8005870 <DMA_SetConfig+0x264>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d018      	beq.n	8005716 <DMA_SetConfig+0x10a>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a62      	ldr	r2, [pc, #392]	; (8005874 <DMA_SetConfig+0x268>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d013      	beq.n	8005716 <DMA_SetConfig+0x10a>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a61      	ldr	r2, [pc, #388]	; (8005878 <DMA_SetConfig+0x26c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00e      	beq.n	8005716 <DMA_SetConfig+0x10a>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a5f      	ldr	r2, [pc, #380]	; (800587c <DMA_SetConfig+0x270>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d009      	beq.n	8005716 <DMA_SetConfig+0x10a>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a5e      	ldr	r2, [pc, #376]	; (8005880 <DMA_SetConfig+0x274>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d004      	beq.n	8005716 <DMA_SetConfig+0x10a>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a5c      	ldr	r2, [pc, #368]	; (8005884 <DMA_SetConfig+0x278>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d101      	bne.n	800571a <DMA_SetConfig+0x10e>
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <DMA_SetConfig+0x110>
 800571a:	2300      	movs	r3, #0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00d      	beq.n	800573c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005728:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800572e:	2b00      	cmp	r3, #0
 8005730:	d004      	beq.n	800573c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800573a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a39      	ldr	r2, [pc, #228]	; (8005828 <DMA_SetConfig+0x21c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d04a      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a38      	ldr	r2, [pc, #224]	; (800582c <DMA_SetConfig+0x220>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d045      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a36      	ldr	r2, [pc, #216]	; (8005830 <DMA_SetConfig+0x224>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d040      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a35      	ldr	r2, [pc, #212]	; (8005834 <DMA_SetConfig+0x228>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d03b      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a33      	ldr	r2, [pc, #204]	; (8005838 <DMA_SetConfig+0x22c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d036      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a32      	ldr	r2, [pc, #200]	; (800583c <DMA_SetConfig+0x230>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d031      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a30      	ldr	r2, [pc, #192]	; (8005840 <DMA_SetConfig+0x234>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d02c      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a2f      	ldr	r2, [pc, #188]	; (8005844 <DMA_SetConfig+0x238>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d027      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a2d      	ldr	r2, [pc, #180]	; (8005848 <DMA_SetConfig+0x23c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d022      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a2c      	ldr	r2, [pc, #176]	; (800584c <DMA_SetConfig+0x240>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d01d      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a2a      	ldr	r2, [pc, #168]	; (8005850 <DMA_SetConfig+0x244>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d018      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a29      	ldr	r2, [pc, #164]	; (8005854 <DMA_SetConfig+0x248>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d013      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a27      	ldr	r2, [pc, #156]	; (8005858 <DMA_SetConfig+0x24c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00e      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a26      	ldr	r2, [pc, #152]	; (800585c <DMA_SetConfig+0x250>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d009      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a24      	ldr	r2, [pc, #144]	; (8005860 <DMA_SetConfig+0x254>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d004      	beq.n	80057dc <DMA_SetConfig+0x1d0>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a23      	ldr	r2, [pc, #140]	; (8005864 <DMA_SetConfig+0x258>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d101      	bne.n	80057e0 <DMA_SetConfig+0x1d4>
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <DMA_SetConfig+0x1d6>
 80057e0:	2300      	movs	r3, #0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d059      	beq.n	800589a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	223f      	movs	r2, #63	; 0x3f
 80057f0:	409a      	lsls	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005804:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2b40      	cmp	r3, #64	; 0x40
 8005814:	d138      	bne.n	8005888 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005826:	e086      	b.n	8005936 <DMA_SetConfig+0x32a>
 8005828:	40020010 	.word	0x40020010
 800582c:	40020028 	.word	0x40020028
 8005830:	40020040 	.word	0x40020040
 8005834:	40020058 	.word	0x40020058
 8005838:	40020070 	.word	0x40020070
 800583c:	40020088 	.word	0x40020088
 8005840:	400200a0 	.word	0x400200a0
 8005844:	400200b8 	.word	0x400200b8
 8005848:	40020410 	.word	0x40020410
 800584c:	40020428 	.word	0x40020428
 8005850:	40020440 	.word	0x40020440
 8005854:	40020458 	.word	0x40020458
 8005858:	40020470 	.word	0x40020470
 800585c:	40020488 	.word	0x40020488
 8005860:	400204a0 	.word	0x400204a0
 8005864:	400204b8 	.word	0x400204b8
 8005868:	58025408 	.word	0x58025408
 800586c:	5802541c 	.word	0x5802541c
 8005870:	58025430 	.word	0x58025430
 8005874:	58025444 	.word	0x58025444
 8005878:	58025458 	.word	0x58025458
 800587c:	5802546c 	.word	0x5802546c
 8005880:	58025480 	.word	0x58025480
 8005884:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	60da      	str	r2, [r3, #12]
}
 8005898:	e04d      	b.n	8005936 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a29      	ldr	r2, [pc, #164]	; (8005944 <DMA_SetConfig+0x338>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d022      	beq.n	80058ea <DMA_SetConfig+0x2de>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a27      	ldr	r2, [pc, #156]	; (8005948 <DMA_SetConfig+0x33c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01d      	beq.n	80058ea <DMA_SetConfig+0x2de>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a26      	ldr	r2, [pc, #152]	; (800594c <DMA_SetConfig+0x340>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d018      	beq.n	80058ea <DMA_SetConfig+0x2de>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a24      	ldr	r2, [pc, #144]	; (8005950 <DMA_SetConfig+0x344>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <DMA_SetConfig+0x2de>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a23      	ldr	r2, [pc, #140]	; (8005954 <DMA_SetConfig+0x348>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00e      	beq.n	80058ea <DMA_SetConfig+0x2de>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a21      	ldr	r2, [pc, #132]	; (8005958 <DMA_SetConfig+0x34c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d009      	beq.n	80058ea <DMA_SetConfig+0x2de>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a20      	ldr	r2, [pc, #128]	; (800595c <DMA_SetConfig+0x350>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <DMA_SetConfig+0x2de>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1e      	ldr	r2, [pc, #120]	; (8005960 <DMA_SetConfig+0x354>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d101      	bne.n	80058ee <DMA_SetConfig+0x2e2>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <DMA_SetConfig+0x2e4>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d020      	beq.n	8005936 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	2201      	movs	r2, #1
 80058fe:	409a      	lsls	r2, r3
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b40      	cmp	r3, #64	; 0x40
 8005912:	d108      	bne.n	8005926 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	60da      	str	r2, [r3, #12]
}
 8005924:	e007      	b.n	8005936 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	60da      	str	r2, [r3, #12]
}
 8005936:	bf00      	nop
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	58025408 	.word	0x58025408
 8005948:	5802541c 	.word	0x5802541c
 800594c:	58025430 	.word	0x58025430
 8005950:	58025444 	.word	0x58025444
 8005954:	58025458 	.word	0x58025458
 8005958:	5802546c 	.word	0x5802546c
 800595c:	58025480 	.word	0x58025480
 8005960:	58025494 	.word	0x58025494

08005964 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a42      	ldr	r2, [pc, #264]	; (8005a7c <DMA_CalcBaseAndBitshift+0x118>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d04a      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a41      	ldr	r2, [pc, #260]	; (8005a80 <DMA_CalcBaseAndBitshift+0x11c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d045      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a3f      	ldr	r2, [pc, #252]	; (8005a84 <DMA_CalcBaseAndBitshift+0x120>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d040      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a3e      	ldr	r2, [pc, #248]	; (8005a88 <DMA_CalcBaseAndBitshift+0x124>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d03b      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a3c      	ldr	r2, [pc, #240]	; (8005a8c <DMA_CalcBaseAndBitshift+0x128>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d036      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a3b      	ldr	r2, [pc, #236]	; (8005a90 <DMA_CalcBaseAndBitshift+0x12c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d031      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a39      	ldr	r2, [pc, #228]	; (8005a94 <DMA_CalcBaseAndBitshift+0x130>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d02c      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a38      	ldr	r2, [pc, #224]	; (8005a98 <DMA_CalcBaseAndBitshift+0x134>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d027      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a36      	ldr	r2, [pc, #216]	; (8005a9c <DMA_CalcBaseAndBitshift+0x138>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d022      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a35      	ldr	r2, [pc, #212]	; (8005aa0 <DMA_CalcBaseAndBitshift+0x13c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d01d      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a33      	ldr	r2, [pc, #204]	; (8005aa4 <DMA_CalcBaseAndBitshift+0x140>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d018      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a32      	ldr	r2, [pc, #200]	; (8005aa8 <DMA_CalcBaseAndBitshift+0x144>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d013      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a30      	ldr	r2, [pc, #192]	; (8005aac <DMA_CalcBaseAndBitshift+0x148>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00e      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a2f      	ldr	r2, [pc, #188]	; (8005ab0 <DMA_CalcBaseAndBitshift+0x14c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d009      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a2d      	ldr	r2, [pc, #180]	; (8005ab4 <DMA_CalcBaseAndBitshift+0x150>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d004      	beq.n	8005a0c <DMA_CalcBaseAndBitshift+0xa8>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a2c      	ldr	r2, [pc, #176]	; (8005ab8 <DMA_CalcBaseAndBitshift+0x154>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d101      	bne.n	8005a10 <DMA_CalcBaseAndBitshift+0xac>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <DMA_CalcBaseAndBitshift+0xae>
 8005a10:	2300      	movs	r3, #0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d024      	beq.n	8005a60 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	3b10      	subs	r3, #16
 8005a1e:	4a27      	ldr	r2, [pc, #156]	; (8005abc <DMA_CalcBaseAndBitshift+0x158>)
 8005a20:	fba2 2303 	umull	r2, r3, r2, r3
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	4a24      	ldr	r2, [pc, #144]	; (8005ac0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005a30:	5cd3      	ldrb	r3, [r2, r3]
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d908      	bls.n	8005a50 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	4b1f      	ldr	r3, [pc, #124]	; (8005ac4 <DMA_CalcBaseAndBitshift+0x160>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	1d1a      	adds	r2, r3, #4
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	659a      	str	r2, [r3, #88]	; 0x58
 8005a4e:	e00d      	b.n	8005a6c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	4b1b      	ldr	r3, [pc, #108]	; (8005ac4 <DMA_CalcBaseAndBitshift+0x160>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8005a5e:	e005      	b.n	8005a6c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40020010 	.word	0x40020010
 8005a80:	40020028 	.word	0x40020028
 8005a84:	40020040 	.word	0x40020040
 8005a88:	40020058 	.word	0x40020058
 8005a8c:	40020070 	.word	0x40020070
 8005a90:	40020088 	.word	0x40020088
 8005a94:	400200a0 	.word	0x400200a0
 8005a98:	400200b8 	.word	0x400200b8
 8005a9c:	40020410 	.word	0x40020410
 8005aa0:	40020428 	.word	0x40020428
 8005aa4:	40020440 	.word	0x40020440
 8005aa8:	40020458 	.word	0x40020458
 8005aac:	40020470 	.word	0x40020470
 8005ab0:	40020488 	.word	0x40020488
 8005ab4:	400204a0 	.word	0x400204a0
 8005ab8:	400204b8 	.word	0x400204b8
 8005abc:	aaaaaaab 	.word	0xaaaaaaab
 8005ac0:	0800d07c 	.word	0x0800d07c
 8005ac4:	fffffc00 	.word	0xfffffc00

08005ac8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d120      	bne.n	8005b1e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d858      	bhi.n	8005b96 <DMA_CheckFifoParam+0xce>
 8005ae4:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <DMA_CheckFifoParam+0x24>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005afd 	.word	0x08005afd
 8005af0:	08005b0f 	.word	0x08005b0f
 8005af4:	08005afd 	.word	0x08005afd
 8005af8:	08005b97 	.word	0x08005b97
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d048      	beq.n	8005b9a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b0c:	e045      	b.n	8005b9a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b16:	d142      	bne.n	8005b9e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b1c:	e03f      	b.n	8005b9e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b26:	d123      	bne.n	8005b70 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d838      	bhi.n	8005ba2 <DMA_CheckFifoParam+0xda>
 8005b30:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <DMA_CheckFifoParam+0x70>)
 8005b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b36:	bf00      	nop
 8005b38:	08005b49 	.word	0x08005b49
 8005b3c:	08005b4f 	.word	0x08005b4f
 8005b40:	08005b49 	.word	0x08005b49
 8005b44:	08005b61 	.word	0x08005b61
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
        break;
 8005b4c:	e030      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d025      	beq.n	8005ba6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b5e:	e022      	b.n	8005ba6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b68:	d11f      	bne.n	8005baa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b6e:	e01c      	b.n	8005baa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d902      	bls.n	8005b7e <DMA_CheckFifoParam+0xb6>
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d003      	beq.n	8005b84 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005b7c:	e018      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	73fb      	strb	r3, [r7, #15]
        break;
 8005b82:	e015      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00e      	beq.n	8005bae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
    break;
 8005b94:	e00b      	b.n	8005bae <DMA_CheckFifoParam+0xe6>
        break;
 8005b96:	bf00      	nop
 8005b98:	e00a      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
        break;
 8005b9a:	bf00      	nop
 8005b9c:	e008      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
        break;
 8005b9e:	bf00      	nop
 8005ba0:	e006      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
        break;
 8005ba2:	bf00      	nop
 8005ba4:	e004      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
        break;
 8005ba6:	bf00      	nop
 8005ba8:	e002      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
        break;
 8005baa:	bf00      	nop
 8005bac:	e000      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
    break;
 8005bae:	bf00      	nop
    }
  }

  return status;
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop

08005bc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a38      	ldr	r2, [pc, #224]	; (8005cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d022      	beq.n	8005c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a36      	ldr	r2, [pc, #216]	; (8005cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d01d      	beq.n	8005c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a35      	ldr	r2, [pc, #212]	; (8005cbc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d018      	beq.n	8005c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a33      	ldr	r2, [pc, #204]	; (8005cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d013      	beq.n	8005c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a32      	ldr	r2, [pc, #200]	; (8005cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00e      	beq.n	8005c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a30      	ldr	r2, [pc, #192]	; (8005cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d009      	beq.n	8005c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a2f      	ldr	r2, [pc, #188]	; (8005ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d004      	beq.n	8005c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a2d      	ldr	r2, [pc, #180]	; (8005cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d101      	bne.n	8005c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005c22:	2300      	movs	r3, #0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01a      	beq.n	8005c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	3b08      	subs	r3, #8
 8005c30:	4a28      	ldr	r2, [pc, #160]	; (8005cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005c32:	fba2 2303 	umull	r2, r3, r2, r3
 8005c36:	091b      	lsrs	r3, r3, #4
 8005c38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4b26      	ldr	r3, [pc, #152]	; (8005cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	461a      	mov	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a24      	ldr	r2, [pc, #144]	; (8005cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005c4c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f003 031f 	and.w	r3, r3, #31
 8005c54:	2201      	movs	r2, #1
 8005c56:	409a      	lsls	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005c5c:	e024      	b.n	8005ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	3b10      	subs	r3, #16
 8005c66:	4a1e      	ldr	r2, [pc, #120]	; (8005ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005c68:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6c:	091b      	lsrs	r3, r3, #4
 8005c6e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4a1c      	ldr	r2, [pc, #112]	; (8005ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d806      	bhi.n	8005c86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4a1b      	ldr	r2, [pc, #108]	; (8005ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d902      	bls.n	8005c86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3308      	adds	r3, #8
 8005c84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4b18      	ldr	r3, [pc, #96]	; (8005cec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	461a      	mov	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a16      	ldr	r2, [pc, #88]	; (8005cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005c98:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	409a      	lsls	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ca8:	bf00      	nop
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	58025408 	.word	0x58025408
 8005cb8:	5802541c 	.word	0x5802541c
 8005cbc:	58025430 	.word	0x58025430
 8005cc0:	58025444 	.word	0x58025444
 8005cc4:	58025458 	.word	0x58025458
 8005cc8:	5802546c 	.word	0x5802546c
 8005ccc:	58025480 	.word	0x58025480
 8005cd0:	58025494 	.word	0x58025494
 8005cd4:	cccccccd 	.word	0xcccccccd
 8005cd8:	16009600 	.word	0x16009600
 8005cdc:	58025880 	.word	0x58025880
 8005ce0:	aaaaaaab 	.word	0xaaaaaaab
 8005ce4:	400204b8 	.word	0x400204b8
 8005ce8:	4002040f 	.word	0x4002040f
 8005cec:	10008200 	.word	0x10008200
 8005cf0:	40020880 	.word	0x40020880

08005cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d04a      	beq.n	8005da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d847      	bhi.n	8005da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a25      	ldr	r2, [pc, #148]	; (8005dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d022      	beq.n	8005d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a24      	ldr	r2, [pc, #144]	; (8005db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d01d      	beq.n	8005d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a22      	ldr	r2, [pc, #136]	; (8005db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d018      	beq.n	8005d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a21      	ldr	r2, [pc, #132]	; (8005db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1f      	ldr	r2, [pc, #124]	; (8005dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00e      	beq.n	8005d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1e      	ldr	r2, [pc, #120]	; (8005dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d009      	beq.n	8005d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1c      	ldr	r2, [pc, #112]	; (8005dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d004      	beq.n	8005d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1b      	ldr	r2, [pc, #108]	; (8005dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d101      	bne.n	8005d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005d64:	2300      	movs	r3, #0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4b17      	ldr	r3, [pc, #92]	; (8005dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	461a      	mov	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005d7c:	671a      	str	r2, [r3, #112]	; 0x70
 8005d7e:	e009      	b.n	8005d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4b14      	ldr	r3, [pc, #80]	; (8005dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	461a      	mov	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a11      	ldr	r2, [pc, #68]	; (8005dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005d92:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	2201      	movs	r2, #1
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005da0:	bf00      	nop
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	58025408 	.word	0x58025408
 8005db0:	5802541c 	.word	0x5802541c
 8005db4:	58025430 	.word	0x58025430
 8005db8:	58025444 	.word	0x58025444
 8005dbc:	58025458 	.word	0x58025458
 8005dc0:	5802546c 	.word	0x5802546c
 8005dc4:	58025480 	.word	0x58025480
 8005dc8:	58025494 	.word	0x58025494
 8005dcc:	1600963f 	.word	0x1600963f
 8005dd0:	58025940 	.word	0x58025940
 8005dd4:	1000823f 	.word	0x1000823f
 8005dd8:	40020940 	.word	0x40020940

08005ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b089      	sub	sp, #36	; 0x24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005dea:	4b89      	ldr	r3, [pc, #548]	; (8006010 <HAL_GPIO_Init+0x234>)
 8005dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dee:	e194      	b.n	800611a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	2101      	movs	r1, #1
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 8186 	beq.w	8006114 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f003 0303 	and.w	r3, r3, #3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d005      	beq.n	8005e20 <HAL_GPIO_Init+0x44>
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f003 0303 	and.w	r3, r3, #3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d130      	bne.n	8005e82 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	43db      	mvns	r3, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4013      	ands	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e56:	2201      	movs	r2, #1
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4013      	ands	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	091b      	lsrs	r3, r3, #4
 8005e6c:	f003 0201 	and.w	r2, r3, #1
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d017      	beq.n	8005ebe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	2203      	movs	r2, #3
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	43db      	mvns	r3, r3
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d123      	bne.n	8005f12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	08da      	lsrs	r2, r3, #3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3208      	adds	r2, #8
 8005ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f003 0307 	and.w	r3, r3, #7
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	220f      	movs	r2, #15
 8005ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee6:	43db      	mvns	r3, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	4013      	ands	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	691a      	ldr	r2, [r3, #16]
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	08da      	lsrs	r2, r3, #3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3208      	adds	r2, #8
 8005f0c:	69b9      	ldr	r1, [r7, #24]
 8005f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f22:	43db      	mvns	r3, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4013      	ands	r3, r2
 8005f28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f003 0203 	and.w	r2, r3, #3
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 80e0 	beq.w	8006114 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f54:	4b2f      	ldr	r3, [pc, #188]	; (8006014 <HAL_GPIO_Init+0x238>)
 8005f56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f5a:	4a2e      	ldr	r2, [pc, #184]	; (8006014 <HAL_GPIO_Init+0x238>)
 8005f5c:	f043 0302 	orr.w	r3, r3, #2
 8005f60:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005f64:	4b2b      	ldr	r3, [pc, #172]	; (8006014 <HAL_GPIO_Init+0x238>)
 8005f66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f72:	4a29      	ldr	r2, [pc, #164]	; (8006018 <HAL_GPIO_Init+0x23c>)
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	089b      	lsrs	r3, r3, #2
 8005f78:	3302      	adds	r3, #2
 8005f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	220f      	movs	r2, #15
 8005f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8e:	43db      	mvns	r3, r3
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	4013      	ands	r3, r2
 8005f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a20      	ldr	r2, [pc, #128]	; (800601c <HAL_GPIO_Init+0x240>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d052      	beq.n	8006044 <HAL_GPIO_Init+0x268>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a1f      	ldr	r2, [pc, #124]	; (8006020 <HAL_GPIO_Init+0x244>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d031      	beq.n	800600a <HAL_GPIO_Init+0x22e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a1e      	ldr	r2, [pc, #120]	; (8006024 <HAL_GPIO_Init+0x248>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d02b      	beq.n	8006006 <HAL_GPIO_Init+0x22a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1d      	ldr	r2, [pc, #116]	; (8006028 <HAL_GPIO_Init+0x24c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d025      	beq.n	8006002 <HAL_GPIO_Init+0x226>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a1c      	ldr	r2, [pc, #112]	; (800602c <HAL_GPIO_Init+0x250>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01f      	beq.n	8005ffe <HAL_GPIO_Init+0x222>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <HAL_GPIO_Init+0x254>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d019      	beq.n	8005ffa <HAL_GPIO_Init+0x21e>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a1a      	ldr	r2, [pc, #104]	; (8006034 <HAL_GPIO_Init+0x258>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d013      	beq.n	8005ff6 <HAL_GPIO_Init+0x21a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a19      	ldr	r2, [pc, #100]	; (8006038 <HAL_GPIO_Init+0x25c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00d      	beq.n	8005ff2 <HAL_GPIO_Init+0x216>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a18      	ldr	r2, [pc, #96]	; (800603c <HAL_GPIO_Init+0x260>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d007      	beq.n	8005fee <HAL_GPIO_Init+0x212>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a17      	ldr	r2, [pc, #92]	; (8006040 <HAL_GPIO_Init+0x264>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d101      	bne.n	8005fea <HAL_GPIO_Init+0x20e>
 8005fe6:	2309      	movs	r3, #9
 8005fe8:	e02d      	b.n	8006046 <HAL_GPIO_Init+0x26a>
 8005fea:	230a      	movs	r3, #10
 8005fec:	e02b      	b.n	8006046 <HAL_GPIO_Init+0x26a>
 8005fee:	2308      	movs	r3, #8
 8005ff0:	e029      	b.n	8006046 <HAL_GPIO_Init+0x26a>
 8005ff2:	2307      	movs	r3, #7
 8005ff4:	e027      	b.n	8006046 <HAL_GPIO_Init+0x26a>
 8005ff6:	2306      	movs	r3, #6
 8005ff8:	e025      	b.n	8006046 <HAL_GPIO_Init+0x26a>
 8005ffa:	2305      	movs	r3, #5
 8005ffc:	e023      	b.n	8006046 <HAL_GPIO_Init+0x26a>
 8005ffe:	2304      	movs	r3, #4
 8006000:	e021      	b.n	8006046 <HAL_GPIO_Init+0x26a>
 8006002:	2303      	movs	r3, #3
 8006004:	e01f      	b.n	8006046 <HAL_GPIO_Init+0x26a>
 8006006:	2302      	movs	r3, #2
 8006008:	e01d      	b.n	8006046 <HAL_GPIO_Init+0x26a>
 800600a:	2301      	movs	r3, #1
 800600c:	e01b      	b.n	8006046 <HAL_GPIO_Init+0x26a>
 800600e:	bf00      	nop
 8006010:	58000080 	.word	0x58000080
 8006014:	58024400 	.word	0x58024400
 8006018:	58000400 	.word	0x58000400
 800601c:	58020000 	.word	0x58020000
 8006020:	58020400 	.word	0x58020400
 8006024:	58020800 	.word	0x58020800
 8006028:	58020c00 	.word	0x58020c00
 800602c:	58021000 	.word	0x58021000
 8006030:	58021400 	.word	0x58021400
 8006034:	58021800 	.word	0x58021800
 8006038:	58021c00 	.word	0x58021c00
 800603c:	58022000 	.word	0x58022000
 8006040:	58022400 	.word	0x58022400
 8006044:	2300      	movs	r3, #0
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	f002 0203 	and.w	r2, r2, #3
 800604c:	0092      	lsls	r2, r2, #2
 800604e:	4093      	lsls	r3, r2
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	4313      	orrs	r3, r2
 8006054:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006056:	4938      	ldr	r1, [pc, #224]	; (8006138 <HAL_GPIO_Init+0x35c>)
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	089b      	lsrs	r3, r3, #2
 800605c:	3302      	adds	r3, #2
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	43db      	mvns	r3, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	4013      	ands	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800608a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	43db      	mvns	r3, r3
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	4013      	ands	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80060b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	43db      	mvns	r3, r3
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	4013      	ands	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	43db      	mvns	r3, r3
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	4013      	ands	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	3301      	adds	r3, #1
 8006118:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	fa22 f303 	lsr.w	r3, r2, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	f47f ae63 	bne.w	8005df0 <HAL_GPIO_Init+0x14>
  }
}
 800612a:	bf00      	nop
 800612c:	bf00      	nop
 800612e:	3724      	adds	r7, #36	; 0x24
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	58000400 	.word	0x58000400

0800613c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	887b      	ldrh	r3, [r7, #2]
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
 8006158:	e001      	b.n	800615e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800615a:	2300      	movs	r3, #0
 800615c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	807b      	strh	r3, [r7, #2]
 8006178:	4613      	mov	r3, r2
 800617a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800617c:	787b      	ldrb	r3, [r7, #1]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006182:	887a      	ldrh	r2, [r7, #2]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006188:	e003      	b.n	8006192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800618a:	887b      	ldrh	r3, [r7, #2]
 800618c:	041a      	lsls	r2, r3, #16
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	619a      	str	r2, [r3, #24]
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	4603      	mov	r3, r0
 80061a6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80061a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061b0:	88fb      	ldrh	r3, [r7, #6]
 80061b2:	4013      	ands	r3, r2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061bc:	88fb      	ldrh	r3, [r7, #6]
 80061be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061c2:	88fb      	ldrh	r3, [r7, #6]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fb f849 	bl	800125c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80061dc:	4a08      	ldr	r2, [pc, #32]	; (8006200 <HAL_HSEM_FastTake+0x2c>)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3320      	adds	r3, #32
 80061e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e6:	4a07      	ldr	r2, [pc, #28]	; (8006204 <HAL_HSEM_FastTake+0x30>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d101      	bne.n	80061f0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	e000      	b.n	80061f2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	58026400 	.word	0x58026400
 8006204:	80000300 	.word	0x80000300

08006208 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006212:	4906      	ldr	r1, [pc, #24]	; (800622c <HAL_HSEM_Release+0x24>)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	58026400 	.word	0x58026400

08006230 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006232:	b08f      	sub	sp, #60	; 0x3c
 8006234:	af0a      	add	r7, sp, #40	; 0x28
 8006236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e116      	b.n	8006470 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d106      	bne.n	8006262 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7fb fa11 	bl	8001684 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2203      	movs	r2, #3
 8006266:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d102      	bne.n	800627c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f005 ffa3 	bl	800c1cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	687e      	ldr	r6, [r7, #4]
 800628e:	466d      	mov	r5, sp
 8006290:	f106 0410 	add.w	r4, r6, #16
 8006294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800629a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800629c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80062a4:	1d33      	adds	r3, r6, #4
 80062a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062a8:	6838      	ldr	r0, [r7, #0]
 80062aa:	f005 ff21 	bl	800c0f0 <USB_CoreInit>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e0d7      	b.n	8006470 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2100      	movs	r1, #0
 80062c6:	4618      	mov	r0, r3
 80062c8:	f005 ff91 	bl	800c1ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062cc:	2300      	movs	r3, #0
 80062ce:	73fb      	strb	r3, [r7, #15]
 80062d0:	e04a      	b.n	8006368 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062d2:	7bfa      	ldrb	r2, [r7, #15]
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	00db      	lsls	r3, r3, #3
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	333d      	adds	r3, #61	; 0x3d
 80062e2:	2201      	movs	r2, #1
 80062e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062e6:	7bfa      	ldrb	r2, [r7, #15]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	333c      	adds	r3, #60	; 0x3c
 80062f6:	7bfa      	ldrb	r2, [r7, #15]
 80062f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80062fa:	7bfa      	ldrb	r2, [r7, #15]
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	b298      	uxth	r0, r3
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	4613      	mov	r3, r2
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	440b      	add	r3, r1
 800630c:	3344      	adds	r3, #68	; 0x44
 800630e:	4602      	mov	r2, r0
 8006310:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006312:	7bfa      	ldrb	r2, [r7, #15]
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	3340      	adds	r3, #64	; 0x40
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006326:	7bfa      	ldrb	r2, [r7, #15]
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	4613      	mov	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	3348      	adds	r3, #72	; 0x48
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800633a:	7bfa      	ldrb	r2, [r7, #15]
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	334c      	adds	r3, #76	; 0x4c
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800634e:	7bfa      	ldrb	r2, [r7, #15]
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4413      	add	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	440b      	add	r3, r1
 800635c:	3354      	adds	r3, #84	; 0x54
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	3301      	adds	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
 8006368:	7bfa      	ldrb	r2, [r7, #15]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	429a      	cmp	r2, r3
 8006370:	d3af      	bcc.n	80062d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
 8006376:	e044      	b.n	8006402 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006378:	7bfa      	ldrb	r2, [r7, #15]
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4613      	mov	r3, r2
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	4413      	add	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800638e:	7bfa      	ldrb	r2, [r7, #15]
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	4613      	mov	r3, r2
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	440b      	add	r3, r1
 800639c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80063a0:	7bfa      	ldrb	r2, [r7, #15]
 80063a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063a4:	7bfa      	ldrb	r2, [r7, #15]
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80063b6:	2200      	movs	r2, #0
 80063b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063ba:	7bfa      	ldrb	r2, [r7, #15]
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	440b      	add	r3, r1
 80063c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063d0:	7bfa      	ldrb	r2, [r7, #15]
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063e6:	7bfa      	ldrb	r2, [r7, #15]
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	3301      	adds	r3, #1
 8006400:	73fb      	strb	r3, [r7, #15]
 8006402:	7bfa      	ldrb	r2, [r7, #15]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	429a      	cmp	r2, r3
 800640a:	d3b5      	bcc.n	8006378 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	687e      	ldr	r6, [r7, #4]
 8006414:	466d      	mov	r5, sp
 8006416:	f106 0410 	add.w	r4, r6, #16
 800641a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800641c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800641e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006426:	e885 0003 	stmia.w	r5, {r0, r1}
 800642a:	1d33      	adds	r3, r6, #4
 800642c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800642e:	6838      	ldr	r0, [r7, #0]
 8006430:	f005 ff2a 	bl	800c288 <USB_DevInit>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d005      	beq.n	8006446 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2202      	movs	r2, #2
 800643e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e014      	b.n	8006470 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	2b01      	cmp	r3, #1
 800645c:	d102      	bne.n	8006464 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f80a 	bl	8006478 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4618      	mov	r0, r3
 800646a:	f006 f8e8 	bl	800c63e <USB_DevDisconnect>

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006478 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064a6:	4b05      	ldr	r3, [pc, #20]	; (80064bc <HAL_PCDEx_ActivateLPM+0x44>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	10000003 	.word	0x10000003

080064c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80064c8:	4b29      	ldr	r3, [pc, #164]	; (8006570 <HAL_PWREx_ConfigSupply+0xb0>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	2b06      	cmp	r3, #6
 80064d2:	d00a      	beq.n	80064ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80064d4:	4b26      	ldr	r3, [pc, #152]	; (8006570 <HAL_PWREx_ConfigSupply+0xb0>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d001      	beq.n	80064e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e040      	b.n	8006568 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	e03e      	b.n	8006568 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80064ea:	4b21      	ldr	r3, [pc, #132]	; (8006570 <HAL_PWREx_ConfigSupply+0xb0>)
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80064f2:	491f      	ldr	r1, [pc, #124]	; (8006570 <HAL_PWREx_ConfigSupply+0xb0>)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80064fa:	f7fb fa81 	bl	8001a00 <HAL_GetTick>
 80064fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006500:	e009      	b.n	8006516 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006502:	f7fb fa7d 	bl	8001a00 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006510:	d901      	bls.n	8006516 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e028      	b.n	8006568 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006516:	4b16      	ldr	r3, [pc, #88]	; (8006570 <HAL_PWREx_ConfigSupply+0xb0>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800651e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006522:	d1ee      	bne.n	8006502 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b1e      	cmp	r3, #30
 8006528:	d008      	beq.n	800653c <HAL_PWREx_ConfigSupply+0x7c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b2e      	cmp	r3, #46	; 0x2e
 800652e:	d005      	beq.n	800653c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b1d      	cmp	r3, #29
 8006534:	d002      	beq.n	800653c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b2d      	cmp	r3, #45	; 0x2d
 800653a:	d114      	bne.n	8006566 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800653c:	f7fb fa60 	bl	8001a00 <HAL_GetTick>
 8006540:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006542:	e009      	b.n	8006558 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006544:	f7fb fa5c 	bl	8001a00 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006552:	d901      	bls.n	8006558 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e007      	b.n	8006568 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006558:	4b05      	ldr	r3, [pc, #20]	; (8006570 <HAL_PWREx_ConfigSupply+0xb0>)
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006564:	d1ee      	bne.n	8006544 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	58024800 	.word	0x58024800

08006574 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006578:	4b05      	ldr	r3, [pc, #20]	; (8006590 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	4a04      	ldr	r2, [pc, #16]	; (8006590 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800657e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006582:	60d3      	str	r3, [r2, #12]
}
 8006584:	bf00      	nop
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	58024800 	.word	0x58024800

08006594 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08c      	sub	sp, #48	; 0x30
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d102      	bne.n	80065a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	f000 bc1d 	b.w	8006de2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 8087 	beq.w	80066c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065b6:	4b99      	ldr	r3, [pc, #612]	; (800681c <HAL_RCC_OscConfig+0x288>)
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065c0:	4b96      	ldr	r3, [pc, #600]	; (800681c <HAL_RCC_OscConfig+0x288>)
 80065c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	2b10      	cmp	r3, #16
 80065ca:	d007      	beq.n	80065dc <HAL_RCC_OscConfig+0x48>
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	2b18      	cmp	r3, #24
 80065d0:	d110      	bne.n	80065f4 <HAL_RCC_OscConfig+0x60>
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d10b      	bne.n	80065f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065dc:	4b8f      	ldr	r3, [pc, #572]	; (800681c <HAL_RCC_OscConfig+0x288>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d06c      	beq.n	80066c2 <HAL_RCC_OscConfig+0x12e>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d168      	bne.n	80066c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e3f6      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fc:	d106      	bne.n	800660c <HAL_RCC_OscConfig+0x78>
 80065fe:	4b87      	ldr	r3, [pc, #540]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a86      	ldr	r2, [pc, #536]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	e02e      	b.n	800666a <HAL_RCC_OscConfig+0xd6>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10c      	bne.n	800662e <HAL_RCC_OscConfig+0x9a>
 8006614:	4b81      	ldr	r3, [pc, #516]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a80      	ldr	r2, [pc, #512]	; (800681c <HAL_RCC_OscConfig+0x288>)
 800661a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	4b7e      	ldr	r3, [pc, #504]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a7d      	ldr	r2, [pc, #500]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	e01d      	b.n	800666a <HAL_RCC_OscConfig+0xd6>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006636:	d10c      	bne.n	8006652 <HAL_RCC_OscConfig+0xbe>
 8006638:	4b78      	ldr	r3, [pc, #480]	; (800681c <HAL_RCC_OscConfig+0x288>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a77      	ldr	r2, [pc, #476]	; (800681c <HAL_RCC_OscConfig+0x288>)
 800663e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	4b75      	ldr	r3, [pc, #468]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a74      	ldr	r2, [pc, #464]	; (800681c <HAL_RCC_OscConfig+0x288>)
 800664a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	e00b      	b.n	800666a <HAL_RCC_OscConfig+0xd6>
 8006652:	4b72      	ldr	r3, [pc, #456]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a71      	ldr	r2, [pc, #452]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	4b6f      	ldr	r3, [pc, #444]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a6e      	ldr	r2, [pc, #440]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006664:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006668:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d013      	beq.n	800669a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006672:	f7fb f9c5 	bl	8001a00 <HAL_GetTick>
 8006676:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006678:	e008      	b.n	800668c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800667a:	f7fb f9c1 	bl	8001a00 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b64      	cmp	r3, #100	; 0x64
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e3aa      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800668c:	4b63      	ldr	r3, [pc, #396]	; (800681c <HAL_RCC_OscConfig+0x288>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0f0      	beq.n	800667a <HAL_RCC_OscConfig+0xe6>
 8006698:	e014      	b.n	80066c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800669a:	f7fb f9b1 	bl	8001a00 <HAL_GetTick>
 800669e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80066a0:	e008      	b.n	80066b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066a2:	f7fb f9ad 	bl	8001a00 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b64      	cmp	r3, #100	; 0x64
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e396      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80066b4:	4b59      	ldr	r3, [pc, #356]	; (800681c <HAL_RCC_OscConfig+0x288>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f0      	bne.n	80066a2 <HAL_RCC_OscConfig+0x10e>
 80066c0:	e000      	b.n	80066c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 80cb 	beq.w	8006868 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066d2:	4b52      	ldr	r3, [pc, #328]	; (800681c <HAL_RCC_OscConfig+0x288>)
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066dc:	4b4f      	ldr	r3, [pc, #316]	; (800681c <HAL_RCC_OscConfig+0x288>)
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d007      	beq.n	80066f8 <HAL_RCC_OscConfig+0x164>
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	2b18      	cmp	r3, #24
 80066ec:	d156      	bne.n	800679c <HAL_RCC_OscConfig+0x208>
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d151      	bne.n	800679c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066f8:	4b48      	ldr	r3, [pc, #288]	; (800681c <HAL_RCC_OscConfig+0x288>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_RCC_OscConfig+0x17c>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e368      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006710:	4b42      	ldr	r3, [pc, #264]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f023 0219 	bic.w	r2, r3, #25
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	493f      	ldr	r1, [pc, #252]	; (800681c <HAL_RCC_OscConfig+0x288>)
 800671e:	4313      	orrs	r3, r2
 8006720:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006722:	f7fb f96d 	bl	8001a00 <HAL_GetTick>
 8006726:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006728:	e008      	b.n	800673c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800672a:	f7fb f969 	bl	8001a00 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e352      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800673c:	4b37      	ldr	r3, [pc, #220]	; (800681c <HAL_RCC_OscConfig+0x288>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0f0      	beq.n	800672a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006748:	f7fb f98a 	bl	8001a60 <HAL_GetREVID>
 800674c:	4603      	mov	r3, r0
 800674e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006752:	4293      	cmp	r3, r2
 8006754:	d817      	bhi.n	8006786 <HAL_RCC_OscConfig+0x1f2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b40      	cmp	r3, #64	; 0x40
 800675c:	d108      	bne.n	8006770 <HAL_RCC_OscConfig+0x1dc>
 800675e:	4b2f      	ldr	r3, [pc, #188]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006766:	4a2d      	ldr	r2, [pc, #180]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800676c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800676e:	e07b      	b.n	8006868 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006770:	4b2a      	ldr	r3, [pc, #168]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	031b      	lsls	r3, r3, #12
 800677e:	4927      	ldr	r1, [pc, #156]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006780:	4313      	orrs	r3, r2
 8006782:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006784:	e070      	b.n	8006868 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006786:	4b25      	ldr	r3, [pc, #148]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	061b      	lsls	r3, r3, #24
 8006794:	4921      	ldr	r1, [pc, #132]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006796:	4313      	orrs	r3, r2
 8006798:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800679a:	e065      	b.n	8006868 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d048      	beq.n	8006836 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067a4:	4b1d      	ldr	r3, [pc, #116]	; (800681c <HAL_RCC_OscConfig+0x288>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f023 0219 	bic.w	r2, r3, #25
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	491a      	ldr	r1, [pc, #104]	; (800681c <HAL_RCC_OscConfig+0x288>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b6:	f7fb f923 	bl	8001a00 <HAL_GetTick>
 80067ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067be:	f7fb f91f 	bl	8001a00 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e308      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067d0:	4b12      	ldr	r3, [pc, #72]	; (800681c <HAL_RCC_OscConfig+0x288>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0f0      	beq.n	80067be <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067dc:	f7fb f940 	bl	8001a60 <HAL_GetREVID>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d81a      	bhi.n	8006820 <HAL_RCC_OscConfig+0x28c>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b40      	cmp	r3, #64	; 0x40
 80067f0:	d108      	bne.n	8006804 <HAL_RCC_OscConfig+0x270>
 80067f2:	4b0a      	ldr	r3, [pc, #40]	; (800681c <HAL_RCC_OscConfig+0x288>)
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80067fa:	4a08      	ldr	r2, [pc, #32]	; (800681c <HAL_RCC_OscConfig+0x288>)
 80067fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006800:	6053      	str	r3, [r2, #4]
 8006802:	e031      	b.n	8006868 <HAL_RCC_OscConfig+0x2d4>
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	031b      	lsls	r3, r3, #12
 8006812:	4902      	ldr	r1, [pc, #8]	; (800681c <HAL_RCC_OscConfig+0x288>)
 8006814:	4313      	orrs	r3, r2
 8006816:	604b      	str	r3, [r1, #4]
 8006818:	e026      	b.n	8006868 <HAL_RCC_OscConfig+0x2d4>
 800681a:	bf00      	nop
 800681c:	58024400 	.word	0x58024400
 8006820:	4b9a      	ldr	r3, [pc, #616]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	061b      	lsls	r3, r3, #24
 800682e:	4997      	ldr	r1, [pc, #604]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006830:	4313      	orrs	r3, r2
 8006832:	604b      	str	r3, [r1, #4]
 8006834:	e018      	b.n	8006868 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006836:	4b95      	ldr	r3, [pc, #596]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a94      	ldr	r2, [pc, #592]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 800683c:	f023 0301 	bic.w	r3, r3, #1
 8006840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006842:	f7fb f8dd 	bl	8001a00 <HAL_GetTick>
 8006846:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006848:	e008      	b.n	800685c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800684a:	f7fb f8d9 	bl	8001a00 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e2c2      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800685c:	4b8b      	ldr	r3, [pc, #556]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f0      	bne.n	800684a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 80a9 	beq.w	80069c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006876:	4b85      	ldr	r3, [pc, #532]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800687e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006880:	4b82      	ldr	r3, [pc, #520]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b08      	cmp	r3, #8
 800688a:	d007      	beq.n	800689c <HAL_RCC_OscConfig+0x308>
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b18      	cmp	r3, #24
 8006890:	d13a      	bne.n	8006908 <HAL_RCC_OscConfig+0x374>
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f003 0303 	and.w	r3, r3, #3
 8006898:	2b01      	cmp	r3, #1
 800689a:	d135      	bne.n	8006908 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800689c:	4b7b      	ldr	r3, [pc, #492]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <HAL_RCC_OscConfig+0x320>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	2b80      	cmp	r3, #128	; 0x80
 80068ae:	d001      	beq.n	80068b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e296      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068b4:	f7fb f8d4 	bl	8001a60 <HAL_GetREVID>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80068be:	4293      	cmp	r3, r2
 80068c0:	d817      	bhi.n	80068f2 <HAL_RCC_OscConfig+0x35e>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d108      	bne.n	80068dc <HAL_RCC_OscConfig+0x348>
 80068ca:	4b70      	ldr	r3, [pc, #448]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80068d2:	4a6e      	ldr	r2, [pc, #440]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 80068d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068da:	e075      	b.n	80069c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068dc:	4b6b      	ldr	r3, [pc, #428]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	069b      	lsls	r3, r3, #26
 80068ea:	4968      	ldr	r1, [pc, #416]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068f0:	e06a      	b.n	80069c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068f2:	4b66      	ldr	r3, [pc, #408]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	061b      	lsls	r3, r3, #24
 8006900:	4962      	ldr	r1, [pc, #392]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006902:	4313      	orrs	r3, r2
 8006904:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006906:	e05f      	b.n	80069c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d042      	beq.n	8006996 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006910:	4b5e      	ldr	r3, [pc, #376]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a5d      	ldr	r2, [pc, #372]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691c:	f7fb f870 	bl	8001a00 <HAL_GetTick>
 8006920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006924:	f7fb f86c 	bl	8001a00 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e255      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006936:	4b55      	ldr	r3, [pc, #340]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0f0      	beq.n	8006924 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006942:	f7fb f88d 	bl	8001a60 <HAL_GetREVID>
 8006946:	4603      	mov	r3, r0
 8006948:	f241 0203 	movw	r2, #4099	; 0x1003
 800694c:	4293      	cmp	r3, r2
 800694e:	d817      	bhi.n	8006980 <HAL_RCC_OscConfig+0x3ec>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	2b20      	cmp	r3, #32
 8006956:	d108      	bne.n	800696a <HAL_RCC_OscConfig+0x3d6>
 8006958:	4b4c      	ldr	r3, [pc, #304]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006960:	4a4a      	ldr	r2, [pc, #296]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006962:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006966:	6053      	str	r3, [r2, #4]
 8006968:	e02e      	b.n	80069c8 <HAL_RCC_OscConfig+0x434>
 800696a:	4b48      	ldr	r3, [pc, #288]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	069b      	lsls	r3, r3, #26
 8006978:	4944      	ldr	r1, [pc, #272]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 800697a:	4313      	orrs	r3, r2
 800697c:	604b      	str	r3, [r1, #4]
 800697e:	e023      	b.n	80069c8 <HAL_RCC_OscConfig+0x434>
 8006980:	4b42      	ldr	r3, [pc, #264]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	061b      	lsls	r3, r3, #24
 800698e:	493f      	ldr	r1, [pc, #252]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006990:	4313      	orrs	r3, r2
 8006992:	60cb      	str	r3, [r1, #12]
 8006994:	e018      	b.n	80069c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006996:	4b3d      	ldr	r3, [pc, #244]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a3c      	ldr	r2, [pc, #240]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 800699c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a2:	f7fb f82d 	bl	8001a00 <HAL_GetTick>
 80069a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069a8:	e008      	b.n	80069bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80069aa:	f7fb f829 	bl	8001a00 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e212      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069bc:	4b33      	ldr	r3, [pc, #204]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1f0      	bne.n	80069aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0308 	and.w	r3, r3, #8
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d036      	beq.n	8006a42 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d019      	beq.n	8006a10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069dc:	4b2b      	ldr	r3, [pc, #172]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 80069de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069e0:	4a2a      	ldr	r2, [pc, #168]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 80069e2:	f043 0301 	orr.w	r3, r3, #1
 80069e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e8:	f7fb f80a 	bl	8001a00 <HAL_GetTick>
 80069ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069f0:	f7fb f806 	bl	8001a00 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e1ef      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a02:	4b22      	ldr	r3, [pc, #136]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0f0      	beq.n	80069f0 <HAL_RCC_OscConfig+0x45c>
 8006a0e:	e018      	b.n	8006a42 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a10:	4b1e      	ldr	r3, [pc, #120]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a14:	4a1d      	ldr	r2, [pc, #116]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006a16:	f023 0301 	bic.w	r3, r3, #1
 8006a1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1c:	f7fa fff0 	bl	8001a00 <HAL_GetTick>
 8006a20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a24:	f7fa ffec 	bl	8001a00 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e1d5      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a36:	4b15      	ldr	r3, [pc, #84]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1f0      	bne.n	8006a24 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d039      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d01c      	beq.n	8006a90 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a56:	4b0d      	ldr	r3, [pc, #52]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a0c      	ldr	r2, [pc, #48]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006a5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a62:	f7fa ffcd 	bl	8001a00 <HAL_GetTick>
 8006a66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a68:	e008      	b.n	8006a7c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a6a:	f7fa ffc9 	bl	8001a00 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d901      	bls.n	8006a7c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e1b2      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a7c:	4b03      	ldr	r3, [pc, #12]	; (8006a8c <HAL_RCC_OscConfig+0x4f8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0f0      	beq.n	8006a6a <HAL_RCC_OscConfig+0x4d6>
 8006a88:	e01b      	b.n	8006ac2 <HAL_RCC_OscConfig+0x52e>
 8006a8a:	bf00      	nop
 8006a8c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a90:	4b9b      	ldr	r3, [pc, #620]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a9a      	ldr	r2, [pc, #616]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a9c:	f7fa ffb0 	bl	8001a00 <HAL_GetTick>
 8006aa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006aa2:	e008      	b.n	8006ab6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006aa4:	f7fa ffac 	bl	8001a00 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e195      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ab6:	4b92      	ldr	r3, [pc, #584]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1f0      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 8081 	beq.w	8006bd2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ad0:	4b8c      	ldr	r3, [pc, #560]	; (8006d04 <HAL_RCC_OscConfig+0x770>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a8b      	ldr	r2, [pc, #556]	; (8006d04 <HAL_RCC_OscConfig+0x770>)
 8006ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ada:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006adc:	f7fa ff90 	bl	8001a00 <HAL_GetTick>
 8006ae0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006ae4:	f7fa ff8c 	bl	8001a00 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b64      	cmp	r3, #100	; 0x64
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e175      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006af6:	4b83      	ldr	r3, [pc, #524]	; (8006d04 <HAL_RCC_OscConfig+0x770>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0f0      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d106      	bne.n	8006b18 <HAL_RCC_OscConfig+0x584>
 8006b0a:	4b7d      	ldr	r3, [pc, #500]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0e:	4a7c      	ldr	r2, [pc, #496]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b10:	f043 0301 	orr.w	r3, r3, #1
 8006b14:	6713      	str	r3, [r2, #112]	; 0x70
 8006b16:	e02d      	b.n	8006b74 <HAL_RCC_OscConfig+0x5e0>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10c      	bne.n	8006b3a <HAL_RCC_OscConfig+0x5a6>
 8006b20:	4b77      	ldr	r3, [pc, #476]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b24:	4a76      	ldr	r2, [pc, #472]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b26:	f023 0301 	bic.w	r3, r3, #1
 8006b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b2c:	4b74      	ldr	r3, [pc, #464]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b30:	4a73      	ldr	r2, [pc, #460]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b32:	f023 0304 	bic.w	r3, r3, #4
 8006b36:	6713      	str	r3, [r2, #112]	; 0x70
 8006b38:	e01c      	b.n	8006b74 <HAL_RCC_OscConfig+0x5e0>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2b05      	cmp	r3, #5
 8006b40:	d10c      	bne.n	8006b5c <HAL_RCC_OscConfig+0x5c8>
 8006b42:	4b6f      	ldr	r3, [pc, #444]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b46:	4a6e      	ldr	r2, [pc, #440]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b48:	f043 0304 	orr.w	r3, r3, #4
 8006b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b4e:	4b6c      	ldr	r3, [pc, #432]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	4a6b      	ldr	r2, [pc, #428]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b54:	f043 0301 	orr.w	r3, r3, #1
 8006b58:	6713      	str	r3, [r2, #112]	; 0x70
 8006b5a:	e00b      	b.n	8006b74 <HAL_RCC_OscConfig+0x5e0>
 8006b5c:	4b68      	ldr	r3, [pc, #416]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b60:	4a67      	ldr	r2, [pc, #412]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b62:	f023 0301 	bic.w	r3, r3, #1
 8006b66:	6713      	str	r3, [r2, #112]	; 0x70
 8006b68:	4b65      	ldr	r3, [pc, #404]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6c:	4a64      	ldr	r2, [pc, #400]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b6e:	f023 0304 	bic.w	r3, r3, #4
 8006b72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d015      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7c:	f7fa ff40 	bl	8001a00 <HAL_GetTick>
 8006b80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b82:	e00a      	b.n	8006b9a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b84:	f7fa ff3c 	bl	8001a00 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e123      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b9a:	4b59      	ldr	r3, [pc, #356]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0ee      	beq.n	8006b84 <HAL_RCC_OscConfig+0x5f0>
 8006ba6:	e014      	b.n	8006bd2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba8:	f7fa ff2a 	bl	8001a00 <HAL_GetTick>
 8006bac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bae:	e00a      	b.n	8006bc6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bb0:	f7fa ff26 	bl	8001a00 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e10d      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bc6:	4b4e      	ldr	r3, [pc, #312]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1ee      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 8102 	beq.w	8006de0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006bdc:	4b48      	ldr	r3, [pc, #288]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006be4:	2b18      	cmp	r3, #24
 8006be6:	f000 80bd 	beq.w	8006d64 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	f040 809e 	bne.w	8006d30 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bf4:	4b42      	ldr	r3, [pc, #264]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a41      	ldr	r2, [pc, #260]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c00:	f7fa fefe 	bl	8001a00 <HAL_GetTick>
 8006c04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c08:	f7fa fefa 	bl	8001a00 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e0e3      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c1a:	4b39      	ldr	r3, [pc, #228]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1f0      	bne.n	8006c08 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c26:	4b36      	ldr	r3, [pc, #216]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c2a:	4b37      	ldr	r3, [pc, #220]	; (8006d08 <HAL_RCC_OscConfig+0x774>)
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006c36:	0112      	lsls	r2, r2, #4
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	4931      	ldr	r1, [pc, #196]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	628b      	str	r3, [r1, #40]	; 0x28
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c44:	3b01      	subs	r3, #1
 8006c46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	025b      	lsls	r3, r3, #9
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	041b      	lsls	r3, r3, #16
 8006c5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	061b      	lsls	r3, r3, #24
 8006c6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c70:	4923      	ldr	r1, [pc, #140]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006c76:	4b22      	ldr	r3, [pc, #136]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7a:	4a21      	ldr	r2, [pc, #132]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006c7c:	f023 0301 	bic.w	r3, r3, #1
 8006c80:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c82:	4b1f      	ldr	r3, [pc, #124]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c86:	4b21      	ldr	r3, [pc, #132]	; (8006d0c <HAL_RCC_OscConfig+0x778>)
 8006c88:	4013      	ands	r3, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006c8e:	00d2      	lsls	r2, r2, #3
 8006c90:	491b      	ldr	r1, [pc, #108]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c96:	4b1a      	ldr	r3, [pc, #104]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9a:	f023 020c 	bic.w	r2, r3, #12
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	4917      	ldr	r1, [pc, #92]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ca8:	4b15      	ldr	r3, [pc, #84]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	f023 0202 	bic.w	r2, r3, #2
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb4:	4912      	ldr	r1, [pc, #72]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006cba:	4b11      	ldr	r3, [pc, #68]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbe:	4a10      	ldr	r2, [pc, #64]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cc6:	4b0e      	ldr	r3, [pc, #56]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cca:	4a0d      	ldr	r2, [pc, #52]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	4a0a      	ldr	r2, [pc, #40]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006cde:	4b08      	ldr	r3, [pc, #32]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	4a07      	ldr	r2, [pc, #28]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006ce4:	f043 0301 	orr.w	r3, r3, #1
 8006ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cea:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a04      	ldr	r2, [pc, #16]	; (8006d00 <HAL_RCC_OscConfig+0x76c>)
 8006cf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf6:	f7fa fe83 	bl	8001a00 <HAL_GetTick>
 8006cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cfc:	e011      	b.n	8006d22 <HAL_RCC_OscConfig+0x78e>
 8006cfe:	bf00      	nop
 8006d00:	58024400 	.word	0x58024400
 8006d04:	58024800 	.word	0x58024800
 8006d08:	fffffc0c 	.word	0xfffffc0c
 8006d0c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d10:	f7fa fe76 	bl	8001a00 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e05f      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d22:	4b32      	ldr	r3, [pc, #200]	; (8006dec <HAL_RCC_OscConfig+0x858>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0f0      	beq.n	8006d10 <HAL_RCC_OscConfig+0x77c>
 8006d2e:	e057      	b.n	8006de0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d30:	4b2e      	ldr	r3, [pc, #184]	; (8006dec <HAL_RCC_OscConfig+0x858>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a2d      	ldr	r2, [pc, #180]	; (8006dec <HAL_RCC_OscConfig+0x858>)
 8006d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3c:	f7fa fe60 	bl	8001a00 <HAL_GetTick>
 8006d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d44:	f7fa fe5c 	bl	8001a00 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e045      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d56:	4b25      	ldr	r3, [pc, #148]	; (8006dec <HAL_RCC_OscConfig+0x858>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f0      	bne.n	8006d44 <HAL_RCC_OscConfig+0x7b0>
 8006d62:	e03d      	b.n	8006de0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d64:	4b21      	ldr	r3, [pc, #132]	; (8006dec <HAL_RCC_OscConfig+0x858>)
 8006d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d6a:	4b20      	ldr	r3, [pc, #128]	; (8006dec <HAL_RCC_OscConfig+0x858>)
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d031      	beq.n	8006ddc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f003 0203 	and.w	r2, r3, #3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d12a      	bne.n	8006ddc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	091b      	lsrs	r3, r3, #4
 8006d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d122      	bne.n	8006ddc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d11a      	bne.n	8006ddc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	0a5b      	lsrs	r3, r3, #9
 8006daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d111      	bne.n	8006ddc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	0c1b      	lsrs	r3, r3, #16
 8006dbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d108      	bne.n	8006ddc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	0e1b      	lsrs	r3, r3, #24
 8006dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d001      	beq.n	8006de0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3730      	adds	r7, #48	; 0x30
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	58024400 	.word	0x58024400

08006df0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e19c      	b.n	800713e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e04:	4b8a      	ldr	r3, [pc, #552]	; (8007030 <HAL_RCC_ClockConfig+0x240>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 030f 	and.w	r3, r3, #15
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d910      	bls.n	8006e34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e12:	4b87      	ldr	r3, [pc, #540]	; (8007030 <HAL_RCC_ClockConfig+0x240>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f023 020f 	bic.w	r2, r3, #15
 8006e1a:	4985      	ldr	r1, [pc, #532]	; (8007030 <HAL_RCC_ClockConfig+0x240>)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e22:	4b83      	ldr	r3, [pc, #524]	; (8007030 <HAL_RCC_ClockConfig+0x240>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 030f 	and.w	r3, r3, #15
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d001      	beq.n	8006e34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e184      	b.n	800713e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d010      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	4b7b      	ldr	r3, [pc, #492]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d908      	bls.n	8006e62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e50:	4b78      	ldr	r3, [pc, #480]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	4975      	ldr	r1, [pc, #468]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d010      	beq.n	8006e90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	695a      	ldr	r2, [r3, #20]
 8006e72:	4b70      	ldr	r3, [pc, #448]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d908      	bls.n	8006e90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e7e:	4b6d      	ldr	r3, [pc, #436]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	496a      	ldr	r1, [pc, #424]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d010      	beq.n	8006ebe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	699a      	ldr	r2, [r3, #24]
 8006ea0:	4b64      	ldr	r3, [pc, #400]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d908      	bls.n	8006ebe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006eac:	4b61      	ldr	r3, [pc, #388]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	495e      	ldr	r1, [pc, #376]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d010      	beq.n	8006eec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69da      	ldr	r2, [r3, #28]
 8006ece:	4b59      	ldr	r3, [pc, #356]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d908      	bls.n	8006eec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006eda:	4b56      	ldr	r3, [pc, #344]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	4953      	ldr	r1, [pc, #332]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d010      	beq.n	8006f1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	4b4d      	ldr	r3, [pc, #308]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	f003 030f 	and.w	r3, r3, #15
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d908      	bls.n	8006f1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f08:	4b4a      	ldr	r3, [pc, #296]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	f023 020f 	bic.w	r2, r3, #15
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	4947      	ldr	r1, [pc, #284]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d055      	beq.n	8006fd2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006f26:	4b43      	ldr	r3, [pc, #268]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	4940      	ldr	r1, [pc, #256]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d107      	bne.n	8006f50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f40:	4b3c      	ldr	r3, [pc, #240]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d121      	bne.n	8006f90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e0f6      	b.n	800713e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d107      	bne.n	8006f68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f58:	4b36      	ldr	r3, [pc, #216]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d115      	bne.n	8006f90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e0ea      	b.n	800713e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d107      	bne.n	8006f80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f70:	4b30      	ldr	r3, [pc, #192]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d109      	bne.n	8006f90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e0de      	b.n	800713e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f80:	4b2c      	ldr	r3, [pc, #176]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e0d6      	b.n	800713e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f90:	4b28      	ldr	r3, [pc, #160]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	f023 0207 	bic.w	r2, r3, #7
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	4925      	ldr	r1, [pc, #148]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fa2:	f7fa fd2d 	bl	8001a00 <HAL_GetTick>
 8006fa6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fa8:	e00a      	b.n	8006fc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006faa:	f7fa fd29 	bl	8001a00 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d901      	bls.n	8006fc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e0be      	b.n	800713e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fc0:	4b1c      	ldr	r3, [pc, #112]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d1eb      	bne.n	8006faa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d010      	beq.n	8007000 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	4b14      	ldr	r3, [pc, #80]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d208      	bcs.n	8007000 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fee:	4b11      	ldr	r3, [pc, #68]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	f023 020f 	bic.w	r2, r3, #15
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	490e      	ldr	r1, [pc, #56]	; (8007034 <HAL_RCC_ClockConfig+0x244>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007000:	4b0b      	ldr	r3, [pc, #44]	; (8007030 <HAL_RCC_ClockConfig+0x240>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 030f 	and.w	r3, r3, #15
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d214      	bcs.n	8007038 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800700e:	4b08      	ldr	r3, [pc, #32]	; (8007030 <HAL_RCC_ClockConfig+0x240>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f023 020f 	bic.w	r2, r3, #15
 8007016:	4906      	ldr	r1, [pc, #24]	; (8007030 <HAL_RCC_ClockConfig+0x240>)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	4313      	orrs	r3, r2
 800701c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800701e:	4b04      	ldr	r3, [pc, #16]	; (8007030 <HAL_RCC_ClockConfig+0x240>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d005      	beq.n	8007038 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e086      	b.n	800713e <HAL_RCC_ClockConfig+0x34e>
 8007030:	52002000 	.word	0x52002000
 8007034:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d010      	beq.n	8007066 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691a      	ldr	r2, [r3, #16]
 8007048:	4b3f      	ldr	r3, [pc, #252]	; (8007148 <HAL_RCC_ClockConfig+0x358>)
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007050:	429a      	cmp	r2, r3
 8007052:	d208      	bcs.n	8007066 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007054:	4b3c      	ldr	r3, [pc, #240]	; (8007148 <HAL_RCC_ClockConfig+0x358>)
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	4939      	ldr	r1, [pc, #228]	; (8007148 <HAL_RCC_ClockConfig+0x358>)
 8007062:	4313      	orrs	r3, r2
 8007064:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d010      	beq.n	8007094 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695a      	ldr	r2, [r3, #20]
 8007076:	4b34      	ldr	r3, [pc, #208]	; (8007148 <HAL_RCC_ClockConfig+0x358>)
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800707e:	429a      	cmp	r2, r3
 8007080:	d208      	bcs.n	8007094 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007082:	4b31      	ldr	r3, [pc, #196]	; (8007148 <HAL_RCC_ClockConfig+0x358>)
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	492e      	ldr	r1, [pc, #184]	; (8007148 <HAL_RCC_ClockConfig+0x358>)
 8007090:	4313      	orrs	r3, r2
 8007092:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0310 	and.w	r3, r3, #16
 800709c:	2b00      	cmp	r3, #0
 800709e:	d010      	beq.n	80070c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	699a      	ldr	r2, [r3, #24]
 80070a4:	4b28      	ldr	r3, [pc, #160]	; (8007148 <HAL_RCC_ClockConfig+0x358>)
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d208      	bcs.n	80070c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070b0:	4b25      	ldr	r3, [pc, #148]	; (8007148 <HAL_RCC_ClockConfig+0x358>)
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	4922      	ldr	r1, [pc, #136]	; (8007148 <HAL_RCC_ClockConfig+0x358>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d010      	beq.n	80070f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	69da      	ldr	r2, [r3, #28]
 80070d2:	4b1d      	ldr	r3, [pc, #116]	; (8007148 <HAL_RCC_ClockConfig+0x358>)
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070da:	429a      	cmp	r2, r3
 80070dc:	d208      	bcs.n	80070f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80070de:	4b1a      	ldr	r3, [pc, #104]	; (8007148 <HAL_RCC_ClockConfig+0x358>)
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	4917      	ldr	r1, [pc, #92]	; (8007148 <HAL_RCC_ClockConfig+0x358>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80070f0:	f000 f834 	bl	800715c <HAL_RCC_GetSysClockFreq>
 80070f4:	4602      	mov	r2, r0
 80070f6:	4b14      	ldr	r3, [pc, #80]	; (8007148 <HAL_RCC_ClockConfig+0x358>)
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	0a1b      	lsrs	r3, r3, #8
 80070fc:	f003 030f 	and.w	r3, r3, #15
 8007100:	4912      	ldr	r1, [pc, #72]	; (800714c <HAL_RCC_ClockConfig+0x35c>)
 8007102:	5ccb      	ldrb	r3, [r1, r3]
 8007104:	f003 031f 	and.w	r3, r3, #31
 8007108:	fa22 f303 	lsr.w	r3, r2, r3
 800710c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800710e:	4b0e      	ldr	r3, [pc, #56]	; (8007148 <HAL_RCC_ClockConfig+0x358>)
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	4a0d      	ldr	r2, [pc, #52]	; (800714c <HAL_RCC_ClockConfig+0x35c>)
 8007118:	5cd3      	ldrb	r3, [r2, r3]
 800711a:	f003 031f 	and.w	r3, r3, #31
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	fa22 f303 	lsr.w	r3, r2, r3
 8007124:	4a0a      	ldr	r2, [pc, #40]	; (8007150 <HAL_RCC_ClockConfig+0x360>)
 8007126:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007128:	4a0a      	ldr	r2, [pc, #40]	; (8007154 <HAL_RCC_ClockConfig+0x364>)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800712e:	4b0a      	ldr	r3, [pc, #40]	; (8007158 <HAL_RCC_ClockConfig+0x368>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4618      	mov	r0, r3
 8007134:	f7fa fc1a 	bl	800196c <HAL_InitTick>
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800713c:	7bfb      	ldrb	r3, [r7, #15]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	58024400 	.word	0x58024400
 800714c:	0800d06c 	.word	0x0800d06c
 8007150:	24000004 	.word	0x24000004
 8007154:	24000000 	.word	0x24000000
 8007158:	24000014 	.word	0x24000014

0800715c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800715c:	b480      	push	{r7}
 800715e:	b089      	sub	sp, #36	; 0x24
 8007160:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007162:	4bb3      	ldr	r3, [pc, #716]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800716a:	2b18      	cmp	r3, #24
 800716c:	f200 8155 	bhi.w	800741a <HAL_RCC_GetSysClockFreq+0x2be>
 8007170:	a201      	add	r2, pc, #4	; (adr r2, 8007178 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007176:	bf00      	nop
 8007178:	080071dd 	.word	0x080071dd
 800717c:	0800741b 	.word	0x0800741b
 8007180:	0800741b 	.word	0x0800741b
 8007184:	0800741b 	.word	0x0800741b
 8007188:	0800741b 	.word	0x0800741b
 800718c:	0800741b 	.word	0x0800741b
 8007190:	0800741b 	.word	0x0800741b
 8007194:	0800741b 	.word	0x0800741b
 8007198:	08007203 	.word	0x08007203
 800719c:	0800741b 	.word	0x0800741b
 80071a0:	0800741b 	.word	0x0800741b
 80071a4:	0800741b 	.word	0x0800741b
 80071a8:	0800741b 	.word	0x0800741b
 80071ac:	0800741b 	.word	0x0800741b
 80071b0:	0800741b 	.word	0x0800741b
 80071b4:	0800741b 	.word	0x0800741b
 80071b8:	08007209 	.word	0x08007209
 80071bc:	0800741b 	.word	0x0800741b
 80071c0:	0800741b 	.word	0x0800741b
 80071c4:	0800741b 	.word	0x0800741b
 80071c8:	0800741b 	.word	0x0800741b
 80071cc:	0800741b 	.word	0x0800741b
 80071d0:	0800741b 	.word	0x0800741b
 80071d4:	0800741b 	.word	0x0800741b
 80071d8:	0800720f 	.word	0x0800720f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071dc:	4b94      	ldr	r3, [pc, #592]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0320 	and.w	r3, r3, #32
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d009      	beq.n	80071fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071e8:	4b91      	ldr	r3, [pc, #580]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	08db      	lsrs	r3, r3, #3
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	4a90      	ldr	r2, [pc, #576]	; (8007434 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071f4:	fa22 f303 	lsr.w	r3, r2, r3
 80071f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80071fa:	e111      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80071fc:	4b8d      	ldr	r3, [pc, #564]	; (8007434 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071fe:	61bb      	str	r3, [r7, #24]
    break;
 8007200:	e10e      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007202:	4b8d      	ldr	r3, [pc, #564]	; (8007438 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007204:	61bb      	str	r3, [r7, #24]
    break;
 8007206:	e10b      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007208:	4b8c      	ldr	r3, [pc, #560]	; (800743c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800720a:	61bb      	str	r3, [r7, #24]
    break;
 800720c:	e108      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800720e:	4b88      	ldr	r3, [pc, #544]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007218:	4b85      	ldr	r3, [pc, #532]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721c:	091b      	lsrs	r3, r3, #4
 800721e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007222:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007224:	4b82      	ldr	r3, [pc, #520]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800722e:	4b80      	ldr	r3, [pc, #512]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007232:	08db      	lsrs	r3, r3, #3
 8007234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	fb02 f303 	mul.w	r3, r2, r3
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 80e1 	beq.w	8007414 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2b02      	cmp	r3, #2
 8007256:	f000 8083 	beq.w	8007360 <HAL_RCC_GetSysClockFreq+0x204>
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b02      	cmp	r3, #2
 800725e:	f200 80a1 	bhi.w	80073a4 <HAL_RCC_GetSysClockFreq+0x248>
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <HAL_RCC_GetSysClockFreq+0x114>
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d056      	beq.n	800731c <HAL_RCC_GetSysClockFreq+0x1c0>
 800726e:	e099      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007270:	4b6f      	ldr	r3, [pc, #444]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0320 	and.w	r3, r3, #32
 8007278:	2b00      	cmp	r3, #0
 800727a:	d02d      	beq.n	80072d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800727c:	4b6c      	ldr	r3, [pc, #432]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	08db      	lsrs	r3, r3, #3
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	4a6b      	ldr	r2, [pc, #428]	; (8007434 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007288:	fa22 f303 	lsr.w	r3, r2, r3
 800728c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a6:	4b62      	ldr	r3, [pc, #392]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80072ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007440 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80072d6:	e087      	b.n	80073e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007444 <HAL_RCC_GetSysClockFreq+0x2e8>
 80072e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ea:	4b51      	ldr	r3, [pc, #324]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80072fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007440 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800730e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800731a:	e065      	b.n	80073e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007326:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007448 <HAL_RCC_GetSysClockFreq+0x2ec>
 800732a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732e:	4b40      	ldr	r3, [pc, #256]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007342:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007440 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800735e:	e043      	b.n	80073e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800744c <HAL_RCC_GetSysClockFreq+0x2f0>
 800736e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007372:	4b2f      	ldr	r3, [pc, #188]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007382:	ed97 6a02 	vldr	s12, [r7, #8]
 8007386:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007440 <HAL_RCC_GetSysClockFreq+0x2e4>
 800738a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073a2:	e021      	b.n	80073e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007448 <HAL_RCC_GetSysClockFreq+0x2ec>
 80073b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b6:	4b1e      	ldr	r3, [pc, #120]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80073ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007440 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80073e8:	4b11      	ldr	r3, [pc, #68]	; (8007430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ec:	0a5b      	lsrs	r3, r3, #9
 80073ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f2:	3301      	adds	r3, #1
 80073f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	ee07 3a90 	vmov	s15, r3
 80073fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007400:	edd7 6a07 	vldr	s13, [r7, #28]
 8007404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800740c:	ee17 3a90 	vmov	r3, s15
 8007410:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007412:	e005      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	61bb      	str	r3, [r7, #24]
    break;
 8007418:	e002      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800741a:	4b07      	ldr	r3, [pc, #28]	; (8007438 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800741c:	61bb      	str	r3, [r7, #24]
    break;
 800741e:	bf00      	nop
  }

  return sysclockfreq;
 8007420:	69bb      	ldr	r3, [r7, #24]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3724      	adds	r7, #36	; 0x24
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	58024400 	.word	0x58024400
 8007434:	03d09000 	.word	0x03d09000
 8007438:	003d0900 	.word	0x003d0900
 800743c:	007a1200 	.word	0x007a1200
 8007440:	46000000 	.word	0x46000000
 8007444:	4c742400 	.word	0x4c742400
 8007448:	4a742400 	.word	0x4a742400
 800744c:	4af42400 	.word	0x4af42400

08007450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007456:	f7ff fe81 	bl	800715c <HAL_RCC_GetSysClockFreq>
 800745a:	4602      	mov	r2, r0
 800745c:	4b10      	ldr	r3, [pc, #64]	; (80074a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	0a1b      	lsrs	r3, r3, #8
 8007462:	f003 030f 	and.w	r3, r3, #15
 8007466:	490f      	ldr	r1, [pc, #60]	; (80074a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007468:	5ccb      	ldrb	r3, [r1, r3]
 800746a:	f003 031f 	and.w	r3, r3, #31
 800746e:	fa22 f303 	lsr.w	r3, r2, r3
 8007472:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007474:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	4a09      	ldr	r2, [pc, #36]	; (80074a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800747e:	5cd3      	ldrb	r3, [r2, r3]
 8007480:	f003 031f 	and.w	r3, r3, #31
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	fa22 f303 	lsr.w	r3, r2, r3
 800748a:	4a07      	ldr	r2, [pc, #28]	; (80074a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800748c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800748e:	4a07      	ldr	r2, [pc, #28]	; (80074ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007494:	4b04      	ldr	r3, [pc, #16]	; (80074a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007496:	681b      	ldr	r3, [r3, #0]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	58024400 	.word	0x58024400
 80074a4:	0800d06c 	.word	0x0800d06c
 80074a8:	24000004 	.word	0x24000004
 80074ac:	24000000 	.word	0x24000000

080074b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80074b4:	f7ff ffcc 	bl	8007450 <HAL_RCC_GetHCLKFreq>
 80074b8:	4602      	mov	r2, r0
 80074ba:	4b06      	ldr	r3, [pc, #24]	; (80074d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	091b      	lsrs	r3, r3, #4
 80074c0:	f003 0307 	and.w	r3, r3, #7
 80074c4:	4904      	ldr	r1, [pc, #16]	; (80074d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80074c6:	5ccb      	ldrb	r3, [r1, r3]
 80074c8:	f003 031f 	and.w	r3, r3, #31
 80074cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	58024400 	.word	0x58024400
 80074d8:	0800d06c 	.word	0x0800d06c

080074dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80074e0:	f7ff ffb6 	bl	8007450 <HAL_RCC_GetHCLKFreq>
 80074e4:	4602      	mov	r2, r0
 80074e6:	4b06      	ldr	r3, [pc, #24]	; (8007500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	0a1b      	lsrs	r3, r3, #8
 80074ec:	f003 0307 	and.w	r3, r3, #7
 80074f0:	4904      	ldr	r1, [pc, #16]	; (8007504 <HAL_RCC_GetPCLK2Freq+0x28>)
 80074f2:	5ccb      	ldrb	r3, [r1, r3]
 80074f4:	f003 031f 	and.w	r3, r3, #31
 80074f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	58024400 	.word	0x58024400
 8007504:	0800d06c 	.word	0x0800d06c

08007508 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007510:	2300      	movs	r3, #0
 8007512:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007514:	2300      	movs	r3, #0
 8007516:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d03f      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007528:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800752c:	d02a      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800752e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007532:	d824      	bhi.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007538:	d018      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800753a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800753e:	d81e      	bhi.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d003      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007548:	d007      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800754a:	e018      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800754c:	4ba3      	ldr	r3, [pc, #652]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	4aa2      	ldr	r2, [pc, #648]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007556:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007558:	e015      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3304      	adds	r3, #4
 800755e:	2102      	movs	r1, #2
 8007560:	4618      	mov	r0, r3
 8007562:	f001 fff9 	bl	8009558 <RCCEx_PLL2_Config>
 8007566:	4603      	mov	r3, r0
 8007568:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800756a:	e00c      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3324      	adds	r3, #36	; 0x24
 8007570:	2102      	movs	r1, #2
 8007572:	4618      	mov	r0, r3
 8007574:	f002 f8a2 	bl	80096bc <RCCEx_PLL3_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800757c:	e003      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	75fb      	strb	r3, [r7, #23]
      break;
 8007582:	e000      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007586:	7dfb      	ldrb	r3, [r7, #23]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d109      	bne.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800758c:	4b93      	ldr	r3, [pc, #588]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800758e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007598:	4990      	ldr	r1, [pc, #576]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800759a:	4313      	orrs	r3, r2
 800759c:	650b      	str	r3, [r1, #80]	; 0x50
 800759e:	e001      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a0:	7dfb      	ldrb	r3, [r7, #23]
 80075a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d03d      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	d826      	bhi.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80075b8:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80075ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075be:	bf00      	nop
 80075c0:	080075d5 	.word	0x080075d5
 80075c4:	080075e3 	.word	0x080075e3
 80075c8:	080075f5 	.word	0x080075f5
 80075cc:	0800760d 	.word	0x0800760d
 80075d0:	0800760d 	.word	0x0800760d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d4:	4b81      	ldr	r3, [pc, #516]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	4a80      	ldr	r2, [pc, #512]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075e0:	e015      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3304      	adds	r3, #4
 80075e6:	2100      	movs	r1, #0
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 ffb5 	bl	8009558 <RCCEx_PLL2_Config>
 80075ee:	4603      	mov	r3, r0
 80075f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075f2:	e00c      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3324      	adds	r3, #36	; 0x24
 80075f8:	2100      	movs	r1, #0
 80075fa:	4618      	mov	r0, r3
 80075fc:	f002 f85e 	bl	80096bc <RCCEx_PLL3_Config>
 8007600:	4603      	mov	r3, r0
 8007602:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007604:	e003      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	75fb      	strb	r3, [r7, #23]
      break;
 800760a:	e000      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800760c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800760e:	7dfb      	ldrb	r3, [r7, #23]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d109      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007614:	4b71      	ldr	r3, [pc, #452]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007618:	f023 0207 	bic.w	r2, r3, #7
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007620:	496e      	ldr	r1, [pc, #440]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007622:	4313      	orrs	r3, r2
 8007624:	650b      	str	r3, [r1, #80]	; 0x50
 8007626:	e001      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007628:	7dfb      	ldrb	r3, [r7, #23]
 800762a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007634:	2b00      	cmp	r3, #0
 8007636:	d042      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007640:	d02b      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007646:	d825      	bhi.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007648:	2bc0      	cmp	r3, #192	; 0xc0
 800764a:	d028      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800764c:	2bc0      	cmp	r3, #192	; 0xc0
 800764e:	d821      	bhi.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007650:	2b80      	cmp	r3, #128	; 0x80
 8007652:	d016      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007654:	2b80      	cmp	r3, #128	; 0x80
 8007656:	d81d      	bhi.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800765c:	2b40      	cmp	r3, #64	; 0x40
 800765e:	d007      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007660:	e018      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007662:	4b5e      	ldr	r3, [pc, #376]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	4a5d      	ldr	r2, [pc, #372]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800766c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800766e:	e017      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3304      	adds	r3, #4
 8007674:	2100      	movs	r1, #0
 8007676:	4618      	mov	r0, r3
 8007678:	f001 ff6e 	bl	8009558 <RCCEx_PLL2_Config>
 800767c:	4603      	mov	r3, r0
 800767e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007680:	e00e      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3324      	adds	r3, #36	; 0x24
 8007686:	2100      	movs	r1, #0
 8007688:	4618      	mov	r0, r3
 800768a:	f002 f817 	bl	80096bc <RCCEx_PLL3_Config>
 800768e:	4603      	mov	r3, r0
 8007690:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007692:	e005      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	75fb      	strb	r3, [r7, #23]
      break;
 8007698:	e002      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800769a:	bf00      	nop
 800769c:	e000      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800769e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d109      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80076a6:	4b4d      	ldr	r3, [pc, #308]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b2:	494a      	ldr	r1, [pc, #296]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	650b      	str	r3, [r1, #80]	; 0x50
 80076b8:	e001      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
 80076bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d049      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076d4:	d030      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80076d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076da:	d82a      	bhi.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80076dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076e0:	d02c      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80076e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076e6:	d824      	bhi.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80076e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ec:	d018      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80076ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076f2:	d81e      	bhi.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80076f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076fc:	d007      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80076fe:	e018      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007700:	4b36      	ldr	r3, [pc, #216]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	4a35      	ldr	r2, [pc, #212]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800770a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800770c:	e017      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	3304      	adds	r3, #4
 8007712:	2100      	movs	r1, #0
 8007714:	4618      	mov	r0, r3
 8007716:	f001 ff1f 	bl	8009558 <RCCEx_PLL2_Config>
 800771a:	4603      	mov	r3, r0
 800771c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800771e:	e00e      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3324      	adds	r3, #36	; 0x24
 8007724:	2100      	movs	r1, #0
 8007726:	4618      	mov	r0, r3
 8007728:	f001 ffc8 	bl	80096bc <RCCEx_PLL3_Config>
 800772c:	4603      	mov	r3, r0
 800772e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007730:	e005      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]
      break;
 8007736:	e002      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007738:	bf00      	nop
 800773a:	e000      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800773c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800773e:	7dfb      	ldrb	r3, [r7, #23]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10a      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007744:	4b25      	ldr	r3, [pc, #148]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007748:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007752:	4922      	ldr	r1, [pc, #136]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007754:	4313      	orrs	r3, r2
 8007756:	658b      	str	r3, [r1, #88]	; 0x58
 8007758:	e001      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007766:	2b00      	cmp	r3, #0
 8007768:	d04b      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007774:	d030      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007776:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800777a:	d82a      	bhi.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800777c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007780:	d02e      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007782:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007786:	d824      	bhi.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800778c:	d018      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800778e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007792:	d81e      	bhi.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800779c:	d007      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800779e:	e018      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a0:	4b0e      	ldr	r3, [pc, #56]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	4a0d      	ldr	r2, [pc, #52]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077ac:	e019      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3304      	adds	r3, #4
 80077b2:	2100      	movs	r1, #0
 80077b4:	4618      	mov	r0, r3
 80077b6:	f001 fecf 	bl	8009558 <RCCEx_PLL2_Config>
 80077ba:	4603      	mov	r3, r0
 80077bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80077be:	e010      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3324      	adds	r3, #36	; 0x24
 80077c4:	2100      	movs	r1, #0
 80077c6:	4618      	mov	r0, r3
 80077c8:	f001 ff78 	bl	80096bc <RCCEx_PLL3_Config>
 80077cc:	4603      	mov	r3, r0
 80077ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077d0:	e007      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	75fb      	strb	r3, [r7, #23]
      break;
 80077d6:	e004      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80077d8:	bf00      	nop
 80077da:	e002      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80077dc:	58024400 	.word	0x58024400
      break;
 80077e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80077e8:	4b99      	ldr	r3, [pc, #612]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80077ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077f6:	4996      	ldr	r1, [pc, #600]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	658b      	str	r3, [r1, #88]	; 0x58
 80077fc:	e001      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d032      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007812:	2b30      	cmp	r3, #48	; 0x30
 8007814:	d01c      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007816:	2b30      	cmp	r3, #48	; 0x30
 8007818:	d817      	bhi.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800781a:	2b20      	cmp	r3, #32
 800781c:	d00c      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800781e:	2b20      	cmp	r3, #32
 8007820:	d813      	bhi.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d016      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007826:	2b10      	cmp	r3, #16
 8007828:	d10f      	bne.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800782a:	4b89      	ldr	r3, [pc, #548]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800782c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782e:	4a88      	ldr	r2, [pc, #544]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007836:	e00e      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3304      	adds	r3, #4
 800783c:	2102      	movs	r1, #2
 800783e:	4618      	mov	r0, r3
 8007840:	f001 fe8a 	bl	8009558 <RCCEx_PLL2_Config>
 8007844:	4603      	mov	r3, r0
 8007846:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007848:	e005      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	75fb      	strb	r3, [r7, #23]
      break;
 800784e:	e002      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007850:	bf00      	nop
 8007852:	e000      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d109      	bne.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800785c:	4b7c      	ldr	r3, [pc, #496]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800785e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007860:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007868:	4979      	ldr	r1, [pc, #484]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800786a:	4313      	orrs	r3, r2
 800786c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800786e:	e001      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d047      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007884:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007888:	d030      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800788a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800788e:	d82a      	bhi.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007890:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007894:	d02c      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007896:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800789a:	d824      	bhi.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800789c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078a0:	d018      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80078a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078a6:	d81e      	bhi.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80078ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b0:	d007      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80078b2:	e018      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078b4:	4b66      	ldr	r3, [pc, #408]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	4a65      	ldr	r2, [pc, #404]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80078c0:	e017      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3304      	adds	r3, #4
 80078c6:	2100      	movs	r1, #0
 80078c8:	4618      	mov	r0, r3
 80078ca:	f001 fe45 	bl	8009558 <RCCEx_PLL2_Config>
 80078ce:	4603      	mov	r3, r0
 80078d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80078d2:	e00e      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3324      	adds	r3, #36	; 0x24
 80078d8:	2100      	movs	r1, #0
 80078da:	4618      	mov	r0, r3
 80078dc:	f001 feee 	bl	80096bc <RCCEx_PLL3_Config>
 80078e0:	4603      	mov	r3, r0
 80078e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80078e4:	e005      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	75fb      	strb	r3, [r7, #23]
      break;
 80078ea:	e002      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80078ec:	bf00      	nop
 80078ee:	e000      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80078f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d109      	bne.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80078f8:	4b55      	ldr	r3, [pc, #340]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007904:	4952      	ldr	r1, [pc, #328]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007906:	4313      	orrs	r3, r2
 8007908:	650b      	str	r3, [r1, #80]	; 0x50
 800790a:	e001      	b.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790c:	7dfb      	ldrb	r3, [r7, #23]
 800790e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d049      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007924:	d02e      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007926:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800792a:	d828      	bhi.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800792c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007930:	d02a      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007932:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007936:	d822      	bhi.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007938:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800793c:	d026      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800793e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007942:	d81c      	bhi.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007948:	d010      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800794a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800794e:	d816      	bhi.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007950:	2b00      	cmp	r3, #0
 8007952:	d01d      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007958:	d111      	bne.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3304      	adds	r3, #4
 800795e:	2101      	movs	r1, #1
 8007960:	4618      	mov	r0, r3
 8007962:	f001 fdf9 	bl	8009558 <RCCEx_PLL2_Config>
 8007966:	4603      	mov	r3, r0
 8007968:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800796a:	e012      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	3324      	adds	r3, #36	; 0x24
 8007970:	2101      	movs	r1, #1
 8007972:	4618      	mov	r0, r3
 8007974:	f001 fea2 	bl	80096bc <RCCEx_PLL3_Config>
 8007978:	4603      	mov	r3, r0
 800797a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800797c:	e009      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	75fb      	strb	r3, [r7, #23]
      break;
 8007982:	e006      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007984:	bf00      	nop
 8007986:	e004      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007988:	bf00      	nop
 800798a:	e002      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800798c:	bf00      	nop
 800798e:	e000      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007998:	4b2d      	ldr	r3, [pc, #180]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800799a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800799c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a4:	492a      	ldr	r1, [pc, #168]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	650b      	str	r3, [r1, #80]	; 0x50
 80079aa:	e001      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
 80079ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d04d      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079c6:	d02e      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80079c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079cc:	d828      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80079ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d2:	d02a      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80079d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d8:	d822      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80079da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079de:	d026      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80079e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079e4:	d81c      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80079e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ea:	d010      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80079ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f0:	d816      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d01d      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80079f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079fa:	d111      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3304      	adds	r3, #4
 8007a00:	2101      	movs	r1, #1
 8007a02:	4618      	mov	r0, r3
 8007a04:	f001 fda8 	bl	8009558 <RCCEx_PLL2_Config>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007a0c:	e012      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3324      	adds	r3, #36	; 0x24
 8007a12:	2101      	movs	r1, #1
 8007a14:	4618      	mov	r0, r3
 8007a16:	f001 fe51 	bl	80096bc <RCCEx_PLL3_Config>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007a1e:	e009      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	75fb      	strb	r3, [r7, #23]
      break;
 8007a24:	e006      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007a26:	bf00      	nop
 8007a28:	e004      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007a2a:	bf00      	nop
 8007a2c:	e002      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007a2e:	bf00      	nop
 8007a30:	e000      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10c      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007a3a:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a48:	4901      	ldr	r1, [pc, #4]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	658b      	str	r3, [r1, #88]	; 0x58
 8007a4e:	e003      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d02f      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a6c:	d00e      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a72:	d814      	bhi.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d015      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a7c:	d10f      	bne.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a7e:	4baf      	ldr	r3, [pc, #700]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a82:	4aae      	ldr	r2, [pc, #696]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007a8a:	e00c      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	2101      	movs	r1, #1
 8007a92:	4618      	mov	r0, r3
 8007a94:	f001 fd60 	bl	8009558 <RCCEx_PLL2_Config>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007a9c:	e003      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa2:	e000      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d109      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007aac:	4ba3      	ldr	r3, [pc, #652]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ab8:	49a0      	ldr	r1, [pc, #640]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	650b      	str	r3, [r1, #80]	; 0x50
 8007abe:	e001      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac0:	7dfb      	ldrb	r3, [r7, #23]
 8007ac2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d032      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d81b      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007ad8:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ade:	bf00      	nop
 8007ae0:	08007b17 	.word	0x08007b17
 8007ae4:	08007af1 	.word	0x08007af1
 8007ae8:	08007aff 	.word	0x08007aff
 8007aec:	08007b17 	.word	0x08007b17
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007af0:	4b92      	ldr	r3, [pc, #584]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	4a91      	ldr	r2, [pc, #580]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007afc:	e00c      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3304      	adds	r3, #4
 8007b02:	2102      	movs	r1, #2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f001 fd27 	bl	8009558 <RCCEx_PLL2_Config>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007b0e:	e003      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
      break;
 8007b14:	e000      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d109      	bne.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007b1e:	4b87      	ldr	r3, [pc, #540]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b22:	f023 0203 	bic.w	r2, r3, #3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2a:	4984      	ldr	r1, [pc, #528]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b30:	e001      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 8086 	beq.w	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b44:	4b7e      	ldr	r3, [pc, #504]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a7d      	ldr	r2, [pc, #500]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b50:	f7f9 ff56 	bl	8001a00 <HAL_GetTick>
 8007b54:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b56:	e009      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b58:	f7f9 ff52 	bl	8001a00 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b64      	cmp	r3, #100	; 0x64
 8007b64:	d902      	bls.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	75fb      	strb	r3, [r7, #23]
        break;
 8007b6a:	e005      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b6c:	4b74      	ldr	r3, [pc, #464]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0ef      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d166      	bne.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b7e:	4b6f      	ldr	r3, [pc, #444]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b88:	4053      	eors	r3, r2
 8007b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d013      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b92:	4b6a      	ldr	r3, [pc, #424]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b9a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b9c:	4b67      	ldr	r3, [pc, #412]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba0:	4a66      	ldr	r2, [pc, #408]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ba6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ba8:	4b64      	ldr	r3, [pc, #400]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bac:	4a63      	ldr	r2, [pc, #396]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bb2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007bb4:	4a61      	ldr	r2, [pc, #388]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc4:	d115      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc6:	f7f9 ff1b 	bl	8001a00 <HAL_GetTick>
 8007bca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bcc:	e00b      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bce:	f7f9 ff17 	bl	8001a00 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d902      	bls.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	75fb      	strb	r3, [r7, #23]
            break;
 8007be4:	e005      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007be6:	4b55      	ldr	r3, [pc, #340]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0ed      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d126      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c06:	d10d      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007c08:	4b4c      	ldr	r3, [pc, #304]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c16:	0919      	lsrs	r1, r3, #4
 8007c18:	4b4a      	ldr	r3, [pc, #296]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007c1a:	400b      	ands	r3, r1
 8007c1c:	4947      	ldr	r1, [pc, #284]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	610b      	str	r3, [r1, #16]
 8007c22:	e005      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007c24:	4b45      	ldr	r3, [pc, #276]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	4a44      	ldr	r2, [pc, #272]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007c2e:	6113      	str	r3, [r2, #16]
 8007c30:	4b42      	ldr	r3, [pc, #264]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c3e:	493f      	ldr	r1, [pc, #252]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	670b      	str	r3, [r1, #112]	; 0x70
 8007c44:	e004      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	75bb      	strb	r3, [r7, #22]
 8007c4a:	e001      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
 8007c4e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 8085 	beq.w	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c62:	2b28      	cmp	r3, #40	; 0x28
 8007c64:	d866      	bhi.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007c66:	a201      	add	r2, pc, #4	; (adr r2, 8007c6c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6c:	08007d49 	.word	0x08007d49
 8007c70:	08007d35 	.word	0x08007d35
 8007c74:	08007d35 	.word	0x08007d35
 8007c78:	08007d35 	.word	0x08007d35
 8007c7c:	08007d35 	.word	0x08007d35
 8007c80:	08007d35 	.word	0x08007d35
 8007c84:	08007d35 	.word	0x08007d35
 8007c88:	08007d35 	.word	0x08007d35
 8007c8c:	08007d11 	.word	0x08007d11
 8007c90:	08007d35 	.word	0x08007d35
 8007c94:	08007d35 	.word	0x08007d35
 8007c98:	08007d35 	.word	0x08007d35
 8007c9c:	08007d35 	.word	0x08007d35
 8007ca0:	08007d35 	.word	0x08007d35
 8007ca4:	08007d35 	.word	0x08007d35
 8007ca8:	08007d35 	.word	0x08007d35
 8007cac:	08007d23 	.word	0x08007d23
 8007cb0:	08007d35 	.word	0x08007d35
 8007cb4:	08007d35 	.word	0x08007d35
 8007cb8:	08007d35 	.word	0x08007d35
 8007cbc:	08007d35 	.word	0x08007d35
 8007cc0:	08007d35 	.word	0x08007d35
 8007cc4:	08007d35 	.word	0x08007d35
 8007cc8:	08007d35 	.word	0x08007d35
 8007ccc:	08007d49 	.word	0x08007d49
 8007cd0:	08007d35 	.word	0x08007d35
 8007cd4:	08007d35 	.word	0x08007d35
 8007cd8:	08007d35 	.word	0x08007d35
 8007cdc:	08007d35 	.word	0x08007d35
 8007ce0:	08007d35 	.word	0x08007d35
 8007ce4:	08007d35 	.word	0x08007d35
 8007ce8:	08007d35 	.word	0x08007d35
 8007cec:	08007d49 	.word	0x08007d49
 8007cf0:	08007d35 	.word	0x08007d35
 8007cf4:	08007d35 	.word	0x08007d35
 8007cf8:	08007d35 	.word	0x08007d35
 8007cfc:	08007d35 	.word	0x08007d35
 8007d00:	08007d35 	.word	0x08007d35
 8007d04:	08007d35 	.word	0x08007d35
 8007d08:	08007d35 	.word	0x08007d35
 8007d0c:	08007d49 	.word	0x08007d49
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3304      	adds	r3, #4
 8007d14:	2101      	movs	r1, #1
 8007d16:	4618      	mov	r0, r3
 8007d18:	f001 fc1e 	bl	8009558 <RCCEx_PLL2_Config>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007d20:	e013      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3324      	adds	r3, #36	; 0x24
 8007d26:	2101      	movs	r1, #1
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f001 fcc7 	bl	80096bc <RCCEx_PLL3_Config>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007d32:	e00a      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	75fb      	strb	r3, [r7, #23]
      break;
 8007d38:	e007      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007d3a:	bf00      	nop
 8007d3c:	58024400 	.word	0x58024400
 8007d40:	58024800 	.word	0x58024800
 8007d44:	00ffffcf 	.word	0x00ffffcf
      break;
 8007d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d109      	bne.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d50:	4b96      	ldr	r3, [pc, #600]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d54:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d5c:	4993      	ldr	r1, [pc, #588]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	654b      	str	r3, [r1, #84]	; 0x54
 8007d62:	e001      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d038      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d78:	2b05      	cmp	r3, #5
 8007d7a:	d821      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007d7c:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d82:	bf00      	nop
 8007d84:	08007dc7 	.word	0x08007dc7
 8007d88:	08007d9d 	.word	0x08007d9d
 8007d8c:	08007daf 	.word	0x08007daf
 8007d90:	08007dc7 	.word	0x08007dc7
 8007d94:	08007dc7 	.word	0x08007dc7
 8007d98:	08007dc7 	.word	0x08007dc7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	2101      	movs	r1, #1
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 fbd8 	bl	8009558 <RCCEx_PLL2_Config>
 8007da8:	4603      	mov	r3, r0
 8007daa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007dac:	e00c      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3324      	adds	r3, #36	; 0x24
 8007db2:	2101      	movs	r1, #1
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 fc81 	bl	80096bc <RCCEx_PLL3_Config>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007dbe:	e003      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc4:	e000      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d109      	bne.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007dce:	4b77      	ldr	r3, [pc, #476]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd2:	f023 0207 	bic.w	r2, r3, #7
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dda:	4974      	ldr	r1, [pc, #464]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	654b      	str	r3, [r1, #84]	; 0x54
 8007de0:	e001      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
 8007de4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0304 	and.w	r3, r3, #4
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d03a      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df8:	2b05      	cmp	r3, #5
 8007dfa:	d821      	bhi.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007dfc:	a201      	add	r2, pc, #4	; (adr r2, 8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e02:	bf00      	nop
 8007e04:	08007e47 	.word	0x08007e47
 8007e08:	08007e1d 	.word	0x08007e1d
 8007e0c:	08007e2f 	.word	0x08007e2f
 8007e10:	08007e47 	.word	0x08007e47
 8007e14:	08007e47 	.word	0x08007e47
 8007e18:	08007e47 	.word	0x08007e47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	2101      	movs	r1, #1
 8007e22:	4618      	mov	r0, r3
 8007e24:	f001 fb98 	bl	8009558 <RCCEx_PLL2_Config>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007e2c:	e00c      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3324      	adds	r3, #36	; 0x24
 8007e32:	2101      	movs	r1, #1
 8007e34:	4618      	mov	r0, r3
 8007e36:	f001 fc41 	bl	80096bc <RCCEx_PLL3_Config>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007e3e:	e003      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	75fb      	strb	r3, [r7, #23]
      break;
 8007e44:	e000      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10a      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e4e:	4b57      	ldr	r3, [pc, #348]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e52:	f023 0207 	bic.w	r2, r3, #7
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e5c:	4953      	ldr	r1, [pc, #332]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	658b      	str	r3, [r1, #88]	; 0x58
 8007e62:	e001      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
 8007e66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0320 	and.w	r3, r3, #32
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d04b      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e7e:	d02e      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e84:	d828      	bhi.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e8a:	d02a      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e90:	d822      	bhi.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007e92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e96:	d026      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007e98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e9c:	d81c      	bhi.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ea2:	d010      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ea8:	d816      	bhi.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d01d      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eb2:	d111      	bne.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	2100      	movs	r1, #0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f001 fb4c 	bl	8009558 <RCCEx_PLL2_Config>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ec4:	e012      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	3324      	adds	r3, #36	; 0x24
 8007eca:	2102      	movs	r1, #2
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f001 fbf5 	bl	80096bc <RCCEx_PLL3_Config>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ed6:	e009      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	75fb      	strb	r3, [r7, #23]
      break;
 8007edc:	e006      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007ede:	bf00      	nop
 8007ee0:	e004      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007ee2:	bf00      	nop
 8007ee4:	e002      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007ee6:	bf00      	nop
 8007ee8:	e000      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10a      	bne.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ef2:	4b2e      	ldr	r3, [pc, #184]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f00:	492a      	ldr	r1, [pc, #168]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	654b      	str	r3, [r1, #84]	; 0x54
 8007f06:	e001      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
 8007f0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d04d      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f22:	d02e      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007f24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f28:	d828      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f2e:	d02a      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f34:	d822      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007f36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f3a:	d026      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007f3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f40:	d81c      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f46:	d010      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f4c:	d816      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d01d      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f56:	d111      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f001 fafa 	bl	8009558 <RCCEx_PLL2_Config>
 8007f64:	4603      	mov	r3, r0
 8007f66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007f68:	e012      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3324      	adds	r3, #36	; 0x24
 8007f6e:	2102      	movs	r1, #2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 fba3 	bl	80096bc <RCCEx_PLL3_Config>
 8007f76:	4603      	mov	r3, r0
 8007f78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007f7a:	e009      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f80:	e006      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007f82:	bf00      	nop
 8007f84:	e004      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007f86:	bf00      	nop
 8007f88:	e002      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007f8a:	bf00      	nop
 8007f8c:	e000      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10c      	bne.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f96:	4b05      	ldr	r3, [pc, #20]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fa4:	4901      	ldr	r1, [pc, #4]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	658b      	str	r3, [r1, #88]	; 0x58
 8007faa:	e003      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007fac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d04b      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007fca:	d02e      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007fcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007fd0:	d828      	bhi.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fd6:	d02a      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fdc:	d822      	bhi.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007fde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007fe2:	d026      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007fe4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007fe8:	d81c      	bhi.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fee:	d010      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ff4:	d816      	bhi.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01d      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ffe:	d111      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3304      	adds	r3, #4
 8008004:	2100      	movs	r1, #0
 8008006:	4618      	mov	r0, r3
 8008008:	f001 faa6 	bl	8009558 <RCCEx_PLL2_Config>
 800800c:	4603      	mov	r3, r0
 800800e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008010:	e012      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3324      	adds	r3, #36	; 0x24
 8008016:	2102      	movs	r1, #2
 8008018:	4618      	mov	r0, r3
 800801a:	f001 fb4f 	bl	80096bc <RCCEx_PLL3_Config>
 800801e:	4603      	mov	r3, r0
 8008020:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008022:	e009      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	75fb      	strb	r3, [r7, #23]
      break;
 8008028:	e006      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800802a:	bf00      	nop
 800802c:	e004      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800802e:	bf00      	nop
 8008030:	e002      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008032:	bf00      	nop
 8008034:	e000      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008038:	7dfb      	ldrb	r3, [r7, #23]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10a      	bne.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800803e:	4b9d      	ldr	r3, [pc, #628]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800804c:	4999      	ldr	r1, [pc, #612]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800804e:	4313      	orrs	r3, r2
 8008050:	658b      	str	r3, [r1, #88]	; 0x58
 8008052:	e001      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008054:	7dfb      	ldrb	r3, [r7, #23]
 8008056:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0308 	and.w	r3, r3, #8
 8008060:	2b00      	cmp	r3, #0
 8008062:	d01a      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800806a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800806e:	d10a      	bne.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3324      	adds	r3, #36	; 0x24
 8008074:	2102      	movs	r1, #2
 8008076:	4618      	mov	r0, r3
 8008078:	f001 fb20 	bl	80096bc <RCCEx_PLL3_Config>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008086:	4b8b      	ldr	r3, [pc, #556]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008094:	4987      	ldr	r1, [pc, #540]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008096:	4313      	orrs	r3, r2
 8008098:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0310 	and.w	r3, r3, #16
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d01a      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b0:	d10a      	bne.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3324      	adds	r3, #36	; 0x24
 80080b6:	2102      	movs	r1, #2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f001 faff 	bl	80096bc <RCCEx_PLL3_Config>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080c8:	4b7a      	ldr	r3, [pc, #488]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080d6:	4977      	ldr	r1, [pc, #476]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d034      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080f2:	d01d      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80080f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080f8:	d817      	bhi.n	800812a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80080fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008102:	d009      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008104:	e011      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	3304      	adds	r3, #4
 800810a:	2100      	movs	r1, #0
 800810c:	4618      	mov	r0, r3
 800810e:	f001 fa23 	bl	8009558 <RCCEx_PLL2_Config>
 8008112:	4603      	mov	r3, r0
 8008114:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008116:	e00c      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	3324      	adds	r3, #36	; 0x24
 800811c:	2102      	movs	r1, #2
 800811e:	4618      	mov	r0, r3
 8008120:	f001 facc 	bl	80096bc <RCCEx_PLL3_Config>
 8008124:	4603      	mov	r3, r0
 8008126:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008128:	e003      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	75fb      	strb	r3, [r7, #23]
      break;
 800812e:	e000      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10a      	bne.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008138:	4b5e      	ldr	r3, [pc, #376]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800813a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008146:	495b      	ldr	r1, [pc, #364]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008148:	4313      	orrs	r3, r2
 800814a:	658b      	str	r3, [r1, #88]	; 0x58
 800814c:	e001      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800814e:	7dfb      	ldrb	r3, [r7, #23]
 8008150:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d033      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008164:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008168:	d01c      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800816a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800816e:	d816      	bhi.n	800819e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008174:	d003      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800817a:	d007      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800817c:	e00f      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800817e:	4b4d      	ldr	r3, [pc, #308]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	4a4c      	ldr	r2, [pc, #304]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008188:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800818a:	e00c      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3324      	adds	r3, #36	; 0x24
 8008190:	2101      	movs	r1, #1
 8008192:	4618      	mov	r0, r3
 8008194:	f001 fa92 	bl	80096bc <RCCEx_PLL3_Config>
 8008198:	4603      	mov	r3, r0
 800819a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800819c:	e003      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	75fb      	strb	r3, [r7, #23]
      break;
 80081a2:	e000      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80081a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081a6:	7dfb      	ldrb	r3, [r7, #23]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10a      	bne.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081ac:	4b41      	ldr	r3, [pc, #260]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ba:	493e      	ldr	r1, [pc, #248]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	654b      	str	r3, [r1, #84]	; 0x54
 80081c0:	e001      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d029      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80081da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081de:	d007      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80081e0:	e00f      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081e2:	4b34      	ldr	r3, [pc, #208]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	4a33      	ldr	r2, [pc, #204]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80081ee:	e00b      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3304      	adds	r3, #4
 80081f4:	2102      	movs	r1, #2
 80081f6:	4618      	mov	r0, r3
 80081f8:	f001 f9ae 	bl	8009558 <RCCEx_PLL2_Config>
 80081fc:	4603      	mov	r3, r0
 80081fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008200:	e002      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	75fb      	strb	r3, [r7, #23]
      break;
 8008206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008208:	7dfb      	ldrb	r3, [r7, #23]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800820e:	4b29      	ldr	r3, [pc, #164]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008212:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800821a:	4926      	ldr	r1, [pc, #152]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800821c:	4313      	orrs	r3, r2
 800821e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008220:	e001      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00a      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	3324      	adds	r3, #36	; 0x24
 8008236:	2102      	movs	r1, #2
 8008238:	4618      	mov	r0, r3
 800823a:	f001 fa3f 	bl	80096bc <RCCEx_PLL3_Config>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d033      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800825c:	d017      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800825e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008262:	d811      	bhi.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008268:	d013      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800826a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800826e:	d80b      	bhi.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008270:	2b00      	cmp	r3, #0
 8008272:	d010      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008278:	d106      	bne.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800827a:	4b0e      	ldr	r3, [pc, #56]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827e:	4a0d      	ldr	r2, [pc, #52]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008286:	e007      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	75fb      	strb	r3, [r7, #23]
      break;
 800828c:	e004      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800828e:	bf00      	nop
 8008290:	e002      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008292:	bf00      	nop
 8008294:	e000      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008298:	7dfb      	ldrb	r3, [r7, #23]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10c      	bne.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800829e:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082aa:	4902      	ldr	r1, [pc, #8]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	654b      	str	r3, [r1, #84]	; 0x54
 80082b0:	e004      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80082b2:	bf00      	nop
 80082b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d008      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80082c8:	4b31      	ldr	r3, [pc, #196]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d4:	492e      	ldr	r1, [pc, #184]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d009      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80082e6:	4b2a      	ldr	r3, [pc, #168]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082f4:	4926      	ldr	r1, [pc, #152]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d008      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008306:	4b22      	ldr	r3, [pc, #136]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800830a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008312:	491f      	ldr	r1, [pc, #124]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008314:	4313      	orrs	r3, r2
 8008316:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00d      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008324:	4b1a      	ldr	r3, [pc, #104]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	4a19      	ldr	r2, [pc, #100]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800832a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800832e:	6113      	str	r3, [r2, #16]
 8008330:	4b17      	ldr	r3, [pc, #92]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008332:	691a      	ldr	r2, [r3, #16]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800833a:	4915      	ldr	r1, [pc, #84]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800833c:	4313      	orrs	r3, r2
 800833e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	da08      	bge.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008348:	4b11      	ldr	r3, [pc, #68]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800834a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800834c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008354:	490e      	ldr	r1, [pc, #56]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008356:	4313      	orrs	r3, r2
 8008358:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d009      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008366:	4b0a      	ldr	r3, [pc, #40]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800836a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008374:	4906      	ldr	r1, [pc, #24]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008376:	4313      	orrs	r3, r2
 8008378:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800837a:	7dbb      	ldrb	r3, [r7, #22]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	e000      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
}
 8008386:	4618      	mov	r0, r3
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	58024400 	.word	0x58024400

08008394 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b090      	sub	sp, #64	; 0x40
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083a2:	f040 8095 	bne.w	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80083a6:	4b97      	ldr	r3, [pc, #604]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80083a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083aa:	f003 0307 	and.w	r3, r3, #7
 80083ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	2b04      	cmp	r3, #4
 80083b4:	f200 8088 	bhi.w	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80083b8:	a201      	add	r2, pc, #4	; (adr r2, 80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80083ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083be:	bf00      	nop
 80083c0:	080083d5 	.word	0x080083d5
 80083c4:	080083fd 	.word	0x080083fd
 80083c8:	08008425 	.word	0x08008425
 80083cc:	080084c1 	.word	0x080084c1
 80083d0:	0800844d 	.word	0x0800844d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083d4:	4b8b      	ldr	r3, [pc, #556]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083e0:	d108      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 ff64 	bl	80092b4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083f0:	f000 bc94 	b.w	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083f8:	f000 bc90 	b.w	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083fc:	4b81      	ldr	r3, [pc, #516]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008408:	d108      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800840a:	f107 0318 	add.w	r3, r7, #24
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fca8 	bl	8008d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008418:	f000 bc80 	b.w	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008420:	f000 bc7c 	b.w	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008424:	4b77      	ldr	r3, [pc, #476]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800842c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008430:	d108      	bne.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008432:	f107 030c 	add.w	r3, r7, #12
 8008436:	4618      	mov	r0, r3
 8008438:	f000 fde8 	bl	800900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008440:	f000 bc6c 	b.w	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008444:	2300      	movs	r3, #0
 8008446:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008448:	f000 bc68 	b.w	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800844c:	4b6d      	ldr	r3, [pc, #436]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800844e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008450:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008454:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008456:	4b6b      	ldr	r3, [pc, #428]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0304 	and.w	r3, r3, #4
 800845e:	2b04      	cmp	r3, #4
 8008460:	d10c      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008464:	2b00      	cmp	r3, #0
 8008466:	d109      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008468:	4b66      	ldr	r3, [pc, #408]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	08db      	lsrs	r3, r3, #3
 800846e:	f003 0303 	and.w	r3, r3, #3
 8008472:	4a65      	ldr	r2, [pc, #404]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008474:	fa22 f303 	lsr.w	r3, r2, r3
 8008478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800847a:	e01f      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800847c:	4b61      	ldr	r3, [pc, #388]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008488:	d106      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800848a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008490:	d102      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008492:	4b5e      	ldr	r3, [pc, #376]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008496:	e011      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008498:	4b5a      	ldr	r3, [pc, #360]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084a4:	d106      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80084a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ac:	d102      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80084ae:	4b58      	ldr	r3, [pc, #352]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80084b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084b2:	e003      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80084b8:	f000 bc30 	b.w	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80084bc:	f000 bc2e 	b.w	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80084c0:	4b54      	ldr	r3, [pc, #336]	; (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80084c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084c4:	f000 bc2a 	b.w	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084cc:	f000 bc26 	b.w	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084d6:	f040 809f 	bne.w	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80084da:	4b4a      	ldr	r3, [pc, #296]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80084dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80084e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ea:	d04d      	beq.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084f2:	f200 8084 	bhi.w	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	2bc0      	cmp	r3, #192	; 0xc0
 80084fa:	d07d      	beq.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80084fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fe:	2bc0      	cmp	r3, #192	; 0xc0
 8008500:	d87d      	bhi.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	2b80      	cmp	r3, #128	; 0x80
 8008506:	d02d      	beq.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850a:	2b80      	cmp	r3, #128	; 0x80
 800850c:	d877      	bhi.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	2b40      	cmp	r3, #64	; 0x40
 8008518:	d012      	beq.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800851a:	e070      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800851c:	4b39      	ldr	r3, [pc, #228]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008524:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008528:	d107      	bne.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800852a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fec0 	bl	80092b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008538:	e3f0      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800853e:	e3ed      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008540:	4b30      	ldr	r3, [pc, #192]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800854c:	d107      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800854e:	f107 0318 	add.w	r3, r7, #24
 8008552:	4618      	mov	r0, r3
 8008554:	f000 fc06 	bl	8008d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800855c:	e3de      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008562:	e3db      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008564:	4b27      	ldr	r3, [pc, #156]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800856c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008570:	d107      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008572:	f107 030c 	add.w	r3, r7, #12
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fd48 	bl	800900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008580:	e3cc      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008586:	e3c9      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008588:	4b1e      	ldr	r3, [pc, #120]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800858a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800858c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008590:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008592:	4b1c      	ldr	r3, [pc, #112]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	2b04      	cmp	r3, #4
 800859c:	d10c      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800859e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d109      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085a4:	4b17      	ldr	r3, [pc, #92]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	08db      	lsrs	r3, r3, #3
 80085aa:	f003 0303 	and.w	r3, r3, #3
 80085ae:	4a16      	ldr	r2, [pc, #88]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80085b0:	fa22 f303 	lsr.w	r3, r2, r3
 80085b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085b6:	e01e      	b.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085b8:	4b12      	ldr	r3, [pc, #72]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c4:	d106      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80085c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085cc:	d102      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80085ce:	4b0f      	ldr	r3, [pc, #60]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80085d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085d2:	e010      	b.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085d4:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085e0:	d106      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80085e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085e8:	d102      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80085ea:	4b09      	ldr	r3, [pc, #36]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80085ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085ee:	e002      	b.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80085f4:	e392      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80085f6:	e391      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80085f8:	4b06      	ldr	r3, [pc, #24]	; (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80085fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085fc:	e38e      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80085fe:	2300      	movs	r3, #0
 8008600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008602:	e38b      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008604:	58024400 	.word	0x58024400
 8008608:	03d09000 	.word	0x03d09000
 800860c:	003d0900 	.word	0x003d0900
 8008610:	007a1200 	.word	0x007a1200
 8008614:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800861e:	f040 809c 	bne.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008622:	4b9d      	ldr	r3, [pc, #628]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008626:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800862a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800862c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008632:	d054      	beq.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800863a:	f200 808b 	bhi.w	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008644:	f000 8083 	beq.w	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8008648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800864e:	f200 8081 	bhi.w	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008658:	d02f      	beq.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008660:	d878      	bhi.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008664:	2b00      	cmp	r3, #0
 8008666:	d004      	beq.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800866e:	d012      	beq.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008670:	e070      	b.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008672:	4b89      	ldr	r3, [pc, #548]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800867a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800867e:	d107      	bne.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008684:	4618      	mov	r0, r3
 8008686:	f000 fe15 	bl	80092b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800868e:	e345      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008690:	2300      	movs	r3, #0
 8008692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008694:	e342      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008696:	4b80      	ldr	r3, [pc, #512]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800869e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086a2:	d107      	bne.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086a4:	f107 0318 	add.w	r3, r7, #24
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 fb5b 	bl	8008d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086b2:	e333      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086b8:	e330      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086ba:	4b77      	ldr	r3, [pc, #476]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086c6:	d107      	bne.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086c8:	f107 030c 	add.w	r3, r7, #12
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 fc9d 	bl	800900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086d6:	e321      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086dc:	e31e      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80086de:	4b6e      	ldr	r3, [pc, #440]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80086e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086e6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086e8:	4b6b      	ldr	r3, [pc, #428]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b04      	cmp	r3, #4
 80086f2:	d10c      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80086f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d109      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086fa:	4b67      	ldr	r3, [pc, #412]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	08db      	lsrs	r3, r3, #3
 8008700:	f003 0303 	and.w	r3, r3, #3
 8008704:	4a65      	ldr	r2, [pc, #404]	; (800889c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008706:	fa22 f303 	lsr.w	r3, r2, r3
 800870a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800870c:	e01e      	b.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800870e:	4b62      	ldr	r3, [pc, #392]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800871a:	d106      	bne.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800871c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008722:	d102      	bne.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008724:	4b5e      	ldr	r3, [pc, #376]	; (80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008728:	e010      	b.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800872a:	4b5b      	ldr	r3, [pc, #364]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008732:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008736:	d106      	bne.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800873e:	d102      	bne.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008740:	4b58      	ldr	r3, [pc, #352]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008744:	e002      	b.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800874a:	e2e7      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800874c:	e2e6      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800874e:	4b56      	ldr	r3, [pc, #344]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008752:	e2e3      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008754:	2300      	movs	r3, #0
 8008756:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008758:	e2e0      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008760:	f040 80a7 	bne.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008764:	4b4c      	ldr	r3, [pc, #304]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008768:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800876c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008774:	d055      	beq.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800877c:	f200 8096 	bhi.w	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008786:	f000 8084 	beq.w	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008790:	f200 808c 	bhi.w	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800879a:	d030      	beq.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087a2:	f200 8083 	bhi.w	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d004      	beq.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80087ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087b2:	d012      	beq.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80087b4:	e07a      	b.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087b6:	4b38      	ldr	r3, [pc, #224]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087c2:	d107      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 fd73 	bl	80092b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087d2:	e2a3      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087d8:	e2a0      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087da:	4b2f      	ldr	r3, [pc, #188]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087e6:	d107      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087e8:	f107 0318 	add.w	r3, r7, #24
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 fab9 	bl	8008d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80087f6:	e291      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087fc:	e28e      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087fe:	4b26      	ldr	r3, [pc, #152]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800880a:	d107      	bne.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800880c:	f107 030c 	add.w	r3, r7, #12
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fbfb 	bl	800900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800881a:	e27f      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008820:	e27c      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008822:	4b1d      	ldr	r3, [pc, #116]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008826:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800882a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800882c:	4b1a      	ldr	r3, [pc, #104]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b04      	cmp	r3, #4
 8008836:	d10c      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883a:	2b00      	cmp	r3, #0
 800883c:	d109      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800883e:	4b16      	ldr	r3, [pc, #88]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	08db      	lsrs	r3, r3, #3
 8008844:	f003 0303 	and.w	r3, r3, #3
 8008848:	4a14      	ldr	r2, [pc, #80]	; (800889c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800884a:	fa22 f303 	lsr.w	r3, r2, r3
 800884e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008850:	e01e      	b.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008852:	4b11      	ldr	r3, [pc, #68]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800885a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800885e:	d106      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008866:	d102      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008868:	4b0d      	ldr	r3, [pc, #52]	; (80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800886a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800886c:	e010      	b.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800886e:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800887a:	d106      	bne.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800887c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008882:	d102      	bne.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008884:	4b07      	ldr	r3, [pc, #28]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008888:	e002      	b.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800888e:	e245      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008890:	e244      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008892:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008894:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008896:	e241      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008898:	58024400 	.word	0x58024400
 800889c:	03d09000 	.word	0x03d09000
 80088a0:	003d0900 	.word	0x003d0900
 80088a4:	007a1200 	.word	0x007a1200
 80088a8:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088b0:	e234      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b8:	f040 809c 	bne.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80088bc:	4b9b      	ldr	r3, [pc, #620]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80088be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80088c4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80088c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088cc:	d054      	beq.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088d4:	f200 808b 	bhi.w	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80088de:	f000 8083 	beq.w	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80088e8:	f200 8081 	bhi.w	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088f2:	d02f      	beq.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088fa:	d878      	bhi.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80088fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d004      	beq.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8008902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008908:	d012      	beq.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800890a:	e070      	b.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800890c:	4b87      	ldr	r3, [pc, #540]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008918:	d107      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800891a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fcc8 	bl	80092b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008928:	e1f8      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800892e:	e1f5      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008930:	4b7e      	ldr	r3, [pc, #504]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800893c:	d107      	bne.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800893e:	f107 0318 	add.w	r3, r7, #24
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fa0e 	bl	8008d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800894c:	e1e6      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008952:	e1e3      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008954:	4b75      	ldr	r3, [pc, #468]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800895c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008960:	d107      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008962:	f107 030c 	add.w	r3, r7, #12
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fb50 	bl	800900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008970:	e1d4      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008976:	e1d1      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008978:	4b6c      	ldr	r3, [pc, #432]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800897a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800897c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008980:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008982:	4b6a      	ldr	r3, [pc, #424]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0304 	and.w	r3, r3, #4
 800898a:	2b04      	cmp	r3, #4
 800898c:	d10c      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800898e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008990:	2b00      	cmp	r3, #0
 8008992:	d109      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008994:	4b65      	ldr	r3, [pc, #404]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	08db      	lsrs	r3, r3, #3
 800899a:	f003 0303 	and.w	r3, r3, #3
 800899e:	4a64      	ldr	r2, [pc, #400]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80089a0:	fa22 f303 	lsr.w	r3, r2, r3
 80089a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a6:	e01e      	b.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089a8:	4b60      	ldr	r3, [pc, #384]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089b4:	d106      	bne.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80089b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089bc:	d102      	bne.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80089be:	4b5d      	ldr	r3, [pc, #372]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80089c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089c2:	e010      	b.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089c4:	4b59      	ldr	r3, [pc, #356]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089d0:	d106      	bne.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80089d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089d8:	d102      	bne.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80089da:	4b57      	ldr	r3, [pc, #348]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80089dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089de:	e002      	b.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80089e4:	e19a      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80089e6:	e199      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80089e8:	4b54      	ldr	r3, [pc, #336]	; (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ec:	e196      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089f2:	e193      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089fa:	d173      	bne.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80089fc:	4b4b      	ldr	r3, [pc, #300]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80089fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a04:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a0c:	d02f      	beq.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a14:	d863      	bhi.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8008a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d004      	beq.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a22:	d012      	beq.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8008a24:	e05b      	b.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a26:	4b41      	ldr	r3, [pc, #260]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a32:	d107      	bne.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a34:	f107 0318 	add.w	r3, r7, #24
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 f993 	bl	8008d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a42:	e16b      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a48:	e168      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a4a:	4b38      	ldr	r3, [pc, #224]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a56:	d107      	bne.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a58:	f107 030c 	add.w	r3, r7, #12
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 fad5 	bl	800900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a66:	e159      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a6c:	e156      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a6e:	4b2f      	ldr	r3, [pc, #188]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a76:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a78:	4b2c      	ldr	r3, [pc, #176]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d10c      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8008a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d109      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a8a:	4b28      	ldr	r3, [pc, #160]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	08db      	lsrs	r3, r3, #3
 8008a90:	f003 0303 	and.w	r3, r3, #3
 8008a94:	4a26      	ldr	r2, [pc, #152]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8008a96:	fa22 f303 	lsr.w	r3, r2, r3
 8008a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a9c:	e01e      	b.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a9e:	4b23      	ldr	r3, [pc, #140]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aaa:	d106      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8008aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ab2:	d102      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008ab4:	4b1f      	ldr	r3, [pc, #124]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ab8:	e010      	b.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008aba:	4b1c      	ldr	r3, [pc, #112]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ac6:	d106      	bne.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8008ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ace:	d102      	bne.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008ad0:	4b19      	ldr	r3, [pc, #100]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ad4:	e002      	b.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008ada:	e11f      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008adc:	e11e      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ae2:	e11b      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aea:	d13e      	bne.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008aec:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008af4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d004      	beq.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b02:	d01d      	beq.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008b04:	e02e      	b.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b06:	4b09      	ldr	r3, [pc, #36]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b12:	d107      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fbcb 	bl	80092b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b22:	e0fb      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b28:	e0f8      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008b2a:	bf00      	nop
 8008b2c:	58024400 	.word	0x58024400
 8008b30:	03d09000 	.word	0x03d09000
 8008b34:	003d0900 	.word	0x003d0900
 8008b38:	007a1200 	.word	0x007a1200
 8008b3c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b40:	4b79      	ldr	r3, [pc, #484]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b4c:	d107      	bne.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b4e:	f107 0318 	add.w	r3, r7, #24
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 f906 	bl	8008d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b5c:	e0de      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b62:	e0db      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b68:	e0d8      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b70:	f040 8085 	bne.w	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008b74:	4b6c      	ldr	r3, [pc, #432]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b78:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008b7c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b84:	d06b      	beq.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b8c:	d874      	bhi.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b94:	d056      	beq.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b9c:	d86c      	bhi.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ba4:	d03b      	beq.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bac:	d864      	bhi.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bb4:	d021      	beq.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bbc:	d85c      	bhi.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d004      	beq.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bca:	d004      	beq.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008bcc:	e054      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008bce:	f000 f8b3 	bl	8008d38 <HAL_RCCEx_GetD3PCLK1Freq>
 8008bd2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008bd4:	e0a2      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bd6:	4b54      	ldr	r3, [pc, #336]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008be2:	d107      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008be4:	f107 0318 	add.w	r3, r7, #24
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 f8bb 	bl	8008d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008bf2:	e093      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bf8:	e090      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bfa:	4b4b      	ldr	r3, [pc, #300]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c06:	d107      	bne.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c08:	f107 030c 	add.w	r3, r7, #12
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 f9fd 	bl	800900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c16:	e081      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c1c:	e07e      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c1e:	4b42      	ldr	r3, [pc, #264]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0304 	and.w	r3, r3, #4
 8008c26:	2b04      	cmp	r3, #4
 8008c28:	d109      	bne.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c2a:	4b3f      	ldr	r3, [pc, #252]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	08db      	lsrs	r3, r3, #3
 8008c30:	f003 0303 	and.w	r3, r3, #3
 8008c34:	4a3d      	ldr	r2, [pc, #244]	; (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008c36:	fa22 f303 	lsr.w	r3, r2, r3
 8008c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c3c:	e06e      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c42:	e06b      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c44:	4b38      	ldr	r3, [pc, #224]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c50:	d102      	bne.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8008c52:	4b37      	ldr	r3, [pc, #220]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008c54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c56:	e061      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c5c:	e05e      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c5e:	4b32      	ldr	r3, [pc, #200]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c6a:	d102      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8008c6c:	4b31      	ldr	r3, [pc, #196]	; (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c70:	e054      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c76:	e051      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c7c:	e04e      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c84:	d148      	bne.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008c86:	4b28      	ldr	r3, [pc, #160]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c8e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c96:	d02a      	beq.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8008c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c9e:	d838      	bhi.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d004      	beq.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cac:	d00d      	beq.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8008cae:	e030      	b.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008cb0:	4b1d      	ldr	r3, [pc, #116]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cbc:	d102      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8008cbe:	4b1d      	ldr	r3, [pc, #116]	; (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008cc2:	e02b      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc8:	e028      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cca:	4b17      	ldr	r3, [pc, #92]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cd6:	d107      	bne.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 fae9 	bl	80092b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ce6:	e019      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cec:	e016      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cee:	4b0e      	ldr	r3, [pc, #56]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cfa:	d107      	bne.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cfc:	f107 0318 	add.w	r3, r7, #24
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 f82f 	bl	8008d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d0a:	e007      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d10:	e004      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d16:	e001      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3740      	adds	r7, #64	; 0x40
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	58024400 	.word	0x58024400
 8008d2c:	03d09000 	.word	0x03d09000
 8008d30:	003d0900 	.word	0x003d0900
 8008d34:	007a1200 	.word	0x007a1200

08008d38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008d3c:	f7fe fb88 	bl	8007450 <HAL_RCC_GetHCLKFreq>
 8008d40:	4602      	mov	r2, r0
 8008d42:	4b06      	ldr	r3, [pc, #24]	; (8008d5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	091b      	lsrs	r3, r3, #4
 8008d48:	f003 0307 	and.w	r3, r3, #7
 8008d4c:	4904      	ldr	r1, [pc, #16]	; (8008d60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008d4e:	5ccb      	ldrb	r3, [r1, r3]
 8008d50:	f003 031f 	and.w	r3, r3, #31
 8008d54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	58024400 	.word	0x58024400
 8008d60:	0800d06c 	.word	0x0800d06c

08008d64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b089      	sub	sp, #36	; 0x24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d6c:	4ba1      	ldr	r3, [pc, #644]	; (8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d70:	f003 0303 	and.w	r3, r3, #3
 8008d74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008d76:	4b9f      	ldr	r3, [pc, #636]	; (8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	0b1b      	lsrs	r3, r3, #12
 8008d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d82:	4b9c      	ldr	r3, [pc, #624]	; (8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d86:	091b      	lsrs	r3, r3, #4
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008d8e:	4b99      	ldr	r3, [pc, #612]	; (8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d92:	08db      	lsrs	r3, r3, #3
 8008d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	fb02 f303 	mul.w	r3, r2, r3
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 8111 	beq.w	8008fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	f000 8083 	beq.w	8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	f200 80a1 	bhi.w	8008f04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d003      	beq.n	8008dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d056      	beq.n	8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008dce:	e099      	b.n	8008f04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dd0:	4b88      	ldr	r3, [pc, #544]	; (8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0320 	and.w	r3, r3, #32
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d02d      	beq.n	8008e38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ddc:	4b85      	ldr	r3, [pc, #532]	; (8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	08db      	lsrs	r3, r3, #3
 8008de2:	f003 0303 	and.w	r3, r3, #3
 8008de6:	4a84      	ldr	r2, [pc, #528]	; (8008ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008de8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	ee07 3a90 	vmov	s15, r3
 8008df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e06:	4b7b      	ldr	r3, [pc, #492]	; (8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008e36:	e087      	b.n	8008f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009000 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e4a:	4b6a      	ldr	r3, [pc, #424]	; (8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e7a:	e065      	b.n	8008f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	ee07 3a90 	vmov	s15, r3
 8008e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009004 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e8e:	4b59      	ldr	r3, [pc, #356]	; (8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e96:	ee07 3a90 	vmov	s15, r3
 8008e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ea2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ebe:	e043      	b.n	8008f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	ee07 3a90 	vmov	s15, r3
 8008ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed2:	4b48      	ldr	r3, [pc, #288]	; (8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ee6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008efe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f02:	e021      	b.n	8008f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	ee07 3a90 	vmov	s15, r3
 8008f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009004 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f16:	4b37      	ldr	r3, [pc, #220]	; (8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008f48:	4b2a      	ldr	r3, [pc, #168]	; (8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4c:	0a5b      	lsrs	r3, r3, #9
 8008f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f6e:	ee17 2a90 	vmov	r2, s15
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008f76:	4b1f      	ldr	r3, [pc, #124]	; (8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7a:	0c1b      	lsrs	r3, r3, #16
 8008f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f80:	ee07 3a90 	vmov	s15, r3
 8008f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f9c:	ee17 2a90 	vmov	r2, s15
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008fa4:	4b13      	ldr	r3, [pc, #76]	; (8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa8:	0e1b      	lsrs	r3, r3, #24
 8008faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fca:	ee17 2a90 	vmov	r2, s15
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008fd2:	e008      	b.n	8008fe6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	609a      	str	r2, [r3, #8]
}
 8008fe6:	bf00      	nop
 8008fe8:	3724      	adds	r7, #36	; 0x24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	58024400 	.word	0x58024400
 8008ff8:	03d09000 	.word	0x03d09000
 8008ffc:	46000000 	.word	0x46000000
 8009000:	4c742400 	.word	0x4c742400
 8009004:	4a742400 	.word	0x4a742400
 8009008:	4af42400 	.word	0x4af42400

0800900c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800900c:	b480      	push	{r7}
 800900e:	b089      	sub	sp, #36	; 0x24
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009014:	4ba1      	ldr	r3, [pc, #644]	; (800929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009018:	f003 0303 	and.w	r3, r3, #3
 800901c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800901e:	4b9f      	ldr	r3, [pc, #636]	; (800929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009022:	0d1b      	lsrs	r3, r3, #20
 8009024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009028:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800902a:	4b9c      	ldr	r3, [pc, #624]	; (800929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902e:	0a1b      	lsrs	r3, r3, #8
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009036:	4b99      	ldr	r3, [pc, #612]	; (800929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903a:	08db      	lsrs	r3, r3, #3
 800903c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	fb02 f303 	mul.w	r3, r2, r3
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 8111 	beq.w	800927c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	2b02      	cmp	r3, #2
 800905e:	f000 8083 	beq.w	8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	2b02      	cmp	r3, #2
 8009066:	f200 80a1 	bhi.w	80091ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d056      	beq.n	8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009076:	e099      	b.n	80091ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009078:	4b88      	ldr	r3, [pc, #544]	; (800929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0320 	and.w	r3, r3, #32
 8009080:	2b00      	cmp	r3, #0
 8009082:	d02d      	beq.n	80090e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009084:	4b85      	ldr	r3, [pc, #532]	; (800929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	08db      	lsrs	r3, r3, #3
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	4a84      	ldr	r2, [pc, #528]	; (80092a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009090:	fa22 f303 	lsr.w	r3, r2, r3
 8009094:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	ee07 3a90 	vmov	s15, r3
 800909c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	ee07 3a90 	vmov	s15, r3
 80090a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ae:	4b7b      	ldr	r3, [pc, #492]	; (800929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090be:	ed97 6a03 	vldr	s12, [r7, #12]
 80090c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80090de:	e087      	b.n	80091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80092a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80090ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f2:	4b6a      	ldr	r3, [pc, #424]	; (800929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090fa:	ee07 3a90 	vmov	s15, r3
 80090fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009102:	ed97 6a03 	vldr	s12, [r7, #12]
 8009106:	eddf 5a67 	vldr	s11, [pc, #412]	; 80092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800910a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800910e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800911a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800911e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009122:	e065      	b.n	80091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80092ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009136:	4b59      	ldr	r3, [pc, #356]	; (800929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913e:	ee07 3a90 	vmov	s15, r3
 8009142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009146:	ed97 6a03 	vldr	s12, [r7, #12]
 800914a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800914e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800915a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009162:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009166:	e043      	b.n	80091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009172:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80092b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917a:	4b48      	ldr	r3, [pc, #288]	; (800929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800917c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918a:	ed97 6a03 	vldr	s12, [r7, #12]
 800918e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800919a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800919e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091aa:	e021      	b.n	80091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	ee07 3a90 	vmov	s15, r3
 80091b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80092ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80091ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091be:	4b37      	ldr	r3, [pc, #220]	; (800929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80091d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80091f0:	4b2a      	ldr	r3, [pc, #168]	; (800929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f4:	0a5b      	lsrs	r3, r3, #9
 80091f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800920a:	edd7 6a07 	vldr	s13, [r7, #28]
 800920e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009216:	ee17 2a90 	vmov	r2, s15
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800921e:	4b1f      	ldr	r3, [pc, #124]	; (800929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009222:	0c1b      	lsrs	r3, r3, #16
 8009224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009228:	ee07 3a90 	vmov	s15, r3
 800922c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009230:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009234:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009238:	edd7 6a07 	vldr	s13, [r7, #28]
 800923c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009244:	ee17 2a90 	vmov	r2, s15
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800924c:	4b13      	ldr	r3, [pc, #76]	; (800929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800924e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009250:	0e1b      	lsrs	r3, r3, #24
 8009252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009256:	ee07 3a90 	vmov	s15, r3
 800925a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009266:	edd7 6a07 	vldr	s13, [r7, #28]
 800926a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800926e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009272:	ee17 2a90 	vmov	r2, s15
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800927a:	e008      	b.n	800928e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	609a      	str	r2, [r3, #8]
}
 800928e:	bf00      	nop
 8009290:	3724      	adds	r7, #36	; 0x24
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	58024400 	.word	0x58024400
 80092a0:	03d09000 	.word	0x03d09000
 80092a4:	46000000 	.word	0x46000000
 80092a8:	4c742400 	.word	0x4c742400
 80092ac:	4a742400 	.word	0x4a742400
 80092b0:	4af42400 	.word	0x4af42400

080092b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b089      	sub	sp, #36	; 0x24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092bc:	4ba0      	ldr	r3, [pc, #640]	; (8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c0:	f003 0303 	and.w	r3, r3, #3
 80092c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80092c6:	4b9e      	ldr	r3, [pc, #632]	; (8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	091b      	lsrs	r3, r3, #4
 80092cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80092d2:	4b9b      	ldr	r3, [pc, #620]	; (8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80092dc:	4b98      	ldr	r3, [pc, #608]	; (8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e0:	08db      	lsrs	r3, r3, #3
 80092e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	fb02 f303 	mul.w	r3, r2, r3
 80092ec:	ee07 3a90 	vmov	s15, r3
 80092f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 8111 	beq.w	8009522 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	2b02      	cmp	r3, #2
 8009304:	f000 8083 	beq.w	800940e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	2b02      	cmp	r3, #2
 800930c:	f200 80a1 	bhi.w	8009452 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d056      	beq.n	80093ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800931c:	e099      	b.n	8009452 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800931e:	4b88      	ldr	r3, [pc, #544]	; (8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	d02d      	beq.n	8009386 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800932a:	4b85      	ldr	r3, [pc, #532]	; (8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	08db      	lsrs	r3, r3, #3
 8009330:	f003 0303 	and.w	r3, r3, #3
 8009334:	4a83      	ldr	r2, [pc, #524]	; (8009544 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009336:	fa22 f303 	lsr.w	r3, r2, r3
 800933a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	ee07 3a90 	vmov	s15, r3
 800934c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009354:	4b7a      	ldr	r3, [pc, #488]	; (8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935c:	ee07 3a90 	vmov	s15, r3
 8009360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009364:	ed97 6a03 	vldr	s12, [r7, #12]
 8009368:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800936c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009380:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009384:	e087      	b.n	8009496 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	ee07 3a90 	vmov	s15, r3
 800938c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009390:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800954c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009398:	4b69      	ldr	r3, [pc, #420]	; (8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800939a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093c8:	e065      	b.n	8009496 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	ee07 3a90 	vmov	s15, r3
 80093d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009550 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80093d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093dc:	4b58      	ldr	r3, [pc, #352]	; (8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e4:	ee07 3a90 	vmov	s15, r3
 80093e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009408:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800940c:	e043      	b.n	8009496 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	ee07 3a90 	vmov	s15, r3
 8009414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009418:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009554 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800941c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009420:	4b47      	ldr	r3, [pc, #284]	; (8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009428:	ee07 3a90 	vmov	s15, r3
 800942c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009430:	ed97 6a03 	vldr	s12, [r7, #12]
 8009434:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800943c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009450:	e021      	b.n	8009496 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	ee07 3a90 	vmov	s15, r3
 8009458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800954c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009464:	4b36      	ldr	r3, [pc, #216]	; (8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800946c:	ee07 3a90 	vmov	s15, r3
 8009470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009474:	ed97 6a03 	vldr	s12, [r7, #12]
 8009478:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800947c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800948c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009490:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009494:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009496:	4b2a      	ldr	r3, [pc, #168]	; (8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949a:	0a5b      	lsrs	r3, r3, #9
 800949c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094a0:	ee07 3a90 	vmov	s15, r3
 80094a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094bc:	ee17 2a90 	vmov	r2, s15
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80094c4:	4b1e      	ldr	r3, [pc, #120]	; (8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c8:	0c1b      	lsrs	r3, r3, #16
 80094ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094de:	edd7 6a07 	vldr	s13, [r7, #28]
 80094e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ea:	ee17 2a90 	vmov	r2, s15
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80094f2:	4b13      	ldr	r3, [pc, #76]	; (8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f6:	0e1b      	lsrs	r3, r3, #24
 80094f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094fc:	ee07 3a90 	vmov	s15, r3
 8009500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009508:	ee37 7a87 	vadd.f32	s14, s15, s14
 800950c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009518:	ee17 2a90 	vmov	r2, s15
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009520:	e008      	b.n	8009534 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	609a      	str	r2, [r3, #8]
}
 8009534:	bf00      	nop
 8009536:	3724      	adds	r7, #36	; 0x24
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	58024400 	.word	0x58024400
 8009544:	03d09000 	.word	0x03d09000
 8009548:	46000000 	.word	0x46000000
 800954c:	4c742400 	.word	0x4c742400
 8009550:	4a742400 	.word	0x4a742400
 8009554:	4af42400 	.word	0x4af42400

08009558 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009566:	4b53      	ldr	r3, [pc, #332]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956a:	f003 0303 	and.w	r3, r3, #3
 800956e:	2b03      	cmp	r3, #3
 8009570:	d101      	bne.n	8009576 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e099      	b.n	80096aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009576:	4b4f      	ldr	r3, [pc, #316]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a4e      	ldr	r2, [pc, #312]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800957c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009582:	f7f8 fa3d 	bl	8001a00 <HAL_GetTick>
 8009586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009588:	e008      	b.n	800959c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800958a:	f7f8 fa39 	bl	8001a00 <HAL_GetTick>
 800958e:	4602      	mov	r2, r0
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	2b02      	cmp	r3, #2
 8009596:	d901      	bls.n	800959c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e086      	b.n	80096aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800959c:	4b45      	ldr	r3, [pc, #276]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1f0      	bne.n	800958a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80095a8:	4b42      	ldr	r3, [pc, #264]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 80095aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	031b      	lsls	r3, r3, #12
 80095b6:	493f      	ldr	r1, [pc, #252]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 80095b8:	4313      	orrs	r3, r2
 80095ba:	628b      	str	r3, [r1, #40]	; 0x28
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	025b      	lsls	r3, r3, #9
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	431a      	orrs	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	041b      	lsls	r3, r3, #16
 80095da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80095de:	431a      	orrs	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	061b      	lsls	r3, r3, #24
 80095e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80095ec:	4931      	ldr	r1, [pc, #196]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80095f2:	4b30      	ldr	r3, [pc, #192]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 80095f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	492d      	ldr	r1, [pc, #180]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009600:	4313      	orrs	r3, r2
 8009602:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009604:	4b2b      	ldr	r3, [pc, #172]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	f023 0220 	bic.w	r2, r3, #32
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	4928      	ldr	r1, [pc, #160]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009612:	4313      	orrs	r3, r2
 8009614:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009616:	4b27      	ldr	r3, [pc, #156]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961a:	4a26      	ldr	r2, [pc, #152]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800961c:	f023 0310 	bic.w	r3, r3, #16
 8009620:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009622:	4b24      	ldr	r3, [pc, #144]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009626:	4b24      	ldr	r3, [pc, #144]	; (80096b8 <RCCEx_PLL2_Config+0x160>)
 8009628:	4013      	ands	r3, r2
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	69d2      	ldr	r2, [r2, #28]
 800962e:	00d2      	lsls	r2, r2, #3
 8009630:	4920      	ldr	r1, [pc, #128]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009632:	4313      	orrs	r3, r2
 8009634:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009636:	4b1f      	ldr	r3, [pc, #124]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963a:	4a1e      	ldr	r2, [pc, #120]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800963c:	f043 0310 	orr.w	r3, r3, #16
 8009640:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d106      	bne.n	8009656 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009648:	4b1a      	ldr	r3, [pc, #104]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	4a19      	ldr	r2, [pc, #100]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800964e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009652:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009654:	e00f      	b.n	8009676 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d106      	bne.n	800966a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800965c:	4b15      	ldr	r3, [pc, #84]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800965e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009660:	4a14      	ldr	r2, [pc, #80]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009666:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009668:	e005      	b.n	8009676 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800966a:	4b12      	ldr	r3, [pc, #72]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800966c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966e:	4a11      	ldr	r2, [pc, #68]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009674:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009676:	4b0f      	ldr	r3, [pc, #60]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a0e      	ldr	r2, [pc, #56]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800967c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009682:	f7f8 f9bd 	bl	8001a00 <HAL_GetTick>
 8009686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009688:	e008      	b.n	800969c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800968a:	f7f8 f9b9 	bl	8001a00 <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	2b02      	cmp	r3, #2
 8009696:	d901      	bls.n	800969c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e006      	b.n	80096aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800969c:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d0f0      	beq.n	800968a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	58024400 	.word	0x58024400
 80096b8:	ffff0007 	.word	0xffff0007

080096bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80096ca:	4b53      	ldr	r3, [pc, #332]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80096cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ce:	f003 0303 	and.w	r3, r3, #3
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d101      	bne.n	80096da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e099      	b.n	800980e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80096da:	4b4f      	ldr	r3, [pc, #316]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a4e      	ldr	r2, [pc, #312]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80096e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096e6:	f7f8 f98b 	bl	8001a00 <HAL_GetTick>
 80096ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096ec:	e008      	b.n	8009700 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80096ee:	f7f8 f987 	bl	8001a00 <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d901      	bls.n	8009700 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e086      	b.n	800980e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009700:	4b45      	ldr	r3, [pc, #276]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1f0      	bne.n	80096ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800970c:	4b42      	ldr	r3, [pc, #264]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 800970e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009710:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	051b      	lsls	r3, r3, #20
 800971a:	493f      	ldr	r1, [pc, #252]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 800971c:	4313      	orrs	r3, r2
 800971e:	628b      	str	r3, [r1, #40]	; 0x28
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	3b01      	subs	r3, #1
 8009726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	3b01      	subs	r3, #1
 8009730:	025b      	lsls	r3, r3, #9
 8009732:	b29b      	uxth	r3, r3
 8009734:	431a      	orrs	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	3b01      	subs	r3, #1
 800973c:	041b      	lsls	r3, r3, #16
 800973e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009742:	431a      	orrs	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	3b01      	subs	r3, #1
 800974a:	061b      	lsls	r3, r3, #24
 800974c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009750:	4931      	ldr	r1, [pc, #196]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009752:	4313      	orrs	r3, r2
 8009754:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009756:	4b30      	ldr	r3, [pc, #192]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	492d      	ldr	r1, [pc, #180]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009764:	4313      	orrs	r3, r2
 8009766:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009768:	4b2b      	ldr	r3, [pc, #172]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 800976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	4928      	ldr	r1, [pc, #160]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009776:	4313      	orrs	r3, r2
 8009778:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800977a:	4b27      	ldr	r3, [pc, #156]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 800977c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977e:	4a26      	ldr	r2, [pc, #152]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009784:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009786:	4b24      	ldr	r3, [pc, #144]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800978a:	4b24      	ldr	r3, [pc, #144]	; (800981c <RCCEx_PLL3_Config+0x160>)
 800978c:	4013      	ands	r3, r2
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	69d2      	ldr	r2, [r2, #28]
 8009792:	00d2      	lsls	r2, r2, #3
 8009794:	4920      	ldr	r1, [pc, #128]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009796:	4313      	orrs	r3, r2
 8009798:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800979a:	4b1f      	ldr	r3, [pc, #124]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 800979c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979e:	4a1e      	ldr	r2, [pc, #120]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d106      	bne.n	80097ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80097ac:	4b1a      	ldr	r3, [pc, #104]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b0:	4a19      	ldr	r2, [pc, #100]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80097b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80097b8:	e00f      	b.n	80097da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d106      	bne.n	80097ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80097c0:	4b15      	ldr	r3, [pc, #84]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c4:	4a14      	ldr	r2, [pc, #80]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80097ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80097cc:	e005      	b.n	80097da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80097ce:	4b12      	ldr	r3, [pc, #72]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d2:	4a11      	ldr	r2, [pc, #68]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80097da:	4b0f      	ldr	r3, [pc, #60]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a0e      	ldr	r2, [pc, #56]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097e6:	f7f8 f90b 	bl	8001a00 <HAL_GetTick>
 80097ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097ec:	e008      	b.n	8009800 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80097ee:	f7f8 f907 	bl	8001a00 <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d901      	bls.n	8009800 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097fc:	2303      	movs	r3, #3
 80097fe:	e006      	b.n	800980e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009800:	4b05      	ldr	r3, [pc, #20]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d0f0      	beq.n	80097ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800980c:	7bfb      	ldrb	r3, [r7, #15]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	58024400 	.word	0x58024400
 800981c:	ffff0007 	.word	0xffff0007

08009820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e049      	b.n	80098c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d106      	bne.n	800984c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7f7 fe0e 	bl	8001468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3304      	adds	r3, #4
 800985c:	4619      	mov	r1, r3
 800985e:	4610      	mov	r0, r2
 8009860:	f000 fde2 	bl	800a428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d001      	beq.n	80098e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e04c      	b.n	8009982 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2202      	movs	r2, #2
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a26      	ldr	r2, [pc, #152]	; (8009990 <HAL_TIM_Base_Start+0xc0>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d022      	beq.n	8009940 <HAL_TIM_Base_Start+0x70>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009902:	d01d      	beq.n	8009940 <HAL_TIM_Base_Start+0x70>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a22      	ldr	r2, [pc, #136]	; (8009994 <HAL_TIM_Base_Start+0xc4>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d018      	beq.n	8009940 <HAL_TIM_Base_Start+0x70>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a21      	ldr	r2, [pc, #132]	; (8009998 <HAL_TIM_Base_Start+0xc8>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d013      	beq.n	8009940 <HAL_TIM_Base_Start+0x70>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a1f      	ldr	r2, [pc, #124]	; (800999c <HAL_TIM_Base_Start+0xcc>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d00e      	beq.n	8009940 <HAL_TIM_Base_Start+0x70>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a1e      	ldr	r2, [pc, #120]	; (80099a0 <HAL_TIM_Base_Start+0xd0>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d009      	beq.n	8009940 <HAL_TIM_Base_Start+0x70>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a1c      	ldr	r2, [pc, #112]	; (80099a4 <HAL_TIM_Base_Start+0xd4>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d004      	beq.n	8009940 <HAL_TIM_Base_Start+0x70>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a1b      	ldr	r2, [pc, #108]	; (80099a8 <HAL_TIM_Base_Start+0xd8>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d115      	bne.n	800996c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	689a      	ldr	r2, [r3, #8]
 8009946:	4b19      	ldr	r3, [pc, #100]	; (80099ac <HAL_TIM_Base_Start+0xdc>)
 8009948:	4013      	ands	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b06      	cmp	r3, #6
 8009950:	d015      	beq.n	800997e <HAL_TIM_Base_Start+0xae>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009958:	d011      	beq.n	800997e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f042 0201 	orr.w	r2, r2, #1
 8009968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800996a:	e008      	b.n	800997e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f042 0201 	orr.w	r2, r2, #1
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	e000      	b.n	8009980 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800997e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	40010000 	.word	0x40010000
 8009994:	40000400 	.word	0x40000400
 8009998:	40000800 	.word	0x40000800
 800999c:	40000c00 	.word	0x40000c00
 80099a0:	40010400 	.word	0x40010400
 80099a4:	40001800 	.word	0x40001800
 80099a8:	40014000 	.word	0x40014000
 80099ac:	00010007 	.word	0x00010007

080099b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d001      	beq.n	80099c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e054      	b.n	8009a72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68da      	ldr	r2, [r3, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f042 0201 	orr.w	r2, r2, #1
 80099de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a26      	ldr	r2, [pc, #152]	; (8009a80 <HAL_TIM_Base_Start_IT+0xd0>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d022      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099f2:	d01d      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a22      	ldr	r2, [pc, #136]	; (8009a84 <HAL_TIM_Base_Start_IT+0xd4>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d018      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a21      	ldr	r2, [pc, #132]	; (8009a88 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d013      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a1f      	ldr	r2, [pc, #124]	; (8009a8c <HAL_TIM_Base_Start_IT+0xdc>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d00e      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1e      	ldr	r2, [pc, #120]	; (8009a90 <HAL_TIM_Base_Start_IT+0xe0>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d009      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1c      	ldr	r2, [pc, #112]	; (8009a94 <HAL_TIM_Base_Start_IT+0xe4>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d004      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a1b      	ldr	r2, [pc, #108]	; (8009a98 <HAL_TIM_Base_Start_IT+0xe8>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d115      	bne.n	8009a5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	689a      	ldr	r2, [r3, #8]
 8009a36:	4b19      	ldr	r3, [pc, #100]	; (8009a9c <HAL_TIM_Base_Start_IT+0xec>)
 8009a38:	4013      	ands	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2b06      	cmp	r3, #6
 8009a40:	d015      	beq.n	8009a6e <HAL_TIM_Base_Start_IT+0xbe>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a48:	d011      	beq.n	8009a6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f042 0201 	orr.w	r2, r2, #1
 8009a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a5a:	e008      	b.n	8009a6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f042 0201 	orr.w	r2, r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	e000      	b.n	8009a70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	40010000 	.word	0x40010000
 8009a84:	40000400 	.word	0x40000400
 8009a88:	40000800 	.word	0x40000800
 8009a8c:	40000c00 	.word	0x40000c00
 8009a90:	40010400 	.word	0x40010400
 8009a94:	40001800 	.word	0x40001800
 8009a98:	40014000 	.word	0x40014000
 8009a9c:	00010007 	.word	0x00010007

08009aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e049      	b.n	8009b46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d106      	bne.n	8009acc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f841 	bl	8009b4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4619      	mov	r1, r3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	f000 fca2 	bl	800a428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b4e:	b480      	push	{r7}
 8009b50:	b083      	sub	sp, #12
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b56:	bf00      	nop
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
	...

08009b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d109      	bne.n	8009b88 <HAL_TIM_PWM_Start+0x24>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	bf14      	ite	ne
 8009b80:	2301      	movne	r3, #1
 8009b82:	2300      	moveq	r3, #0
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	e03c      	b.n	8009c02 <HAL_TIM_PWM_Start+0x9e>
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	2b04      	cmp	r3, #4
 8009b8c:	d109      	bne.n	8009ba2 <HAL_TIM_PWM_Start+0x3e>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	bf14      	ite	ne
 8009b9a:	2301      	movne	r3, #1
 8009b9c:	2300      	moveq	r3, #0
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	e02f      	b.n	8009c02 <HAL_TIM_PWM_Start+0x9e>
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b08      	cmp	r3, #8
 8009ba6:	d109      	bne.n	8009bbc <HAL_TIM_PWM_Start+0x58>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	bf14      	ite	ne
 8009bb4:	2301      	movne	r3, #1
 8009bb6:	2300      	moveq	r3, #0
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	e022      	b.n	8009c02 <HAL_TIM_PWM_Start+0x9e>
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2b0c      	cmp	r3, #12
 8009bc0:	d109      	bne.n	8009bd6 <HAL_TIM_PWM_Start+0x72>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	bf14      	ite	ne
 8009bce:	2301      	movne	r3, #1
 8009bd0:	2300      	moveq	r3, #0
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	e015      	b.n	8009c02 <HAL_TIM_PWM_Start+0x9e>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	2b10      	cmp	r3, #16
 8009bda:	d109      	bne.n	8009bf0 <HAL_TIM_PWM_Start+0x8c>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	bf14      	ite	ne
 8009be8:	2301      	movne	r3, #1
 8009bea:	2300      	moveq	r3, #0
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	e008      	b.n	8009c02 <HAL_TIM_PWM_Start+0x9e>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	bf14      	ite	ne
 8009bfc:	2301      	movne	r3, #1
 8009bfe:	2300      	moveq	r3, #0
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e0a1      	b.n	8009d4e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d104      	bne.n	8009c1a <HAL_TIM_PWM_Start+0xb6>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2202      	movs	r2, #2
 8009c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c18:	e023      	b.n	8009c62 <HAL_TIM_PWM_Start+0xfe>
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d104      	bne.n	8009c2a <HAL_TIM_PWM_Start+0xc6>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2202      	movs	r2, #2
 8009c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c28:	e01b      	b.n	8009c62 <HAL_TIM_PWM_Start+0xfe>
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2b08      	cmp	r3, #8
 8009c2e:	d104      	bne.n	8009c3a <HAL_TIM_PWM_Start+0xd6>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2202      	movs	r2, #2
 8009c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c38:	e013      	b.n	8009c62 <HAL_TIM_PWM_Start+0xfe>
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2b0c      	cmp	r3, #12
 8009c3e:	d104      	bne.n	8009c4a <HAL_TIM_PWM_Start+0xe6>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2202      	movs	r2, #2
 8009c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c48:	e00b      	b.n	8009c62 <HAL_TIM_PWM_Start+0xfe>
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2b10      	cmp	r3, #16
 8009c4e:	d104      	bne.n	8009c5a <HAL_TIM_PWM_Start+0xf6>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2202      	movs	r2, #2
 8009c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c58:	e003      	b.n	8009c62 <HAL_TIM_PWM_Start+0xfe>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2202      	movs	r2, #2
 8009c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2201      	movs	r2, #1
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 ffea 	bl	800ac44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a38      	ldr	r2, [pc, #224]	; (8009d58 <HAL_TIM_PWM_Start+0x1f4>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d013      	beq.n	8009ca2 <HAL_TIM_PWM_Start+0x13e>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a37      	ldr	r2, [pc, #220]	; (8009d5c <HAL_TIM_PWM_Start+0x1f8>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d00e      	beq.n	8009ca2 <HAL_TIM_PWM_Start+0x13e>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a35      	ldr	r2, [pc, #212]	; (8009d60 <HAL_TIM_PWM_Start+0x1fc>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d009      	beq.n	8009ca2 <HAL_TIM_PWM_Start+0x13e>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a34      	ldr	r2, [pc, #208]	; (8009d64 <HAL_TIM_PWM_Start+0x200>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d004      	beq.n	8009ca2 <HAL_TIM_PWM_Start+0x13e>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a32      	ldr	r2, [pc, #200]	; (8009d68 <HAL_TIM_PWM_Start+0x204>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d101      	bne.n	8009ca6 <HAL_TIM_PWM_Start+0x142>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e000      	b.n	8009ca8 <HAL_TIM_PWM_Start+0x144>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d007      	beq.n	8009cbc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a25      	ldr	r2, [pc, #148]	; (8009d58 <HAL_TIM_PWM_Start+0x1f4>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d022      	beq.n	8009d0c <HAL_TIM_PWM_Start+0x1a8>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cce:	d01d      	beq.n	8009d0c <HAL_TIM_PWM_Start+0x1a8>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a25      	ldr	r2, [pc, #148]	; (8009d6c <HAL_TIM_PWM_Start+0x208>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d018      	beq.n	8009d0c <HAL_TIM_PWM_Start+0x1a8>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a24      	ldr	r2, [pc, #144]	; (8009d70 <HAL_TIM_PWM_Start+0x20c>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d013      	beq.n	8009d0c <HAL_TIM_PWM_Start+0x1a8>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a22      	ldr	r2, [pc, #136]	; (8009d74 <HAL_TIM_PWM_Start+0x210>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00e      	beq.n	8009d0c <HAL_TIM_PWM_Start+0x1a8>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a1a      	ldr	r2, [pc, #104]	; (8009d5c <HAL_TIM_PWM_Start+0x1f8>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d009      	beq.n	8009d0c <HAL_TIM_PWM_Start+0x1a8>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a1e      	ldr	r2, [pc, #120]	; (8009d78 <HAL_TIM_PWM_Start+0x214>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d004      	beq.n	8009d0c <HAL_TIM_PWM_Start+0x1a8>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a16      	ldr	r2, [pc, #88]	; (8009d60 <HAL_TIM_PWM_Start+0x1fc>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d115      	bne.n	8009d38 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	689a      	ldr	r2, [r3, #8]
 8009d12:	4b1a      	ldr	r3, [pc, #104]	; (8009d7c <HAL_TIM_PWM_Start+0x218>)
 8009d14:	4013      	ands	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2b06      	cmp	r3, #6
 8009d1c:	d015      	beq.n	8009d4a <HAL_TIM_PWM_Start+0x1e6>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d24:	d011      	beq.n	8009d4a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f042 0201 	orr.w	r2, r2, #1
 8009d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d36:	e008      	b.n	8009d4a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f042 0201 	orr.w	r2, r2, #1
 8009d46:	601a      	str	r2, [r3, #0]
 8009d48:	e000      	b.n	8009d4c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	40010000 	.word	0x40010000
 8009d5c:	40010400 	.word	0x40010400
 8009d60:	40014000 	.word	0x40014000
 8009d64:	40014400 	.word	0x40014400
 8009d68:	40014800 	.word	0x40014800
 8009d6c:	40000400 	.word	0x40000400
 8009d70:	40000800 	.word	0x40000800
 8009d74:	40000c00 	.word	0x40000c00
 8009d78:	40001800 	.word	0x40001800
 8009d7c:	00010007 	.word	0x00010007

08009d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	f003 0302 	and.w	r3, r3, #2
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d122      	bne.n	8009ddc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f003 0302 	and.w	r3, r3, #2
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d11b      	bne.n	8009ddc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f06f 0202 	mvn.w	r2, #2
 8009dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	f003 0303 	and.w	r3, r3, #3
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d003      	beq.n	8009dca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fb12 	bl	800a3ec <HAL_TIM_IC_CaptureCallback>
 8009dc8:	e005      	b.n	8009dd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fb04 	bl	800a3d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fb15 	bl	800a400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	f003 0304 	and.w	r3, r3, #4
 8009de6:	2b04      	cmp	r3, #4
 8009de8:	d122      	bne.n	8009e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	f003 0304 	and.w	r3, r3, #4
 8009df4:	2b04      	cmp	r3, #4
 8009df6:	d11b      	bne.n	8009e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f06f 0204 	mvn.w	r2, #4
 8009e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2202      	movs	r2, #2
 8009e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d003      	beq.n	8009e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fae8 	bl	800a3ec <HAL_TIM_IC_CaptureCallback>
 8009e1c:	e005      	b.n	8009e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fada 	bl	800a3d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 faeb 	bl	800a400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	f003 0308 	and.w	r3, r3, #8
 8009e3a:	2b08      	cmp	r3, #8
 8009e3c:	d122      	bne.n	8009e84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	f003 0308 	and.w	r3, r3, #8
 8009e48:	2b08      	cmp	r3, #8
 8009e4a:	d11b      	bne.n	8009e84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f06f 0208 	mvn.w	r2, #8
 8009e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2204      	movs	r2, #4
 8009e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	69db      	ldr	r3, [r3, #28]
 8009e62:	f003 0303 	and.w	r3, r3, #3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fabe 	bl	800a3ec <HAL_TIM_IC_CaptureCallback>
 8009e70:	e005      	b.n	8009e7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fab0 	bl	800a3d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fac1 	bl	800a400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	f003 0310 	and.w	r3, r3, #16
 8009e8e:	2b10      	cmp	r3, #16
 8009e90:	d122      	bne.n	8009ed8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	f003 0310 	and.w	r3, r3, #16
 8009e9c:	2b10      	cmp	r3, #16
 8009e9e:	d11b      	bne.n	8009ed8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f06f 0210 	mvn.w	r2, #16
 8009ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2208      	movs	r2, #8
 8009eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	69db      	ldr	r3, [r3, #28]
 8009eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fa94 	bl	800a3ec <HAL_TIM_IC_CaptureCallback>
 8009ec4:	e005      	b.n	8009ed2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fa86 	bl	800a3d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fa97 	bl	800a400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d10e      	bne.n	8009f04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d107      	bne.n	8009f04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f06f 0201 	mvn.w	r2, #1
 8009efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7f7 f8be 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f0e:	2b80      	cmp	r3, #128	; 0x80
 8009f10:	d10e      	bne.n	8009f30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f1c:	2b80      	cmp	r3, #128	; 0x80
 8009f1e:	d107      	bne.n	8009f30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 ffc6 	bl	800aebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f3e:	d10e      	bne.n	8009f5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f4a:	2b80      	cmp	r3, #128	; 0x80
 8009f4c:	d107      	bne.n	8009f5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 ffb9 	bl	800aed0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f68:	2b40      	cmp	r3, #64	; 0x40
 8009f6a:	d10e      	bne.n	8009f8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f76:	2b40      	cmp	r3, #64	; 0x40
 8009f78:	d107      	bne.n	8009f8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fa45 	bl	800a414 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	f003 0320 	and.w	r3, r3, #32
 8009f94:	2b20      	cmp	r3, #32
 8009f96:	d10e      	bne.n	8009fb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	f003 0320 	and.w	r3, r3, #32
 8009fa2:	2b20      	cmp	r3, #32
 8009fa4:	d107      	bne.n	8009fb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f06f 0220 	mvn.w	r2, #32
 8009fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 ff79 	bl	800aea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009fb6:	bf00      	nop
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d101      	bne.n	8009fde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009fda:	2302      	movs	r3, #2
 8009fdc:	e0ff      	b.n	800a1de <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b14      	cmp	r3, #20
 8009fea:	f200 80f0 	bhi.w	800a1ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009fee:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff4:	0800a049 	.word	0x0800a049
 8009ff8:	0800a1cf 	.word	0x0800a1cf
 8009ffc:	0800a1cf 	.word	0x0800a1cf
 800a000:	0800a1cf 	.word	0x0800a1cf
 800a004:	0800a089 	.word	0x0800a089
 800a008:	0800a1cf 	.word	0x0800a1cf
 800a00c:	0800a1cf 	.word	0x0800a1cf
 800a010:	0800a1cf 	.word	0x0800a1cf
 800a014:	0800a0cb 	.word	0x0800a0cb
 800a018:	0800a1cf 	.word	0x0800a1cf
 800a01c:	0800a1cf 	.word	0x0800a1cf
 800a020:	0800a1cf 	.word	0x0800a1cf
 800a024:	0800a10b 	.word	0x0800a10b
 800a028:	0800a1cf 	.word	0x0800a1cf
 800a02c:	0800a1cf 	.word	0x0800a1cf
 800a030:	0800a1cf 	.word	0x0800a1cf
 800a034:	0800a14d 	.word	0x0800a14d
 800a038:	0800a1cf 	.word	0x0800a1cf
 800a03c:	0800a1cf 	.word	0x0800a1cf
 800a040:	0800a1cf 	.word	0x0800a1cf
 800a044:	0800a18d 	.word	0x0800a18d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68b9      	ldr	r1, [r7, #8]
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 fa84 	bl	800a55c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f042 0208 	orr.w	r2, r2, #8
 800a062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	699a      	ldr	r2, [r3, #24]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f022 0204 	bic.w	r2, r2, #4
 800a072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6999      	ldr	r1, [r3, #24]
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	691a      	ldr	r2, [r3, #16]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	430a      	orrs	r2, r1
 800a084:	619a      	str	r2, [r3, #24]
      break;
 800a086:	e0a5      	b.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68b9      	ldr	r1, [r7, #8]
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 faf4 	bl	800a67c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	699a      	ldr	r2, [r3, #24]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	699a      	ldr	r2, [r3, #24]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6999      	ldr	r1, [r3, #24]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	021a      	lsls	r2, r3, #8
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	619a      	str	r2, [r3, #24]
      break;
 800a0c8:	e084      	b.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68b9      	ldr	r1, [r7, #8]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fb5d 	bl	800a790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69da      	ldr	r2, [r3, #28]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f042 0208 	orr.w	r2, r2, #8
 800a0e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69da      	ldr	r2, [r3, #28]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f022 0204 	bic.w	r2, r2, #4
 800a0f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	69d9      	ldr	r1, [r3, #28]
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	691a      	ldr	r2, [r3, #16]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	61da      	str	r2, [r3, #28]
      break;
 800a108:	e064      	b.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68b9      	ldr	r1, [r7, #8]
 800a110:	4618      	mov	r0, r3
 800a112:	f000 fbc5 	bl	800a8a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69da      	ldr	r2, [r3, #28]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69da      	ldr	r2, [r3, #28]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69d9      	ldr	r1, [r3, #28]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	021a      	lsls	r2, r3, #8
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	430a      	orrs	r2, r1
 800a148:	61da      	str	r2, [r3, #28]
      break;
 800a14a:	e043      	b.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68b9      	ldr	r1, [r7, #8]
 800a152:	4618      	mov	r0, r3
 800a154:	f000 fc0e 	bl	800a974 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f042 0208 	orr.w	r2, r2, #8
 800a166:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 0204 	bic.w	r2, r2, #4
 800a176:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	691a      	ldr	r2, [r3, #16]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a18a:	e023      	b.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68b9      	ldr	r1, [r7, #8]
 800a192:	4618      	mov	r0, r3
 800a194:	f000 fc52 	bl	800aa3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	021a      	lsls	r2, r3, #8
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a1cc:	e002      	b.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3718      	adds	r7, #24
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop

0800a1e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d101      	bne.n	800a204 <HAL_TIM_ConfigClockSource+0x1c>
 800a200:	2302      	movs	r3, #2
 800a202:	e0dc      	b.n	800a3be <HAL_TIM_ConfigClockSource+0x1d6>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	4b6a      	ldr	r3, [pc, #424]	; (800a3c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a220:	4013      	ands	r3, r2
 800a222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a22a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a64      	ldr	r2, [pc, #400]	; (800a3cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	f000 80a9 	beq.w	800a392 <HAL_TIM_ConfigClockSource+0x1aa>
 800a240:	4a62      	ldr	r2, [pc, #392]	; (800a3cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800a242:	4293      	cmp	r3, r2
 800a244:	f200 80ae 	bhi.w	800a3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a248:	4a61      	ldr	r2, [pc, #388]	; (800a3d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	f000 80a1 	beq.w	800a392 <HAL_TIM_ConfigClockSource+0x1aa>
 800a250:	4a5f      	ldr	r2, [pc, #380]	; (800a3d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a252:	4293      	cmp	r3, r2
 800a254:	f200 80a6 	bhi.w	800a3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a258:	4a5e      	ldr	r2, [pc, #376]	; (800a3d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	f000 8099 	beq.w	800a392 <HAL_TIM_ConfigClockSource+0x1aa>
 800a260:	4a5c      	ldr	r2, [pc, #368]	; (800a3d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a262:	4293      	cmp	r3, r2
 800a264:	f200 809e 	bhi.w	800a3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a268:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a26c:	f000 8091 	beq.w	800a392 <HAL_TIM_ConfigClockSource+0x1aa>
 800a270:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a274:	f200 8096 	bhi.w	800a3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a27c:	f000 8089 	beq.w	800a392 <HAL_TIM_ConfigClockSource+0x1aa>
 800a280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a284:	f200 808e 	bhi.w	800a3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a28c:	d03e      	beq.n	800a30c <HAL_TIM_ConfigClockSource+0x124>
 800a28e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a292:	f200 8087 	bhi.w	800a3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a29a:	f000 8086 	beq.w	800a3aa <HAL_TIM_ConfigClockSource+0x1c2>
 800a29e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2a2:	d87f      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2a4:	2b70      	cmp	r3, #112	; 0x70
 800a2a6:	d01a      	beq.n	800a2de <HAL_TIM_ConfigClockSource+0xf6>
 800a2a8:	2b70      	cmp	r3, #112	; 0x70
 800a2aa:	d87b      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2ac:	2b60      	cmp	r3, #96	; 0x60
 800a2ae:	d050      	beq.n	800a352 <HAL_TIM_ConfigClockSource+0x16a>
 800a2b0:	2b60      	cmp	r3, #96	; 0x60
 800a2b2:	d877      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2b4:	2b50      	cmp	r3, #80	; 0x50
 800a2b6:	d03c      	beq.n	800a332 <HAL_TIM_ConfigClockSource+0x14a>
 800a2b8:	2b50      	cmp	r3, #80	; 0x50
 800a2ba:	d873      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2bc:	2b40      	cmp	r3, #64	; 0x40
 800a2be:	d058      	beq.n	800a372 <HAL_TIM_ConfigClockSource+0x18a>
 800a2c0:	2b40      	cmp	r3, #64	; 0x40
 800a2c2:	d86f      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2c4:	2b30      	cmp	r3, #48	; 0x30
 800a2c6:	d064      	beq.n	800a392 <HAL_TIM_ConfigClockSource+0x1aa>
 800a2c8:	2b30      	cmp	r3, #48	; 0x30
 800a2ca:	d86b      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2cc:	2b20      	cmp	r3, #32
 800a2ce:	d060      	beq.n	800a392 <HAL_TIM_ConfigClockSource+0x1aa>
 800a2d0:	2b20      	cmp	r3, #32
 800a2d2:	d867      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d05c      	beq.n	800a392 <HAL_TIM_ConfigClockSource+0x1aa>
 800a2d8:	2b10      	cmp	r3, #16
 800a2da:	d05a      	beq.n	800a392 <HAL_TIM_ConfigClockSource+0x1aa>
 800a2dc:	e062      	b.n	800a3a4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	6899      	ldr	r1, [r3, #8]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	685a      	ldr	r2, [r3, #4]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	f000 fc89 	bl	800ac04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a300:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	609a      	str	r2, [r3, #8]
      break;
 800a30a:	e04f      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6818      	ldr	r0, [r3, #0]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	6899      	ldr	r1, [r3, #8]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	f000 fc72 	bl	800ac04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	689a      	ldr	r2, [r3, #8]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a32e:	609a      	str	r2, [r3, #8]
      break;
 800a330:	e03c      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6818      	ldr	r0, [r3, #0]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	6859      	ldr	r1, [r3, #4]
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	461a      	mov	r2, r3
 800a340:	f000 fbe2 	bl	800ab08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2150      	movs	r1, #80	; 0x50
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 fc3c 	bl	800abc8 <TIM_ITRx_SetConfig>
      break;
 800a350:	e02c      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6818      	ldr	r0, [r3, #0]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	6859      	ldr	r1, [r3, #4]
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	461a      	mov	r2, r3
 800a360:	f000 fc01 	bl	800ab66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2160      	movs	r1, #96	; 0x60
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 fc2c 	bl	800abc8 <TIM_ITRx_SetConfig>
      break;
 800a370:	e01c      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6818      	ldr	r0, [r3, #0]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	6859      	ldr	r1, [r3, #4]
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	461a      	mov	r2, r3
 800a380:	f000 fbc2 	bl	800ab08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2140      	movs	r1, #64	; 0x40
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 fc1c 	bl	800abc8 <TIM_ITRx_SetConfig>
      break;
 800a390:	e00c      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4619      	mov	r1, r3
 800a39c:	4610      	mov	r0, r2
 800a39e:	f000 fc13 	bl	800abc8 <TIM_ITRx_SetConfig>
      break;
 800a3a2:	e003      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a3a8:	e000      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a3aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	ffceff88 	.word	0xffceff88
 800a3cc:	00100040 	.word	0x00100040
 800a3d0:	00100030 	.word	0x00100030
 800a3d4:	00100020 	.word	0x00100020

0800a3d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3e0:	bf00      	nop
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4a40      	ldr	r2, [pc, #256]	; (800a53c <TIM_Base_SetConfig+0x114>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d013      	beq.n	800a468 <TIM_Base_SetConfig+0x40>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a446:	d00f      	beq.n	800a468 <TIM_Base_SetConfig+0x40>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a3d      	ldr	r2, [pc, #244]	; (800a540 <TIM_Base_SetConfig+0x118>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d00b      	beq.n	800a468 <TIM_Base_SetConfig+0x40>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a3c      	ldr	r2, [pc, #240]	; (800a544 <TIM_Base_SetConfig+0x11c>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d007      	beq.n	800a468 <TIM_Base_SetConfig+0x40>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	4a3b      	ldr	r2, [pc, #236]	; (800a548 <TIM_Base_SetConfig+0x120>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d003      	beq.n	800a468 <TIM_Base_SetConfig+0x40>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a3a      	ldr	r2, [pc, #232]	; (800a54c <TIM_Base_SetConfig+0x124>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d108      	bne.n	800a47a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a46e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	4313      	orrs	r3, r2
 800a478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a2f      	ldr	r2, [pc, #188]	; (800a53c <TIM_Base_SetConfig+0x114>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d01f      	beq.n	800a4c2 <TIM_Base_SetConfig+0x9a>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a488:	d01b      	beq.n	800a4c2 <TIM_Base_SetConfig+0x9a>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a2c      	ldr	r2, [pc, #176]	; (800a540 <TIM_Base_SetConfig+0x118>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d017      	beq.n	800a4c2 <TIM_Base_SetConfig+0x9a>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a2b      	ldr	r2, [pc, #172]	; (800a544 <TIM_Base_SetConfig+0x11c>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d013      	beq.n	800a4c2 <TIM_Base_SetConfig+0x9a>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a2a      	ldr	r2, [pc, #168]	; (800a548 <TIM_Base_SetConfig+0x120>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d00f      	beq.n	800a4c2 <TIM_Base_SetConfig+0x9a>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a29      	ldr	r2, [pc, #164]	; (800a54c <TIM_Base_SetConfig+0x124>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d00b      	beq.n	800a4c2 <TIM_Base_SetConfig+0x9a>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4a28      	ldr	r2, [pc, #160]	; (800a550 <TIM_Base_SetConfig+0x128>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d007      	beq.n	800a4c2 <TIM_Base_SetConfig+0x9a>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a27      	ldr	r2, [pc, #156]	; (800a554 <TIM_Base_SetConfig+0x12c>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d003      	beq.n	800a4c2 <TIM_Base_SetConfig+0x9a>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a26      	ldr	r2, [pc, #152]	; (800a558 <TIM_Base_SetConfig+0x130>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d108      	bne.n	800a4d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	689a      	ldr	r2, [r3, #8]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4a10      	ldr	r2, [pc, #64]	; (800a53c <TIM_Base_SetConfig+0x114>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d00f      	beq.n	800a520 <TIM_Base_SetConfig+0xf8>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a12      	ldr	r2, [pc, #72]	; (800a54c <TIM_Base_SetConfig+0x124>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d00b      	beq.n	800a520 <TIM_Base_SetConfig+0xf8>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a11      	ldr	r2, [pc, #68]	; (800a550 <TIM_Base_SetConfig+0x128>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d007      	beq.n	800a520 <TIM_Base_SetConfig+0xf8>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a10      	ldr	r2, [pc, #64]	; (800a554 <TIM_Base_SetConfig+0x12c>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d003      	beq.n	800a520 <TIM_Base_SetConfig+0xf8>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a0f      	ldr	r2, [pc, #60]	; (800a558 <TIM_Base_SetConfig+0x130>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d103      	bne.n	800a528 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	691a      	ldr	r2, [r3, #16]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	615a      	str	r2, [r3, #20]
}
 800a52e:	bf00      	nop
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	40010000 	.word	0x40010000
 800a540:	40000400 	.word	0x40000400
 800a544:	40000800 	.word	0x40000800
 800a548:	40000c00 	.word	0x40000c00
 800a54c:	40010400 	.word	0x40010400
 800a550:	40014000 	.word	0x40014000
 800a554:	40014400 	.word	0x40014400
 800a558:	40014800 	.word	0x40014800

0800a55c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	f023 0201 	bic.w	r2, r3, #1
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	4b37      	ldr	r3, [pc, #220]	; (800a664 <TIM_OC1_SetConfig+0x108>)
 800a588:	4013      	ands	r3, r2
 800a58a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f023 0303 	bic.w	r3, r3, #3
 800a592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f023 0302 	bic.w	r3, r3, #2
 800a5a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a2d      	ldr	r2, [pc, #180]	; (800a668 <TIM_OC1_SetConfig+0x10c>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d00f      	beq.n	800a5d8 <TIM_OC1_SetConfig+0x7c>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a2c      	ldr	r2, [pc, #176]	; (800a66c <TIM_OC1_SetConfig+0x110>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d00b      	beq.n	800a5d8 <TIM_OC1_SetConfig+0x7c>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a2b      	ldr	r2, [pc, #172]	; (800a670 <TIM_OC1_SetConfig+0x114>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d007      	beq.n	800a5d8 <TIM_OC1_SetConfig+0x7c>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a2a      	ldr	r2, [pc, #168]	; (800a674 <TIM_OC1_SetConfig+0x118>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d003      	beq.n	800a5d8 <TIM_OC1_SetConfig+0x7c>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4a29      	ldr	r2, [pc, #164]	; (800a678 <TIM_OC1_SetConfig+0x11c>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d10c      	bne.n	800a5f2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	f023 0308 	bic.w	r3, r3, #8
 800a5de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f023 0304 	bic.w	r3, r3, #4
 800a5f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a1c      	ldr	r2, [pc, #112]	; (800a668 <TIM_OC1_SetConfig+0x10c>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d00f      	beq.n	800a61a <TIM_OC1_SetConfig+0xbe>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a1b      	ldr	r2, [pc, #108]	; (800a66c <TIM_OC1_SetConfig+0x110>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d00b      	beq.n	800a61a <TIM_OC1_SetConfig+0xbe>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a1a      	ldr	r2, [pc, #104]	; (800a670 <TIM_OC1_SetConfig+0x114>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d007      	beq.n	800a61a <TIM_OC1_SetConfig+0xbe>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a19      	ldr	r2, [pc, #100]	; (800a674 <TIM_OC1_SetConfig+0x118>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d003      	beq.n	800a61a <TIM_OC1_SetConfig+0xbe>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4a18      	ldr	r2, [pc, #96]	; (800a678 <TIM_OC1_SetConfig+0x11c>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d111      	bne.n	800a63e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	695b      	ldr	r3, [r3, #20]
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	4313      	orrs	r3, r2
 800a632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	621a      	str	r2, [r3, #32]
}
 800a658:	bf00      	nop
 800a65a:	371c      	adds	r7, #28
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	fffeff8f 	.word	0xfffeff8f
 800a668:	40010000 	.word	0x40010000
 800a66c:	40010400 	.word	0x40010400
 800a670:	40014000 	.word	0x40014000
 800a674:	40014400 	.word	0x40014400
 800a678:	40014800 	.word	0x40014800

0800a67c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b087      	sub	sp, #28
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	f023 0210 	bic.w	r2, r3, #16
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a1b      	ldr	r3, [r3, #32]
 800a696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	4b34      	ldr	r3, [pc, #208]	; (800a778 <TIM_OC2_SetConfig+0xfc>)
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	021b      	lsls	r3, r3, #8
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	f023 0320 	bic.w	r3, r3, #32
 800a6c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	011b      	lsls	r3, r3, #4
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a29      	ldr	r2, [pc, #164]	; (800a77c <TIM_OC2_SetConfig+0x100>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d003      	beq.n	800a6e4 <TIM_OC2_SetConfig+0x68>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a28      	ldr	r2, [pc, #160]	; (800a780 <TIM_OC2_SetConfig+0x104>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d10d      	bne.n	800a700 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	011b      	lsls	r3, r3, #4
 800a6f2:	697a      	ldr	r2, [r7, #20]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a1e      	ldr	r2, [pc, #120]	; (800a77c <TIM_OC2_SetConfig+0x100>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d00f      	beq.n	800a728 <TIM_OC2_SetConfig+0xac>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a1d      	ldr	r2, [pc, #116]	; (800a780 <TIM_OC2_SetConfig+0x104>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d00b      	beq.n	800a728 <TIM_OC2_SetConfig+0xac>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a1c      	ldr	r2, [pc, #112]	; (800a784 <TIM_OC2_SetConfig+0x108>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d007      	beq.n	800a728 <TIM_OC2_SetConfig+0xac>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a1b      	ldr	r2, [pc, #108]	; (800a788 <TIM_OC2_SetConfig+0x10c>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d003      	beq.n	800a728 <TIM_OC2_SetConfig+0xac>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a1a      	ldr	r2, [pc, #104]	; (800a78c <TIM_OC2_SetConfig+0x110>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d113      	bne.n	800a750 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a72e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a736:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	693a      	ldr	r2, [r7, #16]
 800a740:	4313      	orrs	r3, r2
 800a742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	693a      	ldr	r2, [r7, #16]
 800a754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	697a      	ldr	r2, [r7, #20]
 800a768:	621a      	str	r2, [r3, #32]
}
 800a76a:	bf00      	nop
 800a76c:	371c      	adds	r7, #28
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	feff8fff 	.word	0xfeff8fff
 800a77c:	40010000 	.word	0x40010000
 800a780:	40010400 	.word	0x40010400
 800a784:	40014000 	.word	0x40014000
 800a788:	40014400 	.word	0x40014400
 800a78c:	40014800 	.word	0x40014800

0800a790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a790:	b480      	push	{r7}
 800a792:	b087      	sub	sp, #28
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a1b      	ldr	r3, [r3, #32]
 800a79e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	4b33      	ldr	r3, [pc, #204]	; (800a888 <TIM_OC3_SetConfig+0xf8>)
 800a7bc:	4013      	ands	r3, r2
 800a7be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f023 0303 	bic.w	r3, r3, #3
 800a7c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	021b      	lsls	r3, r3, #8
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a28      	ldr	r2, [pc, #160]	; (800a88c <TIM_OC3_SetConfig+0xfc>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d003      	beq.n	800a7f6 <TIM_OC3_SetConfig+0x66>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a27      	ldr	r2, [pc, #156]	; (800a890 <TIM_OC3_SetConfig+0x100>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d10d      	bne.n	800a812 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	021b      	lsls	r3, r3, #8
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	4313      	orrs	r3, r2
 800a808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a1d      	ldr	r2, [pc, #116]	; (800a88c <TIM_OC3_SetConfig+0xfc>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d00f      	beq.n	800a83a <TIM_OC3_SetConfig+0xaa>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a1c      	ldr	r2, [pc, #112]	; (800a890 <TIM_OC3_SetConfig+0x100>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d00b      	beq.n	800a83a <TIM_OC3_SetConfig+0xaa>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a1b      	ldr	r2, [pc, #108]	; (800a894 <TIM_OC3_SetConfig+0x104>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d007      	beq.n	800a83a <TIM_OC3_SetConfig+0xaa>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a1a      	ldr	r2, [pc, #104]	; (800a898 <TIM_OC3_SetConfig+0x108>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d003      	beq.n	800a83a <TIM_OC3_SetConfig+0xaa>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a19      	ldr	r2, [pc, #100]	; (800a89c <TIM_OC3_SetConfig+0x10c>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d113      	bne.n	800a862 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	011b      	lsls	r3, r3, #4
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	4313      	orrs	r3, r2
 800a854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	011b      	lsls	r3, r3, #4
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	4313      	orrs	r3, r2
 800a860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	685a      	ldr	r2, [r3, #4]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	621a      	str	r2, [r3, #32]
}
 800a87c:	bf00      	nop
 800a87e:	371c      	adds	r7, #28
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	fffeff8f 	.word	0xfffeff8f
 800a88c:	40010000 	.word	0x40010000
 800a890:	40010400 	.word	0x40010400
 800a894:	40014000 	.word	0x40014000
 800a898:	40014400 	.word	0x40014400
 800a89c:	40014800 	.word	0x40014800

0800a8a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	69db      	ldr	r3, [r3, #28]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	4b24      	ldr	r3, [pc, #144]	; (800a95c <TIM_OC4_SetConfig+0xbc>)
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	021b      	lsls	r3, r3, #8
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	031b      	lsls	r3, r3, #12
 800a8f2:	693a      	ldr	r2, [r7, #16]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a19      	ldr	r2, [pc, #100]	; (800a960 <TIM_OC4_SetConfig+0xc0>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d00f      	beq.n	800a920 <TIM_OC4_SetConfig+0x80>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a18      	ldr	r2, [pc, #96]	; (800a964 <TIM_OC4_SetConfig+0xc4>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d00b      	beq.n	800a920 <TIM_OC4_SetConfig+0x80>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a17      	ldr	r2, [pc, #92]	; (800a968 <TIM_OC4_SetConfig+0xc8>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d007      	beq.n	800a920 <TIM_OC4_SetConfig+0x80>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a16      	ldr	r2, [pc, #88]	; (800a96c <TIM_OC4_SetConfig+0xcc>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d003      	beq.n	800a920 <TIM_OC4_SetConfig+0x80>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a15      	ldr	r2, [pc, #84]	; (800a970 <TIM_OC4_SetConfig+0xd0>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d109      	bne.n	800a934 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	695b      	ldr	r3, [r3, #20]
 800a92c:	019b      	lsls	r3, r3, #6
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	4313      	orrs	r3, r2
 800a932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	685a      	ldr	r2, [r3, #4]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	621a      	str	r2, [r3, #32]
}
 800a94e:	bf00      	nop
 800a950:	371c      	adds	r7, #28
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	feff8fff 	.word	0xfeff8fff
 800a960:	40010000 	.word	0x40010000
 800a964:	40010400 	.word	0x40010400
 800a968:	40014000 	.word	0x40014000
 800a96c:	40014400 	.word	0x40014400
 800a970:	40014800 	.word	0x40014800

0800a974 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a974:	b480      	push	{r7}
 800a976:	b087      	sub	sp, #28
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a1b      	ldr	r3, [r3, #32]
 800a98e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	4b21      	ldr	r3, [pc, #132]	; (800aa24 <TIM_OC5_SetConfig+0xb0>)
 800a9a0:	4013      	ands	r3, r2
 800a9a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a9b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	041b      	lsls	r3, r3, #16
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a18      	ldr	r2, [pc, #96]	; (800aa28 <TIM_OC5_SetConfig+0xb4>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d00f      	beq.n	800a9ea <TIM_OC5_SetConfig+0x76>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a17      	ldr	r2, [pc, #92]	; (800aa2c <TIM_OC5_SetConfig+0xb8>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d00b      	beq.n	800a9ea <TIM_OC5_SetConfig+0x76>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a16      	ldr	r2, [pc, #88]	; (800aa30 <TIM_OC5_SetConfig+0xbc>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d007      	beq.n	800a9ea <TIM_OC5_SetConfig+0x76>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a15      	ldr	r2, [pc, #84]	; (800aa34 <TIM_OC5_SetConfig+0xc0>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d003      	beq.n	800a9ea <TIM_OC5_SetConfig+0x76>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a14      	ldr	r2, [pc, #80]	; (800aa38 <TIM_OC5_SetConfig+0xc4>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d109      	bne.n	800a9fe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	021b      	lsls	r3, r3, #8
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	685a      	ldr	r2, [r3, #4]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	621a      	str	r2, [r3, #32]
}
 800aa18:	bf00      	nop
 800aa1a:	371c      	adds	r7, #28
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	fffeff8f 	.word	0xfffeff8f
 800aa28:	40010000 	.word	0x40010000
 800aa2c:	40010400 	.word	0x40010400
 800aa30:	40014000 	.word	0x40014000
 800aa34:	40014400 	.word	0x40014400
 800aa38:	40014800 	.word	0x40014800

0800aa3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b087      	sub	sp, #28
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	4b22      	ldr	r3, [pc, #136]	; (800aaf0 <TIM_OC6_SetConfig+0xb4>)
 800aa68:	4013      	ands	r3, r2
 800aa6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	021b      	lsls	r3, r3, #8
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	051b      	lsls	r3, r3, #20
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a19      	ldr	r2, [pc, #100]	; (800aaf4 <TIM_OC6_SetConfig+0xb8>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d00f      	beq.n	800aab4 <TIM_OC6_SetConfig+0x78>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a18      	ldr	r2, [pc, #96]	; (800aaf8 <TIM_OC6_SetConfig+0xbc>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d00b      	beq.n	800aab4 <TIM_OC6_SetConfig+0x78>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a17      	ldr	r2, [pc, #92]	; (800aafc <TIM_OC6_SetConfig+0xc0>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d007      	beq.n	800aab4 <TIM_OC6_SetConfig+0x78>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a16      	ldr	r2, [pc, #88]	; (800ab00 <TIM_OC6_SetConfig+0xc4>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d003      	beq.n	800aab4 <TIM_OC6_SetConfig+0x78>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a15      	ldr	r2, [pc, #84]	; (800ab04 <TIM_OC6_SetConfig+0xc8>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d109      	bne.n	800aac8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aaba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	695b      	ldr	r3, [r3, #20]
 800aac0:	029b      	lsls	r3, r3, #10
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	685a      	ldr	r2, [r3, #4]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	621a      	str	r2, [r3, #32]
}
 800aae2:	bf00      	nop
 800aae4:	371c      	adds	r7, #28
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	feff8fff 	.word	0xfeff8fff
 800aaf4:	40010000 	.word	0x40010000
 800aaf8:	40010400 	.word	0x40010400
 800aafc:	40014000 	.word	0x40014000
 800ab00:	40014400 	.word	0x40014400
 800ab04:	40014800 	.word	0x40014800

0800ab08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6a1b      	ldr	r3, [r3, #32]
 800ab18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	f023 0201 	bic.w	r2, r3, #1
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	011b      	lsls	r3, r3, #4
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f023 030a 	bic.w	r3, r3, #10
 800ab44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	621a      	str	r2, [r3, #32]
}
 800ab5a:	bf00      	nop
 800ab5c:	371c      	adds	r7, #28
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab66:	b480      	push	{r7}
 800ab68:	b087      	sub	sp, #28
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	60f8      	str	r0, [r7, #12]
 800ab6e:	60b9      	str	r1, [r7, #8]
 800ab70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	f023 0210 	bic.w	r2, r3, #16
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6a1b      	ldr	r3, [r3, #32]
 800ab88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	031b      	lsls	r3, r3, #12
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aba2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	011b      	lsls	r3, r3, #4
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	4313      	orrs	r3, r2
 800abac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	693a      	ldr	r2, [r7, #16]
 800abb8:	621a      	str	r2, [r3, #32]
}
 800abba:	bf00      	nop
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
	...

0800abc8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <TIM_ITRx_SetConfig+0x38>)
 800abdc:	4013      	ands	r3, r2
 800abde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	4313      	orrs	r3, r2
 800abe6:	f043 0307 	orr.w	r3, r3, #7
 800abea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	609a      	str	r2, [r3, #8]
}
 800abf2:	bf00      	nop
 800abf4:	3714      	adds	r7, #20
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	ffcfff8f 	.word	0xffcfff8f

0800ac04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b087      	sub	sp, #28
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
 800ac10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	021a      	lsls	r2, r3, #8
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	431a      	orrs	r2, r3
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	697a      	ldr	r2, [r7, #20]
 800ac36:	609a      	str	r2, [r3, #8]
}
 800ac38:	bf00      	nop
 800ac3a:	371c      	adds	r7, #28
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b087      	sub	sp, #28
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	f003 031f 	and.w	r3, r3, #31
 800ac56:	2201      	movs	r2, #1
 800ac58:	fa02 f303 	lsl.w	r3, r2, r3
 800ac5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6a1a      	ldr	r2, [r3, #32]
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	43db      	mvns	r3, r3
 800ac66:	401a      	ands	r2, r3
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6a1a      	ldr	r2, [r3, #32]
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	f003 031f 	and.w	r3, r3, #31
 800ac76:	6879      	ldr	r1, [r7, #4]
 800ac78:	fa01 f303 	lsl.w	r3, r1, r3
 800ac7c:	431a      	orrs	r2, r3
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	621a      	str	r2, [r3, #32]
}
 800ac82:	bf00      	nop
 800ac84:	371c      	adds	r7, #28
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
	...

0800ac90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d101      	bne.n	800aca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aca4:	2302      	movs	r3, #2
 800aca6:	e06d      	b.n	800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2202      	movs	r2, #2
 800acb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a30      	ldr	r2, [pc, #192]	; (800ad90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d004      	beq.n	800acdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a2f      	ldr	r2, [pc, #188]	; (800ad94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d108      	bne.n	800acee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ace2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	4313      	orrs	r3, r2
 800acec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a20      	ldr	r2, [pc, #128]	; (800ad90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d022      	beq.n	800ad58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad1a:	d01d      	beq.n	800ad58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a1d      	ldr	r2, [pc, #116]	; (800ad98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d018      	beq.n	800ad58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a1c      	ldr	r2, [pc, #112]	; (800ad9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d013      	beq.n	800ad58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a1a      	ldr	r2, [pc, #104]	; (800ada0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d00e      	beq.n	800ad58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a15      	ldr	r2, [pc, #84]	; (800ad94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d009      	beq.n	800ad58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a16      	ldr	r2, [pc, #88]	; (800ada4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d004      	beq.n	800ad58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a15      	ldr	r2, [pc, #84]	; (800ada8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d10c      	bne.n	800ad72 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2201      	movs	r2, #1
 800ad76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	40010000 	.word	0x40010000
 800ad94:	40010400 	.word	0x40010400
 800ad98:	40000400 	.word	0x40000400
 800ad9c:	40000800 	.word	0x40000800
 800ada0:	40000c00 	.word	0x40000c00
 800ada4:	40001800 	.word	0x40001800
 800ada8:	40014000 	.word	0x40014000

0800adac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800adb6:	2300      	movs	r3, #0
 800adb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d101      	bne.n	800adc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800adc4:	2302      	movs	r3, #2
 800adc6:	e065      	b.n	800ae94 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	4313      	orrs	r3, r2
 800addc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	4313      	orrs	r3, r2
 800adea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4313      	orrs	r3, r2
 800ae06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	699b      	ldr	r3, [r3, #24]
 800ae3c:	041b      	lsls	r3, r3, #16
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a16      	ldr	r2, [pc, #88]	; (800aea0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d004      	beq.n	800ae56 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a14      	ldr	r2, [pc, #80]	; (800aea4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d115      	bne.n	800ae82 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae60:	051b      	lsls	r3, r3, #20
 800ae62:	4313      	orrs	r3, r2
 800ae64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	69db      	ldr	r3, [r3, #28]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	6a1b      	ldr	r3, [r3, #32]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	40010000 	.word	0x40010000
 800aea4:	40010400 	.word	0x40010400

0800aea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aeb0:	bf00      	nop
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e042      	b.n	800af7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d106      	bne.n	800af0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f7f6 fb55 	bl	80015b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2224      	movs	r2, #36	; 0x24
 800af12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f022 0201 	bic.w	r2, r2, #1
 800af24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f8c2 	bl	800b0b0 <UART_SetConfig>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d101      	bne.n	800af36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e022      	b.n	800af7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d002      	beq.n	800af44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fe1e 	bl	800bb80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	685a      	ldr	r2, [r3, #4]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	689a      	ldr	r2, [r3, #8]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f042 0201 	orr.w	r2, r2, #1
 800af72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fea5 	bl	800bcc4 <UART_CheckIdleState>
 800af7a:	4603      	mov	r3, r0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b08a      	sub	sp, #40	; 0x28
 800af88:	af02      	add	r7, sp, #8
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	603b      	str	r3, [r7, #0]
 800af90:	4613      	mov	r3, r2
 800af92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af9a:	2b20      	cmp	r3, #32
 800af9c:	f040 8083 	bne.w	800b0a6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d002      	beq.n	800afac <HAL_UART_Transmit+0x28>
 800afa6:	88fb      	ldrh	r3, [r7, #6]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d101      	bne.n	800afb0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800afac:	2301      	movs	r3, #1
 800afae:	e07b      	b.n	800b0a8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d101      	bne.n	800afbe <HAL_UART_Transmit+0x3a>
 800afba:	2302      	movs	r3, #2
 800afbc:	e074      	b.n	800b0a8 <HAL_UART_Transmit+0x124>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2201      	movs	r2, #1
 800afc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2200      	movs	r2, #0
 800afca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2221      	movs	r2, #33	; 0x21
 800afd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800afd6:	f7f6 fd13 	bl	8001a00 <HAL_GetTick>
 800afda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	88fa      	ldrh	r2, [r7, #6]
 800afe0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	88fa      	ldrh	r2, [r7, #6]
 800afe8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aff4:	d108      	bne.n	800b008 <HAL_UART_Transmit+0x84>
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d104      	bne.n	800b008 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800affe:	2300      	movs	r3, #0
 800b000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	61bb      	str	r3, [r7, #24]
 800b006:	e003      	b.n	800b010 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b00c:	2300      	movs	r3, #0
 800b00e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b018:	e02c      	b.n	800b074 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2200      	movs	r2, #0
 800b022:	2180      	movs	r1, #128	; 0x80
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f000 fe98 	bl	800bd5a <UART_WaitOnFlagUntilTimeout>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d001      	beq.n	800b034 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b030:	2303      	movs	r3, #3
 800b032:	e039      	b.n	800b0a8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10b      	bne.n	800b052 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b048:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	3302      	adds	r3, #2
 800b04e:	61bb      	str	r3, [r7, #24]
 800b050:	e007      	b.n	800b062 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	781a      	ldrb	r2, [r3, #0]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	3301      	adds	r3, #1
 800b060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b068:	b29b      	uxth	r3, r3
 800b06a:	3b01      	subs	r3, #1
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1cc      	bne.n	800b01a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2200      	movs	r2, #0
 800b088:	2140      	movs	r1, #64	; 0x40
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f000 fe65 	bl	800bd5a <UART_WaitOnFlagUntilTimeout>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d001      	beq.n	800b09a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	e006      	b.n	800b0a8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2220      	movs	r2, #32
 800b09e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	e000      	b.n	800b0a8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b0a6:	2302      	movs	r3, #2
  }
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3720      	adds	r7, #32
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0b4:	b092      	sub	sp, #72	; 0x48
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	689a      	ldr	r2, [r3, #8]
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	431a      	orrs	r2, r3
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	431a      	orrs	r2, r3
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	69db      	ldr	r3, [r3, #28]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	4bbe      	ldr	r3, [pc, #760]	; (800b3d8 <UART_SetConfig+0x328>)
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	6812      	ldr	r2, [r2, #0]
 800b0e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b0e8:	430b      	orrs	r3, r1
 800b0ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	68da      	ldr	r2, [r3, #12]
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	430a      	orrs	r2, r1
 800b100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	699b      	ldr	r3, [r3, #24]
 800b106:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4ab3      	ldr	r2, [pc, #716]	; (800b3dc <UART_SetConfig+0x32c>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d004      	beq.n	800b11c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b118:	4313      	orrs	r3, r2
 800b11a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	689a      	ldr	r2, [r3, #8]
 800b122:	4baf      	ldr	r3, [pc, #700]	; (800b3e0 <UART_SetConfig+0x330>)
 800b124:	4013      	ands	r3, r2
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	6812      	ldr	r2, [r2, #0]
 800b12a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b12c:	430b      	orrs	r3, r1
 800b12e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b136:	f023 010f 	bic.w	r1, r3, #15
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	430a      	orrs	r2, r1
 800b144:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4aa6      	ldr	r2, [pc, #664]	; (800b3e4 <UART_SetConfig+0x334>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d177      	bne.n	800b240 <UART_SetConfig+0x190>
 800b150:	4ba5      	ldr	r3, [pc, #660]	; (800b3e8 <UART_SetConfig+0x338>)
 800b152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b154:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b158:	2b28      	cmp	r3, #40	; 0x28
 800b15a:	d86d      	bhi.n	800b238 <UART_SetConfig+0x188>
 800b15c:	a201      	add	r2, pc, #4	; (adr r2, 800b164 <UART_SetConfig+0xb4>)
 800b15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b162:	bf00      	nop
 800b164:	0800b209 	.word	0x0800b209
 800b168:	0800b239 	.word	0x0800b239
 800b16c:	0800b239 	.word	0x0800b239
 800b170:	0800b239 	.word	0x0800b239
 800b174:	0800b239 	.word	0x0800b239
 800b178:	0800b239 	.word	0x0800b239
 800b17c:	0800b239 	.word	0x0800b239
 800b180:	0800b239 	.word	0x0800b239
 800b184:	0800b211 	.word	0x0800b211
 800b188:	0800b239 	.word	0x0800b239
 800b18c:	0800b239 	.word	0x0800b239
 800b190:	0800b239 	.word	0x0800b239
 800b194:	0800b239 	.word	0x0800b239
 800b198:	0800b239 	.word	0x0800b239
 800b19c:	0800b239 	.word	0x0800b239
 800b1a0:	0800b239 	.word	0x0800b239
 800b1a4:	0800b219 	.word	0x0800b219
 800b1a8:	0800b239 	.word	0x0800b239
 800b1ac:	0800b239 	.word	0x0800b239
 800b1b0:	0800b239 	.word	0x0800b239
 800b1b4:	0800b239 	.word	0x0800b239
 800b1b8:	0800b239 	.word	0x0800b239
 800b1bc:	0800b239 	.word	0x0800b239
 800b1c0:	0800b239 	.word	0x0800b239
 800b1c4:	0800b221 	.word	0x0800b221
 800b1c8:	0800b239 	.word	0x0800b239
 800b1cc:	0800b239 	.word	0x0800b239
 800b1d0:	0800b239 	.word	0x0800b239
 800b1d4:	0800b239 	.word	0x0800b239
 800b1d8:	0800b239 	.word	0x0800b239
 800b1dc:	0800b239 	.word	0x0800b239
 800b1e0:	0800b239 	.word	0x0800b239
 800b1e4:	0800b229 	.word	0x0800b229
 800b1e8:	0800b239 	.word	0x0800b239
 800b1ec:	0800b239 	.word	0x0800b239
 800b1f0:	0800b239 	.word	0x0800b239
 800b1f4:	0800b239 	.word	0x0800b239
 800b1f8:	0800b239 	.word	0x0800b239
 800b1fc:	0800b239 	.word	0x0800b239
 800b200:	0800b239 	.word	0x0800b239
 800b204:	0800b231 	.word	0x0800b231
 800b208:	2301      	movs	r3, #1
 800b20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b20e:	e222      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b210:	2304      	movs	r3, #4
 800b212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b216:	e21e      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b218:	2308      	movs	r3, #8
 800b21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b21e:	e21a      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b220:	2310      	movs	r3, #16
 800b222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b226:	e216      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b228:	2320      	movs	r3, #32
 800b22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b22e:	e212      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b230:	2340      	movs	r3, #64	; 0x40
 800b232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b236:	e20e      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b238:	2380      	movs	r3, #128	; 0x80
 800b23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b23e:	e20a      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a69      	ldr	r2, [pc, #420]	; (800b3ec <UART_SetConfig+0x33c>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d130      	bne.n	800b2ac <UART_SetConfig+0x1fc>
 800b24a:	4b67      	ldr	r3, [pc, #412]	; (800b3e8 <UART_SetConfig+0x338>)
 800b24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b24e:	f003 0307 	and.w	r3, r3, #7
 800b252:	2b05      	cmp	r3, #5
 800b254:	d826      	bhi.n	800b2a4 <UART_SetConfig+0x1f4>
 800b256:	a201      	add	r2, pc, #4	; (adr r2, 800b25c <UART_SetConfig+0x1ac>)
 800b258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25c:	0800b275 	.word	0x0800b275
 800b260:	0800b27d 	.word	0x0800b27d
 800b264:	0800b285 	.word	0x0800b285
 800b268:	0800b28d 	.word	0x0800b28d
 800b26c:	0800b295 	.word	0x0800b295
 800b270:	0800b29d 	.word	0x0800b29d
 800b274:	2300      	movs	r3, #0
 800b276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b27a:	e1ec      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b27c:	2304      	movs	r3, #4
 800b27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b282:	e1e8      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b284:	2308      	movs	r3, #8
 800b286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b28a:	e1e4      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b28c:	2310      	movs	r3, #16
 800b28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b292:	e1e0      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b294:	2320      	movs	r3, #32
 800b296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b29a:	e1dc      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b29c:	2340      	movs	r3, #64	; 0x40
 800b29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2a2:	e1d8      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b2a4:	2380      	movs	r3, #128	; 0x80
 800b2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2aa:	e1d4      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a4f      	ldr	r2, [pc, #316]	; (800b3f0 <UART_SetConfig+0x340>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d130      	bne.n	800b318 <UART_SetConfig+0x268>
 800b2b6:	4b4c      	ldr	r3, [pc, #304]	; (800b3e8 <UART_SetConfig+0x338>)
 800b2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ba:	f003 0307 	and.w	r3, r3, #7
 800b2be:	2b05      	cmp	r3, #5
 800b2c0:	d826      	bhi.n	800b310 <UART_SetConfig+0x260>
 800b2c2:	a201      	add	r2, pc, #4	; (adr r2, 800b2c8 <UART_SetConfig+0x218>)
 800b2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c8:	0800b2e1 	.word	0x0800b2e1
 800b2cc:	0800b2e9 	.word	0x0800b2e9
 800b2d0:	0800b2f1 	.word	0x0800b2f1
 800b2d4:	0800b2f9 	.word	0x0800b2f9
 800b2d8:	0800b301 	.word	0x0800b301
 800b2dc:	0800b309 	.word	0x0800b309
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2e6:	e1b6      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b2e8:	2304      	movs	r3, #4
 800b2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ee:	e1b2      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b2f0:	2308      	movs	r3, #8
 800b2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2f6:	e1ae      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b2f8:	2310      	movs	r3, #16
 800b2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2fe:	e1aa      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b300:	2320      	movs	r3, #32
 800b302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b306:	e1a6      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b308:	2340      	movs	r3, #64	; 0x40
 800b30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b30e:	e1a2      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b310:	2380      	movs	r3, #128	; 0x80
 800b312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b316:	e19e      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a35      	ldr	r2, [pc, #212]	; (800b3f4 <UART_SetConfig+0x344>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d130      	bne.n	800b384 <UART_SetConfig+0x2d4>
 800b322:	4b31      	ldr	r3, [pc, #196]	; (800b3e8 <UART_SetConfig+0x338>)
 800b324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b326:	f003 0307 	and.w	r3, r3, #7
 800b32a:	2b05      	cmp	r3, #5
 800b32c:	d826      	bhi.n	800b37c <UART_SetConfig+0x2cc>
 800b32e:	a201      	add	r2, pc, #4	; (adr r2, 800b334 <UART_SetConfig+0x284>)
 800b330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b334:	0800b34d 	.word	0x0800b34d
 800b338:	0800b355 	.word	0x0800b355
 800b33c:	0800b35d 	.word	0x0800b35d
 800b340:	0800b365 	.word	0x0800b365
 800b344:	0800b36d 	.word	0x0800b36d
 800b348:	0800b375 	.word	0x0800b375
 800b34c:	2300      	movs	r3, #0
 800b34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b352:	e180      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b354:	2304      	movs	r3, #4
 800b356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b35a:	e17c      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b35c:	2308      	movs	r3, #8
 800b35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b362:	e178      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b364:	2310      	movs	r3, #16
 800b366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b36a:	e174      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b36c:	2320      	movs	r3, #32
 800b36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b372:	e170      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b374:	2340      	movs	r3, #64	; 0x40
 800b376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b37a:	e16c      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b37c:	2380      	movs	r3, #128	; 0x80
 800b37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b382:	e168      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a1b      	ldr	r2, [pc, #108]	; (800b3f8 <UART_SetConfig+0x348>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d142      	bne.n	800b414 <UART_SetConfig+0x364>
 800b38e:	4b16      	ldr	r3, [pc, #88]	; (800b3e8 <UART_SetConfig+0x338>)
 800b390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b392:	f003 0307 	and.w	r3, r3, #7
 800b396:	2b05      	cmp	r3, #5
 800b398:	d838      	bhi.n	800b40c <UART_SetConfig+0x35c>
 800b39a:	a201      	add	r2, pc, #4	; (adr r2, 800b3a0 <UART_SetConfig+0x2f0>)
 800b39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a0:	0800b3b9 	.word	0x0800b3b9
 800b3a4:	0800b3c1 	.word	0x0800b3c1
 800b3a8:	0800b3c9 	.word	0x0800b3c9
 800b3ac:	0800b3d1 	.word	0x0800b3d1
 800b3b0:	0800b3fd 	.word	0x0800b3fd
 800b3b4:	0800b405 	.word	0x0800b405
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3be:	e14a      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b3c0:	2304      	movs	r3, #4
 800b3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3c6:	e146      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b3c8:	2308      	movs	r3, #8
 800b3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ce:	e142      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b3d0:	2310      	movs	r3, #16
 800b3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3d6:	e13e      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b3d8:	cfff69f3 	.word	0xcfff69f3
 800b3dc:	58000c00 	.word	0x58000c00
 800b3e0:	11fff4ff 	.word	0x11fff4ff
 800b3e4:	40011000 	.word	0x40011000
 800b3e8:	58024400 	.word	0x58024400
 800b3ec:	40004400 	.word	0x40004400
 800b3f0:	40004800 	.word	0x40004800
 800b3f4:	40004c00 	.word	0x40004c00
 800b3f8:	40005000 	.word	0x40005000
 800b3fc:	2320      	movs	r3, #32
 800b3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b402:	e128      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b404:	2340      	movs	r3, #64	; 0x40
 800b406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b40a:	e124      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b40c:	2380      	movs	r3, #128	; 0x80
 800b40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b412:	e120      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4acb      	ldr	r2, [pc, #812]	; (800b748 <UART_SetConfig+0x698>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d176      	bne.n	800b50c <UART_SetConfig+0x45c>
 800b41e:	4bcb      	ldr	r3, [pc, #812]	; (800b74c <UART_SetConfig+0x69c>)
 800b420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b426:	2b28      	cmp	r3, #40	; 0x28
 800b428:	d86c      	bhi.n	800b504 <UART_SetConfig+0x454>
 800b42a:	a201      	add	r2, pc, #4	; (adr r2, 800b430 <UART_SetConfig+0x380>)
 800b42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b430:	0800b4d5 	.word	0x0800b4d5
 800b434:	0800b505 	.word	0x0800b505
 800b438:	0800b505 	.word	0x0800b505
 800b43c:	0800b505 	.word	0x0800b505
 800b440:	0800b505 	.word	0x0800b505
 800b444:	0800b505 	.word	0x0800b505
 800b448:	0800b505 	.word	0x0800b505
 800b44c:	0800b505 	.word	0x0800b505
 800b450:	0800b4dd 	.word	0x0800b4dd
 800b454:	0800b505 	.word	0x0800b505
 800b458:	0800b505 	.word	0x0800b505
 800b45c:	0800b505 	.word	0x0800b505
 800b460:	0800b505 	.word	0x0800b505
 800b464:	0800b505 	.word	0x0800b505
 800b468:	0800b505 	.word	0x0800b505
 800b46c:	0800b505 	.word	0x0800b505
 800b470:	0800b4e5 	.word	0x0800b4e5
 800b474:	0800b505 	.word	0x0800b505
 800b478:	0800b505 	.word	0x0800b505
 800b47c:	0800b505 	.word	0x0800b505
 800b480:	0800b505 	.word	0x0800b505
 800b484:	0800b505 	.word	0x0800b505
 800b488:	0800b505 	.word	0x0800b505
 800b48c:	0800b505 	.word	0x0800b505
 800b490:	0800b4ed 	.word	0x0800b4ed
 800b494:	0800b505 	.word	0x0800b505
 800b498:	0800b505 	.word	0x0800b505
 800b49c:	0800b505 	.word	0x0800b505
 800b4a0:	0800b505 	.word	0x0800b505
 800b4a4:	0800b505 	.word	0x0800b505
 800b4a8:	0800b505 	.word	0x0800b505
 800b4ac:	0800b505 	.word	0x0800b505
 800b4b0:	0800b4f5 	.word	0x0800b4f5
 800b4b4:	0800b505 	.word	0x0800b505
 800b4b8:	0800b505 	.word	0x0800b505
 800b4bc:	0800b505 	.word	0x0800b505
 800b4c0:	0800b505 	.word	0x0800b505
 800b4c4:	0800b505 	.word	0x0800b505
 800b4c8:	0800b505 	.word	0x0800b505
 800b4cc:	0800b505 	.word	0x0800b505
 800b4d0:	0800b4fd 	.word	0x0800b4fd
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4da:	e0bc      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b4dc:	2304      	movs	r3, #4
 800b4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4e2:	e0b8      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b4e4:	2308      	movs	r3, #8
 800b4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ea:	e0b4      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b4ec:	2310      	movs	r3, #16
 800b4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4f2:	e0b0      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b4f4:	2320      	movs	r3, #32
 800b4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4fa:	e0ac      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b4fc:	2340      	movs	r3, #64	; 0x40
 800b4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b502:	e0a8      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b504:	2380      	movs	r3, #128	; 0x80
 800b506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b50a:	e0a4      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a8f      	ldr	r2, [pc, #572]	; (800b750 <UART_SetConfig+0x6a0>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d130      	bne.n	800b578 <UART_SetConfig+0x4c8>
 800b516:	4b8d      	ldr	r3, [pc, #564]	; (800b74c <UART_SetConfig+0x69c>)
 800b518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b51a:	f003 0307 	and.w	r3, r3, #7
 800b51e:	2b05      	cmp	r3, #5
 800b520:	d826      	bhi.n	800b570 <UART_SetConfig+0x4c0>
 800b522:	a201      	add	r2, pc, #4	; (adr r2, 800b528 <UART_SetConfig+0x478>)
 800b524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b528:	0800b541 	.word	0x0800b541
 800b52c:	0800b549 	.word	0x0800b549
 800b530:	0800b551 	.word	0x0800b551
 800b534:	0800b559 	.word	0x0800b559
 800b538:	0800b561 	.word	0x0800b561
 800b53c:	0800b569 	.word	0x0800b569
 800b540:	2300      	movs	r3, #0
 800b542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b546:	e086      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b548:	2304      	movs	r3, #4
 800b54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b54e:	e082      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b550:	2308      	movs	r3, #8
 800b552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b556:	e07e      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b558:	2310      	movs	r3, #16
 800b55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b55e:	e07a      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b560:	2320      	movs	r3, #32
 800b562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b566:	e076      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b568:	2340      	movs	r3, #64	; 0x40
 800b56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b56e:	e072      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b570:	2380      	movs	r3, #128	; 0x80
 800b572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b576:	e06e      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4a75      	ldr	r2, [pc, #468]	; (800b754 <UART_SetConfig+0x6a4>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d130      	bne.n	800b5e4 <UART_SetConfig+0x534>
 800b582:	4b72      	ldr	r3, [pc, #456]	; (800b74c <UART_SetConfig+0x69c>)
 800b584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b586:	f003 0307 	and.w	r3, r3, #7
 800b58a:	2b05      	cmp	r3, #5
 800b58c:	d826      	bhi.n	800b5dc <UART_SetConfig+0x52c>
 800b58e:	a201      	add	r2, pc, #4	; (adr r2, 800b594 <UART_SetConfig+0x4e4>)
 800b590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b594:	0800b5ad 	.word	0x0800b5ad
 800b598:	0800b5b5 	.word	0x0800b5b5
 800b59c:	0800b5bd 	.word	0x0800b5bd
 800b5a0:	0800b5c5 	.word	0x0800b5c5
 800b5a4:	0800b5cd 	.word	0x0800b5cd
 800b5a8:	0800b5d5 	.word	0x0800b5d5
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5b2:	e050      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b5b4:	2304      	movs	r3, #4
 800b5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ba:	e04c      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b5bc:	2308      	movs	r3, #8
 800b5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5c2:	e048      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b5c4:	2310      	movs	r3, #16
 800b5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ca:	e044      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b5cc:	2320      	movs	r3, #32
 800b5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5d2:	e040      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b5d4:	2340      	movs	r3, #64	; 0x40
 800b5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5da:	e03c      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b5dc:	2380      	movs	r3, #128	; 0x80
 800b5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5e2:	e038      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a5b      	ldr	r2, [pc, #364]	; (800b758 <UART_SetConfig+0x6a8>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d130      	bne.n	800b650 <UART_SetConfig+0x5a0>
 800b5ee:	4b57      	ldr	r3, [pc, #348]	; (800b74c <UART_SetConfig+0x69c>)
 800b5f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5f2:	f003 0307 	and.w	r3, r3, #7
 800b5f6:	2b05      	cmp	r3, #5
 800b5f8:	d826      	bhi.n	800b648 <UART_SetConfig+0x598>
 800b5fa:	a201      	add	r2, pc, #4	; (adr r2, 800b600 <UART_SetConfig+0x550>)
 800b5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b600:	0800b619 	.word	0x0800b619
 800b604:	0800b621 	.word	0x0800b621
 800b608:	0800b629 	.word	0x0800b629
 800b60c:	0800b631 	.word	0x0800b631
 800b610:	0800b639 	.word	0x0800b639
 800b614:	0800b641 	.word	0x0800b641
 800b618:	2302      	movs	r3, #2
 800b61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b61e:	e01a      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b620:	2304      	movs	r3, #4
 800b622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b626:	e016      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b628:	2308      	movs	r3, #8
 800b62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b62e:	e012      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b630:	2310      	movs	r3, #16
 800b632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b636:	e00e      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b638:	2320      	movs	r3, #32
 800b63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b63e:	e00a      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b640:	2340      	movs	r3, #64	; 0x40
 800b642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b646:	e006      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b648:	2380      	movs	r3, #128	; 0x80
 800b64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b64e:	e002      	b.n	800b656 <UART_SetConfig+0x5a6>
 800b650:	2380      	movs	r3, #128	; 0x80
 800b652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a3f      	ldr	r2, [pc, #252]	; (800b758 <UART_SetConfig+0x6a8>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	f040 80f8 	bne.w	800b852 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b662:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b666:	2b20      	cmp	r3, #32
 800b668:	dc46      	bgt.n	800b6f8 <UART_SetConfig+0x648>
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	f2c0 8082 	blt.w	800b774 <UART_SetConfig+0x6c4>
 800b670:	3b02      	subs	r3, #2
 800b672:	2b1e      	cmp	r3, #30
 800b674:	d87e      	bhi.n	800b774 <UART_SetConfig+0x6c4>
 800b676:	a201      	add	r2, pc, #4	; (adr r2, 800b67c <UART_SetConfig+0x5cc>)
 800b678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67c:	0800b6ff 	.word	0x0800b6ff
 800b680:	0800b775 	.word	0x0800b775
 800b684:	0800b707 	.word	0x0800b707
 800b688:	0800b775 	.word	0x0800b775
 800b68c:	0800b775 	.word	0x0800b775
 800b690:	0800b775 	.word	0x0800b775
 800b694:	0800b717 	.word	0x0800b717
 800b698:	0800b775 	.word	0x0800b775
 800b69c:	0800b775 	.word	0x0800b775
 800b6a0:	0800b775 	.word	0x0800b775
 800b6a4:	0800b775 	.word	0x0800b775
 800b6a8:	0800b775 	.word	0x0800b775
 800b6ac:	0800b775 	.word	0x0800b775
 800b6b0:	0800b775 	.word	0x0800b775
 800b6b4:	0800b727 	.word	0x0800b727
 800b6b8:	0800b775 	.word	0x0800b775
 800b6bc:	0800b775 	.word	0x0800b775
 800b6c0:	0800b775 	.word	0x0800b775
 800b6c4:	0800b775 	.word	0x0800b775
 800b6c8:	0800b775 	.word	0x0800b775
 800b6cc:	0800b775 	.word	0x0800b775
 800b6d0:	0800b775 	.word	0x0800b775
 800b6d4:	0800b775 	.word	0x0800b775
 800b6d8:	0800b775 	.word	0x0800b775
 800b6dc:	0800b775 	.word	0x0800b775
 800b6e0:	0800b775 	.word	0x0800b775
 800b6e4:	0800b775 	.word	0x0800b775
 800b6e8:	0800b775 	.word	0x0800b775
 800b6ec:	0800b775 	.word	0x0800b775
 800b6f0:	0800b775 	.word	0x0800b775
 800b6f4:	0800b767 	.word	0x0800b767
 800b6f8:	2b40      	cmp	r3, #64	; 0x40
 800b6fa:	d037      	beq.n	800b76c <UART_SetConfig+0x6bc>
 800b6fc:	e03a      	b.n	800b774 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b6fe:	f7fd fb1b 	bl	8008d38 <HAL_RCCEx_GetD3PCLK1Freq>
 800b702:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b704:	e03c      	b.n	800b780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fd fb2a 	bl	8008d64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b714:	e034      	b.n	800b780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b716:	f107 0318 	add.w	r3, r7, #24
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fd fc76 	bl	800900c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b724:	e02c      	b.n	800b780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b726:	4b09      	ldr	r3, [pc, #36]	; (800b74c <UART_SetConfig+0x69c>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 0320 	and.w	r3, r3, #32
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d016      	beq.n	800b760 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b732:	4b06      	ldr	r3, [pc, #24]	; (800b74c <UART_SetConfig+0x69c>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	08db      	lsrs	r3, r3, #3
 800b738:	f003 0303 	and.w	r3, r3, #3
 800b73c:	4a07      	ldr	r2, [pc, #28]	; (800b75c <UART_SetConfig+0x6ac>)
 800b73e:	fa22 f303 	lsr.w	r3, r2, r3
 800b742:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b744:	e01c      	b.n	800b780 <UART_SetConfig+0x6d0>
 800b746:	bf00      	nop
 800b748:	40011400 	.word	0x40011400
 800b74c:	58024400 	.word	0x58024400
 800b750:	40007800 	.word	0x40007800
 800b754:	40007c00 	.word	0x40007c00
 800b758:	58000c00 	.word	0x58000c00
 800b75c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b760:	4b9d      	ldr	r3, [pc, #628]	; (800b9d8 <UART_SetConfig+0x928>)
 800b762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b764:	e00c      	b.n	800b780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b766:	4b9d      	ldr	r3, [pc, #628]	; (800b9dc <UART_SetConfig+0x92c>)
 800b768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b76a:	e009      	b.n	800b780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b76c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b772:	e005      	b.n	800b780 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b774:	2300      	movs	r3, #0
 800b776:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b77e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b782:	2b00      	cmp	r3, #0
 800b784:	f000 81de 	beq.w	800bb44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78c:	4a94      	ldr	r2, [pc, #592]	; (800b9e0 <UART_SetConfig+0x930>)
 800b78e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b792:	461a      	mov	r2, r3
 800b794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b796:	fbb3 f3f2 	udiv	r3, r3, r2
 800b79a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	005b      	lsls	r3, r3, #1
 800b7a4:	4413      	add	r3, r2
 800b7a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d305      	bcc.n	800b7b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b7b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d903      	bls.n	800b7c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b7be:	e1c1      	b.n	800bb44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	60bb      	str	r3, [r7, #8]
 800b7c6:	60fa      	str	r2, [r7, #12]
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7cc:	4a84      	ldr	r2, [pc, #528]	; (800b9e0 <UART_SetConfig+0x930>)
 800b7ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	603b      	str	r3, [r7, #0]
 800b7d8:	607a      	str	r2, [r7, #4]
 800b7da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b7e2:	f7f4 fdcd 	bl	8000380 <__aeabi_uldivmod>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4610      	mov	r0, r2
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	f04f 0200 	mov.w	r2, #0
 800b7f2:	f04f 0300 	mov.w	r3, #0
 800b7f6:	020b      	lsls	r3, r1, #8
 800b7f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b7fc:	0202      	lsls	r2, r0, #8
 800b7fe:	6979      	ldr	r1, [r7, #20]
 800b800:	6849      	ldr	r1, [r1, #4]
 800b802:	0849      	lsrs	r1, r1, #1
 800b804:	2000      	movs	r0, #0
 800b806:	460c      	mov	r4, r1
 800b808:	4605      	mov	r5, r0
 800b80a:	eb12 0804 	adds.w	r8, r2, r4
 800b80e:	eb43 0905 	adc.w	r9, r3, r5
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	469a      	mov	sl, r3
 800b81a:	4693      	mov	fp, r2
 800b81c:	4652      	mov	r2, sl
 800b81e:	465b      	mov	r3, fp
 800b820:	4640      	mov	r0, r8
 800b822:	4649      	mov	r1, r9
 800b824:	f7f4 fdac 	bl	8000380 <__aeabi_uldivmod>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	4613      	mov	r3, r2
 800b82e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b832:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b836:	d308      	bcc.n	800b84a <UART_SetConfig+0x79a>
 800b838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b83e:	d204      	bcs.n	800b84a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b846:	60da      	str	r2, [r3, #12]
 800b848:	e17c      	b.n	800bb44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b850:	e178      	b.n	800bb44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	69db      	ldr	r3, [r3, #28]
 800b856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b85a:	f040 80c5 	bne.w	800b9e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b85e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b862:	2b20      	cmp	r3, #32
 800b864:	dc48      	bgt.n	800b8f8 <UART_SetConfig+0x848>
 800b866:	2b00      	cmp	r3, #0
 800b868:	db7b      	blt.n	800b962 <UART_SetConfig+0x8b2>
 800b86a:	2b20      	cmp	r3, #32
 800b86c:	d879      	bhi.n	800b962 <UART_SetConfig+0x8b2>
 800b86e:	a201      	add	r2, pc, #4	; (adr r2, 800b874 <UART_SetConfig+0x7c4>)
 800b870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b874:	0800b8ff 	.word	0x0800b8ff
 800b878:	0800b907 	.word	0x0800b907
 800b87c:	0800b963 	.word	0x0800b963
 800b880:	0800b963 	.word	0x0800b963
 800b884:	0800b90f 	.word	0x0800b90f
 800b888:	0800b963 	.word	0x0800b963
 800b88c:	0800b963 	.word	0x0800b963
 800b890:	0800b963 	.word	0x0800b963
 800b894:	0800b91f 	.word	0x0800b91f
 800b898:	0800b963 	.word	0x0800b963
 800b89c:	0800b963 	.word	0x0800b963
 800b8a0:	0800b963 	.word	0x0800b963
 800b8a4:	0800b963 	.word	0x0800b963
 800b8a8:	0800b963 	.word	0x0800b963
 800b8ac:	0800b963 	.word	0x0800b963
 800b8b0:	0800b963 	.word	0x0800b963
 800b8b4:	0800b92f 	.word	0x0800b92f
 800b8b8:	0800b963 	.word	0x0800b963
 800b8bc:	0800b963 	.word	0x0800b963
 800b8c0:	0800b963 	.word	0x0800b963
 800b8c4:	0800b963 	.word	0x0800b963
 800b8c8:	0800b963 	.word	0x0800b963
 800b8cc:	0800b963 	.word	0x0800b963
 800b8d0:	0800b963 	.word	0x0800b963
 800b8d4:	0800b963 	.word	0x0800b963
 800b8d8:	0800b963 	.word	0x0800b963
 800b8dc:	0800b963 	.word	0x0800b963
 800b8e0:	0800b963 	.word	0x0800b963
 800b8e4:	0800b963 	.word	0x0800b963
 800b8e8:	0800b963 	.word	0x0800b963
 800b8ec:	0800b963 	.word	0x0800b963
 800b8f0:	0800b963 	.word	0x0800b963
 800b8f4:	0800b955 	.word	0x0800b955
 800b8f8:	2b40      	cmp	r3, #64	; 0x40
 800b8fa:	d02e      	beq.n	800b95a <UART_SetConfig+0x8aa>
 800b8fc:	e031      	b.n	800b962 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8fe:	f7fb fdd7 	bl	80074b0 <HAL_RCC_GetPCLK1Freq>
 800b902:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b904:	e033      	b.n	800b96e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b906:	f7fb fde9 	bl	80074dc <HAL_RCC_GetPCLK2Freq>
 800b90a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b90c:	e02f      	b.n	800b96e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b90e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b912:	4618      	mov	r0, r3
 800b914:	f7fd fa26 	bl	8008d64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b91c:	e027      	b.n	800b96e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b91e:	f107 0318 	add.w	r3, r7, #24
 800b922:	4618      	mov	r0, r3
 800b924:	f7fd fb72 	bl	800900c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b92c:	e01f      	b.n	800b96e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b92e:	4b2d      	ldr	r3, [pc, #180]	; (800b9e4 <UART_SetConfig+0x934>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f003 0320 	and.w	r3, r3, #32
 800b936:	2b00      	cmp	r3, #0
 800b938:	d009      	beq.n	800b94e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b93a:	4b2a      	ldr	r3, [pc, #168]	; (800b9e4 <UART_SetConfig+0x934>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	08db      	lsrs	r3, r3, #3
 800b940:	f003 0303 	and.w	r3, r3, #3
 800b944:	4a24      	ldr	r2, [pc, #144]	; (800b9d8 <UART_SetConfig+0x928>)
 800b946:	fa22 f303 	lsr.w	r3, r2, r3
 800b94a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b94c:	e00f      	b.n	800b96e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b94e:	4b22      	ldr	r3, [pc, #136]	; (800b9d8 <UART_SetConfig+0x928>)
 800b950:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b952:	e00c      	b.n	800b96e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b954:	4b21      	ldr	r3, [pc, #132]	; (800b9dc <UART_SetConfig+0x92c>)
 800b956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b958:	e009      	b.n	800b96e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b95a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b960:	e005      	b.n	800b96e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b962:	2300      	movs	r3, #0
 800b964:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b96c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 80e7 	beq.w	800bb44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97a:	4a19      	ldr	r2, [pc, #100]	; (800b9e0 <UART_SetConfig+0x930>)
 800b97c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b980:	461a      	mov	r2, r3
 800b982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b984:	fbb3 f3f2 	udiv	r3, r3, r2
 800b988:	005a      	lsls	r2, r3, #1
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	085b      	lsrs	r3, r3, #1
 800b990:	441a      	add	r2, r3
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	fbb2 f3f3 	udiv	r3, r2, r3
 800b99a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99e:	2b0f      	cmp	r3, #15
 800b9a0:	d916      	bls.n	800b9d0 <UART_SetConfig+0x920>
 800b9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9a8:	d212      	bcs.n	800b9d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	f023 030f 	bic.w	r3, r3, #15
 800b9b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b6:	085b      	lsrs	r3, r3, #1
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	f003 0307 	and.w	r3, r3, #7
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b9cc:	60da      	str	r2, [r3, #12]
 800b9ce:	e0b9      	b.n	800bb44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b9d6:	e0b5      	b.n	800bb44 <UART_SetConfig+0xa94>
 800b9d8:	03d09000 	.word	0x03d09000
 800b9dc:	003d0900 	.word	0x003d0900
 800b9e0:	0800d084 	.word	0x0800d084
 800b9e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b9ec:	2b20      	cmp	r3, #32
 800b9ee:	dc49      	bgt.n	800ba84 <UART_SetConfig+0x9d4>
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	db7c      	blt.n	800baee <UART_SetConfig+0xa3e>
 800b9f4:	2b20      	cmp	r3, #32
 800b9f6:	d87a      	bhi.n	800baee <UART_SetConfig+0xa3e>
 800b9f8:	a201      	add	r2, pc, #4	; (adr r2, 800ba00 <UART_SetConfig+0x950>)
 800b9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fe:	bf00      	nop
 800ba00:	0800ba8b 	.word	0x0800ba8b
 800ba04:	0800ba93 	.word	0x0800ba93
 800ba08:	0800baef 	.word	0x0800baef
 800ba0c:	0800baef 	.word	0x0800baef
 800ba10:	0800ba9b 	.word	0x0800ba9b
 800ba14:	0800baef 	.word	0x0800baef
 800ba18:	0800baef 	.word	0x0800baef
 800ba1c:	0800baef 	.word	0x0800baef
 800ba20:	0800baab 	.word	0x0800baab
 800ba24:	0800baef 	.word	0x0800baef
 800ba28:	0800baef 	.word	0x0800baef
 800ba2c:	0800baef 	.word	0x0800baef
 800ba30:	0800baef 	.word	0x0800baef
 800ba34:	0800baef 	.word	0x0800baef
 800ba38:	0800baef 	.word	0x0800baef
 800ba3c:	0800baef 	.word	0x0800baef
 800ba40:	0800babb 	.word	0x0800babb
 800ba44:	0800baef 	.word	0x0800baef
 800ba48:	0800baef 	.word	0x0800baef
 800ba4c:	0800baef 	.word	0x0800baef
 800ba50:	0800baef 	.word	0x0800baef
 800ba54:	0800baef 	.word	0x0800baef
 800ba58:	0800baef 	.word	0x0800baef
 800ba5c:	0800baef 	.word	0x0800baef
 800ba60:	0800baef 	.word	0x0800baef
 800ba64:	0800baef 	.word	0x0800baef
 800ba68:	0800baef 	.word	0x0800baef
 800ba6c:	0800baef 	.word	0x0800baef
 800ba70:	0800baef 	.word	0x0800baef
 800ba74:	0800baef 	.word	0x0800baef
 800ba78:	0800baef 	.word	0x0800baef
 800ba7c:	0800baef 	.word	0x0800baef
 800ba80:	0800bae1 	.word	0x0800bae1
 800ba84:	2b40      	cmp	r3, #64	; 0x40
 800ba86:	d02e      	beq.n	800bae6 <UART_SetConfig+0xa36>
 800ba88:	e031      	b.n	800baee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba8a:	f7fb fd11 	bl	80074b0 <HAL_RCC_GetPCLK1Freq>
 800ba8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba90:	e033      	b.n	800bafa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba92:	f7fb fd23 	bl	80074dc <HAL_RCC_GetPCLK2Freq>
 800ba96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba98:	e02f      	b.n	800bafa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7fd f960 	bl	8008d64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baa8:	e027      	b.n	800bafa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baaa:	f107 0318 	add.w	r3, r7, #24
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fd faac 	bl	800900c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bab8:	e01f      	b.n	800bafa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800baba:	4b2d      	ldr	r3, [pc, #180]	; (800bb70 <UART_SetConfig+0xac0>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f003 0320 	and.w	r3, r3, #32
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d009      	beq.n	800bada <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bac6:	4b2a      	ldr	r3, [pc, #168]	; (800bb70 <UART_SetConfig+0xac0>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	08db      	lsrs	r3, r3, #3
 800bacc:	f003 0303 	and.w	r3, r3, #3
 800bad0:	4a28      	ldr	r2, [pc, #160]	; (800bb74 <UART_SetConfig+0xac4>)
 800bad2:	fa22 f303 	lsr.w	r3, r2, r3
 800bad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bad8:	e00f      	b.n	800bafa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bada:	4b26      	ldr	r3, [pc, #152]	; (800bb74 <UART_SetConfig+0xac4>)
 800badc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bade:	e00c      	b.n	800bafa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bae0:	4b25      	ldr	r3, [pc, #148]	; (800bb78 <UART_SetConfig+0xac8>)
 800bae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bae4:	e009      	b.n	800bafa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800baea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baec:	e005      	b.n	800bafa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800baee:	2300      	movs	r3, #0
 800baf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800baf8:	bf00      	nop
    }

    if (pclk != 0U)
 800bafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d021      	beq.n	800bb44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb04:	4a1d      	ldr	r2, [pc, #116]	; (800bb7c <UART_SetConfig+0xacc>)
 800bb06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb0e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	085b      	lsrs	r3, r3, #1
 800bb18:	441a      	add	r2, r3
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb22:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb26:	2b0f      	cmp	r3, #15
 800bb28:	d909      	bls.n	800bb3e <UART_SetConfig+0xa8e>
 800bb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb30:	d205      	bcs.n	800bb3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	60da      	str	r2, [r3, #12]
 800bb3c:	e002      	b.n	800bb44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	2200      	movs	r2, #0
 800bb58:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bb60:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3748      	adds	r7, #72	; 0x48
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb6e:	bf00      	nop
 800bb70:	58024400 	.word	0x58024400
 800bb74:	03d09000 	.word	0x03d09000
 800bb78:	003d0900 	.word	0x003d0900
 800bb7c:	0800d084 	.word	0x0800d084

0800bb80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00a      	beq.n	800bbaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbae:	f003 0302 	and.w	r3, r3, #2
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00a      	beq.n	800bbcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	430a      	orrs	r2, r1
 800bbca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd0:	f003 0304 	and.w	r3, r3, #4
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00a      	beq.n	800bbee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	430a      	orrs	r2, r1
 800bbec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf2:	f003 0308 	and.w	r3, r3, #8
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00a      	beq.n	800bc10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	430a      	orrs	r2, r1
 800bc0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc14:	f003 0310 	and.w	r3, r3, #16
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00a      	beq.n	800bc32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	430a      	orrs	r2, r1
 800bc30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc36:	f003 0320 	and.w	r3, r3, #32
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00a      	beq.n	800bc54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	430a      	orrs	r2, r1
 800bc52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d01a      	beq.n	800bc96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	430a      	orrs	r2, r1
 800bc74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc7e:	d10a      	bne.n	800bc96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	430a      	orrs	r2, r1
 800bc94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00a      	beq.n	800bcb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	430a      	orrs	r2, r1
 800bcb6:	605a      	str	r2, [r3, #4]
  }
}
 800bcb8:	bf00      	nop
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af02      	add	r7, sp, #8
 800bcca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bcd4:	f7f5 fe94 	bl	8001a00 <HAL_GetTick>
 800bcd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f003 0308 	and.w	r3, r3, #8
 800bce4:	2b08      	cmp	r3, #8
 800bce6:	d10e      	bne.n	800bd06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 f82f 	bl	800bd5a <UART_WaitOnFlagUntilTimeout>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd02:	2303      	movs	r3, #3
 800bd04:	e025      	b.n	800bd52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f003 0304 	and.w	r3, r3, #4
 800bd10:	2b04      	cmp	r3, #4
 800bd12:	d10e      	bne.n	800bd32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f819 	bl	800bd5a <UART_WaitOnFlagUntilTimeout>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	e00f      	b.n	800bd52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2220      	movs	r2, #32
 800bd36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2220      	movs	r2, #32
 800bd3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b09c      	sub	sp, #112	; 0x70
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	60f8      	str	r0, [r7, #12]
 800bd62:	60b9      	str	r1, [r7, #8]
 800bd64:	603b      	str	r3, [r7, #0]
 800bd66:	4613      	mov	r3, r2
 800bd68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd6a:	e0a9      	b.n	800bec0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd72:	f000 80a5 	beq.w	800bec0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd76:	f7f5 fe43 	bl	8001a00 <HAL_GetTick>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d302      	bcc.n	800bd8c <UART_WaitOnFlagUntilTimeout+0x32>
 800bd86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d140      	bne.n	800be0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd94:	e853 3f00 	ldrex	r3, [r3]
 800bd98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bd9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bda0:	667b      	str	r3, [r7, #100]	; 0x64
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	461a      	mov	r2, r3
 800bda8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bdb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bdb2:	e841 2300 	strex	r3, r2, [r1]
 800bdb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bdb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1e6      	bne.n	800bd8c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdc8:	e853 3f00 	ldrex	r3, [r3]
 800bdcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd0:	f023 0301 	bic.w	r3, r3, #1
 800bdd4:	663b      	str	r3, [r7, #96]	; 0x60
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	3308      	adds	r3, #8
 800bddc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bdde:	64ba      	str	r2, [r7, #72]	; 0x48
 800bde0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bde4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bde6:	e841 2300 	strex	r3, r2, [r1]
 800bdea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bdec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1e5      	bne.n	800bdbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2220      	movs	r2, #32
 800bdf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2220      	movs	r2, #32
 800bdfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800be0a:	2303      	movs	r3, #3
 800be0c:	e069      	b.n	800bee2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 0304 	and.w	r3, r3, #4
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d051      	beq.n	800bec0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	69db      	ldr	r3, [r3, #28]
 800be22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be2a:	d149      	bne.n	800bec0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3e:	e853 3f00 	ldrex	r3, [r3]
 800be42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	461a      	mov	r2, r3
 800be52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be54:	637b      	str	r3, [r7, #52]	; 0x34
 800be56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be5c:	e841 2300 	strex	r3, r2, [r1]
 800be60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1e6      	bne.n	800be36 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	3308      	adds	r3, #8
 800be6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	e853 3f00 	ldrex	r3, [r3]
 800be76:	613b      	str	r3, [r7, #16]
   return(result);
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	f023 0301 	bic.w	r3, r3, #1
 800be7e:	66bb      	str	r3, [r7, #104]	; 0x68
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3308      	adds	r3, #8
 800be86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be88:	623a      	str	r2, [r7, #32]
 800be8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8c:	69f9      	ldr	r1, [r7, #28]
 800be8e:	6a3a      	ldr	r2, [r7, #32]
 800be90:	e841 2300 	strex	r3, r2, [r1]
 800be94:	61bb      	str	r3, [r7, #24]
   return(result);
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1e5      	bne.n	800be68 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2220      	movs	r2, #32
 800bea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2220      	movs	r2, #32
 800bea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2220      	movs	r2, #32
 800beb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bebc:	2303      	movs	r3, #3
 800bebe:	e010      	b.n	800bee2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	69da      	ldr	r2, [r3, #28]
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	4013      	ands	r3, r2
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	429a      	cmp	r2, r3
 800bece:	bf0c      	ite	eq
 800bed0:	2301      	moveq	r3, #1
 800bed2:	2300      	movne	r3, #0
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	461a      	mov	r2, r3
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	429a      	cmp	r2, r3
 800bedc:	f43f af46 	beq.w	800bd6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3770      	adds	r7, #112	; 0x70
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800beea:	b480      	push	{r7}
 800beec:	b085      	sub	sp, #20
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d101      	bne.n	800bf00 <HAL_UARTEx_DisableFifoMode+0x16>
 800befc:	2302      	movs	r3, #2
 800befe:	e027      	b.n	800bf50 <HAL_UARTEx_DisableFifoMode+0x66>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2224      	movs	r2, #36	; 0x24
 800bf0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f022 0201 	bic.w	r2, r2, #1
 800bf26:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bf2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2220      	movs	r2, #32
 800bf42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d101      	bne.n	800bf74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf70:	2302      	movs	r3, #2
 800bf72:	e02d      	b.n	800bfd0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2224      	movs	r2, #36	; 0x24
 800bf80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f022 0201 	bic.w	r2, r2, #1
 800bf9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	683a      	ldr	r2, [r7, #0]
 800bfac:	430a      	orrs	r2, r1
 800bfae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 f84f 	bl	800c054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2220      	movs	r2, #32
 800bfc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d101      	bne.n	800bff0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bfec:	2302      	movs	r3, #2
 800bfee:	e02d      	b.n	800c04c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2224      	movs	r2, #36	; 0x24
 800bffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f022 0201 	bic.w	r2, r2, #1
 800c016:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	683a      	ldr	r2, [r7, #0]
 800c028:	430a      	orrs	r2, r1
 800c02a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 f811 	bl	800c054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2220      	movs	r2, #32
 800c03e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c060:	2b00      	cmp	r3, #0
 800c062:	d108      	bne.n	800c076 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c074:	e031      	b.n	800c0da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c076:	2310      	movs	r3, #16
 800c078:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c07a:	2310      	movs	r3, #16
 800c07c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	0e5b      	lsrs	r3, r3, #25
 800c086:	b2db      	uxtb	r3, r3
 800c088:	f003 0307 	and.w	r3, r3, #7
 800c08c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	0f5b      	lsrs	r3, r3, #29
 800c096:	b2db      	uxtb	r3, r3
 800c098:	f003 0307 	and.w	r3, r3, #7
 800c09c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c09e:	7bbb      	ldrb	r3, [r7, #14]
 800c0a0:	7b3a      	ldrb	r2, [r7, #12]
 800c0a2:	4911      	ldr	r1, [pc, #68]	; (800c0e8 <UARTEx_SetNbDataToProcess+0x94>)
 800c0a4:	5c8a      	ldrb	r2, [r1, r2]
 800c0a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c0aa:	7b3a      	ldrb	r2, [r7, #12]
 800c0ac:	490f      	ldr	r1, [pc, #60]	; (800c0ec <UARTEx_SetNbDataToProcess+0x98>)
 800c0ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c0b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
 800c0be:	7b7a      	ldrb	r2, [r7, #13]
 800c0c0:	4909      	ldr	r1, [pc, #36]	; (800c0e8 <UARTEx_SetNbDataToProcess+0x94>)
 800c0c2:	5c8a      	ldrb	r2, [r1, r2]
 800c0c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c0c8:	7b7a      	ldrb	r2, [r7, #13]
 800c0ca:	4908      	ldr	r1, [pc, #32]	; (800c0ec <UARTEx_SetNbDataToProcess+0x98>)
 800c0cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c0da:	bf00      	nop
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop
 800c0e8:	0800d09c 	.word	0x0800d09c
 800c0ec:	0800d0a4 	.word	0x0800d0a4

0800c0f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b084      	sub	sp, #16
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
 800c0fa:	f107 001c 	add.w	r0, r7, #28
 800c0fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	2b01      	cmp	r3, #1
 800c106:	d120      	bne.n	800c14a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c10c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	68da      	ldr	r2, [r3, #12]
 800c118:	4b2a      	ldr	r3, [pc, #168]	; (800c1c4 <USB_CoreInit+0xd4>)
 800c11a:	4013      	ands	r3, r2
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c12c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d105      	bne.n	800c13e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 faac 	bl	800c69c <USB_CoreReset>
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]
 800c148:	e01a      	b.n	800c180 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 faa0 	bl	800c69c <USB_CoreReset>
 800c15c:	4603      	mov	r3, r0
 800c15e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c162:	2b00      	cmp	r3, #0
 800c164:	d106      	bne.n	800c174 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c16a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	639a      	str	r2, [r3, #56]	; 0x38
 800c172:	e005      	b.n	800c180 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c178:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c182:	2b01      	cmp	r3, #1
 800c184:	d116      	bne.n	800c1b4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c18a:	b29a      	uxth	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c194:	4b0c      	ldr	r3, [pc, #48]	; (800c1c8 <USB_CoreInit+0xd8>)
 800c196:	4313      	orrs	r3, r2
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	f043 0206 	orr.w	r2, r3, #6
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	f043 0220 	orr.w	r2, r3, #32
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c1c0:	b004      	add	sp, #16
 800c1c2:	4770      	bx	lr
 800c1c4:	ffbdffbf 	.word	0xffbdffbf
 800c1c8:	03ee0000 	.word	0x03ee0000

0800c1cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	f023 0201 	bic.w	r2, r3, #1
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	370c      	adds	r7, #12
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr

0800c1ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b084      	sub	sp, #16
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c20a:	78fb      	ldrb	r3, [r7, #3]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d115      	bne.n	800c23c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c21c:	2001      	movs	r0, #1
 800c21e:	f7f5 fbfb 	bl	8001a18 <HAL_Delay>
      ms++;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	3301      	adds	r3, #1
 800c226:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fa29 	bl	800c680 <USB_GetMode>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b01      	cmp	r3, #1
 800c232:	d01e      	beq.n	800c272 <USB_SetCurrentMode+0x84>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2b31      	cmp	r3, #49	; 0x31
 800c238:	d9f0      	bls.n	800c21c <USB_SetCurrentMode+0x2e>
 800c23a:	e01a      	b.n	800c272 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c23c:	78fb      	ldrb	r3, [r7, #3]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d115      	bne.n	800c26e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c24e:	2001      	movs	r0, #1
 800c250:	f7f5 fbe2 	bl	8001a18 <HAL_Delay>
      ms++;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	3301      	adds	r3, #1
 800c258:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 fa10 	bl	800c680 <USB_GetMode>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d005      	beq.n	800c272 <USB_SetCurrentMode+0x84>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2b31      	cmp	r3, #49	; 0x31
 800c26a:	d9f0      	bls.n	800c24e <USB_SetCurrentMode+0x60>
 800c26c:	e001      	b.n	800c272 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	e005      	b.n	800c27e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2b32      	cmp	r3, #50	; 0x32
 800c276:	d101      	bne.n	800c27c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c278:	2301      	movs	r3, #1
 800c27a:	e000      	b.n	800c27e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
	...

0800c288 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c288:	b084      	sub	sp, #16
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b086      	sub	sp, #24
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	613b      	str	r3, [r7, #16]
 800c2a6:	e009      	b.n	800c2bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	3340      	adds	r3, #64	; 0x40
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	613b      	str	r3, [r7, #16]
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	2b0e      	cmp	r3, #14
 800c2c0:	d9f2      	bls.n	800c2a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d11c      	bne.n	800c302 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2d6:	f043 0302 	orr.w	r3, r3, #2
 800c2da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	601a      	str	r2, [r3, #0]
 800c300:	e005      	b.n	800c30e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c306:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c314:	461a      	mov	r2, r3
 800c316:	2300      	movs	r3, #0
 800c318:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c320:	4619      	mov	r1, r3
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c328:	461a      	mov	r2, r3
 800c32a:	680b      	ldr	r3, [r1, #0]
 800c32c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c330:	2b01      	cmp	r3, #1
 800c332:	d10c      	bne.n	800c34e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c336:	2b00      	cmp	r3, #0
 800c338:	d104      	bne.n	800c344 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c33a:	2100      	movs	r1, #0
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 f965 	bl	800c60c <USB_SetDevSpeed>
 800c342:	e008      	b.n	800c356 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c344:	2101      	movs	r1, #1
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 f960 	bl	800c60c <USB_SetDevSpeed>
 800c34c:	e003      	b.n	800c356 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c34e:	2103      	movs	r1, #3
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 f95b 	bl	800c60c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c356:	2110      	movs	r1, #16
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 f8f3 	bl	800c544 <USB_FlushTxFifo>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d001      	beq.n	800c368 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c364:	2301      	movs	r3, #1
 800c366:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 f91f 	bl	800c5ac <USB_FlushRxFifo>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d001      	beq.n	800c378 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c374:	2301      	movs	r3, #1
 800c376:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c37e:	461a      	mov	r2, r3
 800c380:	2300      	movs	r3, #0
 800c382:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c38a:	461a      	mov	r2, r3
 800c38c:	2300      	movs	r3, #0
 800c38e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c396:	461a      	mov	r2, r3
 800c398:	2300      	movs	r3, #0
 800c39a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c39c:	2300      	movs	r3, #0
 800c39e:	613b      	str	r3, [r7, #16]
 800c3a0:	e043      	b.n	800c42a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	015a      	lsls	r2, r3, #5
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3b8:	d118      	bne.n	800c3ec <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d10a      	bne.n	800c3d6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	015a      	lsls	r2, r3, #5
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c3d2:	6013      	str	r3, [r2, #0]
 800c3d4:	e013      	b.n	800c3fe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	015a      	lsls	r2, r3, #5
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	4413      	add	r3, r2
 800c3de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c3e8:	6013      	str	r3, [r2, #0]
 800c3ea:	e008      	b.n	800c3fe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	015a      	lsls	r2, r3, #5
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	015a      	lsls	r2, r3, #5
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	4413      	add	r3, r2
 800c406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c40a:	461a      	mov	r2, r3
 800c40c:	2300      	movs	r3, #0
 800c40e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	015a      	lsls	r2, r3, #5
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	4413      	add	r3, r2
 800c418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c41c:	461a      	mov	r2, r3
 800c41e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c422:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	3301      	adds	r3, #1
 800c428:	613b      	str	r3, [r7, #16]
 800c42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42c:	693a      	ldr	r2, [r7, #16]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d3b7      	bcc.n	800c3a2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c432:	2300      	movs	r3, #0
 800c434:	613b      	str	r3, [r7, #16]
 800c436:	e043      	b.n	800c4c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	015a      	lsls	r2, r3, #5
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	4413      	add	r3, r2
 800c440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c44a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c44e:	d118      	bne.n	800c482 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10a      	bne.n	800c46c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	015a      	lsls	r2, r3, #5
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	4413      	add	r3, r2
 800c45e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c462:	461a      	mov	r2, r3
 800c464:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	e013      	b.n	800c494 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	015a      	lsls	r2, r3, #5
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	4413      	add	r3, r2
 800c474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c478:	461a      	mov	r2, r3
 800c47a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c47e:	6013      	str	r3, [r2, #0]
 800c480:	e008      	b.n	800c494 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	015a      	lsls	r2, r3, #5
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	4413      	add	r3, r2
 800c48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c48e:	461a      	mov	r2, r3
 800c490:	2300      	movs	r3, #0
 800c492:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	015a      	lsls	r2, r3, #5
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	4413      	add	r3, r2
 800c49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	015a      	lsls	r2, r3, #5
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c4b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	3301      	adds	r3, #1
 800c4be:	613b      	str	r3, [r7, #16]
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c2:	693a      	ldr	r2, [r7, #16]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d3b7      	bcc.n	800c438 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	68fa      	ldr	r2, [r7, #12]
 800c4d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c4e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d105      	bne.n	800c4fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	699b      	ldr	r3, [r3, #24]
 800c4f4:	f043 0210 	orr.w	r2, r3, #16
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	699a      	ldr	r2, [r3, #24]
 800c500:	4b0e      	ldr	r3, [pc, #56]	; (800c53c <USB_DevInit+0x2b4>)
 800c502:	4313      	orrs	r3, r2
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d005      	beq.n	800c51a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	699b      	ldr	r3, [r3, #24]
 800c512:	f043 0208 	orr.w	r2, r3, #8
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d105      	bne.n	800c52c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	699a      	ldr	r2, [r3, #24]
 800c524:	4b06      	ldr	r3, [pc, #24]	; (800c540 <USB_DevInit+0x2b8>)
 800c526:	4313      	orrs	r3, r2
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c52c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3718      	adds	r7, #24
 800c532:	46bd      	mov	sp, r7
 800c534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c538:	b004      	add	sp, #16
 800c53a:	4770      	bx	lr
 800c53c:	803c3800 	.word	0x803c3800
 800c540:	40000004 	.word	0x40000004

0800c544 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c54e:	2300      	movs	r3, #0
 800c550:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	3301      	adds	r3, #1
 800c556:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	4a13      	ldr	r2, [pc, #76]	; (800c5a8 <USB_FlushTxFifo+0x64>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d901      	bls.n	800c564 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c560:	2303      	movs	r3, #3
 800c562:	e01b      	b.n	800c59c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	daf2      	bge.n	800c552 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c56c:	2300      	movs	r3, #0
 800c56e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	019b      	lsls	r3, r3, #6
 800c574:	f043 0220 	orr.w	r2, r3, #32
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	3301      	adds	r3, #1
 800c580:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	4a08      	ldr	r2, [pc, #32]	; (800c5a8 <USB_FlushTxFifo+0x64>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d901      	bls.n	800c58e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c58a:	2303      	movs	r3, #3
 800c58c:	e006      	b.n	800c59c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	f003 0320 	and.w	r3, r3, #32
 800c596:	2b20      	cmp	r3, #32
 800c598:	d0f0      	beq.n	800c57c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr
 800c5a8:	00030d40 	.word	0x00030d40

0800c5ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	4a11      	ldr	r2, [pc, #68]	; (800c608 <USB_FlushRxFifo+0x5c>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d901      	bls.n	800c5ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	e018      	b.n	800c5fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	daf2      	bge.n	800c5b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2210      	movs	r2, #16
 800c5da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	4a08      	ldr	r2, [pc, #32]	; (800c608 <USB_FlushRxFifo+0x5c>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d901      	bls.n	800c5ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c5ea:	2303      	movs	r3, #3
 800c5ec:	e006      	b.n	800c5fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	f003 0310 	and.w	r3, r3, #16
 800c5f6:	2b10      	cmp	r3, #16
 800c5f8:	d0f0      	beq.n	800c5dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	00030d40 	.word	0x00030d40

0800c60c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	460b      	mov	r3, r1
 800c616:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	78fb      	ldrb	r3, [r7, #3]
 800c626:	68f9      	ldr	r1, [r7, #12]
 800c628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c62c:	4313      	orrs	r3, r2
 800c62e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c63e:	b480      	push	{r7}
 800c640:	b085      	sub	sp, #20
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	68fa      	ldr	r2, [r7, #12]
 800c654:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c658:	f023 0303 	bic.w	r3, r3, #3
 800c65c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c66c:	f043 0302 	orr.w	r3, r3, #2
 800c670:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	695b      	ldr	r3, [r3, #20]
 800c68c:	f003 0301 	and.w	r3, r3, #1
}
 800c690:	4618      	mov	r0, r3
 800c692:	370c      	adds	r7, #12
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	4a13      	ldr	r2, [pc, #76]	; (800c700 <USB_CoreReset+0x64>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d901      	bls.n	800c6ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c6b6:	2303      	movs	r3, #3
 800c6b8:	e01b      	b.n	800c6f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	daf2      	bge.n	800c6a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	f043 0201 	orr.w	r2, r3, #1
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	4a09      	ldr	r2, [pc, #36]	; (800c700 <USB_CoreReset+0x64>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d901      	bls.n	800c6e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c6e0:	2303      	movs	r3, #3
 800c6e2:	e006      	b.n	800c6f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	f003 0301 	and.w	r3, r3, #1
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d0f0      	beq.n	800c6d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	00030d40 	.word	0x00030d40

0800c704 <__errno>:
 800c704:	4b01      	ldr	r3, [pc, #4]	; (800c70c <__errno+0x8>)
 800c706:	6818      	ldr	r0, [r3, #0]
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	2400001c 	.word	0x2400001c

0800c710 <__libc_init_array>:
 800c710:	b570      	push	{r4, r5, r6, lr}
 800c712:	4d0d      	ldr	r5, [pc, #52]	; (800c748 <__libc_init_array+0x38>)
 800c714:	4c0d      	ldr	r4, [pc, #52]	; (800c74c <__libc_init_array+0x3c>)
 800c716:	1b64      	subs	r4, r4, r5
 800c718:	10a4      	asrs	r4, r4, #2
 800c71a:	2600      	movs	r6, #0
 800c71c:	42a6      	cmp	r6, r4
 800c71e:	d109      	bne.n	800c734 <__libc_init_array+0x24>
 800c720:	4d0b      	ldr	r5, [pc, #44]	; (800c750 <__libc_init_array+0x40>)
 800c722:	4c0c      	ldr	r4, [pc, #48]	; (800c754 <__libc_init_array+0x44>)
 800c724:	f000 fc8e 	bl	800d044 <_init>
 800c728:	1b64      	subs	r4, r4, r5
 800c72a:	10a4      	asrs	r4, r4, #2
 800c72c:	2600      	movs	r6, #0
 800c72e:	42a6      	cmp	r6, r4
 800c730:	d105      	bne.n	800c73e <__libc_init_array+0x2e>
 800c732:	bd70      	pop	{r4, r5, r6, pc}
 800c734:	f855 3b04 	ldr.w	r3, [r5], #4
 800c738:	4798      	blx	r3
 800c73a:	3601      	adds	r6, #1
 800c73c:	e7ee      	b.n	800c71c <__libc_init_array+0xc>
 800c73e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c742:	4798      	blx	r3
 800c744:	3601      	adds	r6, #1
 800c746:	e7f2      	b.n	800c72e <__libc_init_array+0x1e>
 800c748:	0800d0e8 	.word	0x0800d0e8
 800c74c:	0800d0e8 	.word	0x0800d0e8
 800c750:	0800d0e8 	.word	0x0800d0e8
 800c754:	0800d0ec 	.word	0x0800d0ec

0800c758 <memset>:
 800c758:	4402      	add	r2, r0
 800c75a:	4603      	mov	r3, r0
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d100      	bne.n	800c762 <memset+0xa>
 800c760:	4770      	bx	lr
 800c762:	f803 1b01 	strb.w	r1, [r3], #1
 800c766:	e7f9      	b.n	800c75c <memset+0x4>

0800c768 <siprintf>:
 800c768:	b40e      	push	{r1, r2, r3}
 800c76a:	b500      	push	{lr}
 800c76c:	b09c      	sub	sp, #112	; 0x70
 800c76e:	ab1d      	add	r3, sp, #116	; 0x74
 800c770:	9002      	str	r0, [sp, #8]
 800c772:	9006      	str	r0, [sp, #24]
 800c774:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c778:	4809      	ldr	r0, [pc, #36]	; (800c7a0 <siprintf+0x38>)
 800c77a:	9107      	str	r1, [sp, #28]
 800c77c:	9104      	str	r1, [sp, #16]
 800c77e:	4909      	ldr	r1, [pc, #36]	; (800c7a4 <siprintf+0x3c>)
 800c780:	f853 2b04 	ldr.w	r2, [r3], #4
 800c784:	9105      	str	r1, [sp, #20]
 800c786:	6800      	ldr	r0, [r0, #0]
 800c788:	9301      	str	r3, [sp, #4]
 800c78a:	a902      	add	r1, sp, #8
 800c78c:	f000 f868 	bl	800c860 <_svfiprintf_r>
 800c790:	9b02      	ldr	r3, [sp, #8]
 800c792:	2200      	movs	r2, #0
 800c794:	701a      	strb	r2, [r3, #0]
 800c796:	b01c      	add	sp, #112	; 0x70
 800c798:	f85d eb04 	ldr.w	lr, [sp], #4
 800c79c:	b003      	add	sp, #12
 800c79e:	4770      	bx	lr
 800c7a0:	2400001c 	.word	0x2400001c
 800c7a4:	ffff0208 	.word	0xffff0208

0800c7a8 <__ssputs_r>:
 800c7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ac:	688e      	ldr	r6, [r1, #8]
 800c7ae:	429e      	cmp	r6, r3
 800c7b0:	4682      	mov	sl, r0
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	4690      	mov	r8, r2
 800c7b6:	461f      	mov	r7, r3
 800c7b8:	d838      	bhi.n	800c82c <__ssputs_r+0x84>
 800c7ba:	898a      	ldrh	r2, [r1, #12]
 800c7bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7c0:	d032      	beq.n	800c828 <__ssputs_r+0x80>
 800c7c2:	6825      	ldr	r5, [r4, #0]
 800c7c4:	6909      	ldr	r1, [r1, #16]
 800c7c6:	eba5 0901 	sub.w	r9, r5, r1
 800c7ca:	6965      	ldr	r5, [r4, #20]
 800c7cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	444b      	add	r3, r9
 800c7d8:	106d      	asrs	r5, r5, #1
 800c7da:	429d      	cmp	r5, r3
 800c7dc:	bf38      	it	cc
 800c7de:	461d      	movcc	r5, r3
 800c7e0:	0553      	lsls	r3, r2, #21
 800c7e2:	d531      	bpl.n	800c848 <__ssputs_r+0xa0>
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	f000 fb63 	bl	800ceb0 <_malloc_r>
 800c7ea:	4606      	mov	r6, r0
 800c7ec:	b950      	cbnz	r0, 800c804 <__ssputs_r+0x5c>
 800c7ee:	230c      	movs	r3, #12
 800c7f0:	f8ca 3000 	str.w	r3, [sl]
 800c7f4:	89a3      	ldrh	r3, [r4, #12]
 800c7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7fa:	81a3      	strh	r3, [r4, #12]
 800c7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c804:	6921      	ldr	r1, [r4, #16]
 800c806:	464a      	mov	r2, r9
 800c808:	f000 fabe 	bl	800cd88 <memcpy>
 800c80c:	89a3      	ldrh	r3, [r4, #12]
 800c80e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c816:	81a3      	strh	r3, [r4, #12]
 800c818:	6126      	str	r6, [r4, #16]
 800c81a:	6165      	str	r5, [r4, #20]
 800c81c:	444e      	add	r6, r9
 800c81e:	eba5 0509 	sub.w	r5, r5, r9
 800c822:	6026      	str	r6, [r4, #0]
 800c824:	60a5      	str	r5, [r4, #8]
 800c826:	463e      	mov	r6, r7
 800c828:	42be      	cmp	r6, r7
 800c82a:	d900      	bls.n	800c82e <__ssputs_r+0x86>
 800c82c:	463e      	mov	r6, r7
 800c82e:	6820      	ldr	r0, [r4, #0]
 800c830:	4632      	mov	r2, r6
 800c832:	4641      	mov	r1, r8
 800c834:	f000 fab6 	bl	800cda4 <memmove>
 800c838:	68a3      	ldr	r3, [r4, #8]
 800c83a:	1b9b      	subs	r3, r3, r6
 800c83c:	60a3      	str	r3, [r4, #8]
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	4433      	add	r3, r6
 800c842:	6023      	str	r3, [r4, #0]
 800c844:	2000      	movs	r0, #0
 800c846:	e7db      	b.n	800c800 <__ssputs_r+0x58>
 800c848:	462a      	mov	r2, r5
 800c84a:	f000 fba5 	bl	800cf98 <_realloc_r>
 800c84e:	4606      	mov	r6, r0
 800c850:	2800      	cmp	r0, #0
 800c852:	d1e1      	bne.n	800c818 <__ssputs_r+0x70>
 800c854:	6921      	ldr	r1, [r4, #16]
 800c856:	4650      	mov	r0, sl
 800c858:	f000 fabe 	bl	800cdd8 <_free_r>
 800c85c:	e7c7      	b.n	800c7ee <__ssputs_r+0x46>
	...

0800c860 <_svfiprintf_r>:
 800c860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c864:	4698      	mov	r8, r3
 800c866:	898b      	ldrh	r3, [r1, #12]
 800c868:	061b      	lsls	r3, r3, #24
 800c86a:	b09d      	sub	sp, #116	; 0x74
 800c86c:	4607      	mov	r7, r0
 800c86e:	460d      	mov	r5, r1
 800c870:	4614      	mov	r4, r2
 800c872:	d50e      	bpl.n	800c892 <_svfiprintf_r+0x32>
 800c874:	690b      	ldr	r3, [r1, #16]
 800c876:	b963      	cbnz	r3, 800c892 <_svfiprintf_r+0x32>
 800c878:	2140      	movs	r1, #64	; 0x40
 800c87a:	f000 fb19 	bl	800ceb0 <_malloc_r>
 800c87e:	6028      	str	r0, [r5, #0]
 800c880:	6128      	str	r0, [r5, #16]
 800c882:	b920      	cbnz	r0, 800c88e <_svfiprintf_r+0x2e>
 800c884:	230c      	movs	r3, #12
 800c886:	603b      	str	r3, [r7, #0]
 800c888:	f04f 30ff 	mov.w	r0, #4294967295
 800c88c:	e0d1      	b.n	800ca32 <_svfiprintf_r+0x1d2>
 800c88e:	2340      	movs	r3, #64	; 0x40
 800c890:	616b      	str	r3, [r5, #20]
 800c892:	2300      	movs	r3, #0
 800c894:	9309      	str	r3, [sp, #36]	; 0x24
 800c896:	2320      	movs	r3, #32
 800c898:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c89c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8a0:	2330      	movs	r3, #48	; 0x30
 800c8a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca4c <_svfiprintf_r+0x1ec>
 800c8a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8aa:	f04f 0901 	mov.w	r9, #1
 800c8ae:	4623      	mov	r3, r4
 800c8b0:	469a      	mov	sl, r3
 800c8b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8b6:	b10a      	cbz	r2, 800c8bc <_svfiprintf_r+0x5c>
 800c8b8:	2a25      	cmp	r2, #37	; 0x25
 800c8ba:	d1f9      	bne.n	800c8b0 <_svfiprintf_r+0x50>
 800c8bc:	ebba 0b04 	subs.w	fp, sl, r4
 800c8c0:	d00b      	beq.n	800c8da <_svfiprintf_r+0x7a>
 800c8c2:	465b      	mov	r3, fp
 800c8c4:	4622      	mov	r2, r4
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	4638      	mov	r0, r7
 800c8ca:	f7ff ff6d 	bl	800c7a8 <__ssputs_r>
 800c8ce:	3001      	adds	r0, #1
 800c8d0:	f000 80aa 	beq.w	800ca28 <_svfiprintf_r+0x1c8>
 800c8d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8d6:	445a      	add	r2, fp
 800c8d8:	9209      	str	r2, [sp, #36]	; 0x24
 800c8da:	f89a 3000 	ldrb.w	r3, [sl]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	f000 80a2 	beq.w	800ca28 <_svfiprintf_r+0x1c8>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8ee:	f10a 0a01 	add.w	sl, sl, #1
 800c8f2:	9304      	str	r3, [sp, #16]
 800c8f4:	9307      	str	r3, [sp, #28]
 800c8f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8fa:	931a      	str	r3, [sp, #104]	; 0x68
 800c8fc:	4654      	mov	r4, sl
 800c8fe:	2205      	movs	r2, #5
 800c900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c904:	4851      	ldr	r0, [pc, #324]	; (800ca4c <_svfiprintf_r+0x1ec>)
 800c906:	f7f3 fceb 	bl	80002e0 <memchr>
 800c90a:	9a04      	ldr	r2, [sp, #16]
 800c90c:	b9d8      	cbnz	r0, 800c946 <_svfiprintf_r+0xe6>
 800c90e:	06d0      	lsls	r0, r2, #27
 800c910:	bf44      	itt	mi
 800c912:	2320      	movmi	r3, #32
 800c914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c918:	0711      	lsls	r1, r2, #28
 800c91a:	bf44      	itt	mi
 800c91c:	232b      	movmi	r3, #43	; 0x2b
 800c91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c922:	f89a 3000 	ldrb.w	r3, [sl]
 800c926:	2b2a      	cmp	r3, #42	; 0x2a
 800c928:	d015      	beq.n	800c956 <_svfiprintf_r+0xf6>
 800c92a:	9a07      	ldr	r2, [sp, #28]
 800c92c:	4654      	mov	r4, sl
 800c92e:	2000      	movs	r0, #0
 800c930:	f04f 0c0a 	mov.w	ip, #10
 800c934:	4621      	mov	r1, r4
 800c936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c93a:	3b30      	subs	r3, #48	; 0x30
 800c93c:	2b09      	cmp	r3, #9
 800c93e:	d94e      	bls.n	800c9de <_svfiprintf_r+0x17e>
 800c940:	b1b0      	cbz	r0, 800c970 <_svfiprintf_r+0x110>
 800c942:	9207      	str	r2, [sp, #28]
 800c944:	e014      	b.n	800c970 <_svfiprintf_r+0x110>
 800c946:	eba0 0308 	sub.w	r3, r0, r8
 800c94a:	fa09 f303 	lsl.w	r3, r9, r3
 800c94e:	4313      	orrs	r3, r2
 800c950:	9304      	str	r3, [sp, #16]
 800c952:	46a2      	mov	sl, r4
 800c954:	e7d2      	b.n	800c8fc <_svfiprintf_r+0x9c>
 800c956:	9b03      	ldr	r3, [sp, #12]
 800c958:	1d19      	adds	r1, r3, #4
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	9103      	str	r1, [sp, #12]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	bfbb      	ittet	lt
 800c962:	425b      	neglt	r3, r3
 800c964:	f042 0202 	orrlt.w	r2, r2, #2
 800c968:	9307      	strge	r3, [sp, #28]
 800c96a:	9307      	strlt	r3, [sp, #28]
 800c96c:	bfb8      	it	lt
 800c96e:	9204      	strlt	r2, [sp, #16]
 800c970:	7823      	ldrb	r3, [r4, #0]
 800c972:	2b2e      	cmp	r3, #46	; 0x2e
 800c974:	d10c      	bne.n	800c990 <_svfiprintf_r+0x130>
 800c976:	7863      	ldrb	r3, [r4, #1]
 800c978:	2b2a      	cmp	r3, #42	; 0x2a
 800c97a:	d135      	bne.n	800c9e8 <_svfiprintf_r+0x188>
 800c97c:	9b03      	ldr	r3, [sp, #12]
 800c97e:	1d1a      	adds	r2, r3, #4
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	9203      	str	r2, [sp, #12]
 800c984:	2b00      	cmp	r3, #0
 800c986:	bfb8      	it	lt
 800c988:	f04f 33ff 	movlt.w	r3, #4294967295
 800c98c:	3402      	adds	r4, #2
 800c98e:	9305      	str	r3, [sp, #20]
 800c990:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca5c <_svfiprintf_r+0x1fc>
 800c994:	7821      	ldrb	r1, [r4, #0]
 800c996:	2203      	movs	r2, #3
 800c998:	4650      	mov	r0, sl
 800c99a:	f7f3 fca1 	bl	80002e0 <memchr>
 800c99e:	b140      	cbz	r0, 800c9b2 <_svfiprintf_r+0x152>
 800c9a0:	2340      	movs	r3, #64	; 0x40
 800c9a2:	eba0 000a 	sub.w	r0, r0, sl
 800c9a6:	fa03 f000 	lsl.w	r0, r3, r0
 800c9aa:	9b04      	ldr	r3, [sp, #16]
 800c9ac:	4303      	orrs	r3, r0
 800c9ae:	3401      	adds	r4, #1
 800c9b0:	9304      	str	r3, [sp, #16]
 800c9b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b6:	4826      	ldr	r0, [pc, #152]	; (800ca50 <_svfiprintf_r+0x1f0>)
 800c9b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9bc:	2206      	movs	r2, #6
 800c9be:	f7f3 fc8f 	bl	80002e0 <memchr>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d038      	beq.n	800ca38 <_svfiprintf_r+0x1d8>
 800c9c6:	4b23      	ldr	r3, [pc, #140]	; (800ca54 <_svfiprintf_r+0x1f4>)
 800c9c8:	bb1b      	cbnz	r3, 800ca12 <_svfiprintf_r+0x1b2>
 800c9ca:	9b03      	ldr	r3, [sp, #12]
 800c9cc:	3307      	adds	r3, #7
 800c9ce:	f023 0307 	bic.w	r3, r3, #7
 800c9d2:	3308      	adds	r3, #8
 800c9d4:	9303      	str	r3, [sp, #12]
 800c9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d8:	4433      	add	r3, r6
 800c9da:	9309      	str	r3, [sp, #36]	; 0x24
 800c9dc:	e767      	b.n	800c8ae <_svfiprintf_r+0x4e>
 800c9de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	2001      	movs	r0, #1
 800c9e6:	e7a5      	b.n	800c934 <_svfiprintf_r+0xd4>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	3401      	adds	r4, #1
 800c9ec:	9305      	str	r3, [sp, #20]
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	f04f 0c0a 	mov.w	ip, #10
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9fa:	3a30      	subs	r2, #48	; 0x30
 800c9fc:	2a09      	cmp	r2, #9
 800c9fe:	d903      	bls.n	800ca08 <_svfiprintf_r+0x1a8>
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d0c5      	beq.n	800c990 <_svfiprintf_r+0x130>
 800ca04:	9105      	str	r1, [sp, #20]
 800ca06:	e7c3      	b.n	800c990 <_svfiprintf_r+0x130>
 800ca08:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e7f0      	b.n	800c9f4 <_svfiprintf_r+0x194>
 800ca12:	ab03      	add	r3, sp, #12
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	462a      	mov	r2, r5
 800ca18:	4b0f      	ldr	r3, [pc, #60]	; (800ca58 <_svfiprintf_r+0x1f8>)
 800ca1a:	a904      	add	r1, sp, #16
 800ca1c:	4638      	mov	r0, r7
 800ca1e:	f3af 8000 	nop.w
 800ca22:	1c42      	adds	r2, r0, #1
 800ca24:	4606      	mov	r6, r0
 800ca26:	d1d6      	bne.n	800c9d6 <_svfiprintf_r+0x176>
 800ca28:	89ab      	ldrh	r3, [r5, #12]
 800ca2a:	065b      	lsls	r3, r3, #25
 800ca2c:	f53f af2c 	bmi.w	800c888 <_svfiprintf_r+0x28>
 800ca30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca32:	b01d      	add	sp, #116	; 0x74
 800ca34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca38:	ab03      	add	r3, sp, #12
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	462a      	mov	r2, r5
 800ca3e:	4b06      	ldr	r3, [pc, #24]	; (800ca58 <_svfiprintf_r+0x1f8>)
 800ca40:	a904      	add	r1, sp, #16
 800ca42:	4638      	mov	r0, r7
 800ca44:	f000 f87a 	bl	800cb3c <_printf_i>
 800ca48:	e7eb      	b.n	800ca22 <_svfiprintf_r+0x1c2>
 800ca4a:	bf00      	nop
 800ca4c:	0800d0ac 	.word	0x0800d0ac
 800ca50:	0800d0b6 	.word	0x0800d0b6
 800ca54:	00000000 	.word	0x00000000
 800ca58:	0800c7a9 	.word	0x0800c7a9
 800ca5c:	0800d0b2 	.word	0x0800d0b2

0800ca60 <_printf_common>:
 800ca60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca64:	4616      	mov	r6, r2
 800ca66:	4699      	mov	r9, r3
 800ca68:	688a      	ldr	r2, [r1, #8]
 800ca6a:	690b      	ldr	r3, [r1, #16]
 800ca6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca70:	4293      	cmp	r3, r2
 800ca72:	bfb8      	it	lt
 800ca74:	4613      	movlt	r3, r2
 800ca76:	6033      	str	r3, [r6, #0]
 800ca78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca7c:	4607      	mov	r7, r0
 800ca7e:	460c      	mov	r4, r1
 800ca80:	b10a      	cbz	r2, 800ca86 <_printf_common+0x26>
 800ca82:	3301      	adds	r3, #1
 800ca84:	6033      	str	r3, [r6, #0]
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	0699      	lsls	r1, r3, #26
 800ca8a:	bf42      	ittt	mi
 800ca8c:	6833      	ldrmi	r3, [r6, #0]
 800ca8e:	3302      	addmi	r3, #2
 800ca90:	6033      	strmi	r3, [r6, #0]
 800ca92:	6825      	ldr	r5, [r4, #0]
 800ca94:	f015 0506 	ands.w	r5, r5, #6
 800ca98:	d106      	bne.n	800caa8 <_printf_common+0x48>
 800ca9a:	f104 0a19 	add.w	sl, r4, #25
 800ca9e:	68e3      	ldr	r3, [r4, #12]
 800caa0:	6832      	ldr	r2, [r6, #0]
 800caa2:	1a9b      	subs	r3, r3, r2
 800caa4:	42ab      	cmp	r3, r5
 800caa6:	dc26      	bgt.n	800caf6 <_printf_common+0x96>
 800caa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800caac:	1e13      	subs	r3, r2, #0
 800caae:	6822      	ldr	r2, [r4, #0]
 800cab0:	bf18      	it	ne
 800cab2:	2301      	movne	r3, #1
 800cab4:	0692      	lsls	r2, r2, #26
 800cab6:	d42b      	bmi.n	800cb10 <_printf_common+0xb0>
 800cab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cabc:	4649      	mov	r1, r9
 800cabe:	4638      	mov	r0, r7
 800cac0:	47c0      	blx	r8
 800cac2:	3001      	adds	r0, #1
 800cac4:	d01e      	beq.n	800cb04 <_printf_common+0xa4>
 800cac6:	6823      	ldr	r3, [r4, #0]
 800cac8:	68e5      	ldr	r5, [r4, #12]
 800caca:	6832      	ldr	r2, [r6, #0]
 800cacc:	f003 0306 	and.w	r3, r3, #6
 800cad0:	2b04      	cmp	r3, #4
 800cad2:	bf08      	it	eq
 800cad4:	1aad      	subeq	r5, r5, r2
 800cad6:	68a3      	ldr	r3, [r4, #8]
 800cad8:	6922      	ldr	r2, [r4, #16]
 800cada:	bf0c      	ite	eq
 800cadc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cae0:	2500      	movne	r5, #0
 800cae2:	4293      	cmp	r3, r2
 800cae4:	bfc4      	itt	gt
 800cae6:	1a9b      	subgt	r3, r3, r2
 800cae8:	18ed      	addgt	r5, r5, r3
 800caea:	2600      	movs	r6, #0
 800caec:	341a      	adds	r4, #26
 800caee:	42b5      	cmp	r5, r6
 800caf0:	d11a      	bne.n	800cb28 <_printf_common+0xc8>
 800caf2:	2000      	movs	r0, #0
 800caf4:	e008      	b.n	800cb08 <_printf_common+0xa8>
 800caf6:	2301      	movs	r3, #1
 800caf8:	4652      	mov	r2, sl
 800cafa:	4649      	mov	r1, r9
 800cafc:	4638      	mov	r0, r7
 800cafe:	47c0      	blx	r8
 800cb00:	3001      	adds	r0, #1
 800cb02:	d103      	bne.n	800cb0c <_printf_common+0xac>
 800cb04:	f04f 30ff 	mov.w	r0, #4294967295
 800cb08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb0c:	3501      	adds	r5, #1
 800cb0e:	e7c6      	b.n	800ca9e <_printf_common+0x3e>
 800cb10:	18e1      	adds	r1, r4, r3
 800cb12:	1c5a      	adds	r2, r3, #1
 800cb14:	2030      	movs	r0, #48	; 0x30
 800cb16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb1a:	4422      	add	r2, r4
 800cb1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb24:	3302      	adds	r3, #2
 800cb26:	e7c7      	b.n	800cab8 <_printf_common+0x58>
 800cb28:	2301      	movs	r3, #1
 800cb2a:	4622      	mov	r2, r4
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	4638      	mov	r0, r7
 800cb30:	47c0      	blx	r8
 800cb32:	3001      	adds	r0, #1
 800cb34:	d0e6      	beq.n	800cb04 <_printf_common+0xa4>
 800cb36:	3601      	adds	r6, #1
 800cb38:	e7d9      	b.n	800caee <_printf_common+0x8e>
	...

0800cb3c <_printf_i>:
 800cb3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb40:	7e0f      	ldrb	r7, [r1, #24]
 800cb42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb44:	2f78      	cmp	r7, #120	; 0x78
 800cb46:	4691      	mov	r9, r2
 800cb48:	4680      	mov	r8, r0
 800cb4a:	460c      	mov	r4, r1
 800cb4c:	469a      	mov	sl, r3
 800cb4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb52:	d807      	bhi.n	800cb64 <_printf_i+0x28>
 800cb54:	2f62      	cmp	r7, #98	; 0x62
 800cb56:	d80a      	bhi.n	800cb6e <_printf_i+0x32>
 800cb58:	2f00      	cmp	r7, #0
 800cb5a:	f000 80d8 	beq.w	800cd0e <_printf_i+0x1d2>
 800cb5e:	2f58      	cmp	r7, #88	; 0x58
 800cb60:	f000 80a3 	beq.w	800ccaa <_printf_i+0x16e>
 800cb64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb6c:	e03a      	b.n	800cbe4 <_printf_i+0xa8>
 800cb6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb72:	2b15      	cmp	r3, #21
 800cb74:	d8f6      	bhi.n	800cb64 <_printf_i+0x28>
 800cb76:	a101      	add	r1, pc, #4	; (adr r1, 800cb7c <_printf_i+0x40>)
 800cb78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb7c:	0800cbd5 	.word	0x0800cbd5
 800cb80:	0800cbe9 	.word	0x0800cbe9
 800cb84:	0800cb65 	.word	0x0800cb65
 800cb88:	0800cb65 	.word	0x0800cb65
 800cb8c:	0800cb65 	.word	0x0800cb65
 800cb90:	0800cb65 	.word	0x0800cb65
 800cb94:	0800cbe9 	.word	0x0800cbe9
 800cb98:	0800cb65 	.word	0x0800cb65
 800cb9c:	0800cb65 	.word	0x0800cb65
 800cba0:	0800cb65 	.word	0x0800cb65
 800cba4:	0800cb65 	.word	0x0800cb65
 800cba8:	0800ccf5 	.word	0x0800ccf5
 800cbac:	0800cc19 	.word	0x0800cc19
 800cbb0:	0800ccd7 	.word	0x0800ccd7
 800cbb4:	0800cb65 	.word	0x0800cb65
 800cbb8:	0800cb65 	.word	0x0800cb65
 800cbbc:	0800cd17 	.word	0x0800cd17
 800cbc0:	0800cb65 	.word	0x0800cb65
 800cbc4:	0800cc19 	.word	0x0800cc19
 800cbc8:	0800cb65 	.word	0x0800cb65
 800cbcc:	0800cb65 	.word	0x0800cb65
 800cbd0:	0800ccdf 	.word	0x0800ccdf
 800cbd4:	682b      	ldr	r3, [r5, #0]
 800cbd6:	1d1a      	adds	r2, r3, #4
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	602a      	str	r2, [r5, #0]
 800cbdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e0a3      	b.n	800cd30 <_printf_i+0x1f4>
 800cbe8:	6820      	ldr	r0, [r4, #0]
 800cbea:	6829      	ldr	r1, [r5, #0]
 800cbec:	0606      	lsls	r6, r0, #24
 800cbee:	f101 0304 	add.w	r3, r1, #4
 800cbf2:	d50a      	bpl.n	800cc0a <_printf_i+0xce>
 800cbf4:	680e      	ldr	r6, [r1, #0]
 800cbf6:	602b      	str	r3, [r5, #0]
 800cbf8:	2e00      	cmp	r6, #0
 800cbfa:	da03      	bge.n	800cc04 <_printf_i+0xc8>
 800cbfc:	232d      	movs	r3, #45	; 0x2d
 800cbfe:	4276      	negs	r6, r6
 800cc00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc04:	485e      	ldr	r0, [pc, #376]	; (800cd80 <_printf_i+0x244>)
 800cc06:	230a      	movs	r3, #10
 800cc08:	e019      	b.n	800cc3e <_printf_i+0x102>
 800cc0a:	680e      	ldr	r6, [r1, #0]
 800cc0c:	602b      	str	r3, [r5, #0]
 800cc0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cc12:	bf18      	it	ne
 800cc14:	b236      	sxthne	r6, r6
 800cc16:	e7ef      	b.n	800cbf8 <_printf_i+0xbc>
 800cc18:	682b      	ldr	r3, [r5, #0]
 800cc1a:	6820      	ldr	r0, [r4, #0]
 800cc1c:	1d19      	adds	r1, r3, #4
 800cc1e:	6029      	str	r1, [r5, #0]
 800cc20:	0601      	lsls	r1, r0, #24
 800cc22:	d501      	bpl.n	800cc28 <_printf_i+0xec>
 800cc24:	681e      	ldr	r6, [r3, #0]
 800cc26:	e002      	b.n	800cc2e <_printf_i+0xf2>
 800cc28:	0646      	lsls	r6, r0, #25
 800cc2a:	d5fb      	bpl.n	800cc24 <_printf_i+0xe8>
 800cc2c:	881e      	ldrh	r6, [r3, #0]
 800cc2e:	4854      	ldr	r0, [pc, #336]	; (800cd80 <_printf_i+0x244>)
 800cc30:	2f6f      	cmp	r7, #111	; 0x6f
 800cc32:	bf0c      	ite	eq
 800cc34:	2308      	moveq	r3, #8
 800cc36:	230a      	movne	r3, #10
 800cc38:	2100      	movs	r1, #0
 800cc3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc3e:	6865      	ldr	r5, [r4, #4]
 800cc40:	60a5      	str	r5, [r4, #8]
 800cc42:	2d00      	cmp	r5, #0
 800cc44:	bfa2      	ittt	ge
 800cc46:	6821      	ldrge	r1, [r4, #0]
 800cc48:	f021 0104 	bicge.w	r1, r1, #4
 800cc4c:	6021      	strge	r1, [r4, #0]
 800cc4e:	b90e      	cbnz	r6, 800cc54 <_printf_i+0x118>
 800cc50:	2d00      	cmp	r5, #0
 800cc52:	d04d      	beq.n	800ccf0 <_printf_i+0x1b4>
 800cc54:	4615      	mov	r5, r2
 800cc56:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc5a:	fb03 6711 	mls	r7, r3, r1, r6
 800cc5e:	5dc7      	ldrb	r7, [r0, r7]
 800cc60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc64:	4637      	mov	r7, r6
 800cc66:	42bb      	cmp	r3, r7
 800cc68:	460e      	mov	r6, r1
 800cc6a:	d9f4      	bls.n	800cc56 <_printf_i+0x11a>
 800cc6c:	2b08      	cmp	r3, #8
 800cc6e:	d10b      	bne.n	800cc88 <_printf_i+0x14c>
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	07de      	lsls	r6, r3, #31
 800cc74:	d508      	bpl.n	800cc88 <_printf_i+0x14c>
 800cc76:	6923      	ldr	r3, [r4, #16]
 800cc78:	6861      	ldr	r1, [r4, #4]
 800cc7a:	4299      	cmp	r1, r3
 800cc7c:	bfde      	ittt	le
 800cc7e:	2330      	movle	r3, #48	; 0x30
 800cc80:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc84:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc88:	1b52      	subs	r2, r2, r5
 800cc8a:	6122      	str	r2, [r4, #16]
 800cc8c:	f8cd a000 	str.w	sl, [sp]
 800cc90:	464b      	mov	r3, r9
 800cc92:	aa03      	add	r2, sp, #12
 800cc94:	4621      	mov	r1, r4
 800cc96:	4640      	mov	r0, r8
 800cc98:	f7ff fee2 	bl	800ca60 <_printf_common>
 800cc9c:	3001      	adds	r0, #1
 800cc9e:	d14c      	bne.n	800cd3a <_printf_i+0x1fe>
 800cca0:	f04f 30ff 	mov.w	r0, #4294967295
 800cca4:	b004      	add	sp, #16
 800cca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccaa:	4835      	ldr	r0, [pc, #212]	; (800cd80 <_printf_i+0x244>)
 800ccac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ccb0:	6829      	ldr	r1, [r5, #0]
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	f851 6b04 	ldr.w	r6, [r1], #4
 800ccb8:	6029      	str	r1, [r5, #0]
 800ccba:	061d      	lsls	r5, r3, #24
 800ccbc:	d514      	bpl.n	800cce8 <_printf_i+0x1ac>
 800ccbe:	07df      	lsls	r7, r3, #31
 800ccc0:	bf44      	itt	mi
 800ccc2:	f043 0320 	orrmi.w	r3, r3, #32
 800ccc6:	6023      	strmi	r3, [r4, #0]
 800ccc8:	b91e      	cbnz	r6, 800ccd2 <_printf_i+0x196>
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	f023 0320 	bic.w	r3, r3, #32
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	2310      	movs	r3, #16
 800ccd4:	e7b0      	b.n	800cc38 <_printf_i+0xfc>
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	f043 0320 	orr.w	r3, r3, #32
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	2378      	movs	r3, #120	; 0x78
 800cce0:	4828      	ldr	r0, [pc, #160]	; (800cd84 <_printf_i+0x248>)
 800cce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cce6:	e7e3      	b.n	800ccb0 <_printf_i+0x174>
 800cce8:	0659      	lsls	r1, r3, #25
 800ccea:	bf48      	it	mi
 800ccec:	b2b6      	uxthmi	r6, r6
 800ccee:	e7e6      	b.n	800ccbe <_printf_i+0x182>
 800ccf0:	4615      	mov	r5, r2
 800ccf2:	e7bb      	b.n	800cc6c <_printf_i+0x130>
 800ccf4:	682b      	ldr	r3, [r5, #0]
 800ccf6:	6826      	ldr	r6, [r4, #0]
 800ccf8:	6961      	ldr	r1, [r4, #20]
 800ccfa:	1d18      	adds	r0, r3, #4
 800ccfc:	6028      	str	r0, [r5, #0]
 800ccfe:	0635      	lsls	r5, r6, #24
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	d501      	bpl.n	800cd08 <_printf_i+0x1cc>
 800cd04:	6019      	str	r1, [r3, #0]
 800cd06:	e002      	b.n	800cd0e <_printf_i+0x1d2>
 800cd08:	0670      	lsls	r0, r6, #25
 800cd0a:	d5fb      	bpl.n	800cd04 <_printf_i+0x1c8>
 800cd0c:	8019      	strh	r1, [r3, #0]
 800cd0e:	2300      	movs	r3, #0
 800cd10:	6123      	str	r3, [r4, #16]
 800cd12:	4615      	mov	r5, r2
 800cd14:	e7ba      	b.n	800cc8c <_printf_i+0x150>
 800cd16:	682b      	ldr	r3, [r5, #0]
 800cd18:	1d1a      	adds	r2, r3, #4
 800cd1a:	602a      	str	r2, [r5, #0]
 800cd1c:	681d      	ldr	r5, [r3, #0]
 800cd1e:	6862      	ldr	r2, [r4, #4]
 800cd20:	2100      	movs	r1, #0
 800cd22:	4628      	mov	r0, r5
 800cd24:	f7f3 fadc 	bl	80002e0 <memchr>
 800cd28:	b108      	cbz	r0, 800cd2e <_printf_i+0x1f2>
 800cd2a:	1b40      	subs	r0, r0, r5
 800cd2c:	6060      	str	r0, [r4, #4]
 800cd2e:	6863      	ldr	r3, [r4, #4]
 800cd30:	6123      	str	r3, [r4, #16]
 800cd32:	2300      	movs	r3, #0
 800cd34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd38:	e7a8      	b.n	800cc8c <_printf_i+0x150>
 800cd3a:	6923      	ldr	r3, [r4, #16]
 800cd3c:	462a      	mov	r2, r5
 800cd3e:	4649      	mov	r1, r9
 800cd40:	4640      	mov	r0, r8
 800cd42:	47d0      	blx	sl
 800cd44:	3001      	adds	r0, #1
 800cd46:	d0ab      	beq.n	800cca0 <_printf_i+0x164>
 800cd48:	6823      	ldr	r3, [r4, #0]
 800cd4a:	079b      	lsls	r3, r3, #30
 800cd4c:	d413      	bmi.n	800cd76 <_printf_i+0x23a>
 800cd4e:	68e0      	ldr	r0, [r4, #12]
 800cd50:	9b03      	ldr	r3, [sp, #12]
 800cd52:	4298      	cmp	r0, r3
 800cd54:	bfb8      	it	lt
 800cd56:	4618      	movlt	r0, r3
 800cd58:	e7a4      	b.n	800cca4 <_printf_i+0x168>
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	4632      	mov	r2, r6
 800cd5e:	4649      	mov	r1, r9
 800cd60:	4640      	mov	r0, r8
 800cd62:	47d0      	blx	sl
 800cd64:	3001      	adds	r0, #1
 800cd66:	d09b      	beq.n	800cca0 <_printf_i+0x164>
 800cd68:	3501      	adds	r5, #1
 800cd6a:	68e3      	ldr	r3, [r4, #12]
 800cd6c:	9903      	ldr	r1, [sp, #12]
 800cd6e:	1a5b      	subs	r3, r3, r1
 800cd70:	42ab      	cmp	r3, r5
 800cd72:	dcf2      	bgt.n	800cd5a <_printf_i+0x21e>
 800cd74:	e7eb      	b.n	800cd4e <_printf_i+0x212>
 800cd76:	2500      	movs	r5, #0
 800cd78:	f104 0619 	add.w	r6, r4, #25
 800cd7c:	e7f5      	b.n	800cd6a <_printf_i+0x22e>
 800cd7e:	bf00      	nop
 800cd80:	0800d0bd 	.word	0x0800d0bd
 800cd84:	0800d0ce 	.word	0x0800d0ce

0800cd88 <memcpy>:
 800cd88:	440a      	add	r2, r1
 800cd8a:	4291      	cmp	r1, r2
 800cd8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd90:	d100      	bne.n	800cd94 <memcpy+0xc>
 800cd92:	4770      	bx	lr
 800cd94:	b510      	push	{r4, lr}
 800cd96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd9e:	4291      	cmp	r1, r2
 800cda0:	d1f9      	bne.n	800cd96 <memcpy+0xe>
 800cda2:	bd10      	pop	{r4, pc}

0800cda4 <memmove>:
 800cda4:	4288      	cmp	r0, r1
 800cda6:	b510      	push	{r4, lr}
 800cda8:	eb01 0402 	add.w	r4, r1, r2
 800cdac:	d902      	bls.n	800cdb4 <memmove+0x10>
 800cdae:	4284      	cmp	r4, r0
 800cdb0:	4623      	mov	r3, r4
 800cdb2:	d807      	bhi.n	800cdc4 <memmove+0x20>
 800cdb4:	1e43      	subs	r3, r0, #1
 800cdb6:	42a1      	cmp	r1, r4
 800cdb8:	d008      	beq.n	800cdcc <memmove+0x28>
 800cdba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdc2:	e7f8      	b.n	800cdb6 <memmove+0x12>
 800cdc4:	4402      	add	r2, r0
 800cdc6:	4601      	mov	r1, r0
 800cdc8:	428a      	cmp	r2, r1
 800cdca:	d100      	bne.n	800cdce <memmove+0x2a>
 800cdcc:	bd10      	pop	{r4, pc}
 800cdce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cdd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cdd6:	e7f7      	b.n	800cdc8 <memmove+0x24>

0800cdd8 <_free_r>:
 800cdd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdda:	2900      	cmp	r1, #0
 800cddc:	d044      	beq.n	800ce68 <_free_r+0x90>
 800cdde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cde2:	9001      	str	r0, [sp, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f1a1 0404 	sub.w	r4, r1, #4
 800cdea:	bfb8      	it	lt
 800cdec:	18e4      	addlt	r4, r4, r3
 800cdee:	f000 f913 	bl	800d018 <__malloc_lock>
 800cdf2:	4a1e      	ldr	r2, [pc, #120]	; (800ce6c <_free_r+0x94>)
 800cdf4:	9801      	ldr	r0, [sp, #4]
 800cdf6:	6813      	ldr	r3, [r2, #0]
 800cdf8:	b933      	cbnz	r3, 800ce08 <_free_r+0x30>
 800cdfa:	6063      	str	r3, [r4, #4]
 800cdfc:	6014      	str	r4, [r2, #0]
 800cdfe:	b003      	add	sp, #12
 800ce00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce04:	f000 b90e 	b.w	800d024 <__malloc_unlock>
 800ce08:	42a3      	cmp	r3, r4
 800ce0a:	d908      	bls.n	800ce1e <_free_r+0x46>
 800ce0c:	6825      	ldr	r5, [r4, #0]
 800ce0e:	1961      	adds	r1, r4, r5
 800ce10:	428b      	cmp	r3, r1
 800ce12:	bf01      	itttt	eq
 800ce14:	6819      	ldreq	r1, [r3, #0]
 800ce16:	685b      	ldreq	r3, [r3, #4]
 800ce18:	1949      	addeq	r1, r1, r5
 800ce1a:	6021      	streq	r1, [r4, #0]
 800ce1c:	e7ed      	b.n	800cdfa <_free_r+0x22>
 800ce1e:	461a      	mov	r2, r3
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	b10b      	cbz	r3, 800ce28 <_free_r+0x50>
 800ce24:	42a3      	cmp	r3, r4
 800ce26:	d9fa      	bls.n	800ce1e <_free_r+0x46>
 800ce28:	6811      	ldr	r1, [r2, #0]
 800ce2a:	1855      	adds	r5, r2, r1
 800ce2c:	42a5      	cmp	r5, r4
 800ce2e:	d10b      	bne.n	800ce48 <_free_r+0x70>
 800ce30:	6824      	ldr	r4, [r4, #0]
 800ce32:	4421      	add	r1, r4
 800ce34:	1854      	adds	r4, r2, r1
 800ce36:	42a3      	cmp	r3, r4
 800ce38:	6011      	str	r1, [r2, #0]
 800ce3a:	d1e0      	bne.n	800cdfe <_free_r+0x26>
 800ce3c:	681c      	ldr	r4, [r3, #0]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	6053      	str	r3, [r2, #4]
 800ce42:	4421      	add	r1, r4
 800ce44:	6011      	str	r1, [r2, #0]
 800ce46:	e7da      	b.n	800cdfe <_free_r+0x26>
 800ce48:	d902      	bls.n	800ce50 <_free_r+0x78>
 800ce4a:	230c      	movs	r3, #12
 800ce4c:	6003      	str	r3, [r0, #0]
 800ce4e:	e7d6      	b.n	800cdfe <_free_r+0x26>
 800ce50:	6825      	ldr	r5, [r4, #0]
 800ce52:	1961      	adds	r1, r4, r5
 800ce54:	428b      	cmp	r3, r1
 800ce56:	bf04      	itt	eq
 800ce58:	6819      	ldreq	r1, [r3, #0]
 800ce5a:	685b      	ldreq	r3, [r3, #4]
 800ce5c:	6063      	str	r3, [r4, #4]
 800ce5e:	bf04      	itt	eq
 800ce60:	1949      	addeq	r1, r1, r5
 800ce62:	6021      	streq	r1, [r4, #0]
 800ce64:	6054      	str	r4, [r2, #4]
 800ce66:	e7ca      	b.n	800cdfe <_free_r+0x26>
 800ce68:	b003      	add	sp, #12
 800ce6a:	bd30      	pop	{r4, r5, pc}
 800ce6c:	240008e0 	.word	0x240008e0

0800ce70 <sbrk_aligned>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	4e0e      	ldr	r6, [pc, #56]	; (800ceac <sbrk_aligned+0x3c>)
 800ce74:	460c      	mov	r4, r1
 800ce76:	6831      	ldr	r1, [r6, #0]
 800ce78:	4605      	mov	r5, r0
 800ce7a:	b911      	cbnz	r1, 800ce82 <sbrk_aligned+0x12>
 800ce7c:	f000 f8bc 	bl	800cff8 <_sbrk_r>
 800ce80:	6030      	str	r0, [r6, #0]
 800ce82:	4621      	mov	r1, r4
 800ce84:	4628      	mov	r0, r5
 800ce86:	f000 f8b7 	bl	800cff8 <_sbrk_r>
 800ce8a:	1c43      	adds	r3, r0, #1
 800ce8c:	d00a      	beq.n	800cea4 <sbrk_aligned+0x34>
 800ce8e:	1cc4      	adds	r4, r0, #3
 800ce90:	f024 0403 	bic.w	r4, r4, #3
 800ce94:	42a0      	cmp	r0, r4
 800ce96:	d007      	beq.n	800cea8 <sbrk_aligned+0x38>
 800ce98:	1a21      	subs	r1, r4, r0
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	f000 f8ac 	bl	800cff8 <_sbrk_r>
 800cea0:	3001      	adds	r0, #1
 800cea2:	d101      	bne.n	800cea8 <sbrk_aligned+0x38>
 800cea4:	f04f 34ff 	mov.w	r4, #4294967295
 800cea8:	4620      	mov	r0, r4
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}
 800ceac:	240008e4 	.word	0x240008e4

0800ceb0 <_malloc_r>:
 800ceb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb4:	1ccd      	adds	r5, r1, #3
 800ceb6:	f025 0503 	bic.w	r5, r5, #3
 800ceba:	3508      	adds	r5, #8
 800cebc:	2d0c      	cmp	r5, #12
 800cebe:	bf38      	it	cc
 800cec0:	250c      	movcc	r5, #12
 800cec2:	2d00      	cmp	r5, #0
 800cec4:	4607      	mov	r7, r0
 800cec6:	db01      	blt.n	800cecc <_malloc_r+0x1c>
 800cec8:	42a9      	cmp	r1, r5
 800ceca:	d905      	bls.n	800ced8 <_malloc_r+0x28>
 800cecc:	230c      	movs	r3, #12
 800cece:	603b      	str	r3, [r7, #0]
 800ced0:	2600      	movs	r6, #0
 800ced2:	4630      	mov	r0, r6
 800ced4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced8:	4e2e      	ldr	r6, [pc, #184]	; (800cf94 <_malloc_r+0xe4>)
 800ceda:	f000 f89d 	bl	800d018 <__malloc_lock>
 800cede:	6833      	ldr	r3, [r6, #0]
 800cee0:	461c      	mov	r4, r3
 800cee2:	bb34      	cbnz	r4, 800cf32 <_malloc_r+0x82>
 800cee4:	4629      	mov	r1, r5
 800cee6:	4638      	mov	r0, r7
 800cee8:	f7ff ffc2 	bl	800ce70 <sbrk_aligned>
 800ceec:	1c43      	adds	r3, r0, #1
 800ceee:	4604      	mov	r4, r0
 800cef0:	d14d      	bne.n	800cf8e <_malloc_r+0xde>
 800cef2:	6834      	ldr	r4, [r6, #0]
 800cef4:	4626      	mov	r6, r4
 800cef6:	2e00      	cmp	r6, #0
 800cef8:	d140      	bne.n	800cf7c <_malloc_r+0xcc>
 800cefa:	6823      	ldr	r3, [r4, #0]
 800cefc:	4631      	mov	r1, r6
 800cefe:	4638      	mov	r0, r7
 800cf00:	eb04 0803 	add.w	r8, r4, r3
 800cf04:	f000 f878 	bl	800cff8 <_sbrk_r>
 800cf08:	4580      	cmp	r8, r0
 800cf0a:	d13a      	bne.n	800cf82 <_malloc_r+0xd2>
 800cf0c:	6821      	ldr	r1, [r4, #0]
 800cf0e:	3503      	adds	r5, #3
 800cf10:	1a6d      	subs	r5, r5, r1
 800cf12:	f025 0503 	bic.w	r5, r5, #3
 800cf16:	3508      	adds	r5, #8
 800cf18:	2d0c      	cmp	r5, #12
 800cf1a:	bf38      	it	cc
 800cf1c:	250c      	movcc	r5, #12
 800cf1e:	4629      	mov	r1, r5
 800cf20:	4638      	mov	r0, r7
 800cf22:	f7ff ffa5 	bl	800ce70 <sbrk_aligned>
 800cf26:	3001      	adds	r0, #1
 800cf28:	d02b      	beq.n	800cf82 <_malloc_r+0xd2>
 800cf2a:	6823      	ldr	r3, [r4, #0]
 800cf2c:	442b      	add	r3, r5
 800cf2e:	6023      	str	r3, [r4, #0]
 800cf30:	e00e      	b.n	800cf50 <_malloc_r+0xa0>
 800cf32:	6822      	ldr	r2, [r4, #0]
 800cf34:	1b52      	subs	r2, r2, r5
 800cf36:	d41e      	bmi.n	800cf76 <_malloc_r+0xc6>
 800cf38:	2a0b      	cmp	r2, #11
 800cf3a:	d916      	bls.n	800cf6a <_malloc_r+0xba>
 800cf3c:	1961      	adds	r1, r4, r5
 800cf3e:	42a3      	cmp	r3, r4
 800cf40:	6025      	str	r5, [r4, #0]
 800cf42:	bf18      	it	ne
 800cf44:	6059      	strne	r1, [r3, #4]
 800cf46:	6863      	ldr	r3, [r4, #4]
 800cf48:	bf08      	it	eq
 800cf4a:	6031      	streq	r1, [r6, #0]
 800cf4c:	5162      	str	r2, [r4, r5]
 800cf4e:	604b      	str	r3, [r1, #4]
 800cf50:	4638      	mov	r0, r7
 800cf52:	f104 060b 	add.w	r6, r4, #11
 800cf56:	f000 f865 	bl	800d024 <__malloc_unlock>
 800cf5a:	f026 0607 	bic.w	r6, r6, #7
 800cf5e:	1d23      	adds	r3, r4, #4
 800cf60:	1af2      	subs	r2, r6, r3
 800cf62:	d0b6      	beq.n	800ced2 <_malloc_r+0x22>
 800cf64:	1b9b      	subs	r3, r3, r6
 800cf66:	50a3      	str	r3, [r4, r2]
 800cf68:	e7b3      	b.n	800ced2 <_malloc_r+0x22>
 800cf6a:	6862      	ldr	r2, [r4, #4]
 800cf6c:	42a3      	cmp	r3, r4
 800cf6e:	bf0c      	ite	eq
 800cf70:	6032      	streq	r2, [r6, #0]
 800cf72:	605a      	strne	r2, [r3, #4]
 800cf74:	e7ec      	b.n	800cf50 <_malloc_r+0xa0>
 800cf76:	4623      	mov	r3, r4
 800cf78:	6864      	ldr	r4, [r4, #4]
 800cf7a:	e7b2      	b.n	800cee2 <_malloc_r+0x32>
 800cf7c:	4634      	mov	r4, r6
 800cf7e:	6876      	ldr	r6, [r6, #4]
 800cf80:	e7b9      	b.n	800cef6 <_malloc_r+0x46>
 800cf82:	230c      	movs	r3, #12
 800cf84:	603b      	str	r3, [r7, #0]
 800cf86:	4638      	mov	r0, r7
 800cf88:	f000 f84c 	bl	800d024 <__malloc_unlock>
 800cf8c:	e7a1      	b.n	800ced2 <_malloc_r+0x22>
 800cf8e:	6025      	str	r5, [r4, #0]
 800cf90:	e7de      	b.n	800cf50 <_malloc_r+0xa0>
 800cf92:	bf00      	nop
 800cf94:	240008e0 	.word	0x240008e0

0800cf98 <_realloc_r>:
 800cf98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf9c:	4680      	mov	r8, r0
 800cf9e:	4614      	mov	r4, r2
 800cfa0:	460e      	mov	r6, r1
 800cfa2:	b921      	cbnz	r1, 800cfae <_realloc_r+0x16>
 800cfa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa8:	4611      	mov	r1, r2
 800cfaa:	f7ff bf81 	b.w	800ceb0 <_malloc_r>
 800cfae:	b92a      	cbnz	r2, 800cfbc <_realloc_r+0x24>
 800cfb0:	f7ff ff12 	bl	800cdd8 <_free_r>
 800cfb4:	4625      	mov	r5, r4
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfbc:	f000 f838 	bl	800d030 <_malloc_usable_size_r>
 800cfc0:	4284      	cmp	r4, r0
 800cfc2:	4607      	mov	r7, r0
 800cfc4:	d802      	bhi.n	800cfcc <_realloc_r+0x34>
 800cfc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cfca:	d812      	bhi.n	800cff2 <_realloc_r+0x5a>
 800cfcc:	4621      	mov	r1, r4
 800cfce:	4640      	mov	r0, r8
 800cfd0:	f7ff ff6e 	bl	800ceb0 <_malloc_r>
 800cfd4:	4605      	mov	r5, r0
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d0ed      	beq.n	800cfb6 <_realloc_r+0x1e>
 800cfda:	42bc      	cmp	r4, r7
 800cfdc:	4622      	mov	r2, r4
 800cfde:	4631      	mov	r1, r6
 800cfe0:	bf28      	it	cs
 800cfe2:	463a      	movcs	r2, r7
 800cfe4:	f7ff fed0 	bl	800cd88 <memcpy>
 800cfe8:	4631      	mov	r1, r6
 800cfea:	4640      	mov	r0, r8
 800cfec:	f7ff fef4 	bl	800cdd8 <_free_r>
 800cff0:	e7e1      	b.n	800cfb6 <_realloc_r+0x1e>
 800cff2:	4635      	mov	r5, r6
 800cff4:	e7df      	b.n	800cfb6 <_realloc_r+0x1e>
	...

0800cff8 <_sbrk_r>:
 800cff8:	b538      	push	{r3, r4, r5, lr}
 800cffa:	4d06      	ldr	r5, [pc, #24]	; (800d014 <_sbrk_r+0x1c>)
 800cffc:	2300      	movs	r3, #0
 800cffe:	4604      	mov	r4, r0
 800d000:	4608      	mov	r0, r1
 800d002:	602b      	str	r3, [r5, #0]
 800d004:	f7f4 fc16 	bl	8001834 <_sbrk>
 800d008:	1c43      	adds	r3, r0, #1
 800d00a:	d102      	bne.n	800d012 <_sbrk_r+0x1a>
 800d00c:	682b      	ldr	r3, [r5, #0]
 800d00e:	b103      	cbz	r3, 800d012 <_sbrk_r+0x1a>
 800d010:	6023      	str	r3, [r4, #0]
 800d012:	bd38      	pop	{r3, r4, r5, pc}
 800d014:	240008e8 	.word	0x240008e8

0800d018 <__malloc_lock>:
 800d018:	4801      	ldr	r0, [pc, #4]	; (800d020 <__malloc_lock+0x8>)
 800d01a:	f000 b811 	b.w	800d040 <__retarget_lock_acquire_recursive>
 800d01e:	bf00      	nop
 800d020:	240008ec 	.word	0x240008ec

0800d024 <__malloc_unlock>:
 800d024:	4801      	ldr	r0, [pc, #4]	; (800d02c <__malloc_unlock+0x8>)
 800d026:	f000 b80c 	b.w	800d042 <__retarget_lock_release_recursive>
 800d02a:	bf00      	nop
 800d02c:	240008ec 	.word	0x240008ec

0800d030 <_malloc_usable_size_r>:
 800d030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d034:	1f18      	subs	r0, r3, #4
 800d036:	2b00      	cmp	r3, #0
 800d038:	bfbc      	itt	lt
 800d03a:	580b      	ldrlt	r3, [r1, r0]
 800d03c:	18c0      	addlt	r0, r0, r3
 800d03e:	4770      	bx	lr

0800d040 <__retarget_lock_acquire_recursive>:
 800d040:	4770      	bx	lr

0800d042 <__retarget_lock_release_recursive>:
 800d042:	4770      	bx	lr

0800d044 <_init>:
 800d044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d046:	bf00      	nop
 800d048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d04a:	bc08      	pop	{r3}
 800d04c:	469e      	mov	lr, r3
 800d04e:	4770      	bx	lr

0800d050 <_fini>:
 800d050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d052:	bf00      	nop
 800d054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d056:	bc08      	pop	{r3}
 800d058:	469e      	mov	lr, r3
 800d05a:	4770      	bx	lr
